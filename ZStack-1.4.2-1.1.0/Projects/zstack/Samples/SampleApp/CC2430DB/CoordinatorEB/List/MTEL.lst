##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   17/Oct/2013  21:25:52 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\mt\MTEL.c                                       #
#    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCoor #
#                          d.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS       #
#                          "-DCONST=const __code" -DGENERIC=__generic) -f    #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConfig. #
#                          cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800     #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\Source\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mt\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2430EB\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\osal\mcu #
#                          \ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC #
#                          2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\osal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ #
#                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects #
#                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. #
#                          \Components\stack\af\ -I                          #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\stack\nw #
#                          k\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C #
#                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2430DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ #
#                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\zmac\f8w #
#                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                       #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          mac\high_level\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf03\ -I                #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\low_ #
#                          level\srf03\single_chip\ -D CC2430EB -D ZTOOL_P1  #
#                          -D MT_TASK -D MT_ZDO_FUNC -lC                     #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\ -lA            #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\CoordinatorEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\mt\MTEL.c"                                     #
#    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\MTEL.lst        #
#    Object file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\Obj\MTEL.r51         #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mt\MTEL.c
      1          /*********************************************************************
      2              Filename:       MTEL.c
      3              Revised:        $Date: 2007-05-16 11:21:09 -0700 (Wed, 16 May 2007) $
      4              Revision:       $Revision: 14313 $
      5          
      6              Description:
      7          
      8                  MonitorTest Event Loop functions.  Everything in the
      9                  MonitorTest Task (except the serial driver).
     10          
     11              Notes:
     12          
     13              Copyright (c) 2006 by Texas Instruments, Inc.
     14              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     15              derivative works, modify, distribute, perform, display or sell this
     16              software and/or its documentation for any purpose is prohibited
     17              without the express written consent of Texas Instruments, Inc.
     18          *********************************************************************/
     19          
     20          #if defined( MT_TASK )
     21          
     22          /*********************************************************************
     23           * INCLUDES
     24           */
     25          #include "ZComDef.h"
     26          #include "OnBoard.h"

   \                                 In segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1

   \                                 In segment XDATA_AN, at 0xe000
   \   mboxMsg_t __xdata mboxMsg
   \                     mboxMsg:
   \   000000                DS 8
     27          #include "OSAL.h"
     28          #include "OSAL_Memory.h"
     29          #include "OSAL_Nv.h"
     30          #include "MTEL.h"
     31          #include "DebugTrace.h"
     32          #include "ZMAC.h"
     33          
     34          #if !defined ( NONWK )
     35            #include "NLMEDE.h"
     36            #include "nwk_bufs.h"
     37            #include "ZDObject.h"
     38            #include "ssp.h"
     39            #include "nwk_util.h"
     40          #endif
     41          
     42          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     43            #include "MT_MAC.h"
     44          #endif
     45          #if defined( MT_NWK_FUNC ) || defined( MT_NWK_CB_FUNC )
     46            #include "MT_NWK.h"
     47            #include "nwk.h"
     48            #include "nwk_bufs.h"
     49          #endif
     50          #if defined( MT_AF_FUNC ) || defined( MT_AF_CB_FUNC )
     51            #include "MT_AF.h"
     52          #endif
     53          #if defined( MT_USER_TEST_FUNC )
     54            #include "AF.h"
     55          #endif
     56          #if defined( MT_ZDO_FUNC )
     57            #include "MT_ZDO.h"
     58          #endif
     59          #if defined (MT_SAPI_FUNC)
     60          	#include "MT_SAPI.h"
     61          #endif
     62          #if defined( APP_TP )
     63           #include "TestProfile.h"
     64          #endif
     65          #if defined( APP_TP2 )
     66           #include "TestProfile2.h"
     67          #endif
     68          
     69          #if defined(APP_TGEN)
     70            #include "TrafficGenApp.h"
     71          #endif
     72          #if defined(APP_DEBUG)
     73          	#include "DebugApp.h"
     74          #endif
     75          #if defined (NWK_TEST)
     76          	#include "HWTTApp.h"
     77          #endif
     78          
     79          /* HAL */
     80          #include "hal_uart.h"
     81          #include "hal_led.h"
     82          #include "hal_key.h"
     83          #include "hal_mailbox.h"
     84          #include "SPIMgr.h"
     85          
     86          /*********************************************************************
     87           * MACROS
     88           */
     89          #define MTEL_DEBUG_INFO( nParams, p1, p2, p3 ) DEBUG_INFO( COMPID_MTEL, nParams, p1, p2, p3 )
     90          
     91          #if defined( EXTERNAL_RAM )
     92            #define IS_MEM_VALID( Addr )  \
     93                  /* Check for valid internal RAM address. */\
     94              ( ( (((Addr) >= MCU_RAM_BEG) && ((Addr) <= MCU_RAM_END)) ||  \
     95                  /* Check for valid external RAM address. */\
     96                  (((Addr) >= EXT_RAM_BEG) && ((Addr) <= EXT_RAM_END)) ) ? TRUE : FALSE )
     97          #else
     98            #define IS_MEM_VALID( Addr )  \
     99                  /* Check for valid internal RAM address. */\
    100              ( ( ((Addr) >= MCU_RAM_BEG) && ((Addr) <= MCU_RAM_END) ) ? TRUE : FALSE )
    101          #endif
    102          
    103          /*********************************************************************
    104           * CONSTANTS
    105           */
    106          
    107          #ifdef ZPORT
    108          const char *MTVersionString[] = {"1.00 (F8W1.4.2-ZP)", "1.10 (F8W1.4.2-ZP)"};
    109          #else

   \                                 In segment XDATA_I, align 1, keep-with-next
    110          const char *MTVersionString[] = {"1.00 (F8W1.4.2)", "1.10 (F8W1.4.2)"};
   \                     MTVersionString:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for MTVersionString>`
   \   000004                REQUIRE __INIT_XDATA_I
    111          #endif
    112          
    113          /*********************************************************************
    114           * TYPEDEFS
    115           */
    116          
    117          /*********************************************************************
    118           * GLOBAL VARIABLES
    119           */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    120          byte MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    121          byte debugThreshold;
   \                     debugThreshold:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    122          byte debugCompId;
   \                     debugCompId:
   \   000000                DS 1
    123          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    124          UINT16 save_cmd;
   \                     save_cmd:
   \   000000                DS 2
    125          
    126          //DEBUG

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    127          uint32 longvar;
   \                     longvar:
   \   000000                DS 4

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    128          uint16 *temp_glob_ptr1;
   \                     temp_glob_ptr1:
   \   000000                DS 2

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    129          uint16 *temp_glob_ptr2;
   \                     temp_glob_ptr2:
   \   000000                DS 2
    130          
    131          /*********************************************************************
    132           * EXTERNAL VARIABLES
    133           */
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          extern unsigned int mac_sim_eventLoop( void );
    139          
    140          #ifdef MACSIM
    141            // Used to pass Zignet message
    142            extern void MACSIM_TranslateMsg( byte *buf, byte bLen );
    143          #endif
    144          
    145          /*********************************************************************
    146           * LOCAL VARIABLES
    147           */
    148          
    149          /*********************************************************************
    150           * LOCAL FUNCTIONS
    151           */
    152          void MT_MsgQueueInit( void );
    153          void MT_ProcessCommand( mtOSALSerialData_t *msg );
    154          void MT_ProcessSerialCommand( byte *msg );
    155          byte MT_RAMRead( UINT16 addr, byte *pData );
    156          byte MT_RAMWrite( UINT16 addr , byte val );
    157          void MT_ProcessDebugMsg( mtDebugMsg_t *pData );
    158          void MT_ProcessDebugStr( mtDebugStr_t *pData );
    159          byte MT_SetDebugThreshold( byte comp_id, byte threshold );
    160          void MT_SendErrorNotification( byte err );
    161          void MT_ResetMsgQueue( void );
    162          byte MT_QueueMsg( byte *msg , byte len );
    163          void MT_ProcessQueue( void );
    164          void MT_SendSPIRespMsg( byte ret, uint16 cmd_id, byte msgLen, byte respLen);
    165          void MT_Reset(byte typID);
    166          byte MT_ProcessSetNV( byte *pData );
    167          void MT_ProcessGetNV( byte *pData );
    168          void MT_ProcessGetNvInfo( void );
    169          void MT_ProcessGetDeviceInfo( void );
    170          byte MTProcessAppMsg( byte *pData, byte len );
    171          void MTProcessAppRspMsg( byte *pData, byte len );
    172          
    173          #if (defined HAL_LED) && (HAL_LED == TRUE)
    174          byte MTProcessLedControl( byte *pData );
    175          #endif
    176          
    177          #if defined ( MT_USER_TEST_FUNC )
    178          void MT_ProcessAppUserCmd( byte *pData );
    179          #endif
    180          
    181          /*********************************************************************
    182           * @fn      MT_TaskInit
    183           *
    184           * @brief
    185           *
    186           *   MonitorTest Task Initialization.  This function is put into the
    187           *   task table.
    188           *
    189           * @param   byte task_id - task ID of the MT Task
    190           *
    191           * @return  void
    192           *
    193           *********************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    194          void MT_TaskInit( byte task_id )
   \                     MT_TaskInit:
    195          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    196            MT_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#MT_TaskID
   \   000008   F0           MOVX    @DPTR,A
    197          
    198            debugThreshold = 0;
   \   000009   E4           CLR     A
   \   00000A   90....       MOV     DPTR,#debugThreshold
   \   00000D   F0           MOVX    @DPTR,A
    199            debugCompId = 0;
   \   00000E   90....       MOV     DPTR,#debugCompId
   \   000011   F0           MOVX    @DPTR,A
    200          
    201            // Initialize the Serial port
    202            SPIMgr_Init();
   \   000012                ; Setup parameters for call to function SPIMgr_Init
   \   000012   90....       MOV     DPTR,#(SPIMgr_Init & 0xffff)
   \   000015   74..         MOV     A,#((SPIMgr_Init >> 16) & 0xff)
   \   000017   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    203          
    204          } /* MT_TaskInit() */
   \   00001A   02....       LJMP    ?Subroutine14 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    205          
    206          #ifdef ZTOOL_PORT
    207          /*********************************************************************
    208           * @fn      MT_IndReset()
    209           *
    210           * @brief   Sends a ZTOOL "reset response" message.
    211           *
    212           * @param   None
    213           *
    214           * @return  None
    215           *
    216           *********************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    217          void MT_IndReset( void )
   \                     MT_IndReset:
    218          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    219          
    220            byte rsp = 0;  // Reset type==0 indicates Z-Stack reset
   \   00000A   E4           CLR     A
   \   00000B   12....       LCALL   ?Subroutine2 & 0xFFFF
    221          
    222            // Send out Reset Response message
    223            MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + sizeof( rsp )),
    224                                          (SPI_RESPONSE_BIT | SPI_CMD_SYS_RESET),
    225                                          sizeof( rsp ), &rsp );
   \                     ??CrossCallReturnLabel_8:
   \   00000E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000011   7C01         MOV     R4,#0x1
   \   000013   7A05         MOV     R2,#0x5
   \   000015   02....       LJMP    ?Subroutine15 & 0xFFFF
    226          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   7B10         MOV     R3,#0x10
   \   000002   7906         MOV     R1,#0x6
   \   000004   90....       MOV     DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
   \   000007   74..         MOV     A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000011   7401         MOV     A,#0x1
   \                     ??Subroutine15_0:
   \   000013   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine15_1:
   \   000016   7F02         MOV     R7,#0x2
   \   000018   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   F0           MOVX    @DPTR,A
   \   000007                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000007                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000007   8582..       MOV     ?V0 + 0,DPL
   \   00000A   8583..       MOV     ?V0 + 1,DPH
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   22           RET
    227          #endif
    228          
    229          /*********************************************************************
    230           * @fn      MT_ProcessEvent
    231           *
    232           * @brief
    233           *
    234           *   MonitorTest Task Event Processor.  This task is put into the
    235           *   task table.
    236           *
    237           * @param   byte task_id - task ID of the MT Task
    238           * @param   UINT16 events - event(s) for the MT Task
    239           *
    240           * @return  void
    241           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    242          UINT16 MT_ProcessEvent( byte task_id, UINT16 events )
   \                     MT_ProcessEvent:
    243          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    244            uint8 *msg_ptr;
    245          
    246            // Could be multiple events, so switch won't work
    247          
    248            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??MT_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??MT_ProcessEvent_0:
   \   000011   701F         JNZ     ??MT_ProcessEvent_1
    249            {
    250              while ( (msg_ptr = osal_msg_receive( MT_TaskID )) )
    251              {
    252                MT_ProcessCommand( (mtOSALSerialData_t *)msg_ptr );
    253              }
    254          
    255              // Return unproccessed events
    256              return (events ^ SYS_EVENT_MSG);
    257            }
    258          
    259          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    260            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \   000013   EE           MOV     A,R6
   \   000014   5404         ANL     A,#0x4
   \   000016   6034         JZ      ??MT_ProcessEvent_2
    261            {
    262              // Do sometype of error processing
    263              MT_SendErrorNotification(RECEIVE_BUFFER_FULL);
   \   000018                ; Setup parameters for call to function MT_SendErrorNotification
   \   000018   7902         MOV     R1,#0x2
   \   00001A   90....       MOV     DPTR,#(MT_SendErrorNotification & 0xffff)
   \   00001D   74..         MOV     A,#((MT_SendErrorNotification >> 16) & 0xff)
   \   00001F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    264          
    265              // Return unproccessed events
    266              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   000022   7404         MOV     A,#0x4
   \   000024   6E           XRL     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \                     ??MT_ProcessEvent_3:
   \   000027   FB           MOV     R3,A
   \   000028   8026         SJMP    ??MT_ProcessEvent_4
    267            }
   \                     ??MT_ProcessEvent_5:
   \   00002A                ; Setup parameters for call to function MT_ProcessCommand
   \   00002A   90....       MOV     DPTR,#(MT_ProcessCommand & 0xffff)
   \   00002D   74..         MOV     A,#((MT_ProcessCommand >> 16) & 0xff)
   \   00002F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??MT_ProcessEvent_1:
   \   000032                ; Setup parameters for call to function osal_msg_receive
   \   000032   90....       MOV     DPTR,#MT_TaskID
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   90....       MOV     DPTR,#(osal_msg_receive & 0xffff)
   \   00003A   74..         MOV     A,#((osal_msg_receive >> 16) & 0xff)
   \   00003C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003F   EA           MOV     A,R2
   \   000040   7001         JNZ     ??MT_ProcessEvent_6
   \   000042   EB           MOV     A,R3
   \                     ??MT_ProcessEvent_6:
   \   000043   70E5         JNZ     ??MT_ProcessEvent_5
   \   000045   EE           MOV     A,R6
   \   000046   FA           MOV     R2,A
   \   000047   7480         MOV     A,#-0x80
   \   000049   6F           XRL     A,R7
   \   00004A   80DB         SJMP    ??MT_ProcessEvent_3
    268          #endif
    269          
    270            // Discard or make more handlers
    271            return 0;
   \                     ??MT_ProcessEvent_2:
   \   00004C   7A00         MOV     R2,#0x0
   \   00004E   7B00         MOV     R3,#0x0
   \                     ??MT_ProcessEvent_4:
   \   000050   02....       LJMP    ??Subroutine15_1 & 0xFFFF
    272          
    273          } /* MT_ProcessEvent() */
    274          
    275          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    276          /*********************************************************************
    277           * @fn      MT_BuildSPIMsg
    278           *
    279           * @brief
    280           *
    281           *   Format an SPI message.
    282           *
    283           * @param   UINT16 cmd - command id
    284           * @param   byte *msg - pointer to message buffer
    285           * @param   byte dataLen - length of data field
    286           * @param   byte *pData - pointer to data field
    287           *
    288           * @return  void
    289           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    290          void MT_BuildSPIMsg( UINT16 cmd, byte *msg, byte dataLen, byte *pData )
   \                     MT_BuildSPIMsg:
    291          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 3,R1
   \   00000B   740E         MOV     A,#0xe
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine6 & 0xFFFF
    292            byte *msgPtr;
    293          
    294            *msg++ = SOP_VALUE;
   \                     ??CrossCallReturnLabel_16:
   \   000013   7402         MOV     A,#0x2
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   AE82         MOV     R6,DPL
   \   00001D   AF83         MOV     R7,DPH
    295          
    296            msgPtr = msg;
   \   00001F   8E..         MOV     ?V0 + 4,R6
   \   000021   8F..         MOV     ?V0 + 5,R7
    297          
    298            *msg++ = (byte)(HI_UINT16( cmd ));
   \   000023   EB           MOV     A,R3
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
    299            *msg++ = (byte)(LO_UINT16( cmd ));
   \   000026   EA           MOV     A,R2
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   0E           INC     R6
   \   00002A   0E           INC     R6
   \   00002B   AF83         MOV     R7,DPH
    300          
    301            if ( pData )
   \   00002D   E5..         MOV     A,?V0 + 0
   \   00002F   7002         JNZ     ??MT_BuildSPIMsg_0
   \   000031   E5..         MOV     A,?V0 + 1
   \                     ??MT_BuildSPIMsg_0:
   \   000033   602E         JZ      ??MT_BuildSPIMsg_1
    302            {
    303              *msg++ = dataLen;
   \   000035   E9           MOV     A,R1
   \   000036   F0           MOVX    @DPTR,A
    304          
    305              msg = osal_memcpy( msg, pData, dataLen );
   \   000037                ; Setup parameters for call to function osal_memcpy
   \   000037   75..00       MOV     ?V0 + 2,#0x0
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003F   E9           MOV     A,R1
   \   000040   FC           MOV     R4,A
   \   000041   7D00         MOV     R5,#0x0
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   A3           INC     DPTR
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   00004F   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   000051   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000054   7403         MOV     A,#0x3
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   \   000059   8A..         MOV     ?V0 + 0,R2
   \   00005B   8B..         MOV     ?V0 + 1,R3
   \   00005D   AE..         MOV     R6,?V0 + 0
   \   00005F   AF..         MOV     R7,?V0 + 1
   \   000061   8006         SJMP    ??MT_BuildSPIMsg_2
    306            }
    307            else
    308              *msg++ = 0;
   \                     ??MT_BuildSPIMsg_1:
   \   000063   E4           CLR     A
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   0E           INC     R6
   \   000067   AF83         MOV     R7,DPH
    309          
    310            *msg = SPIMgr_CalcFCS( msgPtr, (byte)(3 + dataLen) );
   \                     ??MT_BuildSPIMsg_2:
   \   000069                ; Setup parameters for call to function SPIMgr_CalcFCS
   \   000069   7403         MOV     A,#0x3
   \   00006B   25..         ADD     A,?V0 + 3
   \   00006D   F9           MOV     R1,A
   \   00006E   AA..         MOV     R2,?V0 + 4
   \   000070   AB..         MOV     R3,?V0 + 5
   \   000072   90....       MOV     DPTR,#(SPIMgr_CalcFCS & 0xffff)
   \   000075   74..         MOV     A,#((SPIMgr_CalcFCS >> 16) & 0xff)
   \   000077   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00007A   E9           MOV     A,R1
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   F0           MOVX    @DPTR,A
    311          }
   \   000080   02....       LJMP    ??Subroutine16_1 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7401         MOV     A,#0x1
   \                     ??Subroutine16_0:
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine16_1:
   \   000005   7F06         MOV     R7,#0x6
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA
    312          #endif
    313          
    314          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    315          /*********************************************************************
    316           * @fn      MT_BuildAndSendZToolResponse
    317           *
    318           * @brief
    319           *
    320           *   Build and send a ZTOOL msg
    321           *
    322           * @param   byte err
    323           *
    324           * @return  void
    325           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    326          void MT_BuildAndSendZToolResponse( byte msgLen, uint16 cmd,
   \                     MT_BuildAndSendZToolResponse:
    327                                             byte dataLen, byte *pData )
    328          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   8B..         MOV     ?V0 + 7,R3
   \   00000B   8C..         MOV     ?V0 + 3,R4
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine6 & 0xFFFF
    329            byte *msg_ptr;
    330          
    331            // Get a message buffer to build response message
    332            msg_ptr = osal_mem_alloc( msgLen );
   \                     ??CrossCallReturnLabel_17:
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   E9           MOV     A,R1
   \   000016   FA           MOV     R2,A
   \   000017   7B00         MOV     R3,#0x0
   \   000019   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   00001C   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   00001E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000021   8A..         MOV     ?V0 + 4,R2
   \   000023   8B..         MOV     ?V0 + 5,R3
   \   000025   AE..         MOV     R6,?V0 + 4
   \   000027   AF..         MOV     R7,?V0 + 5
    333            if ( msg_ptr )
   \   000029   EE           MOV     A,R6
   \   00002A   7001         JNZ     ??MT_BuildAndSendZToolResponse_0
   \   00002C   EF           MOV     A,R7
   \                     ??MT_BuildAndSendZToolResponse_0:
   \   00002D   603A         JZ      ??MT_BuildAndSendZToolResponse_1
    334            {
    335          #ifdef SPI_MGR_DEFAULT_PORT
    336              MT_BuildSPIMsg( cmd, msg_ptr, dataLen, pData );
   \   00002F                ; Setup parameters for call to function MT_BuildSPIMsg
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   A9..         MOV     R1,?V0 + 3
   \   000036   EE           MOV     A,R6
   \   000037   FC           MOV     R4,A
   \   000038   EF           MOV     A,R7
   \   000039   FD           MOV     R5,A
   \   00003A   AA..         MOV     R2,?V0 + 6
   \   00003C   AB..         MOV     R3,?V0 + 7
   \   00003E   90....       MOV     DPTR,#(MT_BuildSPIMsg & 0xffff)
   \   000041   74..         MOV     A,#((MT_BuildSPIMsg >> 16) & 0xff)
   \   000043   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
    337              HalUARTWrite ( SPI_MGR_DEFAULT_PORT, msg_ptr, msgLen );
   \   00004B                ; Setup parameters for call to function HalUARTWrite
   \   00004B   AC..         MOV     R4,?V0 + 2
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   EE           MOV     A,R6
   \   000050   FA           MOV     R2,A
   \   000051   EF           MOV     A,R7
   \   000052   FB           MOV     R3,A
   \   000053   7900         MOV     R1,#0x0
   \   000055   90....       MOV     DPTR,#(HalUARTWrite & 0xffff)
   \   000058   74..         MOV     A,#((HalUARTWrite >> 16) & 0xff)
   \   00005A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    338          #endif
    339              osal_mem_free( msg_ptr );
   \   00005D                ; Setup parameters for call to function osal_mem_free
   \   00005D   EE           MOV     A,R6
   \   00005E   FA           MOV     R2,A
   \   00005F   EF           MOV     A,R7
   \   000060   FB           MOV     R3,A
   \   000061   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   000064   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   000066   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    340            }
    341          }
   \                     ??MT_BuildAndSendZToolResponse_1:
   \   000069   80..         SJMP    ??Subroutine17_0

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine17_0:
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    342          #endif
    343          
    344          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    345          /*********************************************************************
    346           * @fn      MT_BuildAndSendZToolCB
    347           *
    348           * @brief
    349           *
    350           *   Build and send a ZTOOL Callback msg
    351           *
    352           * @param   len - length of data portion of the message
    353           *
    354           * @return  void
    355           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    356          void MT_BuildAndSendZToolCB( uint16 callbackID, byte len, byte *pData )
   \                     MT_BuildAndSendZToolCB:
    357          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   8C..         MOV     ?V0 + 6,R4
   \   00000D   8D..         MOV     ?V0 + 7,R5
    358            byte msgLen;
    359            mtOSALSerialData_t *msgPtr;
    360            byte *msg;
    361          
    362            msgLen = sizeof ( mtOSALSerialData_t ) + SPI_0DATA_MSG_LEN + len;
    363          
    364            msgPtr = (mtOSALSerialData_t *)osal_msg_allocate( msgLen );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   7409         MOV     A,#0x9
   \   000011   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000017   8A..         MOV     ?V0 + 2,R2
   \   000019   8B..         MOV     ?V0 + 3,R3
    365            if ( msgPtr )
   \   00001B   EA           MOV     A,R2
   \   00001C   7001         JNZ     ??MT_BuildAndSendZToolCB_0
   \   00001E   EB           MOV     A,R3
   \                     ??MT_BuildAndSendZToolCB_0:
   \   00001F   606D         JZ      ??MT_BuildAndSendZToolCB_1
    366            {
    367              msgPtr->hdr.event = CB_FUNC;
   \   000021   7404         MOV     A,#0x4
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   F0           MOVX    @DPTR,A
    368              msgPtr->msg = (uint8 *)(msgPtr+1);
   \   000028   EA           MOV     A,R2
   \   000029   2402         ADD     A,#0x2
   \   00002B   F8           MOV     R0,A
   \   00002C   EB           MOV     A,R3
   \   00002D   3400         ADDC    A,#0x0
   \   00002F   F9           MOV     R1,A
   \   000030   EA           MOV     A,R2
   \   000031   2404         ADD     A,#0x4
   \   000033   FA           MOV     R2,A
   \   000034   EB           MOV     A,R3
   \   000035   3400         ADDC    A,#0x0
   \   000037   FB           MOV     R3,A
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   EA           MOV     A,R2
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   EB           MOV     A,R3
   \   000040   F0           MOVX    @DPTR,A
    369              msg = msgPtr->msg;
    370          
    371              //First byte is used as the event type for MT
    372              *msg++ = SOP_VALUE;
   \   000041   7402         MOV     A,#0x2
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
    373              *msg++ = HI_UINT16( callbackID );
   \   000049   EF           MOV     A,R7
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
    374              *msg++ = LO_UINT16( callbackID );
   \   00004C   EE           MOV     A,R6
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
    375              *msg++ = len;
   \   000053   E5..         MOV     A,?V0 + 0
   \   000055   F0           MOVX    @DPTR,A
    376          
    377              //Fill up the data bytes
    378              osal_memcpy( msg, pData, len );
   \   000056                ; Setup parameters for call to function osal_memcpy
   \   000056   85....       MOV     ?V0 + 4,?V0 + 6
   \   000059   85....       MOV     ?V0 + 5,?V0 + 7
   \   00005C   75..00       MOV     ?V0 + 6,#0x0
   \   00005F   78..         MOV     R0,#?V0 + 4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   AC..         MOV     R4,?V0 + 0
   \   000066   7D00         MOV     R5,#0x0
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   A3           INC     DPTR
   \   00006D   0A           INC     R2
   \   00006E   AB83         MOV     R3,DPH
   \   000070   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   000073   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   000075   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000078   7403         MOV     A,#0x3
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
    379          
    380              osal_msg_send( MT_TaskID, (uint8 *)msgPtr );
   \   00007D                ; Setup parameters for call to function osal_msg_send
   \   00007D   AA..         MOV     R2,?V0 + 2
   \   00007F   AB..         MOV     R3,?V0 + 3
   \   000081   90....       MOV     DPTR,#MT_TaskID
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   90....       MOV     DPTR,#(osal_msg_send & 0xffff)
   \   000089   74..         MOV     A,#((osal_msg_send >> 16) & 0xff)
   \   00008B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    381            }
    382          }
   \                     ??MT_BuildAndSendZToolCB_1:
   \   00008E   02....       LJMP    ??Subroutine17_0 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   25..         ADD     A,?V0 + 0
   \   000002   FA           MOV     R2,A
   \   000003   7B00         MOV     R3,#0x0
   \   000005   90....       MOV     DPTR,#(osal_msg_allocate & 0xffff)
   \   000008   74..         MOV     A,#((osal_msg_allocate >> 16) & 0xff)
   \   00000A   22           RET
    383          #endif
    384          
    385          /*********************************************************************
    386           * @fn      MT_ProcessCommand
    387           *
    388           * @brief
    389           *
    390           *   Process Event Messages.
    391           *
    392           * @param   byte *msg - pointer to event message
    393           *
    394           * @return
    395           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    396          void MT_ProcessCommand( mtOSALSerialData_t *msg )
   \                     MT_ProcessCommand:
    397          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    398            byte deallocate;
    399          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    400            byte *msg_ptr;
    401            byte len;
    402          
    403            // A little setup for AF, CB_FUNC and MT_SYS_APP_RSP_MSG
    404            msg_ptr = msg->msg;
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FE           MOV     R6,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FF           MOV     R7,A
    405          #endif // ZTOOL
    406          
    407            deallocate = true;
    408          
    409            // Use the first byte of the message as the command ID
    410            switch ( msg->hdr.event )
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   E0           MOVX    A,@DPTR
   \   000019   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for MT_ProcessCommand>_0`:
   \   00001C   00           DB        0
   \   00001D   05           DB        5
   \   00001E   01           DB        1
   \   00001F   ....         DW        ??MT_ProcessCommand_0
   \   000021   02           DB        2
   \   000022   ....         DW        ??MT_ProcessCommand_1
   \   000024   04           DB        4
   \   000025   ....         DW        ??MT_ProcessCommand_2
   \   000027   06           DB        6
   \   000028   ....         DW        ??MT_ProcessCommand_3
   \   00002A   24           DB        36
   \   00002B   ....         DW        ??MT_ProcessCommand_4
   \   00002D   ....         DW        ??MT_ProcessCommand_5
    411            {
    412          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    413              case CMD_SERIAL_MSG:
    414                MT_ProcessSerialCommand( msg->msg );
   \                     ??MT_ProcessCommand_0:
   \   00002F                ; Setup parameters for call to function MT_ProcessSerialCommand
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000038   90....       MOV     DPTR,#(MT_ProcessSerialCommand & 0xffff)
   \   00003B   74..         MOV     A,#((MT_ProcessSerialCommand >> 16) & 0xff)
   \   00003D   8070         SJMP    ??MT_ProcessCommand_6
    415                break;
    416          
    417              case CMD_DEBUG_MSG:
    418                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
   \                     ??MT_ProcessCommand_1:
   \   00003F                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   00003F   90....       MOV     DPTR,#(MT_ProcessDebugMsg & 0xffff)
   \   000042   74..         MOV     A,#((MT_ProcessDebugMsg >> 16) & 0xff)
   \   000044   8069         SJMP    ??MT_ProcessCommand_6
    419                break;
    420          
    421              case CMD_DEBUG_STR:
    422                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
   \                     ??MT_ProcessCommand_3:
   \   000046                ; Setup parameters for call to function MT_ProcessDebugStr
   \   000046   90....       MOV     DPTR,#(MT_ProcessDebugStr & 0xffff)
   \   000049   74..         MOV     A,#((MT_ProcessDebugStr >> 16) & 0xff)
   \   00004B   8062         SJMP    ??MT_ProcessCommand_6
    423                break;
    424          
    425              case CB_FUNC:
    426                /*
    427                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    428                  because we have copied data already in the allocated message
    429                */
    430          
    431                /* msg_ptr is the beginning of the intended SPI message */
    432                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
   \                     ??MT_ProcessCommand_2:
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   2405         ADD     A,#0x5
   \   000057   F5..         MOV     ?V0 + 2,A
    433          
    434                /*
    435                  FCS goes to the last byte in the message and is calculated over all
    436                  the bytes except FCS and SOP
    437                */
    438                msg_ptr[len-1] = SPIMgr_CalcFCS( msg_ptr + 1 , (byte)(len-2) );
   \   000059                ; Setup parameters for call to function SPIMgr_CalcFCS
   \   000059   74FE         MOV     A,#-0x2
   \   00005B   25..         ADD     A,?V0 + 2
   \   00005D   F9           MOV     R1,A
   \   00005E   8E82         MOV     DPL,R6
   \   000060   8F83         MOV     DPH,R7
   \   000062   A3           INC     DPTR
   \   000063   AA82         MOV     R2,DPL
   \   000065   AB83         MOV     R3,DPH
   \   000067   90....       MOV     DPTR,#(SPIMgr_CalcFCS & 0xffff)
   \   00006A   74..         MOV     A,#((SPIMgr_CalcFCS >> 16) & 0xff)
   \   00006C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00006F   E9           MOV     A,R1
   \   000070   C0E0         PUSH    A
   \   000072   85....       MOV     ?V0 + 4,?V0 + 2
   \   000075   EE           MOV     A,R6
   \   000076   25..         ADD     A,?V0 + 4
   \   000078   F8           MOV     R0,A
   \   000079   EF           MOV     A,R7
   \   00007A   3400         ADDC    A,#0x0
   \   00007C   F9           MOV     R1,A
   \   00007D   74FF         MOV     A,#-0x1
   \   00007F   28           ADD     A,R0
   \   000080   F582         MOV     DPL,A
   \   000082   74FF         MOV     A,#-0x1
   \   000084   39           ADDC    A,R1
   \   000085   F583         MOV     DPH,A
   \   000087   D0E0         POP     A
   \   000089   F0           MOVX    @DPTR,A
    439          
    440          #ifdef SPI_MGR_DEFAULT_PORT
    441                HalUARTWrite ( SPI_MGR_DEFAULT_PORT, msg_ptr, len );
   \   00008A                ; Setup parameters for call to function HalUARTWrite
   \   00008A   AC..         MOV     R4,?V0 + 2
   \   00008C   7D00         MOV     R5,#0x0
   \   00008E   EE           MOV     A,R6
   \   00008F   FA           MOV     R2,A
   \   000090   EF           MOV     A,R7
   \   000091   FB           MOV     R3,A
   \   000092   7900         MOV     R1,#0x0
   \   000094   90....       MOV     DPTR,#(HalUARTWrite & 0xffff)
   \   000097   74..         MOV     A,#((HalUARTWrite >> 16) & 0xff)
   \   000099   8014         SJMP    ??MT_ProcessCommand_6
    442          #endif
    443                break;
    444          
    445          #if !defined ( NONWK )
    446              case MT_SYS_APP_RSP_MSG:
    447                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    448                MTProcessAppRspMsg( msg_ptr, len );
   \                     ??MT_ProcessCommand_4:
   \   00009B                ; Setup parameters for call to function MTProcessAppRspMsg
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   2405         ADD     A,#0x5
   \   0000A5   F9           MOV     R1,A
   \   0000A6   EE           MOV     A,R6
   \   0000A7   FA           MOV     R2,A
   \   0000A8   EF           MOV     A,R7
   \   0000A9   FB           MOV     R3,A
   \   0000AA   90....       MOV     DPTR,#(MTProcessAppRspMsg & 0xffff)
   \   0000AD   74..         MOV     A,#((MTProcessAppRspMsg >> 16) & 0xff)
   \                     ??MT_ProcessCommand_6:
   \   0000AF   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    449                break;
    450          #endif  // NONWK
    451          #endif  // ZTOOL
    452          
    453              default:
    454                break;
    455            }
    456          
    457            if ( deallocate )
    458            {
    459              osal_msg_deallocate( (uint8 *)msg );
   \                     ??MT_ProcessCommand_5:
   \   0000B2                ; Setup parameters for call to function osal_msg_deallocate
   \   0000B2   AA..         MOV     R2,?V0 + 0
   \   0000B4   AB..         MOV     R3,?V0 + 1
   \   0000B6   90....       MOV     DPTR,#(osal_msg_deallocate & 0xffff)
   \   0000B9   74..         MOV     A,#((osal_msg_deallocate >> 16) & 0xff)
   \   0000BB   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    460            }
    461          }
   \   0000BE   02....       LJMP    ??Subroutine16_1 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    462          
    463          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    464          /*********************************************************************
    465           * @fn      MT_ProcessDebugMsg
    466           *
    467           * @brief
    468           *
    469           *   Build and send a debug message.
    470           *
    471           * @param   byte *data - pointer to the data portion of the debug message
    472           *
    473           * @return  void
    474           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    475          void MT_ProcessDebugMsg( mtDebugMsg_t *msg )
   \                     MT_ProcessDebugMsg:
    476          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    477            byte *msg_ptr;
    478            byte dataLen;
    479            uint8 buf[11];
    480            uint8 *pBuf;
    481          
    482            // Calculate the data length based
    483            dataLen = 5 + (msg->numParams * sizeof ( uint16 ));
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C3           CLR     C
   \   000018   33           RLC     A
   \   000019   2405         ADD     A,#0x5
   \   00001B   F5..         MOV     ?V0 + 0,A
    484          
    485            // Get a message buffer to build the debug message
    486            msg_ptr = osal_msg_allocate( (byte)(SPI_0DATA_MSG_LEN + dataLen + 1) );
   \   00001D                ; Setup parameters for call to function osal_msg_allocate
   \   00001D   7406         MOV     A,#0x6
   \   00001F   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000022   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000025   8A..         MOV     ?V0 + 2,R2
   \   000027   8B..         MOV     ?V0 + 3,R3
    487            if ( msg_ptr )
   \   000029   EA           MOV     A,R2
   \   00002A   7001         JNZ     ??MT_ProcessDebugMsg_0
   \   00002C   EB           MOV     A,R3
   \                     ??MT_ProcessDebugMsg_0:
   \   00002D   7003         JNZ     $+5
   \   00002F   02....       LJMP    ??MT_ProcessDebugMsg_1 & 0xFFFF
    488            {
    489              // Build the message
    490              pBuf = buf;
    491              *pBuf++ = msg->compID;
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   12....       LCALL   ?Subroutine3 & 0xFFFF
    492              *pBuf++ = msg->severity;
   \                     ??CrossCallReturnLabel_10:
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   7401         MOV     A,#0x1
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   D0E0         POP     A
   \   00004C   F0           MOVX    @DPTR,A
    493              *pBuf++ = msg->numParams;
   \   00004D   EE           MOV     A,R6
   \   00004E   2404         ADD     A,#0x4
   \   000050   F8           MOV     R0,A
   \   000051   EF           MOV     A,R7
   \   000052   3400         ADDC    A,#0x0
   \   000054   F9           MOV     R1,A
   \   000055   E8           MOV     A,R0
   \   000056   FA           MOV     R2,A
   \   000057   E9           MOV     A,R1
   \   000058   FB           MOV     R3,A
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   D0E0         POP     A
   \   000067   F0           MOVX    @DPTR,A
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   A882         MOV     R0,DPL
   \   00006F   A983         MOV     R1,DPH
    494          
    495              if ( msg->numParams >= 1 )
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6030         JZ      ??MT_ProcessDebugMsg_2
    496              {
    497                *pBuf++ = HI_UINT16( msg->param1 );
   \   000078   EE           MOV     A,R6
   \   000079   2405         ADD     A,#0x5
   \   00007B   F8           MOV     R0,A
   \   00007C   EF           MOV     A,R7
   \   00007D   3400         ADDC    A,#0x0
   \   00007F   F9           MOV     R1,A
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   C0E0         PUSH    A
   \   000088   7403         MOV     A,#0x3
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   D0E0         POP     A
   \   00008F   F0           MOVX    @DPTR,A
    498                *pBuf++ = LO_UINT16( msg->param1 );
   \   000090   8882         MOV     DPL,R0
   \   000092   8983         MOV     DPH,R1
   \   000094   E0           MOVX    A,@DPTR
   \   000095   C0E0         PUSH    A
   \   000097   7404         MOV     A,#0x4
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   D0E0         POP     A
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   7405         MOV     A,#0x5
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   A882         MOV     R0,DPL
   \   0000A6   A983         MOV     R1,DPH
    499              }
    500          
    501              if ( msg->numParams >= 2 )
   \                     ??MT_ProcessDebugMsg_2:
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   C3           CLR     C
   \   0000B2   9402         SUBB    A,#0x2
   \   0000B4   4009         JC      ??CrossCallReturnLabel_6
    502              {
    503                *pBuf++ = HI_UINT16( msg->param2 );
   \   0000B6   EE           MOV     A,R6
   \   0000B7   2407         ADD     A,#0x7
   \   0000B9   0A           INC     R2
   \   0000BA   0A           INC     R2
   \   0000BB   0A           INC     R2
   \   0000BC   12....       LCALL   ?Subroutine1 & 0xFFFF
    504                *pBuf++ = LO_UINT16( msg->param2 );
    505              }
    506          
    507              if ( msg->numParams == 3 )
   \                     ??CrossCallReturnLabel_6:
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   6403         XRL     A,#0x3
   \   0000CA   7007         JNZ     ??CrossCallReturnLabel_7
    508              {
    509                *pBuf++ = HI_UINT16( msg->param3 );
   \   0000CC   EE           MOV     A,R6
   \   0000CD   2409         ADD     A,#0x9
   \   0000CF   FA           MOV     R2,A
   \   0000D0   12....       LCALL   ?Subroutine1 & 0xFFFF
    510                *pBuf++ = LO_UINT16( msg->param3 );
    511              }
    512          
    513              *pBuf++ = HI_UINT16( msg->timestamp );
   \                     ??CrossCallReturnLabel_7:
   \   0000D3   EE           MOV     A,R6
   \   0000D4   240B         ADD     A,#0xb
   \   0000D6   FA           MOV     R2,A
   \   0000D7   12....       LCALL   ?Subroutine12 & 0xFFFF
    514              *pBuf++ = LO_UINT16( msg->timestamp );
   \                     ??CrossCallReturnLabel_31:
   \   0000DA   8A82         MOV     DPL,R2
   \   0000DC   8B83         MOV     DPH,R3
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   8882         MOV     DPL,R0
   \   0000E1   8983         MOV     DPH,R1
   \   0000E3   A3           INC     DPTR
   \   0000E4   F0           MOVX    @DPTR,A
    515          
    516          #ifdef SPI_MGR_DEFAULT_PORT
    517              MT_BuildSPIMsg( SPI_CMD_DEBUG_MSG, &msg_ptr[1], dataLen, buf );
   \   0000E5   85..82       MOV     DPL,?V0 + 2
   \   0000E8   85..83       MOV     DPH,?V0 + 3
   \   0000EB   A3           INC     DPTR
   \   0000EC   AE82         MOV     R6,DPL
   \   0000EE   AF83         MOV     R7,DPH
   \   0000F0                ; Setup parameters for call to function MT_BuildSPIMsg
   \   0000F0   85..82       MOV     DPL,?XSP + 0
   \   0000F3   85..83       MOV     DPH,?XSP + 1
   \   0000F6   8582..       MOV     ?V0 + 4,DPL
   \   0000F9   8583..       MOV     ?V0 + 5,DPH
   \   0000FC   78..         MOV     R0,#?V0 + 4
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000101   A9..         MOV     R1,?V0 + 0
   \   000103   EE           MOV     A,R6
   \   000104   FC           MOV     R4,A
   \   000105   EF           MOV     A,R7
   \   000106   FD           MOV     R5,A
   \   000107   7A03         MOV     R2,#0x3
   \   000109   7B40         MOV     R3,#0x40
   \   00010B   90....       MOV     DPTR,#(MT_BuildSPIMsg & 0xffff)
   \   00010E   74..         MOV     A,#((MT_BuildSPIMsg >> 16) & 0xff)
   \   000110   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000113   7402         MOV     A,#0x2
   \   000115   12....       LCALL   ?DEALLOC_XSTACK8
    518              HalUARTWrite ( SPI_MGR_DEFAULT_PORT, &msg_ptr[1], SPI_0DATA_MSG_LEN + dataLen );
   \   000118                ; Setup parameters for call to function HalUARTWrite
   \   000118   7405         MOV     A,#0x5
   \   00011A   25..         ADD     A,?V0 + 0
   \   00011C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00011F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    519          #endif
    520              osal_msg_deallocate( msg_ptr );
   \   000122                ; Setup parameters for call to function osal_msg_deallocate
   \   000122   AA..         MOV     R2,?V0 + 2
   \   000124   AB..         MOV     R3,?V0 + 3
   \   000126   90....       MOV     DPTR,#(osal_msg_deallocate & 0xffff)
   \   000129   74..         MOV     A,#((osal_msg_deallocate >> 16) & 0xff)
   \   00012B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    521            }
    522          }
   \                     ??MT_ProcessDebugMsg_1:
   \   00012E   740B         MOV     A,#0xb
   \   000130   80..         SJMP    ??Subroutine16_0

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   A3           INC     DPTR
   \   000004   A882         MOV     R0,DPL
   \   000006   A983         MOV     R1,DPH
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00000F   A3           INC     DPTR
   \   000010   08           INC     R0
   \   000011   A983         MOV     R1,DPH
   \   000013   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   FC           MOV     R4,A
   \   000001   E4           CLR     A
   \   000002   3400         ADDC    A,#0x0
   \   000004   FD           MOV     R5,A
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   7900         MOV     R1,#0x0
   \   00000B   90....       MOV     DPTR,#(HalUARTWrite & 0xffff)
   \   00000E   74..         MOV     A,#((HalUARTWrite >> 16) & 0xff)
   \   000010   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FB           MOV     R3,A
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \                     ??Subroutine12_0:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   22           RET
    523          #endif // ZTOOL
    524          
    525          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    526          /*********************************************************************
    527           * @fn      MT_ProcessDebugStr
    528           *
    529           * @brief
    530           *
    531           *   Build and send a debug string.
    532           *
    533           * @param   byte *dstr - pointer to the data portion of the debug message
    534           *
    535           * @return  void
    536           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    537          void MT_ProcessDebugStr( mtDebugStr_t *dstr )
   \                     MT_ProcessDebugStr:
    538          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    539            byte *msg_ptr;
    540          
    541            // Get a message buffer to build the debug message
    542            msg_ptr = osal_mem_alloc( (byte)(SPI_0DATA_MSG_LEN + dstr->sln) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   2405         ADD     A,#0x5
   \   000012   FA           MOV     R2,A
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000018   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   00001A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00001D   8A..         MOV     ?V0 + 2,R2
   \   00001F   8B..         MOV     ?V0 + 3,R3
   \   000021   AE..         MOV     R6,?V0 + 2
   \   000023   AF..         MOV     R7,?V0 + 3
    543            if ( msg_ptr )
   \   000025   EE           MOV     A,R6
   \   000026   7001         JNZ     ??MT_ProcessDebugStr_0
   \   000028   EF           MOV     A,R7
   \                     ??MT_ProcessDebugStr_0:
   \   000029   6052         JZ      ??MT_ProcessDebugStr_1
    544            {
    545          #ifdef SPI_MGR_DEFAULT_PORT
    546              MT_BuildSPIMsg( SPI_RESPONSE_BIT | SPI_SYS_STRING_MSG, msg_ptr, dstr->sln, dstr->pString );
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   2402         ADD     A,#0x2
   \   00002F   F5..         MOV     ?V0 + 2,A
   \   000031   E5..         MOV     A,?V0 + 1
   \   000033   3400         ADDC    A,#0x0
   \   000035   F5..         MOV     ?V0 + 3,A
   \   000037                ; Setup parameters for call to function MT_BuildSPIMsg
   \   000037   85..82       MOV     DPL,?V0 + 0
   \   00003A   85..83       MOV     DPH,?V0 + 1
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000043   85..82       MOV     DPL,?V0 + 2
   \   000046   85..83       MOV     DPH,?V0 + 3
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   EE           MOV     A,R6
   \   00004C   FC           MOV     R4,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FD           MOV     R5,A
   \   00004F   7A15         MOV     R2,#0x15
   \   000051   7B10         MOV     R3,#0x10
   \   000053   90....       MOV     DPTR,#(MT_BuildSPIMsg & 0xffff)
   \   000056   74..         MOV     A,#((MT_BuildSPIMsg >> 16) & 0xff)
   \   000058   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005B   7402         MOV     A,#0x2
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
    547              HalUARTWrite ( SPI_MGR_DEFAULT_PORT, msg_ptr, SPI_0DATA_MSG_LEN + dstr->sln );
   \   000060                ; Setup parameters for call to function HalUARTWrite
   \   000060   85..82       MOV     DPL,?V0 + 2
   \   000063   85..83       MOV     DPH,?V0 + 3
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F8           MOV     R0,A
   \   000068   7405         MOV     A,#0x5
   \   00006A   28           ADD     A,R0
   \   00006B   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00006E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    548          #endif
    549              osal_mem_free( msg_ptr );
   \   000071                ; Setup parameters for call to function osal_mem_free
   \   000071   EE           MOV     A,R6
   \   000072   FA           MOV     R2,A
   \   000073   EF           MOV     A,R7
   \   000074   FB           MOV     R3,A
   \   000075   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   000078   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   00007A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    550            }
    551          }
   \                     ??MT_ProcessDebugStr_1:
   \   00007D                REQUIRE ?Subroutine18
   \   00007D                ; // Fall through to label ?Subroutine18

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    552          #endif // ZTOOL
    553          
    554          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    555          /*********************************************************************
    556           * @fn      MT_ProcessSetNV
    557           *
    558           * @brief
    559           *
    560           *   The Set NV serial message.
    561           *
    562           * @param   byte *msg - pointer to the data
    563           *
    564           * @return  ZSuccess if successful
    565           *
    566           * @MT SPI_CMD_SYS_SET_NV
    567           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    568          byte MT_ProcessSetNV( byte *pData )
   \                     MT_ProcessSetNV:
    569          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    570            uint16  attrib;
    571            uint16  attlen;
    572          
    573            attrib = (uint16) *pData++;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FE           MOV     R6,A
    574            attlen = osal_nv_item_len( attrib );
    575          
    576            return osal_nv_write( attrib, 0, attlen, pData );
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B   A3           INC     DPTR
   \   00000C   8582..       MOV     ?V0 + 0,DPL
   \   00000F   8583..       MOV     ?V0 + 1,DPH
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000017                ; Setup parameters for call to function osal_nv_item_len
   \   000017   EE           MOV     A,R6
   \   000018   FA           MOV     R2,A
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#(osal_nv_item_len & 0xffff)
   \   00001E   74..         MOV     A,#((osal_nv_item_len >> 16) & 0xff)
   \   000020   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000023   8A..         MOV     ?V0 + 0,R2
   \   000025   8B..         MOV     ?V0 + 1,R3
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7C00         MOV     R4,#0x0
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   7B00         MOV     R3,#0x0
   \   000034   90....       MOV     DPTR,#(osal_nv_write & 0xffff)
   \   000037   74..         MOV     A,#((osal_nv_write >> 16) & 0xff)
   \   000039   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003C   7404         MOV     A,#0x4
   \   00003E   80..         SJMP    ??Subroutine15_0
    577          }
    578          #endif
    579          
    580          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    581          /*********************************************************************
    582           * @fn      MT_ProcessGetNV
    583           *
    584           * @brief
    585           *
    586           *   The Get NV serial message.
    587           *
    588           * @param   byte *msg - pointer to the data
    589           *
    590           * @return  void
    591           *
    592           * @MT SPI_CMD_SYS_GET_NV
    593           *
    594           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    595          void MT_ProcessGetNV( byte *pData )
   \                     MT_ProcessGetNV:
    596          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    597            uint16  attrib;
    598            uint16 attlen;
    599            uint16 buflen;
    600            uint8 *buf;
    601          
    602            attrib = (uint16)*pData;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F5..         MOV     ?V0 + 0,A
    603            attlen = osal_nv_item_len( attrib );
   \   00000C                ; Setup parameters for call to function osal_nv_item_len
   \   00000C   FA           MOV     R2,A
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   90....       MOV     DPTR,#(osal_nv_item_len & 0xffff)
   \   000012   74..         MOV     A,#((osal_nv_item_len >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000017   8A..         MOV     ?V0 + 2,R2
   \   000019   8B..         MOV     ?V0 + 3,R3
    604          
    605            buflen = attlen + 2;
   \   00001B   7402         MOV     A,#0x2
   \   00001D   25..         ADD     A,?V0 + 2
   \   00001F   FE           MOV     R6,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V0 + 3
   \   000023   FF           MOV     R7,A
    606            buf = osal_mem_alloc( buflen );
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   0A           INC     R2
   \   000025   0A           INC     R2
   \   000026   FB           MOV     R3,A
   \   000027   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   00002A   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   00002C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002F   8A..         MOV     ?V0 + 6,R2
   \   000031   8B..         MOV     ?V0 + 7,R3
    607            if ( buf != NULL )
   \   000033   EA           MOV     A,R2
   \   000034   7001         JNZ     ??MT_ProcessGetNV_0
   \   000036   EB           MOV     A,R3
   \                     ??MT_ProcessGetNV_0:
   \   000037   606C         JZ      ??MT_ProcessGetNV_1
    608            {
    609              osal_memset( buf, 0, buflen );
   \   000039                ; Setup parameters for call to function osal_memset
   \   000039   EE           MOV     A,R6
   \   00003A   FC           MOV     R4,A
   \   00003B   EF           MOV     A,R7
   \   00003C   FD           MOV     R5,A
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   90....       MOV     DPTR,#(osal_memset & 0xffff)
   \   000042   74..         MOV     A,#((osal_memset >> 16) & 0xff)
   \   000044   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    610          
    611              buf[0] = osal_nv_read( attrib, 0, attlen, &buf[2] );
   \   000047                ; Setup parameters for call to function osal_nv_read
   \   000047   E5..         MOV     A,?V0 + 6
   \   000049   2402         ADD     A,#0x2
   \   00004B   F5..         MOV     ?V0 + 4,A
   \   00004D   E5..         MOV     A,?V0 + 7
   \   00004F   3400         ADDC    A,#0x0
   \   000051   F5..         MOV     ?V0 + 5,A
   \   000053   78..         MOV     R0,#?V0 + 4
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   78..         MOV     R0,#?V0 + 2
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   7C00         MOV     R4,#0x0
   \   00005F   7D00         MOV     R5,#0x0
   \   000061   AA..         MOV     R2,?V0 + 0
   \   000063   7B00         MOV     R3,#0x0
   \   000065   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   000068   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \   00006A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00006D   7404         MOV     A,#0x4
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000072   E9           MOV     A,R1
   \   000073   85..82       MOV     DPL,?V0 + 6
   \   000076   85..83       MOV     DPH,?V0 + 7
   \   000079   F0           MOVX    @DPTR,A
    612              buf[1] = (uint8)attrib;
   \   00007A   A3           INC     DPTR
   \   00007B   E5..         MOV     A,?V0 + 0
   \   00007D   F0           MOVX    @DPTR,A
    613          
    614              MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + buflen),
    615                                            (SPI_RESPONSE_BIT | SPI_CMD_SYS_GET_NV),
    616                                            buflen, buf );
   \   00007E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00007E   78..         MOV     R0,#?V0 + 6
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   EE           MOV     A,R6
   \   000084   FC           MOV     R4,A
   \   000085   7A13         MOV     R2,#0x13
   \   000087   7B10         MOV     R3,#0x10
   \   000089   2405         ADD     A,#0x5
   \   00008B   F9           MOV     R1,A
   \   00008C   90....       MOV     DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
   \   00008F   74..         MOV     A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
   \   000091   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000094   7402         MOV     A,#0x2
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
    617              osal_mem_free( buf );
   \   000099                ; Setup parameters for call to function osal_mem_free
   \   000099   AA..         MOV     R2,?V0 + 6
   \   00009B   AB..         MOV     R3,?V0 + 7
   \   00009D   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   0000A0   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   0000A2   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    618            }
    619          }
   \                     ??MT_ProcessGetNV_1:
   \   0000A5   02....       LJMP    ??Subroutine17_0 & 0xFFFF
    620          #endif
    621          
    622          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    623          #if !defined ( NONWK )
    624          /***************************************************************************************************
    625           * @fn      MT_ProcessGetNvInfo
    626           *
    627           * @brief
    628           *
    629           *   The Get NV Info serial message.
    630           *
    631           * @param   byte *msg - pointer to the data
    632           *
    633           * @return  void
    634           *
    635           * @MT SPI_CMD_SYS_GET_NV_INFO
    636           *
    637           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    638          void MT_ProcessGetNvInfo( void )
   \                     MT_ProcessGetNvInfo:
    639          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    640            uint8 len;
    641            uint8 stat;
    642            uint8 *buf;
    643            uint8 *pBuf;
    644            uint16 tmp16;
    645            uint32 tmp32;
    646          
    647            // Get required length of buffer
    648            // Status + ExtAddr + ChanList + PanID  + SecLevel + PreCfgKey
    649            len = 1 + Z_EXTADDR_LEN + 4 + 2 + 1 + SEC_KEY_LEN;
    650          
    651            buf = osal_mem_alloc( len );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A20         MOV     R2,#0x20
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000011   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   000013   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000016   8A..         MOV     ?V0 + 2,R2
   \   000018   8B..         MOV     ?V0 + 3,R3
    652            if ( buf )
   \   00001A   EA           MOV     A,R2
   \   00001B   7001         JNZ     ??MT_ProcessGetNvInfo_0
   \   00001D   EB           MOV     A,R3
   \                     ??MT_ProcessGetNvInfo_0:
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??MT_ProcessGetNvInfo_1 & 0xFFFF
    653            {
    654              // Assume NV not available
    655              osal_memset( buf, 0xFF, len );
   \   000023                ; Setup parameters for call to function osal_memset
   \   000023   7C20         MOV     R4,#0x20
   \   000025   7D00         MOV     R5,#0x0
   \   000027   79FF         MOV     R1,#-0x1
   \   000029   90....       MOV     DPTR,#(osal_memset & 0xffff)
   \   00002C   74..         MOV     A,#((osal_memset >> 16) & 0xff)
   \   00002E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    656          
    657              // Skip over status
    658              pBuf = buf + 1;
   \   000031   85..82       MOV     DPL,?V0 + 2
   \   000034   85..83       MOV     DPH,?V0 + 3
   \   000037   A3           INC     DPTR
   \   000038   8582..       MOV     ?V0 + 0,DPL
   \   00003B   8583..       MOV     ?V0 + 1,DPH
    659          
    660              // Start with 64-bit extended address
    661              stat = osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
   \   00003E                ; Setup parameters for call to function osal_nv_read
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   75..08       MOV     ?V0 + 4,#0x8
   \   000046   75..00       MOV     ?V0 + 5,#0x0
   \   000049   78..         MOV     R0,#?V0 + 4
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7C00         MOV     R4,#0x0
   \   000050   7D00         MOV     R5,#0x0
   \   000052   7A01         MOV     R2,#0x1
   \   000054   7B00         MOV     R3,#0x0
   \   000056   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   000059   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \   00005B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005E   7404         MOV     A,#0x4
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
   \   000063   E9           MOV     A,R1
   \   000064   FE           MOV     R6,A
    662              if ( stat ) stat = 0x01;
   \   000065   6002         JZ      ??MT_ProcessGetNvInfo_2
   \   000067   7E01         MOV     R6,#0x1
    663              MT_ReverseBytes( pBuf, Z_EXTADDR_LEN );
   \                     ??MT_ProcessGetNvInfo_2:
   \   000069                ; Setup parameters for call to function MT_ReverseBytes
   \   000069   7908         MOV     R1,#0x8
   \   00006B   AA..         MOV     R2,?V0 + 0
   \   00006D   AB..         MOV     R3,?V0 + 1
   \   00006F   90....       MOV     DPTR,#(MT_ReverseBytes & 0xffff)
   \   000072   74..         MOV     A,#((MT_ReverseBytes >> 16) & 0xff)
   \   000074   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    664              pBuf += Z_EXTADDR_LEN;
   \   000077   12....       LCALL   ?Subroutine11 & 0xFFFF
    665          
    666              // Scan channel list (bit mask)
    667              if (  osal_nv_read( ZCD_NV_CHANLIST, 0, sizeof( tmp32 ), &tmp32 ) )
   \                     ??CrossCallReturnLabel_29:
   \   00007A                ; Setup parameters for call to function osal_nv_read
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   8582..       MOV     ?V0 + 4,DPL
   \   000082   8583..       MOV     ?V0 + 5,DPH
   \   000085   78..         MOV     R0,#?V0 + 4
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   75..04       MOV     ?V0 + 4,#0x4
   \   00008D   75..00       MOV     ?V0 + 5,#0x0
   \   000090   78..         MOV     R0,#?V0 + 4
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   7C00         MOV     R4,#0x0
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7A84         MOV     R2,#-0x7c
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   0000A0   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \   0000A2   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000A5   7404         MOV     A,#0x4
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AA   E9           MOV     A,R1
   \   0000AB   6006         JZ      ??MT_ProcessGetNvInfo_3
    668                stat |= 0x02;
   \   0000AD   EE           MOV     A,R6
   \   0000AE   D2E1         SETB    0xE0 /* A   */.1
   \   0000B0   FE           MOV     R6,A
   \   0000B1   8060         SJMP    ??MT_ProcessGetNvInfo_4
    669              else
    670              {
    671                pBuf[0] = BREAK_UINT32( tmp32, 3 );
   \                     ??MT_ProcessGetNvInfo_3:
   \   0000B3   7402         MOV     A,#0x2
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   78..         MOV     R0,#?V0 + 4
   \   0000BA   12....       LCALL   ?L_MOV_X
   \   0000BD   7418         MOV     A,#0x18
   \   0000BF   78..         MOV     R0,#?V0 + 4
   \   0000C1   12....       LCALL   ?UL_SHR
   \   0000C4   85..82       MOV     DPL,?V0 + 0
   \   0000C7   85..83       MOV     DPH,?V0 + 1
   \   0000CA   E5..         MOV     A,?V0 + 4
   \   0000CC   F0           MOVX    @DPTR,A
    672                pBuf[1] = BREAK_UINT32( tmp32, 2 );
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   78..         MOV     R0,#?V0 + 4
   \   0000D4   12....       LCALL   ?L_MOV_X
   \   0000D7   7410         MOV     A,#0x10
   \   0000D9   78..         MOV     R0,#?V0 + 4
   \   0000DB   12....       LCALL   ?UL_SHR
   \   0000DE   85..82       MOV     DPL,?V0 + 0
   \   0000E1   85..83       MOV     DPH,?V0 + 1
   \   0000E4   A3           INC     DPTR
   \   0000E5   E5..         MOV     A,?V0 + 4
   \   0000E7   F0           MOVX    @DPTR,A
    673                pBuf[2] = BREAK_UINT32( tmp32, 1 );
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   78..         MOV     R0,#?V0 + 4
   \   0000EF   12....       LCALL   ?L_MOV_X
   \   0000F2   E5..         MOV     A,?V0 + 5
   \   0000F4   85..82       MOV     DPL,?V0 + 0
   \   0000F7   85..83       MOV     DPH,?V0 + 1
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   F0           MOVX    @DPTR,A
    674                pBuf[3] = BREAK_UINT32( tmp32, 0 );
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   78..         MOV     R0,#?V0 + 4
   \   000104   12....       LCALL   ?L_MOV_X
   \   000107   85..82       MOV     DPL,?V0 + 0
   \   00010A   85..83       MOV     DPH,?V0 + 1
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   E5..         MOV     A,?V0 + 4
   \   000112   F0           MOVX    @DPTR,A
    675              }
    676              pBuf += sizeof( tmp32 );
   \                     ??MT_ProcessGetNvInfo_4:
   \   000113   E5..         MOV     A,?V0 + 0
   \   000115   2404         ADD     A,#0x4
   \   000117   F5..         MOV     ?V0 + 0,A
   \   000119   E5..         MOV     A,?V0 + 1
   \   00011B   3400         ADDC    A,#0x0
   \   00011D   F5..         MOV     ?V0 + 1,A
    677          
    678              // ZigBee PanID
    679              if ( osal_nv_read( ZCD_NV_PANID, 0, sizeof( tmp16 ), &tmp16 ) )
   \   00011F                ; Setup parameters for call to function osal_nv_read
   \   00011F   85..82       MOV     DPL,?XSP + 0
   \   000122   85..83       MOV     DPH,?XSP + 1
   \   000125   8582..       MOV     ?V0 + 4,DPL
   \   000128   8583..       MOV     ?V0 + 5,DPH
   \   00012B   78..         MOV     R0,#?V0 + 4
   \   00012D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000130   75..02       MOV     ?V0 + 4,#0x2
   \   000133   75..00       MOV     ?V0 + 5,#0x0
   \   000136   78..         MOV     R0,#?V0 + 4
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013B   7C00         MOV     R4,#0x0
   \   00013D   7D00         MOV     R5,#0x0
   \   00013F   7A83         MOV     R2,#-0x7d
   \   000141   7B00         MOV     R3,#0x0
   \   000143   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   000146   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \   000148   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00014B   7404         MOV     A,#0x4
   \   00014D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000150   E9           MOV     A,R1
   \   000151   6006         JZ      ??MT_ProcessGetNvInfo_5
    680                stat |= 0x04;
   \   000153   EE           MOV     A,R6
   \   000154   D2E2         SETB    0xE0 /* A   */.2
   \   000156   FE           MOV     R6,A
   \   000157   8019         SJMP    ??MT_ProcessGetNvInfo_6
    681              else
    682              {
    683                pBuf[0] = HI_UINT16( tmp16 );
   \                     ??MT_ProcessGetNvInfo_5:
   \   000159   85..82       MOV     DPL,?XSP + 0
   \   00015C   85..83       MOV     DPH,?XSP + 1
   \   00015F   A3           INC     DPTR
   \   000160   E0           MOVX    A,@DPTR
   \   000161   85..82       MOV     DPL,?V0 + 0
   \   000164   85..83       MOV     DPH,?V0 + 1
   \   000167   12....       LCALL   ?Subroutine4 & 0xFFFF
    684                pBuf[1] = LO_UINT16( tmp16 );
   \                     ??CrossCallReturnLabel_12:
   \   00016A   85..82       MOV     DPL,?V0 + 0
   \   00016D   85..83       MOV     DPH,?V0 + 1
   \   000170   A3           INC     DPTR
   \   000171   F0           MOVX    @DPTR,A
    685              }
    686              pBuf += sizeof( tmp16 );
   \                     ??MT_ProcessGetNvInfo_6:
   \   000172   E5..         MOV     A,?V0 + 0
   \   000174   2402         ADD     A,#0x2
   \   000176   F5..         MOV     ?V0 + 0,A
   \   000178   E5..         MOV     A,?V0 + 1
   \   00017A   3400         ADDC    A,#0x0
   \   00017C   F5..         MOV     ?V0 + 1,A
    687          
    688              // Security level
    689              if ( osal_nv_read( ZCD_NV_SECURITY_LEVEL, 0, sizeof( uint8 ), pBuf++ ) )
   \   00017E                ; Setup parameters for call to function osal_nv_read
   \   00017E   78..         MOV     R0,#?V0 + 0
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000183   75..01       MOV     ?V0 + 4,#0x1
   \   000186   78..         MOV     R0,#?V0 + 4
   \   000188   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018B   7C00         MOV     R4,#0x0
   \   00018D   7D00         MOV     R5,#0x0
   \   00018F   7A61         MOV     R2,#0x61
   \   000191   7B00         MOV     R3,#0x0
   \   000193   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   000196   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \   000198   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00019B   7404         MOV     A,#0x4
   \   00019D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A0   E9           MOV     A,R1
   \   0001A1   6004         JZ      ??MT_ProcessGetNvInfo_7
    690                stat |= 0x08;
   \   0001A3   EE           MOV     A,R6
   \   0001A4   D2E3         SETB    0xE0 /* A   */.3
   \   0001A6   FE           MOV     R6,A
    691          
    692              // Pre-configured security key
    693              if ( osal_nv_read( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, pBuf ) )
   \                     ??MT_ProcessGetNvInfo_7:
   \   0001A7                ; Setup parameters for call to function osal_nv_read
   \   0001A7   85..82       MOV     DPL,?V0 + 0
   \   0001AA   85..83       MOV     DPH,?V0 + 1
   \   0001AD   A3           INC     DPTR
   \   0001AE   8582..       MOV     ?V0 + 0,DPL
   \   0001B1   8583..       MOV     ?V0 + 1,DPH
   \   0001B4   78..         MOV     R0,#?V0 + 0
   \   0001B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B9   75..10       MOV     ?V0 + 0,#0x10
   \   0001BC   75..00       MOV     ?V0 + 1,#0x0
   \   0001BF   78..         MOV     R0,#?V0 + 0
   \   0001C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C4   7C00         MOV     R4,#0x0
   \   0001C6   7D00         MOV     R5,#0x0
   \   0001C8   7A62         MOV     R2,#0x62
   \   0001CA   7B00         MOV     R3,#0x0
   \   0001CC   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   0001CF   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \   0001D1   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001D4   7404         MOV     A,#0x4
   \   0001D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D9   E9           MOV     A,R1
   \   0001DA   6004         JZ      ??MT_ProcessGetNvInfo_8
    694                stat |= 0x10;
   \   0001DC   EE           MOV     A,R6
   \   0001DD   D2E4         SETB    0xE0 /* A   */.4
   \   0001DF   FE           MOV     R6,A
    695          
    696              // Status bit mask - bit=1 indicates failure
    697              *buf = stat;
   \                     ??MT_ProcessGetNvInfo_8:
   \   0001E0   EE           MOV     A,R6
   \   0001E1   85..82       MOV     DPL,?V0 + 2
   \   0001E4   85..83       MOV     DPH,?V0 + 3
   \   0001E7   F0           MOVX    @DPTR,A
    698          
    699              MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + len),
    700                                            (SPI_RESPONSE_BIT | SPI_CMD_SYS_GET_NV_INFO),
    701                                            len, buf );
   \   0001E8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001E8   78..         MOV     R0,#?V0 + 2
   \   0001EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001ED   7C20         MOV     R4,#0x20
   \   0001EF   7A1F         MOV     R2,#0x1f
   \   0001F1   7B10         MOV     R3,#0x10
   \   0001F3   7925         MOV     R1,#0x25
   \   0001F5   90....       MOV     DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
   \   0001F8   74..         MOV     A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
   \   0001FA   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001FD   7402         MOV     A,#0x2
   \   0001FF   12....       LCALL   ?DEALLOC_XSTACK8
    702          
    703              osal_mem_free( buf );
   \   000202                ; Setup parameters for call to function osal_mem_free
   \   000202   AA..         MOV     R2,?V0 + 2
   \   000204   AB..         MOV     R3,?V0 + 3
   \   000206   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   000209   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   00020B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    704            }
    705          }
   \                     ??MT_ProcessGetNvInfo_1:
   \   00020E   7406         MOV     A,#0x6
   \   000210   02....       LJMP    ?Subroutine17 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2408         ADD     A,#0x8
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
    706          #endif  // NONWK
    707          #endif  // ZTOOL
    708          
    709          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    710          #define DEVICE_INFO_RESPONSE_LEN 46
    711          #define TYPE_COORDINATOR         1
    712          #define TYPE_ROUTER              2
    713          #define TYPE_ENDDEVICE           4
    714          /***************************************************************************************************
    715           * @fn      MT_ProcessGetDeviceInfo
    716           *
    717           * @brief
    718           *
    719           *   The Get Device Info serial message.
    720           *
    721           * @param   byte *msg - pointer to the data
    722           *
    723           * @return  void
    724           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    725          void MT_ProcessGetDeviceInfo( void )
   \                     MT_ProcessGetDeviceInfo:
    726          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    727            byte *buf;
    728            byte *pBuf;
    729            uint8 deviceType = 0;
    730            uint16 shortAddr;
    731            uint16 *assocList;
    732            byte assocCnt;
    733            uint16 *puint16;
    734            byte x;
    735          
    736            buf = osal_mem_alloc( DEVICE_INFO_RESPONSE_LEN );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A2E         MOV     R2,#0x2e
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000011   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   000013   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000016   8A..         MOV     ?V0 + 2,R2
   \   000018   8B..         MOV     ?V0 + 3,R3
    737            if ( buf )
   \   00001A   EA           MOV     A,R2
   \   00001B   7001         JNZ     ??MT_ProcessGetDeviceInfo_0
   \   00001D   EB           MOV     A,R3
   \                     ??MT_ProcessGetDeviceInfo_0:
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??MT_ProcessGetDeviceInfo_1 & 0xFFFF
    738            {
    739              pBuf = buf;
    740          
    741              *pBuf++ = ZSUCCESS;
   \   000023   E4           CLR     A
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   12....       LCALL   ??Subroutine0_0 & 0xFFFF
    742          
    743              osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
   \                     ??CrossCallReturnLabel_0:
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75..08       MOV     ?V0 + 4,#0x8
   \   000033   75..00       MOV     ?V0 + 5,#0x0
   \   000036   78..         MOV     R0,#?V0 + 4
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7C00         MOV     R4,#0x0
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7A01         MOV     R2,#0x1
   \   000041   7B00         MOV     R3,#0x0
   \   000043   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   000046   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \   000048   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004B   7404         MOV     A,#0x4
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
    744              // Outgoing extended address needs to be reversed
    745              MT_ReverseBytes( pBuf, Z_EXTADDR_LEN );
   \   000050                ; Setup parameters for call to function MT_ReverseBytes
   \   000050   7908         MOV     R1,#0x8
   \   000052   AA..         MOV     R2,?V0 + 0
   \   000054   AB..         MOV     R3,?V0 + 1
   \   000056   90....       MOV     DPTR,#(MT_ReverseBytes & 0xffff)
   \   000059   74..         MOV     A,#((MT_ReverseBytes >> 16) & 0xff)
   \   00005B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    746              pBuf += Z_EXTADDR_LEN;
   \   00005E   12....       LCALL   ?Subroutine11 & 0xFFFF
    747          
    748          #if !defined( NONWK )
    749              shortAddr = NLME_GetShortAddr();
   \                     ??CrossCallReturnLabel_30:
   \   000061                ; Setup parameters for call to function NLME_GetShortAddr
   \   000061   90....       MOV     DPTR,#(NLME_GetShortAddr & 0xffff)
   \   000064   74..         MOV     A,#((NLME_GetShortAddr >> 16) & 0xff)
   \   000066   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    750          #else
    751              shortAddr = 0;
    752          #endif
    753          
    754              *pBuf++ = HI_UINT16( shortAddr );
   \   000069   85..82       MOV     DPL,?V0 + 0
   \   00006C   85..83       MOV     DPH,?V0 + 1
   \   00006F   EB           MOV     A,R3
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
    755              *pBuf++ = LO_UINT16( shortAddr );
   \   000072   EA           MOV     A,R2
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
    756          
    757              // Return device type
    758          #if !defined( NONWK )
    759          #if defined (ZDO_COORDINATOR)
    760              deviceType |= (uint8) TYPE_COORDINATOR;
    761            #if defined (SOFT_START)
    762              deviceType |= (uint8) TYPE_ROUTER;
    763            #endif
    764          #endif
    765          #if defined (RTR_NWK) && !defined (ZDO_COORDINATOR)
    766              deviceType |= (uint8) TYPE_ROUTER;
    767          #elif !defined (RTR_NWK)
    768              deviceType |= (uint8) TYPE_ENDDEVICE;
    769          #endif
    770          #endif
    771              *pBuf++ = (byte) deviceType;
   \   000075   7401         MOV     A,#0x1
   \   000077   12....       LCALL   ??Subroutine0_0 & 0xFFFF
    772          
    773              //Return device state
    774          #if !defined( NONWK )
    775              *pBuf++ = (byte)devState;
   \                     ??CrossCallReturnLabel_1:
   \   00007A   90....       MOV     DPTR,#devState
   \   00007D   12....       LCALL   ?Subroutine0 & 0xFFFF
    776          #else
    777              *pBuf++ = (byte)0;
    778          #endif
    779          
    780          #if defined(RTR_NWK) && !defined( NONWK )
    781              assocList = AssocMakeList( &assocCnt );
   \                     ??CrossCallReturnLabel_2:
   \   000080                ; Setup parameters for call to function AssocMakeList
   \   000080   85..82       MOV     DPL,?XSP + 0
   \   000083   85..83       MOV     DPH,?XSP + 1
   \   000086   AA82         MOV     R2,DPL
   \   000088   AB83         MOV     R3,DPH
   \   00008A   90....       MOV     DPTR,#(AssocMakeList & 0xffff)
   \   00008D   74..         MOV     A,#((AssocMakeList >> 16) & 0xff)
   \   00008F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000092   8A..         MOV     ?V0 + 4,R2
   \   000094   8B..         MOV     ?V0 + 5,R3
   \   000096   AE..         MOV     R6,?V0 + 4
   \   000098   AF..         MOV     R7,?V0 + 5
    782          #else
    783              assocCnt = 0;
    784              assocList = NULL;
    785          #endif
    786          
    787              *pBuf++ = assocCnt;
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   12....       LCALL   ?Subroutine0 & 0xFFFF
    788          
    789              // upto 16 devices
    790              osal_memset( pBuf, 0, (16 * sizeof(uint16)) );
   \                     ??CrossCallReturnLabel_3:
   \   0000A3                ; Setup parameters for call to function osal_memset
   \   0000A3   7C20         MOV     R4,#0x20
   \   0000A5   7D00         MOV     R5,#0x0
   \   0000A7   7900         MOV     R1,#0x0
   \   0000A9   AA..         MOV     R2,?V0 + 0
   \   0000AB   AB..         MOV     R3,?V0 + 1
   \   0000AD   90....       MOV     DPTR,#(osal_memset & 0xffff)
   \   0000B0   74..         MOV     A,#((osal_memset >> 16) & 0xff)
   \   0000B2   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    791              puint16 = assocList;
   \   0000B5   EE           MOV     A,R6
   \   0000B6   F8           MOV     R0,A
   \   0000B7   EF           MOV     A,R7
   \   0000B8   F9           MOV     R1,A
    792              for ( x = 0; x < assocCnt; x++ )
   \   0000B9   7C00         MOV     R4,#0x0
   \   0000BB   8019         SJMP    ??MT_ProcessGetDeviceInfo_2
    793              {
    794                *pBuf++ = HI_UINT16( *puint16 );
   \                     ??MT_ProcessGetDeviceInfo_3:
   \   0000BD   8882         MOV     DPL,R0
   \   0000BF   8983         MOV     DPH,R1
   \   0000C1   A3           INC     DPTR
   \   0000C2   12....       LCALL   ?Subroutine0 & 0xFFFF
    795                *pBuf++ = LO_UINT16( *puint16 );
   \                     ??CrossCallReturnLabel_4:
   \   0000C5   8882         MOV     DPL,R0
   \   0000C7   8983         MOV     DPH,R1
   \   0000C9   12....       LCALL   ?Subroutine0 & 0xFFFF
    796                puint16++;
   \                     ??CrossCallReturnLabel_5:
   \   0000CC   E8           MOV     A,R0
   \   0000CD   2402         ADD     A,#0x2
   \   0000CF   08           INC     R0
   \   0000D0   08           INC     R0
   \   0000D1   E9           MOV     A,R1
   \   0000D2   3400         ADDC    A,#0x0
   \   0000D4   F9           MOV     R1,A
    797              }
   \   0000D5   0C           INC     R4
   \                     ??MT_ProcessGetDeviceInfo_2:
   \   0000D6   85..82       MOV     DPL,?XSP + 0
   \   0000D9   85..83       MOV     DPH,?XSP + 1
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   FA           MOV     R2,A
   \   0000DE   EC           MOV     A,R4
   \   0000DF   C3           CLR     C
   \   0000E0   9A           SUBB    A,R2
   \   0000E1   40DA         JC      ??MT_ProcessGetDeviceInfo_3
    798          
    799              if ( assocList )
   \   0000E3   EE           MOV     A,R6
   \   0000E4   7001         JNZ     ??MT_ProcessGetDeviceInfo_4
   \   0000E6   EF           MOV     A,R7
   \                     ??MT_ProcessGetDeviceInfo_4:
   \   0000E7   600C         JZ      ??MT_ProcessGetDeviceInfo_5
    800                osal_mem_free( assocList );
   \   0000E9                ; Setup parameters for call to function osal_mem_free
   \   0000E9   EE           MOV     A,R6
   \   0000EA   FA           MOV     R2,A
   \   0000EB   EF           MOV     A,R7
   \   0000EC   FB           MOV     R3,A
   \   0000ED   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   0000F0   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   0000F2   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    801          
    802              MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + DEVICE_INFO_RESPONSE_LEN),
    803                                            (SPI_RESPONSE_BIT | SPI_CMD_SYS_GET_DEVICE_INFO),
    804                                            DEVICE_INFO_RESPONSE_LEN, buf );
   \                     ??MT_ProcessGetDeviceInfo_5:
   \   0000F5                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F5   78..         MOV     R0,#?V0 + 2
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FA   7C2E         MOV     R4,#0x2e
   \   0000FC   7A14         MOV     R2,#0x14
   \   0000FE   7B10         MOV     R3,#0x10
   \   000100   7933         MOV     R1,#0x33
   \   000102   90....       MOV     DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
   \   000105   74..         MOV     A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
   \   000107   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00010A   7402         MOV     A,#0x2
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
    805          
    806              osal_mem_free( buf );
   \   00010F                ; Setup parameters for call to function osal_mem_free
   \   00010F   AA..         MOV     R2,?V0 + 2
   \   000111   AB..         MOV     R3,?V0 + 3
   \   000113   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   000116   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   000118   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    807            }
    808          }
   \                     ??MT_ProcessGetDeviceInfo_1:
   \   00011B   02....       LJMP    ?Subroutine16 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \                     ??Subroutine0_0:
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   8582..       MOV     ?V0 + 0,DPL
   \   00000C   8583..       MOV     ?V0 + 1,DPH
   \   00000F   22           RET
    809          #endif
    810          
    811          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    812          /***************************************************************************************************
    813           * @fn      MT_ProcessSerialCommand
    814           *
    815           * @brief
    816           *
    817           *   Process Serial Message.
    818           *
    819           * @param   byte *msg - pointer to event message
    820           *
    821           * @return  void
    822           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    823          void MT_ProcessSerialCommand( byte *msg )
   \                     MT_ProcessSerialCommand:
    824          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    825            UINT16 cmd;
    826            UINT16 callbackID;
    827            byte len;
    828            byte ret;
    829            byte *pData;
    830            uint16 tmp16;
    831            uint32 tmp32;
    832            byte extAddr[Z_EXTADDR_LEN];
    833            byte *retValue;
    834            byte x = 0;
   \   00000A   7900         MOV     R1,#0x0
    835          #if !defined ( NONWK )
    836            uint16 attLen;
    837          #endif // NONWK
    838          
    839            // dig out header info
    840            cmd = BUILD_UINT16( msg[1], msg[0] );
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FD           MOV     R5,A
   \   000019   E4           CLR     A
   \   00001A   2E           ADD     A,R6
   \   00001B   FC           MOV     R4,A
   \   00001C   ED           MOV     A,R5
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   FD           MOV     R5,A
   \   000020   7403         MOV     A,#0x3
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   EC           MOV     A,R4
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   ED           MOV     A,R5
   \   000029   F0           MOVX    @DPTR,A
    841            save_cmd = cmd;
   \   00002A   7403         MOV     A,#0x3
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   90....       MOV     DPTR,#save_cmd
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   ED           MOV     A,R5
   \   000036   F0           MOVX    @DPTR,A
    842            len = msg[2];
    843            pData = &msg[3];
   \   000037   EA           MOV     A,R2
   \   000038   2403         ADD     A,#0x3
   \   00003A   FE           MOV     R6,A
   \   00003B   EB           MOV     A,R3
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   FF           MOV     R7,A
    844          
    845              // Setup for return;
    846              len = 0;
   \   00003F   7C00         MOV     R4,#0x0
    847              retValue = &ret;
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   8582..       MOV     ?V0 + 0,DPL
   \   00004A   8583..       MOV     ?V0 + 1,DPH
   \   00004D   7401         MOV     A,#0x1
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E5..         MOV     A,?V0 + 0
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   E5..         MOV     A,?V0 + 1
   \   000058   F0           MOVX    @DPTR,A
    848          
    849              //Process the contents of the message
    850              switch ( cmd )
   \   000059   7403         MOV     A,#0x3
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for MT_ProcessSerialCommand>_0`:
   \   000066   0100         DW        1
   \   000068   000A         DW        2560
   \   00006A   180A         DW        2584
   \   00006C   ....         DW        ??MT_ProcessSerialCommand_0
   \   00006E   1600         DW        22
   \   000070   0100         DW        1
   \   000072   ....         DW        ??MT_ProcessSerialCommand_1
   \   000074   0200         DW        2
   \   000076   ....         DW        ??MT_ProcessSerialCommand_2
   \   000078   0300         DW        3
   \   00007A   ....         DW        ??MT_ProcessSerialCommand_3
   \   00007C   0500         DW        5
   \   00007E   ....         DW        ??MT_ProcessSerialCommand_4
   \   000080   0600         DW        6
   \   000082   ....         DW        ??MT_ProcessSerialCommand_5
   \   000084   0700         DW        7
   \   000086   ....         DW        ??MT_ProcessSerialCommand_6
   \   000088   0800         DW        8
   \   00008A   ....         DW        ??MT_ProcessSerialCommand_7
   \   00008C   1000         DW        16
   \   00008E   ....         DW        ??MT_ProcessSerialCommand_8
   \   000090   1100         DW        17
   \   000092   ....         DW        ??MT_ProcessSerialCommand_9
   \   000094   1200         DW        18
   \   000096   ....         DW        ??MT_ProcessSerialCommand_10
   \   000098   1300         DW        19
   \   00009A   ....         DW        ??MT_ProcessSerialCommand_11
   \   00009C   1400         DW        20
   \   00009E   ....         DW        ??MT_ProcessSerialCommand_12
   \   0000A0   1600         DW        22
   \   0000A2   ....         DW        ??MT_ProcessSerialCommand_13
   \   0000A4   1700         DW        23
   \   0000A6   ....         DW        ??MT_ProcessSerialCommand_14
   \   0000A8   1800         DW        24
   \   0000AA   ....         DW        ??MT_ProcessSerialCommand_15
   \   0000AC   1900         DW        25
   \   0000AE   ....         DW        ??MT_ProcessSerialCommand_16
   \   0000B0   1A00         DW        26
   \   0000B2   ....         DW        ??MT_ProcessSerialCommand_17
   \   0000B4   1B00         DW        27
   \   0000B6   ....         DW        ??MT_ProcessSerialCommand_18
   \   0000B8   1C00         DW        28
   \   0000BA   ....         DW        ??MT_ProcessSerialCommand_19
   \   0000BC   1D00         DW        29
   \   0000BE   ....         DW        ??MT_ProcessSerialCommand_20
   \   0000C0   1E00         DW        30
   \   0000C2   ....         DW        ??MT_ProcessSerialCommand_21
   \   0000C4   1F00         DW        31
   \   0000C6   ....         DW        ??MT_ProcessSerialCommand_22
   \   0000C8   ....         DW        ??MT_ProcessSerialCommand_23
    851              {
    852          #ifdef MACSIM
    853                case SPI_CMD_ZIGNET_DATA:
    854                  MACSIM_TranslateMsg( pData, len );
    855                  break;
    856          #endif
    857          
    858                case SPI_CMD_SYS_RAM_READ:
    859                  extAddr[0] = MT_RAMRead( (UINT16)BUILD_UINT16( pData[1], pData[0] ), &extAddr[1] );
   \                     ??MT_ProcessSerialCommand_1:
   \   0000CA                ; Setup parameters for call to function MT_RAMRead
   \   0000CA   740C         MOV     A,#0xc
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   AC82         MOV     R4,DPL
   \   0000D1   AD83         MOV     R5,DPH
   \   0000D3   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000D6   E9           MOV     A,R1
   \   0000D7   3400         ADDC    A,#0x0
   \   0000D9   FB           MOV     R3,A
   \   0000DA   90....       MOV     DPTR,#(MT_RAMRead & 0xffff)
   \   0000DD   74..         MOV     A,#((MT_RAMRead >> 16) & 0xff)
   \   0000DF   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000E2   740B         MOV     A,#0xb
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E7   E9           MOV     A,R1
   \   0000E8   F0           MOVX    @DPTR,A
    860                  len = MT_RAM_READ_RESP_LEN;
   \   0000E9   7C02         MOV     R4,#0x2
    861                  retValue = extAddr;
   \                     ??MT_ProcessSerialCommand_24:
   \   0000EB   A882         MOV     R0,DPL
   \   0000ED   A983         MOV     R1,DPH
   \   0000EF   7401         MOV     A,#0x1
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   E8           MOV     A,R0
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E9           MOV     A,R1
   \                     ??MT_ProcessSerialCommand_25:
   \   0000F8   F0           MOVX    @DPTR,A
   \   0000F9   02....       LJMP    ??MT_ProcessSerialCommand_26 & 0xFFFF
    862                  break;
    863          
    864                case SPI_CMD_SYS_RAM_WRITE:
    865                  ret = MT_RAMWrite( (UINT16)BUILD_UINT16( pData[1], pData[0] ), pData[2] );
   \                     ??MT_ProcessSerialCommand_2:
   \   0000FC                ; Setup parameters for call to function MT_RAMWrite
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F9           MOV     R1,A
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   A3           INC     DPTR
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   FC           MOV     R4,A
   \   00010B   8E82         MOV     DPL,R6
   \   00010D   8F83         MOV     DPH,R7
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   FB           MOV     R3,A
   \   000111   E4           CLR     A
   \   000112   2C           ADD     A,R4
   \   000113   FA           MOV     R2,A
   \   000114   EB           MOV     A,R3
   \   000115   3400         ADDC    A,#0x0
   \   000117   FB           MOV     R3,A
   \   000118   90....       MOV     DPTR,#(MT_RAMWrite & 0xffff)
   \   00011B   74..         MOV     A,#((MT_RAMWrite >> 16) & 0xff)
   \                     ??MT_ProcessSerialCommand_27:
   \   00011D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??MT_ProcessSerialCommand_28:
   \   000120   E9           MOV     A,R1
   \   000121   02....       LJMP    ??MT_ProcessSerialCommand_29 & 0xFFFF
    866                  len = MT_RAM_WRITE_RESP_LEN;
    867                  break;
    868          
    869                case SPI_CMD_SYS_SET_DEBUG_THRESHOLD:
    870                  ret = MT_SetDebugThreshold( pData[0], pData[1] );
   \                     ??MT_ProcessSerialCommand_3:
   \   000124   8E82         MOV     DPL,R6
   \   000126   8F83         MOV     DPH,R7
   \   000128   E0           MOVX    A,@DPTR
   \   000129   FA           MOV     R2,A
   \   00012A   A3           INC     DPTR
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   90....       MOV     DPTR,#debugThreshold
   \   00012F   F0           MOVX    @DPTR,A
   \   000130   EA           MOV     A,R2
   \   000131   90....       MOV     DPTR,#debugCompId
   \   000134   F0           MOVX    @DPTR,A
    871                  len = 1;
    872                  break;
    873          
    874                case SPI_CMD_TRACE_SUB:
    875                  break;
    876          
    877                case SPI_CMD_SYS_RESET:
    878                  MT_Reset( pData[0] );
    879                  break;
    880          
    881                case SPI_CMD_SYS_CALLBACK_SUB_CMD:
    882                  // a callback value of 0xFFFF turns on all available callbacks
    883                  callbackID = BUILD_UINT16( pData[1] , pData[0] );
    884                  if ( callbackID == 0xFFFF )
    885                  {
    886                    // What is the action
    887                    if ( pData[2] )
    888                    {
    889                      // Turn on
    890          #if defined( MT_MAC_CB_FUNC )
    891                      _macCallbackSub = 0xFFFF;
    892          #endif
    893          #if defined( MT_NWK_CB_FUNC )
    894                      _nwkCallbackSub = 0xFFFF;
    895          #endif
    896          
    897          #if defined( MT_ZDO_FUNC )
    898                      _zdoCallbackSub = 0xFFFFFFFF;
    899          #endif
    900          #if defined( MT_AF_CB_FUNC )
    901                      _afCallbackSub = 0xFFFF;
    902          #endif
    903          #if defined( MT_SAPI_CB_FUNC )
    904                      _sapiCallbackSub = 0xFFFF;
    905          #endif
    906                    }
    907                    else
    908                    {
    909                      // Turn off
    910          #if defined( MT_MAC_CB_FUNC )
    911                      _macCallbackSub = 0x0000;
    912          #endif
    913          #if defined( MT_NWK_CB_FUNC )
    914                      _nwkCallbackSub = 0x0000;
    915          #endif
    916          
    917          #if defined( MT_ZDO_FUNC )
    918                      _zdoCallbackSub = 0x00000000;
    919          #endif
    920          #if defined( MT_AF_CB_FUNC )
    921                      _afCallbackSub = 0x0000;
    922          #endif
    923          #if defined( MT_SAPI_CB_FUNC )
    924                      _sapiCallbackSub = 0x0000;
    925          #endif
    926                    }
    927                  }
    928                  else
    929                  {
    930                    //First check which layer callbacks are desired and then set the preference
    931          
    932          #if defined( MT_MAC_CB_FUNC )
    933                    //If it is a MAC callback, set the corresponding callback subscription bit
    934                    if (( callbackID & 0xFFF0 ) == SPI_MAC_CB_TYPE )
    935                    {
    936                      //Based on the action field, either enable or disable subscription
    937                      if ( pData[2] )
    938                        _macCallbackSub |=  ( 1 << ( pData[1] & 0x0F ) );
    939                      else
    940                        _macCallbackSub &= ~( 1 << ( pData[1] & 0x0F ) );
    941                    }
    942          #endif
    943          
    944          #if defined( MT_NWK_CB_FUNC )
    945                    //If it is a NWK callback, set the corresponding callback subscription bit
    946                    if (( callbackID & 0xFFF0 ) == SPI_NWK_CB_TYPE )
    947                    {
    948          
    949                      //Based on the action field, either enable or disable subscription
    950                      if ( pData[2] )
    951                        _nwkCallbackSub |=  ( 1 << ( pData[1] & 0x0F ) ) ;
    952                      else
    953                        _nwkCallbackSub &= ~( 1 << ( pData[1] & 0x0F ) );
    954                    }
    955          #endif
    956          
    957          #if defined( MT_ZDO_FUNC )
    958                    //If it is a APS callback, set the corresponding callback subscription bit
    959                    if ( ((callbackID & 0xFFF0) == SPI_ZDO_CB_TYPE) ||
    960                         ((callbackID & 0xFFF0) == SPI_ZDO_CB2_TYPE) )
    961                    {
    962                      //Based on the action field, either enable or disable subscription
    963                      if ( pData[2] )
    964                        _zdoCallbackSub |=  ( 1L << ( pData[1] & 0x1F ) );
    965                      else
    966                        _zdoCallbackSub &= ~( 1L << ( pData[1] & 0x1F ) );
    967                    }
    968          #endif
    969          
    970          #if defined( MT_AF_CB_FUNC )
    971                    // Set the corresponding callback subscription bit for an AF callback.
    972                    if (( callbackID & 0xFFF0 ) == SPI_AF_CB_TYPE )
    973                    {
    974                      // Based on the action field, either enable or disable subscription.
    975                      if ( pData[2] )
    976                        _afCallbackSub |=  ( 1 << ( pData[1] & 0x0F ) );
    977                      else
    978                        _afCallbackSub &= ~( 1 << ( pData[1] & 0x0F ) );
    979                    }
    980          #endif
    981          #if defined( MT_SAPI_CB_FUNC )
    982                    // Set the corresponding callback subscription bit for an SAPI callback.
    983                    if (( callbackID & 0xFFF0 ) == SPI_SAPI_CB_TYPE )
    984                    {
    985                      // Based on the action field, either enable or disable subscription.
    986                      if ( pData[2] )
    987                        _sapiCallbackSub |=  ( 1 << ( pData[1] & 0x0F ) );
    988                      else
    989                        _sapiCallbackSub &= ~( 1 << ( pData[1] & 0x0F ) );
    990                    }
    991          #endif
    992                  }
    993                  len = 1;
    994                  ret = ZSUCCESS;
    995                  break;
    996          
    997                case SPI_CMD_SYS_PING:
    998                  // Get a message buffer to build response message
    999                  // The Ping response now has capabilities included
   1000          
   1001                  // Build Capabilities
   1002                  tmp16 = MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF |
   1003                        MT_CAP_ZDO | MT_CAP_USER_TEST | MT_CAP_SAPI_FUNC;
   1004          
   1005                  // Convert to high byte first into temp buffer
   1006                  extAddr[0] = HI_UINT16( tmp16 );
   1007                  extAddr[1] = LO_UINT16( tmp16 );
   1008                  len = sizeof ( tmp16 );
   1009                  retValue = extAddr;
   1010                  break;
   1011          
   1012                case SPI_CMD_SYS_VERSION:
   1013                  {
   1014          #if !defined ( NONWK )
   1015                    uint8 i = NLME_GetProtocolVersion() - 1;
   1016          #else
   1017                    uint8 i = 1;   // just say '1.1' -- irrelevant if stack isn't there anyway
   1018          #endif
   1019          
   1020                    // Get a message buffer to build response message
   1021                    len      = (byte)(osal_strlen( (char *)MTVersionString[i] ));
   1022                    retValue = (byte *)MTVersionString[i];
   1023                  }
   1024                    break;
   1025          
   1026                case SPI_CMD_SYS_SET_EXTADDR:
   1027                  // Incoming extended address is reversed
   1028                  MT_ReverseBytes( pData, Z_EXTADDR_LEN );
   1029          
   1030                  if ( ZMacSetReq( ZMacExtAddr, pData ) == ZMacSuccess )
   1031                    ret = osal_nv_write( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pData );
   1032                  else
   1033                    ret = 1;
   1034                  len = 1;
   1035                  break;
   1036          
   1037                case SPI_CMD_SYS_GET_EXTADDR:
   1038                  ZMacGetReq( ZMacExtAddr, extAddr );
   1039          
   1040                  // Outgoing extended address needs to be reversed
   1041                  MT_ReverseBytes( extAddr, Z_EXTADDR_LEN );
   1042          
   1043                  len = Z_EXTADDR_LEN;
   1044                  retValue = extAddr;
   1045                  break;
   1046          
   1047          #if !defined ( NONWK )
   1048                case SPI_CMD_SYS_SET_PANID:
   1049                  tmp16 = BUILD_UINT16( pData[1], pData[0] );
   1050                  attLen = osal_nv_item_len( ZCD_NV_PANID );
   1051                  ret = osal_nv_write( ZCD_NV_PANID, 0, attLen, &tmp16 );
   1052                  len = 1;
   1053                  break;
   1054          
   1055                case SPI_CMD_SYS_SET_CHANNELS:
   1056                  tmp32 = BUILD_UINT32( pData[3], pData[2], pData[1], pData[0] );
   1057                  attLen = osal_nv_item_len( ZCD_NV_CHANLIST );
   1058                  ret = osal_nv_write( ZCD_NV_CHANLIST, 0, attLen, &tmp32 );
   1059                  len = 1;
   1060                  break;
   1061          
   1062                case SPI_CMD_SYS_SET_SECLEVEL:
   1063                  attLen = osal_nv_item_len( ZCD_NV_SECURITY_LEVEL );
   1064                  ret = osal_nv_write( ZCD_NV_SECURITY_LEVEL, 0, attLen, pData );
   1065                  len = 1;
   1066                  break;
   1067          
   1068                case SPI_CMD_SYS_SET_PRECFGKEY:
   1069                  attLen = osal_nv_item_len( ZCD_NV_PRECFGKEY );
   1070                  ret = osal_nv_write( ZCD_NV_PRECFGKEY, 0, attLen, pData );
   1071                  len = 1;
   1072                  break;
   1073          
   1074                case SPI_CMD_SYS_GET_NV_INFO:
   1075                  MT_ProcessGetNvInfo();
   1076                  break;
   1077          #endif // NONWK
   1078          
   1079                case SPI_CMD_SYS_GET_DEVICE_INFO:
   1080                  MT_ProcessGetDeviceInfo();
   1081                  break;
   1082          
   1083                case SPI_CMD_SYS_SET_NV:
   1084                  ret = MT_ProcessSetNV( pData );
   1085                  len = 1;
   1086                  break;
   1087          
   1088                case SPI_CMD_SYS_GET_NV:
   1089                  MT_ProcessGetNV( pData );
   1090                  break;
   1091          
   1092                case SPI_CMD_SYS_TIME_ALIVE:
   1093                  // Time since last reset (seconds)
   1094                  tmp32 = osal_GetSystemClock() / 1000;
   1095                  // Convert to high byte first into temp buffer
   1096                  extAddr[0] = BREAK_UINT32( tmp32, 3 );
   1097                  extAddr[1] = BREAK_UINT32( tmp32, 2 );
   1098                  extAddr[2] = BREAK_UINT32( tmp32, 1 );
   1099                  extAddr[3] = BREAK_UINT32( tmp32, 0 );
   1100                  len = sizeof ( tmp32 );
   1101                  retValue = extAddr;
   1102                  break;
   1103          
   1104                case SPI_CMD_SYS_KEY_EVENT:
   1105                  // Translate between SPI values to device values
   1106                  if ( pData[1] & 0x01 )
   1107                    x |= HAL_KEY_SW_1;
   1108                  if ( pData[1] & 0x02 )
   1109                    x |= HAL_KEY_SW_2;
   1110                  if ( pData[1] & 0x04 )
   1111                    x |= HAL_KEY_SW_3;
   1112                  if ( pData[1] & 0x08 )
   1113                    x |= HAL_KEY_SW_4;
   1114          #if defined ( HAL_KEY_SW_5 )
   1115                  if ( pData[1] & 0x10 )
   1116                    x |= HAL_KEY_SW_5;
   1117          #endif
   1118          #if defined ( HAL_KEY_SW_6 )
   1119                  if ( pData[1] & 0x20 )
   1120                    x |= HAL_KEY_SW_6;
   1121          #endif
   1122          #if defined ( HAL_KEY_SW_7 )
   1123                  if ( pData[1] & 0x40 )
   1124                    x |= HAL_KEY_SW_7;
   1125          #endif
   1126          #if defined ( HAL_KEY_SW_8 )
   1127                  if ( pData[1] & 0x80 )
   1128                    x |= HAL_KEY_SW_8;
   1129          #endif
   1130                  ret = OnBoard_SendKeys( x, pData[0]  );
   1131                  len = 1;
   1132                  break;
   1133          
   1134                case SPI_CMD_SYS_HEARTBEAT:
   1135                  ret = ZSUCCESS;
   \                     ??MT_ProcessSerialCommand_14:
   \   000135   E4           CLR     A
   \   000136   02....       LJMP    ??MT_ProcessSerialCommand_29 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_4:
   \   000139                ; Setup parameters for call to function MT_Reset
   \   000139   8E82         MOV     DPL,R6
   \   00013B   8F83         MOV     DPH,R7
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F9           MOV     R1,A
   \   00013F   90....       MOV     DPTR,#(MT_Reset & 0xffff)
   \   000142   74..         MOV     A,#((MT_Reset >> 16) & 0xff)
   \                     ??MT_ProcessSerialCommand_30:
   \   000144   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000147   02....       LJMP    ??MT_ProcessSerialCommand_31 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_5:
   \   00014A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00014D   74FF         MOV     A,#-0x1
   \   00014F   68           XRL     A,R0
   \   000150   7003         JNZ     ??MT_ProcessSerialCommand_32
   \   000152   74FF         MOV     A,#-0x1
   \   000154   69           XRL     A,R1
   \                     ??MT_ProcessSerialCommand_32:
   \   000155   701C         JNZ     ??MT_ProcessSerialCommand_33
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   6012         JZ      ??MT_ProcessSerialCommand_34
   \   00015C   90....       MOV     DPTR,#__Constant_ffffffff
   \                     ??MT_ProcessSerialCommand_35:
   \   00015F   78..         MOV     R0,#?V0 + 0
   \   000161   12....       LCALL   ?L_MOV_X
   \   000164   90....       MOV     DPTR,#_zdoCallbackSub
   \   000167   78..         MOV     R0,#?V0 + 0
   \   000169   12....       LCALL   ?L_MOV_TO_X
   \   00016C   805F         SJMP    ??MT_ProcessSerialCommand_36
   \                     ??MT_ProcessSerialCommand_34:
   \   00016E   90....       MOV     DPTR,#__Constant_0
   \   000171   80EC         SJMP    ??MT_ProcessSerialCommand_35
   \                     ??MT_ProcessSerialCommand_33:
   \   000173   74F0         MOV     A,#-0x10
   \   000175   58           ANL     A,R0
   \   000176   FA           MOV     R2,A
   \   000177   74FF         MOV     A,#-0x1
   \   000179   59           ANL     A,R1
   \   00017A   FB           MOV     R3,A
   \   00017B   7480         MOV     A,#-0x80
   \   00017D   6A           XRL     A,R2
   \   00017E   7003         JNZ     ??MT_ProcessSerialCommand_37
   \   000180   740A         MOV     A,#0xa
   \   000182   6B           XRL     A,R3
   \                     ??MT_ProcessSerialCommand_37:
   \   000183   600E         JZ      ??MT_ProcessSerialCommand_38
   \   000185   74F0         MOV     A,#-0x10
   \   000187   58           ANL     A,R0
   \   000188   F8           MOV     R0,A
   \   000189   7490         MOV     A,#-0x70
   \   00018B   68           XRL     A,R0
   \   00018C   7003         JNZ     ??MT_ProcessSerialCommand_39
   \   00018E   740A         MOV     A,#0xa
   \   000190   69           XRL     A,R1
   \                     ??MT_ProcessSerialCommand_39:
   \   000191   703A         JNZ     ??MT_ProcessSerialCommand_36
   \                     ??MT_ProcessSerialCommand_38:
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   E0           MOVX    A,@DPTR
   \   000196   75..01       MOV     ?V0 + 0,#0x1
   \   000199   8C..         MOV     ?V0 + 1,R4
   \   00019B   8C..         MOV     ?V0 + 2,R4
   \   00019D   8C..         MOV     ?V0 + 3,R4
   \   00019F   8E82         MOV     DPL,R6
   \   0001A1   8F83         MOV     DPH,R7
   \   0001A3   A3           INC     DPTR
   \   0001A4   6012         JZ      ??MT_ProcessSerialCommand_40
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   541F         ANL     A,#0x1f
   \   0001A9   78..         MOV     R0,#?V0 + 0
   \   0001AB   12....       LCALL   ?L_SHL
   \   0001AE   90....       MOV     DPTR,#_zdoCallbackSub
   \   0001B1   78..         MOV     R0,#?V0 + 0
   \   0001B3   12....       LCALL   ?L_IOR_TO_X
   \   0001B6   8015         SJMP    ??MT_ProcessSerialCommand_36
   \                     ??MT_ProcessSerialCommand_40:
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   541F         ANL     A,#0x1f
   \   0001BB   78..         MOV     R0,#?V0 + 0
   \   0001BD   12....       LCALL   ?L_SHL
   \   0001C0   78..         MOV     R0,#?V0 + 0
   \   0001C2   12....       LCALL   ?L_NOT
   \   0001C5   90....       MOV     DPTR,#_zdoCallbackSub
   \   0001C8   78..         MOV     R0,#?V0 + 0
   \   0001CA   12....       LCALL   ?L_AND_TO_X
   \                     ??MT_ProcessSerialCommand_36:
   \   0001CD   0C           INC     R4
   \   0001CE   E4           CLR     A
   \   0001CF   85..82       MOV     DPL,?XSP + 0
   \   0001D2   85..83       MOV     DPH,?XSP + 1
   \   0001D5   02....       LJMP    ??MT_ProcessSerialCommand_25 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_6:
   \   0001D8   7409         MOV     A,#0x9
   \   0001DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DD   7408         MOV     A,#0x8
   \   0001DF   F0           MOVX    @DPTR,A
   \   0001E0   A3           INC     DPTR
   \   0001E1   E4           CLR     A
   \   0001E2   F0           MOVX    @DPTR,A
   \   0001E3   740B         MOV     A,#0xb
   \   0001E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E8   E4           CLR     A
   \   0001E9   F0           MOVX    @DPTR,A
   \   0001EA   740C         MOV     A,#0xc
   \   0001EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EF   7408         MOV     A,#0x8
   \   0001F1   F0           MOVX    @DPTR,A
   \   0001F2   0C           INC     R4
   \   0001F3   0C           INC     R4
   \                     ??MT_ProcessSerialCommand_41:
   \   0001F4   740B         MOV     A,#0xb
   \   0001F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F9   02....       LJMP    ??MT_ProcessSerialCommand_24 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_7:
   \   0001FC                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   0001FC   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   0001FF   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000201   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000204   E9           MOV     A,R1
   \   000205   14           DEC     A
   \   000206   C3           CLR     C
   \   000207   33           RLC     A
   \   000208   F8           MOV     R0,A
   \   000209   E4           CLR     A
   \   00020A   33           RLC     A
   \   00020B   F9           MOV     R1,A
   \   00020C   E8           MOV     A,R0
   \   00020D   24..         ADD     A,#(MTVersionString & 0xff)
   \   00020F   FE           MOV     R6,A
   \   000210   E9           MOV     A,R1
   \   000211   34..         ADDC    A,#((MTVersionString >> 8) & 0xff)
   \   000213   FF           MOV     R7,A
   \   000214                ; Setup parameters for call to function osal_strlen
   \   000214   8E82         MOV     DPL,R6
   \   000216   8F83         MOV     DPH,R7
   \   000218   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00021B   90....       MOV     DPTR,#(osal_strlen & 0xffff)
   \   00021E   74..         MOV     A,#((osal_strlen >> 16) & 0xff)
   \   000220   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000223   EA           MOV     A,R2
   \   000224   FC           MOV     R4,A
   \   000225   8E82         MOV     DPL,R6
   \   000227   8F83         MOV     DPH,R7
   \   000229   E0           MOVX    A,@DPTR
   \   00022A   F8           MOV     R0,A
   \   00022B   A3           INC     DPTR
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   F9           MOV     R1,A
   \   00022E   7401         MOV     A,#0x1
   \   000230   12....       LCALL   ?XSTACK_DISP0_8
   \   000233   E8           MOV     A,R0
   \   000234   F0           MOVX    @DPTR,A
   \   000235   A3           INC     DPTR
   \   000236   E9           MOV     A,R1
   \   000237   F0           MOVX    @DPTR,A
   1136                  len = 1;
   1137                  break;
   1138          
   1139          #if !defined ( NONWK )
   1140                case SPI_CMD_SYS_APP_MSG:
   1141                  ret = MTProcessAppMsg( pData, msg[2] );
   1142                  len = 0;
   1143                  break;
   1144          #endif // NONWK
   1145          
   1146                case SPI_CMD_SYS_LED_CONTROL:
   1147          #if (defined HAL_LED) && (HAL_LED == TRUE)
   1148                  ret = MTProcessLedControl( pData );
   1149                  len = 1;
   1150          #endif
   1151                  break;
   1152          
   1153          #ifdef MT_MAC_FUNC
   1154                case SPI_CMD_MAC_INIT:
   1155                case SPI_CMD_MAC_ASSOCIATE_REQ:
   1156                case SPI_CMD_MAC_ASSOCIATE_RSP:
   1157                case SPI_CMD_MAC_DISASSOCIATE_REQ:
   1158                case SPI_CMD_MAC_DATA_REQ:
   1159                case SPI_CMD_MAC_GET_REQ:
   1160                case SPI_CMD_MAC_SET_REQ:
   1161                case SPI_CMD_MAC_START_REQ:
   1162                case SPI_CMD_MAC_SCAN_REQ:
   1163                case SPI_CMD_MAC_RESET_REQ:
   1164                case SPI_CMD_MAC_GTS_REQ:
   1165                case SPI_CMD_MAC_ORPHAN_RSP:
   1166                case SPI_CMD_MAC_RX_ENABLE_REQ:
   1167                case SPI_CMD_MAC_SYNC_REQ:
   1168                case SPI_CMD_MAC_POLL_REQ:
   1169                case SPI_CMD_MAC_PURGE_REQ:
   1170                  MT_MacCommandProcessing( cmd , len , pData );
   1171                  break;
   1172          #endif
   1173          
   1174          #ifdef MT_NWK_FUNC
   1175                case SPI_CMD_NWK_INIT:
   1176                case SPI_CMD_NLDE_DATA_REQ:
   1177                case SPI_CMD_NLME_INIT_COORD_REQ:
   1178                case SPI_CMD_NLME_PERMIT_JOINING_REQ:
   1179                case SPI_CMD_NLME_JOIN_REQ:
   1180                case SPI_CMD_NLME_LEAVE_REQ:
   1181                case SPI_CMD_NLME_RESET_REQ:
   1182                case SPI_CMD_NLME_RX_STATE_REQ:
   1183                case SPI_CMD_NLME_GET_REQ:
   1184                case SPI_CMD_NLME_SET_REQ:
   1185                case SPI_CMD_NLME_NWK_DISC_REQ:
   1186                case SPI_CMD_NLME_ROUTE_DISC_REQ:
   1187                case SPI_CMD_NLME_DIRECT_JOIN_REQ:
   1188                case SPI_CMD_NLME_ORPHAN_JOIN_REQ:
   1189                case SPI_CMD_NLME_START_ROUTER_REQ:
   1190                  MT_NwkCommandProcessing( cmd , len , pData );
   1191                  break;
   1192          #endif
   1193          
   1194          #ifdef MT_ZDO_FUNC
   1195                case SPI_CMD_ZDO_AUTO_ENDDEVICEBIND_REQ:
   1196                case SPI_CMD_ZDO_AUTO_FIND_DESTINATION_REQ:
   1197                case SPI_CMD_ZDO_NWK_ADDR_REQ:
   1198                case SPI_CMD_ZDO_IEEE_ADDR_REQ:
   1199                case SPI_CMD_ZDO_NODE_DESC_REQ:
   1200                case SPI_CMD_ZDO_POWER_DESC_REQ:
   1201                case SPI_CMD_ZDO_SIMPLE_DESC_REQ:
   1202                case SPI_CMD_ZDO_ACTIVE_EPINT_REQ:
   1203                case SPI_CMD_ZDO_MATCH_DESC_REQ:
   1204                case SPI_CMD_ZDO_COMPLEX_DESC_REQ:
   1205                case SPI_CMD_ZDO_USER_DESC_REQ:
   1206                case SPI_CMD_ZDO_END_DEV_BIND_REQ:
   1207                case SPI_CMD_ZDO_BIND_REQ:
   1208                case SPI_CMD_ZDO_UNBIND_REQ:
   1209                case SPI_CMD_ZDO_MGMT_NWKDISC_REQ:
   1210                case SPI_CMD_ZDO_MGMT_LQI_REQ:
   1211                case SPI_CMD_ZDO_MGMT_RTG_REQ:
   1212                case SPI_CMD_ZDO_MGMT_BIND_REQ:
   1213                case SPI_CMD_ZDO_MGMT_DIRECT_JOIN_REQ:
   1214                case SPI_CMD_ZDO_USER_DESC_SET:
   1215                case SPI_CMD_ZDO_END_DEV_ANNCE:
   1216                case SPI_CMD_ZDO_MGMT_LEAVE_REQ:
   1217                case SPI_CMD_ZDO_MGMT_PERMIT_JOIN_REQ:
   1218                case SPI_CMD_ZDO_SERVERDISC_REQ:
   1219                case SPI_CMD_ZDO_NETWORK_START_REQ:
   1220                  MT_ZdoCommandProcessing( cmd , len , pData );
   1221                  break;
   1222          #endif
   1223          
   1224          #if defined ( MT_AF_FUNC )
   1225                case SPI_CMD_AF_INIT:
   1226                case SPI_CMD_AF_REGISTER:
   1227                case SPI_CMD_AF_SENDMSG:
   1228                  MT_afCommandProcessing( cmd , len , pData );
   1229                  break;
   1230          #endif
   1231          
   1232          #if defined ( MT_SAPI_FUNC )
   1233                case SPI_CMD_SAPI_SYS_RESET:
   1234                case SPI_CMD_SAPI_START_REQ:
   1235                case SPI_CMD_SAPI_BIND_DEVICE:
   1236                case SPI_CMD_SAPI_ALLOW_BIND:
   1237                case SPI_CMD_SAPI_SEND_DATA:
   1238                case SPI_CMD_SAPI_READ_CFG:
   1239                case SPI_CMD_SAPI_WRITE_CFG:
   1240                case SPI_CMD_SAPI_GET_DEV_INFO:
   1241                case SPI_CMD_SAPI_FIND_DEV:
   1242                case SPI_CMD_SAPI_PMT_JOIN:
   1243                  ret = MT_sapiCommandProcessing( cmd , len , pData );
   1244                  if ( ret == 0xff )
   1245                    len = 0;
   1246                  else
   1247                    len = 1;
   1248                  break;
   1249          #endif
   1250          
   1251          #if defined ( MT_USER_TEST_FUNC )
   1252                case SPI_CMD_USER_TEST:
   1253                  MT_ProcessAppUserCmd( pData );
   1254                  break;
   1255          #endif
   1256          
   1257                default:
   1258                  break;
   1259              }
   1260          
   1261              if ( len )
   \                     ??MT_ProcessSerialCommand_23:
   \   000238   EC           MOV     A,R4
   \   000239   6025         JZ      ??MT_ProcessSerialCommand_31
   1262              {
   1263                MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + len),
   1264                                              (SPI_RESPONSE_BIT | cmd),
   1265                                              len, retValue );
   \                     ??MT_ProcessSerialCommand_26:
   \   00023B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00023B   7401         MOV     A,#0x1
   \   00023D   12....       LCALL   ?XSTACK_DISP0_8
   \   000240   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000243   7405         MOV     A,#0x5
   \   000245   12....       LCALL   ?XSTACK_DISP0_8
   \   000248   E0           MOVX    A,@DPTR
   \   000249   FA           MOV     R2,A
   \   00024A   A3           INC     DPTR
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   4410         ORL     A,#0x10
   \   00024E   FB           MOV     R3,A
   \   00024F   7405         MOV     A,#0x5
   \   000251   2C           ADD     A,R4
   \   000252   F9           MOV     R1,A
   \   000253   90....       MOV     DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
   \   000256   74..         MOV     A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
   \   000258   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00025B   7402         MOV     A,#0x2
   \   00025D   12....       LCALL   ?DEALLOC_XSTACK8
   1266              }
   1267            }
   \                     ??MT_ProcessSerialCommand_31:
   \   000260   7413         MOV     A,#0x13
   \   000262   02....       LJMP    ?Subroutine17 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_8:
   \   000265                ; Setup parameters for call to function MT_ReverseBytes
   \   000265   7908         MOV     R1,#0x8
   \   000267   0A           INC     R2
   \   000268   0A           INC     R2
   \   000269   0A           INC     R2
   \   00026A   EF           MOV     A,R7
   \   00026B   FB           MOV     R3,A
   \   00026C   90....       MOV     DPTR,#(MT_ReverseBytes & 0xffff)
   \   00026F   74..         MOV     A,#((MT_ReverseBytes >> 16) & 0xff)
   \   000271   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000274                ; Setup parameters for call to function ZMacSetReq
   \   000274   EE           MOV     A,R6
   \   000275   FA           MOV     R2,A
   \   000276   EF           MOV     A,R7
   \   000277   FB           MOV     R3,A
   \   000278   79E2         MOV     R1,#-0x1e
   \   00027A   12....       LCALL   ZMacSetReq & 0xFFFF
   \   00027D   E9           MOV     A,R1
   \   00027E   702C         JNZ     ??MT_ProcessSerialCommand_42
   \   000280                ; Setup parameters for call to function osal_nv_write
   \   000280   8E..         MOV     ?V0 + 0,R6
   \   000282   8F..         MOV     ?V0 + 1,R7
   \   000284   78..         MOV     R0,#?V0 + 0
   \   000286   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000289   75..08       MOV     ?V0 + 0,#0x8
   \   00028C   75..00       MOV     ?V0 + 1,#0x0
   \   00028F   78..         MOV     R0,#?V0 + 0
   \   000291   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000294   7C00         MOV     R4,#0x0
   \   000296   7D00         MOV     R5,#0x0
   \   000298   7A01         MOV     R2,#0x1
   \                     ??MT_ProcessSerialCommand_43:
   \   00029A   7B00         MOV     R3,#0x0
   \   00029C   90....       MOV     DPTR,#(osal_nv_write & 0xffff)
   \   00029F   74..         MOV     A,#((osal_nv_write >> 16) & 0xff)
   \   0002A1   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0002A4   7404         MOV     A,#0x4
   \   0002A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A9   02....       LJMP    ??MT_ProcessSerialCommand_28 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_42:
   \   0002AC   7401         MOV     A,#0x1
   \                     ??MT_ProcessSerialCommand_29:
   \   0002AE   85..82       MOV     DPL,?XSP + 0
   \   0002B1   85..83       MOV     DPH,?XSP + 1
   \   0002B4   F0           MOVX    @DPTR,A
   \   0002B5   7C01         MOV     R4,#0x1
   \   0002B7   8082         SJMP    ??MT_ProcessSerialCommand_26
   \                     ??MT_ProcessSerialCommand_9:
   \   0002B9                ; Setup parameters for call to function ZMacGetReq
   \   0002B9   740B         MOV     A,#0xb
   \   0002BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BE   AA82         MOV     R2,DPL
   \   0002C0   AB83         MOV     R3,DPH
   \   0002C2   79E2         MOV     R1,#-0x1e
   \   0002C4   12....       LCALL   ZMacGetReq & 0xFFFF
   \   0002C7                ; Setup parameters for call to function MT_ReverseBytes
   \   0002C7   7908         MOV     R1,#0x8
   \   0002C9   AA82         MOV     R2,DPL
   \   0002CB   AB83         MOV     R3,DPH
   \   0002CD   90....       MOV     DPTR,#(MT_ReverseBytes & 0xffff)
   \   0002D0   74..         MOV     A,#((MT_ReverseBytes >> 16) & 0xff)
   \   0002D2   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0002D5   7C08         MOV     R4,#0x8
   \   0002D7   02....       LJMP    ??MT_ProcessSerialCommand_41 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_18:
   \   0002DA   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0002DD   7409         MOV     A,#0x9
   \   0002DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E2   E8           MOV     A,R0
   \   0002E3   F0           MOVX    @DPTR,A
   \   0002E4   A3           INC     DPTR
   \   0002E5   E9           MOV     A,R1
   \   0002E6   F0           MOVX    @DPTR,A
   \   0002E7                ; Setup parameters for call to function osal_nv_write
   \   0002E7   7409         MOV     A,#0x9
   \   0002E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EC   8582..       MOV     ?V0 + 0,DPL
   \   0002EF   8583..       MOV     ?V0 + 1,DPH
   \   0002F2   78..         MOV     R0,#?V0 + 0
   \   0002F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002F7                ; Setup parameters for call to function osal_nv_item_len
   \   0002F7   7A83         MOV     R2,#-0x7d
   \   0002F9   7B00         MOV     R3,#0x0
   \   0002FB   90....       MOV     DPTR,#(osal_nv_item_len & 0xffff)
   \   0002FE   74..         MOV     A,#((osal_nv_item_len >> 16) & 0xff)
   \   000300   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000303   8A..         MOV     ?V0 + 0,R2
   \   000305   8B..         MOV     ?V0 + 1,R3
   \   000307   78..         MOV     R0,#?V0 + 0
   \   000309   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00030C   7C00         MOV     R4,#0x0
   \   00030E   7D00         MOV     R5,#0x0
   \   000310   7A83         MOV     R2,#-0x7d
   \   000312   8086         SJMP    ??MT_ProcessSerialCommand_43
   \                     ??MT_ProcessSerialCommand_19:
   \   000314   8E82         MOV     DPL,R6
   \   000316   8F83         MOV     DPH,R7
   \   000318   A3           INC     DPTR
   \   000319   A3           INC     DPTR
   \   00031A   A3           INC     DPTR
   \   00031B   E0           MOVX    A,@DPTR
   \   00031C   F5..         MOV     ?V0 + 0,A
   \   00031E   89..         MOV     ?V0 + 1,R1
   \   000320   89..         MOV     ?V0 + 2,R1
   \   000322   89..         MOV     ?V0 + 3,R1
   \   000324   8E82         MOV     DPL,R6
   \   000326   8F83         MOV     DPH,R7
   \   000328   A3           INC     DPTR
   \   000329   A3           INC     DPTR
   \   00032A   E0           MOVX    A,@DPTR
   \   00032B   F5..         MOV     ?V0 + 4,A
   \   00032D   89..         MOV     ?V0 + 5,R1
   \   00032F   89..         MOV     ?V0 + 6,R1
   \   000331   89..         MOV     ?V0 + 7,R1
   \   000333   7408         MOV     A,#0x8
   \   000335   78..         MOV     R0,#?V0 + 4
   \   000337   12....       LCALL   ?L_SHL
   \   00033A   78..         MOV     R0,#?V0 + 0
   \   00033C   79..         MOV     R1,#?V0 + 4
   \   00033E   12....       LCALL   ?L_ADD
   \   000341   8E82         MOV     DPL,R6
   \   000343   8F83         MOV     DPH,R7
   \   000345   A3           INC     DPTR
   \   000346   E0           MOVX    A,@DPTR
   \   000347   F5..         MOV     ?V0 + 4,A
   \   000349   8C..         MOV     ?V0 + 5,R4
   \   00034B   7410         MOV     A,#0x10
   \   00034D   78..         MOV     R0,#?V0 + 4
   \   00034F   12....       LCALL   ?L_SHL
   \   000352   78..         MOV     R0,#?V0 + 0
   \   000354   79..         MOV     R1,#?V0 + 4
   \   000356   12....       LCALL   ?L_ADD
   \   000359   8E82         MOV     DPL,R6
   \   00035B   8F83         MOV     DPH,R7
   \   00035D   E0           MOVX    A,@DPTR
   \   00035E   F5..         MOV     ?V0 + 4,A
   \   000360   8C..         MOV     ?V0 + 6,R4
   \   000362   7418         MOV     A,#0x18
   \   000364   78..         MOV     R0,#?V0 + 4
   \   000366   12....       LCALL   ?L_SHL
   \   000369   78..         MOV     R0,#?V0 + 0
   \   00036B   79..         MOV     R1,#?V0 + 4
   \   00036D   12....       LCALL   ?L_ADD
   \   000370   7405         MOV     A,#0x5
   \   000372   12....       LCALL   ?XSTACK_DISP0_8
   \   000375   78..         MOV     R0,#?V0 + 0
   \   000377   12....       LCALL   ?L_MOV_TO_X
   \   00037A                ; Setup parameters for call to function osal_nv_write
   \   00037A   7405         MOV     A,#0x5
   \   00037C   12....       LCALL   ?XSTACK_DISP0_8
   \   00037F   8582..       MOV     ?V0 + 0,DPL
   \   000382   8583..       MOV     ?V0 + 1,DPH
   \   000385   78..         MOV     R0,#?V0 + 0
   \   000387   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00038A                ; Setup parameters for call to function osal_nv_item_len
   \   00038A   7A84         MOV     R2,#-0x7c
   \   00038C   7B00         MOV     R3,#0x0
   \   00038E   90....       MOV     DPTR,#(osal_nv_item_len & 0xffff)
   \   000391   74..         MOV     A,#((osal_nv_item_len >> 16) & 0xff)
   \   000393   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000396   8A..         MOV     ?V0 + 0,R2
   \   000398   8B..         MOV     ?V0 + 1,R3
   \   00039A   78..         MOV     R0,#?V0 + 0
   \   00039C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00039F   7C00         MOV     R4,#0x0
   \   0003A1   7D00         MOV     R5,#0x0
   \   0003A3   7A84         MOV     R2,#-0x7c
   \                     ??MT_ProcessSerialCommand_44:
   \   0003A5   02....       LJMP    ??MT_ProcessSerialCommand_43 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_20:
   \   0003A8                ; Setup parameters for call to function osal_nv_write
   \   0003A8   8E..         MOV     ?V0 + 0,R6
   \   0003AA   8F..         MOV     ?V0 + 1,R7
   \   0003AC   78..         MOV     R0,#?V0 + 0
   \   0003AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003B1                ; Setup parameters for call to function osal_nv_item_len
   \   0003B1   7A61         MOV     R2,#0x61
   \   0003B3   7B00         MOV     R3,#0x0
   \   0003B5   90....       MOV     DPTR,#(osal_nv_item_len & 0xffff)
   \   0003B8   74..         MOV     A,#((osal_nv_item_len >> 16) & 0xff)
   \   0003BA   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0003BD   8A..         MOV     ?V0 + 0,R2
   \   0003BF   8B..         MOV     ?V0 + 1,R3
   \   0003C1   78..         MOV     R0,#?V0 + 0
   \   0003C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003C6   7C00         MOV     R4,#0x0
   \   0003C8   7D00         MOV     R5,#0x0
   \   0003CA   7A61         MOV     R2,#0x61
   \   0003CC   02....       LJMP    ??MT_ProcessSerialCommand_43 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_21:
   \   0003CF                ; Setup parameters for call to function osal_nv_write
   \   0003CF   8E..         MOV     ?V0 + 0,R6
   \   0003D1   8F..         MOV     ?V0 + 1,R7
   \   0003D3   78..         MOV     R0,#?V0 + 0
   \   0003D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003D8                ; Setup parameters for call to function osal_nv_item_len
   \   0003D8   7A62         MOV     R2,#0x62
   \   0003DA   7B00         MOV     R3,#0x0
   \   0003DC   90....       MOV     DPTR,#(osal_nv_item_len & 0xffff)
   \   0003DF   74..         MOV     A,#((osal_nv_item_len >> 16) & 0xff)
   \   0003E1   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0003E4   8A..         MOV     ?V0 + 0,R2
   \   0003E6   8B..         MOV     ?V0 + 1,R3
   \   0003E8   78..         MOV     R0,#?V0 + 0
   \   0003EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003ED   7C00         MOV     R4,#0x0
   \   0003EF   7D00         MOV     R5,#0x0
   \   0003F1   7A62         MOV     R2,#0x62
   \   0003F3   80B0         SJMP    ??MT_ProcessSerialCommand_44
   \                     ??MT_ProcessSerialCommand_22:
   \   0003F5                ; Setup parameters for call to function MT_ProcessGetNvInfo
   \   0003F5   90....       MOV     DPTR,#(MT_ProcessGetNvInfo & 0xffff)
   \   0003F8   74..         MOV     A,#((MT_ProcessGetNvInfo >> 16) & 0xff)
   \   0003FA   02....       LJMP    ??MT_ProcessSerialCommand_30 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_12:
   \   0003FD                ; Setup parameters for call to function MT_ProcessGetDeviceInfo
   \   0003FD   90....       MOV     DPTR,#(MT_ProcessGetDeviceInfo & 0xffff)
   \   000400   74..         MOV     A,#((MT_ProcessGetDeviceInfo >> 16) & 0xff)
   \   000402   02....       LJMP    ??MT_ProcessSerialCommand_30 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_10:
   \   000405                ; Setup parameters for call to function MT_ProcessSetNV
   \   000405   0A           INC     R2
   \   000406   0A           INC     R2
   \   000407   0A           INC     R2
   \   000408   EF           MOV     A,R7
   \   000409   FB           MOV     R3,A
   \   00040A   90....       MOV     DPTR,#(MT_ProcessSetNV & 0xffff)
   \   00040D   74..         MOV     A,#((MT_ProcessSetNV >> 16) & 0xff)
   \   00040F   02....       LJMP    ??MT_ProcessSerialCommand_27 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_11:
   \   000412                ; Setup parameters for call to function MT_ProcessGetNV
   \   000412   0A           INC     R2
   \   000413   0A           INC     R2
   \   000414   0A           INC     R2
   \   000415   EF           MOV     A,R7
   \   000416   FB           MOV     R3,A
   \   000417   90....       MOV     DPTR,#(MT_ProcessGetNV & 0xffff)
   \   00041A   74..         MOV     A,#((MT_ProcessGetNV >> 16) & 0xff)
   \   00041C   02....       LJMP    ??MT_ProcessSerialCommand_30 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_17:
   \   00041F                ; Setup parameters for call to function osal_GetSystemClock
   \   00041F   90....       MOV     DPTR,#(osal_GetSystemClock & 0xffff)
   \   000422   74..         MOV     A,#((osal_GetSystemClock >> 16) & 0xff)
   \   000424   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000427   8A..         MOV     ?V0 + 0,R2
   \   000429   8B..         MOV     ?V0 + 1,R3
   \   00042B   8C..         MOV     ?V0 + 2,R4
   \   00042D   8D..         MOV     ?V0 + 3,R5
   \   00042F   90....       MOV     DPTR,#__Constant_3e8
   \   000432   78..         MOV     R0,#?V0 + 4
   \   000434   12....       LCALL   ?L_MOV_X
   \   000437   78..         MOV     R0,#?V0 + 0
   \   000439   79..         MOV     R1,#?V0 + 4
   \   00043B   12....       LCALL   ?UL_DIV_MOD
   \   00043E   7405         MOV     A,#0x5
   \   000440   12....       LCALL   ?XSTACK_DISP0_8
   \   000443   78..         MOV     R0,#?V0 + 0
   \   000445   12....       LCALL   ?L_MOV_TO_X
   \   000448   7418         MOV     A,#0x18
   \   00044A   78..         MOV     R0,#?V0 + 0
   \   00044C   12....       LCALL   ?UL_SHR
   \   00044F   740B         MOV     A,#0xb
   \   000451   12....       LCALL   ?XSTACK_DISP0_8
   \   000454   E5..         MOV     A,?V0 + 0
   \   000456   F0           MOVX    @DPTR,A
   \   000457   7405         MOV     A,#0x5
   \   000459   12....       LCALL   ?XSTACK_DISP0_8
   \   00045C   78..         MOV     R0,#?V0 + 0
   \   00045E   12....       LCALL   ?L_MOV_X
   \   000461   7410         MOV     A,#0x10
   \   000463   78..         MOV     R0,#?V0 + 0
   \   000465   12....       LCALL   ?UL_SHR
   \   000468   740C         MOV     A,#0xc
   \   00046A   12....       LCALL   ?XSTACK_DISP0_8
   \   00046D   E5..         MOV     A,?V0 + 0
   \   00046F   F0           MOVX    @DPTR,A
   \   000470   7405         MOV     A,#0x5
   \   000472   12....       LCALL   ?XSTACK_DISP0_8
   \   000475   78..         MOV     R0,#?V0 + 0
   \   000477   12....       LCALL   ?L_MOV_X
   \   00047A   E5..         MOV     A,?V0 + 1
   \   00047C   F5..         MOV     ?V0 + 0,A
   \   00047E   740D         MOV     A,#0xd
   \   000480   12....       LCALL   ?XSTACK_DISP0_8
   \   000483   E5..         MOV     A,?V0 + 0
   \   000485   F0           MOVX    @DPTR,A
   \   000486   7405         MOV     A,#0x5
   \   000488   12....       LCALL   ?XSTACK_DISP0_8
   \   00048B   78..         MOV     R0,#?V0 + 0
   \   00048D   12....       LCALL   ?L_MOV_X
   \   000490   740E         MOV     A,#0xe
   \   000492   12....       LCALL   ?XSTACK_DISP0_8
   \   000495   E5..         MOV     A,?V0 + 0
   \   000497   F0           MOVX    @DPTR,A
   \   000498   7C04         MOV     R4,#0x4
   \   00049A   02....       LJMP    ??MT_ProcessSerialCommand_41 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_13:
   \   00049D   8E82         MOV     DPL,R6
   \   00049F   8F83         MOV     DPH,R7
   \   0004A1   A3           INC     DPTR
   \   0004A2   E0           MOVX    A,@DPTR
   \   0004A3   A2E0         MOV     C,0xE0 /* A   */.0
   \   0004A5   5001         JNC     ??MT_ProcessSerialCommand_45
   \   0004A7   09           INC     R1
   \                     ??MT_ProcessSerialCommand_45:
   \   0004A8   A2E1         MOV     C,0xE0 /* A   */.1
   \   0004AA   5004         JNC     ??MT_ProcessSerialCommand_46
   \   0004AC   E9           MOV     A,R1
   \   0004AD   D2E3         SETB    0xE0 /* A   */.3
   \   0004AF   F9           MOV     R1,A
   \                     ??MT_ProcessSerialCommand_46:
   \   0004B0   8E82         MOV     DPL,R6
   \   0004B2   8F83         MOV     DPH,R7
   \   0004B4   A3           INC     DPTR
   \   0004B5   E0           MOVX    A,@DPTR
   \   0004B6   A2E2         MOV     C,0xE0 /* A   */.2
   \   0004B8   5004         JNC     ??MT_ProcessSerialCommand_47
   \   0004BA   E9           MOV     A,R1
   \   0004BB   D2E4         SETB    0xE0 /* A   */.4
   \   0004BD   F9           MOV     R1,A
   \                     ??MT_ProcessSerialCommand_47:
   \   0004BE   8E82         MOV     DPL,R6
   \   0004C0   8F83         MOV     DPH,R7
   \   0004C2   A3           INC     DPTR
   \   0004C3   E0           MOVX    A,@DPTR
   \   0004C4   A2E3         MOV     C,0xE0 /* A   */.3
   \   0004C6   5004         JNC     ??MT_ProcessSerialCommand_48
   \   0004C8   E9           MOV     A,R1
   \   0004C9   D2E1         SETB    0xE0 /* A   */.1
   \   0004CB   F9           MOV     R1,A
   \                     ??MT_ProcessSerialCommand_48:
   \   0004CC   8E82         MOV     DPL,R6
   \   0004CE   8F83         MOV     DPH,R7
   \   0004D0   A3           INC     DPTR
   \   0004D1   E0           MOVX    A,@DPTR
   \   0004D2   A2E4         MOV     C,0xE0 /* A   */.4
   \   0004D4   5004         JNC     ??MT_ProcessSerialCommand_49
   \   0004D6   E9           MOV     A,R1
   \   0004D7   D2E5         SETB    0xE0 /* A   */.5
   \   0004D9   F9           MOV     R1,A
   \                     ??MT_ProcessSerialCommand_49:
   \   0004DA   8E82         MOV     DPL,R6
   \   0004DC   8F83         MOV     DPH,R7
   \   0004DE   A3           INC     DPTR
   \   0004DF   E0           MOVX    A,@DPTR
   \   0004E0   A2E5         MOV     C,0xE0 /* A   */.5
   \   0004E2   5004         JNC     ??MT_ProcessSerialCommand_50
   \   0004E4   E9           MOV     A,R1
   \   0004E5   D2E2         SETB    0xE0 /* A   */.2
   \   0004E7   F9           MOV     R1,A
   \                     ??MT_ProcessSerialCommand_50:
   \   0004E8   8E82         MOV     DPL,R6
   \   0004EA   8F83         MOV     DPH,R7
   \   0004EC   A3           INC     DPTR
   \   0004ED   E0           MOVX    A,@DPTR
   \   0004EE   A2E6         MOV     C,0xE0 /* A   */.6
   \   0004F0   5004         JNC     ??MT_ProcessSerialCommand_51
   \   0004F2   E9           MOV     A,R1
   \   0004F3   D2E6         SETB    0xE0 /* A   */.6
   \   0004F5   F9           MOV     R1,A
   \                     ??MT_ProcessSerialCommand_51:
   \   0004F6   8E82         MOV     DPL,R6
   \   0004F8   8F83         MOV     DPH,R7
   \   0004FA   A3           INC     DPTR
   \   0004FB   E0           MOVX    A,@DPTR
   \   0004FC   A2E7         MOV     C,0xE0 /* A   */.7
   \   0004FE   5004         JNC     ??MT_ProcessSerialCommand_52
   \   000500   E9           MOV     A,R1
   \   000501   D2E7         SETB    0xE0 /* A   */.7
   \   000503   F9           MOV     R1,A
   \                     ??MT_ProcessSerialCommand_52:
   \   000504                ; Setup parameters for call to function OnBoard_SendKeys
   \   000504   8E82         MOV     DPL,R6
   \   000506   8F83         MOV     DPH,R7
   \   000508   E0           MOVX    A,@DPTR
   \   000509   FA           MOV     R2,A
   \   00050A   90....       MOV     DPTR,#(OnBoard_SendKeys & 0xffff)
   \   00050D   74..         MOV     A,#((OnBoard_SendKeys >> 16) & 0xff)
   \   00050F   02....       LJMP    ??MT_ProcessSerialCommand_27 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_15:
   \   000512                ; Setup parameters for call to function MTProcessAppMsg
   \   000512   8A82         MOV     DPL,R2
   \   000514   8B83         MOV     DPH,R3
   \   000516   A3           INC     DPTR
   \   000517   A3           INC     DPTR
   \   000518   E0           MOVX    A,@DPTR
   \   000519   F9           MOV     R1,A
   \   00051A   0A           INC     R2
   \   00051B   0A           INC     R2
   \   00051C   0A           INC     R2
   \   00051D   EF           MOV     A,R7
   \   00051E   FB           MOV     R3,A
   \   00051F   90....       MOV     DPTR,#(MTProcessAppMsg & 0xffff)
   \   000522   74..         MOV     A,#((MTProcessAppMsg >> 16) & 0xff)
   \   000524   02....       LJMP    ??MT_ProcessSerialCommand_30 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_16:
   \   000527                ; Setup parameters for call to function MTProcessLedControl
   \   000527   0A           INC     R2
   \   000528   0A           INC     R2
   \   000529   0A           INC     R2
   \   00052A   EF           MOV     A,R7
   \   00052B   FB           MOV     R3,A
   \   00052C   90....       MOV     DPTR,#(MTProcessLedControl & 0xffff)
   \   00052F   74..         MOV     A,#((MTProcessLedControl >> 16) & 0xff)
   \   000531   02....       LJMP    ??MT_ProcessSerialCommand_27 & 0xFFFF
   \                     ??MT_ProcessSerialCommand_0:
   \   000534                ; Setup parameters for call to function MT_ZdoCommandProcessing
   \   000534   EE           MOV     A,R6
   \   000535   FC           MOV     R4,A
   \   000536   EF           MOV     A,R7
   \   000537   FD           MOV     R5,A
   \   000538   7403         MOV     A,#0x3
   \   00053A   12....       LCALL   ?XSTACK_DISP0_8
   \   00053D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000540   90....       MOV     DPTR,#(MT_ZdoCommandProcessing & 0xffff)
   \   000543   74..         MOV     A,#((MT_ZdoCommandProcessing >> 16) & 0xff)
   \   000545   02....       LJMP    ??MT_ProcessSerialCommand_30 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   F8           MOV     R0,A
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FA           MOV     R2,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   2A           ADD     A,R2
   \   00000F   22           RET
   1268          #endif // ZTOOL
   1269          
   1270          #if (defined HAL_LED) && (HAL_LED == TRUE)
   1271          /***************************************************************************************************
   1272           * @fn      MTProcessLedControl
   1273           *
   1274           * @brief
   1275           *
   1276           *   Process the LED Control Message
   1277           *
   1278           * @param   data - input serial buffer
   1279           *
   1280           * @return  status
   1281           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1282          byte MTProcessLedControl( byte *pData )
   \                     MTProcessLedControl:
   1283          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1284            byte iLed;
   1285            byte Led;
   1286            byte iMode;
   1287            byte Mode;
   1288          
   1289            iLed = *pData++;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FC           MOV     R4,A
   1290            iMode = *pData;
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FA           MOV     R2,A
   1291          
   1292            if ( iLed == 1 )
   \   00000D   7401         MOV     A,#0x1
   \   00000F   6C           XRL     A,R4
   \   000010   7004         JNZ     ??MTProcessLedControl_0
   1293              Led = HAL_LED_1;
   \   000012   7901         MOV     R1,#0x1
   \   000014   8026         SJMP    ??MTProcessLedControl_1
   1294            else if ( iLed == 2 )
   \                     ??MTProcessLedControl_0:
   \   000016   7402         MOV     A,#0x2
   \   000018   6C           XRL     A,R4
   \   000019   7004         JNZ     ??MTProcessLedControl_2
   1295              Led = HAL_LED_2;
   \   00001B   7902         MOV     R1,#0x2
   \   00001D   801D         SJMP    ??MTProcessLedControl_1
   1296            else if ( iLed == 3 )
   \                     ??MTProcessLedControl_2:
   \   00001F   7403         MOV     A,#0x3
   \   000021   6C           XRL     A,R4
   \   000022   7004         JNZ     ??MTProcessLedControl_3
   1297              Led = HAL_LED_3;
   \   000024   7904         MOV     R1,#0x4
   \   000026   8014         SJMP    ??MTProcessLedControl_1
   1298            else if ( iLed == 4 )
   \                     ??MTProcessLedControl_3:
   \   000028   7404         MOV     A,#0x4
   \   00002A   6C           XRL     A,R4
   \   00002B   7004         JNZ     ??MTProcessLedControl_4
   1299              Led = HAL_LED_4;
   \   00002D   7908         MOV     R1,#0x8
   \   00002F   800B         SJMP    ??MTProcessLedControl_1
   1300            else if ( iLed == 0xFF )
   \                     ??MTProcessLedControl_4:
   \   000031   74FF         MOV     A,#-0x1
   \   000033   6C           XRL     A,R4
   \   000034   7004         JNZ     ??MTProcessLedControl_5
   1301              Led = HAL_LED_ALL;
   \   000036   790F         MOV     R1,#0xf
   \   000038   8002         SJMP    ??MTProcessLedControl_1
   1302            else
   1303              Led = 0;
   \                     ??MTProcessLedControl_5:
   \   00003A   7900         MOV     R1,#0x0
   1304          
   1305            if ( iMode == 0 )
   \                     ??MTProcessLedControl_1:
   \   00003C   EA           MOV     A,R2
   \   00003D   7004         JNZ     ??MTProcessLedControl_6
   1306              Mode = HAL_LED_MODE_OFF;
   \   00003F   7A00         MOV     R2,#0x0
   \   000041   8022         SJMP    ??MTProcessLedControl_7
   1307            else if ( iMode == 1 )
   \                     ??MTProcessLedControl_6:
   \   000043   7401         MOV     A,#0x1
   \   000045   6A           XRL     A,R2
   \   000046   7004         JNZ     ??MTProcessLedControl_8
   1308              Mode = HAL_LED_MODE_ON;
   \   000048   7A01         MOV     R2,#0x1
   \   00004A   8019         SJMP    ??MTProcessLedControl_7
   1309            else if ( iMode == 2 )
   \                     ??MTProcessLedControl_8:
   \   00004C   7402         MOV     A,#0x2
   \   00004E   6A           XRL     A,R2
   \   00004F   7004         JNZ     ??MTProcessLedControl_9
   1310              Mode = HAL_LED_MODE_BLINK;
   \   000051   7A02         MOV     R2,#0x2
   \   000053   8010         SJMP    ??MTProcessLedControl_7
   1311            else if ( iMode == 3 )
   \                     ??MTProcessLedControl_9:
   \   000055   7403         MOV     A,#0x3
   \   000057   6A           XRL     A,R2
   \   000058   7004         JNZ     ??MTProcessLedControl_10
   1312              Mode = HAL_LED_MODE_FLASH;
   \   00005A   7A04         MOV     R2,#0x4
   \   00005C   8007         SJMP    ??MTProcessLedControl_7
   1313            else if ( iMode == 4 )
   \                     ??MTProcessLedControl_10:
   \   00005E   7404         MOV     A,#0x4
   \   000060   6A           XRL     A,R2
   \   000061   7011         JNZ     ??MTProcessLedControl_11
   1314              Mode = HAL_LED_MODE_TOGGLE;
   \   000063   7A08         MOV     R2,#0x8
   1315            else
   1316              Led = 0;
   1317          
   1318            if ( Led != 0 )
   \                     ??MTProcessLedControl_7:
   \   000065   E9           MOV     A,R1
   \   000066   600C         JZ      ??MTProcessLedControl_11
   1319            {
   1320              HalLedSet (Led, Mode );
   \   000068                ; Setup parameters for call to function HalLedSet
   \   000068   90....       MOV     DPTR,#(HalLedSet & 0xffff)
   \   00006B   74..         MOV     A,#((HalLedSet >> 16) & 0xff)
   \   00006D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1321              return ( ZSuccess );
   \   000070   7900         MOV     R1,#0x0
   \   000072   8002         SJMP    ??MTProcessLedControl_12
   1322            }
   1323            else
   1324              return ( ZFailure );
   \                     ??MTProcessLedControl_11:
   \   000074   7901         MOV     R1,#0x1
   \                     ??MTProcessLedControl_12:
   \   000076   02....       LJMP    ?Subroutine14 & 0xFFFF
   1325          }
   1326          #endif // HAL_LED
   1327          
   1328          #if !defined ( NONWK )
   1329          /*********************************************************************
   1330           * @fn      MTProcessAppMsg
   1331           *
   1332           * @brief
   1333           *
   1334           *   Process the User App Message
   1335           *
   1336           * @param   data - input serial buffer
   1337           * @param   len - data length
   1338           *
   1339           * @return  status
   1340           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1341          byte MTProcessAppMsg( byte *pData, byte len )
   \                     MTProcessAppMsg:
   1342          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 3,R1
   1343            byte ret = ZFailure;
   \   00000C   75..01       MOV     ?V0 + 2,#0x1
   1344            byte endpoint;
   1345            endPointDesc_t *epDesc;
   1346            mtSysAppMsg_t *msg;
   1347          
   1348            // Get the endpoint and skip past it.
   1349            endpoint = *pData++;
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 4,A
   \   000016   A3           INC     DPTR
   \   000017   8582..       MOV     ?V0 + 6,DPL
   \   00001A   8583..       MOV     ?V0 + 7,DPH
   1350            len--;
   \   00001D   15..         DEC     ?V0 + 3
   1351          
   1352            // Look up the endpoint
   1353            epDesc = afFindEndPointDesc( endpoint );
   \   00001F                ; Setup parameters for call to function afFindEndPointDesc
   \   00001F   F9           MOV     R1,A
   \   000020   90....       MOV     DPTR,#(afFindEndPointDesc & 0xffff)
   \   000023   74..         MOV     A,#((afFindEndPointDesc >> 16) & 0xff)
   \   000025   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   EA           MOV     A,R2
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   EB           MOV     A,R3
   \   000032   12....       LCALL   ?Subroutine4 & 0xFFFF
   1354          
   1355            if ( epDesc )
   \                     ??CrossCallReturnLabel_13:
   \   000035   7002         JNZ     ??MTProcessAppMsg_0
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \                     ??MTProcessAppMsg_0:
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??MTProcessAppMsg_1 & 0xFFFF
   1356            {
   1357              // Build and send the message to the APP
   1358              msg = (mtSysAppMsg_t *)osal_msg_allocate( sizeof( mtSysAppMsg_t ) + len );
   \   00003E                ; Setup parameters for call to function osal_msg_allocate
   \   00003E   85....       MOV     ?V0 + 0,?V0 + 3
   \   000041   7406         MOV     A,#0x6
   \   000043   25..         ADD     A,?V0 + 0
   \   000045   FA           MOV     R2,A
   \   000046   E4           CLR     A
   \   000047   3400         ADDC    A,#0x0
   \   000049   FB           MOV     R3,A
   \   00004A   90....       MOV     DPTR,#(osal_msg_allocate & 0xffff)
   \   00004D   74..         MOV     A,#((osal_msg_allocate >> 16) & 0xff)
   \   00004F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000052   8A..         MOV     ?V0 + 0,R2
   \   000054   8B..         MOV     ?V0 + 1,R3
   \   000056   AE..         MOV     R6,?V0 + 0
   \   000058   AF..         MOV     R7,?V0 + 1
   1359              if ( msg )
   \   00005A   EE           MOV     A,R6
   \   00005B   7001         JNZ     ??MTProcessAppMsg_2
   \   00005D   EF           MOV     A,R7
   \                     ??MTProcessAppMsg_2:
   \   00005E   606B         JZ      ??MTProcessAppMsg_1
   1360              {
   1361                msg->hdr.event = MT_SYS_APP_MSG;
   \   000060   7423         MOV     A,#0x23
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   F0           MOVX    @DPTR,A
   1362                msg->endpoint = endpoint;
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E5..         MOV     A,?V0 + 4
   \   00006B   12....       LCALL   ?Subroutine3 & 0xFFFF
   1363                msg->appDataLen = len;
   \                     ??CrossCallReturnLabel_11:
   \   00006E   E5..         MOV     A,?V0 + 3
   \   000070   F0           MOVX    @DPTR,A
   1364                msg->appData = (uint8*)(msg+1);
   \   000071   EE           MOV     A,R6
   \   000072   2404         ADD     A,#0x4
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   3400         ADDC    A,#0x0
   \   000078   FB           MOV     R3,A
   \   000079   EE           MOV     A,R6
   \   00007A   2406         ADD     A,#0x6
   \   00007C   F8           MOV     R0,A
   \   00007D   EF           MOV     A,R7
   \   00007E   3400         ADDC    A,#0x0
   \   000080   F9           MOV     R1,A
   \   000081   8A82         MOV     DPL,R2
   \   000083   8B83         MOV     DPH,R3
   \   000085   E8           MOV     A,R0
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   E9           MOV     A,R1
   \   000089   F0           MOVX    @DPTR,A
   1365          
   1366                osal_memcpy( msg->appData, pData, len );
   \   00008A                ; Setup parameters for call to function osal_memcpy
   \   00008A   85....       MOV     ?V0 + 0,?V0 + 6
   \   00008D   85....       MOV     ?V0 + 1,?V0 + 7
   \   000090   75..00       MOV     ?V0 + 2,#0x0
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000098   AC..         MOV     R4,?V0 + 3
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   8A82         MOV     DPL,R2
   \   00009E   8B83         MOV     DPH,R3
   \   0000A0   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A3   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   0000A6   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   0000A8   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000AB   7403         MOV     A,#0x3
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   1367          
   1368                osal_msg_send( *(epDesc->task_id), (uint8 *)msg );
   \   0000B0                ; Setup parameters for call to function osal_msg_send
   \   0000B0   EE           MOV     A,R6
   \   0000B1   FA           MOV     R2,A
   \   0000B2   EF           MOV     A,R7
   \   0000B3   FB           MOV     R3,A
   \   0000B4   85..82       MOV     DPL,?XSP + 0
   \   0000B7   85..83       MOV     DPH,?XSP + 1
   \   0000BA   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000BD   A3           INC     DPTR
   \   0000BE   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F9           MOV     R1,A
   \   0000C3   90....       MOV     DPTR,#(osal_msg_send & 0xffff)
   \   0000C6   74..         MOV     A,#((osal_msg_send >> 16) & 0xff)
   \   0000C8   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1369          
   1370                ret = ZSuccess;
   1371              }
   1372            }
   1373          
   1374            return ret;
   \                     ??MTProcessAppMsg_1:
   \   0000CB   A9..         MOV     R1,?V0 + 2
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   02....       LJMP    ?Subroutine17 & 0xFFFF
   1375          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
   1376          #endif // NONWK
   1377          
   1378          #if defined ( ZTOOL_PORT )
   1379          /*********************************************************************
   1380           * @fn      MTProcessAppRspMsg
   1381           *
   1382           * @brief
   1383           *
   1384           *   Process the User App Response Message
   1385           *
   1386           * @param   data - output serial buffer.  The first byte must be the
   1387           *          endpoint that send this message.
   1388           * @param   len - data length
   1389           *
   1390           * @return  none
   1391           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1392          void MTProcessAppRspMsg( byte *pData, byte len )
   \                     MTProcessAppRspMsg:
   1393          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1394            // Send out Reset Response message
   1395            MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + len),
   1396                                          (SPI_RESPONSE_BIT | SPI_CMD_SYS_APP_MSG),
   1397                                          len, pData );
   \   000005                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000E   E9           MOV     A,R1
   \   00000F   FC           MOV     R4,A
   \   000010   7A18         MOV     R2,#0x18
   \   000012   7B10         MOV     R3,#0x10
   \   000014   7405         MOV     A,#0x5
   \   000016   29           ADD     A,R1
   \   000017   F9           MOV     R1,A
   \   000018   90....       MOV     DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
   \   00001B   74..         MOV     A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
   \   00001D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000020   7402         MOV     A,#0x2
   \   000022   02....       LJMP    ??Subroutine15_0 & 0xFFFF
   1398          }
   1399          #endif // ZTOOL_PORT
   1400          
   1401          
   1402          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
   1403          #if defined ( MT_USER_TEST_FUNC )
   1404          /*********************************************************************
   1405           * @fn      MT_ProcessAppUserCmd
   1406           *
   1407           * @brief
   1408           *
   1409           *   Temp function for testing
   1410           *
   1411           * @param   data - received message
   1412           *
   1413           * @return  void
   1414           */
   1415          void MT_ProcessAppUserCmd( byte *pData) 						
   1416          {
   1417            uint16 app_cmd;
   1418            byte srcEp;
   1419            uint16 param1;
   1420            uint16 param2;
   1421            byte len;
   1422            uint16 ret;
   1423          
   1424            ret = INVALID_TASK;     //should be changed later
   1425          
   1426            srcEp = *pData++;
   1427          
   1428            app_cmd = BUILD_UINT16( pData[1] , pData[0] );
   1429            pData = pData + sizeof( uint16 );
   1430          
   1431            param1 = BUILD_UINT16( pData[1] , pData[0] );
   1432            pData = pData + sizeof( uint16 );
   1433          
   1434            param2 = BUILD_UINT16( pData[1] , pData[0] );
   1435          
   1436            len = SPI_RESP_MSG_LEN_DEFAULT;
   1437          
   1438          
   1439            switch ( app_cmd )
   1440            {
   1441          
   1442          #if defined (APP_TGEN)
   1443              case TGEN_START:
   1444                TrafficGenApp_SendCmdMSG( param1, param2, TRAFFICGENAPP_CMD_START );
   1445                ret = ZSUCCESS;
   1446                break;
   1447          
   1448              case TGEN_STOP:
   1449                TrafficGenApp_SendCmdMSG( param1, param2, TRAFFICGENAPP_CMD_STOP );
   1450                ret = ZSUCCESS;
   1451                break;
   1452          
   1453              case TGEN_COUNT:
   1454                ret = TrafficGenApp_CountPkt( param1, param2 );
   1455                return;		// so that spi_resp is not sent...
   1456                //ret = ZSUCCESS;
   1457                break;				
   1458          #endif
   1459          
   1460          #if defined (NWK_TEST)
   1461              case HW_TEST:
   1462                HwApp_Start( HI_UINT16(param1), LO_UINT16(param1), HI_UINT16(param2),
   1463                              1000, LO_UINT16(param2), 3, 0 );
   1464                break;
   1465          
   1466              case HW_DISPLAY_RESULT:
   1467                HwApp_TestInfo();
   1468                break;
   1469          
   1470              case HW_SEND_STATUS:
   1471                HwApp_SendStats();
   1472                break;
   1473          #endif
   1474          
   1475          #if defined( APP_TP ) || defined ( APP_TP2 )
   1476            #if defined( APP_TP )
   1477              case TP_SEND_NODATA:
   1478                ret = TestProfileApp_SendNoData( srcEp, (byte)param1 );
   1479                break;
   1480            #endif // APP_TP
   1481          			
   1482              case TP_SEND_BUFFERTEST:
   1483                ret = TestProfileApp_SendBufferReq( srcEp, (byte)param1 );
   1484                break;
   1485          			
   1486            #if defined( APP_TP )
   1487              case TP_SEND_UINT8:
   1488                ret = TestProfileApp_SendUint8( srcEp, (byte)param1 );
   1489                break;
   1490          
   1491              case TP_SEND_INT8:
   1492                ret = TestProfileApp_SendInt8( srcEp, (byte)param1 );
   1493                break;
   1494          
   1495              case TP_SEND_UINT16:
   1496                ret = TestProfileApp_SendUint16( srcEp, (byte)param1 );
   1497                break;
   1498          
   1499              case TP_SEND_INT16:
   1500                ret = TestProfileApp_SendInt16( srcEp, (byte)param1 );
   1501                break;
   1502          
   1503              case TP_SEND_SEMIPREC:
   1504                ret = TestProfileApp_SendSemiPrec( srcEp, (byte)param1 );
   1505                break;
   1506          
   1507              case TP_SEND_FREEFORM:
   1508                ret = TestProfileApp_SendFreeFormReq( srcEp, (byte)param1 );
   1509                break;
   1510          			
   1511            #else // APP_TP
   1512              case TP_SEND_FREEFORM:
   1513                ret = TestProfileApp_SendFreeFormReq(srcEp, (byte)param1, (byte)param2);
   1514                break;
   1515            #endif
   1516          			
   1517            #if defined( APP_TP )
   1518              case TP_SEND_ABS_TIME:
   1519                ret = TestProfileApp_SendAbsTime( srcEp, (byte)param1 );
   1520                break;
   1521          
   1522              case TP_SEND_REL_TIME:
   1523                ret = TestProfileApp_SendRelativeTime( srcEp, (byte)param1 );
   1524                break;
   1525          
   1526              case TP_SEND_CHAR_STRING:
   1527                ret = TestProfileApp_SendCharString( srcEp, (byte)param1 );
   1528                break;
   1529          
   1530              case TP_SEND_OCTET_STRING:
   1531                ret = TestProfileApp_SendOctetString( srcEp, (byte)param1 );
   1532                break;		
   1533            #endif // APP_TP
   1534          				
   1535              case TP_SET_DSTADDRESS:			
   1536                ret = TestProfileApp_SetDestAddress(HI_UINT16(param1), LO_UINT16(param1), param2);
   1537                break;	
   1538          
   1539            #if defined( APP_TP2 )
   1540              case TP_SEND_BUFFER_GROUP:
   1541                ret = TestProfileApp_SendBufferGroup( srcEp, (byte)param1 );
   1542                break;
   1543            #endif // APP_TP
   1544          
   1545              case TP_SEND_BUFFER:
   1546                ret = TestProfileApp_SendBuffer( srcEp, (byte)param1 );
   1547                break;
   1548          				
   1549            #if defined( APP_TP )
   1550              case TP_SEND_MULT_KVP_8BIT:
   1551                TestProfileApp_SendMultiKVP_8bit( srcEp, (byte)param1 );
   1552                ret = ZSuccess;
   1553                break;
   1554          
   1555              case TP_SEND_MULT_KVP_16BIT:
   1556                TestProfileApp_SendMultiKVP_16bit( srcEp, (byte)param1 );
   1557                ret = ZSuccess;
   1558                break;
   1559          
   1560              case TP_SEND_MULT_KVP_TIME:
   1561                TestProfileApp_SendMultiKVP_Time( srcEp, (byte)param1 );
   1562                ret = ZSuccess;
   1563                break;
   1564          
   1565              case TP_SEND_MULT_KVP_STRING:
   1566                TestProfileApp_SendMultiKVP_String( srcEp, (byte)param1 );
   1567                ret = ZSuccess;
   1568                break;
   1569          
   1570              case TP_SEND_MULTI_KVP_STR_TIME:
   1571                ret = ZSuccess;
   1572                TestProfileApp_SendMultiKVP_String_Time( srcEp, (byte)param1 );
   1573                break;
   1574            #endif // APP_TP
   1575          				
   1576              case TP_SEND_COUNTED_PKTS:
   1577                TestProfileApp_SendCountedPktsReq(HI_UINT16(param1), LO_UINT16(param1), param2);
   1578                ret = ZSuccess;
   1579                break;
   1580          
   1581              case TP_SEND_RESET_COUNTER:
   1582                TestProfileApp_CountedPakts_ResetCounterReq( (byte)param1 );
   1583                ret = ZSuccess;
   1584                break;
   1585          
   1586              case TP_SEND_GET_COUNTER:
   1587                TestProfileApp_CountedPakts_GetCounterReq( srcEp, (byte)param1 );
   1588                ret = ZSuccess;
   1589                break;
   1590          				
   1591              case TP_SET_PERMIT_JOIN:
   1592            #if defined ( RTR_NWK )
   1593                NLME_PermitJoiningRequest( (byte)param1 );
   1594                ret = ZSuccess;
   1595            #else
   1596                ret = ZFailure;
   1597            #endif
   1598                break;
   1599          
   1600            #if defined ( APP_TP2 )
   1601              case TP_ADD_GROUP:
   1602                ret = TestProfileApp_SetGroup( srcEp, param1 );
   1603                break;
   1604          
   1605              case TP_REMOVE_GROUP:
   1606                ret = TestProfileApp_RemoveGroup( srcEp, param1 );
   1607                break;
   1608          
   1609              case TP_SEND_UPDATE_KEY:
   1610                ret = TestProfileApp_UpdateKey( srcEp, (uint8)param1 );
   1611                break;
   1612          
   1613              case TP_SEND_SWITCH_KEY:
   1614                ret = TestProfileApp_SwitchKey(  srcEp, (uint8)param1 );
   1615                break;
   1616          			
   1617              case TP_SEND_BUFFERTEST_GROUP:
   1618                ret = TestProfileApp_SendBufferGroupReq( srcEp, (byte)param1 );
   1619                break;
   1620          
   1621              case TP_SEND_ROUTE_DISC_REQ:
   1622                ret = TestProfileApp_SendRouteDiscReq( srcEp, param1,
   1623                                            HI_UINT16( param2 ), LO_UINT16( param2 ) );
   1624                break;
   1625          
   1626              case TP_SEND_ROUTE_DISCOVERY:
   1627          #if defined ( RTR_NWK )
   1628                ret = TestProfileApp_SendRouteDiscovery( param1,
   1629                                            HI_UINT16( param2 ), LO_UINT16( param2 ) );
   1630          #endif
   1631                break;
   1632          
   1633            #endif // APP_TP2
   1634          
   1635          #endif  // APP_TP || APP_TP2
   1636          
   1637          #if defined ( OSAL_TOTAL_MEM )
   1638              case OSAL_MEM_STACK_HIGH_WATER:
   1639              case OSAL_MEM_HEAP_HIGH_WATER:
   1640                if ( app_cmd == OSAL_MEM_STACK_HIGH_WATER)
   1641                  param1 = osal_stack_used();
   1642                else
   1643                  param1 = osal_heap_high_water();
   1644                pData[0] = HI_UINT16( param1 );
   1645                pData[1] = LO_UINT16( param1 );
   1646          
   1647                // The pData for this response will only send one byte,
   1648                // so we are going to call it twice.
   1649                //        MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + sizeof( uint16 )),
   1650                //                                    (SPI_CMD_USER_TEST | SPI_RESPONSE_BIT),
   1651                //                                    sizeof( uint16 ), pData );
   1652                MT_SendSPIRespMsg( pData[0], SPI_CMD_USER_TEST, SPI_RESP_MSG_LEN_DEFAULT, 1);
   1653                MT_SendSPIRespMsg( pData[1], SPI_CMD_USER_TEST, SPI_RESP_MSG_LEN_DEFAULT, 1);
   1654                return;
   1655          #endif
   1656          
   1657          #if defined ( APP_DEBUG )
   1658              case DEBUG_GET:
   1659                DebugApp_SendQuery( param1 );
   1660                ret = ZSUCCESS;
   1661                break;
   1662          #endif
   1663          
   1664          #if defined ( APP_TP2 )
   1665              case TP_SEND_BCAST_RSP:
   1666                ret = TestProfileApp_SendBcastRsp( srcEp, (byte)param1 );
   1667                break;
   1668          #endif
   1669          			
   1670              default:
   1671                break;
   1672            }
   1673          
   1674            MT_SendSPIRespMsg( ( byte )ret, SPI_CMD_USER_TEST, len, 1);
   1675          
   1676          }
   1677          #endif // MT_USER_TEST_FUNC
   1678          #endif // ZTOOL
   1679          
   1680          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
   1681          /***************************************************************************************************
   1682           * @fn      MT_RAMRead
   1683           *
   1684           * @brief
   1685           *
   1686           *   Process Serial Message.
   1687           *
   1688           * @param   UINT16 addr - address to read from
   1689           * @param   pData - pointer to buffer to put read data
   1690           *
   1691           * @return  ZSuccess or ZFailure
   1692           *
   1693           * @MT SPI_CMD_SYS_RAM_READ
   1694           *
   1695           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1696          byte MT_RAMRead( UINT16 addr, byte *pData  )
   \                     MT_RAMRead:
   1697          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1698            byte *pAddr;
   1699          
   1700            if ( IS_MEM_VALID( addr ) )
   \   000004   C3           CLR     C
   \   000005   EA           MOV     A,R2
   \   000006   9400         SUBB    A,#0x0
   \   000008   EB           MOV     A,R3
   \   000009   94E0         SUBB    A,#-0x20
   \   00000B   400E         JC      ??MT_RAMRead_0
   1701            {
   1702              pAddr = (byte *)addr;
   1703              *pData = *pAddr;
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   F0           MOVX    @DPTR,A
   1704              return ( (byte)ZSuccess );
   \   000017   7900         MOV     R1,#0x0
   \   000019   8008         SJMP    ??MT_RAMRead_1
   1705            }
   1706            else
   1707            {
   1708              *pData = 0;
   \                     ??MT_RAMRead_0:
   \   00001B   E4           CLR     A
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   F0           MOVX    @DPTR,A
   1709              return ( (byte)ZFailure );
   \   000021   7901         MOV     R1,#0x1
   \                     ??MT_RAMRead_1:
   \   000023                REQUIRE ?Subroutine14
   \   000023                ; // Fall through to label ?Subroutine14
   1710            }
   1711          }
   1712          #endif
   1713          
   1714          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
   1715          /***************************************************************************************************
   1716           * @fn      MT_RAMWrite
   1717           *
   1718           * @brief
   1719           *
   1720           *   Process Serial Message.
   1721           *
   1722           * @param   UINT16 addr - address to write at
   1723           * @param   byte val  - values to fill in the above address and the next
   1724           *
   1725           * @return  ZSuccess or ZFailure
   1726           *
   1727           * @MT SPI_CMD_SYS_RAM_WRITE
   1728           *
   1729           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1730          byte MT_RAMWrite( UINT16 addr, byte val )
   \                     MT_RAMWrite:
   1731          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1732            if ( IS_MEM_VALID( addr ) )
   \   000004   C3           CLR     C
   \   000005   EA           MOV     A,R2
   \   000006   9400         SUBB    A,#0x0
   \   000008   EB           MOV     A,R3
   \   000009   94E0         SUBB    A,#-0x20
   \   00000B   400A         JC      ??MT_RAMWrite_0
   1733            {
   1734              *((byte*)(addr)) = val;
   \   00000D   E9           MOV     A,R1
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   F0           MOVX    @DPTR,A
   1735              return ( (byte)ZSuccess );
   \   000013   7900         MOV     R1,#0x0
   \   000015   8002         SJMP    ??MT_RAMWrite_1
   1736            }
   1737            else
   1738              return ( (byte)ZFailure );
   \                     ??MT_RAMWrite_0:
   \   000017   7901         MOV     R1,#0x1
   \                     ??MT_RAMWrite_1:
   \   000019   80..         SJMP    ?Subroutine14
   1739          }
   1740          #endif
   1741          
   1742          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
   1743          /***************************************************************************************************
   1744           * @fn      MT_SetDebugThreshold
   1745           *
   1746           * @brief
   1747           *
   1748           *   Set Debug Threshold for software components.
   1749           *
   1750           * @param   comp_id   - software component ID.
   1751           * @param   threshold - threshold value for reporting debug messages.
   1752           *
   1753           * @return  ZSuccess
   1754           *
   1755           * @MT SPI_CMD_SYS_SET_DEBUG_THRESHOLD
   1756           *
   1757           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1758          byte MT_SetDebugThreshold( byte compID, byte threshold )
   \                     MT_SetDebugThreshold:
   1759          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1760            // *** RKJ - for now if we get any threshold message, set it on
   1761            debugThreshold = threshold;
   \   000004   EA           MOV     A,R2
   \   000005   90....       MOV     DPTR,#debugThreshold
   \   000008   F0           MOVX    @DPTR,A
   1762            debugCompId = compID;
   \   000009   E9           MOV     A,R1
   \   00000A   90....       MOV     DPTR,#debugCompId
   \   00000D   F0           MOVX    @DPTR,A
   1763          
   1764            return ( (byte)ZSuccess );
   \   00000E   7900         MOV     R1,#0x0
   \   000010   80..         SJMP    ?Subroutine14
   1765          }
   1766          #endif
   1767          
   1768          /***************************************************************************************************
   1769           * @fn      MT_Reset
   1770           *
   1771           * @brief
   1772           *
   1773           *   Reset/reprogram the device.
   1774           *
   1775           * @param   typID: 0=reset, 1=serial bootloader
   1776           *
   1777           * @return  void
   1778           *
   1779           * @MT SPI_CMD_SYS_RESET
   1780           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1781          void MT_Reset( byte typID )
   \                     MT_Reset:
   1782          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1783            if ( typID )
   \   000005   E9           MOV     A,R1
   \   000006   C2AF         CLR     0xa8.7
   \   000008   6019         JZ      ??MT_Reset_0
   1784            {
   1785              // Jump to bootloader
   1786              BootLoader();
   \   00000A   90....       MOV     DPTR,#__Constant_53544159
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?L_MOV_X
   \   000012   90E000       MOV     DPTR,#-0x2000
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?L_MOV_TO_X
   \   00001A   75C9AB       MOV     0xc9,#-0x55
   \   00001D   75C95B       MOV     0xc9,#0x5b
   \                     ??MT_Reset_1:
   \   000020   00           NOP
   \   000021   80FD         SJMP    ??MT_Reset_1
   1787            }
   1788            else
   1789            {
   1790              // Restart this program
   1791              SystemReset();
   \                     ??MT_Reset_0:
   \   000023   75C9AB       MOV     0xc9,#-0x55
   \   000026   75C95B       MOV     0xc9,#0x5b
   \                     ??MT_Reset_2:
   \   000029   00           NOP
   \   00002A   80FD         SJMP    ??MT_Reset_2
   1792            }
   1793          }
   1794          
   1795          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
   1796          /***************************************************************************************************
   1797           * @fn      MT_SendErrorNotification
   1798           *
   1799           * @brief
   1800           *
   1801           *   Send Error Notofication Message to Test Tool.
   1802           *
   1803           * @param   byte err
   1804           *
   1805           * @return  void
   1806           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1807          void MT_SendErrorNotification( byte err )
   \                     MT_SendErrorNotification:
   1808          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   12....       LCALL   ?Subroutine2 & 0xFFFF
   1809            MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + 1),
   1810                                        (SPI_RESPONSE_BIT | SPI_CMD_SYS_RAM_WRITE),
   1811                                        1, &err );
   \                     ??CrossCallReturnLabel_9:
   \   00000E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000011   7C01         MOV     R4,#0x1
   \   000013   7A02         MOV     R2,#0x2
   \   000015   02....       LJMP    ?Subroutine15 & 0xFFFF
   1812          }
   1813          #endif
   1814          
   1815          /***************************************************************************************************
   1816           * @fn      MT_ReverseBytes
   1817           *
   1818           * @brief
   1819           *
   1820           *   Reverses bytes within an array
   1821           *
   1822           * @param   data - ptr to data buffer to reverse
   1823           * @param    len - number of bytes in buffer
   1824           *
   1825           * @return  void
   1826           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1827          void MT_ReverseBytes( byte *pData, byte len )
   \                     MT_ReverseBytes:
   1828          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
   1829            byte i,j;
   1830            byte temp;
   1831          
   1832            for ( i = 0, j = len-1; len > 1; len-=2 ) {
   \   000007   7D00         MOV     R5,#0x0
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   2C           ADD     A,R4
   \   00000C   F5..         MOV     ?V0 + 2,A
   \   00000E   802F         SJMP    ??MT_ReverseBytes_0
   1833              temp = pData[i];
   \                     ??MT_ReverseBytes_1:
   \   000010   8D..         MOV     ?V0 + 0,R5
   \   000012   EA           MOV     A,R2
   \   000013   25..         ADD     A,?V0 + 0
   \   000015   F8           MOV     R0,A
   \   000016   EB           MOV     A,R3
   \   000017   3400         ADDC    A,#0x0
   \   000019   F9           MOV     R1,A
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 3,A
   1834              pData[i++] = pData[j];
   \   000021   85....       MOV     ?V0 + 0,?V0 + 2
   \   000024   EA           MOV     A,R2
   \   000025   25..         ADD     A,?V0 + 0
   \   000027   FE           MOV     R6,A
   \   000028   EB           MOV     A,R3
   \   000029   3400         ADDC    A,#0x0
   \   00002B   FF           MOV     R7,A
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000033   0D           INC     R5
   1835              pData[j--] = temp;
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   E5..         MOV     A,?V0 + 3
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   15..         DEC     ?V0 + 2
   1836            }
   \   00003D   1C           DEC     R4
   \   00003E   1C           DEC     R4
   \                     ??MT_ReverseBytes_0:
   \   00003F   EC           MOV     A,R4
   \   000040   C3           CLR     C
   \   000041   9402         SUBB    A,#0x2
   \   000043   50CB         JNC     ??MT_ReverseBytes_1
   1837          }
   \   000045   02....       LJMP    ?Subroutine18 & 0xFFFF
   1838          
   1839          /***************************************************************************************************
   1840           * @fn      MT_SendSPIRespMsg
   1841           *
   1842           * @brief
   1843           *
   1844           *   This function is used to process messages in the queue
   1845           *
   1846           * @param   none
   1847           *
   1848           * @return  void
   1849           ***************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1850          void MT_SendSPIRespMsg( byte ret, uint16 cmd_id, byte msgLen, byte respLen)
   \                     MT_SendSPIRespMsg:
   1851          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 4,R2
   \   000014   8B..         MOV     ?V0 + 5,R3
   \   000016   8C..         MOV     ?V0 + 0,R4
   \   000018   8D..         MOV     ?V0 + 1,R5
   1852            byte *msgPtr;
   1853          
   1854            msgPtr = osal_mem_alloc( msgLen );
   \   00001A                ; Setup parameters for call to function osal_mem_alloc
   \   00001A   EC           MOV     A,R4
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000021   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   000023   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000026   8A..         MOV     ?V0 + 2,R2
   \   000028   8B..         MOV     ?V0 + 3,R3
   \   00002A   AE..         MOV     R6,?V0 + 2
   \   00002C   AF..         MOV     R7,?V0 + 3
   1855            if ( msgPtr )
   \   00002E   EE           MOV     A,R6
   \   00002F   7001         JNZ     ??MT_SendSPIRespMsg_0
   \   000031   EF           MOV     A,R7
   \                     ??MT_SendSPIRespMsg_0:
   \   000032   6049         JZ      ??MT_SendSPIRespMsg_1
   1856            {
   1857          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
   1858              MT_BuildSPIMsg( (SPI_RESPONSE_BIT | cmd_id), msgPtr, respLen, &ret );
   \   000034                ; Setup parameters for call to function MT_BuildSPIMsg
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   8582..       MOV     ?V0 + 2,DPL
   \   00003D   8583..       MOV     ?V0 + 3,DPH
   \   000040   78..         MOV     R0,#?V0 + 2
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   A9..         MOV     R1,?V0 + 1
   \   000047   EE           MOV     A,R6
   \   000048   FC           MOV     R4,A
   \   000049   EF           MOV     A,R7
   \   00004A   FD           MOV     R5,A
   \   00004B   AA..         MOV     R2,?V0 + 4
   \   00004D   7410         MOV     A,#0x10
   \   00004F   45..         ORL     A,?V0 + 5
   \   000051   FB           MOV     R3,A
   \   000052   90....       MOV     DPTR,#(MT_BuildSPIMsg & 0xffff)
   \   000055   74..         MOV     A,#((MT_BuildSPIMsg >> 16) & 0xff)
   \   000057   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   1859              HalUARTWrite ( SPI_MGR_DEFAULT_PORT, msgPtr, msgLen );
   \   00005F                ; Setup parameters for call to function HalUARTWrite
   \   00005F   AC..         MOV     R4,?V0 + 0
   \   000061   7D00         MOV     R5,#0x0
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   7900         MOV     R1,#0x0
   \   000069   90....       MOV     DPTR,#(HalUARTWrite & 0xffff)
   \   00006C   74..         MOV     A,#((HalUARTWrite >> 16) & 0xff)
   \   00006E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1860          #endif
   1861          
   1862              osal_mem_free( msgPtr );
   \   000071                ; Setup parameters for call to function osal_mem_free
   \   000071   EE           MOV     A,R6
   \   000072   FA           MOV     R2,A
   \   000073   EF           MOV     A,R7
   \   000074   FB           MOV     R3,A
   \   000075   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   000078   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   00007A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1863            }
   1864          }
   \                     ??MT_SendSPIRespMsg_1:
   \   00007D   02....       LJMP    ?Subroutine16 & 0xFFFF

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "1.00 (F8W1.4.2)">`:
   \   000000   312E3030     DB "1.00 (F8W1.4.2)"
   \            20284638
   \            57312E34
   \            2E322900

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "1.10 (F8W1.4.2)">`:
   \   000000   312E3130     DB "1.10 (F8W1.4.2)"
   \            20284638
   \            57312E34
   \            2E322900

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for MTVersionString>`:
   \   000000   ........     DW `?<Constant "1.00 (F8W1.4.2)">`, `?<Constant "1.10 (F8W1.4.2)">`

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_ffffffff>`:
   \   000000   FFFFFFFF     DD 4294967295

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_0>`:
   \   000000   00000000     DD 0

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_3e8>`:
   \   000000   E8030000     DD 1000

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_53544159>`:
   \   000000   59415453     DD 1398030681

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "1.00 (F8W1.4.2)">`:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for <Constant "1.00 (F8W1.4.2)">`
   \   000010                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "1.10 (F8W1.4.2)">`:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for <Constant "1.10 (F8W1.4.2)">`
   \   000010                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     __Constant_ffffffff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_ffffffff>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     __Constant_0:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_0>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     __Constant_3e8:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_3e8>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     __Constant_53544159:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_53544159>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
   1865          
   1866          #endif  // MT_TASK
   1867          
   1868          /***************************************************************************************************
   1869          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MTProcessAppMsg                    1      0     56
       -> afFindEndPointDesc            0      0     36
       -> osal_msg_allocate             0      0     36
       -> osal_memcpy                   0      0     42
       -> osal_msg_send                 0      0     36
     MTProcessAppRspMsg                 0      0     26
       -> MT_BuildAndSendZToolResponse
                                        0      0     24
     MTProcessLedControl                2      0     35
       -> HalLedSet                     4      0      0
     MT_BuildAndSendZToolCB             1      0     19
       -> osal_msg_allocate             0      0     32
       -> osal_memcpy                   0      0     38
       -> osal_msg_send                 0      0     32
     MT_BuildAndSendZToolResponse       0      0     55
       -> osal_mem_alloc                0      0     32
       -> MT_BuildSPIMsg                0      0     36
       -> HalUARTWrite                  0      0     32
       -> osal_mem_free                 0      0     32
     MT_BuildSPIMsg                     1      0     44
       -> osal_memcpy                   0      0     34
       -> SPIMgr_CalcFCS                0      0     28
     MT_IndReset                        1      0     13
       -> MT_BuildAndSendZToolResponse
                                        0      0     26
     MT_ProcessCommand                  1      0     24
       -> MT_ProcessSerialCommand       0      0     28
       -> MT_ProcessDebugMsg            0      0     28
       -> MT_ProcessDebugStr            0      0     28
       -> SPIMgr_CalcFCS                0      0     28
       -> HalUARTWrite                  0      0     28
       -> MTProcessAppRspMsg            0      0     28
       -> osal_msg_deallocate           0      0     28
     MT_ProcessDebugMsg                 1      0     41
       -> osal_msg_allocate             0      0     50
       -> MT_BuildSPIMsg                0      0     54
       -> HalUARTWrite                  0      0     50
       -> osal_msg_deallocate           0      0     50
     MT_ProcessDebugStr                 0      0     28
       -> osal_mem_alloc                0      0     24
       -> MT_BuildSPIMsg                0      0     28
       -> HalUARTWrite                  0      0     24
       -> osal_mem_free                 0      0     24
     MT_ProcessEvent                    0      0     10
       -> MT_SendErrorNotification      0      0     20
       -> MT_ProcessCommand             0      0     20
       -> osal_msg_receive              0      0     20
     MT_ProcessGetDeviceInfo            1      0     54
       -> osal_mem_alloc                0      0     30
       -> osal_nv_read                  0      0     38
       -> MT_ReverseBytes               0      0     30
       -> NLME_GetShortAddr             0      0     30
       -> AssocMakeList                 0      0     30
       -> osal_memset                   0      0     30
       -> osal_mem_free                 0      0     30
       -> MT_BuildAndSendZToolResponse
                                        0      0     34
       -> osal_mem_free                 0      0     30
     MT_ProcessGetNV                    1      0     55
       -> osal_nv_item_len              0      0     32
       -> osal_mem_alloc                0      0     32
       -> osal_memset                   0      0     32
       -> osal_nv_read                  0      0     40
       -> MT_BuildAndSendZToolResponse
                                        0      0     36
       -> osal_mem_free                 0      0     32
     MT_ProcessGetNvInfo                1      0     61
       -> osal_mem_alloc                0      0     44
       -> osal_memset                   0      0     44
       -> osal_nv_read                  0      0     52
       -> MT_ReverseBytes               0      0     44
       -> osal_nv_read                  0      0     52
       -> osal_nv_read                  0      0     52
       -> osal_nv_read                  0      0     52
       -> osal_nv_read                  0      0     52
       -> MT_BuildAndSendZToolResponse
                                        0      0     48
       -> osal_mem_free                 0      0     44
     MT_ProcessSerialCommand            1      0     53
       -> MT_RAMRead                    0      0     70
       -> MT_RAMWrite                   0      0     70
       -> MT_Reset                      0      0     70
       -> NLME_GetProtocolVersion       0      0     70
       -> osal_strlen                   0      0     70
       -> MT_BuildAndSendZToolResponse
                                        0      0     74
       -> MT_ReverseBytes               0      0     70
       -> ZMacSetReq                    0      0     70
       -> osal_nv_write                 0      0     78
       -> ZMacGetReq                    0      0     70
       -> MT_ReverseBytes               0      0     70
       -> osal_nv_item_len              0      0     74
       -> osal_nv_write                 0      0     78
       -> osal_nv_item_len              0      0     74
       -> osal_nv_write                 0      0     78
       -> osal_nv_item_len              0      0     74
       -> osal_nv_write                 0      0     78
       -> osal_nv_item_len              0      0     74
       -> osal_nv_write                 0      0     78
       -> MT_ProcessGetNvInfo           0      0     70
       -> MT_ProcessGetDeviceInfo       0      0     70
       -> MT_ProcessSetNV               0      0     70
       -> MT_ProcessGetNV               0      0     70
       -> osal_GetSystemClock           0      0     70
       -> OnBoard_SendKeys              0      0     70
       -> MTProcessAppMsg               0      0     70
       -> MTProcessLedControl           0      0     70
       -> MT_ZdoCommandProcessing       0      0     70
     MT_ProcessSetNV                    0      0     49
       -> osal_nv_item_len              0      0     24
       -> osal_nv_write                 0      0     28
     MT_RAMRead                         3      0     35
     MT_RAMWrite                        3      0     35
     MT_Reset                           0      0     47
     MT_ReverseBytes                    1      0     47
     MT_SendErrorNotification           1      0     23
       -> MT_BuildAndSendZToolResponse
                                        0      0     26
     MT_SendSPIRespMsg                  1      0     17
       -> osal_mem_alloc                0      0     30
       -> MT_BuildSPIMsg                0      0     34
       -> HalUARTWrite                  0      0     30
       -> osal_mem_free                 0      0     30
     MT_SetDebugThreshold               2      0      0
     MT_TaskInit                        2      0      0
       -> SPIMgr_Init                   4      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     WDCTL                             1
     mboxMsg                           8
     MTVersionString                   4
     MT_TaskID                         1
     debugThreshold                    1
     debugCompId                       1
     save_cmd                          2
     longvar                           4
     temp_glob_ptr1                    2
     temp_glob_ptr2                    2
     MT_TaskInit                      29
     ?Subroutine14                     7
     MT_IndReset                      24
     ?Subroutine15                    27
     ?Subroutine2                     16
     MT_ProcessEvent                  83
     MT_BuildSPIMsg                  131
     ?Subroutine6                      8
     ?Subroutine16                    10
     MT_BuildAndSendZToolResponse    107
     ?Subroutine17                     8
     MT_BuildAndSendZToolCB          145
     ?Subroutine10                    11
     MT_ProcessCommand               193
     ?Subroutine7                      6
     MT_ProcessDebugMsg              306
     ?Subroutine1                     20
     ?Subroutine9                     17
     ?Subroutine3                      9
     ?Subroutine12                    16
     MT_ProcessDebugStr              125
     ?Subroutine18                     5
     MT_ProcessSetNV                  64
     MT_ProcessGetNV                 168
     MT_ProcessGetNvInfo             531
     ?Subroutine11                    13
     ?Subroutine4                      9
     MT_ProcessGetDeviceInfo         286
     ?Subroutine0                     16
     MT_ProcessSerialCommand        1352
     ?Subroutine5                      9
     ?Subroutine13                    16
     MTProcessLedControl             121
     MTProcessAppMsg                 210
     ?Subroutine8                      9
     MTProcessAppRspMsg               37
     MT_RAMRead                       35
     MT_RAMWrite                      27
     MT_SetDebugThreshold             18
     MT_Reset                         44
     MT_SendErrorNotification         24
     MT_ReverseBytes                  72
     MT_SendSPIRespMsg               128
     ?<Initializer for <Constant "1.00 (F8W1.4.2)">
                                      16
     ?<Initializer for <Constant "1.10 (F8W1.4.2)">
                                      16
     ?<Initializer for MTVersionString>
                                       4
     ?<Initializer for __Constant_ffffffff>
                                       4
     ?<Initializer for __Constant_0>
                                       4
     ?<Initializer for __Constant_3e8>
                                       4
     ?<Initializer for __Constant_53544159>
                                       4
     ?<Constant "1.00 (F8W1.4.2)">    16
     ?<Constant "1.10 (F8W1.4.2)">    16
     __Constant_ffffffff               4
     __Constant_0                      4
     __Constant_3e8                    4
     __Constant_53544159               4
     _A_IEN0                           1

 
 4 492 bytes in segment BANKED_CODE
     2 bytes in segment SFR_AN
     8 bytes in segment XDATA_AN
    52 bytes in segment XDATA_I
    52 bytes in segment XDATA_ID
    13 bytes in segment XDATA_Z
 
 4 528 bytes of CODE  memory (+ 16 bytes shared)
     0 bytes of DATA  memory (+  2 bytes shared)
    49 bytes of XDATA memory (+ 24 bytes shared)

Errors: none
Warnings: none
