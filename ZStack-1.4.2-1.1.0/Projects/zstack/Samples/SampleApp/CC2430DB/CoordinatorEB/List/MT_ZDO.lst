##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   17/Oct/2013  21:25:53 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\mt\MT_ZDO.c                                     #
#    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCoor #
#                          d.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS       #
#                          "-DCONST=const __code" -DGENERIC=__generic) -f    #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConfig. #
#                          cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800     #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\Source\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mt\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2430EB\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\osal\mcu #
#                          \ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC #
#                          2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\osal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ #
#                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects #
#                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. #
#                          \Components\stack\af\ -I                          #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\stack\nw #
#                          k\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C #
#                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2430DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ #
#                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\zmac\f8w #
#                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                       #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          mac\high_level\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf03\ -I                #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\low_ #
#                          level\srf03\single_chip\ -D CC2430EB -D ZTOOL_P1  #
#                          -D MT_TASK -D MT_ZDO_FUNC -lC                     #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\ -lA            #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\CoordinatorEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\mt\MT_ZDO.c"                                   #
#    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\MT_ZDO.lst      #
#    Object file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\Obj\MT_ZDO.r51       #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mt\MT_ZDO.c
      1          /*********************************************************************
      2              Filename:       MT_ZDO.c
      3              Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
      4              Revision:       $Revision: 14296 $
      5          
      6              Description:
      7          
      8                  MonitorTest functions for the NWK layer.
      9          
     10              Notes:
     11          
     12              Copyright (c) 2006 by Texas Instruments, Inc.
     13              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     14              derivative works, modify, distribute, perform, display or sell this
     15              software and/or its documentation for any purpose is prohibited
     16              without the express written consent of Texas Instruments, Inc.
     17          *********************************************************************/
     18          
     19          #ifdef MT_ZDO_FUNC
     20          
     21          
     22          /*********************************************************************
     23           * INCLUDES
     24           */
     25          #include "ZComDef.h"
     26          #include "OSAL.h"
     27          #include "MTEL.h"
     28          #include "MT_ZDO.h"
     29          #include "APSMEDE.h"
     30          #include "ZDConfig.h"
     31          #include "ZDProfile.h"
     32          #include "ZDObject.h"
     33          #include "ZDApp.h"
     34          
     35          #if !defined( WIN32 )
     36            #include "OnBoard.h"
     37          #endif
     38          
     39          #include "nwk_util.h"
     40          
     41          /*********************************************************************
     42           * MACROS
     43           */
     44          
     45          /*********************************************************************
     46           * CONSTANTS
     47           */
     48          
     49          /*********************************************************************
     50           * TYPEDEFS
     51           */
     52          
     53          /*********************************************************************
     54           * GLOBAL VARIABLES
     55           */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     56          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
     57          
     58          /*********************************************************************
     59           * EXTERNAL VARIABLES
     60           */
     61          
     62          /*********************************************************************
     63           * EXTERNAL FUNCTIONS
     64           */
     65          
     66          /*********************************************************************
     67           * LOCAL VARIABLES
     68           */
     69          
     70          /*********************************************************************
     71           * LOCAL FUNCTIONS
     72           */
     73          byte *zdo_MT_MakeExtAddr( zAddrType_t *devAddr, byte *pData );
     74          byte *zdo_MT_CopyRevExtAddr( byte *dstMsg, byte *addr );
     75          
     76          /*********************************************************************
     77           * @fn      MT_ZdoCommandProcessing
     78           *
     79           * @brief
     80           *
     81           *   Process all the ZDO commands that are issued by test tool
     82           *
     83           * @param   cmd_id - Command ID
     84           * @param   len    - Length of received SPI data message
     85           * @param   pData  - pointer to received SPI data message
     86           *
     87           * @return  void
     88           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
     89          void MT_ZdoCommandProcessing( uint16 cmd_id , byte len , byte *pData )
   \                     MT_ZdoCommandProcessing:
     90          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 99
   \   000005   749D         MOV     A,#-0x63
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   \   00000E   8C..         MOV     ?V0 + 4,R4
     91            byte i;
     92            byte x;
     93            byte ret;
     94            byte attr;
     95            byte attr1;
     96            uint16 cID;
     97            uint16 shortAddr;
     98            uint16 uAttr;
     99            byte *ptr;
    100            byte *ptr1;
    101            zAddrType_t devAddr;
    102            zAddrType_t dstAddr;
    103            byte respLen;
    104          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    105            uint32 scanChans;
    106          #endif
    107          #if defined ( ZDO_USERDESCSET_REQUEST )
    108            UserDescriptorFormat_t userDesc;
    109          #endif
    110          
    111            ret = UNSUPPORTED_COMMAND;
   \   000010   7901         MOV     R1,#0x1
    112            len = SPI_0DATA_MSG_LEN + SPI_RESP_LEN_ZDO_DEFAULT;
    113            respLen = SPI_RESP_LEN_ZDO_DEFAULT;
    114          
    115            switch (cmd_id)
   \   000012   78..         MOV     R0,#?V0 + 6
   \   000014   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for MT_ZdoCommandProcessing>_0`:
   \   000017   000A         DW        2560
   \   000019   18           DB        24
   \   00001A   ....         DW        ??MT_ZdoCommandProcessing_0
   \   00001C   ....         DW        ??MT_ZdoCommandProcessing_1
   \   00001E   ....         DW        ??MT_ZdoCommandProcessing_2
   \   000020   ....         DW        ??MT_ZdoCommandProcessing_3
   \   000022   ....         DW        ??MT_ZdoCommandProcessing_4
   \   000024   ....         DW        ??MT_ZdoCommandProcessing_5
   \   000026   ....         DW        ??MT_ZdoCommandProcessing_6
   \   000028   ....         DW        ??MT_ZdoCommandProcessing_7
   \   00002A   ....         DW        ??MT_ZdoCommandProcessing_8
   \   00002C   ....         DW        ??MT_ZdoCommandProcessing_9
   \   00002E   ....         DW        ??MT_ZdoCommandProcessing_10
   \   000030   ....         DW        ??MT_ZdoCommandProcessing_11
   \   000032   ....         DW        ??MT_ZdoCommandProcessing_12
   \   000034   ....         DW        ??MT_ZdoCommandProcessing_13
   \   000036   ....         DW        ??MT_ZdoCommandProcessing_14
   \   000038   ....         DW        ??MT_ZdoCommandProcessing_0
   \   00003A   ....         DW        ??MT_ZdoCommandProcessing_0
   \   00003C   ....         DW        ??MT_ZdoCommandProcessing_0
   \   00003E   ....         DW        ??MT_ZdoCommandProcessing_0
   \   000040   ....         DW        ??MT_ZdoCommandProcessing_0
   \   000042   ....         DW        ??MT_ZdoCommandProcessing_15
   \   000044   ....         DW        ??MT_ZdoCommandProcessing_0
   \   000046   ....         DW        ??MT_ZdoCommandProcessing_0
   \   000048   ....         DW        ??MT_ZdoCommandProcessing_0
   \   00004A   ....         DW        ??MT_ZdoCommandProcessing_16
   \   00004C   ....         DW        ??MT_ZdoCommandProcessing_17
    116            {
    117              case SPI_CMD_ZDO_AUTO_ENDDEVICEBIND_REQ:
    118                i = *pData;    // Get the endpoint/interface
    119                ZDApp_SendEndDeviceBindReq( i );
   \                     ??MT_ZdoCommandProcessing_1:
   \   00004E                ; Setup parameters for call to function ZDApp_SendEndDeviceBindReq
   \   00004E   8C82         MOV     DPL,R4
   \   000050   8D83         MOV     DPH,R5
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   90....       MOV     DPTR,#(ZDApp_SendEndDeviceBindReq & 0xffff)
   \   000057   74..         MOV     A,#((ZDApp_SendEndDeviceBindReq >> 16) & 0xff)
   \                     ??MT_ZdoCommandProcessing_18:
   \   000059   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    120          
    121                //Since function type is void, report a succesful operation to the test tool
    122                ret = ZSUCCESS;
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   02....       LJMP    ??MT_ZdoCommandProcessing_0 & 0xFFFF
    123                break;
    124          
    125              case SPI_CMD_ZDO_AUTO_FIND_DESTINATION_REQ:
    126                i = *pData;    // Get the endpoint/interface
    127                ZDApp_AutoFindDestination( i );
   \                     ??MT_ZdoCommandProcessing_2:
   \   000061                ; Setup parameters for call to function ZDApp_AutoFindDestinationEx
   \   000061   7A00         MOV     R2,#0x0
   \   000063   7B00         MOV     R3,#0x0
   \   000065   8C82         MOV     DPL,R4
   \   000067   8D83         MOV     DPH,R5
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   90....       MOV     DPTR,#(ZDApp_AutoFindDestinationEx & 0xffff)
   \   00006E   74..         MOV     A,#((ZDApp_AutoFindDestinationEx >> 16) & 0xff)
   \   000070   80E7         SJMP    ??MT_ZdoCommandProcessing_18
    128                //Since function type is void, report a succesful operation to the test tool
    129                ret = ZSUCCESS;
    130                break;
    131          
    132          #if defined ( ZDO_NWKADDR_REQUEST )
    133              case SPI_CMD_ZDO_NWK_ADDR_REQ:
    134                // Copy and flip incoming 64-bit address
    135                pData = zdo_MT_MakeExtAddr( &devAddr, pData );
   \                     ??MT_ZdoCommandProcessing_3:
   \   000072                ; Setup parameters for call to function zdo_MT_MakeExtAddr
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   AA82         MOV     R2,DPL
   \   00007A   AB83         MOV     R3,DPH
   \   00007C   90....       MOV     DPTR,#(zdo_MT_MakeExtAddr & 0xffff)
   \   00007F   74..         MOV     A,#((zdo_MT_MakeExtAddr >> 16) & 0xff)
   \   000081   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    136          
    137                ptr = (byte*)&devAddr.addr.extAddr;
    138          
    139                attr = *pData++;   // RequestType
   \   000084   8A82         MOV     DPL,R2
   \   000086   8B83         MOV     DPH,R3
   \   000088   12....       LCALL   ?Subroutine10 & 0xFFFF
    140                attr1 = *pData++;  // StartIndex
    141                x = *pData;
    142                ret = (byte)ZDP_NwkAddrReq( ptr, attr, attr1, x );
   \                     ??CrossCallReturnLabel_25:
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   AA82         MOV     R2,DPL
   \   000093   AB83         MOV     R3,DPH
   \   000095   90....       MOV     DPTR,#(ZDP_NwkAddrReq & 0xffff)
   \   000098   74..         MOV     A,#((ZDP_NwkAddrReq >> 16) & 0xff)
   \   00009A   02....       LJMP    ??MT_ZdoCommandProcessing_19 & 0xFFFF
    143                break;
    144          #endif
    145          
    146          #if defined ( ZDO_IEEEADDR_REQUEST )
    147              case SPI_CMD_ZDO_IEEE_ADDR_REQ:
    148                shortAddr = BUILD_UINT16( pData[1], pData[0] );
   \                     ??MT_ZdoCommandProcessing_4:
   \   00009D   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000A0   E9           MOV     A,R1
   \   0000A1   3400         ADDC    A,#0x0
   \   0000A3   FF           MOV     R7,A
    149                pData += sizeof( shortAddr );
   \   0000A4   EC           MOV     A,R4
   \   0000A5   2402         ADD     A,#0x2
   \   0000A7   F5..         MOV     ?V0 + 4,A
   \   0000A9   ED           MOV     A,R5
   \   0000AA   3400         ADDC    A,#0x0
    150                attr = *pData++;   // RequestType
   \   0000AC   85..82       MOV     DPL,?V0 + 4
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   12....       LCALL   ?Subroutine10 & 0xFFFF
    151                attr1 = *pData++;  // StartIndex
    152                x = *pData;        // SecuritySuite
    153                ret = (byte)ZDP_IEEEAddrReq( shortAddr, attr, attr1, x );
   \                     ??CrossCallReturnLabel_26:
   \   0000B4   EF           MOV     A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   90....       MOV     DPTR,#(ZDP_IEEEAddrReq & 0xffff)
   \   0000B9   74..         MOV     A,#((ZDP_IEEEAddrReq >> 16) & 0xff)
   \   0000BB   02....       LJMP    ??MT_ZdoCommandProcessing_19 & 0xFFFF
    154                break;
    155          #endif
    156          
    157          #if defined ( ZDO_NODEDESC_REQUEST )
    158              case SPI_CMD_ZDO_NODE_DESC_REQ:
    159                // destination address
    160                devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_5:
   \   0000BE   7408         MOV     A,#0x8
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL   ?Subroutine0 & 0xFFFF
    161                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    162                pData += 2;
    163          
    164                // Network address of interest
    165                shortAddr = BUILD_UINT16( pData[1], pData[0] );
    166                pData += 2;
    167          
    168                attr = *pData;
    169                ret = (byte)ZDP_NodeDescReq( &devAddr, shortAddr, attr );
   \                     ??CrossCallReturnLabel_0:
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C9   7902         MOV     R1,#0x2
   \                     ??MT_ZdoCommandProcessing_20:
   \   0000CB   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000CE   FB           MOV     R3,A
   \   0000CF   E4           CLR     A
   \   0000D0   2C           ADD     A,R4
   \   0000D1   EB           MOV     A,R3
   \   0000D2   3400         ADDC    A,#0x0
   \   0000D4   FD           MOV     R5,A
   \   0000D5   7401         MOV     A,#0x1
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   AA82         MOV     R2,DPL
   \   0000DC   AB83         MOV     R3,DPH
   \   0000DE   90....       MOV     DPTR,#(ZDP_NWKAddrOfInterestReq & 0xffff)
   \   0000E1   74..         MOV     A,#((ZDP_NWKAddrOfInterestReq >> 16) & 0xff)
   \                     ??MT_ZdoCommandProcessing_21:
   \   0000E3   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000E6   7401         MOV     A,#0x1
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   02....       LJMP    ??MT_ZdoCommandProcessing_0 & 0xFFFF
    170                break;
    171          #endif
    172          
    173          #if defined ( ZDO_POWERDESC_REQUEST )
    174              case SPI_CMD_ZDO_POWER_DESC_REQ:
    175                // destination address
    176                devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_6:
   \   0000EE   7408         MOV     A,#0x8
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL   ?Subroutine0 & 0xFFFF
    177                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    178                pData += 2;
    179          
    180                // Network address of interest
    181                shortAddr = BUILD_UINT16( pData[1], pData[0] );
    182                pData += 2;
    183          
    184                attr = *pData;
    185                ret = (byte)ZDP_PowerDescReq( &devAddr, shortAddr, attr );
   \                     ??CrossCallReturnLabel_1:
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F9   7903         MOV     R1,#0x3
   \   0000FB   80CE         SJMP    ??MT_ZdoCommandProcessing_20
    186                break;
    187          #endif
    188          
    189          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    190              case SPI_CMD_ZDO_SIMPLE_DESC_REQ:
    191                // destination address
    192                devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_7:
   \   0000FD   7408         MOV     A,#0x8
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   12....       LCALL   ?Subroutine1 & 0xFFFF
    193                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    194                pData += 2;
    195          
    196                // Network address of interest
    197                shortAddr = BUILD_UINT16( pData[1], pData[0] );
    198                pData += 2;
    199          
    200                attr = *pData++;  // endpoint/interface
    201                attr1 = *pData;   // SecuritySuite
    202                ret = (byte)ZDP_SimpleDescReq( &devAddr, shortAddr, attr, attr1 );
   \                     ??CrossCallReturnLabel_5:
   \   000105   F5..         MOV     ?V0 + 0,A
   \   000107   78..         MOV     R0,#?V0 + 0
   \   000109   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010C   85..82       MOV     DPL,?V0 + 4
   \   00010F   85..83       MOV     DPH,?V0 + 5
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F9           MOV     R1,A
   \   000114   EE           MOV     A,R6
   \   000115   FC           MOV     R4,A
   \   000116   EF           MOV     A,R7
   \   000117   FD           MOV     R5,A
   \   000118   7401         MOV     A,#0x1
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   AA82         MOV     R2,DPL
   \   00011F   AB83         MOV     R3,DPH
   \   000121   90....       MOV     DPTR,#(ZDP_SimpleDescReq & 0xffff)
   \   000124   74..         MOV     A,#((ZDP_SimpleDescReq >> 16) & 0xff)
   \   000126   80BB         SJMP    ??MT_ZdoCommandProcessing_21
    203                break;
    204          #endif
    205          
    206          #if defined ( ZDO_ACTIVEEP_REQUEST )
    207              case SPI_CMD_ZDO_ACTIVE_EPINT_REQ:
    208                // destination address
    209                devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_8:
   \   000128   7408         MOV     A,#0x8
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   12....       LCALL   ?Subroutine0 & 0xFFFF
    210                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    211                pData += 2;
    212          
    213                // Network address of interest
    214                shortAddr = BUILD_UINT16( pData[1], pData[0] );
    215                pData += 2;
    216          
    217                attr = *pData;  // SecuritySuite
    218                ret = (byte)ZDP_ActiveEPReq( &devAddr, shortAddr, attr );
   \                     ??CrossCallReturnLabel_2:
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000133   7905         MOV     R1,#0x5
   \   000135   8094         SJMP    ??MT_ZdoCommandProcessing_20
    219                break;
    220          #endif
    221          
    222          #if defined ( ZDO_MATCH_REQUEST )
    223              case SPI_CMD_ZDO_MATCH_DESC_REQ:
    224                {
    225                  uint16 inC[16], outC[16];
    226          
    227                  // destination address
    228                  devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_9:
   \   000137   7408         MOV     A,#0x8
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   12....       LCALL   ?Subroutine1 & 0xFFFF
    229                  devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    230                  pData += 2;
    231          
    232                  // Network address of interest
    233                  shortAddr = BUILD_UINT16( pData[1], pData[0] );
    234                  pData += 2;
    235          
    236                  uAttr = BUILD_UINT16( pData[1], pData[0] );   // Profile ID
   \                     ??CrossCallReturnLabel_6:
   \   00013F   12....       LCALL   ?Subroutine6 & 0xFFFF
    237                  pData += 2;
    238          
    239                  attr = *pData++;   // NumInClusters
    240                  for (i=0; i<16; ++i)  {
    241                    inC[i] = BUILD_UINT16(pData[1], pData[0]);
   \                     ??CrossCallReturnLabel_15:
   \   000142   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000145   F9           MOV     R1,A
   \   000146   E4           CLR     A
   \   000147   2C           ADD     A,R4
   \   000148   E9           MOV     A,R1
   \   000149   3400         ADDC    A,#0x0
   \   00014B   FD           MOV     R5,A
   \   00014C   E5..         MOV     A,?V0 + 1
   \   00014E   C3           CLR     C
   \   00014F   33           RLC     A
   \   000150   F8           MOV     R0,A
   \   000151   E4           CLR     A
   \   000152   33           RLC     A
   \   000153   F9           MOV     R1,A
   \   000154   7443         MOV     A,#0x43
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00015C   EC           MOV     A,R4
   \   00015D   F0           MOVX    @DPTR,A
   \   00015E   A3           INC     DPTR
   \   00015F   ED           MOV     A,R5
   \   000160   12....       LCALL   ??Subroutine21_0 & 0xFFFF
    242                    pData += 2;
    243                  }
   \                     ??CrossCallReturnLabel_52:
   \   000163   40DD         JC      ??CrossCallReturnLabel_15
    244          
    245                  attr1 = *pData++;  // NumOutClusters
   \   000165   12....       LCALL   ?Subroutine15 & 0xFFFF
    246                  for (i=0; i<16; ++i)  {
    247                    outC[i] = BUILD_UINT16(pData[1], pData[0]);
   \                     ??CrossCallReturnLabel_41:
   \   000168   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   12....       LCALL   ?Subroutine21 & 0xFFFF
    248                    pData += 2;
    249                  }
   \                     ??CrossCallReturnLabel_49:
   \   000171   40F5         JC      ??CrossCallReturnLabel_41
    250          
    251                  i = *pData;        // SecuritySuite
    252          
    253                  ret = (byte)ZDP_MatchDescReq( &devAddr, shortAddr, uAttr,
    254                                            attr, inC, attr1, outC, i );
   \   000173                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000173   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000176   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000179   7424         MOV     A,#0x24
   \   00017B   12....       LCALL   ?XSTACK_DISP0_8
   \   00017E   8582..       MOV     ?V0 + 2,DPL
   \   000181   8583..       MOV     ?V0 + 3,DPH
   \   000184   78..         MOV     R0,#?V0 + 2
   \   000186   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000189   ED           MOV     A,R5
   \   00018A   F5..         MOV     ?V0 + 1,A
   \   00018C   78..         MOV     R0,#?V0 + 1
   \   00018E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000191   7447         MOV     A,#0x47
   \   000193   12....       LCALL   ?XSTACK_DISP0_8
   \   000196   8582..       MOV     ?V0 + 2,DPL
   \   000199   8583..       MOV     ?V0 + 3,DPH
   \   00019C   78..         MOV     R0,#?V0 + 2
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A1   8A..         MOV     ?V0 + 2,R2
   \   0001A3   8B..         MOV     ?V0 + 3,R3
   \   0001A5   78..         MOV     R0,#?V0 + 2
   \   0001A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AA   A9..         MOV     R1,?V0 + 0
   \   0001AC   EE           MOV     A,R6
   \   0001AD   FC           MOV     R4,A
   \   0001AE   EF           MOV     A,R7
   \   0001AF   FD           MOV     R5,A
   \   0001B0   7408         MOV     A,#0x8
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   AA82         MOV     R2,DPL
   \   0001B7   AB83         MOV     R3,DPH
   \   0001B9   90....       MOV     DPTR,#(ZDP_MatchDescReq & 0xffff)
   \   0001BC   74..         MOV     A,#((ZDP_MatchDescReq >> 16) & 0xff)
   \                     ??MT_ZdoCommandProcessing_22:
   \   0001BE   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001C1   7408         MOV     A,#0x8
   \   0001C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C6   02....       LJMP    ??MT_ZdoCommandProcessing_0 & 0xFFFF
    255                }
    256                break;
    257          #endif
    258          
    259          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    260              case SPI_CMD_ZDO_COMPLEX_DESC_REQ:
    261                // destination address
    262                devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_10:
   \   0001C9   7408         MOV     A,#0x8
   \   0001CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CE   12....       LCALL   ?Subroutine0 & 0xFFFF
    263                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    264                pData += 2;
    265          
    266                // Network address of interest
    267                shortAddr = BUILD_UINT16( pData[1], pData[0] );
    268                pData += 2;
    269          
    270                attr = *pData;  // SecuritySuite
    271                ret = (byte)ZDP_ComplexDescReq( &devAddr, shortAddr, attr );
   \                     ??CrossCallReturnLabel_3:
   \   0001D1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D4   7910         MOV     R1,#0x10
   \   0001D6   02....       LJMP    ??MT_ZdoCommandProcessing_20 & 0xFFFF
    272                break;
    273          #endif
    274          
    275          #if defined ( ZDO_USERDESC_REQUEST )
    276              case SPI_CMD_ZDO_USER_DESC_REQ:
    277                // destination address
    278                devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_11:
   \   0001D9   7408         MOV     A,#0x8
   \   0001DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DE   12....       LCALL   ?Subroutine0 & 0xFFFF
    279                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    280                pData += 2;
    281          
    282                // Network address of interest
    283                shortAddr = BUILD_UINT16( pData[1], pData[0] );
    284                pData += 2;
    285          
    286                attr = *pData;  // SecuritySuite
    287                ret = (byte)ZDP_UserDescReq( &devAddr, shortAddr, attr );
   \                     ??CrossCallReturnLabel_4:
   \   0001E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E4   7911         MOV     R1,#0x11
   \   0001E6   02....       LJMP    ??MT_ZdoCommandProcessing_20 & 0xFFFF
    288                break;
    289          #endif
    290          
    291          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    292              case SPI_CMD_ZDO_END_DEV_BIND_REQ:
    293                //TODO: When ZTool supports 16 bits the code below will need to take it into account
    294                {
    295                  uint16 inC[16], outC[16];
    296          
    297                  // destination address
    298                  devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_12:
   \   0001E9   7408         MOV     A,#0x8
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   12....       LCALL   ?Subroutine2 & 0xFFFF
    299                  devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    300                  pData += 2;
    301          
    302                  // Network address of interest
    303                  shortAddr = BUILD_UINT16( pData[1], pData[0] );
   \                     ??CrossCallReturnLabel_7:
   \   0001F1   12....       LCALL   ?Subroutine22 & 0xFFFF
    304                  pData += 2;
    305          
    306                  x = *pData++;      // EPInt
   \                     ??CrossCallReturnLabel_53:
   \   0001F4   85..82       MOV     DPL,?V0 + 4
   \   0001F7   F583         MOV     DPH,A
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   FC           MOV     R4,A
   \   0001FB   A3           INC     DPTR
   \   0001FC   8582..       MOV     ?V0 + 4,DPL
   \   0001FF   8583..       MOV     ?V0 + 5,DPH
    307          
    308                  uAttr = BUILD_UINT16( pData[1], pData[0] );   // Profile ID
   \   000202   A3           INC     DPTR
   \   000203   E0           MOVX    A,@DPTR
   \   000204   12....       LCALL   ?Subroutine6 & 0xFFFF
    309                  pData += 2;
    310          
    311                  attr = *pData++;   // NumInClusters
    312                  for (i=0; i<16; ++i)  {
    313                    inC[i] = BUILD_UINT16(pData[1], pData[0]);
   \                     ??CrossCallReturnLabel_16:
   \   000207   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00020A   12....       LCALL   ?XSTACK_DISP0_8
   \   00020D   12....       LCALL   ?Subroutine21 & 0xFFFF
    314                    pData += 2;
    315                  }
   \                     ??CrossCallReturnLabel_50:
   \   000210   40F5         JC      ??CrossCallReturnLabel_16
    316          
    317                  attr1 = *pData++;  // NumOutClusters
   \   000212   12....       LCALL   ?Subroutine15 & 0xFFFF
    318                  for (i=0; i<16; ++i)  {
    319                    outC[i] = BUILD_UINT16(pData[1], pData[0]);
   \                     ??CrossCallReturnLabel_42:
   \   000215   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000218   7443         MOV     A,#0x43
   \   00021A   12....       LCALL   ?XSTACK_DISP0_8
   \   00021D   12....       LCALL   ?Subroutine21 & 0xFFFF
    320                    pData += 2;
    321                  }
   \                     ??CrossCallReturnLabel_51:
   \   000220   40F3         JC      ??CrossCallReturnLabel_42
    322          
    323                  i = *pData;        // SecuritySuite
    324          
    325                  ret = (byte)ZDP_EndDeviceBindReq( &devAddr, shortAddr, x, uAttr,
    326                                          attr, inC, attr1, outC, i );
   \   000222                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000222   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000225   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000228   7444         MOV     A,#0x44
   \   00022A   12....       LCALL   ?XSTACK_DISP0_8
   \   00022D   8582..       MOV     ?V0 + 2,DPL
   \   000230   8583..       MOV     ?V0 + 3,DPH
   \   000233   78..         MOV     R0,#?V0 + 2
   \   000235   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000238   ED           MOV     A,R5
   \   000239   F5..         MOV     ?V0 + 1,A
   \   00023B   78..         MOV     R0,#?V0 + 1
   \   00023D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000240   7427         MOV     A,#0x27
   \   000242   12....       LCALL   ?XSTACK_DISP0_8
   \   000245   8582..       MOV     ?V0 + 2,DPL
   \   000248   8583..       MOV     ?V0 + 3,DPH
   \   00024B   78..         MOV     R0,#?V0 + 2
   \   00024D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000250   78..         MOV     R0,#?V0 + 0
   \   000252   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000255   8A..         MOV     ?V0 + 0,R2
   \   000257   8B..         MOV     ?V0 + 1,R3
   \   000259   78..         MOV     R0,#?V0 + 0
   \   00025B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00025E   EC           MOV     A,R4
   \   00025F   F9           MOV     R1,A
   \   000260   EE           MOV     A,R6
   \   000261   FC           MOV     R4,A
   \   000262   EF           MOV     A,R7
   \   000263   FD           MOV     R5,A
   \   000264   7409         MOV     A,#0x9
   \   000266   12....       LCALL   ?XSTACK_DISP0_8
   \   000269   AA82         MOV     R2,DPL
   \   00026B   AB83         MOV     R3,DPH
   \   00026D   90....       MOV     DPTR,#(ZDP_EndDeviceBindReq & 0xffff)
   \   000270   74..         MOV     A,#((ZDP_EndDeviceBindReq >> 16) & 0xff)
   \   000272   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000275   7409         MOV     A,#0x9
   \   000277   12....       LCALL   ?DEALLOC_XSTACK8
   \   00027A   02....       LJMP    ??MT_ZdoCommandProcessing_0 & 0xFFFF
    327                }
    328                break;
    329          #endif
    330          
    331          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    332              case SPI_CMD_ZDO_BIND_REQ:
    333                // destination address
    334                devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_13:
   \   00027D   7408         MOV     A,#0x8
   \   00027F   12....       LCALL   ?XSTACK_DISP0_8
   \   000282   12....       LCALL   ?Subroutine4 & 0xFFFF
    335                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    336                pData += 2;
    337          
    338                MT_ReverseBytes( pData, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_11:
   \   000285   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    339                ptr = pData;       // SrcAddress
   \   000288   12....       LCALL   ?Subroutine3 & 0xFFFF
    340                pData += Z_EXTADDR_LEN;
    341          
    342                attr = *pData++;   // SrcEPInt
    343          
    344                cID = BUILD_UINT16( pData[1], pData[0]);      // ClusterID
    345                pData += 2;
    346                
    347                dstAddr.addrMode = *pData++;
   \                     ??CrossCallReturnLabel_9:
   \   00028B   C0E0         PUSH    A
   \   00028D   7411         MOV     A,#0x11
   \   00028F   12....       LCALL   ?XSTACK_DISP0_8
   \   000292   D0E0         POP     A
   \   000294   12....       LCALL   ?Subroutine25 & 0xFFFF
    348                if ( NLME_GetProtocolVersion() == ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_57:
   \   000297   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00029A   E9           MOV     A,R1
   \   00029B   6401         XRL     A,#0x1
   \   00029D   7008         JNZ     ??MT_ZdoCommandProcessing_23
    349                  dstAddr.addrMode = Addr64Bit;
   \   00029F   7411         MOV     A,#0x11
   \   0002A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A4   7403         MOV     A,#0x3
   \   0002A6   F0           MOVX    @DPTR,A
    350                
    351                MT_ReverseBytes( pData, Z_EXTADDR_LEN );
   \                     ??MT_ZdoCommandProcessing_23:
   \   0002A7                ; Setup parameters for call to function MT_ReverseBytes
   \   0002A7   7908         MOV     R1,#0x8
   \   0002A9   AA..         MOV     R2,?V0 + 4
   \   0002AB   AB..         MOV     R3,?V0 + 5
   \   0002AD   90....       MOV     DPTR,#(MT_ReverseBytes & 0xffff)
   \   0002B0   74..         MOV     A,#((MT_ReverseBytes >> 16) & 0xff)
   \   0002B2   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    352                if ( dstAddr.addrMode == Addr64Bit )
   \   0002B5   7411         MOV     A,#0x11
   \   0002B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   6403         XRL     A,#0x3
   \   0002BD   7017         JNZ     ??MT_ZdoCommandProcessing_24
    353                {
    354                  ptr1 = pData;      // DstAddress
    355                  osal_cpyExtAddr( dstAddr.addr.extAddr, ptr1 );
   \   0002BF                ; Setup parameters for call to function osal_cpyExtAddr
   \   0002BF   AC..         MOV     R4,?V0 + 4
   \   0002C1   AD..         MOV     R5,?V0 + 5
   \   0002C3   7409         MOV     A,#0x9
   \   0002C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C8   AA82         MOV     R2,DPL
   \   0002CA   AB83         MOV     R3,DPH
   \   0002CC   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   0002CF   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   0002D1   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0002D4   800B         SJMP    ??MT_ZdoCommandProcessing_25
    356                }
    357                else
    358                {
    359                  dstAddr.addr.shortAddr = BUILD_UINT16( pData[0], pData[1] ); 
   \                     ??MT_ZdoCommandProcessing_24:
   \   0002D6   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0002D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DC   E8           MOV     A,R0
   \   0002DD   F0           MOVX    @DPTR,A
   \   0002DE   A3           INC     DPTR
   \   0002DF   E9           MOV     A,R1
   \   0002E0   F0           MOVX    @DPTR,A
    360                }
    361                
    362                // The short address occupies lsb two bytes
    363                pData += Z_EXTADDR_LEN;
   \                     ??MT_ZdoCommandProcessing_25:
   \   0002E1   12....       LCALL   ?Subroutine24 & 0xFFFF
    364          
    365                
    366                attr1 = *pData++;  // DstEPInt
    367          
    368                x = *pData;        // SecuritySuite
    369               
    370          #if defined ( REFLECTOR )
    371                if ( devAddr.addr.shortAddr == _NIB.nwkDevAddress )
    372                {
    373          	ZDApp_BindReqCB( 0, &devAddr, ptr, attr, cID, &dstAddr, attr1, x );
    374                  ret = ZSuccess;
    375                }
    376                else
    377          #endif
    378                ret = (byte)ZDP_BindReq( &devAddr, ptr, attr, cID, &dstAddr, attr1, x );
   \                     ??CrossCallReturnLabel_55:
   \   0002E4   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0002E7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002EA   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0002ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002F0   740B         MOV     A,#0xb
   \   0002F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F5   8582..       MOV     ?V0 + 4,DPL
   \   0002F8   8583..       MOV     ?V0 + 5,DPH
   \   0002FB   78..         MOV     R0,#?V0 + 4
   \   0002FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000300   8E..         MOV     ?V0 + 4,R6
   \   000302   8F..         MOV     ?V0 + 5,R7
   \   000304   78..         MOV     R0,#?V0 + 4
   \   000306   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000309   78..         MOV     R0,#?V0 + 2
   \   00030B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00030E   A9..         MOV     R1,?V0 + 0
   \   000310   7408         MOV     A,#0x8
   \   000312   12....       LCALL   ?XSTACK_DISP0_8
   \   000315   AC82         MOV     R4,DPL
   \   000317   AD83         MOV     R5,DPH
   \   000319   7A21         MOV     R2,#0x21
   \                     ??MT_ZdoCommandProcessing_26:
   \   00031B   7B00         MOV     R3,#0x0
   \   00031D   90....       MOV     DPTR,#(ZDP_BindUnbindReq & 0xffff)
   \   000320   74..         MOV     A,#((ZDP_BindUnbindReq >> 16) & 0xff)
   \   000322   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
    379                break;
    380          #endif
    381          
    382          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    383              case SPI_CMD_ZDO_UNBIND_REQ:
    384                // destination address
    385                devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_14:
   \   000325   7408         MOV     A,#0x8
   \   000327   12....       LCALL   ?XSTACK_DISP0_8
   \   00032A   12....       LCALL   ?Subroutine4 & 0xFFFF
    386                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    387                pData += 2;
    388          
    389                MT_ReverseBytes( pData, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_12:
   \   00032D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    390                ptr = pData;       // SrcAddress
   \   000330   12....       LCALL   ?Subroutine3 & 0xFFFF
    391                pData += Z_EXTADDR_LEN;
    392          
    393                attr = *pData++;   // SrcEPInt
    394          
    395                cID = BUILD_UINT16( pData[1], pData[0]);      // ClusterID
    396                pData += 2;
    397          
    398                dstAddr.addrMode = *pData++;
   \                     ??CrossCallReturnLabel_10:
   \   000333   C0E0         PUSH    A
   \   000335   7411         MOV     A,#0x11
   \   000337   12....       LCALL   ?XSTACK_DISP0_8
   \   00033A   D0E0         POP     A
   \   00033C   12....       LCALL   ?Subroutine25 & 0xFFFF
    399                if ( NLME_GetProtocolVersion() == ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_58:
   \   00033F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000342   E9           MOV     A,R1
   \   000343   6401         XRL     A,#0x1
   \   000345   7008         JNZ     ??MT_ZdoCommandProcessing_27
    400                  dstAddr.addrMode = Addr64Bit;
   \   000347   7411         MOV     A,#0x11
   \   000349   12....       LCALL   ?XSTACK_DISP0_8
   \   00034C   7403         MOV     A,#0x3
   \   00034E   F0           MOVX    @DPTR,A
    401                MT_ReverseBytes( pData, Z_EXTADDR_LEN );
   \                     ??MT_ZdoCommandProcessing_27:
   \   00034F                ; Setup parameters for call to function MT_ReverseBytes
   \   00034F   7908         MOV     R1,#0x8
   \   000351   AA..         MOV     R2,?V0 + 4
   \   000353   AB..         MOV     R3,?V0 + 5
   \   000355   90....       MOV     DPTR,#(MT_ReverseBytes & 0xffff)
   \   000358   74..         MOV     A,#((MT_ReverseBytes >> 16) & 0xff)
   \   00035A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    402                if ( dstAddr.addrMode == Addr64Bit )
   \   00035D   7411         MOV     A,#0x11
   \   00035F   12....       LCALL   ?XSTACK_DISP0_8
   \   000362   E0           MOVX    A,@DPTR
   \   000363   6403         XRL     A,#0x3
   \   000365   7017         JNZ     ??MT_ZdoCommandProcessing_28
    403                {
    404                  ptr1 = pData;      // DstAddress
    405                  osal_cpyExtAddr( dstAddr.addr.extAddr, ptr1 );
   \   000367                ; Setup parameters for call to function osal_cpyExtAddr
   \   000367   AC..         MOV     R4,?V0 + 4
   \   000369   AD..         MOV     R5,?V0 + 5
   \   00036B   7409         MOV     A,#0x9
   \   00036D   12....       LCALL   ?XSTACK_DISP0_8
   \   000370   AA82         MOV     R2,DPL
   \   000372   AB83         MOV     R3,DPH
   \   000374   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   000377   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   000379   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00037C   800B         SJMP    ??MT_ZdoCommandProcessing_29
    406                }
    407                else
    408                {
    409                  dstAddr.addr.shortAddr = BUILD_UINT16( pData[0], pData[1] ); 
   \                     ??MT_ZdoCommandProcessing_28:
   \   00037E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000381   12....       LCALL   ?XSTACK_DISP0_8
   \   000384   E8           MOV     A,R0
   \   000385   F0           MOVX    @DPTR,A
   \   000386   A3           INC     DPTR
   \   000387   E9           MOV     A,R1
   \   000388   F0           MOVX    @DPTR,A
    410                }      
    411                pData += Z_EXTADDR_LEN;
   \                     ??MT_ZdoCommandProcessing_29:
   \   000389   12....       LCALL   ?Subroutine24 & 0xFFFF
    412          
    413                attr1 = *pData++;  // DstEPInt
    414          
    415                x = *pData;        // SecuritySuite
    416          
    417          #if defined ( REFLECTOR )
    418                if ( devAddr.addr.shortAddr == _NIB.nwkDevAddress )
    419                {
    420                  ZDApp_UnbindReqCB( 0, &devAddr, ptr, attr, cID, &dstAddr, attr1, x );
    421                  ret = ZSuccess;
    422                }
    423                else
    424          #endif
    425                {
    426                  ret = (byte)ZDP_UnbindReq( &devAddr, ptr, attr, cID, &dstAddr, attr1, x );
   \                     ??CrossCallReturnLabel_56:
   \   00038C   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00038F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000392   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000395   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000398   740B         MOV     A,#0xb
   \   00039A   12....       LCALL   ?XSTACK_DISP0_8
   \   00039D   8582..       MOV     ?V0 + 4,DPL
   \   0003A0   8583..       MOV     ?V0 + 5,DPH
   \   0003A3   78..         MOV     R0,#?V0 + 4
   \   0003A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003A8   8E..         MOV     ?V0 + 4,R6
   \   0003AA   8F..         MOV     ?V0 + 5,R7
   \   0003AC   78..         MOV     R0,#?V0 + 4
   \   0003AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003B1   78..         MOV     R0,#?V0 + 2
   \   0003B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003B6   A9..         MOV     R1,?V0 + 0
   \   0003B8   7408         MOV     A,#0x8
   \   0003BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0003BD   AC82         MOV     R4,DPL
   \   0003BF   AD83         MOV     R5,DPH
   \   0003C1   7A22         MOV     R2,#0x22
   \   0003C3   02....       LJMP    ??MT_ZdoCommandProcessing_26 & 0xFFFF
    427                }
    428                break;
    429          #endif
    430          
    431          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    432              case SPI_CMD_ZDO_MGMT_NWKDISC_REQ:
    433                devAddr.addrMode = Addr16Bit;
    434                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    435                pData += 2;
    436                scanChans = BUILD_UINT32( pData[3], pData[2], pData[1], pData[0] );
    437                ret = (byte)ZDP_MgmtNwkDiscReq( &devAddr, scanChans, pData[4], pData[5], false );
    438                break;
    439          #endif
    440          
    441          #if defined ( ZDO_MGMT_LQI_REQUEST )
    442              case SPI_CMD_ZDO_MGMT_LQI_REQ:
    443                devAddr.addrMode = Addr16Bit;
    444                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    445                ret = (byte)ZDP_MgmtLqiReq( &devAddr, pData[2], false );
    446                break;
    447          #endif
    448          
    449          #if defined ( ZDO_MGMT_RTG_REQUEST )
    450              case SPI_CMD_ZDO_MGMT_RTG_REQ:
    451                devAddr.addrMode = Addr16Bit;
    452                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    453                ret = (byte)ZDP_MgmtRtgReq( &devAddr, pData[2], false );
    454                break;
    455          #endif
    456          
    457          #if defined ( ZDO_MGMT_BIND_REQUEST )
    458              case SPI_CMD_ZDO_MGMT_BIND_REQ:
    459                devAddr.addrMode = Addr16Bit;
    460                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    461                ret = (byte)ZDP_MgmtBindReq( &devAddr, pData[2], false );
    462                break;
    463          #endif
    464          
    465          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    466              case SPI_CMD_ZDO_MGMT_DIRECT_JOIN_REQ:
    467                devAddr.addrMode = Addr16Bit;
    468                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    469                MT_ReverseBytes( &pData[2], Z_EXTADDR_LEN );
    470                ret = (byte)ZDP_MgmtDirectJoinReq( &devAddr,
    471                                         &pData[2],
    472                                         pData[2 + Z_EXTADDR_LEN],
    473                                         false );
    474                break;
    475          #endif
    476          
    477          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    478              case SPI_CMD_ZDO_MGMT_LEAVE_REQ:
    479                devAddr.addrMode = Addr16Bit;
    480                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    481                MT_ReverseBytes( &pData[2], Z_EXTADDR_LEN );
    482                ret = (byte)ZDP_MgmtLeaveReq( &devAddr, &pData[2], false );
    483                break;
    484          #endif
    485          
    486          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    487              case SPI_CMD_ZDO_MGMT_PERMIT_JOIN_REQ:
    488                devAddr.addrMode = Addr16Bit;
    489                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    490                ret = (byte)ZDP_MgmtPermitJoinReq( &devAddr, pData[2], pData[3], false );
    491                break;
    492          #endif
    493          
    494          
    495          #if defined ( ZDO_USERDESCSET_REQUEST )
    496              case SPI_CMD_ZDO_USER_DESC_SET:
    497                // destination address
    498                devAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoCommandProcessing_15:
   \   0003C6   7408         MOV     A,#0x8
   \   0003C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CB   12....       LCALL   ?Subroutine2 & 0xFFFF
    499                devAddr.addr.shortAddr = BUILD_UINT16( pData[1], pData[0] );
    500                pData += 2;
    501          
    502                // Network address of interest
    503                shortAddr = BUILD_UINT16( pData[1], pData[0] );
   \                     ??CrossCallReturnLabel_8:
   \   0003CE   F8           MOV     R0,A
   \   0003CF   E4           CLR     A
   \   0003D0   C8           XCH     A,R0
   \   0003D1   12....       LCALL   ?Subroutine22 & 0xFFFF
    504                pData += 2;
   \                     ??CrossCallReturnLabel_54:
   \   0003D4   F5..         MOV     ?V0 + 5,A
    505          
    506                // User descriptor
    507                userDesc.len = *pData++;
   \   0003D6   85..82       MOV     DPL,?V0 + 4
   \   0003D9   F583         MOV     DPH,A
   \   0003DB   E0           MOVX    A,@DPTR
   \   0003DC   C0E0         PUSH    A
   \   0003DE   7412         MOV     A,#0x12
   \   0003E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E3   D0E0         POP     A
   \   0003E5   12....       LCALL   ?Subroutine47 & 0xFFFF
    508                osal_memcpy( userDesc.desc, pData, userDesc.len );
   \                     ??CrossCallReturnLabel_117:
   \   0003E8                ; Setup parameters for call to function osal_memcpy
   \   0003E8   85....       MOV     ?V0 + 0,?V0 + 4
   \   0003EB   85....       MOV     ?V0 + 1,?V0 + 5
   \   0003EE   88..         MOV     ?V0 + 2,R0
   \   0003F0   78..         MOV     R0,#?V0 + 0
   \   0003F2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003F5   7415         MOV     A,#0x15
   \   0003F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FA   E0           MOVX    A,@DPTR
   \   0003FB   FC           MOV     R4,A
   \   0003FC   7D00         MOV     R5,#0x0
   \   0003FE   7416         MOV     A,#0x16
   \   000400   12....       LCALL   ?XSTACK_DISP0_8
   \   000403   AA82         MOV     R2,DPL
   \   000405   AB83         MOV     R3,DPH
   \   000407   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   00040A   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   00040C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00040F   7403         MOV     A,#0x3
   \   000411   12....       LCALL   ?DEALLOC_XSTACK8
    509                pData += 16;  // len of user desc
    510          
    511                ret =(byte)ZDP_UserDescSet( &devAddr, shortAddr, &userDesc, pData[0] );
   \   000414                ; Setup parameters for call to function ZDP_UserDescSet
   \   000414   7412         MOV     A,#0x12
   \   000416   12....       LCALL   ?XSTACK_DISP0_8
   \   000419   8582..       MOV     ?V0 + 0,DPL
   \   00041C   8583..       MOV     ?V0 + 1,DPH
   \   00041F   78..         MOV     R0,#?V0 + 0
   \   000421   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000424   E5..         MOV     A,?V0 + 4
   \   000426   2410         ADD     A,#0x10
   \   000428   F582         MOV     DPL,A
   \   00042A   E5..         MOV     A,?V0 + 5
   \   00042C   3400         ADDC    A,#0x0
   \   00042E   F583         MOV     DPH,A
   \   000430   E0           MOVX    A,@DPTR
   \   000431   F9           MOV     R1,A
   \   000432   EE           MOV     A,R6
   \   000433   FC           MOV     R4,A
   \   000434   EF           MOV     A,R7
   \   000435   FD           MOV     R5,A
   \   000436   7402         MOV     A,#0x2
   \   000438   12....       LCALL   ?XSTACK_DISP0_8
   \   00043B   AA82         MOV     R2,DPL
   \   00043D   AB83         MOV     R3,DPH
   \   00043F   90....       MOV     DPTR,#(ZDP_UserDescSet & 0xffff)
   \   000442   74..         MOV     A,#((ZDP_UserDescSet >> 16) & 0xff)
   \   000444   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000447   7402         MOV     A,#0x2
   \   000449   12....       LCALL   ?DEALLOC_XSTACK8
   \   00044C   802D         SJMP    ??MT_ZdoCommandProcessing_0
    512                break;
    513          #endif
    514          
    515          #if defined ( ZDO_ENDDEVICE_ANNCE_REQUEST )
    516              case SPI_CMD_ZDO_END_DEV_ANNCE:
    517                // network address
    518                shortAddr = BUILD_UINT16( pData[1], pData[0] );
    519                pData += 2;
    520          
    521                // extended address
    522                ptr = pData;
    523                MT_ReverseBytes( ptr, Z_EXTADDR_LEN );
    524                pData += Z_EXTADDR_LEN;
    525          
    526                // security
    527                attr = *pData++;
    528          
    529                ret = (byte)ZDP_EndDeviceAnnce( shortAddr, ptr, *pData, attr );
    530                break;
    531          #endif
    532          
    533          #if defined (ZDO_SERVERDISC_REQUEST )
    534              case SPI_CMD_ZDO_SERVERDISC_REQ:
    535                
    536                // Service Mask
    537                uAttr = BUILD_UINT16( pData[1], pData[0] );
    538                pData += 2;
    539                attr = *pData++; // Security suite
    540                
    541                ret = (byte) ZDP_ServerDiscReq( uAttr, attr );
   \                     ??MT_ZdoCommandProcessing_16:
   \   00044E                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   00044E   8C82         MOV     DPL,R4
   \   000450   8D83         MOV     DPH,R5
   \   000452   A3           INC     DPTR
   \   000453   A3           INC     DPTR
   \   000454   E0           MOVX    A,@DPTR
   \   000455   F9           MOV     R1,A
   \   000456   8C82         MOV     DPL,R4
   \   000458   8D83         MOV     DPH,R5
   \   00045A   A3           INC     DPTR
   \   00045B   E0           MOVX    A,@DPTR
   \   00045C   FC           MOV     R4,A
   \   00045D   85..82       MOV     DPL,?V0 + 4
   \   000460   8D83         MOV     DPH,R5
   \   000462   E0           MOVX    A,@DPTR
   \   000463   FB           MOV     R3,A
   \   000464   E4           CLR     A
   \   000465   2C           ADD     A,R4
   \   000466   FA           MOV     R2,A
   \   000467   EB           MOV     A,R3
   \   000468   3400         ADDC    A,#0x0
   \   00046A   FB           MOV     R3,A
   \   00046B   90....       MOV     DPTR,#(ZDP_ServerDiscReq & 0xffff)
   \   00046E   74..         MOV     A,#((ZDP_ServerDiscReq >> 16) & 0xff)
   \   000470   8006         SJMP    ??MT_ZdoCommandProcessing_19
    542                break;
    543          #endif
    544                
    545          #if defined (ZDO_NETWORKSTART_REQUEST )
    546              case SPI_CMD_ZDO_NETWORK_START_REQ:
    547                ret = ZDApp_StartUpFromApp( ZDAPP_STARTUP_AUTO );
   \                     ??MT_ZdoCommandProcessing_17:
   \   000472                ; Setup parameters for call to function ZDApp_StartUpFromApp
   \   000472   19           DEC     R1
   \   000473   90....       MOV     DPTR,#(ZDApp_StartUpFromApp & 0xffff)
   \   000476   74..         MOV     A,#((ZDApp_StartUpFromApp >> 16) & 0xff)
   \                     ??MT_ZdoCommandProcessing_19:
   \   000478   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    548                break;
    549              
    550          #endif
    551              
    552              default:
    553                break;
    554            }
    555          
    556            MT_SendSPIRespMsg( ret, cmd_id, len, respLen );
   \                     ??MT_ZdoCommandProcessing_0:
   \   00047B                ; Setup parameters for call to function MT_SendSPIRespMsg
   \   00047B   7D01         MOV     R5,#0x1
   \   00047D   7C06         MOV     R4,#0x6
   \   00047F   AA..         MOV     R2,?V0 + 6
   \   000481   AB..         MOV     R3,?V0 + 7
   \   000483   90....       MOV     DPTR,#(MT_SendSPIRespMsg & 0xffff)
   \   000486   74..         MOV     A,#((MT_SendSPIRespMsg >> 16) & 0xff)
   \   000488   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    557          }
   \   00048B   7463         MOV     A,#0x63
   \   00048D   02....       LJMP    ?Subroutine57 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000003                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000003   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000006   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 4
   \   000004   85..83       MOV     DPH,?V0 + 5
   \   000007                REQUIRE ?Subroutine58
   \   000007                ; // Fall through to label ?Subroutine58

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   A3           INC     DPTR
   \   000001   8582..       MOV     ?V0 + 4,DPL
   \   000004   8583..       MOV     ?V0 + 5,DPH
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   F5..         MOV     ?V0 + 5,A
   \   000005                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000005                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000005   85..82       MOV     DPL,?V0 + 4
   \   000008   F583         MOV     DPH,A
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F9           MOV     R1,A
   \   000001   E4           CLR     A
   \   000002   2A           ADD     A,R2
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2402         ADD     A,#0x2
   \   000004                REQUIRE ?Subroutine60
   \   000004                ; // Fall through to label ?Subroutine60

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   E5..         MOV     A,?V0 + 5
   \   000004   3400         ADDC    A,#0x0
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 3
   \                     ??Subroutine21_0:
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00000D   F5..         MOV     ?V0 + 5,A
   \   00000F   05..         INC     ?V0 + 1
   \   000011   E5..         MOV     A,?V0 + 1
   \   000013   C3           CLR     C
   \   000014   9410         SUBB    A,#0x10
   \   000016   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009                REQUIRE ?Subroutine59
   \   000009                ; // Fall through to label ?Subroutine59

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   A3           INC     DPTR
   \   000009   8582..       MOV     ?V0 + 4,DPL
   \   00000C   8583..       MOV     ?V0 + 5,DPH
   \   00000F   75..00       MOV     ?V0 + 1,#0x0
   \   000012   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \                     ??Subroutine14_0:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 1,A
   \   000009   78..         MOV     R0,#?V0 + 1
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   E4           CLR     A
   \   00000C   2A           ADD     A,R2
   \   00000D   F8           MOV     R0,A
   \   00000E   E9           MOV     A,R1
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F9           MOV     R1,A
   \   000012   7409         MOV     A,#0x9
   \   000014   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   FD           MOV     R5,A
   \   000004   85..82       MOV     DPL,?V0 + 4
   \   000007   85..83       MOV     DPH,?V0 + 5
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FC           MOV     R4,A
   \   00000C   A9..         MOV     R1,?V0 + 0
   \   00000E   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   7423         MOV     A,#0x23
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   85..82       MOV     DPL,?V0 + 4
   \   00000C   85..83       MOV     DPH,?V0 + 5
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 3,A
   \   000012   E4           CLR     A
   \   000013   28           ADD     A,R0
   \   000014   F5..         MOV     ?V0 + 2,A
   \   000016   E5..         MOV     A,?V0 + 3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F5..         MOV     ?V0 + 3,A
   \   00001C   E5..         MOV     A,?V0 + 1
   \   00001E   C3           CLR     C
   \   00001F   33           RLC     A
   \   000020   F8           MOV     R0,A
   \   000021   E4           CLR     A
   \   000022   33           RLC     A
   \   000023   F9           MOV     R1,A
   \   000024   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   FA           MOV     R2,A
   \   000001   85..82       MOV     DPL,?V0 + 4
   \   000004   85..83       MOV     DPH,?V0 + 5
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   C8           XCH     A,R0
   \   00000B   F9           MOV     R1,A
   \   00000C   E4           CLR     A
   \   00000D   2A           ADD     A,R2
   \   00000E   E9           MOV     A,R1
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FB           MOV     R3,A
   \   000012   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000015   85..82       MOV     DPL,?V0 + 4
   \   000018   F583         MOV     DPH,A
   \   00001A   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00001D   88..         MOV     ?V0 + 1,R0
   \   00001F   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003                ; Setup parameters for call to function MT_ReverseBytes
   \   000003                ; Setup parameters for call to function MT_ReverseBytes
   \   000003   7908         MOV     R1,#0x8
   \   000005   AA..         MOV     R2,?V0 + 4
   \   000007   FB           MOV     R3,A
   \   000008   90....       MOV     DPTR,#(MT_ReverseBytes & 0xffff)
   \   00000B   74..         MOV     A,#((MT_ReverseBytes >> 16) & 0xff)
   \   00000D   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85....       MOV     ?V0 + 2,?V0 + 4
   \   000003   85....       MOV     ?V0 + 3,?V0 + 5
   \   000006   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000009   85..82       MOV     DPL,?V0 + 4
   \   00000C   F583         MOV     DPH,A
   \   00000E   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000011   FA           MOV     R2,A
   \   000012   85..82       MOV     DPL,?V0 + 4
   \   000015   85..83       MOV     DPH,?V0 + 5
   \   000018   E0           MOVX    A,@DPTR
   \   000019   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2408         ADD     A,#0x8
   \   000004   02....       LJMP    ?Subroutine60 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000003                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   02....       LJMP    ?Subroutine58 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   85..82       MOV     DPL,?V0 + 4
   \   000006   F583         MOV     DPH,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FA           MOV     R2,A
   \   00000B   02....       LJMP    ?Subroutine59 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F9           MOV     R1,A
   \   000001   E4           CLR     A
   \   000002   2A           ADD     A,R2
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00000B   F5..         MOV     ?V0 + 5,A
   \   00000D                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   00000D   85..82       MOV     DPL,?V0 + 4
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003   85..82       MOV     DPL,?V0 + 4
   \   000006   F583         MOV     DPH,A
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000006   F8           MOV     R0,A
   \   000007   E9           MOV     A,R1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F9           MOV     R1,A
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   E8           MOV     A,R0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   E9           MOV     A,R1
   \   000015   F0           MOVX    @DPTR,A
   \   000016   EC           MOV     A,R4
   \   000017   2402         ADD     A,#0x2
   \   000019   F5..         MOV     ?V0 + 4,A
   \   00001B   ED           MOV     A,R5
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   F5..         MOV     ?V0 + 5,A
   \   000020   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FA           MOV     R2,A
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   2A           ADD     A,R2
   \   00000F   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine57_0:
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    558          
    559          /*********************************************************************
    560           * Utility FUNCTIONS
    561           */
    562          
    563          /*********************************************************************
    564           * @fn      zdo_MT_CopyRevExtAddr
    565           *
    566           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    567          byte *zdo_MT_CopyRevExtAddr( byte *dstMsg, byte *addr )
   \                     zdo_MT_CopyRevExtAddr:
    568          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    569            // Copy the 64-bit address
    570            osal_cpyExtAddr( dstMsg, addr );
   \   000009                ; Setup parameters for call to function osal_cpyExtAddr
   \   000009   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   00000C   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   00000E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    571            // Reverse byte order
    572            MT_ReverseBytes( dstMsg, Z_EXTADDR_LEN );
   \   000011                ; Setup parameters for call to function MT_ReverseBytes
   \   000011   7908         MOV     R1,#0x8
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   90....       MOV     DPTR,#(MT_ReverseBytes & 0xffff)
   \   00001A   74..         MOV     A,#((MT_ReverseBytes >> 16) & 0xff)
   \   00001C                REQUIRE ?Subroutine63
   \   00001C                ; // Fall through to label ?Subroutine63
    573            // Return ptr to next destination location
    574            return ( dstMsg + Z_EXTADDR_LEN );
    575          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000003   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000006   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EE           MOV     A,R6
   \   000001   2408         ADD     A,#0x8
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   7F01         MOV     R7,#0x1
   \   00000A   22           RET
    576          
    577          /*********************************************************************
    578           * @fn      zdo_MT_MakeExtAddr
    579           *
    580           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    581          byte *zdo_MT_MakeExtAddr( zAddrType_t *devAddr, byte *pData )
   \                     zdo_MT_MakeExtAddr:
    582          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    583            // Define a 64-bit address
    584            devAddr->addrMode = Addr64Bit;
   \   000009   7403         MOV     A,#0x3
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    585            // Copy and reverse the 64-bit address
    586            zdo_MT_CopyRevExtAddr( devAddr->addr.extAddr, pData );
   \   000018                ; Setup parameters for call to function zdo_MT_CopyRevExtAddr
   \   000018   90....       MOV     DPTR,#(zdo_MT_CopyRevExtAddr & 0xffff)
   \   00001B   74..         MOV     A,#((zdo_MT_CopyRevExtAddr >> 16) & 0xff)
   \   00001D   80..         SJMP    ?Subroutine63
    587            // Return ptr to next destination location
    588            return ( pData + Z_EXTADDR_LEN );
    589          }
    590          
    591          /*********************************************************************
    592           * CALLBACK FUNCTIONS
    593           */
    594          
    595          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST )
    596          /*********************************************************************
    597           * @fn      zdo_MTCB_NwkIEEEAddrRspCB
    598           *
    599           * @brief
    600           *
    601           *   Called by ZDO when a NWK_addr_rsp message is received.
    602           *
    603           * @param  SrcAddr  - Source address
    604           * @param  Status - response status
    605           * @param  IEEEAddr - 64 bit IEEE address of device
    606           * @param  nwkAddr - 16 bit network address of device
    607           * @param  NumAssocDev - number of associated devices to reporting device
    608           * @param  AssocDevList - array short addresses of associated devices
    609           *
    610           * @return  none
    611           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    612          void zdo_MTCB_NwkIEEEAddrRspCB( uint16 type, zAddrType_t *SrcAddr, byte Status,
   \                     zdo_MTCB_NwkIEEEAddrRspCB:
    613                                         byte *IEEEAddr, uint16 nwkAddr, byte NumAssocDev,
    614                                         byte StartIndex, uint16 *AssocDevList )
    615          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E9           MOV     A,R1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8C..         MOV     ?V0 + 6,R4
   \   00001E   8D..         MOV     ?V0 + 7,R5
   \   000020   7415         MOV     A,#0x15
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FE           MOV     R6,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FF           MOV     R7,A
    616            byte *pBuf;
    617            byte *msg;
    618            byte len;
    619            byte x;
    620          
    621            /*Allocate a message of size equivalent to the corresponding SPI message
    622            (plus a couple of bytes for MT use)so that the same buffer can be sent by
    623            MT to the test tool by simply setting the header bytes.*/
    624          
    625            /*In order to allocate the message , we need to know the length and this
    626            has to be calculated before we allocate the message*/
    627          
    628            if ( type == SPI_CB_ZDO_NWK_ADDR_RSP )
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6480         XRL     A,#0x80
   \   000033   7004         JNZ     ??zdo_MTCB_NwkIEEEAddrRspCB_0
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   640A         XRL     A,#0xa
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_0:
   \   000039   7005         JNZ     ??zdo_MTCB_NwkIEEEAddrRspCB_1
    629            {
    630              len = 1 + Z_EXTADDR_LEN +  1 + Z_EXTADDR_LEN + 2 + 1 + 1 + (2*8);
   \   00003B   75..26       MOV     ?V0 + 0,#0x26
   \   00003E   8003         SJMP    ??zdo_MTCB_NwkIEEEAddrRspCB_2
    631                // Addrmode + SrcAddr + Status + IEEEAddr + nwkAddr + NumAssocDev + StartIndex
    632            }
    633            else
    634            {
    635              len = 1 + Z_EXTADDR_LEN +  1 + Z_EXTADDR_LEN + 1 + 1 + (2*8);
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_1:
   \   000040   75..24       MOV     ?V0 + 0,#0x24
    636                // Addrmode + SrcAddr + Status + IEEEAddr + NumAssocDev + StartIndex
    637            }
    638          
    639            pBuf = osal_mem_alloc( len );
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_2:
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   AA..         MOV     R2,?V0 + 0
   \   000045   7B00         MOV     R3,#0x0
   \   000047   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   00004A   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   00004C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004F   8A..         MOV     ?V0 + 2,R2
   \   000051   8B..         MOV     ?V0 + 3,R3
    640          
    641            if ( pBuf )
   \   000053   EA           MOV     A,R2
   \   000054   7001         JNZ     ??zdo_MTCB_NwkIEEEAddrRspCB_3
   \   000056   EB           MOV     A,R3
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_3:
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??zdo_MTCB_NwkIEEEAddrRspCB_4 & 0xFFFF
    642            {
    643              msg = pBuf;
    644          
    645              //First fill in details
    646              if ( SrcAddr->addrMode == Addr16Bit )
   \   00005C   85..82       MOV     DPL,?V0 + 6
   \   00005F   85..83       MOV     DPH,?V0 + 7
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6402         XRL     A,#0x2
   \   00006D   702C         JNZ     ??zdo_MTCB_NwkIEEEAddrRspCB_5
    647              {
    648                *msg++ = Addr16Bit;
   \   00006F   7402         MOV     A,#0x2
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   12....       LCALL   ?Subroutine29 & 0xFFFF
    649                for ( x = 0; x < (Z_EXTADDR_LEN - 2); x++ )
   \                     ??CrossCallReturnLabel_131:
   \   000078   7A06         MOV     R2,#0x6
    650                  *msg++ = 0;
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_6:
   \   00007A   E4           CLR     A
   \   00007B   8882         MOV     DPL,R0
   \   00007D   8983         MOV     DPH,R1
   \   00007F   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000082   1A           DEC     R2
   \   000083   EA           MOV     A,R2
   \   000084   70F4         JNZ     ??zdo_MTCB_NwkIEEEAddrRspCB_6
    651                *msg++ = HI_UINT16( SrcAddr->addr.shortAddr );
   \   000086   85..82       MOV     DPL,?V0 + 6
   \   000089   85..83       MOV     DPH,?V0 + 7
   \   00008C   A3           INC     DPTR
   \   00008D   12....       LCALL   ?Subroutine9 & 0xFFFF
    652                *msg++ = LO_UINT16( SrcAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_21:
   \   000090   85..82       MOV     DPL,?V0 + 6
   \   000093   85..83       MOV     DPH,?V0 + 7
   \   000096   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000099   8020         SJMP    ??zdo_MTCB_NwkIEEEAddrRspCB_7
    653              }
    654              else
    655              {
    656                *msg++ = Addr64Bit;
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_5:
   \   00009B   7403         MOV     A,#0x3
   \   00009D   8A82         MOV     DPL,R2
   \   00009F   8B83         MOV     DPH,R3
   \   0000A1   F0           MOVX    @DPTR,A
    657                msg = zdo_MT_CopyRevExtAddr( msg, SrcAddr->addr.extAddr );
   \   0000A2                ; Setup parameters for call to function zdo_MT_CopyRevExtAddr
   \   0000A2   AC..         MOV     R4,?V0 + 6
   \   0000A4   AD..         MOV     R5,?V0 + 7
   \   0000A6   A3           INC     DPTR
   \   0000A7   AA82         MOV     R2,DPL
   \   0000A9   AB83         MOV     R3,DPH
   \   0000AB   90....       MOV     DPTR,#(zdo_MT_CopyRevExtAddr & 0xffff)
   \   0000AE   74..         MOV     A,#((zdo_MT_CopyRevExtAddr >> 16) & 0xff)
   \   0000B0   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000B3   8A..         MOV     ?V0 + 4,R2
   \   0000B5   8B..         MOV     ?V0 + 5,R3
   \   0000B7   A8..         MOV     R0,?V0 + 4
   \   0000B9   A9..         MOV     R1,?V0 + 5
    658              }
    659          
    660              *msg++ = Status;
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_7:
   \   0000BB   7402         MOV     A,#0x2
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL   ?Subroutine42 & 0xFFFF
    661              msg = zdo_MT_CopyRevExtAddr( msg, IEEEAddr );
   \                     ??CrossCallReturnLabel_94:
   \   0000C3                ; Setup parameters for call to function zdo_MT_CopyRevExtAddr
   \   0000C3   7413         MOV     A,#0x13
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FC           MOV     R4,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FD           MOV     R5,A
   \   0000CD   8882         MOV     DPL,R0
   \   0000CF   8983         MOV     DPH,R1
   \   0000D1   A3           INC     DPTR
   \   0000D2   AA82         MOV     R2,DPL
   \   0000D4   AB83         MOV     R3,DPH
   \   0000D6   90....       MOV     DPTR,#(zdo_MT_CopyRevExtAddr & 0xffff)
   \   0000D9   74..         MOV     A,#((zdo_MT_CopyRevExtAddr >> 16) & 0xff)
   \   0000DB   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000DE   8A..         MOV     ?V0 + 4,R2
   \   0000E0   8B..         MOV     ?V0 + 5,R3
   \   0000E2   A8..         MOV     R0,?V0 + 4
   \   0000E4   A9..         MOV     R1,?V0 + 5
    662          
    663              if ( type == SPI_CB_ZDO_NWK_ADDR_RSP )
   \   0000E6   85..82       MOV     DPL,?XSP + 0
   \   0000E9   85..83       MOV     DPH,?XSP + 1
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   6480         XRL     A,#0x80
   \   0000EF   7004         JNZ     ??zdo_MTCB_NwkIEEEAddrRspCB_8
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   640A         XRL     A,#0xa
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_8:
   \   0000F5   700B         JNZ     ??CrossCallReturnLabel_133
    664              {
    665                *msg++ = HI_UINT16( nwkAddr );
   \   0000F7   EF           MOV     A,R7
   \   0000F8   8882         MOV     DPL,R0
   \   0000FA   8983         MOV     DPH,R1
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   A3           INC     DPTR
    666                *msg++ = LO_UINT16( nwkAddr );
   \   0000FE   EE           MOV     A,R6
   \   0000FF   12....       LCALL   ?Subroutine29 & 0xFFFF
    667              }
    668          
    669              *msg++ = NumAssocDev;
   \                     ??CrossCallReturnLabel_133:
   \   000102   7417         MOV     A,#0x17
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   12....       LCALL   ?Subroutine17 & 0xFFFF
    670              *msg++ = StartIndex;
   \                     ??CrossCallReturnLabel_129:
   \   00010A   7418         MOV     A,#0x18
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   12....       LCALL   ?Subroutine9 & 0xFFFF
    671              byte cnt = NumAssocDev - StartIndex;
   \                     ??CrossCallReturnLabel_23:
   \   000112   7418         MOV     A,#0x18
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   E0           MOVX    A,@DPTR
   \   000118   FA           MOV     R2,A
   \   000119   7417         MOV     A,#0x17
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   C3           CLR     C
   \   000120   9A           SUBB    A,R2
   \   000121   FD           MOV     R5,A
    672          
    673              for ( x = 0; x < 8; x++ )
   \   000122   7C00         MOV     R4,#0x0
    674              {
    675                if ( x < cnt )
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_9:
   \   000124   EC           MOV     A,R4
   \   000125   C3           CLR     C
   \   000126   9D           SUBB    A,R5
   \   000127   5031         JNC     ??zdo_MTCB_NwkIEEEAddrRspCB_10
    676                {
    677                  *msg++ = HI_UINT16( *AssocDevList );
   \   000129   7419         MOV     A,#0x19
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000131   A3           INC     DPTR
   \   000132   12....       LCALL   ?Subroutine17 & 0xFFFF
    678                  *msg++ = LO_UINT16( *AssocDevList );
   \                     ??CrossCallReturnLabel_130:
   \   000135   7419         MOV     A,#0x19
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00013D   12....       LCALL   ?Subroutine9 & 0xFFFF
    679                  AssocDevList++;
   \                     ??CrossCallReturnLabel_24:
   \   000140   7419         MOV     A,#0x19
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   E0           MOVX    A,@DPTR
   \   000146   2402         ADD     A,#0x2
   \   000148   FA           MOV     R2,A
   \   000149   A3           INC     DPTR
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   3400         ADDC    A,#0x0
   \   00014D   FB           MOV     R3,A
   \   00014E   7419         MOV     A,#0x19
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   EA           MOV     A,R2
   \   000154   F0           MOVX    @DPTR,A
   \   000155   A3           INC     DPTR
   \   000156   EB           MOV     A,R3
   \   000157   F0           MOVX    @DPTR,A
   \   000158   800A         SJMP    ??CrossCallReturnLabel_134
    680                }
    681                else
    682                {
    683                  *msg++ = 0;
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_10:
   \   00015A   E4           CLR     A
   \   00015B   8882         MOV     DPL,R0
   \   00015D   8983         MOV     DPH,R1
   \   00015F   F0           MOVX    @DPTR,A
   \   000160   A3           INC     DPTR
    684                  *msg++ = 0;
   \   000161   12....       LCALL   ?Subroutine29 & 0xFFFF
    685                }
    686              }
   \                     ??CrossCallReturnLabel_134:
   \   000164   0C           INC     R4
   \   000165   EC           MOV     A,R4
   \   000166   C3           CLR     C
   \   000167   9408         SUBB    A,#0x8
   \   000169   40B9         JC      ??zdo_MTCB_NwkIEEEAddrRspCB_9
    687          
    688              MT_BuildAndSendZToolCB( type, len, pBuf );
   \   00016B                ; Setup parameters for call to function MT_BuildAndSendZToolCB
   \   00016B   AC..         MOV     R4,?V0 + 2
   \   00016D   AD..         MOV     R5,?V0 + 3
   \   00016F   A9..         MOV     R1,?V0 + 0
   \   000171   85..82       MOV     DPL,?XSP + 0
   \   000174   85..83       MOV     DPH,?XSP + 1
   \   000177   E0           MOVX    A,@DPTR
   \   000178   FA           MOV     R2,A
   \   000179   A3           INC     DPTR
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   FB           MOV     R3,A
   \   00017C   90....       MOV     DPTR,#(MT_BuildAndSendZToolCB & 0xffff)
   \   00017F   74..         MOV     A,#((MT_BuildAndSendZToolCB >> 16) & 0xff)
   \   000181   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    689          
    690              osal_mem_free( pBuf );
   \   000184                ; Setup parameters for call to function osal_mem_free
   \   000184   AA..         MOV     R2,?V0 + 2
   \   000186   AB..         MOV     R3,?V0 + 3
   \   000188   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   00018B   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   00018D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    691            }
    692          }
   \                     ??zdo_MTCB_NwkIEEEAddrRspCB_4:
   \   000190   7403         MOV     A,#0x3
   \   000192   02....       LJMP    ?Subroutine57 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ?Subroutine61
   \   000001                ; // Fall through to label ?Subroutine61

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   A3           INC     DPTR
   \   000001   A882         MOV     R0,DPL
   \   000003   A983         MOV     R1,DPH
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   80..         SJMP    ?Subroutine61

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   A3           INC     DPTR
   \   000004   08           INC     R0
   \   000005   A983         MOV     R1,DPH
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    693          #endif // ZDO_NWKADDR_REQUEST || ZDO_IEEEADDR_REQUEST
    694          
    695          #if defined ( ZDO_NODEDESC_REQUEST )
    696          /*********************************************************************
    697           * @fn      zdo_MTCB_NodeDescRspCB()
    698           *
    699           * @brief
    700           *
    701           *   Called by ZDO when a Node_Desc_rsp message is received.
    702           *
    703           * @param  SrcAddr  - Source address
    704           * @param  Status - response status
    705           * @param  nwkAddr - 16 bit network address of device
    706           * @param  pNodeDesc - pointer to the devices Node Descriptor
    707           *                     NULL if Status != ZDP_SUCCESS
    708           *
    709           * @return  none
    710           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    711          void zdo_MTCB_NodeDescRspCB( zAddrType_t *SrcAddr, byte Status, uint16 nwkAddr,
   \                     zdo_MTCB_NodeDescRspCB:
    712                                       NodeDescriptorFormat_t *pNodeDesc )
    713          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   741B         MOV     A,#0x1b
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine11 & 0xFFFF
    714            byte buf[18];
    715            byte *msg;
    716          
    717            msg = buf;
    718          
    719            //Fill up the data bytes
    720            *msg++ = Status;
    721            *msg++ = HI_UINT16( SrcAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_27:
   \   000014   C0E0         PUSH    A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   D0E0         POP     A
   \   00001D   12....       LCALL   ?Subroutine31 & 0xFFFF
    722            *msg++ = LO_UINT16( SrcAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_72:
   \   000020   C0E0         PUSH    A
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
    723          
    724            *msg++ = HI_UINT16( nwkAddr );
   \   00002A   7403         MOV     A,#0x3
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   ED           MOV     A,R5
   \   000030   F0           MOVX    @DPTR,A
    725            *msg++ = LO_UINT16( nwkAddr );
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ?Subroutine26 & 0xFFFF
    726          
    727            *msg++ = (byte)(pNodeDesc->LogicalType);
   \                     ??CrossCallReturnLabel_59:
   \   000039   5407         ANL     A,#0x7
   \   00003B   C0E0         PUSH    A
   \   00003D   7405         MOV     A,#0x5
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   D0E0         POP     A
   \   000044   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    728          
    729            // Since Z-Tool can't treat V1.0 and V1.1 differently,
    730            // we just output these two byte in both cases, although
    731            // in V1.0, they are always zeros.
    732            *msg++ = (byte) pNodeDesc->ComplexDescAvail;
   \                     ??CrossCallReturnLabel_61:
   \   000047   A2E3         MOV     C,0xE0 /* A   */.3
   \   000049   E4           CLR     A
   \   00004A   92E0         MOV     0xE0 /* A   */.0,C
   \   00004C   C0E0         PUSH    A
   \   00004E   7406         MOV     A,#0x6
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   D0E0         POP     A
   \   000055   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    733            *msg++ = (byte) pNodeDesc->UserDescAvail;
   \                     ??CrossCallReturnLabel_62:
   \   000058   A2E4         MOV     C,0xE0 /* A   */.4
   \   00005A   E4           CLR     A
   \   00005B   92E0         MOV     0xE0 /* A   */.0,C
   \   00005D   C0E0         PUSH    A
   \   00005F   7407         MOV     A,#0x7
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   D0E0         POP     A
   \   000066   12....       LCALL   ?Subroutine33 & 0xFFFF
    734          
    735            *msg++ = pNodeDesc->APSFlags;
   \                     ??CrossCallReturnLabel_77:
   \   000069   AA82         MOV     R2,DPL
   \   00006B   AB83         MOV     R3,DPH
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   5407         ANL     A,#0x7
   \   000070   C0E0         PUSH    A
   \   000072   7408         MOV     A,#0x8
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   D0E0         POP     A
   \   000079   12....       LCALL   ?Subroutine31 & 0xFFFF
    736            *msg++ = pNodeDesc->FrequencyBand;
   \                     ??CrossCallReturnLabel_73:
   \   00007C   13           RRC     A
   \   00007D   13           RRC     A
   \   00007E   13           RRC     A
   \   00007F   541F         ANL     A,#0x1f
   \   000081   C0E0         PUSH    A
   \   000083   7409         MOV     A,#0x9
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   D0E0         POP     A
   \   00008A   12....       LCALL   ?Subroutine33 & 0xFFFF
    737            *msg++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_78:
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C0E0         PUSH    A
   \   000091   740A         MOV     A,#0xa
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   D0E0         POP     A
   \   000098   12....       LCALL   ?Subroutine32 & 0xFFFF
    738            *msg++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_75:
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   C0E0         PUSH    A
   \   00009E   740B         MOV     A,#0xb
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   D0E0         POP     A
   \   0000A5   12....       LCALL   ?Subroutine33 & 0xFFFF
    739            *msg++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_79:
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   C0E0         PUSH    A
   \   0000AD   740C         MOV     A,#0xc
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   D0E0         POP     A
   \   0000B4   12....       LCALL   ?Subroutine32 & 0xFFFF
    740            *msg++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_76:
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   C0E0         PUSH    A
   \   0000BB   740D         MOV     A,#0xd
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   D0E0         POP     A
   \   0000C2   12....       LCALL   ?Subroutine30 & 0xFFFF
    741            *msg++ = pNodeDesc->MaxTransferSize[1];
   \                     ??CrossCallReturnLabel_70:
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   C0E0         PUSH    A
   \   0000C9   740E         MOV     A,#0xe
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   D0E0         POP     A
   \   0000D0   12....       LCALL   ?Subroutine30 & 0xFFFF
    742            *msg++ = pNodeDesc->MaxTransferSize[0];
   \                     ??CrossCallReturnLabel_71:
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   C0E0         PUSH    A
   \   0000D6   740F         MOV     A,#0xf
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
    743            *msg++ = HI_UINT16( pNodeDesc->ServerMask);
   \   0000DE   E8           MOV     A,R0
   \   0000DF   2408         ADD     A,#0x8
   \   0000E1   F8           MOV     R0,A
   \   0000E2   E9           MOV     A,R1
   \   0000E3   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   C0E0         PUSH    A
   \   0000EA   7410         MOV     A,#0x10
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   D0E0         POP     A
   \   0000F1   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    744            *msg++ = LO_UINT16( pNodeDesc->ServerMask);
   \                     ??CrossCallReturnLabel_63:
   \   0000F4   C0E0         PUSH    A
   \   0000F6   7411         MOV     A,#0x11
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   D0E0         POP     A
   \   0000FD   12....       LCALL   ?Subroutine28 & 0xFFFF
    745          
    746            MT_BuildAndSendZToolCB( SPI_CB_ZDO_NODE_DESC_RSP, 18, buf );
   \                     ??CrossCallReturnLabel_67:
   \   000100   7912         MOV     R1,#0x12
   \   000102   7A82         MOV     R2,#-0x7e
   \   000104   7B0A         MOV     R3,#0xa
   \   000106   90....       MOV     DPTR,#(MT_BuildAndSendZToolCB & 0xffff)
   \   000109   74..         MOV     A,#((MT_BuildAndSendZToolCB >> 16) & 0xff)
   \   00010B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    747          }
   \   00010E   7412         MOV     A,#0x12
   \   000110                REQUIRE ?Subroutine64
   \   000110                ; // Fall through to label ?Subroutine64

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F01         MOV     R7,#0x1
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ?Subroutine62
   \   000001                ; // Fall through to label ?Subroutine62

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolCB
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolCB
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolCB
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolCB
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolCB
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EC           MOV     A,R4
   \                     ??Subroutine26_0:
   \   000001   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EE           MOV     A,R6
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E5..         MOV     A,?V0 + 1
   \                     ??Subroutine23_0:
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   02....       LJMP    ?Subroutine62 & 0xFFFF
    748          #endif // ZDO_NODEDESC_REQUEST
    749          
    750          #if defined ( ZDO_POWERDESC_REQUEST )
    751          /*********************************************************************
    752           * @fn      zdo_MTCB_PowerDescRspCB()
    753           *
    754           * @brief
    755           *
    756           *   Called by ZDO when a Power_Desc_rsp message is received.
    757           *
    758           * @param  SrcAddr  - Source address
    759           * @param  Status - response status
    760           * @param  nwkAddr - 16 bit network address of device
    761           * @param  pPwrDesc - pointer to the devices Power Descriptor
    762           *                     NULL if Status != ZDP_SUCCESS
    763           *
    764           * @return  none
    765           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    766          void zdo_MTCB_PowerDescRspCB( zAddrType_t *SrcAddr, byte Status,
   \                     zdo_MTCB_PowerDescRspCB:
    767                    uint16 nwkAddr, NodePowerDescriptorFormat_t *pPwrDesc )
    768          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7413         MOV     A,#0x13
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine11 & 0xFFFF
    769            byte buf[9];
    770            byte *msg;
    771          
    772            msg = buf;
    773          
    774            //Fill up the data bytes
    775            *msg++ = Status;
    776            *msg++ = HI_UINT16( SrcAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_28:
   \   000014   C0E0         PUSH    A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   D0E0         POP     A
   \   00001D   12....       LCALL   ?Subroutine31 & 0xFFFF
    777            *msg++ = LO_UINT16( SrcAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_74:
   \   000020   C0E0         PUSH    A
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
    778            *msg++ = HI_UINT16( nwkAddr );
   \   00002A   7403         MOV     A,#0x3
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   ED           MOV     A,R5
   \   000030   F0           MOVX    @DPTR,A
    779            *msg++ = LO_UINT16( nwkAddr );
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ?Subroutine26 & 0xFFFF
    780          
    781            *msg++ = pPwrDesc->PowerMode;
   \                     ??CrossCallReturnLabel_60:
   \   000039   540F         ANL     A,#0xf
   \   00003B   C0E0         PUSH    A
   \   00003D   7405         MOV     A,#0x5
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   D0E0         POP     A
   \   000044   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    782            *msg++ = pPwrDesc->AvailablePowerSources;
   \                     ??CrossCallReturnLabel_64:
   \   000047   C4           SWAP    A
   \   000048   540F         ANL     A,#0xf
   \   00004A   C0E0         PUSH    A
   \   00004C   7406         MOV     A,#0x6
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   D0E0         POP     A
   \   000053   12....       LCALL   ?Subroutine33 & 0xFFFF
    783            *msg++ = pPwrDesc->CurrentPowerSource;
   \                     ??CrossCallReturnLabel_80:
   \   000056   E0           MOVX    A,@DPTR
   \   000057   540F         ANL     A,#0xf
   \   000059   C0E0         PUSH    A
   \   00005B   7407         MOV     A,#0x7
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   D0E0         POP     A
   \   000062   12....       LCALL   ?Subroutine55 & 0xFFFF
    784            *msg   = pPwrDesc->CurrentPowerSourceLevel;
   \                     ??CrossCallReturnLabel_136:
   \   000065   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000068   740C         MOV     A,#0xc
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?US_SHR
   \   00006F   7408         MOV     A,#0x8
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   E5..         MOV     A,?V0 + 0
   \   000076   12....       LCALL   ?Subroutine28 & 0xFFFF
    785          
    786            MT_BuildAndSendZToolCB( SPI_CB_ZDO_POWER_DESC_RSP, 9, buf );
   \                     ??CrossCallReturnLabel_68:
   \   000079   7909         MOV     R1,#0x9
   \   00007B   7A83         MOV     R2,#-0x7d
   \   00007D   7B0A         MOV     R3,#0xa
   \   00007F   90....       MOV     DPTR,#(MT_BuildAndSendZToolCB & 0xffff)
   \   000082   74..         MOV     A,#((MT_BuildAndSendZToolCB >> 16) & 0xff)
   \   000084   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    787          }
   \   000087   7409         MOV     A,#0x9
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   7F02         MOV     R7,#0x2
   \   00008E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET
    788          #endif // ZDO_POWERDESC_REQUEST
    789          
    790          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    791          #define ZDO_SIMPLE_DESC_CB_LEN  78
    792          /*********************************************************************
    793           * @fn      zdo_MTCB_SimpleDescRspCB()
    794           *
    795           * @brief
    796           *
    797           *   Called by ZDO when a Simple_Desc_rsp message is received.
    798           *
    799           * @param  SrcAddr  - Source address
    800           * @param  Status - response status
    801           * @param  nwkAddr - 16 bit network address of device
    802           * @param  EPIntf - Endpoint/Interface for description
    803           * @param  pSimpleDesc - pointer to the devices Simple Descriptor
    804           *                     NULL if Status != ZDP_SUCCESS
    805           *
    806           * @return  none
    807           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    808          void zdo_MTCB_SimpleDescRspCB( zAddrType_t *SrcAddr, byte Status,
   \                     zdo_MTCB_SimpleDescRspCB:
    809                    uint16 nwkAddr, byte EPIntf, SimpleDescriptionFormat_t *pSimpleDesc )
    810          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0 + 7,R1
   \   000017   EC           MOV     A,R4
   \   000018   FE           MOV     R6,A
   \   000019   ED           MOV     A,R5
   \   00001A   FF           MOV     R7,A
   \   00001B   7412         MOV     A,#0x12
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 6,A
   \   000023   7413         MOV     A,#0x13
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine12 & 0xFFFF
    811            byte *msgPtr;
    812            byte *msg;
    813            byte x;
    814          
    815            msgPtr = osal_mem_alloc( ZDO_SIMPLE_DESC_CB_LEN );
   \                     ??CrossCallReturnLabel_30:
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   7A4E         MOV     R2,#0x4e
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000032   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   000034   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000037   8A..         MOV     ?V0 + 2,R2
   \   000039   8B..         MOV     ?V0 + 3,R3
    816            if ( msgPtr )
   \   00003B   EA           MOV     A,R2
   \   00003C   7001         JNZ     ??zdo_MTCB_SimpleDescRspCB_0
   \   00003E   EB           MOV     A,R3
   \                     ??zdo_MTCB_SimpleDescRspCB_0:
   \   00003F   7003         JNZ     $+5
   \   000041   02....       LJMP    ??zdo_MTCB_SimpleDescRspCB_1 & 0xFFFF
    817            {
    818              msg = msgPtr;
    819          
    820              //Fill up the data bytes
    821              *msg++ = Status;
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   E5..         MOV     A,?V0 + 7
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   12....       LCALL   ?Subroutine20 & 0xFFFF
    822              *msg++ = HI_UINT16( SrcAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_47:
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000055   12....       LCALL   ?Subroutine20 & 0xFFFF
    823              *msg++ = LO_UINT16( SrcAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_48:
   \   000058   E0           MOVX    A,@DPTR
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   12....       LCALL   ?Subroutine34 & 0xFFFF
    824              *msg++ = HI_UINT16( nwkAddr );
    825              *msg++ = LO_UINT16( nwkAddr );
    826          
    827              *msg++ = EPIntf;
   \                     ??CrossCallReturnLabel_81:
   \   000060   E5..         MOV     A,?V0 + 6
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
    828          
    829              *msg++ = HI_UINT16( pSimpleDesc->AppProfId );
   \   000068   85..82       MOV     DPL,?V0 + 0
   \   00006B   85..83       MOV     DPH,?V0 + 1
   \   00006E   A3           INC     DPTR
   \   00006F   A882         MOV     R0,DPL
   \   000071   A983         MOV     R1,DPH
   \   000073   12....       LCALL   ?Subroutine8 & 0xFFFF
    830              *msg++ = LO_UINT16( pSimpleDesc->AppProfId );
    831              *msg++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_19:
   \   000076   2403         ADD     A,#0x3
   \   000078   F8           MOV     R0,A
   \   000079   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00007C   12....       LCALL   ?Subroutine8 & 0xFFFF
    832              *msg++ = LO_UINT16( pSimpleDesc->AppDeviceId );
    833          
    834              *msg++ = pSimpleDesc->AppDevVer;
   \                     ??CrossCallReturnLabel_20:
   \   00007F   2405         ADD     A,#0x5
   \   000081   08           INC     R0
   \   000082   08           INC     R0
   \   000083   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000086   E0           MOVX    A,@DPTR
   \   000087   12....       LCALL   ?Subroutine35 & 0xFFFF
    835              *msg++ = pSimpleDesc->Reserved;
   \                     ??CrossCallReturnLabel_83:
   \   00008A   8882         MOV     DPL,R0
   \   00008C   8983         MOV     DPH,R1
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C4           SWAP    A
   \   000090   12....       LCALL   ?Subroutine35 & 0xFFFF
    836          
    837              *msg++ = pSimpleDesc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_84:
   \   000093   85..82       MOV     DPL,?V0 + 0
   \   000096   85..83       MOV     DPH,?V0 + 1
   \   000099   12....       LCALL   ?Subroutine16 & 0xFFFF
    838              // ZTool supports 16 bits the code has taken it into account      
    839              for ( x = 0; x < 16; x++ )
    840              {
    841                if ( x < pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_43:
   \   00009C   85..82       MOV     DPL,?V0 + 0
   \   00009F   85..83       MOV     DPH,?V0 + 1
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FC           MOV     R4,A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   C3           CLR     C
   \   0000AC   9C           SUBB    A,R4
   \   0000AD   5010         JNC     ??zdo_MTCB_SimpleDescRspCB_2
    842                {
    843                  *msg++ = HI_UINT16( pSimpleDesc->pAppInClusterList[x]);
   \   0000AF   EE           MOV     A,R6
   \   0000B0   C3           CLR     C
   \   0000B1   33           RLC     A
   \   0000B2   F8           MOV     R0,A
   \   0000B3   E4           CLR     A
   \   0000B4   33           RLC     A
   \   0000B5   F9           MOV     R1,A
   \   0000B6   E5..         MOV     A,?V0 + 0
   \   0000B8   2407         ADD     A,#0x7
   \   0000BA   12....       LCALL   ?Subroutine5 & 0xFFFF
    844                  *msg++ = LO_UINT16( pSimpleDesc->pAppInClusterList[x]);
   \                     ??CrossCallReturnLabel_13:
   \   0000BD   800B         SJMP    ??zdo_MTCB_SimpleDescRspCB_3
    845                }
    846                else
    847                {
    848                  *msg++ = 0;
   \                     ??zdo_MTCB_SimpleDescRspCB_2:
   \   0000BF   E4           CLR     A
   \   0000C0   8A82         MOV     DPL,R2
   \   0000C2   8B83         MOV     DPH,R3
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
    849                  *msg++ = 0;
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   AA82         MOV     R2,DPL
   \                     ??zdo_MTCB_SimpleDescRspCB_3:
   \   0000CA   AB83         MOV     R3,DPH
    850                }
    851              }
   \   0000CC   0E           INC     R6
   \   0000CD   EE           MOV     A,R6
   \   0000CE   C3           CLR     C
   \   0000CF   9410         SUBB    A,#0x10
   \   0000D1   40C9         JC      ??CrossCallReturnLabel_43
    852              *msg++ = pSimpleDesc->AppNumOutClusters;
   \   0000D3   85..82       MOV     DPL,?V0 + 0
   \   0000D6   85..83       MOV     DPH,?V0 + 1
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   12....       LCALL   ?Subroutine16 & 0xFFFF
    853          
    854              for ( x = 0; x < 16; x++ )
    855              {
    856                if ( x < pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_44:
   \   0000DF   85..82       MOV     DPL,?V0 + 0
   \   0000E2   85..83       MOV     DPH,?V0 + 1
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   FC           MOV     R4,A
   \   0000F0   EE           MOV     A,R6
   \   0000F1   C3           CLR     C
   \   0000F2   9C           SUBB    A,R4
   \   0000F3   5010         JNC     ??zdo_MTCB_SimpleDescRspCB_4
    857                {
    858                  *msg++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[x]);
   \   0000F5   EE           MOV     A,R6
   \   0000F6   C3           CLR     C
   \   0000F7   33           RLC     A
   \   0000F8   F8           MOV     R0,A
   \   0000F9   E4           CLR     A
   \   0000FA   33           RLC     A
   \   0000FB   F9           MOV     R1,A
   \   0000FC   E5..         MOV     A,?V0 + 0
   \   0000FE   240A         ADD     A,#0xa
   \   000100   12....       LCALL   ?Subroutine5 & 0xFFFF
    859                  *msg++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[x]);
   \                     ??CrossCallReturnLabel_14:
   \   000103   800B         SJMP    ??zdo_MTCB_SimpleDescRspCB_5
    860                }
    861                else
    862                {
    863                  *msg++ = 0;
   \                     ??zdo_MTCB_SimpleDescRspCB_4:
   \   000105   E4           CLR     A
   \   000106   8A82         MOV     DPL,R2
   \   000108   8B83         MOV     DPH,R3
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   A3           INC     DPTR
    864                  *msg++ = 0;
   \   00010C   F0           MOVX    @DPTR,A
   \   00010D   A3           INC     DPTR
   \   00010E   AA82         MOV     R2,DPL
   \                     ??zdo_MTCB_SimpleDescRspCB_5:
   \   000110   AB83         MOV     R3,DPH
    865                }
    866              }
   \   000112   0E           INC     R6
   \   000113   EE           MOV     A,R6
   \   000114   C3           CLR     C
   \   000115   9410         SUBB    A,#0x10
   \   000117   40C6         JC      ??CrossCallReturnLabel_44
    867          
    868              MT_BuildAndSendZToolCB( SPI_CB_ZDO_SIMPLE_DESC_RSP, ZDO_SIMPLE_DESC_CB_LEN, msgPtr );
   \   000119                ; Setup parameters for call to function MT_BuildAndSendZToolCB
   \   000119   AC..         MOV     R4,?V0 + 2
   \   00011B   AD..         MOV     R5,?V0 + 3
   \   00011D   794E         MOV     R1,#0x4e
   \   00011F   7A84         MOV     R2,#-0x7c
   \   000121   7B0A         MOV     R3,#0xa
   \   000123   90....       MOV     DPTR,#(MT_BuildAndSendZToolCB & 0xffff)
   \   000126   74..         MOV     A,#((MT_BuildAndSendZToolCB >> 16) & 0xff)
   \   000128   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    869          
    870              osal_mem_free( msgPtr );
   \   00012B                ; Setup parameters for call to function osal_mem_free
   \   00012B   AA..         MOV     R2,?V0 + 2
   \   00012D   AB..         MOV     R3,?V0 + 3
   \   00012F   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   000132   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   000134   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    871            }
    872          }
   \                     ??zdo_MTCB_SimpleDescRspCB_1:
   \   000137   7402         MOV     A,#0x2
   \   000139                REQUIRE ?Subroutine57
   \   000139                ; // Fall through to label ?Subroutine57

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   540F         ANL     A,#0xf
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   0A           INC     R2
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   AB83         MOV     R3,DPH
   \   000002   85..82       MOV     DPL,?XSP + 0
   \   000005   85..83       MOV     DPH,?XSP + 1
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F583         MOV     DPH,A
   \   00000E   8882         MOV     DPL,R0
   \   000010   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000008   7E00         MOV     R6,#0x0
   \   00000A   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   A3           INC     DPTR
   \                     ??Subroutine40_0:
   \   000001   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00000A   E5..         MOV     A,?V0 + 0
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   FC           MOV     R4,A
   \   000001   E5..         MOV     A,?V0 + 1
   \   000003   3400         ADDC    A,#0x0
   \   000005   FD           MOV     R5,A
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   28           ADD     A,R0
   \   00000C   FF           MOV     R7,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   39           ADDC    A,R1
   \   000010   8F82         MOV     DPL,R7
   \   000012   F583         MOV     DPH,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   AA82         MOV     R2,DPL
   \   00001E   AB83         MOV     R3,DPH
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   28           ADD     A,R0
   \   000026   FC           MOV     R4,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   39           ADDC    A,R1
   \   00002A   8C82         MOV     DPL,R4
   \   00002C   F583         MOV     DPH,A
   \   00002E   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000031   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EF           MOV     A,R7
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   EE           MOV     A,R6
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    873          #endif // ZDO_SIMPLEDESC_REQUEST
    874          
    875          #if defined ( ZDO_ACTIVEEP_REQUEST ) || defined ( ZDO_MATCH_REQUEST )
    876          /*********************************************************************
    877           * @fn      zdo_MTCB_ActiveEPRspCB()
    878           *
    879           * @brief
    880           *
    881           *   Called by ZDO when a Active_EP_rsp or Match_Desc_rsp message is received.
    882           *
    883           * @param  SrcAddr  - Source address
    884           * @param  Status - response status
    885           * @param  nwkAddr - Device's short address that this response describes
    886           * @param  epIntfCnt - number of epIntfList items
    887           * @param  epIntfList - array of active endpoint/interfaces.
    888           *
    889           * @return  none
    890           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    891          void zdo_MTCB_MatchActiveEPRspCB( uint16 type, zAddrType_t *SrcAddr, byte Status,
   \                     zdo_MTCB_MatchActiveEPRspCB:
    892                            uint16 nwkAddr, byte epIntfCnt, byte *epIntfList )
    893          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   \   00000E   7422         MOV     A,#0x22
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000016   7424         MOV     A,#0x24
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 2,A
   \   00001E   7425         MOV     A,#0x25
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FC           MOV     R4,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FD           MOV     R5,A
    894            byte buf[22];
    895            byte *msg;
    896            byte x;
    897          
    898            msg = buf;
    899          
    900            //Fill up the data bytes
    901            *msg++ = Status;
   \   000028   E9           MOV     A,R1
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   F0           MOVX    @DPTR,A
    902            *msg++ = HI_UINT16( SrcAddr->addr.shortAddr );
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   C0E0         PUSH    A
   \   000038   7401         MOV     A,#0x1
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   D0E0         POP     A
   \   00003F   F0           MOVX    @DPTR,A
    903            *msg++ = LO_UINT16( SrcAddr->addr.shortAddr );
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C0E0         PUSH    A
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
    904            *msg++ = HI_UINT16( nwkAddr );
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E5..         MOV     A,?V0 + 1
   \   000056   F0           MOVX    @DPTR,A
    905            *msg++ = LO_UINT16( nwkAddr );
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E5..         MOV     A,?V0 + 0
   \   00005E   F0           MOVX    @DPTR,A
    906          
    907            *msg++ = epIntfCnt;
   \   00005F   7405         MOV     A,#0x5
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E5..         MOV     A,?V0 + 2
   \   000066   F0           MOVX    @DPTR,A
   \   000067   7406         MOV     A,#0x6
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   A882         MOV     R0,DPL
   \   00006E   A983         MOV     R1,DPH
    908          
    909            for ( x = 0; x < 16; x++ )
   \   000070   7E00         MOV     R6,#0x0
    910            {
    911              if ( x < epIntfCnt )
   \                     ??zdo_MTCB_MatchActiveEPRspCB_0:
   \   000072   EE           MOV     A,R6
   \   000073   C3           CLR     C
   \   000074   95..         SUBB    A,?V0 + 2
   \   000076   5016         JNC     ??zdo_MTCB_MatchActiveEPRspCB_1
    912                *msg++ = *epIntfList++;
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
   \   00007C   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00007F   8C82         MOV     DPL,R4
   \   000081   8D83         MOV     DPH,R5
   \   000083   A3           INC     DPTR
   \   000084   AC82         MOV     R4,DPL
   \   000086   AD83         MOV     R5,DPH
   \   000088   8882         MOV     DPL,R0
   \   00008A   8983         MOV     DPH,R1
   \   00008C   8006         SJMP    ??zdo_MTCB_MatchActiveEPRspCB_2
    913              else
    914                *msg++ = 0;
   \                     ??zdo_MTCB_MatchActiveEPRspCB_1:
   \   00008E   E4           CLR     A
   \   00008F   8882         MOV     DPL,R0
   \   000091   8983         MOV     DPH,R1
   \   000093   F0           MOVX    @DPTR,A
   \                     ??zdo_MTCB_MatchActiveEPRspCB_2:
   \   000094   A3           INC     DPTR
   \   000095   A882         MOV     R0,DPL
   \   000097   A983         MOV     R1,DPH
    915            }
   \   000099   0E           INC     R6
   \   00009A   EE           MOV     A,R6
   \   00009B   C3           CLR     C
   \   00009C   9410         SUBB    A,#0x10
   \   00009E   40D2         JC      ??zdo_MTCB_MatchActiveEPRspCB_0
    916          
    917            MT_BuildAndSendZToolCB( type, 22, buf );
   \   0000A0                ; Setup parameters for call to function MT_BuildAndSendZToolCB
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   AC82         MOV     R4,DPL
   \   0000A8   AD83         MOV     R5,DPH
   \   0000AA   7916         MOV     R1,#0x16
   \   0000AC   90....       MOV     DPTR,#(MT_BuildAndSendZToolCB & 0xffff)
   \   0000AF   74..         MOV     A,#((MT_BuildAndSendZToolCB >> 16) & 0xff)
   \   0000B1   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    918          }
   \   0000B4   7416         MOV     A,#0x16
   \   0000B6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B9   7F04         MOV     R7,#0x4
   \   0000BB   02....       LJMP    ?BANKED_LEAVE_XDATA
    919          #endif // ZDO_ACTIVEEP_REQUEST || ZDO_MATCH_REQUEST
    920          
    921          #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST )
    922          /*********************************************************************
    923           * @fn      zdo_MTCB_BindRspCB()
    924           *
    925           * @brief
    926           *
    927           *   Called to send MT callback response for binding responses
    928           *
    929           * @param  type - binding type (end device, bind, unbind)
    930           * @param  SrcAddr  - Source address
    931           * @param  Status - response status
    932           *
    933           * @return  none
    934           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    935          void zdo_MTCB_BindRspCB( uint16 type, zAddrType_t *SrcAddr, byte Status )
   \                     zdo_MTCB_BindRspCB:
    936          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    937            byte buf[3];
    938            buf[0] = Status;
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
    939            buf[1] = HI_UINT16( SrcAddr->addr.shortAddr );
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C0E0         PUSH    A
   \   00001A   7401         MOV     A,#0x1
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   F0           MOVX    @DPTR,A
    940            buf[2] = LO_UINT16( SrcAddr->addr.shortAddr );
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   E0           MOVX    A,@DPTR
   \   000027   C0E0         PUSH    A
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   D0E0         POP     A
   \   000030   12....       LCALL   ?Subroutine27 & 0xFFFF
    941            MT_BuildAndSendZToolCB( type, 3, buf );
   \                     ??CrossCallReturnLabel_65:
   \   000033   90....       MOV     DPTR,#(MT_BuildAndSendZToolCB & 0xffff)
   \   000036   74..         MOV     A,#((MT_BuildAndSendZToolCB >> 16) & 0xff)
   \   000038   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    942          }
   \   00003B   7403         MOV     A,#0x3
   \   00003D   02....       LJMP    ?Subroutine64 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   7903         MOV     R1,#0x3
   \   000005   22           RET
    943          #endif // ZDO_BIND_UNBIND_REQUEST || ZDO_ENDDEVICEBIND_REQUEST
    944          
    945          #if defined ( ZDO_MGMT_LQI_REQUEST )
    946          /*********************************************************************
    947           * @fn      zdo_MTCB_MgmtLqiRspCB()
    948           *
    949           * @brief
    950           *
    951           *   Called to send MT callback response for Management LQI response
    952           *
    953           * @param  type - binding type (end device, bind, unbind)
    954           * @param  SrcAddr  - Source address
    955           * @param  Status - response status
    956           *
    957           * @return  none
    958           */
    959          void zdo_MTCB_MgmtLqiRspCB( uint16 SrcAddr, byte Status, byte NeighborLqiEntries,
    960                                      byte StartIndex, byte NeighborLqiCount,
    961                                      neighborLqiItem_t *pList )
    962          {
    963            byte *msgPtr;
    964            byte *msg;
    965            byte len;
    966            byte x;
    967            byte proVer = NLME_GetProtocolVersion();  
    968            
    969            /*Allocate a message of size equivalent to the corresponding SPI message
    970            (plus a couple of bytes for MT use)so that the same buffer can be sent by
    971            MT to the test tool by simply setting the header bytes.*/
    972          
    973            /*In order to allocate the message , we need to know the length and this
    974            has to be calculated before we allocate the message*/
    975          
    976            len = 2 + 1 + 1 + 1 + 1 + (ZDP_NEIGHBORLQI_SIZE * ZDO_MAX_LQI_ITEMS );
    977              //  SrcAddr + Status + NeighborLqiEntries + StartIndex + NeighborLqiCount
    978              //     + (maximum entries * size of struct)
    979           
    980            msgPtr = osal_mem_alloc( len );
    981          
    982            if ( msgPtr )
    983            {
    984              msg = msgPtr;
    985          
    986              //Fill up the data bytes
    987              
    988              *msg++ = HI_UINT16( SrcAddr );
    989              *msg++ = LO_UINT16( SrcAddr );    
    990              *msg++ = Status;
    991              *msg++ = NeighborLqiEntries;
    992              *msg++ = StartIndex;
    993              *msg++ = NeighborLqiCount;
    994          
    995              osal_memset( msg, 0, (ZDP_NEIGHBORLQI_SIZE * ZDO_MAX_LQI_ITEMS) );
    996          
    997              for ( x = 0; x < ZDO_MAX_LQI_ITEMS; x++ )
    998              {
    999                if ( x < NeighborLqiCount )
   1000                {
   1001                  if ( proVer == ZB_PROT_V1_0 )
   1002                  {
   1003                    *msg++ = HI_UINT16( pList->PANId );
   1004                    *msg++ = LO_UINT16( pList->PANId );
   1005                  }
   1006                  else 
   1007                  {
   1008                    osal_cpyExtAddr(msg, pList->extPANId);
   1009                    msg += Z_EXTADDR_LEN;
   1010                  }
   1011                  *msg++ = HI_UINT16( pList->nwkAddr );
   1012                  *msg++ = LO_UINT16( pList->nwkAddr );
   1013                  *msg++ = pList->rxLqi;
   1014                  *msg++ = pList->txQuality;
   1015                  pList++;
   1016                }
   1017              }
   1018          
   1019              MT_BuildAndSendZToolCB( SPI_CB_ZDO_MGMT_LQI_RSP, len, msgPtr );
   1020          
   1021              osal_mem_free( msgPtr );
   1022            }
   1023          }
   1024          #endif // ZDO_MGMT_LQI_REQUEST
   1025          
   1026          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
   1027          /*********************************************************************
   1028           * @fn      zdo_MTCB_MgmtNwkDiscRspCB()
   1029           *
   1030           * @brief
   1031           *
   1032           *   Called to send MT callback response for Management Network
   1033           *   Discover response
   1034           *
   1035           * @param  SrcAddr  - Source address
   1036           * @param  Status - response status
   1037           *
   1038           * @return  none
   1039           */
   1040          void zdo_MTCB_MgmtNwkDiscRspCB( uint16 SrcAddr, byte Status,
   1041                                  byte NetworkCount, byte StartIndex,
   1042                                  byte networkListCount, mgmtNwkDiscItem_t *pList )
   1043          {
   1044            byte *msgPtr;
   1045            byte *msg;
   1046            byte len;
   1047            byte x;
   1048            byte proVer = NLME_GetProtocolVersion();  
   1049             
   1050          
   1051            /*Allocate a message of size equivalent to the corresponding SPI message
   1052            (plus a couple of bytes for MT use)so that the same buffer can be sent by
   1053            MT to the test tool by simply setting the header bytes.*/
   1054          
   1055            /*In order to allocate the message , we need to know the length and this
   1056            has to be calculated before we allocate the message*/
   1057            if ( proVer == ZB_PROT_V1_0 )
   1058            {
   1059              len = 2 + 1 + 1 + 1 + 1 + (ZDP_NETWORK_DISCRIPTOR_SIZE * ZDO_MAX_NWKDISC_ITEMS);
   1060                //  SrcAddr + Status + NetworkCount + StartIndex + networkListCount
   1061                //     + (maximum entries * size of struct)
   1062            }
   1063            else
   1064            {
   1065              len = 2 + 1 + 1 + 1 + 1 + (ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE * ZDO_MAX_NWKDISC_ITEMS);
   1066           
   1067            }
   1068          
   1069            msgPtr = osal_mem_alloc( len );
   1070          
   1071            if ( msgPtr )
   1072            {
   1073              msg = msgPtr;
   1074          
   1075              //Fill up the data bytes
   1076              *msg++ = HI_UINT16( SrcAddr );
   1077              *msg++ = LO_UINT16( SrcAddr );
   1078              *msg++ = Status;
   1079              *msg++ = NetworkCount;
   1080              *msg++ = StartIndex;
   1081              *msg++ = networkListCount;
   1082          
   1083              osal_memset( msg, 0, (ZDP_NETWORK_DISCRIPTOR_SIZE * ZDO_MAX_NWKDISC_ITEMS) );
   1084          
   1085              for ( x = 0; x < ZDO_MAX_NWKDISC_ITEMS; x++ )
   1086              {
   1087                if ( x < networkListCount )
   1088                {
   1089                  if ( proVer == ZB_PROT_V1_0 )
   1090                  {
   1091                    *msg++ = HI_UINT16( pList->PANId );
   1092                    *msg++ = LO_UINT16( pList->PANId );
   1093                  }
   1094                  else
   1095                  {
   1096                    osal_cpyExtAddr( msg, pList->extendedPANID );
   1097                    msg += Z_EXTADDR_LEN;
   1098                  }
   1099                  *msg++ = pList->logicalChannel;
   1100                  *msg++ = pList->stackProfile;
   1101                  *msg++ = pList->version;
   1102                  *msg++ = pList->beaconOrder;
   1103                  *msg++ = pList->superFrameOrder;
   1104                  *msg++ = pList->permitJoining;
   1105                  pList++;
   1106                }
   1107              }
   1108          
   1109              MT_BuildAndSendZToolCB( SPI_CB_ZDO_MGMT_NWKDISC_RSP, len, msgPtr );
   1110          
   1111              osal_mem_free( msgPtr );
   1112            }
   1113          }
   1114          #endif // ZDO_MGMT_NWKDISC_REQUEST
   1115          
   1116          #if defined ( ZDO_MGMT_RTG_REQUEST )
   1117          /*********************************************************************
   1118           * @fn      zdo_MTCB_MgmtRtgRspCB()
   1119           *
   1120           * @brief
   1121           *
   1122           *   Called to send MT callback response for Management Network
   1123           *   Discover response
   1124           *
   1125           * @param  SrcAddr  - Source address
   1126           * @param  Status - response status
   1127           *
   1128           * @return  none
   1129           */
   1130          void zdo_MTCB_MgmtRtgRspCB( uint16 SrcAddr, byte Status,
   1131                                  byte RtgCount, byte StartIndex,
   1132                                  byte RtgListCount, rtgItem_t *pList )
   1133          {
   1134            byte *msgPtr;
   1135            byte *msg;
   1136            byte len;
   1137            byte x;
   1138          
   1139            /*Allocate a message of size equivalent to the corresponding SPI message
   1140            (plus a couple of bytes for MT use)so that the same buffer can be sent by
   1141            MT to the test tool by simply setting the header bytes.*/
   1142          
   1143            /*In order to allocate the message , we need to know the length and this
   1144            has to be calculated before we allocate the message*/
   1145          
   1146            len = 2 + 1 + 1 + 1 + 1 + (ZDP_RTG_DISCRIPTOR_SIZE * ZDO_MAX_RTG_ITEMS);
   1147                //  SrcAddr + Status + RtgCount + StartIndex + RtgListCount
   1148                //     + (maximum entries * size of struct)
   1149          
   1150            msgPtr = osal_mem_alloc( len );
   1151          
   1152            if ( msgPtr )
   1153            {
   1154              msg = msgPtr;
   1155          
   1156              //Fill up the data bytes
   1157              *msg++ = HI_UINT16( SrcAddr );
   1158              *msg++ = LO_UINT16( SrcAddr );
   1159              *msg++ = Status;
   1160              *msg++ = RtgCount;
   1161              *msg++ = StartIndex;
   1162              *msg++ = RtgListCount;
   1163          
   1164              osal_memset( msg, 0, (ZDP_RTG_DISCRIPTOR_SIZE * ZDO_MAX_RTG_ITEMS) );
   1165          
   1166              for ( x = 0; x < ZDO_MAX_RTG_ITEMS; x++ )
   1167              {
   1168                if ( x < RtgListCount )
   1169                {
   1170                  *msg++ = HI_UINT16( pList->dstAddress );
   1171                  *msg++ = LO_UINT16( pList->dstAddress );
   1172                  *msg++ = HI_UINT16( pList->nextHopAddress );
   1173                  *msg++ = LO_UINT16( pList->nextHopAddress );
   1174                  *msg++ = pList->status;
   1175                  pList++;
   1176                }
   1177              }
   1178          
   1179              MT_BuildAndSendZToolCB( SPI_CB_ZDO_MGMT_RTG_RSP, len, msgPtr );
   1180          
   1181              osal_mem_free( msgPtr );
   1182            }
   1183          }
   1184          #endif // ZDO_MGMT_RTG_REQUEST
   1185          
   1186          #if defined ( ZDO_MGMT_BIND_REQUEST )
   1187          /*********************************************************************
   1188           * @fn      zdo_MTCB_MgmtBindRspCB()
   1189           *
   1190           * @brief
   1191           *
   1192           *   Called to send MT callback response for Management Network
   1193           *   Discover response
   1194           *
   1195           * @param  SrcAddr  - Source address
   1196           * @param  Status - response status
   1197           *
   1198           * @return  none
   1199           */
   1200          void zdo_MTCB_MgmtBindRspCB( uint16 SrcAddr, byte Status,
   1201                                  byte BindCount, byte StartIndex,
   1202                                  byte BindListCount, apsBindingItem_t *pList )
   1203          {
   1204            byte *msgPtr;
   1205            byte *msg;
   1206            byte len;       
   1207            byte x;
   1208            uint8 protoVer = NLME_GetProtocolVersion();
   1209            
   1210            /*Allocate a message of size equivalent to the corresponding SPI message
   1211            (plus a couple of bytes for MT use)so that the same buffer can be sent by
   1212            MT to the test tool by simply setting the header bytes.*/
   1213          
   1214            /*In order to allocate the message , we need to know the length and this
   1215            has to be calculated before we allocate the message*/
   1216            
   1217          
   1218            // One more byte for clusterID and DstAddrMode 
   1219            len = 2 + 1 + 1 + 1 + 1 + ( ( ZDP_BIND_DISCRIPTOR_SIZE + 1 + 1 ) * ZDO_MAX_BIND_ITEMS);
   1220                //  SrcAddr + Status + BindCount + StartIndex + BindListCount
   1221                //     + (maximum entries * size of struct)
   1222          
   1223            msgPtr = osal_mem_alloc( len );
   1224          
   1225            if ( msgPtr )
   1226            {
   1227              msg = msgPtr;
   1228          
   1229              //Fill up the data bytes
   1230              *msg++ = HI_UINT16( SrcAddr );
   1231              *msg++ = LO_UINT16( SrcAddr );
   1232              *msg++ = Status;
   1233              *msg++ = BindCount;
   1234              *msg++ = StartIndex;
   1235              *msg++ = BindListCount;
   1236          
   1237              osal_memset( msg, 0, ( ( ZDP_BIND_DISCRIPTOR_SIZE + 1 + 1)  * ZDO_MAX_BIND_ITEMS) );
   1238              
   1239              
   1240              for ( x = 0; x < ZDO_MAX_BIND_ITEMS; x++ )
   1241              {
   1242                if ( x < BindListCount )
   1243                {
   1244                  msg = zdo_MT_CopyRevExtAddr( msg, pList->srcAddr );
   1245                  *msg++ = pList->srcEP;
   1246                  
   1247                  if ( protoVer == ZB_PROT_V1_0 ) 
   1248                  {         
   1249                    *msg++ = LO_UINT16( pList->clusterID);
   1250                    msg = zdo_MT_CopyRevExtAddr( msg, pList->dstAddr.addr.extAddr );    
   1251                    *msg++ = pList->dstEP;
   1252                  }
   1253                  else
   1254                  {
   1255                    *msg++ = HI_UINT16( pList->clusterID);
   1256                    *msg++ = LO_UINT16( pList->clusterID);
   1257                    *msg++ = pList->dstAddr.addrMode;
   1258                  
   1259                    if ( pList->dstAddr.addrMode == Addr64Bit )
   1260                    {         
   1261                      msg = zdo_MT_CopyRevExtAddr( msg, pList->dstAddr.addr.extAddr );
   1262                      *msg++ = pList->dstEP;           
   1263                    }
   1264                    else
   1265                    {
   1266                      *msg++ = HI_UINT16( pList->dstAddr.addr.shortAddr );
   1267                      *msg++ = LO_UINT16( pList->dstAddr.addr.shortAddr );
   1268                      // DstEndpoint will not present if DstAddrMode is not 64-bit extAddr
   1269                    }
   1270                  }
   1271                  
   1272                  pList++;
   1273                }
   1274              }
   1275          
   1276              MT_BuildAndSendZToolCB( SPI_CB_ZDO_MGMT_BIND_RSP, len, msgPtr );
   1277          
   1278              osal_mem_free( msgPtr );
   1279            }
   1280          }
   1281          #endif // ZDO_MGMT_RTG_REQUEST
   1282          
   1283          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
   1284          /*********************************************************************
   1285           * @fn      zdo_MTCB_MgmtDirectJoinRspCB()
   1286           *
   1287           * @brief
   1288           *
   1289           *   Called to send MT callback response for Management Direct Join
   1290           *   responses
   1291           *
   1292           * @param  SrcAddr  - Source address
   1293           * @param  Status - response status
   1294           *
   1295           * @return  none
   1296           */
   1297          void zdo_MTCB_MgmtDirectJoinRspCB( uint16 SrcAddr, byte Status, byte SecurityUse )
   1298          {
   1299            byte buf[3];
   1300          
   1301            buf[0] = HI_UINT16( SrcAddr );
   1302            buf[1] = LO_UINT16( SrcAddr );
   1303            buf[2] = Status;
   1304          
   1305            MT_BuildAndSendZToolCB( SPI_CB_ZDO_MGMT_DIRECT_JOIN_RSP, 3, buf );
   1306          }
   1307          #endif // ZDO_MGMT_JOINDIRECT_REQUEST
   1308          
   1309          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
   1310          /*********************************************************************
   1311           * @fn      zdo_MTCB_MgmtLeaveRspCB()
   1312           *
   1313           * @brief
   1314           *
   1315           *   Called to send MT callback response for Management Leave
   1316           *   responses
   1317           *
   1318           * @param  SrcAddr  - Source address
   1319           * @param  Status - response status
   1320           *
   1321           * @return  none
   1322           */
   1323          void zdo_MTCB_MgmtLeaveRspCB( uint16 SrcAddr, byte Status, byte SecurityUse )
   1324          {
   1325            byte buf[3];
   1326          
   1327            buf[0] = Status;
   1328            buf[1] = HI_UINT16( SrcAddr );
   1329            buf[2] = LO_UINT16( SrcAddr );
   1330          
   1331            MT_BuildAndSendZToolCB( SPI_CB_ZDO_MGMT_LEAVE_RSP, 3, buf );
   1332          }
   1333          #endif // ZDO_MGMT_LEAVE_REQUEST
   1334          
   1335          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
   1336          /*********************************************************************
   1337           * @fn      zdo_MTCB_MgmtPermitJoinRspCB()
   1338           *
   1339           * @brief
   1340           *
   1341           *   Called to send MT callback response for Management Permit Join
   1342           *   responses
   1343           *
   1344           * @param  SrcAddr  - Source address
   1345           * @param  Status - response status
   1346           *
   1347           * @return  none
   1348           */
   1349          void zdo_MTCB_MgmtPermitJoinRspCB( uint16 SrcAddr, byte Status, byte SecurityUse )
   1350          {
   1351            byte buf[3];
   1352          
   1353            buf[0] = Status;
   1354            buf[1] = HI_UINT16( SrcAddr );
   1355            buf[2] = LO_UINT16( SrcAddr );
   1356          
   1357            MT_BuildAndSendZToolCB( SPI_CB_ZDO_MGMT_PERMIT_JOIN_RSP, 3, buf );
   1358          }
   1359          #endif // ZDO_MGMT_PERMIT_JOIN_REQUEST
   1360          
   1361          #if defined ( ZDO_USERDESC_REQUEST )
   1362          #define USER_DESC_CB_LEN  22
   1363          /*********************************************************************
   1364           * @fn      zdo_MTCB_UserDescRspCB()
   1365           *
   1366           * @brief
   1367           *
   1368           *   Called to send MT callback response for User Descriptor
   1369           *   responses
   1370           *
   1371           * @param  SrcAddr  - Source address
   1372           * @param  Status - response status
   1373           * @param  nwkAddrOfInterest -
   1374           * @param  userDescLen -
   1375           * @param  userDesc -
   1376           * @param  SecurityUse -
   1377           *
   1378           * @return  none
   1379           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1380          void zdo_MTCB_UserDescRspCB( uint16 SrcAddr, byte status, uint16 nwkAddrOfInterest,
   \                     zdo_MTCB_UserDescRspCB:
   1381                                    byte userDescLen, byte *userDesc, byte SecurityUse )
   1382          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   89..         MOV     ?V0 + 7,R1
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 6,A
   1383            byte *msgPtr;
   1384            byte *msg;
   1385            msgPtr = osal_mem_alloc( USER_DESC_CB_LEN );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   7A16         MOV     R2,#0x16
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   00001E   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   000020   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000023   8A..         MOV     ?V0 + 4,R2
   \   000025   8B..         MOV     ?V0 + 5,R3
   1386            osal_memset( msgPtr, 0, USER_DESC_CB_LEN );
   \   000027                ; Setup parameters for call to function osal_memset
   \   000027   7C16         MOV     R4,#0x16
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   90....       MOV     DPTR,#(osal_memset & 0xffff)
   \   000030   74..         MOV     A,#((osal_memset >> 16) & 0xff)
   \   000032   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1387            
   1388            msg = msgPtr;
   1389            *msg++ = status;
   \   000035   85..82       MOV     DPL,?V0 + 4
   \   000038   85..83       MOV     DPH,?V0 + 5
   \   00003B   E5..         MOV     A,?V0 + 7
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   1390            *msg++ = HI_UINT16( SrcAddr );
   \   00003F   E5..         MOV     A,?V0 + 1
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   1391            *msg++ = LO_UINT16( SrcAddr );
   \   000043   E5..         MOV     A,?V0 + 0
   \   000045   12....       LCALL   ?Subroutine34 & 0xFFFF
   1392            *msg++ = HI_UINT16( nwkAddrOfInterest );
   1393            *msg++ = LO_UINT16( nwkAddrOfInterest );
   \                     ??CrossCallReturnLabel_82:
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   1394            *msg++ = userDescLen;
   \   00004C   E5..         MOV     A,?V0 + 6
   \   00004E   F0           MOVX    @DPTR,A
   1395            osal_memcpy( msg, userDesc, userDescLen ); 
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   7411         MOV     A,#0x11
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000057   75..00       MOV     ?V0 + 2,#0x0
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005F   AC..         MOV     R4,?V0 + 6
   \   000061   7D00         MOV     R5,#0x0
   \   000063   8A82         MOV     DPL,R2
   \   000065   8B83         MOV     DPH,R3
   \   000067   A3           INC     DPTR
   \   000068   0A           INC     R2
   \   000069   AB83         MOV     R3,DPH
   \   00006B   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   00006E   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   000070   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000073   7403         MOV     A,#0x3
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   1396            MT_BuildAndSendZToolCB( SPI_CB_ZDO_USER_DESC_RSP, USER_DESC_CB_LEN, msgPtr );
   \   000078                ; Setup parameters for call to function MT_BuildAndSendZToolCB
   \   000078   AC..         MOV     R4,?V0 + 4
   \   00007A   AD..         MOV     R5,?V0 + 5
   \   00007C   7916         MOV     R1,#0x16
   \   00007E   7A8F         MOV     R2,#-0x71
   \   000080   7B0A         MOV     R3,#0xa
   \   000082   90....       MOV     DPTR,#(MT_BuildAndSendZToolCB & 0xffff)
   \   000085   74..         MOV     A,#((MT_BuildAndSendZToolCB >> 16) & 0xff)
   \   000087   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1397            
   1398            osal_mem_free( msgPtr );
   \   00008A                ; Setup parameters for call to function osal_mem_free
   \   00008A   AA..         MOV     R2,?V0 + 4
   \   00008C   AB..         MOV     R3,?V0 + 5
   \   00008E   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   000091   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   000093   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1399          }
   \   000096   02....       LJMP    ??Subroutine57_0 & 0xFFFF
   1400          #endif // ZDO_USERDESC_REQUEST
   1401          
   1402          #if defined ( ZDO_USERDESCSET_REQUEST )
   1403          /*********************************************************************
   1404           * @fn      zdo_MTCB_UserDescConfCB()
   1405           *
   1406           * @brief
   1407           *
   1408           *   Called to send MT callback response for User Descriptor
   1409           *   confirm
   1410           *
   1411           * @param  SrcAddr  - Source address
   1412           * @param  Status - response status
   1413           * @param  SecurityUse -
   1414           *
   1415           * @return  none
   1416           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1417          void zdo_MTCB_UserDescConfCB( uint16 SrcAddr, byte status, byte SecurityUse )
   \                     zdo_MTCB_UserDescConfCB:
   1418          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1419            byte buf[3];
   1420          
   1421            buf[0] = status;
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   1422            buf[1] = HI_UINT16( SrcAddr );
   \   000011   7401         MOV     A,#0x1
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
   1423            buf[2] = LO_UINT16( SrcAddr );
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   EA           MOV     A,R2
   \   00001E   12....       LCALL   ?Subroutine27 & 0xFFFF
   1424          
   1425            MT_BuildAndSendZToolCB( SPI_CB_ZDO_USER_DESC_CNF, 3, buf );
   \                     ??CrossCallReturnLabel_66:
   \   000021   7A90         MOV     R2,#-0x70
   \   000023   7B0A         MOV     R3,#0xa
   \   000025   90....       MOV     DPTR,#(MT_BuildAndSendZToolCB & 0xffff)
   \   000028   74..         MOV     A,#((MT_BuildAndSendZToolCB >> 16) & 0xff)
   \   00002A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1426          }
   \   00002D   7403         MOV     A,#0x3
   \   00002F                REQUIRE ?Subroutine65
   \   00002F                ; // Fall through to label ?Subroutine65

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   D083         POP     DPH
   \   000005   D082         POP     DPL
   \   000007   02....       LJMP    ?BRET
   1427          #endif // ZDO_USERDESCSET_REQUEST
   1428          
   1429          #if defined ( ZDO_SERVERDISC_REQUEST )
   1430          /*********************************************************************
   1431           * @fn     zdo_MTCB_ServerDiscRspCB()
   1432           *
   1433           * @brief  Called to send MT callback response for Server_Discovery_rsp responses.
   1434           *
   1435           * @param  srcAddr - Source address.
   1436           * @param  status - Response status.
   1437           * @param  aoi - Network Address of Interest.
   1438           * @param  serverMask - Bit mask of services that match request.
   1439           * @param  SecurityUse -
   1440           *
   1441           * @return  none
   1442           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1443          void zdo_MTCB_ServerDiscRspCB( uint16 srcAddr, byte status, 
   \                     zdo_MTCB_ServerDiscRspCB:
   1444                                         uint16 serverMask, byte SecurityUse )
   1445          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV     A,#-0x5
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1446            byte buf[5];
   1447            byte *pBuf = buf;
   1448          
   1449            *pBuf++ = status;
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   1450            *pBuf++ = HI_UINT16( srcAddr );
   \   000011   7401         MOV     A,#0x1
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
   1451            *pBuf++ = LO_UINT16( srcAddr );
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   EA           MOV     A,R2
   \   00001E   F0           MOVX    @DPTR,A
   1452            *pBuf++ = HI_UINT16( serverMask );
   \   00001F   7403         MOV     A,#0x3
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   ED           MOV     A,R5
   \   000025   F0           MOVX    @DPTR,A
   1453            *pBuf++ = LO_UINT16( serverMask );
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   EC           MOV     A,R4
   \   00002C   12....       LCALL   ?Subroutine28 & 0xFFFF
   1454          
   1455            MT_BuildAndSendZToolCB( SPI_CB_ZDO_SERVERDISC_RSP, 5, buf );
   \                     ??CrossCallReturnLabel_69:
   \   00002F   7905         MOV     R1,#0x5
   \   000031   7A93         MOV     R2,#-0x6d
   \   000033   7B0A         MOV     R3,#0xa
   \   000035   90....       MOV     DPTR,#(MT_BuildAndSendZToolCB & 0xffff)
   \   000038   74..         MOV     A,#((MT_BuildAndSendZToolCB >> 16) & 0xff)
   \   00003A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1456          #define CB_ID_ZDO_SERVERDISC_RSP             0x00080000
   1457          }
   \   00003D   7405         MOV     A,#0x5
   \   00003F   80..         SJMP    ?Subroutine65
   1458          #endif
   1459          
   1460          /*********************************************************************
   1461          *********************************************************************/
   1462          
   1463          #endif   /*ZDO Command Processing in MT*/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MT_ZdoCommandProcessing            1      0    124
       -> ZDApp_SendEndDeviceBindReq
                                        0      0    230
       -> ZDApp_AutoFindDestinationEx
                                        0      0    230
       -> zdo_MT_MakeExtAddr            0      0    230
       -> ZDP_NwkAddrReq                0      0    230
       -> ZDP_IEEEAddrReq               0      0    230
       -> ZDP_NWKAddrOfInterestReq      0      0    232
       -> ZDP_NWKAddrOfInterestReq      0      0    232
       -> ZDP_SimpleDescReq             0      0    232
       -> ZDP_NWKAddrOfInterestReq      0      0    232
       -> ZDP_MatchDescReq              0      0    246
       -> ZDP_NWKAddrOfInterestReq      0      0    232
       -> ZDP_NWKAddrOfInterestReq      0      0    232
       -> ZDP_EndDeviceBindReq          0      0    248
       -> MT_ReverseBytes               0      0    230
       -> NLME_GetProtocolVersion       0      0    230
       -> MT_ReverseBytes               0      0    230
       -> osal_cpyExtAddr               0      0    230
       -> ZDP_BindUnbindReq             0      0    246
       -> MT_ReverseBytes               0      0    230
       -> NLME_GetProtocolVersion       0      0    230
       -> MT_ReverseBytes               0      0    230
       -> osal_cpyExtAddr               0      0    230
       -> ZDP_BindUnbindReq             0      0    246
       -> osal_memcpy                   0      0    236
       -> ZDP_UserDescSet               0      0    234
       -> ZDP_ServerDiscReq             0      0    230
       -> ZDApp_StartUpFromApp          0      0    230
       -> MT_SendSPIRespMsg             0      0    230
     zdo_MTCB_BindRspCB                 1      0     12
       -> MT_BuildAndSendZToolCB        0      0     24
     zdo_MTCB_MatchActiveEPRspCB        1      0     39
       -> MT_BuildAndSendZToolCB        0      0     68
     zdo_MTCB_NodeDescRspCB             1      0     29
       -> MT_BuildAndSendZToolCB        0      0     54
     zdo_MTCB_NwkIEEEAddrRspCB          1      0     27
       -> osal_mem_alloc                0      0     38
       -> zdo_MT_CopyRevExtAddr         0      0     38
       -> zdo_MT_CopyRevExtAddr         0      0     38
       -> MT_BuildAndSendZToolCB        0      0     38
       -> osal_mem_free                 0      0     38
     zdo_MTCB_PowerDescRspCB            1      0     21
       -> MT_BuildAndSendZToolCB        0      0     38
     zdo_MTCB_ServerDiscRspCB           3      0      6
       -> MT_BuildAndSendZToolCB        4      0     10
     zdo_MTCB_SimpleDescRspCB           1      0     21
       -> osal_mem_alloc                0      0     36
       -> MT_BuildAndSendZToolCB        0      0     36
       -> osal_mem_free                 0      0     36
     zdo_MTCB_UserDescConfCB            3      0      3
       -> MT_BuildAndSendZToolCB        4      0      6
     zdo_MTCB_UserDescRspCB             1      0     23
       -> osal_mem_alloc                0      0     32
       -> osal_memset                   0      0     32
       -> osal_memcpy                   0      0     38
       -> MT_BuildAndSendZToolCB        0      0     32
       -> osal_mem_free                 0      0     32
     zdo_MT_CopyRevExtAddr              0      0     28
       -> osal_cpyExtAddr               0      0     18
       -> MT_ReverseBytes               0      0     18
     zdo_MT_MakeExtAddr                 1      0    124
       -> zdo_MT_CopyRevExtAddr         0      0     18


   Segment part sizes:

     Function/Label              Bytes
     --------------              -----
     _zdoCallbackSub                4
     MT_ZdoCommandProcessing     1168
     ?Subroutine25                  9
     ?Subroutine47                  7
     ?Subroutine58                  8
     ?Subroutine24                 12
     ?Subroutine22                 12
     ?Subroutine45                  4
     ?Subroutine54                  4
     ?Subroutine60                  7
     ?Subroutine21                 23
     ?Subroutine46                 11
     ?Subroutine18                  9
     ?Subroutine59                  8
     ?Subroutine15                 19
     ?Subroutine14                 12
     ?Subroutine13                 21
     ?Subroutine10                 15
     ?Subroutine7                   6
     ?Subroutine39                 37
     ?Subroutine6                  32
     ?Subroutine4                  14
     ?Subroutine3                  30
     ?Subroutine50                  7
     ?Subroutine41                  6
     ?Subroutine52                  6
     ?Subroutine2                   4
     ?Subroutine37                 14
     ?Subroutine1                   9
     ?Subroutine44                 19
     ?Subroutine0                  16
     ?Subroutine38                  4
     ?Subroutine51                 33
     ?Subroutine56                 16
     ?Subroutine57                  8
     zdo_MT_CopyRevExtAddr         28
     ?Subroutine63                  9
     ?Subroutine36                 11
     zdo_MT_MakeExtAddr            31
     zdo_MTCB_NwkIEEEAddrRspCB    405
     ?Subroutine29                  1
     ?Subroutine61                  6
     ?Subroutine19                  9
     ?Subroutine17                  5
     ?Subroutine9                   8
     ?Subroutine42                  7
     zdo_MTCB_NodeDescRspCB       272
     ?Subroutine64                  8
     ?Subroutine32                  4
     ?Subroutine49                  8
     ?Subroutine30                  6
     ?Subroutine33                  5
     ?Subroutine55                  1
     ?Subroutine62                  5
     ?Subroutine31                  7
     ?Subroutine28                  4
     ?Subroutine48                 12
     ?Subroutine26                  6
     ?Subroutine11                 20
     ?Subroutine23                  8
     zdo_MTCB_PowerDescRspCB      145
     ?Subroutine12                  8
     zdo_MTCB_SimpleDescRspCB     313
     ?Subroutine35                 12
     ?Subroutine20                 17
     ?Subroutine16                 11
     ?Subroutine40                  7
     ?Subroutine8                  13
     ?Subroutine5                  50
     ?Subroutine43                  4
     ?Subroutine53                  9
     ?Subroutine34                  9
     zdo_MTCB_MatchActiveEPRspCB  190
     zdo_MTCB_BindRspCB            64
     ?Subroutine27                  6
     zdo_MTCB_UserDescRspCB       153
     zdo_MTCB_UserDescConfCB       47
     ?Subroutine65                 10
     zdo_MTCB_ServerDiscRspCB      65

 
 3 629 bytes in segment BANKED_CODE
     4 bytes in segment XDATA_Z
 
 3 629 bytes of CODE  memory
     4 bytes of XDATA memory

Errors: none
Warnings: none
