//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:25:54 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\osal\common\OSAL_Memory.c                     /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wC /
//                          oord.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS     /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D ZTOOL_P1 -D MT_TASK -D            /
//                          MT_ZDO_FUNC -lC E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\CoordinatorEB\L /
//                          ist\ -lA E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\CoordinatorEB\List\    /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\CoordinatorEB\Obj\ -e        /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\osal\common\OSAL_Memory.c"                   /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\CoordinatorEB\List\OSAL_Memory. /
//                          s51                                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME OSAL_Memory

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBWEAK _A_IEN0
        PUBLIC osal_heap_high_water
        FUNCTION osal_heap_high_water,0203H
        PUBLIC osal_mem_alloc
        FUNCTION osal_mem_alloc,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC osal_mem_free
        FUNCTION osal_mem_free,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_mem_init
        FUNCTION osal_mem_init,021203H
        ARGFRAME XSTACK, 14, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_mem_kick
        FUNCTION osal_mem_kick,0203H
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\osal\common\OSAL_Memory.c
//    1 /*********************************************************************
//    2     Filename:       OSAL_Memory.c
//    3     Revised:        $Date: 2006-10-26 11:15:57 -0700 (Thu, 26 Oct 2006) $
//    4     Revision:       $Revision: 12421 $
//    5 
//    6     Description: OSAL Heap Memory management functions.
//    7 
//    8     Copyright (c) 2006 by Texas Instruments, Inc.
//    9     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   10     derivative works, modify, distribute, perform, display or sell this
//   11     software and/or its documentation for any purpose is prohibited
//   12     without the express written consent of Texas Instruments, Inc.
//   13 *********************************************************************/
//   14 
//   15 /*********************************************************************
//   16  * INCLUDES
//   17  */
//   18 
//   19 #include "ZComDef.h"
//   20 #include "OSAL_Memory.h"
//   21 #include "OnBoard.h"
//   22 #include "hal_assert.h"
//   23 
//   24 #if ( MAXMEMHEAP >= 32768 )
//   25   #error MAXMEMHEAP is too big to manage!
//   26 #endif
//   27 
//   28 // Minimum wasted bytes to justify splitting a block before allocation.
//   29 #if !defined ( OSALMEM_MIN_BLKSZ )
//   30   #define OSALMEM_MIN_BLKSZ    4
//   31 #endif
//   32 
//   33 /* Profiling memory allocations showed that a significant % of very high
//   34  * frequency allocations/frees are for block sizes less than or equal to 16.
//   35  */
//   36 #if !defined ( OSALMEM_SMALL_BLKSZ )
//   37   #define OSALMEM_SMALL_BLKSZ  16
//   38 #endif
//   39 
//   40 #if !defined ( OSALMEM_NODEBUG )
//   41   #define OSALMEM_NODEBUG      TRUE
//   42 #endif
//   43 
//   44 #if !defined ( OSALMEM_PROFILER )
//   45   #define OSALMEM_PROFILER     FALSE
//   46 #endif
//   47 
//   48 #if !defined ( OSALMEM_GUARD )
//   49   #define OSALMEM_GUARD  TRUE  // TBD - Hacky workaround til Bugzilla 1252 is fixed!
//   50   #define OSALMEM_READY  0xE2
//   51 #endif
//   52 
//   53 #if ( OSALMEM_PROFILER )
//   54   #define OSALMEM_INIT   'X'
//   55   #define OSALMEM_ALOC   'A'
//   56   #define OSALMEM_REIN   'F'
//   57 #endif
//   58 
//   59 /*********************************************************************
//   60  * MACROS
//   61  */
//   62 
//   63 /*
//   64  *  The MAC_ASSERT macro is for use during debugging.
//   65  *  The given expression must evaluate as "true" or else fatal error occurs.
//   66  *  At that point, the call stack feature of the debugger can pinpoint where
//   67  *  the problem occurred.
//   68  *
//   69  *  To disable this feature and save code size, the project should define
//   70  *  OSALMEM_NODEBUG to TRUE.
//   71  */
//   72 #if ( OSALMEM_NODEBUG )
//   73   #define OSALMEM_ASSERT( expr )
//   74   #define OSALMEM_DEBUG( statement )
//   75 #else
//   76   #define OSALMEM_ASSERT( expr)        HAL_ASSERT( expr )
//   77   #define OSALMEM_DEBUG( statement)    st( statement )
//   78 #endif
//   79 
//   80 /*********************************************************************
//   81  * TYPEDEFS
//   82  */
//   83 
//   84 typedef uint16  osalMemHdr_t;
//   85 
//   86 /*********************************************************************
//   87  * CONSTANTS
//   88  */
//   89 
//   90 #define OSALMEM_IN_USE  0x8000
//   91 
//   92 /* This number sets the size of the small-block bucket. Although profiling
//   93  * shows max simultaneous alloc of 16x18, timing without profiling overhead
//   94  * shows that the best worst case is achieved with the following.
//   95  */
//   96 #define SMALLBLKHEAP    232
//   97 
//   98 // To maintain data alignment of the pointer returned, reserve the greater
//   99 // space for the memory block header.
//  100 #define HDRSZ  ( (sizeof ( halDataAlign_t ) > sizeof( osalMemHdr_t )) ? \ 
//  101                   sizeof ( halDataAlign_t ) : sizeof( osalMemHdr_t ) )
//  102 
//  103 /*********************************************************************
//  104  * GLOBAL VARIABLES
//  105  */
//  106 
//  107 /*********************************************************************
//  108  * EXTERNAL VARIABLES
//  109  */
//  110 
//  111 /*********************************************************************
//  112  * EXTERNAL FUNCTIONS
//  113  */
//  114 
//  115 /*********************************************************************
//  116  * LOCAL VARIABLES
//  117  */
//  118 
//  119 #if ( OSALMEM_GUARD )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  120   static byte ready = 0;
??ready:
        DS 1
//  121 #endif
//  122 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  123 static osalMemHdr_t *ff1;  // First free block in the small-block bucket.
??ff1:
        DS 2

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  124 static osalMemHdr_t *ff2;  // First free block after the small-block bucket.
??ff2:
        DS 2
//  125 
//  126 #if ( OSALMEM_METRICS )
//  127   static uint16 blkMax;  // Max cnt of all blocks ever seen at once.
//  128   static uint16 blkCnt;  // Current cnt of all blocks.
//  129   static uint16 blkFree; // Current cnt of free blocks.
//  130   static uint16 memAlo;  // Current total memory allocated.
//  131   static uint16 memMax;  // Max total memory ever allocated at once.
//  132 #endif
//  133 
//  134 #if ( OSALMEM_PROFILER )
//  135   #define OSALMEM_PROMAX  8
//  136   /* The profiling buckets must differ by at least OSALMEM_MIN_BLKSZ; the
//  137    * last bucket must equal the max alloc size. Set the bucket sizes to
//  138    * whatever sizes necessary to show how your application is using memory.
//  139    */
//  140   static uint16 proCnt[OSALMEM_PROMAX] = { 
//  141     OSALMEM_SMALL_BLKSZ, 48, 112, 176, 192, 224, 256, 65535 };
//  142   static uint16 proCur[OSALMEM_PROMAX] = { 0 };
//  143   static uint16 proMax[OSALMEM_PROMAX] = { 0 };
//  144   static uint16 proTot[OSALMEM_PROMAX] = { 0 };
//  145   static uint16 proSmallBlkMiss;
//  146 #endif
//  147 
//  148 // Memory Allocation Heap.
//  149 #if defined( EXTERNAL_RAM )
//  150   static byte *theHeap = (byte *)EXT_RAM_BEG;
//  151 #else

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  152   static halDataAlign_t _theHeap[ MAXMEMHEAP / sizeof( halDataAlign_t ) ];
??_theHeap:
        DS 4096

        RSEG XDATA_I:XDATA:NOROOT(0)
//  153   static byte *theHeap = (byte *)_theHeap;
??theHeap:
        DS 2
        REQUIRE `?<Initializer for theHeap>`
        REQUIRE __INIT_XDATA_I
//  154 #endif
//  155 
//  156 /*********************************************************************
//  157  * LOCAL FUNCTIONS
//  158  */
//  159 
//  160 /*********************************************************************
//  161  * @fn      osal_mem_init
//  162  *
//  163  * @brief   Initialize the heap memory management system.
//  164  *
//  165  * @param   void
//  166  *
//  167  * @return  void
//  168  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  169 void osal_mem_init( void )
osal_mem_init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function osal_mem_init
//  170 {
        FUNCALL osal_mem_init, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  171   osalMemHdr_t *tmp;
//  172 
//  173 #if ( OSALMEM_PROFILER )
//  174   osal_memset( theHeap, OSALMEM_INIT, MAXMEMHEAP );
//  175 #endif
//  176 
//  177   // Setup a NULL block at the end of the heap for fast comparisons with zero.
//  178   tmp = (osalMemHdr_t *)theHeap + (MAXMEMHEAP / HDRSZ) - 1;
//  179   *tmp = 0;
        MOV	DPTR,#??theHeap
        MOVX	A,@DPTR
        ADD	A,#-0x2
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0xf
        MOV	R1,A
        MOV	DPL,R0
        MOV	DPH,R1
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  180 
//  181   // Setup a small-block bucket.
//  182   tmp = (osalMemHdr_t *)theHeap;
//  183   *tmp = SMALLBLKHEAP;
        MOV	DPTR,#??theHeap
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        MOV	A,#-0x18
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  184 
//  185   // Setup the wilderness.
//  186   tmp = (osalMemHdr_t *)theHeap + (SMALLBLKHEAP / HDRSZ);
        MOV	DPTR,#??theHeap
        MOVX	A,@DPTR
        ADD	A,#-0x18
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
//  187   *tmp = ((MAXMEMHEAP / HDRSZ) * HDRSZ) - SMALLBLKHEAP - HDRSZ;
        MOV	DPL,R0
        MOV	DPH,R1
        MOV	A,#0x16
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#0xf
        MOVX	@DPTR,A
//  188 
//  189 #if ( OSALMEM_GUARD )
//  190   ready = OSALMEM_READY;
        MOV	A,#-0x1e
        MOV	DPTR,#??ready
        MOVX	@DPTR,A
//  191 #endif
//  192 
//  193   // Setup a NULL block that is never freed so that the small-block bucket
//  194   // is never coalesced with the wilderness.
//  195   ff1 = tmp;
        MOV	DPTR,#??ff1
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
//  196   ff2 = osal_mem_alloc( 0 );
        ; Setup parameters for call to function osal_mem_alloc
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#??ff2
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  197   ff1 = (osalMemHdr_t *)theHeap;
        MOV	DPTR,#??theHeap
        LCALL	?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  198 
//  199 #if ( OSALMEM_METRICS )
//  200   /* Start with the small-block bucket and the wilderness - don't count the
//  201    * end-of-heap NULL block nor the end-of-small-block NULL block.
//  202    */
//  203   blkCnt = blkFree = 2;
//  204 #endif
//  205 }
??CrossCallReturnLabel_0:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock1
//  206 
//  207 /*********************************************************************
//  208  * @fn      osal_mem_kick
//  209  *
//  210  * @brief   Kick the ff1 pointer out past the long-lived OSAL Task blocks.
//  211  *          Invoke this once after all long-lived blocks have been allocated -
//  212  *          presently at the end of osal_init_system().
//  213  *
//  214  * @param   void
//  215  *
//  216  * @return  void
//  217  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  218 void osal_mem_kick( void )
osal_mem_kick:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function osal_mem_kick
//  219 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  220   halIntState_t intState;
//  221 
//  222   HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        CLR	0xa8.7
//  223 
//  224   /* Logic in osal_mem_free() will ratchet ff1 back down to the first free
//  225    * block in the small-block bucket.
//  226    */
//  227   ff1 = ff2;
        MOV	DPTR,#??ff2
        LCALL	?Subroutine0 & 0xFFFF
//  228 
//  229   HAL_EXIT_CRITICAL_SECTION( intState );  // Re-enable interrupts.
??CrossCallReturnLabel_1:
        MOV	0xa8.7,C
//  230 }
        SJMP	?Subroutine2
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond4) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond4) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond4) CFA_SP SP+-5
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        LCALL	??Subroutine1_0 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV	DPTR,#??ff1
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  231 
//  232 /*********************************************************************
//  233  * @fn      osal_mem_alloc
//  234  *
//  235  * @brief   Implementation of the allocator functionality.
//  236  *
//  237  * @param   size - number of bytes to allocate from the heap.
//  238  *
//  239  * @return  void * - pointer to the heap allocation; NULL if error or failure.
//  240  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  241 void *osal_mem_alloc( uint16 size )
osal_mem_alloc:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function osal_mem_alloc
//  242 {
        FUNCALL osal_mem_alloc, osal_mem_init
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
//  243   osalMemHdr_t *prev;
//  244   osalMemHdr_t *hdr;
//  245   halIntState_t intState;
//  246   uint16 tmp;
//  247   byte coal = 0;
        MOV	?V0 + 2,#0x0
//  248 
//  249 #if ( OSALMEM_GUARD )
//  250   // Try to protect against premature use by HAL / OSAL.
//  251   if ( ready != OSALMEM_READY )
        MOV	DPTR,#??ready
        MOVX	A,@DPTR
        XRL	A,#0xe2
        JZ	??osal_mem_alloc_0
//  252   {
//  253     osal_mem_init();
        ; Setup parameters for call to function osal_mem_init
        MOV	DPTR,#(osal_mem_init & 0xffff)
        MOV	A,#((osal_mem_init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  254   }
//  255 #endif
//  256 
//  257   OSALMEM_ASSERT( size );
//  258 
//  259   size += HDRSZ;
??osal_mem_alloc_0:
        MOV	A,?V0 + 0
        ADD	A,#0x2
        MOV	?V0 + 0,A
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	?V0 + 1,A
//  260 
//  261   // Calculate required bytes to add to 'size' to align to halDataAlign_t.
//  262   if ( sizeof( halDataAlign_t ) == 2 )
//  263   {
//  264     size += (size & 0x01);
//  265   }
//  266   else if ( sizeof( halDataAlign_t ) != 1 )
//  267   {
//  268     const byte mod = size % sizeof( halDataAlign_t );
//  269 
//  270     if ( mod != 0 )
//  271     {
//  272       size += (sizeof( halDataAlign_t ) - mod);
//  273     }
//  274   }
//  275 
//  276   HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R4,A
        CLR	0xa8.7
//  277 
//  278   // Smaller allocations are first attempted in the small-block bucket.
//  279   if ( size <= OSALMEM_SMALL_BLKSZ )
        CLR	C
        MOV	A,?V0 + 0
        SUBB	A,#0x11
        MOV	A,?V0 + 1
        SUBB	A,#0x0
        JNC	??osal_mem_alloc_1
//  280   {
//  281     hdr = ff1;
        MOV	DPTR,#??ff1
        SJMP	??osal_mem_alloc_2
//  282   }
//  283   else
//  284   {
//  285     hdr = ff2;
??osal_mem_alloc_1:
        MOV	DPTR,#??ff2
??osal_mem_alloc_2:
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        LCALL	?Subroutine1 & 0xFFFF
//  286   }
//  287   tmp = *hdr;
//  288 
//  289   do
//  290   {
//  291     if ( tmp & OSALMEM_IN_USE )
??CrossCallReturnLabel_2:
        MOV	A,#-0x80
        ANL	A,R1
        MOV	?V0 + 5,A
        CLR	A
        JNZ	??osal_mem_alloc_3
        MOV	A,?V0 + 5
??osal_mem_alloc_3:
        JZ	??osal_mem_alloc_4
//  292     {
//  293       tmp ^= OSALMEM_IN_USE;
        MOV	A,#-0x80
        XRL	A,R1
        MOV	R1,A
//  294       coal = 0;
        MOV	?V0 + 2,#0x0
        SJMP	??osal_mem_alloc_5
//  295     }
//  296     else
//  297     {
//  298       if ( coal != 0 )
??osal_mem_alloc_4:
        MOV	A,?V0 + 2
        JZ	??osal_mem_alloc_6
//  299       {
//  300 #if ( OSALMEM_METRICS )
//  301         blkCnt--;
//  302         blkFree--;
//  303 #endif
//  304 
//  305         *prev += *hdr;
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 5,A
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        ADD	A,?V0 + 4
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,?V0 + 5
        MOVX	@DPTR,A
//  306 
//  307         if ( *prev >= size )
        MOV	DPL,R6
        MOV	DPH,R7
        CLR	C
        MOVX	A,@DPTR
        SUBB	A,?V0 + 0
        INC	DPTR
        MOVX	A,@DPTR
        SUBB	A,?V0 + 1
        JC	??osal_mem_alloc_5
//  308         {
//  309           hdr = prev;
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        LCALL	?Subroutine1 & 0xFFFF
//  310           tmp = *hdr;
//  311           break;
//  312         }
//  313       }
//  314       else
//  315       {
//  316         if ( tmp >= size )
//  317         {
//  318           break;
//  319         }
//  320 
//  321         coal = 1;
//  322         prev = hdr;
//  323       }
//  324     }
//  325 
//  326     hdr = (osalMemHdr_t *)((byte *)hdr + tmp);
//  327 
//  328     tmp = *hdr;
//  329     if ( tmp == 0 )
//  330     {
//  331       hdr = NULL;
//  332       break;
//  333     }
//  334 
//  335 
//  336   } while ( 1 );
//  337 
//  338   if ( hdr != NULL )
??CrossCallReturnLabel_3:
        MOV	A,R2
        JNZ	??osal_mem_alloc_7
        MOV	A,R3
??osal_mem_alloc_7:
        JZ	??osal_mem_alloc_8
//  339   {
//  340     tmp -= size;
        CLR	C
        MOV	A,R0
        SUBB	A,?V0 + 0
        MOV	R0,A
        MOV	A,R1
        SUBB	A,?V0 + 1
        MOV	R1,A
//  341 
//  342     // Determine whether the threshold for splitting is met.
//  343     if ( tmp >= OSALMEM_MIN_BLKSZ )
        CLR	C
        MOV	A,R0
        SUBB	A,#0x4
        MOV	A,R1
        SUBB	A,#0x0
        JC	??osal_mem_alloc_9
//  344     {
//  345       // Split the block before allocating it.
//  346       osalMemHdr_t *next = (osalMemHdr_t *)((byte *)hdr + size);
//  347       *next = tmp;
        MOV	A,R2
        ADD	A,?V0 + 0
        MOV	DPL,A
        MOV	A,R3
        ADDC	A,?V0 + 1
        MOV	DPH,A
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
//  348       *hdr = (size | OSALMEM_IN_USE);
        MOV	A,#-0x80
        ORL	A,?V0 + 1
        MOV	R1,A
        MOV	DPL,R2
        MOV	DPH,R3
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        SJMP	??osal_mem_alloc_10
//  349 
//  350 #if ( OSALMEM_METRICS )
//  351       blkCnt++;
//  352       if ( blkMax < blkCnt )
//  353       {
//  354         blkMax = blkCnt;
//  355       }
//  356       memAlo += size;
//  357 #endif
//  358     }
??osal_mem_alloc_6:
        CLR	C
        MOV	A,R0
        SUBB	A,?V0 + 0
        MOV	A,R1
        SUBB	A,?V0 + 1
        JNC	??CrossCallReturnLabel_3
        MOV	?V0 + 2,#0x1
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
??osal_mem_alloc_5:
        MOV	A,R2
        ADD	A,R0
        MOV	R2,A
        MOV	A,R3
        ADDC	A,R1
        LCALL	?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV	A,R0
        JNZ	??osal_mem_alloc_11
        MOV	A,R1
??osal_mem_alloc_11:
        JZ	$+5
        LJMP	??CrossCallReturnLabel_2 & 0xFFFF
        MOV	R2,#0x0
        MOV	R3,#0x0
        SJMP	??osal_mem_alloc_8
//  359     else
//  360     {
//  361 #if ( OSALMEM_METRICS )
//  362       memAlo += *hdr;
//  363       blkFree--;
//  364 #endif
//  365 
//  366       *hdr |= OSALMEM_IN_USE;
??osal_mem_alloc_9:
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        ORL	A,#0x80
??osal_mem_alloc_10:
        MOVX	@DPTR,A
//  367     }
//  368 
//  369 #if ( OSALMEM_METRICS )
//  370     if ( memMax < memAlo )
//  371     {
//  372       memMax = memAlo;
//  373     }
//  374 #endif
//  375 
//  376 #if ( OSALMEM_PROFILER )
//  377   {
//  378     byte idx;
//  379     size = *hdr ^ OSALMEM_IN_USE;
//  380 
//  381     for ( idx = 0; idx < OSALMEM_PROMAX; idx++ )
//  382     {
//  383       if ( size <= proCnt[idx] )
//  384       {
//  385         break;
//  386       }
//  387     }
//  388     proCur[idx]++;
//  389     if ( proMax[idx] < proCur[idx] )
//  390     {
//  391       proMax[idx] = proCur[idx];
//  392     }
//  393     proTot[idx]++;
//  394   }
//  395 #endif
//  396 
//  397     hdr++;
        MOV	A,R2
        ADD	A,#0x2
        INC	R2
        INC	R2
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R3,A
//  398 
//  399 #if ( OSALMEM_PROFILER )
//  400     osal_memset( (byte *)hdr, OSALMEM_ALOC, (size - HDRSZ) );
//  401 
//  402     /* A small-block could not be allocated in the small-block bucket.
//  403      * When this occurs significantly frequently, increase the size of the
//  404      * bucket in order to restore better worst case run times. Set the first
//  405      * profiling bucket size in proCnt[] to the small-block bucket size and
//  406      * divide proSmallBlkMiss by the corresponding proTot[] size to get % miss.
//  407      * Best worst case time on TrasmitApp was achieved at a 0-15% miss rate
//  408      * during steady state Tx load, 0% during idle and steady state Rx load.
//  409      */
//  410     if ( (size <= OSALMEM_SMALL_BLKSZ) && (hdr > ff2) )
//  411     {
//  412       proSmallBlkMiss++;
//  413     }
//  414 #endif
//  415   }
//  416 
//  417   HAL_EXIT_CRITICAL_SECTION( intState );  // Re-enable interrupts.
??osal_mem_alloc_8:
        MOV	A,R4
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
//  418 
//  419   return (void *)hdr;
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  420 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV	R3,A
        MOV	DPL,R2
        MOV	DPH,R3
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_1
        CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond11) CFA_SP SP+-5
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_0
        CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond12) CFA_SP SP+-5
??Subroutine1_0:
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
//  421 
//  422 /*********************************************************************
//  423  * @fn      osal_mem_free
//  424  *
//  425  * @brief   Implementation of the de-allocator functionality.
//  426  *
//  427  * @param   ptr - pointer to the memory to free.
//  428  *
//  429  * @return  void
//  430  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  431 void osal_mem_free( void *ptr )
osal_mem_free:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function osal_mem_free
//  432 {
        FUNCALL osal_mem_free, osal_mem_init
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  433   osalMemHdr_t *currHdr;
//  434   halIntState_t intState;
//  435 
//  436 #if ( OSALMEM_GUARD )
//  437   // Try to protect against premature use by HAL / OSAL.
//  438   if ( ready != OSALMEM_READY )
        MOV	DPTR,#??ready
        MOVX	A,@DPTR
        XRL	A,#0xe2
        JZ	??osal_mem_free_0
//  439   {
//  440     osal_mem_init();
        ; Setup parameters for call to function osal_mem_init
        MOV	DPTR,#(osal_mem_init & 0xffff)
        MOV	A,#((osal_mem_init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  441   }
//  442 #endif
//  443 
//  444   HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
??osal_mem_free_0:
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R4,A
        CLR	0xa8.7
//  445 
//  446   OSALMEM_ASSERT( ptr );
//  447 
//  448   currHdr = (osalMemHdr_t *)ptr - 1;
        MOV	A,R6
        ADD	A,#-0x2
        MOV	R0,A
        MOV	A,R7
        ADDC	A,#-0x1
        MOV	R1,A
//  449 
//  450   // Has this block already been freed?
//  451   OSALMEM_ASSERT( *currHdr & OSALMEM_IN_USE );
//  452 
//  453   *currHdr &= ~OSALMEM_IN_USE;
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        ANL	A,#0x7f
        MOVX	@DPTR,A
//  454 
//  455 #if ( OSALMEM_PROFILER )
//  456   {
//  457     uint16 size = *currHdr;
//  458     byte idx;
//  459 
//  460     for ( idx = 0; idx < OSALMEM_PROMAX; idx++ )
//  461     {
//  462       if ( size <= proCnt[idx] )
//  463       {
//  464         break;
//  465       }
//  466     }
//  467 
//  468     proCur[idx]--;
//  469   }
//  470 #endif
//  471 
//  472 #if ( OSALMEM_METRICS )
//  473   memAlo -= *currHdr;
//  474   blkFree++;
//  475 #endif
//  476 
//  477   if ( ff1 > currHdr )
        MOV	DPTR,#??ff1
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        CLR	C
        MOV	A,R0
        SUBB	A,R2
        MOV	A,R1
        SUBB	A,R3
        JNC	??osal_mem_free_1
//  478   {
//  479     ff1 = currHdr;
        MOV	DPTR,#??ff1
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
//  480   }
//  481 
//  482 #if ( OSALMEM_PROFILER )
//  483   osal_memset( (byte *)currHdr+HDRSZ, OSALMEM_REIN, (*currHdr - HDRSZ) );
//  484 #endif
//  485 
//  486   HAL_EXIT_CRITICAL_SECTION( intState );  // Re-enable interrupts.
??osal_mem_free_1:
        MOV	A,R4
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
//  487 }
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13
//  488 
//  489 #if ( OSALMEM_METRICS )
//  490 /*********************************************************************
//  491  * @fn      osal_heap_block_max
//  492  *
//  493  * @brief   Return the maximum number of blocks ever allocated at once.
//  494  *
//  495  * @param   none
//  496  *
//  497  * @return  Maximum number of blocks ever allocated at once.
//  498  */
//  499 uint16 osal_heap_block_max( void )
//  500 {
//  501   return blkMax;
//  502 }
//  503 
//  504 /*********************************************************************
//  505  * @fn      osal_heap_block_cnt
//  506  *
//  507  * @brief   Return the current number of blocks now allocated.
//  508  *
//  509  * @param   none
//  510  *
//  511  * @return  Current number of blocks now allocated.
//  512  */
//  513 uint16 osal_heap_block_cnt( void )
//  514 {
//  515   return blkCnt;
//  516 }
//  517 
//  518 /*********************************************************************
//  519  * @fn      osal_heap_block_free
//  520  *
//  521  * @brief   Return the current number of free blocks.
//  522  *
//  523  * @param   none
//  524  *
//  525  * @return  Current number of free blocks.
//  526  */
//  527 uint16 osal_heap_block_free( void )
//  528 {
//  529   return blkFree;
//  530 }
//  531 
//  532 /*********************************************************************
//  533  * @fn      osal_heap_mem_used
//  534  *
//  535  * @brief   Return the current number of bytes allocated.
//  536  *
//  537  * @param   none
//  538  *
//  539  * @return  Current number of bytes allocated.
//  540  */
//  541 uint16 osal_heap_mem_used( void )
//  542 {
//  543   return memAlo;
//  544 }
//  545 #endif
//  546 
//  547 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  548 /*********************************************************************
//  549  * @fn      osal_heap_high_water
//  550  *
//  551  * @brief   Return the highest byte ever allocated in the heap.
//  552  *
//  553  * @param   none
//  554  *
//  555  * @return  Highest number of bytes ever used by the stack.
//  556  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  557 uint16 osal_heap_high_water( void )
osal_heap_high_water:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function osal_heap_high_water
//  558 {
        ; Saved register size: 0
        ; Auto size: 0
//  559 #if ( OSALMEM_METRICS )
//  560   return memMax;
//  561 #else
//  562   return MAXMEMHEAP;
        MOV	R2,#0x0
        MOV	R3,#0x10
        LJMP	?BRET
        CFI EndBlock cfiBlock14
//  563 #endif
//  564 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for theHeap>`:
        DW ??_theHeap

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        END
//  565 #endif
//  566 
//  567 /*********************************************************************
//  568 *********************************************************************/
// 
//   514 bytes in segment BANKED_CODE
//     1 byte  in segment SFR_AN
//     2 bytes in segment XDATA_I
//     2 bytes in segment XDATA_ID
// 4 101 bytes in segment XDATA_Z
// 
//   516 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 1 byte shared)
// 4 103 bytes of XDATA memory
//
//Errors: none
//Warnings: none
