##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   17/Oct/2013  21:25:57 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\Source\SampleApp.c                          #
#    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCoor #
#                          d.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS       #
#                          "-DCONST=const __code" -DGENERIC=__generic) -f    #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConfig. #
#                          cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800     #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\Source\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mt\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2430EB\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\osal\mcu #
#                          \ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC #
#                          2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\osal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ #
#                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects #
#                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. #
#                          \Components\stack\af\ -I                          #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\stack\nw #
#                          k\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C #
#                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2430DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ #
#                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\zmac\f8w #
#                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                       #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          mac\high_level\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf03\ -I                #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\low_ #
#                          level\srf03\single_chip\ -D CC2430EB -D ZTOOL_P1  #
#                          -D MT_TASK -D MT_ZDO_FUNC -lC                     #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\ -lA            #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\CoordinatorEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\Source\SampleApp.c                          #
#    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\SampleApp.lst   #
#    Object file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\Obj\SampleApp.r51    #
#                                                                            #
#                                                                            #
##############################################################################

E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /*********************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2007-05-31 15:56:04 -0700 (Thu, 31 May 2007) $
      4            Revision:       $Revision: 14490 $
      5          
      6            Description:
      7          				  - Sample Application (no Profile).
      8          				
      9                    This application isn't intended to do anything useful,
     10                    it is intended to be a simple example of an application's
     11                    structure.
     12          
     13                    This application sends it's messages either as broadcast or
     14                    broadcast filtered group messages.  The other (more normal)
     15                    message addressing is unicast.  Most of the other
     16                    sample applications are written to support the unicast
     17                    message model.
     18          
     19                    Key control:
     20                      SW1:  Sends a flash command to all devices in Group 1.
     21                      SW2:  Adds/Removes (toggles) this device in and out
     22                            of Group 1.  This will enable and disable the
     23                            reception of the flash command.
     24          
     25            Notes:
     26          
     27            Copyright (c) 2007 by Texas Instruments, Inc.
     28            All Rights Reserved.  Permission to use, reproduce, copy, prepare
     29            derivative works, modify, distribute, perform, display or sell this
     30            software and/or its documentation for any purpose is prohibited
     31            without the express written consent of Texas Instruments, Inc.
     32          *********************************************************************/
     33          
     34          /*********************************************************************
     35           * INCLUDES
     36           */
     37          #include "OSAL.h"
     38          #include "ZGlobals.h"
     39          #include "AF.h"
     40          #include "aps_groups.h"
     41          #include "ZDApp.h"
     42          
     43          #include "SampleApp.h"
     44          #include "SampleAppHw.h"
     45          
     46          #include "OnBoard.h"
     47          
     48          /* HAL */
     49          #include "hal_lcd.h"
     50          #include "hal_led.h"
     51          #include "hal_key.h"
     52          
     53          #include "string.h"
     54          
     55          /*********************************************************************
     56           * MACROS
     57           */
     58          
     59          /*********************************************************************
     60           * CONSTANTS
     61           */
     62          
     63          /*********************************************************************
     64           * TYPEDEFS
     65           */
     66          
     67          /*********************************************************************
     68           * GLOBAL VARIABLES
     69           */
     70          
     71          // This list should be filled with Application specific Cluster IDs.
     72          
     73          struct join
     74          {
     75          	uint8 RfdCount ;		//RFD¼ÆÊýÆ÷
     76          	uint8 RouterCount;	//Â·ÓÉÆ÷¼ÆÊýÆ÷
     77          	uint8 RfdAddr[20][10];	//´æ´¢RFD½ÚµãµØÖ·ÓÃ£¬¸ßÁ½Î»ÎªÍøÂçµØÖ·£¬µÍ8Î»ÎªÎïÀíµØÖ·
     78          	uint8 RouterAddr[20][10];//´æ´¢RFD½ÚµãµØÖ·ÓÃ£¬¸ßÁ½Î»ÎªÍøÂçµØÖ·£¬µÍ8Î»ÎªÎïÀíµØÖ·

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     79          }JoinNode;
   \                     JoinNode:
   \   000000                DS 402
     80          
     81          union j{
     82            uint8 TxBuf[66];
     83            struct RFTXBUF
     84            {
     85                  uint8 HeadCom[3]; //ÃüÁîÍ·
     86                  uint8 Node_type[3];
     87                  uint8 IEEE[8];
     88                  uint16 Saddr;
     89                  uint8 DataBuf[50];  //Êý¾Ý»º³åÇø
     90            }TXDATA;

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     91          }RfTx;//ÎÞÏß·¢ËÍ»º³åÇø
   \                     RfTx:
   \   000000                DS 66
     92          

   \                                 In segment XDATA_I, align 1, keep-with-next
     93          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for SampleApp_ClusterList>`
   \   000004                REQUIRE __INIT_XDATA_I
     94          {
     95            SAMPLEAPP_PERIODIC_CLUSTERID,
     96            SAMPLEAPP_FLASH_CLUSTERID
     97          };
     98          

   \                                 In segment XDATA_I, align 1, keep-with-next
     99          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for SampleApp_SimpleDesc>`
   \   00000C                REQUIRE __INIT_XDATA_I
    100          {
    101            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    102            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    103            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    104            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    105            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    106            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    107            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    108            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    109            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    110          };
    111          
    112          // This is the Endpoint/Interface description.  It is defined here, but
    113          // filled-in in SampleApp_Init().  Another way to go would be to fill
    114          // in the structure here and make it a "const" (in code space).  The
    115          // way it's defined in this sample app it is define in RAM.

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    116          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
    117          
    118          /*********************************************************************
    119           * EXTERNAL VARIABLES
    120           */
    121          
    122          /*********************************************************************
    123           * EXTERNAL FUNCTIONS
    124           */
    125          
    126          /*********************************************************************
    127           * LOCAL VARIABLES
    128           */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    129          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
    130                                    // This variable will be received when
    131                                    // SampleApp_Init() is called.

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    132          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
    133          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    134          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
    135          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    136          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 4

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    137          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 4
    138          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    139          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
    140          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    141          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    142          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
    143          
    144          /*********************************************************************
    145           * LOCAL FUNCTIONS
    146           */
    147          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    148          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    149          void SampleApp_SendPeriodicMessage( void );
    150          void SampleApp_SendFlashMessage( uint16 flashTime );
    151          uint8 SendData(uint8 *buf, uint16 addr, uint8 Leng);
    152          
    153          /*********************************************************************
    154           * NETWORK LAYER CALLBACKS
    155           */
    156          
    157          /*********************************************************************
    158           * PUBLIC FUNCTIONS
    159           */
    160          
    161          /*********************************************************************
    162           * @fn      SampleApp_Init
    163           *
    164           * @brief   Initialization function for the Generic App Task.
    165           *          This is called during initialization and should contain
    166           *          any application specific initialization (ie. hardware
    167           *          initialization/setup, table initialization, power up
    168           *          notificaiton ... ).
    169           *
    170           * @param   task_id - the ID assigned by OSAL.  This ID should be
    171           *                    used to send messages and set timers.
    172           *
    173           * @return  none
    174           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    175          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    176          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    177            SampleApp_TaskID = task_id;
   \   000005   E9           MOV     A,R1
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    178            SampleApp_NwkState = DEV_INIT;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000F   F0           MOVX    @DPTR,A
    179            SampleApp_TransID = 0;
   \   000010   E4           CLR     A
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   F0           MOVX    @DPTR,A
    180          
    181            // Device hardware initialization can be added here or in main() (Zmain.c).
    182            // If the hardware is application specific - add it here.
    183            // If the hardware is other parts of the device add it in main().
    184          
    185           #if defined ( SOFT_START )
    186            // The "Demo" target is setup to have SOFT_START and HOLD_AUTO_START
    187            // SOFT_START is a compile option that allows the device to start
    188            //  as a coordinator if one isn't found.
    189            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    190            // together - if they are - we will start up a coordinator. Otherwise,
    191            // the device will start as a router.
    192            //if ( readCoordinatorJumper() )
    193            //  zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    194           // else
    195             // zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    196          #endif // SOFT_START
    197          
    198          #if defined ( HOLD_AUTO_START )
    199            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    200            //  from starting the device and wait for the application to
    201            //  start the device.
    202            ZDOInitDevice(0);
    203          #endif
    204          
    205            // Setup for the periodic message's destination address
    206            // Broadcast to everyone
    207            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000015   740F         MOV     A,#0xf
   \   000017   90....       MOV     DPTR,#(SampleApp_Periodic_DstAddr + 2)
   \   00001A   F0           MOVX    @DPTR,A
    208            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00001B   7414         MOV     A,#0x14
   \   00001D   90....       MOV     DPTR,#(SampleApp_Periodic_DstAddr + 3)
   \   000020   F0           MOVX    @DPTR,A
    209            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000024   74FF         MOV     A,#-0x1
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
    210          
    211            // Setup for the flash command's destination address - Group 1
    212            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000029   7401         MOV     A,#0x1
   \   00002B   90....       MOV     DPTR,#(SampleApp_Flash_DstAddr + 2)
   \   00002E   F0           MOVX    @DPTR,A
    213            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002F   7414         MOV     A,#0x14
   \   000031   90....       MOV     DPTR,#(SampleApp_Flash_DstAddr + 3)
   \   000034   F0           MOVX    @DPTR,A
    214            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000035   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000038   7401         MOV     A,#0x1
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
    215          
    216            // Fill out the endpoint description.
    217            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003E   7414         MOV     A,#0x14
   \   000040   90....       MOV     DPTR,#SampleApp_epDesc
   \   000043   F0           MOVX    @DPTR,A
    218            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000044   90....       MOV     DPTR,#(SampleApp_epDesc + 1)
   \   000047   74..         MOV     A,#(SampleApp_TaskID & 0xff)
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   74..         MOV     A,#((SampleApp_TaskID >> 8) & 0xff)
   \   00004D   F0           MOVX    @DPTR,A
    219            SampleApp_epDesc.simpleDesc
    220                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004E   90....       MOV     DPTR,#(SampleApp_epDesc + 3)
   \   000051   74..         MOV     A,#(SampleApp_SimpleDesc & 0xff)
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   74..         MOV     A,#((SampleApp_SimpleDesc >> 8) & 0xff)
   \   000057   F0           MOVX    @DPTR,A
    221            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000058   E4           CLR     A
   \   000059   90....       MOV     DPTR,#(SampleApp_epDesc + 5)
   \   00005C   F0           MOVX    @DPTR,A
    222          
    223            // Register the endpoint description with the AF
    224            afRegister( &SampleApp_epDesc );
   \   00005D                ; Setup parameters for call to function afRegister
   \   00005D   7A..         MOV     R2,#(SampleApp_epDesc & 0xff)
   \   00005F   7B..         MOV     R3,#((SampleApp_epDesc >> 8) & 0xff)
   \   000061   90....       MOV     DPTR,#(afRegister & 0xffff)
   \   000064   74..         MOV     A,#((afRegister >> 16) & 0xff)
   \   000066   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    225          
    226            // Register for all key events - This app will handle all key events
    227            RegisterForKeys( SampleApp_TaskID );
   \   000069                ; Setup parameters for call to function RegisterForKeys
   \   000069   90....       MOV     DPTR,#SampleApp_TaskID
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   90....       MOV     DPTR,#(RegisterForKeys & 0xffff)
   \   000071   74..         MOV     A,#((RegisterForKeys >> 16) & 0xff)
   \   000073   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    228          
    229            // By default, all devices start out in Group 1
    230            SampleApp_Group.ID = 0x0001;
   \   000076   90....       MOV     DPTR,#SampleApp_Group
   \   000079   7401         MOV     A,#0x1
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
    231            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00007F                ; Setup parameters for call to function osal_memcpy
   \   00007F   75....       MOV     ?V0 + 0,#(`?<Constant "Group 1">` & 0xff)
   \   000082   75....       MOV     ?V0 + 1,#((`?<Constant "Group 1">` >> 8) & 0xff)
   \   000085   F5..         MOV     ?V0 + 2,A
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008C   7C07         MOV     R4,#0x7
   \   00008E   7D00         MOV     R5,#0x0
   \   000090   7A..         MOV     R2,#((SampleApp_Group + 2) & 0xff)
   \   000092   7B..         MOV     R3,#(((SampleApp_Group + 2) >> 8) & 0xff)
   \   000094   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   000097   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   000099   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00009C   7403         MOV     A,#0x3
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    232            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A1                ; Setup parameters for call to function aps_AddGroup
   \   0000A1   7A..         MOV     R2,#(SampleApp_Group & 0xff)
   \   0000A3   7B..         MOV     R3,#((SampleApp_Group >> 8) & 0xff)
   \   0000A5   7914         MOV     R1,#0x14
   \   0000A7   90....       MOV     DPTR,#(aps_AddGroup & 0xffff)
   \   0000AA   74..         MOV     A,#((aps_AddGroup >> 16) & 0xff)
   \   0000AC   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    233          
    234          #if defined ( LCD_SUPPORTED )
    235            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    236          #endif
    237          }
   \   0000AF   7F03         MOV     R7,#0x3
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    238          
    239          /*********************************************************************
    240           * @fn      SampleApp_ProcessEvent
    241           *
    242           * @brief   Generic Application Task event processor.  This function
    243           *          is called to process all events for the task.  Events
    244           *          include timers, messages and any other user defined events.
    245           *
    246           * @param   task_id  - The OSAL assigned task ID.
    247           * @param   events - events to process.  This is a bit map and can
    248           *                   contain more than one event.
    249           *
    250           * @return  none
    251           */
    252          void UartTX_Send_String(char *Data,int len);
    253          void UartTX_Send_Single(char single_Data);

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    254          uint8 RxBuf[50];
   \                     RxBuf:
   \   000000                DS 50

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    255          uint8 TxBuf[50];
   \                     TxBuf:
   \   000000                DS 50

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    256          int clear = 0;
   \                     clear:
   \   000000                DS 2

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    257          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    258          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    259            afIncomingMSGPacket_t *MSGpkt;
    260          
    261            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??SampleApp_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??SampleApp_ProcessEvent_0:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??SampleApp_ProcessEvent_1 & 0xFFFF
    262            {
    263              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   805D         SJMP    ??SampleApp_ProcessEvent_2
    264              while ( MSGpkt )
    265              {
    266                switch ( MSGpkt->hdr.event )
    267                {
    268                  // Received when a key is pressed
    269                  case KEY_CHANGE:
    270                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    271                    break;
    272          
    273                  // Received when a messages is received (OTA) for this endpoint
    274                  case AF_INCOMING_MSG_CMD:
    275                    SampleApp_MessageMSGCB( MSGpkt );
    276                    break;
    277          
    278                  // Received whenever the device changes state in the network
    279                  case ZDO_STATE_CHANGE:
    280                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_3:
   \   000018   85..82       MOV     DPL,?V0 + 0
   \   00001B   85..83       MOV     DPH,?V0 + 1
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   90....       MOV     DPTR,#SampleApp_NwkState
   \   000023   F0           MOVX    @DPTR,A
    281                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    282                        || (SampleApp_NwkState == DEV_ROUTER)
    283                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000024   6409         XRL     A,#0x9
   \   000026   600A         JZ      ??SampleApp_ProcessEvent_4
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6407         XRL     A,#0x7
   \   00002B   6005         JZ      ??SampleApp_ProcessEvent_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6406         XRL     A,#0x6
   \   000030   7037         JNZ     ??SampleApp_ProcessEvent_5
    284                    {
    285          #if defined( ZDO_COORDINATOR )
    286                      UartTX_Send_String("haha!Nework found succeed\n",26);
   \                     ??SampleApp_ProcessEvent_4:
   \   000032                ; Setup parameters for call to function UartTX_Send_String
   \   000032   7C1A         MOV     R4,#0x1a
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A..         MOV     R2,#(`?<Constant "haha!Nework found suc...">` & 0xff)
   \   000038   7B..         MOV     R3,#((`?<Constant "haha!Nework found suc...">` >> 8) & 0xff)
   \   00003A   90....       MOV     DPTR,#(UartTX_Send_String & 0xffff)
   \   00003D   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   00003F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    287                      HalLedBlink( HAL_LED_4, 4, 50, 250 );
   \   000042                ; Setup parameters for call to function HalLedBlink
   \   000042   7CFA         MOV     R4,#-0x6
   \   000044   7D00         MOV     R5,#0x0
   \   000046   7B32         MOV     R3,#0x32
   \   000048   7A04         MOV     R2,#0x4
   \   00004A   7908         MOV     R1,#0x8
   \   00004C   90....       MOV     DPTR,#(HalLedBlink & 0xffff)
   \   00004F   74..         MOV     A,#((HalLedBlink >> 16) & 0xff)
   \   000051   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    288          #elif defined( RTR_NWK ) && (!defined(ZDO_COORDINATOR))
    289                      UartTX_Send_String("haha!Rou jiond succeed\n",23);
    290                      HalLedBlink( HAL_LED_4, 3, 50, 250 );            //Ð¡µÆÉÁË¸
    291                      RfTx.TXDATA.HeadCom[0] = 'n';                    //ÊäÈëÃüÁî
    292                      RfTx.TXDATA.HeadCom[1] = 'e';
    293                      RfTx.TXDATA.HeadCom[2] = 'w';
    294                      RfTx.TXDATA.Node_type[0] = 'R';                  //½ÚµãÀàÐÍ
    295                      RfTx.TXDATA.Node_type[1] = 'O';
    296                      RfTx.TXDATA.Node_type[2] = 'U';	
    297                      memcpy(RfTx.TXDATA.IEEE,NLME_GetExtAddr(),8);     //»ñÈ¡ÎïÀíµØÖ·
    298                      RfTx.TXDATA.Saddr = NLME_GetShortAddr();          //»ñÈ¡ÍøÂçµØÖ·
    299                      SendData(RfTx.TxBuf, 0x0000, 32);                  //·¢ËÍÊ×´ÎÐÅÏ¢
    300          #else
    301                      UartTX_Send_String("haha!End jiond succeed\n",23);
    302                      HalLedBlink( HAL_LED_4, 3, 50, 250 );
    303                      SendData(NLME_GetExtAddr(), 0x0000, 2);
    304          #endif
    305          
    306                      // Start sending the periodic message in a regular interval.
    307          
    308                      osal_start_timerEx( SampleApp_TaskID,
    309                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    310                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000054                ; Setup parameters for call to function osal_start_timerEx
   \   000054   7C88         MOV     R4,#-0x78
   \   000056   7D13         MOV     R5,#0x13
   \   000058   7A01         MOV     R2,#0x1
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   90....       MOV     DPTR,#(osal_start_timerEx & 0xffff)
   \   000064   74..         MOV     A,#((osal_start_timerEx >> 16) & 0xff)
   \                     ??SampleApp_ProcessEvent_6:
   \   000066   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    311                    }
    312                    else
    313                    {
    314                      // Device is no longer in the network
    315                    }
    316                    break;
    317          
    318                  default:
    319                    break;
    320                }
    321          
    322                // Release the memory
    323                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_5:
   \   000069                ; Setup parameters for call to function osal_msg_deallocate
   \   000069   AA..         MOV     R2,?V0 + 0
   \   00006B   AB..         MOV     R3,?V0 + 1
   \   00006D   90....       MOV     DPTR,#(osal_msg_deallocate & 0xffff)
   \   000070   74..         MOV     A,#((osal_msg_deallocate >> 16) & 0xff)
   \   000072   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    324          
    325                // Next - if one is available
    326                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000075                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_2:
   \   000075   90....       MOV     DPTR,#SampleApp_TaskID
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F9           MOV     R1,A
   \   00007A   90....       MOV     DPTR,#(osal_msg_receive & 0xffff)
   \   00007D   74..         MOV     A,#((osal_msg_receive >> 16) & 0xff)
   \   00007F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000082   8A..         MOV     ?V0 + 0,R2
   \   000084   8B..         MOV     ?V0 + 1,R3
   \   000086   E5..         MOV     A,?V0 + 0
   \   000088   7002         JNZ     ??SampleApp_ProcessEvent_7
   \   00008A   E5..         MOV     A,?V0 + 1
   \                     ??SampleApp_ProcessEvent_7:
   \   00008C   603E         JZ      ??SampleApp_ProcessEvent_8
   \   00008E   85..82       MOV     DPL,?V0 + 0
   \   000091   85..83       MOV     DPH,?V0 + 1
   \   000094   E0           MOVX    A,@DPTR
   \   000095   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for SampleApp_ProcessEvent>_0`:
   \   000098   00           DB        0
   \   000099   03           DB        3
   \   00009A   1A           DB        26
   \   00009B   ....         DW        ??SampleApp_ProcessEvent_9
   \   00009D   C0           DB        192
   \   00009E   ....         DW        ??SampleApp_ProcessEvent_10
   \   0000A0   D1           DB        209
   \   0000A1   ....         DW        ??SampleApp_ProcessEvent_3
   \   0000A3   ....         DW        ??SampleApp_ProcessEvent_5
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A5                ; Setup parameters for call to function SampleApp_HandleKeys
   \   0000A5   85..82       MOV     DPL,?V0 + 0
   \   0000A8   85..83       MOV     DPH,?V0 + 1
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   FA           MOV     R2,A
   \   0000B0   85..82       MOV     DPL,?V0 + 0
   \   0000B3   85..83       MOV     DPH,?V0 + 1
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F9           MOV     R1,A
   \   0000BA   90....       MOV     DPTR,#(SampleApp_HandleKeys & 0xffff)
   \   0000BD   74..         MOV     A,#((SampleApp_HandleKeys >> 16) & 0xff)
   \   0000BF   80A5         SJMP    ??SampleApp_ProcessEvent_6
   \                     ??SampleApp_ProcessEvent_9:
   \   0000C1                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   0000C1   AA..         MOV     R2,?V0 + 0
   \   0000C3   AB..         MOV     R3,?V0 + 1
   \   0000C5   90....       MOV     DPTR,#(SampleApp_MessageMSGCB & 0xffff)
   \   0000C8   74..         MOV     A,#((SampleApp_MessageMSGCB >> 16) & 0xff)
   \   0000CA   809A         SJMP    ??SampleApp_ProcessEvent_6
    327              }
    328          
    329              // return unprocessed events
    330              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_8:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   FA           MOV     R2,A
   \   0000CE   7480         MOV     A,#-0x80
   \   0000D0   6F           XRL     A,R7
   \                     ??SampleApp_ProcessEvent_11:
   \   0000D1   FB           MOV     R3,A
   \   0000D2   803E         SJMP    ??SampleApp_ProcessEvent_12
    331            }
    332          
    333            // Send a message out - This event is generated by a timer
    334            //  (setup in SampleApp_Init()).
    335            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_1:
   \   0000D4   EE           MOV     A,R6
   \   0000D5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D7   5035         JNC     ??SampleApp_ProcessEvent_13
    336            {
    337              // Send the periodic message
    338              SampleApp_SendPeriodicMessage();
   \   0000D9                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   0000D9   90....       MOV     DPTR,#(SampleApp_SendPeriodicMessage & 0xffff)
   \   0000DC   74..         MOV     A,#((SampleApp_SendPeriodicMessage >> 16) & 0xff)
   \   0000DE   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    339          
    340              // Setup to send message again in normal period (+ a little jitter)
    341              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    342                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   0000E1                ; Setup parameters for call to function osal_rand
   \   0000E1   90....       MOV     DPTR,#(osal_rand & 0xffff)
   \   0000E4   74..         MOV     A,#((osal_rand >> 16) & 0xff)
   \   0000E6   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000E9   8A..         MOV     ?V0 + 0,R2
   \   0000EB   A8..         MOV     R0,?V0 + 0
   \   0000ED                ; Setup parameters for call to function osal_start_timerEx
   \   0000ED   7488         MOV     A,#-0x78
   \   0000EF   28           ADD     A,R0
   \   0000F0   FC           MOV     R4,A
   \   0000F1   7413         MOV     A,#0x13
   \   0000F3   3400         ADDC    A,#0x0
   \   0000F5   FD           MOV     R5,A
   \   0000F6   7A01         MOV     R2,#0x1
   \   0000F8   7B00         MOV     R3,#0x0
   \   0000FA   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F9           MOV     R1,A
   \   0000FF   90....       MOV     DPTR,#(osal_start_timerEx & 0xffff)
   \   000102   74..         MOV     A,#((osal_start_timerEx >> 16) & 0xff)
   \   000104   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    343          
    344              // return unprocessed events
    345              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000107   7401         MOV     A,#0x1
   \   000109   6E           XRL     A,R6
   \   00010A   FA           MOV     R2,A
   \   00010B   EF           MOV     A,R7
   \   00010C   80C3         SJMP    ??SampleApp_ProcessEvent_11
    346            }
    347          
    348            // Discard unknown events
    349            return 0;
   \                     ??SampleApp_ProcessEvent_13:
   \   00010E   7A00         MOV     R2,#0x0
   \   000110   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_12:
   \   000112                REQUIRE ?Subroutine4
   \   000112                ; // Fall through to label ?Subroutine4
    350          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    351          
    352          /*********************************************************************
    353           * Event Generation Functions
    354           */
    355          /*********************************************************************
    356           * @fn      SampleApp_HandleKeys
    357           *
    358           * @brief   Handles all key events for this device.
    359           *
    360           * @param   shift - true if in shift/alt.
    361           * @param   keys - bit field for key events. Valid entries:
    362           *                 HAL_KEY_SW_2
    363           *                 HAL_KEY_SW_1
    364           *
    365           * @return  none
    366           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    367          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    368          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    369            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   500C         JNC     ??SampleApp_HandleKeys_0
    370            {
    371              /* This key sends the Flash Command is sent to Group 1.
    372               * This device will not receive the Flash Command from this
    373               * device (even if it belongs to group 1).
    374               */
    375              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   90....       MOV     DPTR,#(SampleApp_SendFlashMessage & 0xffff)
   \   000012   74..         MOV     A,#((SampleApp_SendFlashMessage >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    376            }
    377          
    378            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000017   EE           MOV     A,R6
   \   000018   A2E3         MOV     C,0xE0 /* A   */.3
   \   00001A   502F         JNC     ??SampleApp_HandleKeys_1
    379            {
    380              /* The Flashr Command is sent to Group 1.
    381               * This key toggles this device in and out of group 1.
    382               * If this device doesn't belong to group 1, this application
    383               * will not receive the Flash command sent to group 1.
    384               */
    385              aps_Group_t *grp;
    386              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    387              if ( grp )
   \   00001C                ; Setup parameters for call to function aps_FindGroup
   \   00001C   7A01         MOV     R2,#0x1
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   7914         MOV     R1,#0x14
   \   000022   90....       MOV     DPTR,#(aps_FindGroup & 0xffff)
   \   000025   74..         MOV     A,#((aps_FindGroup >> 16) & 0xff)
   \   000027   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002A   EA           MOV     A,R2
   \   00002B   7001         JNZ     ??SampleApp_HandleKeys_2
   \   00002D   EB           MOV     A,R3
   \                     ??SampleApp_HandleKeys_2:
   \   00002E   600D         JZ      ??SampleApp_HandleKeys_3
    388              {
    389                // Remove from the group
    390                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000030                ; Setup parameters for call to function aps_RemoveGroup
   \   000030   7A01         MOV     R2,#0x1
   \   000032   7B00         MOV     R3,#0x0
   \   000034   7914         MOV     R1,#0x14
   \   000036   90....       MOV     DPTR,#(aps_RemoveGroup & 0xffff)
   \   000039   74..         MOV     A,#((aps_RemoveGroup >> 16) & 0xff)
   \   00003B   800B         SJMP    ??SampleApp_HandleKeys_4
    391              }
    392              else
    393              {
    394                // Add to the flash group
    395                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_3:
   \   00003D                ; Setup parameters for call to function aps_AddGroup
   \   00003D   7A..         MOV     R2,#(SampleApp_Group & 0xff)
   \   00003F   7B..         MOV     R3,#((SampleApp_Group >> 8) & 0xff)
   \   000041   7914         MOV     R1,#0x14
   \   000043   90....       MOV     DPTR,#(aps_AddGroup & 0xffff)
   \   000046   74..         MOV     A,#((aps_AddGroup >> 16) & 0xff)
   \                     ??SampleApp_HandleKeys_4:
   \   000048   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    396              }
    397            }
    398          }
   \                     ??SampleApp_HandleKeys_1:
   \   00004B   02....       LJMP    ??Subroutine5_0 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine5_0:
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    399          
    400          /*********************************************************************
    401           * LOCAL FUNCTIONS
    402           */
    403          
    404          /*********************************************************************
    405           * @fn      SampleApp_MessageMSGCB
    406           *
    407           * @brief   Data message processor callback.  This function processes
    408           *          any incoming data - probably from other devices.  So, based
    409           *          on cluster ID, perform the intended action.
    410           *
    411           * @param   none
    412           *
    413           * @return  none
    414           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    415          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    416          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    417            int new_node_flag;
    418            new_node_flag = 0;
   \   000009   7E00         MOV     R6,#0x0
   \   00000B   7F00         MOV     R7,#0x0
    419            if(clear == 0)
   \   00000D   90....       MOV     DPTR,#clear
   \   000010   E0           MOVX    A,@DPTR
   \   000011   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000015   7012         JNZ     ??SampleApp_MessageMSGCB_1
    420            {
    421              JoinNode.RouterCount = 0;               //Â·ÓÉÆ÷¼ÆÊýÇåÁã
   \   000017   E4           CLR     A
   \   000018   90....       MOV     DPTR,#(JoinNode + 1)
   \   00001B   F0           MOVX    @DPTR,A
    422              JoinNode.RfdCount = 0;                  //ÖÕ¶Ë¼ÆÊýÇåÁã
   \   00001C   90....       MOV     DPTR,#JoinNode
   \   00001F   F0           MOVX    @DPTR,A
    423              clear = 1;
   \   000020   90....       MOV     DPTR,#clear
   \   000023   7401         MOV     A,#0x1
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
    424            }
    425            switch ( pkt->clusterId )
   \                     ??SampleApp_MessageMSGCB_1:
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0 + 2,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 3,A
   \   000038   78..         MOV     R0,#?V0 + 2
   \   00003A   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00003D   0200         DW        2
   \   00003F   00           DB        0
   \   000040   ....         DW        ??SampleApp_MessageMSGCB_2
   \   000042   ....         DW        ??SampleApp_MessageMSGCB_3
    426            {
    427              case SAMPLEAPP_PERIODIC_CLUSTERID:
    428                break;
    429          
    430              case SAMPLEAPP_FLASH_CLUSTERID:
    431                memcpy(RxBuf,pkt->cmd.Data,pkt->cmd.DataLength);
   \                     ??SampleApp_MessageMSGCB_3:
   \   000044                ; Setup parameters for call to function memcpy
   \   000044   EA           MOV     A,R2
   \   000045   2413         ADD     A,#0x13
   \   000047   F582         MOV     DPL,A
   \   000049   EB           MOV     A,R3
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   F583         MOV     DPH,A
   \   00004E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000051   EA           MOV     A,R2
   \   000052   2415         ADD     A,#0x15
   \   000054   F582         MOV     DPL,A
   \   000056   EB           MOV     A,R3
   \   000057   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00005A   90....       MOV     DPTR,#(memcpy & 0xffff)
   \   00005D   74..         MOV     A,#((memcpy >> 16) & 0xff)
   \   00005F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000062   7402         MOV     A,#0x2
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    432          #if defined( ZDO_COORDINATOR )          //Èç¹ûÊÇÐ­µ÷Æ÷ÊÕµ½Êý¾Ý
    433                if((RxBuf[0] == 'n') && (RxBuf[1] == 'e') &&(RxBuf[2] == 'w'))        //ÐÂ½Úµã¼ÓÈë
   \   000067   90....       MOV     DPTR,#RxBuf
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   646E         XRL     A,#0x6e
   \   00006D   6003         JZ      $+5
   \   00006F   02....       LJMP    ??SampleApp_MessageMSGCB_4 & 0xFFFF
   \   000072   90....       MOV     DPTR,#(RxBuf + 1)
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6465         XRL     A,#0x65
   \   000078   6003         JZ      $+5
   \   00007A   02....       LJMP    ??SampleApp_MessageMSGCB_4 & 0xFFFF
   \   00007D   90....       MOV     DPTR,#(RxBuf + 2)
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6477         XRL     A,#0x77
   \   000083   6003         JZ      $+5
   \   000085   02....       LJMP    ??SampleApp_MessageMSGCB_4 & 0xFFFF
    434                {
    435                  if((RxBuf[3] == 'R') && (RxBuf[4] == 'O') && (RxBuf[5] == 'U'))         //ÅÐ¶ÏÊÇÂ·ÓÉÆ÷½Úµã
   \   000088   90....       MOV     DPTR,#(RxBuf + 3)
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   6452         XRL     A,#0x52
   \   00008E   6003         JZ      $+5
   \   000090   02....       LJMP    ??SampleApp_MessageMSGCB_5 & 0xFFFF
   \   000093   90....       MOV     DPTR,#(RxBuf + 4)
   \   000096   E0           MOVX    A,@DPTR
   \   000097   644F         XRL     A,#0x4f
   \   000099   6003         JZ      $+5
   \   00009B   02....       LJMP    ??SampleApp_MessageMSGCB_5 & 0xFFFF
   \   00009E   90....       MOV     DPTR,#(RxBuf + 5)
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   6455         XRL     A,#0x55
   \   0000A4   6003         JZ      $+5
   \   0000A6   02....       LJMP    ??SampleApp_MessageMSGCB_5 & 0xFFFF
    436                  {
    437                    for(int i=0;i<JoinNode.RouterCount;i++)
   \   0000A9   7A00         MOV     R2,#0x0
   \   0000AB   7B00         MOV     R3,#0x0
   \   0000AD   802D         SJMP    ??SampleApp_MessageMSGCB_6
    438                    {
    439                      for(int j=0;j<8;j++)
    440                      {
    441                        if(JoinNode.RouterAddr[JoinNode.RouterCount][j] == RxBuf[j+6])          //ÅÐ¶ÏÊÇ·ñÓÐÏàÍ¬µØÖ·
    442                        {
    443                          new_node_flag++;                                                      //ÅÐ¶ÏÎ»ÏàÍ¬±êÖ¾¼Ó1
    444                        }
    445                        else
    446                        {
    447                          new_node_flag = 0;                                                    //ÅÐ¶ÏÎ»²»Í¬£¬±íÊ¾µØÖ·²»Í¬£¬±êÖ¾Çå0
   \                     ??SampleApp_MessageMSGCB_7:
   \   0000AF   7E00         MOV     R6,#0x0
   \   0000B1   7F00         MOV     R7,#0x0
    448                          j += 8;
   \   0000B3   E8           MOV     A,R0
   \   0000B4   2408         ADD     A,#0x8
   \   0000B6   F8           MOV     R0,A
   \   0000B7   E9           MOV     A,R1
   \   0000B8   3400         ADDC    A,#0x0
   \   0000BA   F9           MOV     R1,A
    449                        }
   \                     ??SampleApp_MessageMSGCB_8:
   \   0000BB   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000BE   4032         JC      ??SampleApp_MessageMSGCB_9
    450                      }
    451                      if(new_node_flag == 8)
   \   0000C0   7408         MOV     A,#0x8
   \   0000C2   6E           XRL     A,R6
   \   0000C3   7001         JNZ     ??SampleApp_MessageMSGCB_10
   \   0000C5   EF           MOV     A,R7
   \                     ??SampleApp_MessageMSGCB_10:
   \   0000C6   700C         JNZ     ??SampleApp_MessageMSGCB_11
    452                      {
    453                        i += JoinNode.RouterCount;                                          //ÍË³ö²éÑ¯
   \   0000C8   90....       MOV     DPTR,#(JoinNode + 1)
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F8           MOV     R0,A
   \   0000CD   EA           MOV     A,R2
   \   0000CE   28           ADD     A,R0
   \   0000CF   FA           MOV     R2,A
   \   0000D0   EB           MOV     A,R3
   \   0000D1   3400         ADDC    A,#0x0
   \   0000D3   FB           MOV     R3,A
    454                      }
   \                     ??SampleApp_MessageMSGCB_11:
   \   0000D4   EA           MOV     A,R2
   \   0000D5   2401         ADD     A,#0x1
   \   0000D7   0A           INC     R2
   \   0000D8   EB           MOV     A,R3
   \   0000D9   3400         ADDC    A,#0x0
   \   0000DB   FB           MOV     R3,A
   \                     ??SampleApp_MessageMSGCB_6:
   \   0000DC   90....       MOV     DPTR,#(JoinNode + 1)
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F8           MOV     R0,A
   \   0000E1   7900         MOV     R1,#0x0
   \   0000E3   C3           CLR     C
   \   0000E4   EA           MOV     A,R2
   \   0000E5   98           SUBB    A,R0
   \   0000E6   EB           MOV     A,R3
   \   0000E7   9400         SUBB    A,#0x0
   \   0000E9   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000EB   65D0         XRL     A,PSW
   \   0000ED   33           RLC     A
   \   0000EE   502F         JNC     ??SampleApp_MessageMSGCB_12
   \   0000F0   7800         MOV     R0,#0x0
   \                     ??SampleApp_MessageMSGCB_9:
   \   0000F2   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000F5   F5..         MOV     ?V0 + 0,A
   \   0000F7   E5F0         MOV     A,B
   \   0000F9   F5..         MOV     ?V0 + 1,A
   \   0000FB   E8           MOV     A,R0
   \   0000FC   24..         ADD     A,#((JoinNode + 202) & 0xff)
   \   0000FE   FC           MOV     R4,A
   \   0000FF   E9           MOV     A,R1
   \   000100   34..         ADDC    A,#(((JoinNode + 202) >> 8) & 0xff)
   \   000102   FD           MOV     R5,A
   \   000103   E5..         MOV     A,?V0 + 0
   \   000105   2C           ADD     A,R4
   \   000106   F582         MOV     DPL,A
   \   000108   E5..         MOV     A,?V0 + 1
   \   00010A   3D           ADDC    A,R5
   \   00010B   F583         MOV     DPH,A
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FC           MOV     R4,A
   \   00010F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000112   6C           XRL     A,R4
   \   000113   709A         JNZ     ??SampleApp_MessageMSGCB_7
   \   000115   EE           MOV     A,R6
   \   000116   2401         ADD     A,#0x1
   \   000118   0E           INC     R6
   \   000119   EF           MOV     A,R7
   \   00011A   3400         ADDC    A,#0x0
   \   00011C   FF           MOV     R7,A
   \   00011D   809C         SJMP    ??SampleApp_MessageMSGCB_8
    455                    }
    456                    if(new_node_flag == 0)
   \                     ??SampleApp_MessageMSGCB_12:
   \   00011F   EE           MOV     A,R6
   \   000120   7001         JNZ     ??SampleApp_MessageMSGCB_13
   \   000122   EF           MOV     A,R7
   \                     ??SampleApp_MessageMSGCB_13:
   \   000123   705C         JNZ     ??SampleApp_MessageMSGCB_5
    457                    {
    458                      for(int i=0;i<8;i++)
   \   000125   7800         MOV     R0,#0x0
    459                      {
    460                        JoinNode.RouterAddr[JoinNode.RouterCount][7-i] = RxBuf[i+6];            //´æ·ÅÎïÀíµØÖ·
   \                     ??SampleApp_MessageMSGCB_14:
   \   000127   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00012A   C0E0         PUSH    A
   \   00012C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00012F   FC           MOV     R4,A
   \   000130   E4           CLR     A
   \   000131   98           SUBB    A,R0
   \   000132   FA           MOV     R2,A
   \   000133   E4           CLR     A
   \   000134   99           SUBB    A,R1
   \   000135   FB           MOV     R3,A
   \   000136   EA           MOV     A,R2
   \   000137   24..         ADD     A,#((JoinNode + 209) & 0xff)
   \   000139   FA           MOV     R2,A
   \   00013A   EB           MOV     A,R3
   \   00013B   34..         ADDC    A,#(((JoinNode + 209) >> 8) & 0xff)
   \   00013D   FB           MOV     R3,A
   \   00013E   EC           MOV     A,R4
   \   00013F   2A           ADD     A,R2
   \   000140   F582         MOV     DPL,A
   \   000142   E5F0         MOV     A,B
   \   000144   3B           ADDC    A,R3
   \   000145   F583         MOV     DPH,A
   \   000147   D0E0         POP     A
   \   000149   F0           MOVX    @DPTR,A
    461                      }
   \   00014A   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00014D   40D8         JC      ??SampleApp_MessageMSGCB_14
    462                      JoinNode.RouterAddr[JoinNode.RouterCount][8] = RxBuf[6+8];             //´æ·ÅÍøÂçµØÖ·
   \   00014F   90....       MOV     DPTR,#(RxBuf + 14)
   \   000152   E0           MOVX    A,@DPTR
   \   000153   C0E0         PUSH    A
   \   000155   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000158   24..         ADD     A,#((JoinNode + 210) & 0xff)
   \   00015A   F582         MOV     DPL,A
   \   00015C   E5F0         MOV     A,B
   \   00015E   34..         ADDC    A,#(((JoinNode + 210) >> 8) & 0xff)
   \   000160   F583         MOV     DPH,A
   \   000162   D0E0         POP     A
   \   000164   F0           MOVX    @DPTR,A
    463                      JoinNode.RouterAddr[JoinNode.RouterCount][9] = RxBuf[6+9];
   \   000165   90....       MOV     DPTR,#(RxBuf + 15)
   \   000168   E0           MOVX    A,@DPTR
   \   000169   C0E0         PUSH    A
   \   00016B   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00016E   24..         ADD     A,#((JoinNode + 211) & 0xff)
   \   000170   F582         MOV     DPL,A
   \   000172   E5F0         MOV     A,B
   \   000174   34..         ADDC    A,#(((JoinNode + 211) >> 8) & 0xff)
   \   000176   F583         MOV     DPH,A
   \   000178   D0E0         POP     A
   \   00017A   F0           MOVX    @DPTR,A
    464                      JoinNode.RouterCount ++;
   \   00017B   90....       MOV     DPTR,#(JoinNode + 1)
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   04           INC     A
   \   000180   F0           MOVX    @DPTR,A
    465                    }
    466                  }
    467                  UartTX_Send_String( RxBuf,6);
                                             ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \                     ??SampleApp_MessageMSGCB_5:
   \   000181                ; Setup parameters for call to function UartTX_Send_String
   \   000181   7C06         MOV     R4,#0x6
   \   000183   7D00         MOV     R5,#0x0
   \   000185   7A..         MOV     R2,#(RxBuf & 0xff)
   \   000187   7B..         MOV     R3,#((RxBuf >> 8) & 0xff)
   \   000189   90....       MOV     DPTR,#(UartTX_Send_String & 0xffff)
   \   00018C   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   00018E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    468                  UartTX_Send_String( JoinNode.RouterAddr[JoinNode.RouterCount-1],10);                               //Í¨¹ý´®¿Ú·¢ËÍÊý¾Ý
                                             ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \   000191                ; Setup parameters for call to function UartTX_Send_String
   \   000191   7C0A         MOV     R4,#0xa
   \   000193   7D00         MOV     R5,#0x0
   \   000195   90....       MOV     DPTR,#(JoinNode + 1)
   \   000198   E0           MOVX    A,@DPTR
   \   000199   8CF0         MOV     B,R4
   \   00019B   A4           MUL     AB
   \   00019C   24..         ADD     A,#((JoinNode + 192) & 0xff)
   \   00019E   FA           MOV     R2,A
   \   00019F   E5F0         MOV     A,B
   \   0001A1   34..         ADDC    A,#(((JoinNode + 192) >> 8) & 0xff)
   \   0001A3   FB           MOV     R3,A
   \   0001A4   800B         SJMP    ??CrossCallReturnLabel_3
    469                }
    470                else
    471                UartTX_Send_String(RxBuf,pkt->cmd.DataLength);
                                          ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \                     ??SampleApp_MessageMSGCB_4:
   \   0001A6                ; Setup parameters for call to function UartTX_Send_String
   \   0001A6   E5..         MOV     A,?V0 + 0
   \   0001A8   2413         ADD     A,#0x13
   \   0001AA   F582         MOV     DPL,A
   \   0001AC   E5..         MOV     A,?V0 + 1
   \   0001AE   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001B1   90....       MOV     DPTR,#(UartTX_Send_String & 0xffff)
   \   0001B4   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0001B6   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    472          
    473          #elif defined( RTR_NWK ) && (!defined(ZDO_COORDINATOR))                            //Ñ¡ÔñÂ·ÓÉÆ÷
    474                UartTX_Send_String(RxBuf,pkt->cmd.DataLength);                                //Í¨¹ý´®¿Ú·¢ËÍÊý¾Ý
    475          #else                                    //Ê£ÏÂµÄ¾ÍÊÇÖÕ¶Ë½Úµã
    476          #endif
    477                HalLedBlink( HAL_LED_4, 2, 50, 100 );              //Ð¡µÆÉÁË¸
   \   0001B9                ; Setup parameters for call to function HalLedBlink
   \   0001B9   7C64         MOV     R4,#0x64
   \   0001BB   7D00         MOV     R5,#0x0
   \   0001BD   7B32         MOV     R3,#0x32
   \   0001BF   7A02         MOV     R2,#0x2
   \   0001C1   7908         MOV     R1,#0x8
   \   0001C3   90....       MOV     DPTR,#(HalLedBlink & 0xffff)
   \   0001C6   74..         MOV     A,#((HalLedBlink >> 16) & 0xff)
   \   0001C8   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    478          
    479                break;
    480            }
    481          }
   \                     ??SampleApp_MessageMSGCB_2:
   \   0001CB   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E8           MOV     A,R0
   \   000001   24..         ADD     A,#((RxBuf + 6) & 0xff)
   \   000003   F582         MOV     DPL,A
   \   000005   E9           MOV     A,R1
   \   000006   34..         ADDC    A,#(((RxBuf + 6) >> 8) & 0xff)
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#(JoinNode + 1)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   75F00A       MOV     B,#0xa
   \   000007   A4           MUL     AB
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FD           MOV     R5,A
   \   000009   7A..         MOV     R2,#(RxBuf & 0xff)
   \   00000B   7B..         MOV     R3,#((RxBuf >> 8) & 0xff)
   \   00000D   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   C3           CLR     C
   \   000009   E8           MOV     A,R0
   \   00000A   9408         SUBB    A,#0x8
   \   00000C   E9           MOV     A,R1
   \   00000D   9400         SUBB    A,#0x0
   \   00000F   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000011   65D0         XRL     A,PSW
   \   000013   33           RLC     A
   \   000014   22           RET
    482          
    483          /*********************************************************************
    484           * @fn      SampleApp_SendPeriodicMessage
    485           *
    486           * @brief   Send the periodic message.
    487           *
    488           * @param   none
    489           *
    490           * @return  none
    491           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    492          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    493          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    494            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    495                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    496                                 1,
    497                                 (uint8*)&SampleAppPeriodicCounter,
    498                                 &SampleApp_TransID,
    499                                 AF_DISCV_ROUTE,
    500                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..0A       MOV     ?V0 + 0,#0xa
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000010   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#(SampleAppPeriodicCounter & 0xff)
   \   00001B   75....       MOV     ?V0 + 1,#((SampleAppPeriodicCounter >> 8) & 0xff)
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000037   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000039   7A..         MOV     R2,#(SampleApp_Periodic_DstAddr & 0xff)
   \   00003B   7B..         MOV     R3,#((SampleApp_Periodic_DstAddr >> 8) & 0xff)
   \   00003D   90....       MOV     DPTR,#(AF_DataRequest & 0xffff)
   \   000040   74..         MOV     A,#((AF_DataRequest >> 16) & 0xff)
   \   000042   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000045   7409         MOV     A,#0x9
   \   000047   02....       LJMP    ?Subroutine5 & 0xFFFF
    501            {
    502            }
    503            else
    504            {
    505              // Error occurred in request to send.
    506            }
    507          }
    508          
    509          /*********************************************************************
    510           * @fn      SampleApp_SendFlashMessage
    511           *
    512           * @brief   Send the flash message to group 1.
    513           *
    514           * @param   flashTime - in milliseconds
    515           *
    516           * @return  none
    517           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    518          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    519          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    520            uint8 buffer[3];
    521            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    522            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    523            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    524          
    525            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    526                                 SAMPLEAPP_FLASH_CLUSTERID,
    527                                 3,
    528                                 buffer,
    529                                 &SampleApp_TransID,
    530                                 AF_DISCV_ROUTE,
    531                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..0A       MOV     ?V0 + 0,#0xa
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000034   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000063   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000065   7A..         MOV     R2,#(SampleApp_Flash_DstAddr & 0xff)
   \   000067   7B..         MOV     R3,#((SampleApp_Flash_DstAddr >> 8) & 0xff)
   \   000069   90....       MOV     DPTR,#(AF_DataRequest & 0xffff)
   \   00006C   74..         MOV     A,#((AF_DataRequest >> 16) & 0xff)
   \   00006E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000071   7409         MOV     A,#0x9
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
    532            {
    533            }
    534            else
    535            {
    536              // Error occurred in request to send.
    537            }
    538          }
   \   000076   7403         MOV     A,#0x3
   \   000078   80..         SJMP    ?Subroutine5
    539          
    540          //**********************************************************************
    541          //**ÒÔ¶ÌµØÖ··½Ê½·¢ËÍÊý¾Ý
    542          //buf ::·¢ËÍµÄÊý¾Ý
    543          //addr::Ä¿µÄµØÖ·
    544          //Leng::Êý¾Ý³¤¶È
    545          //********************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    546          uint8 SendData(uint8 *buf, uint16 addr, uint8 Leng)
   \                     SendData:
    547          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    548          	afAddrType_t SendDataAddr;
    549          	
    550          	SendDataAddr.addrMode = (afAddrMode_t)Addr16Bit;         //¶ÌµØÖ··¢ËÍ
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    551          	SendDataAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7414         MOV     A,#0x14
   \   000019   F0           MOVX    @DPTR,A
    552          	SendDataAddr.addr.shortAddr = addr;
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   EC           MOV     A,R4
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   ED           MOV     A,R5
   \   000024   F0           MOVX    @DPTR,A
    553                  if ( AF_DataRequest( &SendDataAddr, //·¢ËÍµÄµØÖ·ºÍÄ£Ê½
    554                                 &SampleApp_epDesc,   //ÖÕ¶Ë£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©
    555                                 2,//·¢ËÍ´®ID
    556                                 Leng,
    557                                 buf,
    558                                 &SampleApp_TransID,  //ÐÅÏ¢ID£¨²Ù×÷ÏµÍ³²ÎÊý£©
    559                                 AF_DISCV_ROUTE,
    560                               //  AF_ACK_REQUEST,
    561                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000025                ; Setup parameters for call to function AF_DataRequest
   \   000025   75..0A       MOV     ?V0 + 0,#0xa
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000030   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   8A..         MOV     ?V0 + 0,R2
   \   00003A   8B..         MOV     ?V0 + 1,R3
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   89..         MOV     ?V0 + 0,R1
   \   000043   75..00       MOV     ?V0 + 1,#0x0
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..02       MOV     ?V0 + 0,#0x2
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   7920         MOV     R1,#0x20
   \   000055   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000057   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000059   7409         MOV     A,#0x9
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   90....       MOV     DPTR,#(AF_DataRequest & 0xffff)
   \   000065   74..         MOV     A,#((AF_DataRequest >> 16) & 0xff)
   \   000067   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00006A   7409         MOV     A,#0x9
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   E9           MOV     A,R1
   \   000070   7004         JNZ     ??SendData_0
    562          	{
    563          		return 1;
   \   000072   7901         MOV     R1,#0x1
   \   000074   8002         SJMP    ??SendData_1
    564          	}
    565          	else
    566          	{
    567          		return 0;// Error occurred in request to send.
   \                     ??SendData_0:
   \   000076   7900         MOV     R1,#0x0
   \                     ??SendData_1:
   \   000078   7404         MOV     A,#0x4
   \   00007A                REQUIRE ?Subroutine5
   \   00007A                ; // Fall through to label ?Subroutine5
    568          	}
    569          }

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Group 1">>`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "haha!Nework found`:
   \   000000   68616861     DB "haha!Nework found succeed\012"
   \            214E6577
   \            6F726B20
   \            666F756E
   \            64207375
   \            63636565
   \            640A00  

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SampleApp_ClusterList>`:
   \   000000   01000200     DW 1, 2

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SampleApp_SimpleDesc>`:
   \   000000   14           DB 20
   \   000001   080F0100     DW 3848, 1
   \   000005   0002         DB 0, 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Group 1">`:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for <Constant "Group 1">>`
   \   000008                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "haha!Nework found suc...">`:
   \   000000                DS 27
   \   00001B                REQUIRE `?<Initializer for <Constant "haha!Nework found`
   \   00001B                REQUIRE __INIT_XDATA_I
    570          
    571          /*********************************************************************
    572          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
     SampleApp_MessageMSGCB             1      0     26
       -> memcpy                        0      0     28
       -> UartTX_Send_String            0      0     24
       -> UartTX_Send_String            0      0     24
       -> UartTX_Send_String            0      0     24
       -> HalLedBlink                   0      0     24
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> UartTX_Send_String            0      0     24
       -> HalLedBlink                   0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     31
       -> AF_DataRequest                0      0     38
     SendData                           1      0     23
       -> AF_DataRequest                0      0     46


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     JoinNode                        402
     RfTx                             66
     SampleApp_ClusterList             4
     SampleApp_SimpleDesc             12
     SampleApp_epDesc                  6
     SampleApp_TaskID                  1
     SampleApp_NwkState                1
     SampleApp_TransID                 1
     SampleApp_Periodic_DstAddr        4
     SampleApp_Flash_DstAddr           4
     SampleApp_Group                  18
     SampleAppPeriodicCounter          1
     SampleAppFlashCounter             1
     SampleApp_Init                  180
     RxBuf                            50
     TxBuf                            50
     clear                             2
     SampleApp_ProcessEvent          274
     ?Subroutine4                      5
     SampleApp_HandleKeys             78
     ?Subroutine5                      8
     SampleApp_MessageMSGCB          462
     ?Subroutine3                     12
     ?Subroutine2                      9
     ?Subroutine1                     14
     ?Subroutine0                     21
     SampleApp_SendPeriodicMessage    74
     SampleApp_SendFlashMessage      122
     SendData                        122
     ?<Initializer for <Constant "Group 1">>
                                       8
     ?<Initializer for <Constant "haha!Nework found
                                      27
     ?<Initializer for SampleApp_ClusterList>
                                       4
     ?<Initializer for SampleApp_SimpleDesc>
                                      12
     ?<Constant "Group 1">             8
     ?<Constant "haha!Nework found suc...">
                                      27

 
 1 381 bytes in segment BANKED_CODE
    51 bytes in segment XDATA_I
    51 bytes in segment XDATA_ID
   607 bytes in segment XDATA_Z
 
 1 432 bytes of CODE  memory
   658 bytes of XDATA memory

Errors: none
Warnings: 3
