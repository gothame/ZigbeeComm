//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:25:58 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\stack\zdo\ZDApp.c                             /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wC /
//                          oord.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS     /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D ZTOOL_P1 -D MT_TASK -D            /
//                          MT_ZDO_FUNC -lC E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\CoordinatorEB\L /
//                          ist\ -lA E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\CoordinatorEB\List\    /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\CoordinatorEB\Obj\ -e        /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\stack\zdo\ZDApp.c"                           /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\CoordinatorEB\List\ZDApp.s51    /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,021203H
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK WDCTL
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,0203H
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppSetupProtoVersion
        FUNCTION ZDAppSetupProtoVersion,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_ActiveEPRspCB
        FUNCTION ZDApp_ActiveEPRspCB,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDApp_AutoFindDestinationEx
        FUNCTION ZDApp_AutoFindDestinationEx,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_BindRsp
        FUNCTION ZDApp_BindRsp,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_EndDeviceAnnounceCB
        FUNCTION ZDApp_EndDeviceAnnounceCB,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDApp_EndDeviceBindReqCB
        FUNCTION ZDApp_EndDeviceBindReqCB,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_EndDeviceBindRsp
        FUNCTION ZDApp_EndDeviceBindRsp,021203H
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_IEEEAddrRspCB
        FUNCTION ZDApp_IEEEAddrRspCB,021203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_MatchDescRspCB
        FUNCTION ZDApp_MatchDescRspCB,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NodeDescRspCB
        FUNCTION ZDApp_NodeDescRspCB,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_NwkAddrRspCB
        FUNCTION ZDApp_NwkAddrRspCB,021203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC ZDApp_PowerDescRspCB
        FUNCTION ZDApp_PowerDescRspCB,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,0a1203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterForBindRsp
        FUNCTION ZDApp_RegisterForBindRsp,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RegisterForEndDeviceAnnounce
        FUNCTION ZDApp_RegisterForEndDeviceAnnounce,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RegisterForIEEEAddrRsp
        FUNCTION ZDApp_RegisterForIEEEAddrRsp,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RegisterForMatchDescRsp
        FUNCTION ZDApp_RegisterForMatchDescRsp,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RegisterForNwkAddrRsp
        FUNCTION ZDApp_RegisterForNwkAddrRsp,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RestoreNetworkState
        FUNCTION ZDApp_RestoreNetworkState,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,0203H
        PUBLIC ZDApp_SendEndDeviceBindReq
        FUNCTION ZDApp_SendEndDeviceBindReq,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 27, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDApp_SendNewDstAddr
        FUNCTION ZDApp_SendNewDstAddr,021203H
        ARGFRAME XSTACK, 21, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDApp_ServerDiscRspCB
        FUNCTION ZDApp_ServerDiscRspCB,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDApp_SimpleDescRspCB
        FUNCTION ZDApp_SimpleDescRspCB,021203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StartUpFromApp
        FUNCTION ZDApp_StartUpFromApp,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopStartUp
        FUNCTION ZDApp_StopStartUp,0203H
        PUBLIC ZDApp_UnbindRsp
        FUNCTION ZDApp_UnbindRsp,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDApp_UserDescConfCB
        FUNCTION ZDApp_UserDescConfCB,021203H
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_UserDescRspCB
        FUNCTION ZDApp_UserDescRspCB,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,0a1203H
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDOInitDevice
        FUNCTION ZDOInitDevice,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,021203H
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,0203H
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_0
        PUBWEAK __Constant_10000
        PUBWEAK __Constant_80000
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkStatus
        PUBLIC zdoDiscCounter
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 9, STACK
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        EXTERN NLME_GetRequest
        FUNCTION NLME_GetRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 10, STACK
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN NLME_InitNV
        FUNCTION NLME_InitNV,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN NLME_RestoreFromNV
        FUNCTION NLME_RestoreFromNV,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN NLME_GetProtocolVersion
        FUNCTION NLME_GetProtocolVersion,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 27, STACK
        EXTERN NLME_SetRequest
        FUNCTION NLME_SetRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 27, STACK
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 27, STACK
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME XSTACK, 29, STACK
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME XSTACK, 31, STACK
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 24, STACK
        EXTERN afFindSimpleDesc
        FUNCTION afFindSimpleDesc,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME XSTACK, 29, STACK
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME XSTACK, 24, STACK
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME XSTACK, 24, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 27, STACK
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME XSTACK, 32, STACK
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 27, STACK
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN NLME_RemoveChild
        FUNCTION NLME_RemoveChild,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 12, STACK
        EXTERN ZDO_MatchEndDeviceBind
        FUNCTION ZDO_MatchEndDeviceBind,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME XSTACK, 18, STACK
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME XSTACK, 18, STACK
        EXTERN zdo_MTCB_NwkIEEEAddrRspCB
        FUNCTION zdo_MTCB_NwkIEEEAddrRspCB,0202H
        ARGFRAME XSTACK, 26, STACK
        EXTERN osal_cpyExtAddr
        FUNCTION osal_cpyExtAddr,0202H
        ARGFRAME XSTACK, 27, STACK
        EXTERN zdo_MTCB_NodeDescRspCB
        FUNCTION zdo_MTCB_NodeDescRspCB,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN zdo_MTCB_PowerDescRspCB
        FUNCTION zdo_MTCB_PowerDescRspCB,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN zdo_MTCB_SimpleDescRspCB
        FUNCTION zdo_MTCB_SimpleDescRspCB,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN zdo_MTCB_MatchActiveEPRspCB
        FUNCTION zdo_MTCB_MatchActiveEPRspCB,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN zdo_MTCB_BindRspCB
        FUNCTION zdo_MTCB_BindRspCB,0202H
        ARGFRAME XSTACK, 17, STACK
        EXTERN osal_ExtAddrEqual
        FUNCTION osal_ExtAddrEqual,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 12, STACK
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN zdo_MTCB_UserDescRspCB
        FUNCTION zdo_MTCB_UserDescRspCB,0202H
        ARGFRAME XSTACK, 18, STACK
        EXTERN zdo_MTCB_UserDescConfCB
        FUNCTION zdo_MTCB_UserDescConfCB,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN zdo_MTCB_ServerDiscRspCB
        FUNCTION zdo_MTCB_ServerDiscRspCB,0202H
        ARGFRAME XSTACK, 13, STACK
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _zdoCallbackSub
        EXTERN zgConfigPANID
        EXTERN zgStackProfile

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\zdo\ZDApp.c
//    1 /*********************************************************************
//    2     Filename:       ZDApp.c
//    3     Revised:        $Date: 2007-05-31 15:56:04 -0700 (Thu, 31 May 2007) $
//    4     Revision:       $Revision: 14490 $
//    5 
//    6     Description:
//    7 
//    8       This file contains the interface to the Zigbee Device Application.
//    9       This is the Application part that the use can change. This also
//   10       contains the Task functions.
//   11 
//   12     Notes:
//   13 
//   14     Copyright (c) 2006 by Texas Instruments, Inc.
//   15     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   16     derivative works, modify, distribute, perform, display or sell this
//   17     software and/or its documentation for any purpose is prohibited
//   18     without the express written consent of Texas Instruments, Inc.
//   19 *********************************************************************/
//   20 
//   21 /*********************************************************************
//   22  * INCLUDES
//   23  */
//   24 #include "ZComDef.h"
//   25 #include "ZMac.h"
//   26 #include "OSAL.h"
//   27 #include "OSAL_Tasks.h"
//   28 #include "OSAL_PwrMgr.h"
//   29 #include "OSAL_Nv.h"
//   30 #include "AF.h"
//   31 #include "APSMEDE.h"
//   32 #include "NLMEDE.h"
//   33 #include "AddrMgr.h"
//   34 #include "ZDCache.h"
//   35 #include "ZDProfile.h"
//   36 #include "ZDObject.h"
//   37 #include "ZDConfig.h"
//   38 #include "ZDSecMgr.h"
//   39 #include "ZDApp.h"
//   40 #include "DebugTrace.h"
//   41 #include "nwk_util.h"
//   42 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DS 1
//   43 #include "ZGlobals.h"
//   44 
//   45 #if   ( SECURE != 0  )
//   46   #include "ssp.h"
//   47 #endif
//   48 
//   49 #if defined( MT_ZDO_FUNC )
//   50   #include "MT_ZDO.h"
//   51 #endif
//   52 
//   53 /* HAL */
//   54 #include "hal_led.h"
//   55 #include "hal_lcd.h"
//   56 #include "hal_key.h"
//   57 
//   58 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   59   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   60 #endif
//   61 /*********************************************************************
//   62  * MACROS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * CONSTANTS
//   67  */
//   68 #if !defined( NWK_START_DELAY )
//   69   #define NWK_START_DELAY             100   // in milliseconds
//   70 #endif
//   71 
//   72 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   73   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   74 #endif
//   75 
//   76 #if !defined( BEACON_REQUEST_DELAY )
//   77   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//   78 #endif
//   79 
//   80 #if !defined( BEACON_REQ_DELAY_MASK )
//   81   #define BEACON_REQ_DELAY_MASK       0x007F
//   82 #endif
//   83 
//   84 #if defined (AUTO_SOFT_START)
//   85   #define MAX_RESUME_RETRY            3
//   86   #define NUM_DISC_ATTEMPTS           3
//   87 #else
//   88   #define MAX_RESUME_RETRY            1
//   89 #endif
//   90 
//   91 #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
//   92 
//   93 // Beacon Order Settings (see NLMEDE.h)
//   94 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//   95 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//   96 
//   97 #if ( SECURE != 0 )
//   98   #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
//   99     // The number of times the frame counter can change before
//  100     // saving to NV
//  101     #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
//  102   #endif
//  103 #endif
//  104 
//  105 // Leave control bits
//  106 #define ZDAPP_LEAVE_CTRL_INIT 0
//  107 #define ZDAPP_LEAVE_CTRL_SET  1
//  108 #define ZDAPP_LEAVE_CTRL_RA   2
//  109 
//  110 // Standard time to update NWK NV data
//  111 #define ZDAPP_UPDATE_NWK_NV_TIME 100
//  112 
//  113 // Address Manager Stub Implementation
//  114 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  115 
//  116 /*********************************************************************
//  117  * TYPEDEFS
//  118  */
//  119 
//  120 /*********************************************************************
//  121  * GLOBAL VARIABLES
//  122  */
//  123 
//  124 #if defined( LCD_SUPPORTED )
//  125   byte MatchRsps = 0;
//  126 #endif
//  127 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  128 byte zdoDiscCounter = 1;
zdoDiscCounter:
        DS 1
        REQUIRE `?<Initializer for zdoDiscCounter>`
        REQUIRE __INIT_XDATA_I
//  129 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  130 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
//  131 
//  132 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
//  133   byte zdappMgmtNwkDiscRspTransSeq;
//  134   byte zdappMgmtNwkDiscReqInProgress = FALSE;
//  135   zAddrType_t zdappMgmtNwkDiscRspAddr;
//  136   byte zdappMgmtNwkDiscStartIndex;
//  137   byte zdappMgmtSavedNwkState;
//  138 #endif
//  139 
//  140 #if ( SECURE != 0 )
//  141   uint16 nwkFrameCounterChanges = 0;
//  142 #endif
//  143 
//  144 #if defined ( SOFT_START )
//  145   static uint8 softStartAllowCoord = TRUE;
//  146 #endif
//  147 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  148 uint8 continueJoining = TRUE;
continueJoining:
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  149 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  150 byte  _tmpRejoinState;
_tmpRejoinState:
        DS 1
//  151 
//  152 /*********************************************************************
//  153  * EXTERNAL VARIABLES
//  154  */
//  155 
//  156 /*********************************************************************
//  157  * EXTERNAL FUNCTIONS
//  158  */
//  159 
//  160 /*********************************************************************
//  161  * LOCAL FUNCTIONS
//  162  */
//  163 
//  164 void ZDApp_NetworkStartEvt( void );
//  165 void ZDApp_DeviceAuthEvt( void );
//  166 void ZDApp_SaveNetworkStateEvt( void );
//  167 
//  168 uint8 ZDApp_ReadNetworkRestoreState( void );
//  169 uint8 ZDApp_RestoreNetworkState( void );
//  170 void ZDAppDetermineDeviceType( void );
//  171 void ZDAppSetupProtoVersion( void );
//  172 void ZDApp_InitUserDesc( void );
//  173 void ZDAppCheckForHoldKey( void );
//  174 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  175 void ZDApp_ProcessNetworkJoin( void );
//  176 void ZDApp_SetCoordAddress( byte endPoint, byte dstEP );
//  177 void ZDApp_SendNewDstAddr( byte dstEP, zAddrType_t *dstAddr,
//  178                cId_t clusterID, byte removeFlag, byte task_id, byte endpoint );
//  179 
//  180 #if ( SECURE != 0 )
//  181   void ZDApp_SaveNwkKey( void );
//  182   byte ZDApp_RestoreNwkKey( void );
//  183 #endif
//  184 
//  185 void ZDApp_SendMsg( byte taskID, byte cmd, byte len, byte *buf );
//  186 
//  187 #if defined ( ZDO_BIND_UNBIND_RESPONSE ) && !defined ( REFLECTOR )
//  188   extern void ZDApp_AppBindReq( byte TransSeq, zAddrType_t *SrcAddr, byte *SrcAddress,
//  189                       byte SrcEndPoint, cId_t ClusterID, byte *DstAddress,
//  190                       byte DstEndPoint, byte SecurityUse, uint8 Type );
//  191 #endif
//  192 
//  193 void ZDApp_ResetTimerStart( uint16 delay );
//  194 void ZDApp_ResetTimerCancel( void );
//  195 void ZDApp_LeaveCtrlInit( void );
//  196 void ZDApp_LeaveCtrlSet( uint8 ra );
//  197 uint8 ZDApp_LeaveCtrlBypass( void );
//  198 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  199 void ZDApp_LeaveReset( uint8 ra );
//  200 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
//  201                         uint8 removeChildren );
//  202 void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
//  203 
//  204 /*********************************************************************
//  205  * LOCAL VARIABLES
//  206  */
//  207 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  208 byte ZDAppTaskID;
ZDAppTaskID:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  209 byte nwkStatus;
nwkStatus:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  210 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  211 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
//  212 
//  213 #if defined( HOLD_AUTO_START )
//  214   devStates_t devState = DEV_HOLD;
//  215 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  216   devStates_t devState = DEV_INIT;
devState:
        DS 1
        REQUIRE `?<Initializer for devState>`
        REQUIRE __INIT_XDATA_I
//  217 #endif
//  218 
//  219 #if defined( ZDO_COORDINATOR ) && !defined( SOFT_START )
//  220   // Set the default to coodinator

        RSEG XDATA_I:XDATA:NOROOT(0)
//  221   devStartModes_t devStartMode = MODE_HARD;
devStartMode:
        DS 1
        REQUIRE `?<Initializer for devStartMode>`
        REQUIRE __INIT_XDATA_I
//  222 #else
//  223   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
//  224   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  225                         // to parent. Set to make the device do an Orphan scan.
//  226 #endif
//  227 
//  228 #if defined ( ZDO_IEEEADDR_REQUEST )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  229   static byte ZDApp_IEEEAddrRsp_TaskID = 0;  // Initialized to NO TASK
??ZDApp_IEEEAddrRsp_TaskID:
        DS 1
//  230 #endif
//  231 
//  232 #if defined ( ZDO_NWKADDR_REQUEST )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  233   static byte ZDApp_NwkAddrRsp_TaskID = 0;  // Initialized to NO TASK
??ZDApp_NwkAddrRsp_TaskID:
        DS 1
//  234 #endif
//  235 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  236 static byte ZDApp_MatchDescRsp_TaskID = 0;  // Initialized to NO TASK
??ZDApp_MatchDescRsp_TaskID:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  237 static byte ZDApp_EndDeviceAnnounce_TaskID = 0;  // Initialized to NO TASK
??ZDApp_EndDeviceAnnounce_TaskID:
        DS 1
//  238 
//  239 #if defined ( ZDO_BIND_UNBIND_REQUEST )

        RSEG XDATA_I:XDATA:NOROOT(0)
//  240   static byte ZDApp_BindUnbindRsp_TaskID = TASK_NO_TASK;
??ZDApp_BindUnbindRsp_TaskID:
        DS 1
        REQUIRE `?<Initializer for ZDApp_BindUnbindRsp_TaskID>`
        REQUIRE __INIT_XDATA_I
//  241 #endif
//  242 
//  243 #if defined ( ZDO_BIND_UNBIND_RESPONSE ) && !defined ( REFLECTOR )
//  244   static byte ZDApp_BindReq_TaskID = 0;  // Initialized to NO TASK
//  245 #endif
//  246 
//  247 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && !defined ( REFLECTOR )
//  248   static byte ZDApp_MgmtBindReq_TaskID = 0;  // Initialized to NO TASK
//  249 #endif
//  250 
//  251 #if !defined( ZDO_COORDINATOR ) || defined( SOFT_START )
//  252   static uint8 retryCnt;
//  253 #endif
//  254 
//  255 // a little awkward -- this is will hold the list of versions that are legal given other
//  256 // constraints such as NV value, macro values etc. list used in ZDO_NetworkDiscoveryConfirmCB()
//  257 // when a joining device is deciding which network to join.

        RSEG XDATA_I:XDATA:NOROOT(0)
//  258 static byte sPVerList[] = {ZB_PROT_V1_1, ZB_PROT_V1_0};
??sPVerList:
        DS 2
        REQUIRE `?<Initializer for sPVerList>`
        REQUIRE __INIT_XDATA_I
//  259 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  260 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DS 6
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_10000:
        DS 4
        REQUIRE `?<Initializer for __Constant_10000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_0:
        DS 4
        REQUIRE `?<Initializer for __Constant_0>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_80000:
        DS 4
        REQUIRE `?<Initializer for __Constant_80000>`
        REQUIRE __INIT_XDATA_I
//  261 {
//  262   ZDO_EP,
//  263   &ZDAppTaskID,
//  264   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  265   (afNetworkLatencyReq_t)0            // No Network Latency req
//  266 };
//  267 
//  268 /*********************************************************************
//  269  * @fn      ZDApp_Init
//  270  *
//  271  * @brief   ZDApp Initialization function.
//  272  *
//  273  * @param   task_id - ZDApp Task ID
//  274  *
//  275  * @return  None
//  276  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  277 void ZDApp_Init( byte task_id )
ZDApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDApp_Init
//  278 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, ZDAppCheckForHoldKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, ZDApp_InitUserDesc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, ZDAppSetupProtoVersion
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, NLME_GetRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 1)
//  279   uint8 capabilities;
//  280 
//  281   // Save the task ID
//  282   ZDAppTaskID = task_id;
        MOV	A,R1
        MOV	DPTR,#ZDAppTaskID
        MOVX	@DPTR,A
//  283 
//  284   // Initialize the ZDO global device short address storage
//  285   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV	A,#0x2
        MOV	DPTR,#(ZDAppNwkAddr + 8)
        MOVX	@DPTR,A
//  286   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV	DPTR,#ZDAppNwkAddr
        MOV	A,#-0x2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#-0x1
        MOVX	@DPTR,A
//  287   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        MOV	DPTR,#(NLME_GetExtAddr & 0xffff)
        MOV	A,#((NLME_GetExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  288 
//  289   // Check for manual "Hold Auto Start"
//  290   ZDAppCheckForHoldKey();
        ; Setup parameters for call to function ZDAppCheckForHoldKey
        MOV	DPTR,#(ZDAppCheckForHoldKey & 0xffff)
        MOV	A,#((ZDAppCheckForHoldKey >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  291 
//  292   // Initialize ZDO items and setup the device - type of device to create.
//  293   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        MOV	DPTR,#(ZDO_Init & 0xffff)
        MOV	A,#((ZDO_Init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  294 
//  295   // Register the endpoint description with the AF
//  296   // This task doesn't have a Simple description, but we still need
//  297   // to register the endpoint.
//  298   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV	R2,#(ZDApp_epDesc & 0xff)
        MOV	R3,#((ZDApp_epDesc >> 8) & 0xff)
        MOV	DPTR,#(afRegister & 0xffff)
        MOV	A,#((afRegister >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  299 
//  300 #if defined( ZDO_USERDESC_RESPONSE )
//  301   ZDApp_InitUserDesc();
        ; Setup parameters for call to function ZDApp_InitUserDesc
        MOV	DPTR,#(ZDApp_InitUserDesc & 0xffff)
        MOV	A,#((ZDApp_InitUserDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  302 #endif // ZDO_USERDESC_RESPONSE
//  303 
//  304 #if defined( ZDO_CACHE )
//  305   ZDCacheInit();
//  306 #endif
//  307 
//  308   // Setup the Zigbee Network Protocol Version
//  309   ZDAppSetupProtoVersion();
        ; Setup parameters for call to function ZDAppSetupProtoVersion
        MOV	DPTR,#(ZDAppSetupProtoVersion & 0xffff)
        MOV	A,#((ZDAppSetupProtoVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  310 
//  311   // set broadcast address mask to support broadcast filtering
//  312   NLME_GetRequest(nwkCapabilityInfo, 0, &capabilities);
        ; Setup parameters for call to function NLME_GetRequest
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	R1,#-0x71
        MOV	DPTR,#(NLME_GetRequest & 0xffff)
        MOV	A,#((NLME_GetRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  313   NLME_SetBroadcastFilter( capabilities );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(NLME_SetBroadcastFilter & 0xffff)
        MOV	A,#((NLME_SetBroadcastFilter >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  314 
//  315   // Start the device?
//  316   if ( devState != DEV_HOLD )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JZ	??ZDApp_Init_0
//  317   {
//  318     ZDOInitDevice( 0 );
        ; Setup parameters for call to function ZDOInitDevice
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(ZDOInitDevice & 0xffff)
        MOV	A,#((ZDOInitDevice >> 16) & 0xff)
        SJMP	??ZDApp_Init_1
//  319   }
//  320   else
//  321   {
//  322     // Blink LED to indicate HOLD_START
//  323     HalLedBlink ( HAL_LED_4, 0, 50, 500 );
??ZDApp_Init_0:
        ; Setup parameters for call to function HalLedBlink
        MOV	R4,#-0xc
        MOV	R5,#0x1
        MOV	R3,#0x32
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedBlink & 0xffff)
        MOV	A,#((HalLedBlink >> 16) & 0xff)
??ZDApp_Init_1:
        LJMP	?Subroutine38 & 0xFFFF
        CFI EndBlock cfiBlock0
//  324   }
//  325 } /* ZDO_Init() */
//  326 
//  327 /*********************************************************************
//  328  * @fn      ZDApp_event_loop()
//  329  *
//  330  * @brief   Main event loop for Zigbee device objects task. This function
//  331  *          should be called at periodic intervals.
//  332  *
//  333  * @param   task_id - Task ID
//  334  * @param   events  - Bitmap of events
//  335  *
//  336  * @return  none
//  337  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  338 UINT16 ZDApp_event_loop( byte task_id, UINT16 events )
ZDApp_event_loop:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ZDApp_event_loop
//  339 {
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, ZDApp_NetworkStartEvt
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, osal_pwrmgr_device
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  340   uint8 *msg_ptr;
//  341 
//  342   if ( events & SYS_EVENT_MSG )
        MOV	A,#-0x80
        ANL	A,R7
        MOV	R1,A
        CLR	A
        JNZ	??ZDApp_event_loop_0
        MOV	A,R1
??ZDApp_event_loop_0:
        JNZ	??ZDApp_event_loop_1
//  343   {
//  344     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  345     {
//  346       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  347 
//  348       // Release the memory
//  349       osal_msg_deallocate( msg_ptr );
//  350     }
//  351 
//  352     // Return unprocessed events
//  353     return (events ^ SYS_EVENT_MSG);
//  354   }
//  355 
//  356   if ( events & ZDO_NETWORK_INIT )
        MOV	A,R6
        MOV	C,0xE0 /* A   */.0
        JNC	??ZDApp_event_loop_2
//  357   {
//  358     // Initialize apps and start the network
//  359     devState = DEV_INIT;
        MOV	A,#0x1
        MOV	DPTR,#devState
        MOVX	@DPTR,A
//  360     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  361                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV	R4,#0xf
        MOV	R3,#0xf
        MOV	DPTR,#devStartMode
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        ANL	A,#0x7
        MOV	R1,A
        MOV	DPTR,#(ZDO_StartDevice & 0xffff)
        MOV	A,#((ZDO_StartDevice >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  362 
//  363     // Return unprocessed events
//  364     return (events ^ ZDO_NETWORK_INIT);
        MOV	A,#0x1
??ZDApp_event_loop_3:
        XRL	A,R6
        MOV	R2,A
        MOV	A,R7
??ZDApp_event_loop_4:
        MOV	R3,A
        LJMP	??ZDApp_event_loop_5 & 0xFFFF
//  365   }
??ZDApp_event_loop_6:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        MOV	DPTR,#(ZDApp_ProcessOSALMsg & 0xffff)
        MOV	A,#((ZDApp_ProcessOSALMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        ; Setup parameters for call to function osal_msg_deallocate
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(osal_msg_deallocate & 0xffff)
        MOV	A,#((osal_msg_deallocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDApp_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV	DPTR,#ZDAppTaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_msg_receive & 0xffff)
        MOV	A,#((osal_msg_receive >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	A,R2
        JNZ	??ZDApp_event_loop_7
        MOV	A,R3
??ZDApp_event_loop_7:
        JNZ	??ZDApp_event_loop_6
        MOV	A,R6
        MOV	R2,A
        MOV	A,#-0x80
??ZDApp_event_loop_8:
        XRL	A,R7
        SJMP	??ZDApp_event_loop_4
//  366 
//  367 #if defined (RTR_NWK)
//  368   if ( events & ZDO_NETWORK_START )
??ZDApp_event_loop_2:
        ANL	A,#0x2
        JZ	??ZDApp_event_loop_9
//  369   {
//  370     ZDApp_NetworkStartEvt();
        ; Setup parameters for call to function ZDApp_NetworkStartEvt
        MOV	DPTR,#(ZDApp_NetworkStartEvt & 0xffff)
        MOV	A,#((ZDApp_NetworkStartEvt >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  371 
//  372     // Return unprocessed events
//  373     return (events ^ ZDO_NETWORK_START);
        MOV	A,#0x2
??ZDApp_event_loop_10:
        SJMP	??ZDApp_event_loop_3
//  374   }
//  375 #endif  //RTR_NWK
//  376 
//  377 #if defined ( RTR_NWK )
//  378   if ( events & ZDO_ROUTER_START )
??ZDApp_event_loop_9:
        MOV	A,R6
        ANL	A,#0x20
        JZ	??ZDApp_event_loop_11
//  379   {
//  380     if ( nwkStatus == ZSuccess )
        MOV	DPTR,#nwkStatus
        MOVX	A,@DPTR
        JNZ	??ZDApp_event_loop_12
//  381     {
//  382       if ( devState == DEV_END_DEVICE )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0x6
        JNZ	??ZDApp_event_loop_13
//  383         devState = DEV_ROUTER;
        MOV	A,#0x7
        MOVX	@DPTR,A
//  384 
//  385       osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_event_loop_13:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV	R1,#0x0
        MOV	DPTR,#(osal_pwrmgr_device & 0xffff)
        MOV	A,#((osal_pwrmgr_device >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  386     }
//  387     else
//  388     {
//  389       // remain as end device!!
//  390     }
//  391     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_event_loop_12:
        ; Setup parameters for call to function osal_set_event
        MOV	R2,#0x10
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  392 
//  393     // Return unprocessed events
//  394     return (events ^ ZDO_ROUTER_START);
        MOV	A,#0x20
        SJMP	??ZDApp_event_loop_3
//  395   }
//  396 #endif  // RTR
//  397 
//  398   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_11:
        MOV	A,R6
        ANL	A,#0x10
        JZ	??ZDApp_event_loop_14
//  399   {
//  400     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(ZDO_UpdateNwkStatus & 0xffff)
        MOV	A,#((ZDO_UpdateNwkStatus >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  401 
//  402     // Return unprocessed events
//  403     return (events ^ ZDO_STATE_CHANGE_EVT);
        MOV	A,#0x10
        SJMP	??ZDApp_event_loop_10
//  404   }
//  405 
//  406   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_14:
        MOV	A,R6
        ANL	A,#0x8
        JZ	??ZDApp_event_loop_15
//  407   {
//  408     // User defined logic
//  409 
//  410     // Return unprocessed events
//  411     return (events ^ ZDO_COMMAND_CNF);
        MOV	A,#0x8
        XRL	A,R6
        MOV	R2,A
        SJMP	??ZDApp_event_loop_5
//  412   }
//  413 
//  414 #if defined( ZDSECMGR_SECURE ) && defined( RTR_NWK )
//  415   if ( events & ZDO_NEW_DEVICE )
//  416   {
//  417     // process the new device event
//  418     if ( ZDSecMgrNewDeviceEvent() == TRUE )
//  419     {
//  420       osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
//  421     }
//  422 
//  423     // Return unprocessed events
//  424     return (events ^ ZDO_NEW_DEVICE);
//  425   }
//  426 #endif  // ZDSECMGR_SECURE && RTR
//  427 
//  428 #if defined ( ZDSECMGR_COMMERCIAL )
//  429   if ( events & ZDO_SECMGR_EVENT )
//  430   {
//  431     ZDSecMgrEvent();
//  432 
//  433     // Return unprocessed events
//  434     return (events ^ ZDO_SECMGR_EVENT);
//  435   }
//  436 #endif // defined( ZDSECMGR_COMMERCIAL )
//  437 
//  438 #if   ( SECURE != 0  )
//  439   if ( events & ZDO_DEVICE_AUTH )
//  440   {
//  441     ZDApp_DeviceAuthEvt();
//  442 
//  443     // Return unprocessed events
//  444     return (events ^ ZDO_DEVICE_AUTH);
//  445   }
//  446 #endif  // SECURE
//  447 
//  448   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_15:
        MOV	A,#0x2
        ANL	A,R7
        MOV	R1,A
        CLR	A
        JNZ	??ZDApp_event_loop_16
        MOV	A,R1
??ZDApp_event_loop_16:
        JZ	??ZDApp_event_loop_17
//  449   {
//  450     ZDApp_SaveNetworkStateEvt();
//  451 
//  452     // Return unprocessed events
//  453     return (events ^ ZDO_NWK_UPDATE_NV);
        MOV	A,#0x2
        SJMP	??ZDApp_event_loop_8
//  454   }
//  455 
//  456 #if ( SECURE != 0  )
//  457   if ( events & ZDO_FRAMECOUNTER_CHANGE )
//  458   {
//  459     if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
//  460       ZDApp_SaveNwkKey();
//  461 
//  462     // Return unprocessed events
//  463     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
//  464   }
//  465 #endif
//  466 
//  467   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_17:
        MOV	A,R6
        ANL	A,#0x4
        JZ	??ZDApp_event_loop_18
//  468   {
//  469     // The device has been in the UNAUTH state, so reset
//  470     // Note: there will be no return from this call
//  471     SystemReset();
        CLR	0xa8.7
        MOV	0xc9,#-0x55
        MOV	0xc9,#0x5b
??ZDApp_event_loop_19:
        NOP
        SJMP	??ZDApp_event_loop_19
//  472   }
//  473 
//  474   // Discard or make more handlers
//  475   return 0;
??ZDApp_event_loop_18:
        MOV	R2,#0x0
        MOV	R3,#0x0
??ZDApp_event_loop_5:
        SJMP	??Subroutine40_1
        CFI EndBlock cfiBlock1
//  476 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x2
??Subroutine40_0:
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
??Subroutine40_1:
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  477 
//  478 /*********************************************************************
//  479  * Application Functions
//  480  */
//  481 
//  482 /*********************************************************************
//  483  * @fn      ZDOInitDevice
//  484  *
//  485  * @brief   Start the device in the network.  This function will read
//  486  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  487  *   restore the network state of the device.
//  488  *
//  489  * @param   startDelay - timeDelay to start device (in milliseconds).
//  490  *      There is a jitter added to this delay:
//  491  *              ((NWK_START_DELAY + startDelay)
//  492  *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  493  *
//  494  * NOTE:    If the application would like to force a "new" join, the
//  495  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  496  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  497  *          this function. "new" join means to not restore the network
//  498  *          state of the device. Use zgWriteStartupOptions() to set these
//  499  *          options.
//  500  *
//  501  * @return
//  502  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  503  *          restored.
//  504  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  505  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  506  *          it could mean that there was no network state to restore.
//  507  *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
//  508  *          with the rejoin option set to TRUE.  So, the device was not
//  509  *          started in the network (one time only).  The next time this
//  510  *          function is called it will start.
//  511  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  512 uint8 ZDOInitDevice( uint16 startDelay )
ZDOInitDevice:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ZDOInitDevice
//  513 {
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlInit
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlStartup
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDOInitDevice, osal_rand
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDOInitDevice, ZDApp_NetworkInit
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LCALL	?Subroutine29 & 0xFFFF
//  514   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  515   uint16 extendedDelay = 0;
//  516 
//  517   devState = DEV_INIT;    // Remove the Hold state
??CrossCallReturnLabel_84:
        MOV	A,#0x1
        MOV	DPTR,#devState
        MOVX	@DPTR,A
//  518 
//  519   // Initialize leave control logic
//  520   ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        MOV	DPTR,#(ZDApp_LeaveCtrlInit & 0xffff)
        MOV	A,#((ZDApp_LeaveCtrlInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  521 
//  522   // Check leave control reset settings
//  523   ZDApp_LeaveCtrlStartup( &devState, &startDelay );
        ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#(devState & 0xff)
        MOV	R3,#((devState >> 8) & 0xff)
        MOV	DPTR,#(ZDApp_LeaveCtrlStartup & 0xffff)
        MOV	A,#((ZDApp_LeaveCtrlStartup >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  524 
//  525   // Leave may make the hold state come back
//  526   if ( devState == DEV_HOLD )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JNZ	??ZDOInitDevice_0
//  527     return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
        MOV	R1,#0x2
        SJMP	??ZDOInitDevice_1
//  528 
//  529 #if defined ( NV_RESTORE )
//  530   // Get Keypad directly to see if a reset nv is needed.
//  531   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  532   // while booting to skip past NV Restore.
//  533   if ( HalKeyRead() == SW_BYPASS_NV )
//  534     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  535   else
//  536   {
//  537     // Determine if NV should be restored
//  538     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  539   }
//  540 
//  541   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  542   {
//  543     networkStateNV = ZDApp_RestoreNetworkState();
//  544   }
//  545   else
//  546   {
//  547     // Wipe out the network state in NV
//  548     NLME_InitNV();
//  549     NLME_SetDefaultNV();
//  550     ZDAppSetupProtoVersion();
//  551   }
//  552 #endif
//  553 
//  554   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
//  555   {
//  556     ZDAppDetermineDeviceType();
//  557 
//  558     // Only delay if joining network - not restoring network state
//  559     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  560               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
??ZDOInitDevice_0:
        ; Setup parameters for call to function osal_rand
        MOV	DPTR,#(osal_rand & 0xffff)
        MOV	A,#((osal_rand >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	R0,?V0 + 0
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,#0x7f
        ANL	A,R0
        MOV	R0,A
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,#0x64
        ADD	A,R0
        MOV	R2,A
        CLR	A
        ADDC	A,R1
        MOV	R3,A
//  561   }
//  562 
//  563   // Trigger the network start
//  564   ZDApp_NetworkInit( extendedDelay );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV	DPTR,#(ZDApp_NetworkInit & 0xffff)
        MOV	A,#((ZDApp_NetworkInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  565 
//  566   return ( networkStateNV );
        MOV	R1,#0x1
??ZDOInitDevice_1:
        SJMP	?Subroutine40
        CFI EndBlock cfiBlock3
//  567 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_6
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_4
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_5
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 17)
??Subroutine29_0:
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
//  568 
//  569 /*********************************************************************
//  570  * @fn      ZDApp_ReadNetworkRestoreState
//  571  *
//  572  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  573  *          or not to restore the network state.
//  574  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  575  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  576  *
//  577  * @param   none
//  578  *
//  579  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  580  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  581  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  582  *          ZCD_NV_STARTUP_OPTION
//  583  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  584 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function ZDApp_ReadNetworkRestoreState
//  585 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  586   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV	R6,#0x0
//  587 
//  588   // Look for the New Network State option.
//  589   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        MOV	DPTR,#(zgReadStartupOptions & 0xffff)
        MOV	A,#((zgReadStartupOptions >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	C,0xE0 /* A   */.1
        JNC	??ZDApp_ReadNetworkRestoreState_0
//  590   {
//  591     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        INC	R6
//  592   }
//  593 
//  594   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV	A,R6
        MOV	R1,A
        SJMP	??Subroutine41_0
        CFI EndBlock cfiBlock13
//  595 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Valid
??Subroutine41_0:
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock14
//  596 
//  597 /*********************************************************************
//  598  * @fn      ZDAppDetermineDeviceType()
//  599  *
//  600  * @brief   Determines the type of device to start.  Right now
//  601  *          this only works with the SOFT_START feature.  So it doesn't
//  602  *          support the end device type.
//  603  *
//  604  *          Looks at zgDeviceLogicalType and determines what type of
//  605  *          device to start.  The types are:
//  606  *            ZG_DEVICETYPE_COORDINATOR
//  607  *            ZG_DEVICETYPE_ROUTER
//  608  *            ZG_DEVICETYPE_ENDDEVICE - not supported yet.
//  609  *            ZG_DEVICETYPE_SOFT - looks for coordinator, if one doesn't
//  610  *               exist, becomes one.  This option is should only be used
//  611  *               if the system is manually configured and you are insured
//  612  *               that the first device is started before all the other
//  613  *               devices are started.
//  614  *
//  615  * @param   none
//  616  *
//  617  * @return  none
//  618  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  619 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function ZDAppDetermineDeviceType
//  620 {
        ; Saved register size: 0
        ; Auto size: 0
//  621   if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
        LJMP	?BRET
        CFI EndBlock cfiBlock15
//  622     return;
//  623 
//  624 #if defined ( SOFT_START )
//  625   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
//  626   {
//  627     devStartMode = MODE_HARD;     // Start as a coordinator
//  628     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
//  629   }
//  630   else
//  631   {
//  632     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER )
//  633     {
//  634       softStartAllowCoord = FALSE;  // Don't allow coord to start
//  635       continueJoining = TRUE;
//  636     }
//  637     devStartMode = MODE_JOIN;     // Assume joining
//  638   }
//  639 #endif // SOFT_START
//  640 }
//  641 
//  642 /*********************************************************************
//  643  * @fn      ZDApp_NetworkStartEvt()
//  644  *
//  645  * @brief   Process the Network Start Event
//  646  *
//  647  * @param   none
//  648  *
//  649  * @return  none
//  650  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  651 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function ZDApp_NetworkStartEvt
//  652 {
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  653   if ( nwkStatus == ZSuccess )
        MOV	DPTR,#nwkStatus
        MOVX	A,@DPTR
        JNZ	??ZDApp_NetworkStartEvt_0
//  654   {
//  655     // Successfully started a ZigBee network
//  656     if ( devState == DEV_COORD_STARTING )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0x8
        JNZ	??ZDApp_NetworkStartEvt_1
//  657     {
//  658       devState = DEV_ZB_COORD;
        MOV	A,#0x9
        MOVX	@DPTR,A
//  659 
//  660 #if ( SECURE != 0 )
//  661       // Initialize keys
//  662       SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0 );
//  663       SSP_SwitchNwkKey( 0 );
//  664 #endif
//  665     }
//  666 
//  667     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV	R1,#0x0
        MOV	DPTR,#(osal_pwrmgr_device & 0xffff)
        MOV	A,#((osal_pwrmgr_device >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  668     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        SJMP	??ZDApp_NetworkStartEvt_2
//  669   }
//  670   else
//  671   {
//  672     // Try again with a higher energy threshold !!
//  673     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        MOV	DPTR,#(NLME_GetEnergyThreshold & 0xffff)
        MOV	A,#((NLME_GetEnergyThreshold >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R0,A
        MOV	A,#0x10
        ADD	A,R0
        MOV	R0,A
        CLR	A
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R0
        SUBB	A,#-0x1
        MOV	A,R1
        SUBB	A,#0x0
        CLR	C
        XRL	A,PSW
        RLC	A
        JNC	??ZDApp_NetworkStartEvt_3
//  674     {
//  675       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        MOV	A,#((NLME_GetEnergyThreshold >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        ADD	A,#0x10
        MOV	R1,A
        MOV	DPTR,#(NLME_SetEnergyThreshold & 0xffff)
        MOV	A,#((NLME_SetEnergyThreshold >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  676       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV	R2,#0x1
        SJMP	??ZDApp_NetworkStartEvt_4
//  677     }
//  678     else
//  679     {
//  680       // Failed to start network. Enter a dormant state (until user intervenes)
//  681       devState = DEV_INIT;
??ZDApp_NetworkStartEvt_3:
        MOV	A,#0x1
        MOV	DPTR,#devState
        MOVX	@DPTR,A
//  682       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
??ZDApp_NetworkStartEvt_2:
        MOV	R2,#0x10
??ZDApp_NetworkStartEvt_4:
        LJMP	?Subroutine46 & 0xFFFF
        CFI EndBlock cfiBlock16
//  683     }
//  684   }
//  685 }
//  686 
//  687 #if ( SECURE != 0 )
//  688 /*********************************************************************
//  689  * @fn      ZDApp_DeviceAuthEvt()
//  690  *
//  691  * @brief   Process the Device Authentic Event
//  692  *
//  693  * @param   none
//  694  *
//  695  * @return  none
//  696  */
//  697 void ZDApp_DeviceAuthEvt( void )
//  698 {
//  699   // received authentication from trust center
//  700   if ( devState == DEV_END_DEVICE_UNAUTH )
//  701   {
//  702     // Stop the reset timer so it doesn't reset
//  703     ZDApp_ResetTimerCancel();
//  704 
//  705     devState = DEV_END_DEVICE;
//  706     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
//  707 
//  708     // Set the Power Manager Device
//  709 #if defined ( POWER_SAVING )
//  710     osal_pwrmgr_device( PWRMGR_BATTERY );
//  711 #endif
//  712 
//  713 #if defined ( RTR_NWK )
//  714     if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
//  715     {
//  716       // NOTE: first two parameters are not used, see NLMEDE.h for details
//  717       NLME_StartRouterRequest( 0, 0, false );
//  718     }
//  719 #endif  // RTR
//  720 
//  721       // Notify to save info into NV
//  722     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 100 );
//  723 
//  724     // Save off the security
//  725     ZDApp_SaveNwkKey();
//  726 
//  727 #if defined ( ZDO_ENDDEVICE_ANNCE_GENERATE )
//  728     ZDP_EndDeviceAnnce( ZDAppNwkAddr.addr.shortAddr, saveExtAddr,
//  729                        ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
//  730 #endif
//  731   }
//  732   else
//  733   {
//  734     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
//  735   }
//  736 }
//  737 #endif
//  738 
//  739 /*********************************************************************
//  740  * @fn      ZDApp_SaveNetworkStateEvt()
//  741  *
//  742  * @brief   Process the Save the Network State Event
//  743  *
//  744  * @param   none
//  745  *
//  746  * @return  none
//  747  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  748 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function ZDApp_SaveNetworkStateEvt
//  749 {
        ; Saved register size: 0
        ; Auto size: 0
//  750 #if defined ( NV_RESTORE )
//  751  #if defined ( NV_TURN_OFF_RADIO )
//  752   // Turn off the radio's receiver during an NV update
//  753   byte RxOnIdle;
//  754   byte x = false;
//  755   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
//  756   ZMacSetReq( ZMacRxOnIdle, &x );
//  757  #endif
//  758 
//  759   // Update the Network State in NV
//  760   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
//  761                  NWK_NV_DEVICELIST_ENABLE |
//  762                  NWK_NV_BINDING_ENABLE    |
//  763                  NWK_NV_ADDRMGR_ENABLE );
//  764 
//  765   // Reset the NV startup option to resume from NV by
//  766   // clearing the "New" join option.
//  767   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
//  768 
//  769  #if defined ( NV_TURN_OFF_RADIO )
//  770   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
//  771  #endif
//  772 #endif  // NV_RESTORE
//  773 }
        LJMP	?BRET
        CFI EndBlock cfiBlock17
//  774 
//  775 /*********************************************************************
//  776  * @fn      ZDApp_RestoreNetworkState()
//  777  *
//  778  * @brief   This function will restore the network state of the
//  779  *          device if the network state is stored in NV.
//  780  *
//  781  * @param   none
//  782  *
//  783  * @return
//  784  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  785  *          restored.
//  786  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
//  787  *          This could mean that zgStartupOption said to not restore, or
//  788  *          it could mean that there was no network state to restore.
//  789  *
//  790  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  791 uint8 ZDApp_RestoreNetworkState( void )
ZDApp_RestoreNetworkState:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function ZDApp_RestoreNetworkState
//  792 {
        FUNCALL ZDApp_RestoreNetworkState, NLME_InitNV
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZDApp_RestoreNetworkState, NLME_RestoreFromNV
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZDApp_RestoreNetworkState, NLME_GetShortAddr
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  793   byte nvStat;
//  794 #if ( SECURE != 0 )
//  795   nwkActiveKeyItems keyItems;
//  796 #endif
//  797 
//  798   // Initialize NWK NV items
//  799   nvStat = NLME_InitNV();
        ; Setup parameters for call to function NLME_InitNV
        MOV	DPTR,#(NLME_InitNV & 0xffff)
        MOV	A,#((NLME_InitNV >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R6,A
//  800 
//  801   if ( nvStat != NV_OPER_FAILED )
        MOV	A,#0x10
        XRL	A,R6
        JZ	??ZDApp_RestoreNetworkState_0
//  802   {
//  803     if ( NLME_RestoreFromNV() )
        ; Setup parameters for call to function NLME_RestoreFromNV
        MOV	DPTR,#(NLME_RestoreFromNV & 0xffff)
        MOV	A,#((NLME_RestoreFromNV >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JZ	??ZDApp_RestoreNetworkState_1
//  804     {
//  805       // Are we a coordinator
//  806       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        MOV	DPTR,#(NLME_GetShortAddr & 0xffff)
        MOV	A,#((NLME_GetShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#ZDAppNwkAddr
        LCALL	??Subroutine29_0 & 0xFFFF
//  807       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
??CrossCallReturnLabel_85:
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        JNZ	??ZDApp_RestoreNetworkState_2
        INC	DPTR
        MOVX	A,@DPTR
??ZDApp_RestoreNetworkState_2:
        JNZ	??ZDApp_RestoreNetworkState_3
//  808       {
//  809         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        ANL	A,#0xf8
        MOVX	@DPTR,A
//  810       }
//  811       devStartMode = MODE_RESUME;
??ZDApp_RestoreNetworkState_3:
        MOV	A,#0x1
        MOV	DPTR,#devStartMode
        MOVX	@DPTR,A
//  812     }
//  813     else
//  814       nvStat = NV_ITEM_UNINIT;
//  815 
//  816 #if   ( SECURE != 0  )
//  817     nwkFrameCounterChanges = 0;
//  818     osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
//  819     osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
//  820 
//  821   #if defined ( ZDO_COORDINATOR )
//  822     ZDApp_RestoreNwkKey();
//  823   #endif // ZDO_COORDINATOR
//  824 #endif // SECURE
//  825 
//  826     // The default for RxOnWhenIdle is true for RTR_NWK and false for end devices
//  827     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
//  828     // other than default.
//  829   }
//  830 
//  831   if ( nvStat == ZSUCCESS )
??ZDApp_RestoreNetworkState_0:
        MOV	A,R6
        JNZ	??ZDApp_RestoreNetworkState_1
//  832     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
        MOV	R1,#0x0
        SJMP	??ZDApp_RestoreNetworkState_4
//  833   else
//  834     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
??ZDApp_RestoreNetworkState_1:
        MOV	R1,#0x1
??ZDApp_RestoreNetworkState_4:
        LJMP	??Subroutine41_0 & 0xFFFF
        CFI EndBlock cfiBlock18
//  835 }
//  836 
//  837 /*********************************************************************
//  838  * @fn      ZDAppSetupProtoVersion()
//  839  *
//  840  * @brief   Setup the Network Protocol version
//  841  *
//  842  * NOTES:
//  843  *   Take care of setting initial protocol value if we're possibly a
//  844  *   Coordinator.
//  845  *
//  846  *   If DEF_PROTO_VERS macro is not defined get version
//  847  *   from NV. if the NV version isn't valid default to Version 1.1.
//  848  *
//  849  *   if DEF_PROTO_VERS macro is defined respect it.
//  850  *
//  851  *   This initialization section works for End Devices as well.
//  852  *
//  853  *   There are two chores: make sure that if we're the Coordinator we start
//  854  *   the correct network version, and set things up so that if we're a
//  855  *   joining device we join the correct network. In both cases this init
//  856  *   function runs so take care of both cases here.
//  857  *
//  858  * @param   none
//  859  *
//  860  * @return  none
//  861  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  862 void ZDAppSetupProtoVersion( void )
ZDAppSetupProtoVersion:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function ZDAppSetupProtoVersion
//  863 {
        FUNCALL ZDAppSetupProtoVersion, NLME_GetProtocolVersion
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDAppSetupProtoVersion, NLME_SetRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDAppSetupProtoVersion, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 1)
//  864   uint8 restore = 1;  // update NV or not: could save a flash erase cycle
//  865 
//  866 #if !defined ( DEF_PROTO_VERS )
//  867   uint8 protoVer = NLME_GetProtocolVersion(); // get  protocol version from NV
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//  868 
//  869   // it is possible that it is uninitialized.
//  870   if ((protoVer != ZB_PROT_V1_0) && (protoVer != ZB_PROT_V1_1))
        XRL	A,#0x1
        JZ	??ZDAppSetupProtoVersion_0
        MOVX	A,@DPTR
        XRL	A,#0x2
        JZ	??ZDAppSetupProtoVersion_0
//  871   {
//  872     // NV value not valid. 'protoVer' must be set.
//  873 
//  874     // For Coordinator behavior
//  875     // CUSTOMER NOTE: change the following to default the started network
//  876     // to a protocol version other than 1.1
//  877     protoVer = ZB_PROT_V1_1;
        MOV	A,#0x2
        MOVX	@DPTR,A
//  878   }
//  879   else
//  880   {
//  881     // NV valid. 'protoVer' is valid.
//  882     restore = 0;  // no need to update NV
//  883 
//  884     // For joining device behavior. Respect the NV version by making
//  885     // all entries in the version array the same as the NV value.
//  886     osal_memset(sPVerList, protoVer, sizeof(sPVerList));
//  887   }
//  888 #else
//  889   // macro defined. respect it.
//  890 
//  891   // don't compile if defined to an illegal value.
//  892   #if (DEF_PROTO_VERS != ZB_PROT_V1_0) && (DEF_PROTO_VERS != ZB_PROT_V1_1)
//  893     #error  No legal value for default protocol version
//  894   #endif
//  895   uint8 protoVer = DEF_PROTO_VERS;
//  896 
//  897   // For joining device behavior. respect the NV version by making
//  898   // all entries in the version array the same as the macro value.
//  899   osal_memset(sPVerList, protoVer, sizeof(sPVerList));
//  900 #endif   // DEF_PROTO_VERS
//  901 
//  902   // if we are or can be the Coordinator then we must update
//  903   // it here. if we're going to be a joining device setting will be done in the
//  904   // confirm callback if necessary.
//  905   if (restore)
//  906   {
//  907     // we need to set NV to a (possibly) new value
//  908     NLME_SetRequest(nwkProtocolVersion, 0, &protoVer);
        ; Setup parameters for call to function NLME_SetRequest
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	R1,#-0x68
        MOV	DPTR,#(NLME_SetRequest & 0xffff)
        MOV	A,#((NLME_SetRequest >> 16) & 0xff)
        SJMP	??ZDAppSetupProtoVersion_1
//  909   }
??ZDAppSetupProtoVersion_0:
        ; Setup parameters for call to function osal_memset
        MOV	R4,#0x2
        MOV	R5,#0x0
        MOV	R2,#(??sPVerList & 0xff)
        MOV	R3,#((??sPVerList >> 8) & 0xff)
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
??ZDAppSetupProtoVersion_1:
        LJMP	?Subroutine38 & 0xFFFF
        CFI EndBlock cfiBlock19
//  910 }
//  911 
//  912 /*********************************************************************
//  913  * @fn      ZDApp_InitUserDesc()
//  914  *
//  915  * @brief   Initialize the User Descriptor, the descriptor is read from NV
//  916  *          when needed.  If you want to initialize the User descriptor to
//  917  *          something other than all zero, do it here.
//  918  *
//  919  * @param   none
//  920  *
//  921  * @return  none
//  922  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  923 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function ZDApp_InitUserDesc
//  924 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME XSTACK, 29, STACK
        ARGFRAME XSTACK, 29, STACK
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME XSTACK, 31, STACK
        ARGFRAME XSTACK, 31, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV	A,#-0x11
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  925   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
//  926 
//  927   // Initialize the User Descriptor, the descriptor is read from NV
//  928   // when needed.  If you want to initialize the User descriptor to something
//  929   // other than all zero, do it here.
//  930   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV	R4,#0x11
        MOV	R5,#0x0
        MOV	R1,#0x0
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  931   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
//  932          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_item_init
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV	R4,#0x11
        MOV	R5,#0x0
        MOV	R2,#-0x7f
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_init & 0xffff)
        MOV	A,#((osal_nv_item_init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	A,R1
        JNZ	??ZDApp_InitUserDesc_0
//  933   {
//  934     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
//  935          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV	?V0 + 0,#0x11
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7f
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	A,R1
        JNZ	??ZDApp_InitUserDesc_0
//  936     {
//  937       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JZ	??ZDApp_InitUserDesc_0
//  938       {
//  939         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        SETB	0xE0 /* A   */.4
        MOVX	@DPTR,A
//  940       }
//  941     }
//  942   }
//  943 }
??ZDApp_InitUserDesc_0:
        MOV	A,#0x11
        LJMP	??Subroutine40_0 & 0xFFFF
        CFI EndBlock cfiBlock20
//  944 
//  945 /*********************************************************************
//  946  * @fn      ZDAppCheckForHoldKey()
//  947  *
//  948  * @brief   Check for key to set the device into Hold Auto Start
//  949  *
//  950  * @param   none
//  951  *
//  952  * @return  none
//  953  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  954 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function ZDAppCheckForHoldKey
//  955 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  956 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  957   // Get Keypad directly to see if a HOLD_START is needed.
//  958   // Hold down the SW_BYPASS_START key (see OnBoard.h)
//  959   // while booting to avoid starting up the device.
//  960   if ( HalKeyRead () == SW_BYPASS_START)
        ; Setup parameters for call to function HalKeyRead
        MOV	DPTR,#(HalKeyRead & 0xffff)
        MOV	A,#((HalKeyRead >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JNZ	??ZDAppCheckForHoldKey_0
//  961   {
//  962     // Change the device state to HOLD on start up
//  963     devState = DEV_HOLD;
        CLR	A
        MOV	DPTR,#devState
        MOVX	@DPTR,A
//  964   }
//  965 #endif // HAL_KEY
//  966 }
??ZDAppCheckForHoldKey_0:
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock21
//  967 
//  968 /*********************************************************************
//  969  * @fn      ZDApp_ProcessOSALMsg()
//  970  *
//  971  * @brief   Process the incoming task message.
//  972  *
//  973  * @param   msgPtr - message to process
//  974  *
//  975  * @return  none
//  976  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  977 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function ZDApp_ProcessOSALMsg
//  978 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  979   // Data Confirmation message fields
//  980   byte sentEP;       // This should always be 0
//  981   byte sentStatus;
//  982   afDataConfirm_t *afDataConfirm;
//  983 
//  984   switch ( msgPtr->event )
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for ZDApp_ProcessOSALMsg>_0`:
        DB        26
        DB        0
        DW        ??ZDApp_ProcessOSALMsg_0
        DW        ??ZDApp_ProcessOSALMsg_1
//  985   {
//  986     // Incoming ZDO Message
//  987     case AF_INCOMING_MSG_CMD:
//  988       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_1:
        ; Setup parameters for call to function ZDP_IncomingData
        MOV	DPTR,#(ZDP_IncomingData & 0xffff)
        MOV	A,#((ZDP_IncomingData >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  989       break;
//  990 
//  991     case AF_DATA_CONFIRM_CMD:
//  992       // This message is received as a confirmation of a data packet sent.
//  993       // The status is of ZStatus_t type [defined in NLMEDE.h]
//  994       // The message fields are defined in AF.h
//  995       afDataConfirm = (afDataConfirm_t *)msgPtr;
//  996       sentEP = afDataConfirm->endpoint;
//  997       sentStatus = afDataConfirm->hdr.status;
//  998 
//  999       // Action taken when confirmation is received.
// 1000       /* Put code here */
// 1001 #if !defined ( RTR_NWK )
// 1002       if ( sentStatus == ZMacNoACK )
// 1003       {
// 1004         //ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
// 1005       }
// 1006 #else
// 1007      (void)sentStatus;
// 1008 #endif
// 1009       break;
// 1010 
// 1011     case ZDO_NWK_DISC_CNF:
// 1012       if (devState != DEV_NWK_DISC)
// 1013       {
// 1014       }
// 1015 #if !defined ( ZDO_COORDINATOR ) || defined ( SOFT_START )
// 1016   #if defined ( MANAGED_SCAN )
// 1017       else if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
// 1018   #else
// 1019       else if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter++ > NUM_DISC_ATTEMPTS) )
// 1020   #endif
// 1021       {
// 1022         if ( devStartMode == MODE_JOIN )
// 1023         {
// 1024           devState = DEV_NWK_JOINING;
// 1025 
// 1026           ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
// 1027 
// 1028           if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
// 1029                BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
// 1030                ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
// 1031                ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
// 1032           {
// 1033             ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1034                 + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1035           }
// 1036         }
// 1037         else if ( devStartMode == MODE_REJOIN )
// 1038         {
// 1039           devState = DEV_NWK_REJOIN;
// 1040           if ( NLME_ReJoinRequest() != ZSuccess )
// 1041           {
// 1042             ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1043                 + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1044           }
// 1045         }
// 1046 
// 1047         if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 1048         {
// 1049           // The receiver is on, turn network layer polling off.
// 1050           NLME_SetPollRate( 0 );
// 1051           NLME_SetQueuedPollRate( 0 );
// 1052           NLME_SetResponseRate( 0 );
// 1053         }
// 1054       }
// 1055       else
// 1056       {
// 1057 #if defined ( SOFT_START ) && !defined ( VIRTKEY_SOFT_START )
// 1058   #if defined ( MANAGED_SCAN )
// 1059         if ( (softStartAllowCoord)
// 1060             && (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status != ZDO_SUCCESS )
// 1061               && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
// 1062   #else
// 1063         if ( (softStartAllowCoord)
// 1064             && (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status != ZDO_SUCCESS )
// 1065               && (zdoDiscCounter++ > NUM_DISC_ATTEMPTS) )
// 1066   #endif
// 1067         {
// 1068           ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
// 1069           devStartMode = MODE_HARD;
// 1070         }
// 1071         else if ( continueJoining == FALSE )
// 1072         {
// 1073           devState = DEV_HOLD;
// 1074           osal_stop_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT );
// 1075           break;    // Don't init
// 1076         }
// 1077 #endif
// 1078   #if defined ( MANAGED_SCAN )
// 1079         ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
// 1080   #else
// 1081         if ( continueJoining )
// 1082         {
// 1083           ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
// 1084               + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
// 1085         }
// 1086   #endif
// 1087       }
// 1088 #endif  // !ZDO_COORDINATOR
// 1089       break;
// 1090 
// 1091 #if !defined( ZDO_COORDINATOR ) || defined( SOFT_START )
// 1092     case ZDO_NWK_JOIN_IND:
// 1093       ZDApp_ProcessNetworkJoin();
// 1094       break;
// 1095 
// 1096     case ZDO_NWK_JOIN_REQ:
// 1097       retryCnt = 0;
// 1098       devStartMode = MODE_RESUME;
// 1099       _tmpRejoinState = true;
// 1100       zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
// 1101       ZDApp_NetworkInit( 0 );
// 1102 
// 1103       // indicate state change to apps
// 1104       devState = DEV_INIT;
// 1105       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 1106       break;
// 1107 #endif  // !ZDO_COORDINATOR
// 1108 
// 1109 #if defined ( ZDSECMGR_SECURE )
// 1110   #if defined ( ZDSECMGR_COMMERCIAL )
// 1111         case ZDO_ESTABLISH_KEY_CFM:
// 1112           ZDSecMgrEstablishKeyCfm
// 1113             ( (ZDO_EstablishKeyCfm_t*)msgPtr );
// 1114           break;
// 1115   #endif
// 1116 
// 1117   #if defined ( ZDSECMGR_COMMERCIAL )
// 1118     #if !defined ( ZDO_COORDINATOR ) || defined ( SOFT_START )
// 1119         case ZDO_ESTABLISH_KEY_IND:
// 1120           ZDSecMgrEstablishKeyInd
// 1121             ( (ZDO_EstablishKeyInd_t*)msgPtr );
// 1122           break;
// 1123     #endif
// 1124   #endif
// 1125 
// 1126   #if !defined ( ZDO_COORDINATOR ) || defined( SOFT_START )
// 1127         case ZDO_TRANSPORT_KEY_IND:
// 1128           ZDSecMgrTransportKeyInd
// 1129             ( (ZDO_TransportKeyInd_t*)msgPtr );
// 1130           break;
// 1131   #endif
// 1132 
// 1133   #if defined ( ZDO_COORDINATOR )
// 1134         case ZDO_UPDATE_DEVICE_IND:
// 1135           ZDSecMgrUpdateDeviceInd
// 1136             ( (ZDO_UpdateDeviceInd_t*)msgPtr );
// 1137           break;
// 1138   #endif
// 1139 
// 1140   #if defined ( RTR_NWK )
// 1141     #if !defined ( ZDO_COORDINATOR ) || defined( SOFT_START )
// 1142         case ZDO_REMOVE_DEVICE_IND:
// 1143           ZDSecMgrRemoveDeviceInd
// 1144             ( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1145           break;
// 1146     #endif
// 1147   #endif
// 1148 
// 1149   #if defined ( ZDSECMGR_COMMERCIAL )
// 1150     #if defined ( ZDO_COORDINATOR )
// 1151         case ZDO_REQUEST_KEY_IND:
// 1152           ZDSecMgrRequestKeyInd
// 1153             ( (ZDO_RequestKeyInd_t*)msgPtr );
// 1154           break;
// 1155     #endif
// 1156   #endif
// 1157 
// 1158   #if !defined ( ZDO_COORDINATOR ) || defined( SOFT_START )
// 1159         case ZDO_SWITCH_KEY_IND:
// 1160           ZDSecMgrSwitchKeyInd
// 1161             ( (ZDO_SwitchKeyInd_t*)msgPtr );
// 1162           break;
// 1163   #endif
// 1164 
// 1165 #endif // defined ( ZDSECMGR_SECURE )
// 1166 
// 1167     default:
// 1168       break;
// 1169   }
// 1170 
// 1171   (void)sentEP;
// 1172 }
??ZDApp_ProcessOSALMsg_0:
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock22
// 1173 
// 1174 #if !defined( ZDO_COORDINATOR ) || defined( SOFT_START )
// 1175 /*********************************************************************
// 1176  * @fn      ZDApp_ProcessNetworkJoin()
// 1177  *
// 1178  * @brief
// 1179  *
// 1180  *   Save off the Network key information.
// 1181  *
// 1182  * @param   none
// 1183  *
// 1184  * @return  none
// 1185  */
// 1186 void ZDApp_ProcessNetworkJoin( void )
// 1187 {
// 1188   if ( (devState == DEV_NWK_JOINING) ||
// 1189       ((devState == DEV_NWK_ORPHAN)  &&
// 1190        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
// 1191   {
// 1192     // Result of a Join attempt by this device.
// 1193     if ( nwkStatus == ZSuccess )
// 1194     {
// 1195       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 1196 
// 1197 #if defined ( POWER_SAVING )
// 1198       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1199 #endif
// 1200 
// 1201 #if   ( SECURE != 0  )
// 1202       if ( _NIB.SecurityLevel && (ZDApp_RestoreNwkKey() == false ) )
// 1203       {
// 1204         // wait for auth from trust center!!
// 1205         devState = DEV_END_DEVICE_UNAUTH;
// 1206 
// 1207         // Start the reset timer for MAX UNAUTH time
// 1208         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
// 1209       }
// 1210       else
// 1211 #endif  // SECURE
// 1212       {
// 1213 #if defined ( RTR_NWK )
// 1214         if ( devState == DEV_NWK_ORPHAN
// 1215             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1216         {
// 1217           // Change NIB state to router for restore
// 1218           _NIB.nwkState = NWK_ROUTER;
// 1219         }
// 1220 #endif
// 1221         devState = DEV_END_DEVICE;
// 1222 #if defined ( RTR_NWK )
// 1223         // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1224   #if !defined (AUTO_SOFT_START)
// 1225         if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1226         {
// 1227           NLME_StartRouterRequest( 0, 0, false );
// 1228         }
// 1229   #endif // AUTO_SOFT_START
// 1230 #endif  // RTR
// 1231 
// 1232 #if defined ( ZDO_ENDDEVICE_ANNCE_GENERATE )
// 1233         ZDP_EndDeviceAnnce( ZDAppNwkAddr.addr.shortAddr, saveExtAddr,
// 1234                            ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
// 1235 #endif
// 1236       }
// 1237     }
// 1238     else
// 1239     {
// 1240       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
// 1241       {
// 1242         if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
// 1243           devStartMode = MODE_JOIN;
// 1244         else
// 1245         {
// 1246           devStartMode = MODE_REJOIN;
// 1247           _tmpRejoinState = true;
// 1248         }
// 1249       }
// 1250 
// 1251       if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 1252            (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
// 1253       {
// 1254         uint16 addr = INVALID_NODE_ADDR;
// 1255         // Invalidate nwk addr so end device does not use in its data reqs.
// 1256         _NIB.nwkDevAddress = INVALID_NODE_ADDR;
// 1257         ZMacSetReq( ZMacShortAddress, (byte *)&addr );
// 1258       }
// 1259 
// 1260       zdoDiscCounter = 1;
// 1261 
// 1262 //      ZDApp_NetworkInit( (uint16)
// 1263 //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
// 1264 //                          (NWK_START_DELAY * 5)) );
// 1265       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1266            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1267     }
// 1268   }
// 1269   else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
// 1270   {
// 1271     // results of an orphaning attempt by this device
// 1272     if (nwkStatus == ZSuccess)
// 1273     {
// 1274 #if ( SECURE != 0 )
// 1275       ZDApp_RestoreNwkKey();
// 1276 #endif
// 1277       devState = DEV_END_DEVICE;
// 1278       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
// 1279       // setup Power Manager Device
// 1280 #if defined ( POWER_SAVING )
// 1281       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1282 #endif
// 1283 
// 1284       if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 1285       {
// 1286         // The receiver is on, turn network layer polling off.
// 1287         NLME_SetPollRate( 0 );
// 1288         NLME_SetQueuedPollRate( 0 );
// 1289         NLME_SetResponseRate( 0 );
// 1290       }
// 1291 
// 1292 #if defined ( ZDO_ENDDEVICE_ANNCE_GENERATE )
// 1293       ZDP_EndDeviceAnnce( ZDAppNwkAddr.addr.shortAddr, saveExtAddr,
// 1294                          ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
// 1295 #endif
// 1296 
// 1297     }
// 1298     else
// 1299     {
// 1300       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
// 1301       {
// 1302         if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
// 1303           devStartMode = MODE_JOIN;
// 1304         else
// 1305         {
// 1306           devStartMode = MODE_REJOIN;
// 1307           _tmpRejoinState = true;
// 1308         }
// 1309       }
// 1310 
// 1311       // setup a retry for later...
// 1312       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1313            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
// 1314     }
// 1315   }
// 1316   else
// 1317   {
// 1318     // this is an error case!!
// 1319   }
// 1320 }
// 1321 #endif // !ZDO_COORDINATOR
// 1322 
// 1323 #if ( SECURE != 0 )
// 1324 /*********************************************************************
// 1325  * @fn      ZDApp_SaveNwkKey()
// 1326  *
// 1327  * @brief   Save off the Network key information.
// 1328  *
// 1329  * @param   none
// 1330  *
// 1331  * @return  none
// 1332  */
// 1333 void ZDApp_SaveNwkKey( void )
// 1334 {
// 1335   nwkActiveKeyItems keyItems;
// 1336 
// 1337   SSP_ReadNwkActiveKey( &keyItems );
// 1338   keyItems.frameCounter++;
// 1339 
// 1340   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1341                 (void *)&keyItems );
// 1342 
// 1343   nwkFrameCounterChanges = 0;
// 1344 }
// 1345 
// 1346 /*********************************************************************
// 1347  * @fn      ZDApp_ResetNwkKey()
// 1348  *
// 1349  * @brief   Reset the Network key information in NV.
// 1350  *
// 1351  * @param   none
// 1352  *
// 1353  * @return  none
// 1354  */
// 1355 void ZDApp_ResetNwkKey( void )
// 1356 {
// 1357   nwkActiveKeyItems keyItems;
// 1358 
// 1359   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
// 1360   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1361                 (void *)&keyItems );
// 1362 }
// 1363 #endif
// 1364 
// 1365 #if ( SECURE != 0 )
// 1366 /*********************************************************************
// 1367  * @fn      ZDApp_RestoreNwkKey()
// 1368  *
// 1369  * @brief
// 1370  *
// 1371  *   Save off the Network key information.
// 1372  *
// 1373  * @param   none
// 1374  *
// 1375  * @return  true if restored from NV, false if not
// 1376  */
// 1377 byte ZDApp_RestoreNwkKey( void )
// 1378 {
// 1379   nwkActiveKeyItems keyItems;
// 1380   byte ret = false;
// 1381 
// 1382   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1383       == ZSUCCESS )
// 1384   {
// 1385     if ( keyItems.frameCounter > 0 )
// 1386     {
// 1387       // Restore the key information
// 1388       keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
// 1389       SSP_WriteNwkActiveKey( &keyItems );
// 1390       ret = true;
// 1391     }
// 1392     nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES; // Force a save for the first
// 1393   }
// 1394   return ( ret );
// 1395 }
// 1396 #endif
// 1397 
// 1398 /*********************************************************************
// 1399  * @fn      ZDApp_SendEndDeviceBindReq()
// 1400  *
// 1401  * @brief
// 1402  *
// 1403  *   This function will look up the endpoint description
// 1404  *   and send an End Device Bind Request message.
// 1405  *
// 1406  * @param  endPoint - Endpoint to auto find
// 1407  *
// 1408  * @return  none
// 1409  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1410 void ZDApp_SendEndDeviceBindReq( byte endPoint )
ZDApp_SendEndDeviceBindReq:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function ZDApp_SendEndDeviceBindReq
// 1411 {
        FUNCALL ZDApp_SendEndDeviceBindReq, HalLedSet
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ZDApp_SendEndDeviceBindReq, afFindSimpleDesc
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ZDApp_SendEndDeviceBindReq, ZDP_EndDeviceBindReq
        LOCFRAME XSTACK, 29, STACK
        ARGFRAME XSTACK, 29, STACK
        FUNCALL ZDApp_SendEndDeviceBindReq, osal_mem_free
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 11
        MOV	A,#-0xb
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	A,R1
        MOV	R7,A
// 1412 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
// 1413   zAddrType_t dstAddr;
// 1414   SimpleDescriptionFormat_t *sDesc;
// 1415   byte free;
// 1416 #if defined( LCD_SUPPORTED )
// 1417    afStatus_t stat;
// 1418 #endif
// 1419 
// 1420   if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
        JNZ	$+5
        LJMP	??ZDApp_SendEndDeviceBindReq_0 & 0xFFFF
        CLR	C
        SUBB	A,#-0xf
        JC	$+5
        LJMP	??ZDApp_SendEndDeviceBindReq_0 & 0xFFFF
// 1421   {
// 1422     return;   // Can't do for ZDO
// 1423   }
// 1424 
// 1425   HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1426 
// 1427   free = afFindSimpleDesc( &sDesc, endPoint );
        ; Setup parameters for call to function afFindSimpleDesc
        MOV	A,R7
        MOV	R1,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(afFindSimpleDesc & 0xffff)
        MOV	A,#((afFindSimpleDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R6,A
// 1428   if ( sDesc != NULL )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JNZ	??ZDApp_SendEndDeviceBindReq_1
        INC	DPTR
        MOVX	A,@DPTR
??ZDApp_SendEndDeviceBindReq_1:
        JNZ	$+5
        LJMP	??ZDApp_SendEndDeviceBindReq_0 & 0xFFFF
// 1429   {
// 1430     dstAddr.addrMode = Addr16Bit;
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x2
        MOVX	@DPTR,A
// 1431     dstAddr.addr.shortAddr = 0;   // Zigbee Coordinator
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
// 1432 
// 1433 #if defined( LCD_SUPPORTED )
// 1434     stat =
// 1435 #endif
// 1436     ZDP_EndDeviceBindReq( &dstAddr,
// 1437 #if defined ( REFLECTOR  )
// 1438                 // We have a reflector, so tell the coordinator to send
// 1439                 // binding messages this way
// 1440                 NLME_GetShortAddr(),
// 1441 #else
// 1442                 // tell the coordinator to store if available
// 1443                 NWK_PAN_COORD_ADDR,
// 1444 #endif
// 1445                 endPoint,sDesc->AppProfId,
// 1446                 sDesc->AppNumOutClusters, sDesc->pAppOutClusterList,
// 1447                 sDesc->AppNumInClusters, sDesc->pAppInClusterList,
// 1448                 0 );
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_28:
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL	?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_22:
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL	?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	A,#0x7
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV	A,R7
        MOV	R1,A
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDP_EndDeviceBindReq & 0xffff)
        MOV	A,#((ZDP_EndDeviceBindReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x9
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1449 
// 1450     if ( free )
        MOV	A,R6
        JZ	??ZDApp_SendEndDeviceBindReq_0
// 1451     {
// 1452       osal_mem_free( sDesc );
        ; Setup parameters for call to function osal_mem_free
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDApp_SendEndDeviceBindReq_0:
        MOV	A,#0xb
        LJMP	?Subroutine41 & 0xFFFF
        CFI EndBlock cfiBlock23
// 1453     }
// 1454 
// 1455 #if defined( LCD_SUPPORTED )
// 1456     if ( stat == ZSuccess )
// 1457     {
// 1458       HalLcdWriteScreen( "End Device Bind", "Sent" );
// 1459     }
// 1460     else
// 1461     {
// 1462       HalLcdWriteScreen( "End Device Bind", "Not Sent" );
// 1463     }
// 1464 #endif
// 1465   }
// 1466   else
// 1467   {
// 1468 #if defined( LCD_SUPPORTED )
// 1469     HalLcdWriteScreen( "End Device Bind", "EP not found" );
// 1470 #endif
// 1471   }
// 1472 #endif // ZDO_ENDDEVICEBIND_REQUEST
// 1473 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker26 Using cfiCommon1
        CFI (cfiPicker26) NoFunction
        CFI (cfiPicker26) Picker
        LCALL	?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_93:
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_29
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_28
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_23
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        LCALL	?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_110:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        LCALL	?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_92:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34
// 1474 
// 1475 /*********************************************************************
// 1476  * @fn      ZDApp_AutoFindDestination()
// 1477  *
// 1478  * @brief
// 1479  *
// 1480  *   This function will try to find the Input Match for this device's
// 1481  *   (endpoint passed in) outputs.
// 1482  *
// 1483  * @param  endPoint - Endpoint to auto find
// 1484  * @param  task_id  - task ID override, if NULL use endpoint desc's
// 1485  *                    task_id
// 1486  *
// 1487  * @return  none
// 1488  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1489 void ZDApp_AutoFindDestinationEx( byte endPoint, uint8 *task_id )
ZDApp_AutoFindDestinationEx:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function ZDApp_AutoFindDestinationEx
// 1490 {
        FUNCALL ZDApp_AutoFindDestinationEx, HalLedSet
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDApp_AutoFindDestinationEx, afFindEndPointDesc
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDApp_AutoFindDestinationEx, osal_mem_alloc
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDApp_AutoFindDestinationEx, osal_memcpy
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDApp_AutoFindDestinationEx, ZDP_MatchDescReq
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 9
        MOV	A,#-0x9
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,R1
        MOV	R6,A
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
// 1491 #if defined ( ZDO_MATCH_REQUEST )
// 1492   zAddrType_t dstAddr;
// 1493   SimpleDescriptionFormat_t *sDesc;
// 1494   endPointDesc_t *tmpDesc;
// 1495 #if defined( LCD_SUPPORTED )
// 1496   afStatus_t stat;
// 1497 #endif
// 1498 
// 1499   if ( endPoint == ZDO_EP )
        JNZ	$+5
        LJMP	??ZDApp_AutoFindDestinationEx_0 & 0xFFFF
// 1500     return;   // Can't do for ZDO
// 1501 
// 1502   HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1503 
// 1504   tmpDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(afFindEndPointDesc & 0xffff)
        MOV	A,#((afFindEndPointDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R6,?V0 + 2
        MOV	R7,?V0 + 3
// 1505   if ( tmpDesc )
        MOV	A,R6
        JNZ	??ZDApp_AutoFindDestinationEx_1
        MOV	A,R7
??ZDApp_AutoFindDestinationEx_1:
        JNZ	$+5
        LJMP	??ZDApp_AutoFindDestinationEx_0 & 0xFFFF
// 1506   {
// 1507     if ( ZDApp_AutoFindMode_epDesc == NULL )
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        MOVX	A,@DPTR
        JNZ	??ZDApp_AutoFindDestinationEx_2
        INC	DPTR
        MOVX	A,@DPTR
??ZDApp_AutoFindDestinationEx_2:
        JNZ	??CrossCallReturnLabel_86
// 1508     {
// 1509       ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)osal_mem_alloc( sizeof ( endPointDesc_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV	R2,#0x6
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        LCALL	??Subroutine29_0 & 0xFFFF
// 1510     }
// 1511 
// 1512     if ( ZDApp_AutoFindMode_epDesc )
??CrossCallReturnLabel_86:
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        MOVX	A,@DPTR
        JNZ	??ZDApp_AutoFindDestinationEx_3
        INC	DPTR
        MOVX	A,@DPTR
??ZDApp_AutoFindDestinationEx_3:
        JNZ	$+5
        LJMP	??ZDApp_AutoFindDestinationEx_0 & 0xFFFF
// 1513     {
// 1514       osal_memcpy( ZDApp_AutoFindMode_epDesc, tmpDesc, sizeof( endPointDesc_t ) );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 4,R6
        MOV	?V0 + 5,R7
        MOV	?V0 + 6,#0x0
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	R4,#0x6
        MOV	R5,#0x0
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        LCALL	??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1515       if ( task_id )
        MOV	A,?V0 + 0
        JNZ	??ZDApp_AutoFindDestinationEx_4
        MOV	A,?V0 + 1
??ZDApp_AutoFindDestinationEx_4:
        JZ	??ZDApp_AutoFindDestinationEx_5
// 1516       {
// 1517         // Override the Task ID, if needed.
// 1518         ZDApp_AutoFindMode_epDesc->task_id = task_id;
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 1
        MOVX	@DPTR,A
// 1519       }
// 1520 
// 1521       sDesc = ZDApp_AutoFindMode_epDesc->simpleDesc;
??ZDApp_AutoFindDestinationEx_5:
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_32:
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV	A,R0
        MOV	R2,A
        MOV	A,R1
        MOV	R3,A
// 1522 
// 1523       // This message is sent to everyone
// 1524       dstAddr.addrMode = AddrBroadcast;
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0xf
        LCALL	?Subroutine36 & 0xFFFF
// 1525       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
??CrossCallReturnLabel_107:
        MOV	A,#-0x1
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
// 1526 
// 1527   #if defined( LCD_SUPPORTED )
// 1528       stat =
// 1529   #endif
// 1530       ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR, sDesc->AppProfId,
// 1531                         sDesc->AppNumOutClusters, sDesc->pAppOutClusterList,
// 1532                         sDesc->AppNumInClusters, sDesc->pAppInClusterList, 0 );
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV	?V0 + 0,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	R4,#-0x1
        MOV	R5,#-0x1
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDP_MatchDescReq & 0xffff)
        MOV	A,#((ZDP_MatchDescReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x8
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
??ZDApp_AutoFindDestinationEx_0:
        MOV	A,#0x9
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R7,#0x7
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock35
// 1533 
// 1534   #if defined( LCD_SUPPORTED )
// 1535       if ( stat == ZSuccess )
// 1536       {
// 1537         HalLcdWriteScreen( "Auto Find", "Sent" );
// 1538         MatchRsps = 0;
// 1539       }
// 1540       else
// 1541       {
// 1542         HalLcdWriteScreen( "Auto Find", "Not Sent" );
// 1543       }
// 1544   #endif
// 1545     }
// 1546   }
// 1547   else
// 1548   {
// 1549 #if defined( LCD_SUPPORTED )
// 1550     HalLcdWriteScreen( "Auto Find", "EP not found" );
// 1551 #endif
// 1552   }
// 1553 #endif // ZDO_MATCH_REQUEST
// 1554 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 27)
??Subroutine14_0:
        LCALL	?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_98:
        INC	DPTR
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39
        CFI EndBlock cfiCond40
// 1555 
// 1556 /*********************************************************************
// 1557  * @fn      ZDApp_ResetTimerStart
// 1558  *
// 1559  * @brief   Start the reset timer.
// 1560  *
// 1561  * @param   delay - delay time(ms) before reset
// 1562  *
// 1563  * @return  none
// 1564  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1565 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function ZDApp_ResetTimerStart
// 1566 {
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1567   // Start the rest timer
// 1568   osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,#0x4
        MOV	R3,#0x0
        LCALL	??Subroutine7_1 & 0xFFFF
??CrossCallReturnLabel_20:
        LJMP	??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock41
// 1569 }
// 1570 
// 1571 /*********************************************************************
// 1572  * @fn      ZDApp_ResetTimerCancel
// 1573  *
// 1574  * @brief   Cancel the reset timer.
// 1575  *
// 1576  * @param   none
// 1577  *
// 1578  * @return  none
// 1579  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1580 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function ZDApp_ResetTimerCancel
// 1581 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1582   // Cancel the reset timer
// 1583   osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV	R2,#0x4
        MOV	R3,#0x0
        MOV	DPTR,#ZDAppTaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_stop_timerEx & 0xffff)
        MOV	A,#((osal_stop_timerEx >> 16) & 0xff)
        LJMP	??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock42
// 1584 }
// 1585 
// 1586 /*********************************************************************
// 1587  * @fn      ZDApp_LeaveCtrlInit
// 1588  *
// 1589  * @brief   Initialize the leave control logic.
// 1590  *
// 1591  * @param   none
// 1592  *
// 1593  * @return  none
// 1594  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1595 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlInit
// 1596 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1597   uint8 status;
// 1598 
// 1599 
// 1600   // Initialize control state
// 1601   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        LCALL	?Subroutine3 & 0xFFFF
// 1602 
// 1603   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 1604                               sizeof(ZDApp_LeaveCtrl),
// 1605                               &ZDApp_LeaveCtrl );
// 1606 
// 1607   if ( status == ZSUCCESS )
??CrossCallReturnLabel_7:
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#0x1
        MOV	R5,#0x0
        MOV	R2,#-0x7b
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_init & 0xffff)
        MOV	A,#((osal_nv_item_init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV	A,R1
        JNZ	??ZDApp_LeaveCtrlInit_0
// 1608   {
// 1609     // Read saved control
// 1610     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 1611                   0,
// 1612                   sizeof( uint8 ),
// 1613                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7b
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1614   }
// 1615 }
??ZDApp_LeaveCtrlInit_0:
        LJMP	??Subroutine40_1 & 0xFFFF
        CFI EndBlock cfiBlock43
// 1616 
// 1617 /*********************************************************************
// 1618  * @fn      ZDApp_LeaveCtrlSet
// 1619  *
// 1620  * @brief   Set the leave control logic.
// 1621  *
// 1622  * @param   ra - reassociate flag
// 1623  *
// 1624  * @return  none
// 1625  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1626 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlSet
// 1627 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1628   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV	A,#0x1
        MOV	DPTR,#ZDApp_LeaveCtrl
        MOVX	@DPTR,A
// 1629 
// 1630   if ( ra == TRUE )
        XRL	A,R1
        JNZ	??ZDApp_LeaveCtrlSet_0
// 1631   {
// 1632     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV	A,#0x3
        MOVX	@DPTR,A
// 1633   }
// 1634 
// 1635   // Write the leave control
// 1636   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1637                  0,
// 1638                  sizeof( uint8 ),
// 1639                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        MOV	?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
        MOV	?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7b
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_write & 0xffff)
        MOV	A,#((osal_nv_write >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LJMP	??Subroutine40_0 & 0xFFFF
        CFI EndBlock cfiBlock44
// 1640 }
// 1641 
// 1642 /*********************************************************************
// 1643  * @fn      ZDApp_LeaveCtrlBypass
// 1644  *
// 1645  * @brief   Check if NV restore should be skipped during a leave reset.
// 1646  *
// 1647  * @param   none
// 1648  *
// 1649  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 1650  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1651 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
        CFI Block cfiBlock45 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlBypass
// 1652 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1653   uint8 bypass;
// 1654 
// 1655   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 1656   {
// 1657     bypass = TRUE;
// 1658   }
// 1659   else
// 1660   {
// 1661     bypass = FALSE;
// 1662   }
// 1663 
// 1664   return bypass;
        MOV	DPTR,#ZDApp_LeaveCtrl
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.0
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R1,A
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock45
// 1665 }
// 1666 
// 1667 /*********************************************************************
// 1668  * @fn      ZDApp_LeaveCtrlStartup
// 1669  *
// 1670  * @brief   Check for startup conditions during a leave reset.
// 1671  *
// 1672  * @param   state      - devState_t determined by leave control logic
// 1673  * @param   startDelay - startup delay
// 1674  *
// 1675  * @return  none
// 1676  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1677 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlStartup
// 1678 {
        FUNCALL ZDApp_LeaveCtrlStartup, osal_nv_write
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1679   *startDelay = 0;
        MOV	DPL,R4
        MOV	DPH,R5
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
// 1680 
// 1681   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV	DPTR,#ZDApp_LeaveCtrl
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.0
        JNC	??ZDApp_LeaveCtrlStartup_0
// 1682   {
// 1683     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV	C,0xE0 /* A   */.1
        JNC	??ZDApp_LeaveCtrlStartup_1
// 1684     {
// 1685       *startDelay = 5000;
        MOV	DPL,R4
        MOV	DPH,R5
        MOV	A,#-0x78
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#0x13
        SJMP	??ZDApp_LeaveCtrlStartup_2
// 1686     }
// 1687     else
// 1688     {
// 1689       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        CLR	A
        MOV	DPL,R2
        MOV	DPH,R3
??ZDApp_LeaveCtrlStartup_2:
        MOVX	@DPTR,A
// 1690     }
// 1691 
// 1692     // Set leave control to initialized state
// 1693     ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        LCALL	?Subroutine3 & 0xFFFF
// 1694 
// 1695     // Write initialized control
// 1696     osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1697                   0,
// 1698                   sizeof( uint8 ),
// 1699                   &ZDApp_LeaveCtrl);
??CrossCallReturnLabel_8:
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7b
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_write & 0xffff)
        MOV	A,#((osal_nv_write >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1700   }
// 1701 }
??ZDApp_LeaveCtrlStartup_0:
        LJMP	??Subroutine40_1 & 0xFFFF
        CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        CLR	A
        MOV	DPTR,#ZDApp_LeaveCtrl
        MOVX	@DPTR,A
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        MOV	?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
        MOV	?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49
// 1702 
// 1703 /*********************************************************************
// 1704  * @fn      ZDApp_LeaveReset
// 1705  *
// 1706  * @brief   Setup a device reset due to a leave indication/confirm.
// 1707  *
// 1708  * @param   ra - reassociate flag
// 1709  *
// 1710  * @return  none
// 1711  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1712 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function ZDApp_LeaveReset
// 1713 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1714   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        MOV	DPTR,#(ZDApp_LeaveCtrlSet & 0xffff)
        MOV	A,#((ZDApp_LeaveCtrlSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1715 
// 1716   ZDApp_ResetTimerStart( 5000 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV	R2,#-0x78
        MOV	R3,#0x13
        MOV	DPTR,#(ZDApp_ResetTimerStart & 0xffff)
        MOV	A,#((ZDApp_ResetTimerStart >> 16) & 0xff)
        SJMP	??Subroutine46_0
        CFI EndBlock cfiBlock50
// 1717 }
// 1718 
// 1719 /*********************************************************************
// 1720  * @fn      ZDApp_LeaveUpdate
// 1721  *
// 1722  * @brief   Update local device data related to leaving device.
// 1723  *
// 1724  * @param   nwkAddr        - NWK address of leaving device
// 1725  * @param   extAddr        - EXT address of leaving device
// 1726  * @param   removeChildren - remove children of leaving device
// 1727  *
// 1728  * @return  none
// 1729  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1730 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI Function ZDApp_LeaveUpdate
// 1731                         uint8 removeChildren )
// 1732 {
        FUNCALL ZDApp_LeaveUpdate, NLME_RemoveChild
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV	A,R4
        MOV	R2,A
        MOV	A,R5
        MOV	R3,A
// 1733   /*
// 1734   AddrMgrEntry_t entry;
// 1735   */
// 1736 
// 1737 
// 1738   // Remove if child
// 1739   NLME_RemoveChild( extAddr, removeChildren );
        ; Setup parameters for call to function NLME_RemoveChild
        MOV	DPTR,#(NLME_RemoveChild & 0xffff)
        MOV	A,#((NLME_RemoveChild >> 16) & 0xff)
        SJMP	??Subroutine46_0
        CFI EndBlock cfiBlock51
// 1740 
// 1741   /*
// 1742   // Set NWK address to invalid
// 1743   entry.user    = ADDRMGR_USER_DEFAULT;
// 1744   entry.nwkAddr = INVALID_NODE_ADDR;
// 1745   AddrMgrExtAddrSet( entry.extAddr, extAddr );
// 1746   AddrMgrEntryUpdate( &entry );
// 1747 
// 1748   // Check
// 1749   if ( removeChildren == TRUE )
// 1750   {
// 1751     // Set index to INVALID_NODE_ADDR to start search
// 1752     entry.index = INVALID_NODE_ADDR;
// 1753 
// 1754     // Get first entry
// 1755     AddrMgrEntryGetNext( &entry );
// 1756 
// 1757     // Remove all descendents
// 1758     while ( entry.index != INVALID_NODE_ADDR )
// 1759     {
// 1760       // Check NWK address allocation algorithm
// 1761       if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
// 1762       {
// 1763         // Set NWK address to invalid
// 1764         entry.nwkAddr = INVALID_NODE_ADDR;
// 1765         AddrMgrEntryUpdate( &entry );
// 1766       }
// 1767 
// 1768       // Get next entry
// 1769       AddrMgrEntryGetNext( &entry );
// 1770     }
// 1771   }
// 1772   */
// 1773 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL	?Subroutine9 & 0xFFFF
??Subroutine46_0:
        LCALL	?BCALL               ; Banked call to: DPTR()
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock52
// 1774 
// 1775 /*********************************************************************
// 1776  * CALLBACK FUNCTIONS
// 1777  */
// 1778 
// 1779 #if defined ( ZDO_COORDINATOR )
// 1780 /*********************************************************************
// 1781  * @fn      ZDApp_EndDeviceBindReqCB()
// 1782  *
// 1783  * @brief
// 1784  *
// 1785  *   Called by ZDO when an End Device Bind Request message is received.
// 1786  *
// 1787  * @param  bindReq  - binding request information
// 1788  * @param  SecurityUse - Security enable/disable
// 1789  *
// 1790  * @return  none
// 1791  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1792 void ZDApp_EndDeviceBindReqCB( ZDEndDeviceBind_t *bindReq )
ZDApp_EndDeviceBindReqCB:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function ZDApp_EndDeviceBindReqCB
// 1793 {
        FUNCALL ZDApp_EndDeviceBindReqCB, ZDO_MatchEndDeviceBind
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1794 #if defined ( COORDINATOR_BINDING )
// 1795   if ( bindReq->localCoordinator == 0x0000 )
// 1796   {
// 1797     ZDO_DoEndDeviceBind( bindReq );
// 1798   }
// 1799   else
// 1800 #endif // COORDINATOR_BINDING
// 1801   {
// 1802     ZDO_MatchEndDeviceBind( bindReq );
        ; Setup parameters for call to function ZDO_MatchEndDeviceBind
        MOV	DPTR,#(ZDO_MatchEndDeviceBind & 0xffff)
        MOV	A,#((ZDO_MatchEndDeviceBind >> 16) & 0xff)
        SJMP	??Subroutine46_0
        CFI EndBlock cfiBlock53
// 1803   }
// 1804 #if defined( LCD_SUPPORTED )
// 1805   HalLcdWriteScreen( "End Device Bind", "Rcvd" );
// 1806 #endif
// 1807 }
// 1808 #endif // ZDO_COORDINATOR
// 1809 
// 1810 #if !defined ( REFLECTOR ) && defined ( ZDO_BIND_UNBIND_RESPONSE )
// 1811 /*********************************************************************
// 1812  * @fn      ZDApp_AppBindReq()
// 1813  *
// 1814  * @brief
// 1815  *
// 1816  *   Called to send an App Bind Request message.
// 1817  *
// 1818  * @param  SrcAddr     - Source address ( who sent the message )
// 1819  * @param  SrcAddress  - Source Address (64 bit)
// 1820  * @param  SrcEndPoint - Source endpoint
// 1821  * @param  ClusterID   - Cluster ID
// 1822  * @param  DstAddress  - Destination Address (64 bit)
// 1823  * @param  DstEndPoint - Destination endpoint
// 1824  * @param  SecurityUse - Security enable/disable
// 1825  *
// 1826  * @return  none
// 1827  */
// 1828 void ZDApp_AppBindReq( byte TransSeq, zAddrType_t *SrcAddr, byte *SrcAddress,
// 1829                       byte SrcEndPoint, cId_t ClusterID, byte *DstAddress,
// 1830                       byte DstEndPoint, byte SecurityUse, uint8 Type )
// 1831 {
// 1832   ZDO_BindReq_t *pBindReq;
// 1833 
// 1834   if ( ZDApp_BindReq_TaskID )
// 1835   {
// 1836     // Send the IEEE Address response structure to the registered task
// 1837     pBindReq = (ZDO_BindReq_t *)osal_msg_allocate( sizeof( ZDO_BindReq_t ) );
// 1838     if ( pBindReq )
// 1839     {
// 1840       pBindReq->event_hdr.event = Type;
// 1841 
// 1842       // Build the structure
// 1843       pBindReq->hdr.srcAddr = SrcAddr->addr.shortAddr;
// 1844       pBindReq->hdr.transSeq = TransSeq;
// 1845       pBindReq->hdr.SecurityUse = SecurityUse;
// 1846 
// 1847       osal_cpyExtAddr( pBindReq->srcAddr, SrcAddress );
// 1848       pBindReq->srcEP = SrcEndPoint;
// 1849       pBindReq->clusterID = ClusterID;
// 1850       osal_cpyExtAddr( pBindReq->dstAddr, DstAddress );
// 1851       pBindReq->dstEP = DstEndPoint;
// 1852 
// 1853       osal_msg_send( ZDApp_BindReq_TaskID, (uint8 *)pBindReq );
// 1854     }
// 1855   }
// 1856 }
// 1857 #endif // !REFLECTOR && ZDO_BIND_UNBIND_RESPONSE
// 1858 
// 1859 #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
// 1860 /*********************************************************************
// 1861  * @fn      ZDApp_BindReqCB()
// 1862  *
// 1863  * @brief
// 1864  *
// 1865  *   Called by ZDO when a Bind Request message is received.
// 1866  *
// 1867  * @param  SrcAddr     - Source address ( who sent the message )
// 1868  * @param  SrcAddress  - Source Address (64 bit)
// 1869  * @param  SrcEndPoint - Source endpoint
// 1870  * @param  ClusterID   - Cluster ID
// 1871  * @param  DstAddress  - Destination Address (64 bit)
// 1872  * @param  DstEndPoint - Destination endpoint
// 1873  * @param  SecurityUse - Security enable/disable
// 1874  *
// 1875  * @return  none
// 1876  */
// 1877 void ZDApp_BindReqCB( byte TransSeq, zAddrType_t *SrcAddr, byte *SrcAddress,
// 1878                       byte SrcEndPoint, cId_t ClusterID, zAddrType_t *DstAddress,
// 1879                       byte DstEndPoint, byte SecurityUse )
// 1880 {
// 1881 #if defined ( REFLECTOR )
// 1882   zAddrType_t SourceAddr;       // Binding Source addres
// 1883   byte bindStat;
// 1884 
// 1885   SourceAddr.addrMode = Addr64Bit;
// 1886   osal_cpyExtAddr( SourceAddr.addr.extAddr, SrcAddress );
// 1887 
// 1888   if ( DstAddress->addrMode != Addr64Bit &&
// 1889          DstAddress->addrMode != AddrGroup )
// 1890   {
// 1891     bindStat = ZDP_NOT_SUPPORTED;
// 1892   }
// 1893 
// 1894   else
// 1895   { // Check source endpoints
// 1896     if ( SrcEndPoint == 0 || SrcEndPoint > MAX_ENDPOINTS )
// 1897     {
// 1898       bindStat = ZDP_INVALID_EP;
// 1899     }
// 1900     // Check the destination endpoints for ext address mode
// 1901     else if ( ( DstAddress->addrMode == Addr64Bit ) &&
// 1902             ( DstEndPoint == 0 || DstEndPoint > MAX_ENDPOINTS ) )
// 1903     {
// 1904       bindStat = ZDP_INVALID_EP;
// 1905     }
// 1906 
// 1907     else
// 1908     {
// 1909 #if defined ( ZDO_NWKADDR_REQUEST )
// 1910       {
// 1911         uint16 nwkAddr;
// 1912 
// 1913         // Check for the source address
// 1914         if ( APSME_LookupNwkAddr( SrcAddress, &nwkAddr ) == FALSE )
// 1915         {
// 1916           ZDP_NwkAddrReq( SrcAddress, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 1917         }
// 1918 
// 1919         // Check for the destination address
// 1920         if ( DstAddress->addrMode == Addr64Bit )
// 1921         {
// 1922           if ( APSME_LookupNwkAddr( DstAddress->addr.extAddr, &nwkAddr ) == FALSE )
// 1923           {
// 1924             ZDP_NwkAddrReq( DstAddress->addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 1925           }
// 1926         }
// 1927       }
// 1928 #endif
// 1929 
// 1930       if ( APSME_BindRequest( &SourceAddr, SrcEndPoint, ClusterID,
// 1931                      DstAddress, DstEndPoint ) == ZSuccess )
// 1932       {
// 1933         bindStat = ZDP_SUCCESS;
// 1934         // Notify to save info into NV
// 1935         osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
// 1936       }
// 1937       else
// 1938         bindStat = ZDP_TABLE_FULL;
// 1939     }
// 1940   }
// 1941   // Send back a response message
// 1942   ZDP_BindRsp( TransSeq, SrcAddr, bindStat, SecurityUse );
// 1943 
// 1944 #else  // must be ZDO_BIND_UNBIND_RESPONSE
// 1945 
// 1946   ZDApp_AppBindReq( TransSeq, SrcAddr, SrcAddress, SrcEndPoint, ClusterID,
// 1947                     DstAddress->addr.extAddr, DstEndPoint, SecurityUse, ZDO_BIND_REQUEST );
// 1948 
// 1949 #endif // REFLECTOR
// 1950 }
// 1951 #endif // REFLECTOR OR ZDO_BIND_UNBIND_RESPONSE
// 1952 
// 1953 #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
// 1954 /*********************************************************************
// 1955  * @fn      ZDApp_UnbindReqCB()
// 1956  *
// 1957  * @brief
// 1958  *
// 1959  *   Called by ZDO when an Unbind Request message is received.
// 1960  *
// 1961  * @param  SrcAddr  - Source address
// 1962  * @param  SrcAddress - Source Address (64 bit)
// 1963  * @param  SrcEndPoint - Source endpoint
// 1964  * @param  ClusterID - Cluster ID
// 1965  * @param  DstAddress - Destination Address (64 bit)
// 1966  * @param  DstEndPoint - Destination endpoint
// 1967  * @param  SecurityUse - Security enable/disable
// 1968  *
// 1969  * @return  none
// 1970  */
// 1971 void ZDApp_UnbindReqCB( byte TransSeq, zAddrType_t *SrcAddr, byte *SrcAddress,
// 1972                         byte SrcEndPoint, cId_t ClusterID, zAddrType_t *DstAddress,
// 1973                         byte DstEndPoint, byte SecurityUse )
// 1974 {
// 1975 #if defined ( REFLECTOR )
// 1976   zAddrType_t SourceAddr;       // Binding Source addres
// 1977   byte bindStat;
// 1978 
// 1979   SourceAddr.addrMode = Addr64Bit;
// 1980   osal_cpyExtAddr( SourceAddr.addr.extAddr, SrcAddress );
// 1981 
// 1982   // Check endpoints
// 1983   if ( SrcEndPoint == 0 || SrcEndPoint > MAX_ENDPOINTS ||
// 1984        DstEndPoint == 0 || DstEndPoint > MAX_ENDPOINTS )
// 1985   {
// 1986     bindStat = ZDP_INVALID_EP;
// 1987   }
// 1988 
// 1989   else
// 1990   {
// 1991     if ( APSME_UnBindRequest( &SourceAddr, SrcEndPoint, ClusterID,
// 1992                              DstAddress, DstEndPoint ) == ZSuccess )
// 1993     {
// 1994       bindStat = ZDP_SUCCESS;
// 1995 
// 1996       // Notify to save info into NV
// 1997       osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
// 1998     }
// 1999     else
// 2000       bindStat = ZDP_NO_ENTRY;
// 2001   }
// 2002 
// 2003   // Send back a response message
// 2004   ZDP_UnbindRsp( TransSeq, SrcAddr, bindStat, SecurityUse );
// 2005 
// 2006 #else // Must be ZDO_BIND_UNBIND_RESPONSE
// 2007 
// 2008   ZDApp_AppBindReq( TransSeq, SrcAddr, SrcAddress, SrcEndPoint, ClusterID,
// 2009                     DstAddress->addr.extAddr, DstEndPoint, SecurityUse, ZDO_UNBIND_REQUEST );
// 2010 
// 2011 #endif // ZDO_BIND_UNBIND_RESPONSE
// 2012 }
// 2013 #endif // REFLECTOR OR ZDO_BIND_UNBIND_RESPONSE
// 2014 
// 2015 /*********************************************************************
// 2016  * @fn      ZDApp_SendNewDstAddr()
// 2017  *
// 2018  * @brief
// 2019  *
// 2020  *   Used to send an OSAL message to an application that contains a
// 2021  *   new destination address
// 2022  *
// 2023  * @param  dstEP  - Destination endpoint
// 2024  * @param  dstAddr - response status
// 2025  * @param  clusterID - relavent cluster for this dst address
// 2026  * @param  removeFlag - false if add, true to remove
// 2027  * @param  task_id - What task to send it to
// 2028  * @param  endpoint - who the new address is for
// 2029  *
// 2030  * @return  none
// 2031  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2032 void ZDApp_SendNewDstAddr( byte dstEP, zAddrType_t *dstAddr,
ZDApp_SendNewDstAddr:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function ZDApp_SendNewDstAddr
// 2033                    cId_t clusterID, byte removeFlag, byte task_id, byte endpoint )
// 2034 {
        FUNCALL ZDApp_SendNewDstAddr, osal_msg_allocate
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL ZDApp_SendNewDstAddr, osal_memcpy
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL ZDApp_SendNewDstAddr, osal_msg_send
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV	?V0 + 2,R1
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
        MOV	A,#0x13
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 6,A
// 2035   byte bufLen;
// 2036   ZDO_NewDstAddr_t *msgPtr;
// 2037 
// 2038   // Send the address to the task
// 2039   bufLen = sizeof(ZDO_NewDstAddr_t);
// 2040 
// 2041   msgPtr = (ZDO_NewDstAddr_t *)osal_msg_allocate( bufLen );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	R2,#0x10
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
// 2042   if ( msgPtr )
        MOV	A,R2
        JNZ	??ZDApp_SendNewDstAddr_0
        MOV	A,R3
??ZDApp_SendNewDstAddr_0:
        JZ	??ZDApp_SendNewDstAddr_1
// 2043   {
// 2044     msgPtr->hdr.event = ZDO_NEW_DSTADDR;
        MOV	A,#-0x30
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
// 2045     msgPtr->dstAddrDstEP = dstEP;
        INC	DPTR
        INC	DPTR
        MOV	A,?V0 + 2
        LCALL	?Subroutine5 & 0xFFFF
// 2046     osal_memcpy(&msgPtr->dstAddr, dstAddr, sizeof( zAddrType_t ) );
??CrossCallReturnLabel_11:
        LCALL	??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	R4,#0x9
        MOV	R5,#0x0
        MOV	A,R2
        ADD	A,#0x3
        INC	R2
        INC	R2
        INC	R2
        MOV	A,R3
        LCALL	??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 2047     msgPtr->dstAddrClusterIDLSB = LO_UINT16( clusterID );
        MOV	A,?V0 + 4
        ADD	A,#0xc
        MOV	DPL,A
        MOV	A,?V0 + 5
        LCALL	??Subroutine23_1 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV	A,R6
        MOVX	@DPTR,A
// 2048     msgPtr->dstAddrClusterIDMSB = HI_UINT16( clusterID );
        MOV	A,?V0 + 4
        ADD	A,#0xd
        MOV	DPL,A
        MOV	A,?V0 + 5
        LCALL	??Subroutine23_1 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV	A,R7
        MOVX	@DPTR,A
// 2049     msgPtr->dstAddrRemove = removeFlag;
        MOV	A,?V0 + 4
        ADD	A,#0xe
        MOV	DPL,A
        MOV	A,?V0 + 5
        LCALL	??Subroutine23_1 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV	A,?V0 + 7
        MOVX	@DPTR,A
// 2050     msgPtr->dstAddrEP = endpoint;
        MOV	A,?V0 + 4
        ADD	A,#0xf
        MOV	DPL,A
        MOV	A,?V0 + 5
        LCALL	??Subroutine23_1 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV	A,?V0 + 6
        MOVX	@DPTR,A
// 2051 
// 2052     osal_msg_send( task_id, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV	R2,?V0 + 4
        MOV	R3,?V0 + 5
        MOV	R1,?V0 + 3
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2053   }
// 2054 }
??ZDApp_SendNewDstAddr_1:
        LJMP	?Subroutine42 & 0xFFFF
        CFI EndBlock cfiBlock54
// 2055 
// 2056 /*********************************************************************
// 2057  * @fn      ZDApp_SendEventMsg()
// 2058  *
// 2059  * @brief
// 2060  *
// 2061  *   Sends a Network Join message
// 2062  *
// 2063  * @param  cmd - command ID
// 2064  * @param  len - length (in bytes) of the buf field
// 2065  * @param  buf - buffer for the rest of the message.
// 2066  *
// 2067  * @return  none
// 2068  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2069 void ZDApp_SendEventMsg( byte cmd, byte len, byte *buf )
ZDApp_SendEventMsg:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function ZDApp_SendEventMsg
// 2070 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2071   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV	A,R2
        MOV	R3,A
        MOV	A,R1
        MOV	R2,A
        CFI EndBlock cfiBlock55
        REQUIRE ?Subroutine47
        ; // Fall through to label ?Subroutine47
// 2072 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_112:
        LJMP	??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_113
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond58) CFA_SP SP+-5
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond59) CFA_SP SP+-5
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        MOV	DPTR,#ZDAppTaskID
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 17)
??Subroutine8_0:
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(ZDApp_SendMsg & 0xffff)
        MOV	A,#((ZDApp_SendMsg >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
// 2073 
// 2074 /*********************************************************************
// 2075  * @fn      ZDApp_SendMsg()
// 2076  *
// 2077  * @brief   Sends a OSAL message
// 2078  *
// 2079  * @param  taskID - Where to send the message
// 2080  * @param  cmd - command ID
// 2081  * @param  len - length (in bytes) of the buf field
// 2082  * @param  buf - buffer for the rest of the message.
// 2083  *
// 2084  * @return  none
// 2085  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2086 void ZDApp_SendMsg( byte taskID, byte cmd, byte len, byte *buf )
ZDApp_SendMsg:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function ZDApp_SendMsg
// 2087 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
        MOV	?V0 + 3,R2
        MOV	A,R3
        MOV	R7,A
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
// 2088   osal_event_hdr_t *msgPtr;
// 2089 
// 2090   // Send the address to the task
// 2091   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
// 2092   if ( msgPtr )
        MOV	A,R2
        JNZ	??ZDApp_SendMsg_0
        MOV	A,R3
??ZDApp_SendMsg_0:
        JZ	??ZDApp_SendMsg_1
// 2093   {
// 2094     if ( (len > 0) && (buf != NULL) )
        MOV	A,R7
        JZ	??ZDApp_SendMsg_2
        MOV	A,?V0 + 6
        JNZ	??ZDApp_SendMsg_3
        MOV	A,?V0 + 7
??ZDApp_SendMsg_3:
        JZ	??ZDApp_SendMsg_2
// 2095       osal_memcpy( msgPtr, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 0,?V0 + 6
        MOV	?V0 + 1,?V0 + 7
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,R7
        MOV	R4,A
        MOV	R5,#0x0
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 2096 
// 2097     msgPtr->event = cmd;
??ZDApp_SendMsg_2:
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        MOV	A,?V0 + 3
        MOVX	@DPTR,A
// 2098     osal_msg_send( taskID, (byte *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV	R2,?V0 + 4
        MOV	R3,?V0 + 5
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2099   }
// 2100 }
??ZDApp_SendMsg_1:
        LJMP	??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock64
// 2101 
// 2102 #if defined ( ZDO_NWKADDR_REQUEST )
// 2103 /*********************************************************************
// 2104  * @fn      ZDApp_NwkAddrRspCB()
// 2105  *
// 2106  * @brief
// 2107  *
// 2108  *   Called by ZDO when a NWK_addr_rsp message is received.
// 2109  *
// 2110  * @param  SrcAddr  - Source address
// 2111  * @param  Status - response status
// 2112  * @param  IEEEAddr - 64 bit IEEE address of device
// 2113  * @param  aoi - 16 bit network address of interest.
// 2114  * @param  NumAssocDev - number of associated devices to reporting device
// 2115  * @param  AssocDevList - array short addresses of associated devices
// 2116  *
// 2117  * @return  none
// 2118  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2119 void ZDApp_NwkAddrRspCB( zAddrType_t *SrcAddr, byte Status, byte *IEEEAddr,
ZDApp_NwkAddrRspCB:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function ZDApp_NwkAddrRspCB
// 2120                          uint16 nwkAddr, byte NumAssocDev,
// 2121                          byte StartIndex, uint16 *AssocDevList )
// 2122 {
        FUNCALL ZDApp_NwkAddrRspCB, zdo_MTCB_NwkIEEEAddrRspCB
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ZDApp_NwkAddrRspCB, osal_msg_allocate
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL ZDApp_NwkAddrRspCB, osal_cpyExtAddr
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL ZDApp_NwkAddrRspCB, osal_memcpy
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL ZDApp_NwkAddrRspCB, osal_msg_send
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
// 2123   uint8 bufLen;
// 2124   ZDO_NwkAddrResp_t *pNwkAddrRsp;
// 2125 
// 2126 #if defined ( MT_ZDO_FUNC )
// 2127   /* First check if MT has subscribed for this callback. If so , pass it as
// 2128   a event to MonitorTest and return control to calling function after that */
// 2129   if ( _zdoCallbackSub & CB_ID_ZDO_NWK_ADDR_RSP )
        MOV	DPTR,#_zdoCallbackSub
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,?V0 + 0
        MOV	C,0xE0 /* A   */.0
        JNC	??ZDApp_NwkAddrRspCB_0
// 2130   {
// 2131     zdo_MTCB_NwkIEEEAddrRspCB( SPI_CB_ZDO_NWK_ADDR_RSP, SrcAddr, Status,
// 2132                   IEEEAddr, nwkAddr, NumAssocDev, StartIndex, AssocDevList );
        ; Setup parameters for call to function zdo_MTCB_NwkIEEEAddrRspCB
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	A,?V0 + 7
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	?V0 + 0,R6
        MOV	?V0 + 1,R7
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,#-0x80
        MOV	R3,#0xa
        MOV	DPTR,#(zdo_MTCB_NwkIEEEAddrRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_NwkIEEEAddrRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x8
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 2133     return;
        LJMP	??ZDApp_NwkAddrRspCB_1 & 0xFFFF
// 2134   }
// 2135 #endif  //MT_ZDO_FUNC
// 2136 
// 2137   if ( ZDApp_NwkAddrRsp_TaskID )
??ZDApp_NwkAddrRspCB_0:
        MOV	DPTR,#??ZDApp_NwkAddrRsp_TaskID
        MOVX	A,@DPTR
        JNZ	$+5
        LJMP	??ZDApp_NwkAddrRspCB_1 & 0xFFFF
// 2138   {
// 2139     // Send the NWK Address response structure to the registered task
// 2140     bufLen = sizeof( ZDO_NwkAddrResp_t ) + sizeof( uint16 ) * NumAssocDev;
// 2141 
// 2142     pNwkAddrRsp = (ZDO_NwkAddrResp_t *)osal_msg_allocate( bufLen );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	A,?V0 + 7
        LCALL	?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
// 2143 
// 2144     if ( pNwkAddrRsp )
        MOV	A,R2
        JNZ	??ZDApp_NwkAddrRspCB_2
        MOV	A,R3
??ZDApp_NwkAddrRspCB_2:
        JZ	??ZDApp_NwkAddrRspCB_1
// 2145     {
// 2146       pNwkAddrRsp->hdr.event = ZDO_NWK_ADDR_RESP;
        MOV	A,#-0x2d
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
// 2147 
// 2148       // Build the structure
// 2149       pNwkAddrRsp->nwkAddr = nwkAddr;
        INC	DPTR
        INC	DPTR
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R7
        LCALL	?Subroutine1 & 0xFFFF
// 2150       osal_cpyExtAddr( pNwkAddrRsp->extAddr, IEEEAddr );
??CrossCallReturnLabel_2:
        MOV	A,R2
        ADD	A,#0x4
        MOV	R2,A
        MOV	A,R3
        LCALL	?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2151       pNwkAddrRsp->numAssocDevs = NumAssocDev;
        MOV	A,?V0 + 0
        ADD	A,#0xc
        MOV	DPL,A
        MOV	A,?V0 + 1
        LCALL	??Subroutine23_1 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV	A,?V0 + 7
        MOVX	@DPTR,A
// 2152       pNwkAddrRsp->startIndex = StartIndex;
        MOV	A,?V0 + 0
        ADD	A,#0xd
        MOV	DPL,A
        MOV	A,?V0 + 1
        LCALL	??Subroutine23_1 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV	A,?V0 + 4
        MOVX	@DPTR,A
// 2153       osal_memcpy( pNwkAddrRsp->devList, AssocDevList, (sizeof( uint16 ) * NumAssocDev) );
        ; Setup parameters for call to function osal_memcpy
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 5,A
        MOV	?V0 + 6,#0x0
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	A,?V0 + 7
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	A,?V0 + 0
        ADD	A,#0xe
        MOV	R2,A
        MOV	A,?V0 + 1
        LCALL	??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 2154 
// 2155       osal_msg_send( ZDApp_NwkAddrRsp_TaskID, (uint8 *)pNwkAddrRsp );
        ; Setup parameters for call to function osal_msg_send
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#??ZDApp_NwkAddrRsp_TaskID
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDApp_NwkAddrRspCB_1:
        LJMP	?Subroutine42 & 0xFFFF
        CFI EndBlock cfiBlock65
// 2156     }
// 2157   }
// 2158 }
// 2159 #endif // ZDO_NWKADDR_REQUEST
// 2160 
// 2161 #if defined ( ZDO_IEEEADDR_REQUEST )
// 2162 /*********************************************************************
// 2163  * @fn      ZDApp_IEEEAddrRspCB()
// 2164  *
// 2165  * @brief
// 2166  *
// 2167  *   Called by ZDO when a NWK_addr_rsp message is received.
// 2168  *
// 2169  * @param  SrcAddr  - Source address
// 2170  * @param  Status - response status
// 2171  * @param  IEEEAddr - 64 bit IEEE address of device
// 2172  * @param  aoi - 16 bit network address of interest.
// 2173  * @param  NumAssocDev - number of associated devices to reporting device
// 2174  * @param  AssocDevList - array short addresses of associated devices
// 2175  *
// 2176  * @return  none
// 2177  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2178 void ZDApp_IEEEAddrRspCB( zAddrType_t *SrcAddr, byte Status, byte *IEEEAddr,
ZDApp_IEEEAddrRspCB:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI Function ZDApp_IEEEAddrRspCB
// 2179                           uint16 aoi, byte NumAssocDev,
// 2180                           byte StartIndex, uint16 *AssocDevList )
// 2181 {
        FUNCALL ZDApp_IEEEAddrRspCB, zdo_MTCB_NwkIEEEAddrRspCB
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ZDApp_IEEEAddrRspCB, osal_msg_allocate
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL ZDApp_IEEEAddrRspCB, osal_cpyExtAddr
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL ZDApp_IEEEAddrRspCB, osal_memcpy
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL ZDApp_IEEEAddrRspCB, osal_msg_send
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
// 2182   uint8 bufLen;
// 2183   ZDO_IEEEAddrResp_t *pIEEEAddrRsp;
// 2184 
// 2185 #if defined ( MT_ZDO_FUNC )
// 2186   /* First check if MT has subscribed for this callback. If so , pass it as
// 2187   a event to MonitorTest and return control to calling function after that */
// 2188   if ( _zdoCallbackSub & CB_ID_ZDO_IEEE_ADDR_RSP )
        MOV	DPTR,#_zdoCallbackSub
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	A,?V0 + 4
        ANL	A,#0x2
        JZ	??ZDApp_IEEEAddrRspCB_0
// 2189   {
// 2190     zdo_MTCB_NwkIEEEAddrRspCB( SPI_CB_ZDO_IEEE_ADDR_RSP, SrcAddr, Status,
// 2191                   IEEEAddr, 0, NumAssocDev, StartIndex, AssocDevList );
        ; Setup parameters for call to function zdo_MTCB_NwkIEEEAddrRspCB
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	A,?V0 + 3
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	?V0 + 0,#0x0
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,#-0x7f
        MOV	R3,#0xa
        MOV	DPTR,#(zdo_MTCB_NwkIEEEAddrRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_NwkIEEEAddrRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x8
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 2192     return;
        SJMP	??ZDApp_IEEEAddrRspCB_1
// 2193   }
// 2194 #endif  //MT_ZDO_FUNC
// 2195 
// 2196   if ( ZDApp_IEEEAddrRsp_TaskID )
??ZDApp_IEEEAddrRspCB_0:
        MOV	DPTR,#??ZDApp_IEEEAddrRsp_TaskID
        MOVX	A,@DPTR
        JZ	??ZDApp_IEEEAddrRspCB_1
// 2197   {
// 2198     // Send the IEEE Address response structure to the registered task
// 2199     bufLen = sizeof( ZDO_IEEEAddrResp_t ) + sizeof( uint16 ) * NumAssocDev;
// 2200 
// 2201     pIEEEAddrRsp = (ZDO_IEEEAddrResp_t *)osal_msg_allocate( bufLen );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	A,?V0 + 3
        LCALL	?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	R6,?V0 + 4
        MOV	R7,?V0 + 5
// 2202     if ( pIEEEAddrRsp )
        MOV	A,R6
        JNZ	??ZDApp_IEEEAddrRspCB_2
        MOV	A,R7
??ZDApp_IEEEAddrRspCB_2:
        JZ	??ZDApp_IEEEAddrRspCB_1
// 2203     {
// 2204       pIEEEAddrRsp->hdr.event = ZDO_IEEE_ADDR_RESP;
        MOV	A,#-0x2e
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
// 2205 
// 2206       // Build the structure
// 2207       pIEEEAddrRsp->nwkAddr = aoi;
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL	?Subroutine1 & 0xFFFF
// 2208       osal_cpyExtAddr( pIEEEAddrRsp->extAddr, IEEEAddr );
??CrossCallReturnLabel_3:
        MOV	A,R6
        ADD	A,#0x4
        MOV	R2,A
        MOV	A,R7
        LCALL	?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2209       pIEEEAddrRsp->numAssocDevs = NumAssocDev;
        MOV	A,R6
        ADD	A,#0xc
        LCALL	??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV	A,?V0 + 3
        MOVX	@DPTR,A
// 2210       pIEEEAddrRsp->startIndex = StartIndex;
        MOV	A,R6
        ADD	A,#0xd
        LCALL	??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
// 2211       osal_memcpy( pIEEEAddrRsp->devList, AssocDevList, (sizeof( uint16 ) * NumAssocDev) );
        ; Setup parameters for call to function osal_memcpy
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	A,?V0 + 3
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	A,R6
        ADD	A,#0xe
        LCALL	?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 2212 
// 2213       osal_msg_send( ZDApp_IEEEAddrRsp_TaskID, (uint8 *)pIEEEAddrRsp );
        ; Setup parameters for call to function osal_msg_send
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#??ZDApp_IEEEAddrRsp_TaskID
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDApp_IEEEAddrRspCB_1:
        LJMP	?Subroutine42 & 0xFFFF
        CFI EndBlock cfiBlock66
// 2214     }
// 2215   }
// 2216 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        CLR	C
        RLC	A
        ADD	A,#0xe
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker76 Using cfiCommon1
        CFI (cfiPicker76) NoFunction
        CFI (cfiPicker76) Picker
        MOV	A,R6
        ADD	A,#0xb
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 18)
??Subroutine23_0:
        MOV	DPL,A
        MOV	A,R7
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 18)
??Subroutine23_1:
        ADDC	A,#0x0
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiPicker76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        MOV	R2,A
        MOV	A,R7
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 21)
??Subroutine21_0:
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        MOVX	A,@DPTR
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 18)
??Subroutine17_0:
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98
        CFI EndBlock cfiCond99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker102 Using cfiCommon1
        CFI (cfiPicker102) NoFunction
        CFI (cfiPicker102) Picker
        LCALL	?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        RET
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiPicker102
// 2217 #endif // ZDO_IEEEADDR_REQUEST
// 2218 
// 2219 #if defined ( ZDO_NODEDESC_REQUEST )
// 2220 /*********************************************************************
// 2221  * @fn      ZDApp_NodeDescRspCB()
// 2222  *
// 2223  * @brief
// 2224  *
// 2225  *   Called by ZDO when a Node_Desc_rsp message is received.
// 2226  *
// 2227  * @param  SrcAddr  - Source address
// 2228  * @param  Status - response status
// 2229  * @param  aoi - 16 bit network address of interest.
// 2230  * @param  pNodeDesc - pointer to the devices Node Descriptor
// 2231  *                     NULL if Status != ZDP_SUCCESS
// 2232  *
// 2233  * @return  none
// 2234  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2235 void ZDApp_NodeDescRspCB( zAddrType_t *SrcAddr, byte Status, uint16 aoi,
ZDApp_NodeDescRspCB:
        CFI Block cfiBlock103 Using cfiCommon0
        CFI Function ZDApp_NodeDescRspCB
// 2236                           NodeDescriptorFormat_t *pNodeDesc )
// 2237 {
        FUNCALL ZDApp_NodeDescRspCB, zdo_MTCB_NodeDescRspCB
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
// 2238 #if defined ( MT_ZDO_FUNC )
// 2239   /* First check if MT has subscribed for this callback. If so , pass it as
// 2240   a event to MonitorTest and return control to calling function after that */
// 2241   if ( _zdoCallbackSub & CB_ID_ZDO_NODE_DESC_RSP )
??CrossCallReturnLabel_13:
        LCALL	?L_MOV_X
        MOV	A,?V0 + 0
        ANL	A,#0x4
        JZ	??ZDApp_NodeDescRspCB_0
// 2242   {
// 2243     zdo_MTCB_NodeDescRspCB( SrcAddr, Status, aoi, pNodeDesc );
        ; Setup parameters for call to function zdo_MTCB_NodeDescRspCB
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(zdo_MTCB_NodeDescRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_NodeDescRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        CFI EndBlock cfiBlock103
// 2244     return;
??ZDApp_NodeDescRspCB_0:
        REQUIRE ?Subroutine43
        ; // Fall through to label ?Subroutine43
// 2245   }
// 2246 #endif  //MT_ZDO_FUNC
// 2247 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiBlock104 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock104
// 2248 #endif
// 2249 
// 2250 #if defined ( ZDO_POWERDESC_REQUEST )
// 2251 /*********************************************************************
// 2252  * @fn      ZDApp_PowerDescRspCB()
// 2253  *
// 2254  * @brief
// 2255  *
// 2256  *   Called by ZDO when a Power_Desc_rsp message is received.
// 2257  *
// 2258  * @param  SrcAddr  - Source address
// 2259  * @param  Status - response status
// 2260  * @param  aoi - 16 bit network address of interest.
// 2261  * @param  pPwrDesc - pointer to the devices Power Descriptor
// 2262  *                     NULL if Status != ZDP_SUCCESS
// 2263  *
// 2264  * @return  none
// 2265  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2266 void ZDApp_PowerDescRspCB( zAddrType_t *SrcAddr, byte Status,
ZDApp_PowerDescRspCB:
        CFI Block cfiBlock105 Using cfiCommon0
        CFI Function ZDApp_PowerDescRspCB
// 2267                             uint16 aoi, NodePowerDescriptorFormat_t *pPwrDesc )
// 2268 {
        FUNCALL ZDApp_PowerDescRspCB, zdo_MTCB_PowerDescRspCB
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
// 2269 #if defined ( MT_ZDO_FUNC )
// 2270   /* First check if MT has subscribed for this callback. If so , pass it as
// 2271   a event to MonitorTest and return control to calling function after that */
// 2272   if ( _zdoCallbackSub & CB_ID_ZDO_POWER_DESC_RSP )
??CrossCallReturnLabel_14:
        LCALL	?L_MOV_X
        MOV	A,?V0 + 0
        ANL	A,#0x8
        JZ	??ZDApp_PowerDescRspCB_0
// 2273   {
// 2274     zdo_MTCB_PowerDescRspCB( SrcAddr, Status, aoi, pPwrDesc );
        ; Setup parameters for call to function zdo_MTCB_PowerDescRspCB
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(zdo_MTCB_PowerDescRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_PowerDescRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
// 2275     return;
??ZDApp_PowerDescRspCB_0:
        SJMP	?Subroutine43
        CFI EndBlock cfiBlock105
// 2276   }
// 2277 #endif  //MT_ZDO_FUNC
// 2278 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        LCALL	?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_103:
        MOV	?V0 + 4,R0
        MOV	?V0 + 5,R1
        MOV	DPTR,#_zdoCallbackSub
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109
// 2279 #endif // ZDO_POWERDESC_REQUEST
// 2280 
// 2281 #if defined ( ZDO_SIMPLEDESC_REQUEST )
// 2282 /*********************************************************************
// 2283  * @fn      ZDApp_SimpleDescRspCB()
// 2284  *
// 2285  * @brief
// 2286  *
// 2287  *   Called by ZDO when a Simple_Desc_rsp message is received.
// 2288  *
// 2289  * @param  SrcAddr  - Source address
// 2290  * @param  Status - response status
// 2291  * @param  aoi - 16 bit network address of interest.
// 2292  * @param  endPoint - Endpoint for description
// 2293  * @param  pSimpleDesc - pointer to the devices Simple Descriptor
// 2294  *                     NULL if Status != ZDP_SUCCESS
// 2295  *
// 2296  * @return  none
// 2297  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2298 void ZDApp_SimpleDescRspCB( zAddrType_t *SrcAddr, byte Status,
ZDApp_SimpleDescRspCB:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI Function ZDApp_SimpleDescRspCB
// 2299                             uint16 aoi, byte endPoint,
// 2300                             SimpleDescriptionFormat_t *pSimpleDesc )
// 2301 {
        FUNCALL ZDApp_SimpleDescRspCB, zdo_MTCB_SimpleDescRspCB
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xd
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV	A,#0xd
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine20 & 0xFFFF
// 2302 #if defined ( MT_ZDO_FUNC )
// 2303   /* First check if MT has subscribed for this callback. If so , pass it as
// 2304   a event to MonitorTest and return control to calling function after that */
// 2305   if ( _zdoCallbackSub & CB_ID_ZDO_SIMPLE_DESC_RSP )
??CrossCallReturnLabel_51:
        MOV	DPTR,#_zdoCallbackSub
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,?V0 + 0
        ANL	A,#0x10
        JZ	??ZDApp_SimpleDescRspCB_0
// 2306   {
// 2307     zdo_MTCB_SimpleDescRspCB( SrcAddr, Status, aoi, endPoint, pSimpleDesc );
        ; Setup parameters for call to function zdo_MTCB_SimpleDescRspCB
        MOV	?V0 + 0,R6
        MOV	?V0 + 1,R7
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	DPTR,#(zdo_MTCB_SimpleDescRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_SimpleDescRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        CFI EndBlock cfiBlock110
// 2308     return;
??ZDApp_SimpleDescRspCB_0:
        REQUIRE ?Subroutine44
        ; // Fall through to label ?Subroutine44
// 2309   }
// 2310 #endif  //MT_ZDO_FUNC
// 2311 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x5
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock111
// 2312 #endif // ZDO_SIMPLEDESC_REQUEST
// 2313 
// 2314 #if defined ( ZDO_ACTIVEEP_REQUEST )
// 2315 /*********************************************************************
// 2316  * @fn      ZDApp_ActiveEPRspCB()
// 2317  *
// 2318  * @brief
// 2319  *
// 2320  *   Called by ZDO when a Active_EP_rsp message is received.
// 2321  *
// 2322  * @param  src    - Device's short address that this response describes
// 2323  * @param  Status - response status
// 2324  * @param  epCnt  - number of epList items
// 2325  * @param  epList - array of active endpoint.
// 2326  *
// 2327  * @return  none
// 2328  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2329 void ZDApp_ActiveEPRspCB( zAddrType_t *src, byte Status,
ZDApp_ActiveEPRspCB:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI Function ZDApp_ActiveEPRspCB
// 2330                                                      byte epCnt, byte *epList )
// 2331 {
        FUNCALL ZDApp_ActiveEPRspCB, zdo_MTCB_MatchActiveEPRspCB
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 6,R1
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
// 2332 #if defined ( MT_ZDO_FUNC )
// 2333   /* First check if MT has subscribed for this callback. If so , pass it as
// 2334   a event to MonitorTest and return control to calling function after that */
// 2335   if ( _zdoCallbackSub & CB_ID_ZDO_ACTIVE_EPINT_RSP )
??CrossCallReturnLabel_15:
        LCALL	?L_MOV_X
        MOV	A,?V0 + 0
        ANL	A,#0x20
        JZ	??ZDApp_ActiveEPRspCB_0
// 2336   {
// 2337     zdo_MTCB_MatchActiveEPRspCB( SPI_CB_ZDO_ACTIVE_EPINT_RSP, src,
// 2338                                   src->addr.shortAddr, Status, epCnt, epList );
        ; Setup parameters for call to function zdo_MTCB_MatchActiveEPRspCB
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,R4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	?V0 + 7,#0x0
        MOV	R0,#?V0 + 6
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,#-0x7b
        MOV	R3,#0xa
        MOV	DPTR,#(zdo_MTCB_MatchActiveEPRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_MatchActiveEPRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x5
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 2339     return;
??ZDApp_ActiveEPRspCB_0:
        LJMP	??Subroutine42_0 & 0xFFFF
        CFI EndBlock cfiBlock112
// 2340   }
// 2341 #endif  //MT_ZDO_FUNC
// 2342 }
// 2343 #endif // ZDO_ACTIVEEP_REQUEST
// 2344 
// 2345 #if defined ( ZDO_MATCH_REQUEST )
// 2346 /*********************************************************************
// 2347  * @fn      ZDApp_MatchDescRspCB()
// 2348  *
// 2349  * @brief
// 2350  *
// 2351  *   Called by ZDO when a Match_Desc_rsp message is received.
// 2352  *
// 2353  * NOTE:  Currently, this function accepts any responding device as THE
// 2354  *        match and updates the endpoint (requested) destination's
// 2355  *        address.  So, the last response received is the application's
// 2356  *        match.
// 2357  *
// 2358  *        This function could be changed to do further device discovery
// 2359  *        and/or accept multiple responses.
// 2360  *
// 2361  * @param  src     - Device's short address that this response describes
// 2362  * @param  Status  - response status
// 2363  * @param  epCnt   - number of epList items
// 2364  * @param  epList  - array of active endpoint
// 2365  *
// 2366  * @return  none
// 2367  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2368 void ZDApp_MatchDescRspCB( zAddrType_t *src, byte Status,
ZDApp_MatchDescRspCB:
        CFI Block cfiBlock113 Using cfiCommon0
        CFI Function ZDApp_MatchDescRspCB
// 2369                                                      byte epCnt, byte *epList )
// 2370 {
        FUNCALL ZDApp_MatchDescRspCB, zdo_MTCB_MatchActiveEPRspCB
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDApp_MatchDescRspCB, osal_msg_allocate
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL ZDApp_MatchDescRspCB, osal_memcpy
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL ZDApp_MatchDescRspCB, osal_msg_send
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL ZDApp_MatchDescRspCB, ZDApp_SendNewDstAddr
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL ZDApp_MatchDescRspCB, HalLedSet
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV	?V0 + 3,R4
// 2371 #if defined ( MT_ZDO_FUNC )
// 2372   /* First check if MT has subscribed for this callback. If so , pass it as
// 2373   a event to MonitorTest and return control to calling function after that */
// 2374   if ( _zdoCallbackSub & CB_ID_ZDO_MATCH_DESC_RSP )
        MOV	DPTR,#_zdoCallbackSub
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	A,?V0 + 4
        ANL	A,#0x40
        JZ	??ZDApp_MatchDescRspCB_0
// 2375   {
// 2376     zdo_MTCB_MatchActiveEPRspCB( SPI_CB_ZDO_MATCH_DESC_RSP, src,
// 2377                                   src->addr.shortAddr, Status, epCnt, epList );
        ; Setup parameters for call to function zdo_MTCB_MatchActiveEPRspCB
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	A,R4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	?V0 + 0,R1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	R2,#-0x7a
        MOV	R3,#0xa
        MOV	DPTR,#(zdo_MTCB_MatchActiveEPRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_MatchActiveEPRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x5
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 2378     return;
        LJMP	??ZDApp_MatchDescRspCB_1 & 0xFFFF
// 2379   }
// 2380 #endif  //MT_ZDO_FUNC
// 2381 
// 2382   if ( (Status != ZDP_SUCCESS) || (epCnt == 0) )
??ZDApp_MatchDescRspCB_0:
        MOV	A,R1
        JZ	$+5
        LJMP	??ZDApp_MatchDescRspCB_1 & 0xFFFF
        MOV	A,R4
        JNZ	$+5
        LJMP	??ZDApp_MatchDescRspCB_1 & 0xFFFF
// 2383   {
// 2384 #if defined( LCD_SUPPORTED )
// 2385     HalLcdWriteScreen( "Auto Find Rsp", "Unsuccessful" );
// 2386 #endif
// 2387     return;
// 2388   }
// 2389 
// 2390   if ( ZDApp_MatchDescRsp_TaskID )
        MOV	DPTR,#??ZDApp_MatchDescRsp_TaskID
        MOVX	A,@DPTR
        JZ	??ZDApp_MatchDescRspCB_2
// 2391   {
// 2392     // Send the IEEE Address response structure to the registered task.
// 2393     uint8 bufLen = sizeof( ZDO_MatchDescResp_t ) + epCnt;
// 2394     ZDO_MatchDescResp_t *pMatchDescRsp = (ZDO_MatchDescResp_t *)osal_msg_allocate( bufLen );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	A,#0x5
        ADD	A,?V0 + 3
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R6,?V0 + 0
        MOV	R7,?V0 + 1
// 2395 
// 2396     if ( pMatchDescRsp )
        MOV	A,R6
        JNZ	??ZDApp_MatchDescRspCB_3
        MOV	A,R7
??ZDApp_MatchDescRspCB_3:
        JZ	??ZDApp_MatchDescRspCB_2
// 2397     {
// 2398       pMatchDescRsp->hdr.event = ZDO_MATCH_DESC_RESP;
        MOV	A,#-0x2c
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine5 & 0xFFFF
// 2399 
// 2400       // Build the structure.
// 2401       pMatchDescRsp->nwkAddr = src->addr.shortAddr;
??CrossCallReturnLabel_12:
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL	?Subroutine4 & 0xFFFF
// 2402       pMatchDescRsp->epCnt = epCnt;
??CrossCallReturnLabel_9:
        MOV	A,?V0 + 3
        MOVX	@DPTR,A
// 2403       osal_memcpy( pMatchDescRsp->epList, epList, epCnt );
        ; Setup parameters for call to function osal_memcpy
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	R4,?V0 + 3
        MOV	R5,#0x0
        MOV	A,R6
        ADD	A,#0x5
        LCALL	?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 2404 
// 2405       osal_msg_send( ZDApp_MatchDescRsp_TaskID, (uint8 *)pMatchDescRsp );
        ; Setup parameters for call to function osal_msg_send
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#??ZDApp_MatchDescRsp_TaskID
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2406     }
// 2407   }
// 2408 
// 2409   if ( ZDApp_AutoFindMode_epDesc )
??ZDApp_MatchDescRspCB_2:
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        MOVX	A,@DPTR
        JNZ	??ZDApp_MatchDescRspCB_4
        INC	DPTR
        MOVX	A,@DPTR
??ZDApp_MatchDescRspCB_4:
        JZ	??ZDApp_MatchDescRspCB_1
// 2410   {
// 2411     ZDApp_SendNewDstAddr( *epList, src, 0, false,
// 2412                           *(ZDApp_AutoFindMode_epDesc->task_id),
// 2413                             ZDApp_AutoFindMode_epDesc->endPoint );
        ; Setup parameters for call to function ZDApp_SendNewDstAddr
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	?V0 + 0,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV	DPTR,#(ZDApp_SendNewDstAddr & 0xffff)
        MOV	A,#((ZDApp_SendNewDstAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 2414 
// 2415     HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x1
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        CFI EndBlock cfiBlock113
??ZDApp_MatchDescRspCB_1:
        REQUIRE ?Subroutine42
        ; // Fall through to label ?Subroutine42
// 2416 
// 2417 #if defined( LCD_SUPPORTED )
// 2418     MatchRsps++;
// 2419     HalLcdWriteString( "Auto Find Rsp", HAL_LCD_LINE_1 );
// 2420     HalLcdWriteStringValue( "dstAddr Rcvd", MatchRsps, 10, HAL_LCD_LINE_2 );
// 2421 #endif
// 2422   }
// 2423 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiBlock114 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
??Subroutine42_0:
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        LCALL	?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_100:
        MOVX	A,@DPTR
        MOV	R1,A
        RET
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_48
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_31
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_49
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_33
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_40
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_32
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_41
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker126 Using cfiCommon1
        CFI (cfiPicker126) NoFunction
        CFI (cfiPicker126) Picker
        LCALL	?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_111:
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiPicker126

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_31
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_33
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_40
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_32
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_41
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_30
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_29
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_28
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_23
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_48
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_49
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker139 Using cfiCommon1
        CFI (cfiPicker139) NoFunction
        CFI (cfiPicker139) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        RET
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiPicker139

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond140 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker142 Using cfiCommon1
        CFI (cfiPicker142) NoFunction
        CFI (cfiPicker142) Picker
        LCALL	?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL	?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_97:
        RET
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiPicker142

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond143 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_41
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker148 Using cfiCommon1
        CFI (cfiPicker148) NoFunction
        CFI (cfiPicker148) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiPicker148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond149 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker151 Using cfiCommon1
        CFI (cfiPicker151) NoFunction
        CFI (cfiPicker151) Picker
        LCALL	?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        RET
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiPicker151

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_13
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_14
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_26
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_15
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker159 Using cfiCommon1
        CFI (cfiPicker159) NoFunction
        CFI (cfiPicker159) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        RET
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiPicker159

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond160 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker162 Using cfiCommon1
        CFI (cfiPicker162) NoFunction
        CFI (cfiPicker162) Picker
        LCALL	?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_91:
        RET
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiPicker162

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond163 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_11
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_2
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_12
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker167 Using cfiCommon1
        CFI (cfiPicker167) NoFunction
        CFI (cfiPicker167) Picker
        LCALL	?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_108:
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiPicker167

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond168 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_80
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_11
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_2
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_1
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_12
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_0
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker176 Using cfiCommon1
        CFI (cfiPicker176) NoFunction
        CFI (cfiPicker176) Picker
        MOVX	@DPTR,A
        ; Setup parameters for call to function osal_cpyExtAddr
        ; Setup parameters for call to function osal_cpyExtAddr
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function ZDApp_SendMsg
        ; Setup parameters for call to function ZDApp_SendMsg
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiPicker176
// 2424 #endif // ZDO_MATCH_REQUEST
// 2425 
// 2426 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
// 2427 /*********************************************************************
// 2428  * @fn      ZDApp_EndDeviceBindRsp()
// 2429  *
// 2430  * @brief
// 2431  *
// 2432  *   Called by ZDO when a End_Device_Bind_rsp message is received.
// 2433  *
// 2434  * @param  SrcAddr  - Source address
// 2435  * @param  Status - response status
// 2436  *
// 2437  * @return  none
// 2438  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2439 void ZDApp_EndDeviceBindRsp( zAddrType_t *SrcAddr, byte Status )
ZDApp_EndDeviceBindRsp:
        CFI Block cfiBlock177 Using cfiCommon0
        CFI Function ZDApp_EndDeviceBindRsp
// 2440 {
        FUNCALL ZDApp_EndDeviceBindRsp, zdo_MTCB_BindRspCB
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_EndDeviceBindRsp, HalLedSet
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_EndDeviceBindRsp, HalLedSet
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
// 2441 #if defined ( MT_ZDO_FUNC )
// 2442   /* First check if MT has subscribed for this callback. If so , pass it as
// 2443   a event to MonitorTest and return control to calling function after that */
// 2444   if ( _zdoCallbackSub & CB_ID_ZDO_END_DEVICE_BIND_RSP )
        MOV	DPTR,#_zdoCallbackSub
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,?V0 + 0
        ANL	A,#0x80
        JZ	??ZDApp_EndDeviceBindRsp_0
// 2445   {
// 2446     zdo_MTCB_BindRspCB( SPI_CB_ZDO_END_DEVICE_BIND_RSP, SrcAddr, Status );
        ; Setup parameters for call to function zdo_MTCB_BindRspCB
        MOV	R2,#-0x79
        MOV	R3,#0xa
        MOV	DPTR,#(zdo_MTCB_BindRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_BindRspCB >> 16) & 0xff)
        SJMP	??ZDApp_EndDeviceBindRsp_1
// 2447     return;
// 2448   }
// 2449 #endif  //MT_ZDO_FUNC
// 2450 
// 2451   if ( Status == ZDP_SUCCESS )
??ZDApp_EndDeviceBindRsp_0:
        MOV	A,R1
        JNZ	??ZDApp_EndDeviceBindRsp_2
// 2452     HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x1
        SJMP	??ZDApp_EndDeviceBindRsp_3
// 2453 #if defined(BLINK_LEDS)
// 2454   else
// 2455     // Flash LED to show failure
// 2456     HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
??ZDApp_EndDeviceBindRsp_2:
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x4
??ZDApp_EndDeviceBindRsp_3:
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
??ZDApp_EndDeviceBindRsp_1:
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??Subroutine45_0
        CFI EndBlock cfiBlock177
// 2457 #endif
// 2458 
// 2459 #if defined( LCD_SUPPORTED )
// 2460   HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
// 2461   if ( Status == ZDP_SUCCESS )
// 2462     HalLcdWriteString( "Rsp SUCCESS", HAL_LCD_LINE_2 );
// 2463   else if ( Status == ZDP_TIMEOUT )
// 2464     HalLcdWriteString( "Rsp Timeout", HAL_LCD_LINE_2 );
// 2465   else if ( Status == ZDP_NO_MATCH )
// 2466     HalLcdWriteString( "Rsp No Match", HAL_LCD_LINE_2 );
// 2467   else
// 2468     HalLcdWriteString( "Rsp Not Supported", HAL_LCD_LINE_2 );
// 2469 #endif  // LCD_SUPPORTED
// 2470 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiBlock178 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x5
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
??Subroutine45_0:
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock178
// 2471 #endif // ZDO_ENDDEVICEBIND_REQUEST
// 2472 
// 2473 #if defined ( ZDO_BIND_UNBIND_REQUEST )
// 2474 /*********************************************************************
// 2475  * @fn      ZDApp_BindRsp()
// 2476  *
// 2477  * @brief
// 2478  *
// 2479  *   Called by ZDO when a Bind_rsp message is received.
// 2480  *
// 2481  * @param  SrcAddr  - Source address
// 2482  * @param  Status - response status
// 2483  *
// 2484  * @return  none
// 2485  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2486 void ZDApp_BindRsp( zAddrType_t *SrcAddr, byte Status )
ZDApp_BindRsp:
        CFI Block cfiBlock179 Using cfiCommon0
        CFI Function ZDApp_BindRsp
// 2487 {
        FUNCALL ZDApp_BindRsp, zdo_MTCB_BindRspCB
        LOCFRAME XSTACK, 17, STACK
        ARGFRAME XSTACK, 17, STACK
        FUNCALL ZDApp_BindRsp, ZDApp_SendMsg
        LOCFRAME XSTACK, 17, STACK
        ARGFRAME XSTACK, 17, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 5
        MOV	A,#-0x5
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
// 2488   ZDO_BindRsp_t bindRsp;
// 2489 
// 2490 #if defined ( MT_ZDO_FUNC )
// 2491   /* First check if MT has subscribed for this callback. If so , pass it as
// 2492   a event to MonitorTest and return control to calling function after that */
// 2493   if ( _zdoCallbackSub & CB_ID_ZDO_BIND_RSP )
        MOV	DPTR,#_zdoCallbackSub
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,#0x1
        ANL	A,?V0 + 1
        MOV	R3,A
        CLR	A
        JNZ	??ZDApp_BindRsp_0
        MOV	A,R3
??ZDApp_BindRsp_0:
        JZ	??ZDApp_BindRsp_1
// 2494   {
// 2495     zdo_MTCB_BindRspCB( SPI_CB_ZDO_BIND_RSP, SrcAddr, Status );
        ; Setup parameters for call to function zdo_MTCB_BindRspCB
        MOV	R2,#-0x78
        MOV	R3,#0xa
        MOV	DPTR,#(zdo_MTCB_BindRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_BindRspCB >> 16) & 0xff)
        SJMP	??CrossCallReturnLabel_114
// 2496     return;
// 2497   }
// 2498 #endif  //MT_ZDO_FUNC
// 2499 
// 2500   if ( ZDApp_BindUnbindRsp_TaskID != TASK_NO_TASK )
??ZDApp_BindRsp_1:
        MOV	DPTR,#??ZDApp_BindUnbindRsp_TaskID
        MOVX	A,@DPTR
        XRL	A,#0xff
        JZ	??ZDApp_BindRsp_2
// 2501   {
// 2502     // Send the response structure to the registered task
// 2503     bindRsp.nwkAddr = SrcAddr->addr.shortAddr;
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
// 2504     bindRsp.status  = Status;
??CrossCallReturnLabel_4:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine0 & 0xFFFF
// 2505 
// 2506     ZDApp_SendMsg( ZDApp_BindUnbindRsp_TaskID,
// 2507                    ZDO_BIND_RESP,
// 2508                    sizeof(ZDO_BindRsp_t),
// 2509                    (byte*)(&bindRsp) );
??CrossCallReturnLabel_0:
        MOV	R2,#-0x27
        MOV	DPTR,#??ZDApp_BindUnbindRsp_TaskID
        LCALL	??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_114:
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDApp_BindRsp_2:
        SJMP	?Subroutine45
        CFI EndBlock cfiBlock179
// 2510   }
// 2511 }
// 2512 #endif // ZDO_BIND_UNBIND_REQUEST
// 2513 
// 2514 #if defined ( ZDO_BIND_UNBIND_REQUEST )
// 2515 /*********************************************************************
// 2516  * @fn      ZDApp_UnbindRsp()
// 2517  *
// 2518  * @brief
// 2519  *
// 2520  *   Called by ZDO when a Unbind_rsp message is received.
// 2521  *
// 2522  * @param  SrcAddr  - Source address
// 2523  * @param  Status - response status
// 2524  *
// 2525  * @return  none
// 2526  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2527 void ZDApp_UnbindRsp( zAddrType_t *SrcAddr, byte Status )
ZDApp_UnbindRsp:
        CFI Block cfiBlock180 Using cfiCommon0
        CFI Function ZDApp_UnbindRsp
// 2528 {
        FUNCALL ZDApp_UnbindRsp, zdo_MTCB_BindRspCB
        LOCFRAME XSTACK, 17, STACK
        ARGFRAME XSTACK, 17, STACK
        FUNCALL ZDApp_UnbindRsp, ZDApp_SendMsg
        LOCFRAME XSTACK, 17, STACK
        ARGFRAME XSTACK, 17, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 5
        MOV	A,#-0x5
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
// 2529   ZDO_UnbindRsp_t unbindRsp;
// 2530 
// 2531 #if defined ( MT_ZDO_FUNC )
// 2532   /* First check if MT has subscribed for this callback. If so , pass it as
// 2533   a event to MonitorTest and return control to calling function after that */
// 2534   if ( _zdoCallbackSub & CB_ID_ZDO_UNBIND_RSP )
        MOV	DPTR,#_zdoCallbackSub
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,#0x2
        ANL	A,?V0 + 1
        MOV	R3,A
        CLR	A
        JNZ	??ZDApp_UnbindRsp_0
        MOV	A,R3
??ZDApp_UnbindRsp_0:
        JZ	??ZDApp_UnbindRsp_1
// 2535   {
// 2536     zdo_MTCB_BindRspCB( SPI_CB_ZDO_UNBIND_RSP, SrcAddr, Status );
        ; Setup parameters for call to function zdo_MTCB_BindRspCB
        MOV	R2,#-0x77
        MOV	R3,#0xa
        MOV	DPTR,#(zdo_MTCB_BindRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_BindRspCB >> 16) & 0xff)
        SJMP	??CrossCallReturnLabel_115
// 2537     return;
// 2538   }
// 2539 #endif  //MT_ZDO_FUNC
// 2540 
// 2541   if ( ZDApp_BindUnbindRsp_TaskID != TASK_NO_TASK )
??ZDApp_UnbindRsp_1:
        MOV	DPTR,#??ZDApp_BindUnbindRsp_TaskID
        MOVX	A,@DPTR
        XRL	A,#0xff
        JZ	??ZDApp_UnbindRsp_2
// 2542   {
// 2543     // Send the response structure to the registered task
// 2544     unbindRsp.nwkAddr = SrcAddr->addr.shortAddr;
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
// 2545     unbindRsp.status  = Status;
??CrossCallReturnLabel_5:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine0 & 0xFFFF
// 2546 
// 2547     ZDApp_SendMsg( ZDApp_BindUnbindRsp_TaskID,
// 2548                    ZDO_UNBIND_RESP,
// 2549                    sizeof(ZDO_UnbindRsp_t),
// 2550                    (byte*)(&unbindRsp) );
??CrossCallReturnLabel_1:
        MOV	R2,#-0x26
        MOV	DPTR,#??ZDApp_BindUnbindRsp_TaskID
        LCALL	??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_115:
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDApp_UnbindRsp_2:
        LJMP	?Subroutine45 & 0xFFFF
        CFI EndBlock cfiBlock180
// 2551   }
// 2552 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond181 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker184 Using cfiCommon1
        CFI (cfiPicker184) NoFunction
        CFI (cfiPicker184) Picker
        LCALL	??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV	A,#0x4
        RET
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiPicker184

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond185 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker187 Using cfiCommon1
        CFI (cfiPicker187) NoFunction
        CFI (cfiPicker187) Picker
        MOV	A,R1
        LCALL	?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV	R3,#0x5
        RET
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiPicker187
// 2553 #endif // ZDO_BIND_UNBIND_REQUEST
// 2554 
// 2555 /*********************************************************************
// 2556  * Call Back Functions from NWK  - API
// 2557  */
// 2558 
// 2559 /*********************************************************************
// 2560  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 2561  *
// 2562  * @brief       This function returns a choice of PAN to join.
// 2563  *
// 2564  * @param       ResultCount - Number of routers discovered
// 2565  * @param               NetworkList - Pointer to list of network descriptors
// 2566  *
// 2567  * @return      ZStatus_t
// 2568  */
// 2569 #define STACK_PROFILE_MAX 2

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2570 ZStatus_t ZDO_NetworkDiscoveryConfirmCB( byte ResultCount,
ZDO_NetworkDiscoveryConfirmCB:
        CFI Block cfiBlock188 Using cfiCommon0
        CFI Function ZDO_NetworkDiscoveryConfirmCB
// 2571                                          networkDesc_t *NetworkList )
// 2572 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, NLME_SetRequest
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, osal_start_timerEx
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, osal_cpyExtAddr
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        MOV	A,#-0xd
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 14
        MOV	A,#-0xe
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	A,R1
        MOV	R4,A
// 2573   networkDesc_t *pNwkDesc;
// 2574   ZDO_NetworkDiscoveryCfm_t msg;
// 2575   byte  i, j;
// 2576   uint8 stackProfile;
// 2577   uint8 stackProfilePro;
// 2578   uint8 selected;
// 2579 
// 2580 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 2581   if ( zdappMgmtNwkDiscReqInProgress )
// 2582   {
// 2583     zdappMgmtNwkDiscReqInProgress = false;
// 2584     ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
// 2585     return ( ZSuccess );
// 2586   }
// 2587 #endif
// 2588 
// 2589   // process discovery results
// 2590   stackProfilePro = FALSE;
        MOV	?V0 + 1,#0x0
// 2591   selected = FALSE;
// 2592 
// 2593   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV	R5,#0x0
// 2594   {
// 2595     for ( j = 0; j < (sizeof(sPVerList)/sizeof(sPVerList[0])); ++j )
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV	?V0 + 0,#0x0
// 2596     {
// 2597       pNwkDesc = NetworkList;
??ZDO_NetworkDiscoveryConfirmCB_1:
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
// 2598       for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV	?V0 + 4,#0x0
        SJMP	??CrossCallReturnLabel_52
// 2599       {
// 2600         if ( zgConfigPANID != 0xFFFF )
// 2601         {
// 2602           // PAN Id is preconfigured. check if it matches
// 2603           // only 14 bits of pan id is used
// 2604           if ( pNwkDesc->panId != ( zgConfigPANID & 0x3FFF ) )
// 2605             continue;
// 2606           #if !defined ( DEF_PROTO_VERS )
// 2607           // If the macro was not defined ensure we join the version supported by
// 2608           // this PAN by forcing a match below. We need this statement because we
// 2609           // want to (possibly) override the NV value if the PAN was pre-defined.
// 2610           // See App Note 026.
// 2611           sPVerList[j] = pNwkDesc->version;
// 2612           #endif
// 2613         }
// 2614 
// 2615         // check that network is allowing joining
// 2616         //------------------------------------------------------------
// 2617         #if defined( RTR_NWK )
// 2618         //------------------------------------------------------------
// 2619         if ( stackProfilePro == FALSE )
// 2620         {
// 2621           if ( !pNwkDesc->routerCapacity )
// 2622           {
// 2623             continue;
// 2624           }
// 2625         }
// 2626         else
// 2627         {
// 2628           if ( !pNwkDesc->deviceCapacity )
??ZDO_NetworkDiscoveryConfirmCB_2:
        INC	DPTR
        MOVX	A,@DPTR
        JZ	??ZDO_NetworkDiscoveryConfirmCB_3
// 2629           {
// 2630             continue;
// 2631           }
// 2632         }
// 2633         //------------------------------------------------------------
// 2634         #else
// 2635         //------------------------------------------------------------
// 2636         if ( !pNwkDesc->deviceCapacity )
// 2637         {
// 2638           continue;
// 2639         }
// 2640         //------------------------------------------------------------
// 2641         #endif
// 2642         //------------------------------------------------------------
// 2643 
// 2644         // check version of zigbee protocol
// 2645         if ( pNwkDesc->version != sPVerList[j] )
??ZDO_NetworkDiscoveryConfirmCB_4:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_75:
        XRL	A,R0
        JNZ	??ZDO_NetworkDiscoveryConfirmCB_3
// 2646           continue;
// 2647 
// 2648         // check version of stack profile
// 2649         if ( pNwkDesc->stackProfile != zgStackProfile )
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	DPTR,#zgStackProfile
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
// 2650         {
// 2651           stackProfilePro = TRUE;
        MOV	?V0 + 1,#0x1
// 2652 
// 2653           if ( stackProfile == 0 )
        MOV	A,R5
        JZ	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
// 2654           {
// 2655             continue;
// 2656           }
// 2657         }
??ZDO_NetworkDiscoveryConfirmCB_3:
        INC	?V0 + 4
        MOV	A,R6
        ADD	A,#0x14
        LCALL	??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV	A,?V0 + 4
        CLR	C
        SUBB	A,R4
        JNC	??ZDO_NetworkDiscoveryConfirmCB_6
        MOV	DPTR,#zgConfigPANID
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??ZDO_NetworkDiscoveryConfirmCB_7
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??ZDO_NetworkDiscoveryConfirmCB_7:
        JZ	??ZDO_NetworkDiscoveryConfirmCB_8
        MOV	DPTR,#zgConfigPANID
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ANL	A,#0x3f
        MOV	R1,A
        MOV	DPH,R7
        MOV	DPL,R6
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??ZDO_NetworkDiscoveryConfirmCB_9
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??ZDO_NetworkDiscoveryConfirmCB_9:
        JNZ	??ZDO_NetworkDiscoveryConfirmCB_3
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        LCALL	?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_105:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
??ZDO_NetworkDiscoveryConfirmCB_8:
        MOV	A,?V0 + 1
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        JZ	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_2 & 0xFFFF
        MOVX	A,@DPTR
        JZ	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_4 & 0xFFFF
        SJMP	??ZDO_NetworkDiscoveryConfirmCB_3
// 2658 
// 2659         // check if beacon order is the right value..
// 2660     //  if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
// 2661     //    continue;
// 2662 
// 2663         // choose this pan for joining
// 2664         break;
// 2665       }
// 2666       if (i < ResultCount)
// 2667       {
// 2668         selected = TRUE;
// 2669         break;
// 2670       }
// 2671     }
??ZDO_NetworkDiscoveryConfirmCB_6:
        INC	?V0 + 0
        MOV	A,?V0 + 0
        CLR	C
        SUBB	A,#0x2
        JNC	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_1 & 0xFFFF
// 2672 
// 2673     // break if selected or stack profile pro wasn't found
// 2674     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
        MOV	A,?V0 + 1
        JZ	??ZDO_NetworkDiscoveryConfirmCB_10
// 2675     {
// 2676       break;
// 2677     }
// 2678   }
        INC	R5
        MOV	A,R5
        CLR	C
        SUBB	A,#0x2
        JNC	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
// 2679 
// 2680   if ( i == ResultCount )
??ZDO_NetworkDiscoveryConfirmCB_10:
        MOV	A,R4
        XRL	A,?V0 + 4
        JNZ	??ZDO_NetworkDiscoveryConfirmCB_5
// 2681   {
// 2682     msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x1
        MOVX	@DPTR,A
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_11 & 0xFFFF
// 2683   }
// 2684   else
// 2685   {
// 2686     // (possibly) reset NV network version we're running under.
// 2687     if (NLME_GetProtocolVersion() != sPVerList[j])
??ZDO_NetworkDiscoveryConfirmCB_5:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R2,A
        LCALL	?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_76:
        XRL	A,R2
        JZ	??ZDO_NetworkDiscoveryConfirmCB_12
// 2688     {
// 2689       NLME_SetRequest(nwkProtocolVersion, 0, &sPVerList[j]);
        ; Setup parameters for call to function NLME_SetRequest
        MOV	A,?V0 + 0
        ADD	A,#(??sPVerList & 0xff)
        MOV	R4,A
        CLR	A
        ADDC	A,#((??sPVerList >> 8) & 0xff)
        MOV	R5,A
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	R1,#-0x68
        MOV	DPTR,#(NLME_SetRequest & 0xffff)
        MOV	A,#((NLME_SetRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2690       // make sure we update NV
// 2691       osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2692     }
// 2693 
// 2694     msg.hdr.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_12:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
// 2695     msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        LCALL	?Subroutine28 & 0xFFFF
// 2696     msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
??CrossCallReturnLabel_81:
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        LCALL	?Subroutine28 & 0xFFFF
// 2697     msg.logicalChannel = pNwkDesc->logicalChannel;
??CrossCallReturnLabel_82:
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        LCALL	?Subroutine4 & 0xFFFF
// 2698     msg.version = pNwkDesc->version;
??CrossCallReturnLabel_10:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 2699     osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	A,R6
        ADD	A,#0xc
        MOV	R4,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R5,A
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2700   }
// 2701 
// 2702   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (byte *)&msg );
??ZDO_NetworkDiscoveryConfirmCB_11:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R3,#0xe
        MOV	R2,#0x1
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2703 
// 2704   return (ZSuccess);
        MOV	R1,#0x0
        MOV	A,#0xe
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        LJMP	?Subroutine44 & 0xFFFF
        CFI EndBlock cfiBlock188
// 2705 }  // ZDO_NetworkDiscoveryConfirmCB

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond189 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker191 Using cfiCommon1
        CFI (cfiPicker191) NoFunction
        CFI (cfiPicker191) Picker
        LCALL	?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_106:
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiPicker191

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond192 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+-1
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_76
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker195 Using cfiCommon1
        CFI (cfiPicker195) NoFunction
        CFI (cfiPicker195) Picker
        MOV	?V0 + 2,?V0 + 0
        MOV	A,?V0 + 2
        ADD	A,#(??sPVerList & 0xff)
        MOV	DPL,A
        CLR	A
        ADDC	A,#((??sPVerList >> 8) & 0xff)
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond196 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker200 Using cfiCommon1
        CFI (cfiPicker200) NoFunction
        CFI (cfiPicker200) Picker
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        RET
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiPicker200

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond201 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker203 Using cfiCommon1
        CFI (cfiPicker203) NoFunction
        CFI (cfiPicker203) Picker
        LCALL	?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_83:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiPicker203

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond204 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_9
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker208 Using cfiCommon1
        CFI (cfiPicker208) NoFunction
        CFI (cfiPicker208) Picker
        MOVX	@DPTR,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        RET
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiPicker208
// 2706 
// 2707 /*********************************************************************
// 2708  * @fn          ZDO_NetworkFormationConfirmCB
// 2709  *
// 2710  * @brief       This function reports the results of the request to
// 2711  *              initialize a coordinator in a network.
// 2712  *
// 2713  * @param       Status - Result of NLME_NetworkFormationRequest()
// 2714  *
// 2715  * @return      none
// 2716  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2717 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
        CFI Block cfiBlock209 Using cfiCommon0
        CFI Function ZDO_NetworkFormationConfirmCB
// 2718 {
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2719 #if defined(ZDO_COORDINATOR)
// 2720   nwkStatus = (byte)Status;
        MOV	A,R1
        MOV	DPTR,#nwkStatus
        MOVX	@DPTR,A
// 2721 
// 2722   if ( Status == ZSUCCESS )
        JNZ	??ZDO_NetworkFormationConfirmCB_0
// 2723   {
// 2724     // LED on shows Coordinator started
// 2725     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x1
        MOV	R1,#0x4
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2726 
// 2727     // LED off forgets HOLD_AUTO_START
// 2728     HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2729 
// 2730 #if defined ( ZBIT )
// 2731     SIM_SetColor(0xd0ffd0);
// 2732 #endif
// 2733 
// 2734     if ( devState == DEV_HOLD )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JNZ	??ZDO_NetworkFormationConfirmCB_1
// 2735     {
// 2736       // Began with HOLD_AUTO_START
// 2737       devState = DEV_COORD_STARTING;
        MOV	A,#0x8
        MOVX	@DPTR,A
        SJMP	??ZDO_NetworkFormationConfirmCB_1
// 2738     }
// 2739   }
// 2740 #if defined(BLINK_LEDS)
// 2741   else
// 2742     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x4
        MOV	R1,#0x4
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2743 #endif
// 2744 
// 2745   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
??ZDO_NetworkFormationConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV	R2,#0x2
        LJMP	?Subroutine46 & 0xFFFF
        CFI EndBlock cfiBlock209
// 2746 #endif  //ZDO_COORDINATOR
// 2747 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond210 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_118
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond211 Using cfiCommon0
        CFI (cfiCond211) NoFunction
        CFI (cfiCond211) Conditional ??Subroutine46_0
        CFI (cfiCond211) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond211) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond211) CFA_SP SP+-5
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??Subroutine46_0
        CFI (cfiCond213) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond213) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond213) CFA_SP SP+-5
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??Subroutine46_0
        CFI (cfiCond214) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond214) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond214) CFA_SP SP+-5
        CFI Block cfiPicker215 Using cfiCommon1
        CFI (cfiPicker215) NoFunction
        CFI (cfiPicker215) Picker
        MOV	R3,#0x0
        MOV	DPTR,#ZDAppTaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_set_event & 0xffff)
        MOV	A,#((osal_set_event >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond210
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiPicker215
// 2748 
// 2749 #if defined(RTR_NWK)
// 2750 /*********************************************************************
// 2751  * @fn          ZDO_StartRouterConfirmCB
// 2752  *
// 2753  * @brief       This function reports the results of the request to
// 2754  *              start functioning as a router in a network.
// 2755  *
// 2756  * @param       Status - Result of NLME_StartRouterRequest()
// 2757  *
// 2758  * @return      none
// 2759  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2760 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
        CFI Block cfiBlock216 Using cfiCommon0
        CFI Function ZDO_StartRouterConfirmCB
// 2761 {
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2762   nwkStatus = (byte)Status;
        MOV	A,R1
        MOV	DPTR,#nwkStatus
        MOVX	@DPTR,A
// 2763 
// 2764   if ( Status == ZSUCCESS )
        JNZ	??ZDO_StartRouterConfirmCB_0
// 2765   {
// 2766     // LED on shows Router started
// 2767     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x1
        MOV	R1,#0x4
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2768     // LED off forgets HOLD_AUTO_START
// 2769     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2770     if ( devState == DEV_HOLD )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JNZ	??ZDO_StartRouterConfirmCB_1
// 2771     {
// 2772       // Began with HOLD_AUTO_START
// 2773       devState = DEV_END_DEVICE;
        MOV	A,#0x6
        MOVX	@DPTR,A
        SJMP	??ZDO_StartRouterConfirmCB_1
// 2774     }
// 2775   }
// 2776 #if defined(BLINK_LEDS)
// 2777   else
// 2778     HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x4
        MOV	R1,#0x4
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2779 #endif
// 2780 
// 2781   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV	R2,#0x20
        LJMP	?Subroutine46 & 0xFFFF
        CFI EndBlock cfiBlock216
// 2782 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiBlock217 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 1)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
??Subroutine38_0:
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock217
// 2783 #endif  //RTR_NWK
// 2784 
// 2785 /*********************************************************************
// 2786  * @fn          ZDO_JoinConfirmCB
// 2787  *
// 2788  * @brief       This function allows the next hight layer to be notified
// 2789  *              of the results of its request to join itself or another
// 2790  *              device to a network.
// 2791  *
// 2792  * @param       Status - Result of NLME_JoinRequest()
// 2793  *
// 2794  * @return      none
// 2795  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2796 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
        CFI Block cfiBlock218 Using cfiCommon0
        CFI Function ZDO_JoinConfirmCB
// 2797 {
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_JoinConfirmCB, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2798   nwkStatus = (byte)Status;
        MOV	A,R1
        MOV	DPTR,#nwkStatus
        MOVX	@DPTR,A
// 2799 
// 2800   if ( Status == ZSUCCESS )
        JNZ	??ZDO_JoinConfirmCB_0
// 2801   {
// 2802     // LED on shows device joined
// 2803     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x1
        MOV	R1,#0x4
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2804     // LED off forgets HOLD_AUTO_START
// 2805     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2806     if ( (devState == DEV_HOLD) )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JNZ	??ZDO_JoinConfirmCB_1
// 2807     {
// 2808       // Began with HOLD_AUTO_START
// 2809       devState = DEV_NWK_JOINING;
        MOV	A,#0x3
        MOVX	@DPTR,A
// 2810     }
// 2811 #if !  ( SECURE != 0  )
// 2812     // Notify to save info into NV
// 2813     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 100 );
??ZDO_JoinConfirmCB_1:
        ; Setup parameters for call to function osal_start_timerEx
        MOV	R4,#0x64
        MOV	R5,#0x0
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_18:
        SJMP	??ZDO_JoinConfirmCB_2
// 2814 #endif
// 2815   }
// 2816 #if defined(BLINK_LEDS)
// 2817   else
// 2818     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_JoinConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x4
        MOV	R1,#0x4
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
??ZDO_JoinConfirmCB_2:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2819 #endif
// 2820 
// 2821   // Notify ZDApp
// 2822   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R3,#0x2
        MOV	R2,#0x2
        LJMP	?Subroutine47 & 0xFFFF
        CFI EndBlock cfiBlock218
// 2823 }
// 2824 
// 2825 /*********************************************************************
// 2826  * @fn          ZDO_JoinIndicationCB
// 2827  *
// 2828  * @brief       This function allows the next higher layer of a
// 2829  *              coordinator to be notified of a remote join request.
// 2830  *
// 2831  * @param       ShortAddress - 16-bit address
// 2832  * @param       ExtendedAddress - IEEE (64-bit) address
// 2833  * @param       CapabilityInformation - Association Capability Information
// 2834  *
// 2835  * @return      ZStatus_t
// 2836  */
// 2837 #if defined(RTR_NWK)

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2838 ZStatus_t ZDO_JoinIndicationCB( uint16 ShortAddress, byte *ExtendedAddress,
ZDO_JoinIndicationCB:
        CFI Block cfiBlock219 Using cfiCommon0
        CFI Function ZDO_JoinIndicationCB
// 2839                                          byte CapabilityInformation )
// 2840 {
        FUNCALL ZDO_JoinIndicationCB, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2841 #if defined (AUTO_SOFT_START)
// 2842     ZDX_PostCoordinatorIEEE(ShortAddress);
// 2843 #endif
// 2844 
// 2845   // Notify to save info into NV
// 2846   osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2847 
// 2848 #if   ( SECURE != 0  )
// 2849   // send notification to TC of new device..
// 2850   if ( _NIB.SecurityLevel )
// 2851     osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
// 2852 #endif  // SECURE
// 2853 
// 2854   return ( ZSuccess );
        MOV	R1,#0x0
        SJMP	??Subroutine38_0
        CFI EndBlock cfiBlock219
// 2855 }
// 2856 #endif  //RTR_NWK
// 2857 
// 2858 /*********************************************************************
// 2859  * @fn          ZDO_LeaveCnf
// 2860  *
// 2861  * @brief       This function allows the next higher layer to be
// 2862  *              notified of the results of its request for this or
// 2863  *              a child device to leave the network.
// 2864  *
// 2865  * @param       cnf - NLME_LeaveCnf_t
// 2866  *
// 2867  * @return      none
// 2868  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2869 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
        CFI Block cfiBlock220 Using cfiCommon0
        CFI Function ZDO_LeaveCnf
// 2870 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZDO_LeaveCnf, osal_ExtAddrEqual
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZDO_LeaveCnf, NLME_RemoveChild
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
// 2871   // Check for this device
// 2872   if ( osal_ExtAddrEqual( cnf->extAddr,
// 2873                           NLME_GetExtAddr() ) == TRUE )
        ; Setup parameters for call to function osal_ExtAddrEqual
        ; Setup parameters for call to function NLME_GetExtAddr
        MOV	DPTR,#(NLME_GetExtAddr & 0xffff)
        MOV	A,#((NLME_GetExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	A,R6
        ADD	A,#0x2
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(osal_ExtAddrEqual & 0xffff)
        MOV	A,#((osal_ExtAddrEqual >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JNZ	??ZDO_LeaveCnf_0
// 2874   {
// 2875     // Prepare to leave with reset
// 2876     ZDApp_LeaveReset( cnf->rejoin );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV	A,R6
        ADD	A,#0xb
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_58:
        SJMP	??CrossCallReturnLabel_24
// 2877   }
// 2878   //------------------------------------------------------------------
// 2879   #if defined( RTR_NWK )
// 2880   //------------------------------------------------------------------
// 2881   else
// 2882   {
// 2883     // Remove device address(optionally descendents) from data
// 2884     ZDApp_LeaveUpdate( cnf->dstAddr,
// 2885                        cnf->extAddr,
// 2886                        cnf->removeChildren );
??ZDO_LeaveCnf_0:
        ; Setup parameters for call to function NLME_RemoveChild
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2887   }
// 2888   //------------------------------------------------------------------
// 2889   #endif
// 2890   //------------------------------------------------------------------
// 2891 }
        LJMP	??Subroutine41_0 & 0xFFFF
        CFI EndBlock cfiBlock220
// 2892 
// 2893 /*********************************************************************
// 2894  * @fn          ZDO_LeaveInd
// 2895  *
// 2896  * @brief       This function allows the next higher layer of a
// 2897  *              device to be notified of a remote leave request or
// 2898  *              indication.
// 2899  *
// 2900  * @param       ind - NLME_LeaveInd_t
// 2901  *
// 2902  * @return      none
// 2903  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2904 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
        CFI Block cfiBlock221 Using cfiCommon0
        CFI Function ZDO_LeaveInd
// 2905 {
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_LeaveInd, NLME_RemoveChild
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
// 2906   uint8 leave;
// 2907 
// 2908 
// 2909   // Parent is requesting the leave - NWK layer filters out illegal
// 2910   // requests
// 2911   if ( ind->request == TRUE )
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??ZDO_LeaveInd_0
// 2912   {
// 2913     // Notify network of leave
// 2914     //----------------------------------------------------------------
// 2915     #if defined( RTR_NWK )
// 2916     //----------------------------------------------------------------
// 2917     NLME_LeaveRsp_t rsp;
// 2918     rsp.rejoin         = ind->rejoin;
        MOV	A,R6
        ADD	A,#0xc
        LCALL	??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_69:
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 2919     rsp.removeChildren = ind->removeChildren;
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_70:
        MOVX	A,@DPTR
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
// 2920     NLME_LeaveRsp( &rsp );
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(NLME_LeaveRsp & 0xffff)
        MOV	A,#((NLME_LeaveRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??ZDO_LeaveInd_1
// 2921     //----------------------------------------------------------------
// 2922     #endif
// 2923     //----------------------------------------------------------------
// 2924 
// 2925     // Prepare to leave with reset
// 2926     ZDApp_LeaveReset( ind->rejoin );
// 2927   }
// 2928   else
// 2929   {
// 2930     leave = FALSE;
// 2931 
// 2932     // Check if this device needs to leave as a child or descendent
// 2933     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        MOV	DPL,R6
        MOV	DPH,R7
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        MOV	DPTR,#(NLME_GetCoordShortAddr & 0xffff)
        MOV	A,#((NLME_GetCoordShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        MOVX	A,@DPTR
        XRL	A,?V0 + 0
        JNZ	??ZDO_LeaveInd_2
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,?V0 + 1
??ZDO_LeaveInd_2:
        JNZ	??ZDO_LeaveInd_3
// 2934     {
// 2935       if ( ( ind->removeChildren == TRUE               ) ||
// 2936            ( ZDO_Config_Node_Descriptor.LogicalType ==
// 2937              NODETYPE_DEVICE                           )    )
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_71:
        MOVX	A,@DPTR
        XRL	A,#0x1
        JZ	??ZDO_LeaveInd_1
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        ANL	A,#0x7
        XRL	A,#0x2
        JNZ	??ZDO_LeaveInd_3
// 2938       {
// 2939         leave = TRUE;
// 2940       }
// 2941     }
// 2942     else if ( ind->removeChildren == TRUE )
// 2943     {
// 2944       // Check NWK address allocation algorithm
// 2945       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 2946     }
// 2947 
// 2948     if ( leave == TRUE )
// 2949     {
// 2950       // Prepare to leave with reset
// 2951       ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV	A,R6
        ADD	A,#0xc
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_59:
        SJMP	??CrossCallReturnLabel_25
// 2952     }
// 2953     else
// 2954     {
// 2955       // Remove device address(optionally descendents) from data
// 2956       ZDApp_LeaveUpdate( ind->srcAddr,
// 2957                          ind->extAddr,
// 2958                          ind->removeChildren );
??ZDO_LeaveInd_3:
        ; Setup parameters for call to function NLME_RemoveChild
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2959     }
// 2960   }
// 2961 }
        LJMP	?Subroutine40 & 0xFFFF
        CFI EndBlock cfiBlock221

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond222 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker224 Using cfiCommon1
        CFI (cfiPicker224) NoFunction
        CFI (cfiPicker224) Picker
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(ZDApp_LeaveReset & 0xffff)
        MOV	A,#((ZDApp_LeaveReset >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiPicker224

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond225 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker227 Using cfiCommon1
        CFI (cfiPicker227) NoFunction
        CFI (cfiPicker227) Picker
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	A,R6
        ADD	A,#0x2
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(NLME_RemoveChild & 0xffff)
        MOV	A,#((NLME_RemoveChild >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiPicker227
// 2962 
// 2963 /*********************************************************************
// 2964  * @fn          ZDO_SyncIndicationCB
// 2965  *
// 2966  * @brief       This function allows the next higher layer of a
// 2967  *              coordinator to be notified of a loss of synchronization
// 2968  *                          with the parent/child device.
// 2969  *
// 2970  * @param       type: 0 - child; 1 - parent
// 2971  *
// 2972  *
// 2973  * @return      none
// 2974  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2975 void ZDO_SyncIndicationCB( byte type, uint16 shortAddr )
ZDO_SyncIndicationCB:
        CFI Block cfiBlock228 Using cfiCommon0
        CFI Function ZDO_SyncIndicationCB
// 2976 {
        ; Saved register size: 0
        ; Auto size: 0
// 2977 
// 2978 #if !defined ( RTR_NWK )
// 2979     if ( type == 1 )
// 2980     {
// 2981       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
// 2982     }
// 2983 #endif
// 2984   return;
        LJMP	?BRET
        CFI EndBlock cfiBlock228
// 2985 }
// 2986 
// 2987 /*********************************************************************
// 2988  * @fn          ZDO_PollConfirmCB
// 2989  *
// 2990  * @brief       This function allows the next higher layer to be
// 2991  *              notified of a Poll Confirm.
// 2992  *
// 2993  * @param       none
// 2994  *
// 2995  * @return      none
// 2996  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2997 void ZDO_PollConfirmCB( byte status )
ZDO_PollConfirmCB:
        CFI Block cfiBlock229 Using cfiCommon0
        CFI Function ZDO_PollConfirmCB
// 2998 {
        ; Saved register size: 0
        ; Auto size: 0
// 2999   return;
        LJMP	?BRET
        CFI EndBlock cfiBlock229
// 3000 }
// 3001 
// 3002 /******************************************************************************
// 3003  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 3004  *
// 3005  * @brief       Stub routine implemented by NHLE. NHLE should call
// 3006  *              <AddrMgrWriteNV> when appropriate.
// 3007  *
// 3008  * @param       none
// 3009  *
// 3010  * @return      none
// 3011  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3012 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
        CFI Block cfiBlock230 Using cfiCommon0
        CFI Function AddrMgrWriteNVRequest
// 3013 {
        FUNCALL AddrMgrWriteNVRequest, osal_get_timeoutEx
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL AddrMgrWriteNVRequest, osal_start_timerEx
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3014   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV	R2,#0x0
        MOV	R3,#0x2
        MOV	DPTR,#ZDAppTaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_get_timeoutEx & 0xffff)
        MOV	A,#((osal_get_timeoutEx >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        JNZ	??AddrMgrWriteNVRequest_0
        MOV	A,R3
??AddrMgrWriteNVRequest_0:
        JNZ	??AddrMgrWriteNVRequest_1
// 3015   {
// 3016     // Trigger to save info into NV
// 3017     osal_start_timerEx( ZDAppTaskID,
// 3018                         ZDO_NWK_UPDATE_NV,
// 3019                         ZDAPP_UPDATE_NWK_NV_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV	R4,#0x64
        MOV	R5,#0x0
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 3020   }
// 3021 }
??AddrMgrWriteNVRequest_1:
        LJMP	??Subroutine40_1 & 0xFFFF
        CFI EndBlock cfiBlock230

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond231 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker233 Using cfiCommon1
        CFI (cfiPicker233) NoFunction
        CFI (cfiPicker233) Picker
        MOV	R4,#-0x18
        MOV	R5,#0x3
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond234) CFA_SP SP+0
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond235 Using cfiCommon0
        CFI (cfiCond235) NoFunction
        CFI (cfiCond235) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond235) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond235) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond235) CFA_SP SP+-5
??Subroutine7_0:
        MOV	R2,#0x0
        MOV	R3,#0x2
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond236) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond236) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond236) CFA_SP SP+-5
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond237) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond237) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond237) CFA_SP SP+-5
??Subroutine7_1:
        MOV	DPTR,#ZDAppTaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_start_timerEx & 0xffff)
        MOV	A,#((osal_start_timerEx >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiPicker233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
// 3022 
// 3023 /*********************************************************************
// 3024  * Call Back Functions from Security  - API
// 3025  */
// 3026 
// 3027 #if defined( ZDO_COORDINATOR )
// 3028  /*********************************************************************
// 3029  * @fn          ZDO_UpdateDeviceIndication
// 3030  *
// 3031  * @brief       This function notifies the "Trust Center" of a
// 3032  *              network when a device joins or leaves the network.
// 3033  *
// 3034  * @param       extAddr - pointer to 64 bit address of new device
// 3035  * @param       status  - 0 if a new device joined securely
// 3036  *                      - 1 if a new device joined un-securely
// 3037  *                      - 2 if a device left the network
// 3038  *
// 3039  * @return      true if newly joined device should be allowed to
// 3040  *                                              remain on network
// 3041  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3042 ZStatus_t ZDO_UpdateDeviceIndication( byte *extAddr, byte status )
ZDO_UpdateDeviceIndication:
// 3043 {
        ; Saved register size: 0
        ; Auto size: 0
// 3044 
// 3045 #if   ( SECURE != 0  )
// 3046   // can implement a network access policy based on the
// 3047   // IEEE address of newly joining devices...
// 3048 #endif  // Trust Center
// 3049 
// 3050   return ZSuccess;
        REQUIRE ?Subroutine39
        ; // Fall through to label ?Subroutine39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiBlock238 Using cfiCommon0
        CFI NoFunction
        MOV	R1,#0x0
        LJMP	?BRET
        CFI EndBlock cfiBlock238
// 3051 }
// 3052 #endif // ZDO
// 3053 
// 3054 /*********************************************************************
// 3055  * @fn          ZDApp_InMsgCB
// 3056  *
// 3057  * @brief       This function is called to pass up any message that is
// 3058  *              not yet supported.  This allows for the developer to
// 3059  *              support features themselves..
// 3060  *
// 3061  * @return      none
// 3062  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3063 void ZDApp_InMsgCB( byte TransSeq, zAddrType_t *srcAddr, byte wasBroadcast,
ZDApp_InMsgCB:
        CFI Block cfiBlock239 Using cfiCommon0
        CFI Function ZDApp_InMsgCB
// 3064                   cId_t clusterID, byte asduLen, byte *asdu, byte SecurityUse )
// 3065 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R5,A
// 3066   if ( clusterID & ZDO_RESPONSE_BIT )
        MOV	A,#-0x80
        ANL	A,R7
        MOV	?V0 + 1,A
        CLR	A
        JNZ	??ZDApp_InMsgCB_0
        MOV	A,?V0 + 1
??ZDApp_InMsgCB_0:
        JNZ	??ZDApp_InMsgCB_1
// 3067   {
// 3068     // Handle the response message
// 3069   }
// 3070   else
// 3071   {
// 3072     // Handle the request message by sending a generic "not supported".
// 3073     // End Device Announce doesn't have a response.
// 3074     if ( !wasBroadcast && clusterID != End_Device_annce )
        MOV	A,R4
        JNZ	??ZDApp_InMsgCB_1
        MOV	A,#0x13
        XRL	A,R6
        JNZ	??ZDApp_InMsgCB_2
        MOV	A,R7
??ZDApp_InMsgCB_2:
        JZ	??ZDApp_InMsgCB_1
// 3075     {
// 3076       ZDP_GenericRsp( TransSeq, srcAddr, ZDP_NOT_SUPPORTED, 0,
// 3077                       (uint16)(clusterID | ZDO_RESPONSE_BIT), SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV	A,R6
        MOV	?V0 + 0,A
        MOV	A,#-0x80
        ORL	A,R7
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	?V0 + 0,#0x0
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,#-0x7c
        MOV	DPTR,#(ZDP_GenericRsp & 0xffff)
        MOV	A,#((ZDP_GenericRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 3078     }
// 3079   }
// 3080 }
??ZDApp_InMsgCB_1:
        LJMP	??Subroutine40_1 & 0xFFFF
        CFI EndBlock cfiBlock239
// 3081 
// 3082 #if defined ( ZDO_MGMT_LQI_REQUEST )
// 3083 /*********************************************************************
// 3084  * @fn          ZDApp_MgmtLqiRspCB
// 3085  *
// 3086  * @brief       This function handles Management LQI response for the
// 3087  *              Device Object application.
// 3088  *
// 3089  * @param       Status - ZSuccess or other for failure
// 3090  * @param       NeighborLqiEntries - number of possible entries on
// 3091  *                       the device
// 3092  * @param       StartIndex - where this list start in possible entries
// 3093  * @param       NeighborLqiCount - number of entries in this list
// 3094  * @param       pList - pointer to the list of LQI items.
// 3095  * @param       SecurityUse -
// 3096  *
// 3097  * @return      none
// 3098  */
// 3099 void ZDApp_MgmtLqiRspCB( uint16 SrcAddr, byte Status, byte NeighborLqiEntries,
// 3100                          byte StartIndex, byte NeighborLqiCount,
// 3101                          neighborLqiItem_t *pList )
// 3102 {
// 3103   byte x;
// 3104 
// 3105 #if defined ( MT_ZDO_FUNC )
// 3106   /* First check if MT has subscribed for this callback. If so , pass it as
// 3107   a event to MonitorTest and return control to calling function after that */
// 3108   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_LQI_RSP )
// 3109   {
// 3110     zdo_MTCB_MgmtLqiRspCB( SrcAddr, Status, NeighborLqiEntries, StartIndex,
// 3111                                         NeighborLqiCount, pList );
// 3112     return;
// 3113   }
// 3114 #endif  //MT_ZDO_FUNC
// 3115 
// 3116   if ( Status == ZSuccess )
// 3117   {
// 3118     for ( x = 0; x < NeighborLqiCount; x++, pList++ )
// 3119     {
// 3120       // Do something with the results
// 3121     }
// 3122   }
// 3123   else
// 3124   {
// 3125     // Error
// 3126   }
// 3127 }
// 3128 #endif // ZDO_MGMT_LQI_REQUEST
// 3129 
// 3130 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
// 3131 /*********************************************************************
// 3132  * @fn          ZDApp_MgmtNwkDiscRspCB
// 3133  *
// 3134  * @brief       This function handles Management Network Discovery
// 3135  *              response for the Device Object application.
// 3136  *
// 3137  * @param       SrcAddr - source of the message
// 3138  * @param       Status - ZSuccess or other for failure
// 3139  * @param       NetworkCount - number of possible entries on
// 3140  *                       the device
// 3141  * @param       StartIndex - where this list start in possible entries
// 3142  * @param       networkListCount - number of entries in this list
// 3143  * @param       pList - pointer to the list of Network Discover items.
// 3144  * @param       SecurityUse -
// 3145  *
// 3146  * @return      none
// 3147  */
// 3148 void ZDApp_MgmtNwkDiscRspCB( uint16 SrcAddr, byte Status, byte NetworkCount,
// 3149                              byte StartIndex, byte networkListCount,
// 3150                              mgmtNwkDiscItem_t *pList )
// 3151 {
// 3152   byte x;
// 3153 
// 3154 #if defined ( MT_ZDO_FUNC )
// 3155   /* First check if MT has subscribed for this callback. If so , pass it as
// 3156   a event to MonitorTest and return control to calling function after that */
// 3157   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_NWKDISC_RSP )
// 3158   {
// 3159     zdo_MTCB_MgmtNwkDiscRspCB( SrcAddr, Status, NetworkCount, StartIndex,
// 3160                                         networkListCount, pList );
// 3161     return;
// 3162   }
// 3163 #endif  //MT_ZDO_FUNC
// 3164 
// 3165   if ( Status == ZSuccess )
// 3166   {
// 3167     for ( x = 0; x < networkListCount; x++, pList++ )
// 3168     {
// 3169       // Do something with the results
// 3170     }
// 3171   }
// 3172   else
// 3173   {
// 3174     // Error
// 3175   }
// 3176 }
// 3177 #endif // ZDO_MGMT_NWKDISC_REQUEST
// 3178 
// 3179 #if defined ( ZDO_MGMT_RTG_REQUEST )
// 3180 /*********************************************************************
// 3181  * @fn          ZDApp_MgmtRtgRspCB
// 3182  *
// 3183  * @brief       This function handles Management Routing response for the
// 3184  *              Device Object application.
// 3185  *
// 3186  * @param       SrcAddr - source of the message
// 3187  * @param       Status - ZSuccess or other for failure
// 3188  * @param       rtgCount - number of possible entries on
// 3189  *                       the device
// 3190  * @param       StartIndex - where this list start in possible entries
// 3191  * @param       rtgCount - number of entries in this list
// 3192  * @param       pList - pointer to the list of Network Discover items.
// 3193  * @param       SecurityUse -
// 3194  *
// 3195  * @return      none
// 3196  */
// 3197 void ZDApp_MgmtRtgRspCB( uint16 SrcAddr, byte Status, byte rtgCount,
// 3198                          byte StartIndex, byte rtgListCount,
// 3199                          rtgItem_t *pList )
// 3200 {
// 3201   byte x;
// 3202 
// 3203 #if defined ( MT_ZDO_FUNC )
// 3204   /* First check if MT has subscribed for this callback. If so , pass it as
// 3205   a event to MonitorTest and return control to calling function after that */
// 3206   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_RTG_RSP )
// 3207   {
// 3208     zdo_MTCB_MgmtRtgRspCB( SrcAddr, Status, rtgCount, StartIndex,
// 3209                                                         rtgListCount, pList );
// 3210     return;
// 3211   }
// 3212 #endif  //MT_ZDO_FUNC
// 3213 
// 3214   if ( Status == ZSuccess )
// 3215   {
// 3216     for ( x = 0; x < rtgListCount; x++, pList++ )
// 3217     {
// 3218       // Do something with the results
// 3219     }
// 3220   }
// 3221   else
// 3222   {
// 3223     // Error
// 3224   }
// 3225 }
// 3226 #endif // ZDO_MGMT_RTG_REQUEST
// 3227 
// 3228 #if defined ( ZDO_MGMT_BIND_REQUEST )
// 3229 /*********************************************************************
// 3230  * @fn          ZDApp_MgmtBindRspCB
// 3231  *
// 3232  * @brief       This function handles Management Binding response for the
// 3233  *              Device Object application.
// 3234  *
// 3235  * @param       SrcAddr - source of the message
// 3236  * @param       Status - ZSuccess or other for failure
// 3237  * @param       BindingCount - number of possible entries on
// 3238  *                       the device
// 3239  * @param       StartIndex - where this list start in possible entries
// 3240  * @param       BindingListCount - number of entries in this list
// 3241  * @param       pList - pointer to the list of Network Discover items.
// 3242  * @param       SecurityUse -
// 3243  *
// 3244  * @return      none
// 3245  */
// 3246 void ZDApp_MgmtBindRspCB( uint16 SrcAddr, byte Status, byte BindingCount,
// 3247                          byte StartIndex, byte BindingListCount,
// 3248                          apsBindingItem_t *pList )
// 3249 {
// 3250   byte x;
// 3251 
// 3252 #if defined ( MT_ZDO_FUNC )
// 3253   /* First check if MT has subscribed for this callback. If so , pass it as
// 3254   a event to MonitorTest and return control to calling function after that */
// 3255   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_BIND_RSP )
// 3256   {
// 3257     zdo_MTCB_MgmtBindRspCB( SrcAddr, Status, BindingCount, StartIndex,
// 3258                                                   BindingListCount, pList );
// 3259     return;
// 3260   }
// 3261 #endif  //MT_ZDO_FUNC
// 3262 
// 3263   if ( Status == ZSuccess )
// 3264   {
// 3265     for ( x = 0; x < BindingListCount; x++, pList++ )
// 3266     {
// 3267       // Do something with the results
// 3268     }
// 3269   }
// 3270   else
// 3271   {
// 3272     // Error
// 3273   }
// 3274 }
// 3275 #endif // ZDO_MGMT_BIND_REQUEST
// 3276 
// 3277 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
// 3278 /*********************************************************************
// 3279  * @fn          ZDApp_MgmtDirectJoinRspCB
// 3280  *
// 3281  * @brief       This function handles Management Direct Join response for the
// 3282  *              Device Object application.
// 3283  *
// 3284  * @param       SrcAddr - source of the message
// 3285  * @param       Status - ZSuccess or other for failure
// 3286  * @param       SecurityUse -
// 3287  *
// 3288  * @return      none
// 3289  */
// 3290 void ZDApp_MgmtDirectJoinRspCB( uint16 SrcAddr, byte Status, byte SecurityUse )
// 3291 {
// 3292 #if defined ( MT_ZDO_FUNC )
// 3293   /* First check if MT has subscribed for this callback. If so , pass it as
// 3294   a event to MonitorTest and return control to calling function after that */
// 3295   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_DIRECT_JOIN_RSP )
// 3296   {
// 3297     zdo_MTCB_MgmtDirectJoinRspCB( SrcAddr, Status, SecurityUse );
// 3298     return;
// 3299   }
// 3300 #endif  //MT_ZDO_FUNC
// 3301 
// 3302   if ( Status == ZSuccess )
// 3303   {
// 3304     // Do something with the results
// 3305   }
// 3306   else
// 3307   {
// 3308     // Error
// 3309   }
// 3310 }
// 3311 #endif // ZDO_MGMT_JOINDIRECT_REQUEST
// 3312 
// 3313 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
// 3314 /*********************************************************************
// 3315  * @fn          ZDApp_MgmtLeaveRspCB
// 3316  *
// 3317  * @brief       This function handles Management Leave response for the
// 3318  *              Device Object application.
// 3319  *
// 3320  * @param       SrcAddr - source of the message
// 3321  * @param       Status - ZSuccess or other for failure
// 3322  * @param       SecurityUse -
// 3323  *
// 3324  * @return      none
// 3325  */
// 3326 void ZDApp_MgmtLeaveRspCB( uint16 SrcAddr, byte Status, byte SecurityUse )
// 3327 {
// 3328 #if defined ( MT_ZDO_FUNC )
// 3329   /* First check if MT has subscribed for this callback. If so , pass it as
// 3330   a event to MonitorTest and return control to calling function after that */
// 3331   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_LEAVE_RSP )
// 3332   {
// 3333     zdo_MTCB_MgmtLeaveRspCB( SrcAddr, Status, SecurityUse );
// 3334     return;
// 3335   }
// 3336 #endif  //MT_ZDO_FUNC
// 3337 
// 3338   if ( Status == ZSuccess )
// 3339   {
// 3340     // Do something with the results
// 3341   }
// 3342   else
// 3343   {
// 3344     // Error
// 3345   }
// 3346 }
// 3347 #endif // ZDO_MGMT_LEAVE_REQUEST
// 3348 
// 3349 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && !defined( REFLECTOR )
// 3350 /*********************************************************************
// 3351  * @fn          ZDApp_MgmtBindReqCB
// 3352  *
// 3353  * @brief       This function finishes the processing of the Management
// 3354  *              Bind Request and generates the response.
// 3355  *
// 3356  * @param       none
// 3357  *
// 3358  * @return      none
// 3359  */
// 3360 void ZDApp_MgmtBindReqCB( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
// 3361 {
// 3362   ZDO_MgmtBindReq_t *pBindReq;
// 3363   osal_event_hdr_t *msgPtr;
// 3364 
// 3365   if ( ZDApp_MgmtBindReq_TaskID )
// 3366   {
// 3367     // Send the IEEE Address response structure to the registered task
// 3368     msgPtr = (osal_event_hdr_t *)osal_msg_allocate( sizeof(osal_event_hdr_t) + sizeof( ZDO_MgmtBindReq_t ) );
// 3369     if ( msgPtr )
// 3370     {
// 3371       msgPtr->event = ZDO_MGMT_BIND_REQ;
// 3372       pBindReq = (ZDO_MgmtBindReq_t *)(msgPtr + 1);
// 3373 
// 3374       // Build the structure
// 3375       pBindReq->hdr.srcAddr = SrcAddr->addr.shortAddr;
// 3376       pBindReq->hdr.transSeq = TransSeq;
// 3377       pBindReq->hdr.SecurityUse = SecurityUse;
// 3378 
// 3379       pBindReq->startIndex = StartIndex;
// 3380       osal_msg_send( ZDApp_MgmtBindReq_TaskID, (uint8 *)msgPtr );
// 3381     }
// 3382   }
// 3383 }
// 3384 #endif // ZDO_MGMT_BIND_RESPONSE && !REFLECTOR
// 3385 
// 3386 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
// 3387 
// 3388 /*********************************************************************
// 3389  * @fn          ZDApp_MgmtPermitJoinRspCB
// 3390  *
// 3391  * @brief       This function handles Management permit join response
// 3392  *              for the Device Object application.
// 3393  *
// 3394  * @param       SrcAddr - source of the message
// 3395  * @param       Status - ZSuccess or other for failure
// 3396  * @param       SecurityUse -
// 3397  *
// 3398  * @return      none
// 3399  */
// 3400 void ZDApp_MgmtPermitJoinRspCB( uint16 SrcAddr, byte Status,
// 3401                                 byte SecurityUse )
// 3402 {
// 3403 #if defined ( MT_ZDO_FUNC )
// 3404   /* First check if MT has subscribed for this callback. If so , pass it as
// 3405   a event to MonitorTest and return control to calling function after that */
// 3406   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_PERMIT_JOIN_RSP )
// 3407   {
// 3408     zdo_MTCB_MgmtPermitJoinRspCB( SrcAddr, Status, SecurityUse );
// 3409     return;
// 3410   }
// 3411 #endif  //MT_ZDO_FUNC
// 3412 
// 3413   if ( Status == ZSuccess )
// 3414   {
// 3415     // Do something with the results
// 3416   }
// 3417   else
// 3418   {
// 3419     // Error
// 3420   }
// 3421 }
// 3422 #endif // ZDO_MGMT_LEAVE_REQUEST
// 3423 
// 3424 #if defined ( ZDO_USERDESC_REQUEST )
// 3425 /*********************************************************************
// 3426  * @fn          ZDApp_UserDescRspCB
// 3427  *
// 3428  * @brief       This function handles User Descriptor response for the
// 3429  *              Device Object application.
// 3430  *
// 3431  * @param       SrcAddr - source of the message
// 3432  * @param       Status - ZSuccess or other for failure
// 3433  * @param       nwkAddrOfInterest - network address of remote device
// 3434  * @param       userDescLen - length of user descriptor
// 3435  * @param       userDesc - user descriptor byte string
// 3436  * @param       SecurityUse -
// 3437  *
// 3438  * @return      none
// 3439  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3440 void ZDApp_UserDescRspCB( uint16 SrcAddr, byte status, uint16 nwkAddrOfInterest,
ZDApp_UserDescRspCB:
        CFI Block cfiBlock240 Using cfiCommon0
        CFI Function ZDApp_UserDescRspCB
// 3441                           byte userDescLen, byte *userDesc, byte SecurityUse )
// 3442 {
        FUNCALL ZDApp_UserDescRspCB, zdo_MTCB_UserDescRspCB
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R6,A
        MOV	A,#0xf
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV	A,#0x11
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R7,A
// 3443 #if defined ( MT_ZDO_FUNC )
// 3444   /* First check if MT has subscribed for this callback. If so , pass it as
// 3445   a event to MonitorTest and return control to calling function after that */
// 3446   if ( _zdoCallbackSub & CB_ID_ZDO_USER_DESC_RSP )
        MOV	DPTR,#_zdoCallbackSub
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,#-0x80
        ANL	A,?V0 + 1
        MOV	?V0 + 1,A
        CLR	A
        JNZ	??ZDApp_UserDescRspCB_0
        MOV	A,?V0 + 1
??ZDApp_UserDescRspCB_0:
        JZ	??ZDApp_UserDescRspCB_1
// 3447   {
// 3448     zdo_MTCB_UserDescRspCB( SrcAddr, status, nwkAddrOfInterest,
// 3449                             userDescLen, userDesc, SecurityUse );
        ; Setup parameters for call to function zdo_MTCB_UserDescRspCB
        MOV	A,R7
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	A,R6
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R2,?V0 + 4
        MOV	R3,?V0 + 5
        MOV	DPTR,#(zdo_MTCB_UserDescRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_UserDescRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
// 3450     return;
??ZDApp_UserDescRspCB_1:
        LJMP	?Subroutine43 & 0xFFFF
        CFI EndBlock cfiBlock240
// 3451   }
// 3452 #endif  //MT_ZDO_FUNC
// 3453 
// 3454   if ( status == ZSuccess )
// 3455   {
// 3456     // Do something with the results
// 3457   }
// 3458   else
// 3459   {
// 3460     // Error
// 3461   }
// 3462 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond241 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker243 Using cfiCommon1
        CFI (cfiPicker243) NoFunction
        CFI (cfiPicker243) Picker
        MOV	DPL,R4
        MOV	DPH,R5
        CFI Block cfiCond244 Using cfiCommon0
        CFI (cfiCond244) NoFunction
        CFI (cfiCond244) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond244) CFA_SP SP+0
        CFI (cfiCond244) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 27)
??Subroutine15_0:
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        RET
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiPicker243
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
// 3463 #endif
// 3464 
// 3465 #if defined ( ZDO_USERDESCSET_REQUEST )
// 3466 /*********************************************************************
// 3467  * @fn          ZDApp_UserDescConfCB
// 3468  *
// 3469  * @brief       This function handles Management Direct Join response for the
// 3470  *              Device Object application.
// 3471  *
// 3472  * @param       SrcAddr - source of the message
// 3473  * @param       Status - ZSuccess or other for failure
// 3474  * @param       SecurityUse -
// 3475  *
// 3476  * @return      none
// 3477  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3478 void ZDApp_UserDescConfCB( uint16 SrcAddr, byte status, byte SecurityUse )
ZDApp_UserDescConfCB:
        CFI Block cfiBlock248 Using cfiCommon0
        CFI Function ZDApp_UserDescConfCB
// 3479 {
        FUNCALL ZDApp_UserDescConfCB, zdo_MTCB_UserDescConfCB
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3480 #if defined ( MT_ZDO_FUNC )
// 3481   /* First check if MT has subscribed for this callback. If so , pass it as
// 3482   a event to MonitorTest and return control to calling function after that */
// 3483   if ( _zdoCallbackSub & CB_ID_ZDO_USER_DESC_CONF )
        MOV	DPTR,#__Constant_10000
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	DPH,#((_zdoCallbackSub >> 8) & 0xff)
        MOV	DPL,#(_zdoCallbackSub & 0xff)
        MOV	R0,#?V0 + 0
        LCALL	?L_AND_X
        MOV	DPTR,#__Constant_0
        MOV	R0,#?V0 + 0
        LCALL	?L_EQ_X
        JZ	??ZDApp_UserDescConfCB_0
// 3484   {
// 3485     zdo_MTCB_UserDescConfCB( SrcAddr, status, SecurityUse );
        ; Setup parameters for call to function zdo_MTCB_UserDescConfCB
        MOV	DPTR,#(zdo_MTCB_UserDescConfCB & 0xffff)
        MOV	A,#((zdo_MTCB_UserDescConfCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 3486     return;
??ZDApp_UserDescConfCB_0:
        LJMP	??Subroutine45_0 & 0xFFFF
        CFI EndBlock cfiBlock248
// 3487   }
// 3488 #endif  //MT_ZDO_FUNC
// 3489 
// 3490   if ( status == ZSuccess )
// 3491   {
// 3492     // Do something with the results
// 3493   }
// 3494   else
// 3495   {
// 3496     // Error
// 3497   }
// 3498 }
// 3499 #endif
// 3500 
// 3501 #if defined ( ZDO_SERVERDISC_REQUEST )
// 3502 /*********************************************************************
// 3503  * @fn          ZDApp_ServerDiscRspCB
// 3504  *
// 3505  * @brief       Handle the Server_Discovery_rsp response.
// 3506  *
// 3507  * @param       srcAddr     - Source Address of the message.
// 3508  * @param       status      - ZSuccess.
// 3509  * @param       serverMask  - Bit mask of services matching the req serverMask.
// 3510  * @param       securityUse -
// 3511  *
// 3512  * @return      none
// 3513  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3514 void ZDApp_ServerDiscRspCB( uint16 srcAddr, byte status,
ZDApp_ServerDiscRspCB:
        CFI Block cfiBlock249 Using cfiCommon0
        CFI Function ZDApp_ServerDiscRspCB
// 3515                             uint16 serverMask, byte securityUse )
// 3516 {
        FUNCALL ZDApp_ServerDiscRspCB, zdo_MTCB_ServerDiscRspCB
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R6,A
// 3517 #if defined ( MT_ZDO_FUNC )
// 3518   if ( _zdoCallbackSub & CB_ID_ZDO_SERVERDISC_RSP )
        MOV	DPTR,#__Constant_80000
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	DPH,#((_zdoCallbackSub >> 8) & 0xff)
        MOV	DPL,#(_zdoCallbackSub & 0xff)
        MOV	R0,#?V0 + 0
        LCALL	?L_AND_X
        MOV	DPTR,#__Constant_0
        MOV	R0,#?V0 + 0
        LCALL	?L_EQ_X
        JZ	??ZDApp_ServerDiscRspCB_0
// 3519   {
// 3520     zdo_MTCB_ServerDiscRspCB( srcAddr, status, serverMask, securityUse );
        ; Setup parameters for call to function zdo_MTCB_ServerDiscRspCB
        MOV	A,R6
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	DPTR,#(zdo_MTCB_ServerDiscRspCB & 0xffff)
        MOV	A,#((zdo_MTCB_ServerDiscRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 3521     return;
??ZDApp_ServerDiscRspCB_0:
        LJMP	??Subroutine45_0 & 0xFFFF
        CFI EndBlock cfiBlock249
// 3522   }
// 3523 #endif
// 3524 
// 3525   if ( status == ZSuccess )
// 3526   {
// 3527     // Do something with the results.
// 3528   }
// 3529   else
// 3530   {
// 3531     // Error
// 3532   }
// 3533 }
// 3534 #endif
// 3535 
// 3536 /*********************************************************************
// 3537  * @fn      ZDApp_EndDeviceAnnounceCB()
// 3538  *
// 3539  * @brief   Received an End Device Announce.
// 3540  *
// 3541  * @param   SrcAddr - Source of the message
// 3542  * @param   nwkAddr - short address of the new device
// 3543  * @param   extAddr - IEEE address of the new device
// 3544  * @param   capabilities - device capabilities.  This field is only
// 3545  *             populated in a v1.1 network so use the following before
// 3546  *             using it:
// 3547  *                  if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
// 3548  *
// 3549  * @return  none
// 3550  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3551 void ZDApp_EndDeviceAnnounceCB( uint16 SrcAddr, uint16 nwkAddr, uint8 *extAddr,
ZDApp_EndDeviceAnnounceCB:
        CFI Block cfiBlock250 Using cfiCommon0
        CFI Function ZDApp_EndDeviceAnnounceCB
// 3552                                uint8 capabilities )
// 3553 {
        FUNCALL ZDApp_EndDeviceAnnounceCB, osal_cpyExtAddr
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDApp_EndDeviceAnnounceCB, ZDApp_SendMsg
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 15
        MOV	A,#-0xf
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,R1
        MOV	R6,A
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine34 & 0xFFFF
// 3554   ZDO_EndDeviceAnnounce_t Announce;
// 3555 
// 3556   // If it interests you - put your own code here.
// 3557 
// 3558   if ( ZDApp_EndDeviceAnnounce_TaskID )
??CrossCallReturnLabel_102:
        MOV	DPTR,#??ZDApp_EndDeviceAnnounce_TaskID
        MOVX	A,@DPTR
        JZ	??ZDApp_EndDeviceAnnounceCB_0
// 3559   {
// 3560     // Build the structure
// 3561     Announce.srcAddr = SrcAddr;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
// 3562     Announce.nwkAddr = nwkAddr;
??CrossCallReturnLabel_6:
        LCALL	?XSTACK_DISP0_8
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
// 3563     osal_cpyExtAddr( Announce.extAddr, extAddr );
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	A,R0
        MOV	R4,A
        MOV	A,R1
        MOV	R5,A
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 3564     Announce.capabilities = capabilities;
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOV	A,R6
        LCALL	?Subroutine27 & 0xFFFF
// 3565 
// 3566     ZDApp_SendMsg( ZDApp_EndDeviceAnnounce_TaskID, ZDO_END_DEVICE_ANNOUNCE,
// 3567                   sizeof( ZDO_EndDeviceAnnounce_t ), (uint8 *)&Announce );
??CrossCallReturnLabel_80:
        MOV	R3,#0xf
        MOV	R2,#-0x2b
        MOV	DPTR,#??ZDApp_EndDeviceAnnounce_TaskID
        LCALL	??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_116:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 3568   }
// 3569 }
??ZDApp_EndDeviceAnnounceCB_0:
        MOV	A,#0xf
        LJMP	?Subroutine41 & 0xFFFF
        CFI EndBlock cfiBlock250

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond251 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_1
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_0
        CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond253) CFA_SP SP+0
        CFI (cfiCond253) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker254 Using cfiCommon1
        CFI (cfiPicker254) NoFunction
        CFI (cfiPicker254) Picker
        LCALL	?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_109:
        MOV	R4,DPL
        MOV	R5,DPH
        RET
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiPicker254
// 3570 
// 3571 /*********************************************************************
// 3572  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 3573  *
// 3574  * @brief   Changes the Match Descriptor Response permission.
// 3575  *
// 3576  * @param   endpoint - endpoint to allow responses
// 3577  * @param   action - true to allow responses, false to not
// 3578  *
// 3579  * @return  none
// 3580  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3581 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
        CFI Block cfiBlock255 Using cfiCommon0
        CFI Function ZDApp_ChangeMatchDescRespPermission
// 3582 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3583   // Store the action
// 3584   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        MOV	DPTR,#(afSetMatch & 0xffff)
        MOV	A,#((afSetMatch >> 16) & 0xff)
        LJMP	??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock255
// 3585 }
// 3586 
// 3587 /*********************************************************************
// 3588  * @fn      ZDApp_NetworkInit()
// 3589  *
// 3590  * @brief   Used to start the network joining process
// 3591  *
// 3592  * @param   delay - mSec delay to wait before starting
// 3593  *
// 3594  * @return  none
// 3595  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3596 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
        CFI Block cfiBlock256 Using cfiCommon0
        CFI Function ZDApp_NetworkInit
// 3597 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3598   if ( delay )
        MOV	A,R2
        JNZ	??ZDApp_NetworkInit_0
        MOV	A,R3
??ZDApp_NetworkInit_0:
        JZ	??ZDApp_NetworkInit_1
// 3599   {
// 3600     // Wait awhile before starting the device
// 3601     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,#0x1
        MOV	R3,#0x0
        LCALL	??Subroutine7_1 & 0xFFFF
??CrossCallReturnLabel_21:
        SJMP	??CrossCallReturnLabel_118
// 3602   }
// 3603   else
// 3604   {
// 3605     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_1:
        ; Setup parameters for call to function osal_set_event
        MOV	R2,#0x1
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_118:
        LJMP	??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock256
// 3606   }
// 3607 }
// 3608 
// 3609 #if defined ( ZDO_IEEEADDR_REQUEST )
// 3610 /*********************************************************************
// 3611  * @fn      ZDApp_RegisterForIEEEAddrRsp()
// 3612  *
// 3613  * @brief   Register to receive IEEE Addr Response messages
// 3614  *
// 3615  * @param   TaskID - ID of task to send message
// 3616  *
// 3617  * @return  none
// 3618  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3619 void ZDApp_RegisterForIEEEAddrRsp( byte TaskID )
ZDApp_RegisterForIEEEAddrRsp:
        CFI Block cfiBlock257 Using cfiCommon0
        CFI Function ZDApp_RegisterForIEEEAddrRsp
// 3620 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3621   ZDApp_IEEEAddrRsp_TaskID = TaskID;    // Only 1 task at a time
        MOV	A,R1
        MOV	DPTR,#??ZDApp_IEEEAddrRsp_TaskID
        MOVX	@DPTR,A
// 3622 }
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock257
// 3623 #endif // defined ( ZDO_IEEEADDR_REQUEST )
// 3624 
// 3625 #if defined ( ZDO_NWKADDR_REQUEST )
// 3626 /*********************************************************************
// 3627  * @fn      ZDApp_RegisterForNwkAddrRsp()
// 3628  *
// 3629  * @brief   Register to receive NWK Addr Response messages
// 3630  *
// 3631  * @param   TaskID - ID of task to send message
// 3632  *
// 3633  * @return  none
// 3634  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3635 void ZDApp_RegisterForNwkAddrRsp( byte TaskID )
ZDApp_RegisterForNwkAddrRsp:
        CFI Block cfiBlock258 Using cfiCommon0
        CFI Function ZDApp_RegisterForNwkAddrRsp
// 3636 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3637   ZDApp_NwkAddrRsp_TaskID = TaskID;    // Only 1 task at a time
        MOV	A,R1
        MOV	DPTR,#??ZDApp_NwkAddrRsp_TaskID
        MOVX	@DPTR,A
// 3638 }
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock258
// 3639 #endif // defined ( ZDO_NWKADDR_REQUEST )
// 3640 
// 3641 /*********************************************************************
// 3642  * @fn      ZDApp_RegisterForMatchDescRsp()
// 3643  *
// 3644  * @brief   Register to receive Match Descriptor Response messages
// 3645  *
// 3646  * @param   TaskID - ID of task to send message
// 3647  *
// 3648  * @return  none
// 3649  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3650 void ZDApp_RegisterForMatchDescRsp( byte TaskID )
ZDApp_RegisterForMatchDescRsp:
        CFI Block cfiBlock259 Using cfiCommon0
        CFI Function ZDApp_RegisterForMatchDescRsp
// 3651 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3652   ZDApp_MatchDescRsp_TaskID = TaskID;    // Only 1 task at a time
        MOV	A,R1
        MOV	DPTR,#??ZDApp_MatchDescRsp_TaskID
        MOVX	@DPTR,A
// 3653 }
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock259
// 3654 
// 3655 /*********************************************************************
// 3656  * @fn      ZDApp_RegisterForEndDeviceAnnounce()
// 3657  *
// 3658  * @brief   Register to receive End Device Announce messages
// 3659  *
// 3660  * @param   TaskID - ID of task to send message
// 3661  *
// 3662  * @return  none
// 3663  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3664 void ZDApp_RegisterForEndDeviceAnnounce( byte TaskID )
ZDApp_RegisterForEndDeviceAnnounce:
        CFI Block cfiBlock260 Using cfiCommon0
        CFI Function ZDApp_RegisterForEndDeviceAnnounce
// 3665 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3666   ZDApp_EndDeviceAnnounce_TaskID = TaskID;    // Only 1 task at a time
        MOV	A,R1
        MOV	DPTR,#??ZDApp_EndDeviceAnnounce_TaskID
        MOVX	@DPTR,A
// 3667 }
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock260
// 3668 
// 3669 #if defined ( ZDO_BIND_UNBIND_REQUEST )
// 3670 /*********************************************************************
// 3671  * @fn      ZDApp_RegisterForBindRsp()
// 3672  *
// 3673  * @brief   Register to receive Bind_rsp and Unbind_rsp messages
// 3674  *
// 3675  * @param   TaskID - ID of task to send message
// 3676  *
// 3677  * @return  none
// 3678  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3679 void ZDApp_RegisterForBindRsp( byte TaskID )
ZDApp_RegisterForBindRsp:
        CFI Block cfiBlock261 Using cfiCommon0
        CFI Function ZDApp_RegisterForBindRsp
// 3680 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3681   ZDApp_BindUnbindRsp_TaskID = TaskID;    // Only 1 task at a time
        MOV	A,R1
        MOV	DPTR,#??ZDApp_BindUnbindRsp_TaskID
        MOVX	@DPTR,A
// 3682 }
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock261
// 3683 #endif // ZDO_BIND_UNBIND_REQUEST
// 3684 
// 3685 #if defined ( ZDO_BIND_UNBIND_RESPONSE ) && !defined ( REFLECTOR )
// 3686 /*********************************************************************
// 3687  * @fn      ZDApp_RegisterForBindReq()
// 3688  *
// 3689  * @brief   Register to receive Bind and Unbind Request messages
// 3690  *
// 3691  * @param   TaskID - ID of task to send message
// 3692  *
// 3693  * @return  none
// 3694  */
// 3695 void ZDApp_RegisterForBindReq( byte TaskID )
// 3696 {
// 3697   ZDApp_BindReq_TaskID = TaskID;
// 3698 }
// 3699 #endif
// 3700 
// 3701 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && !defined ( REFLECTOR )
// 3702 /*********************************************************************
// 3703  * @fn      ZDApp_RegisterForMgmtBindReq()
// 3704  *
// 3705  * @brief   Register to receive Mgmt Bind Request messages
// 3706  *
// 3707  * @param   TaskID - ID of task to send message
// 3708  *
// 3709  * @return  none
// 3710  */
// 3711 void ZDApp_RegisterForMgmtBindReq( byte TaskID )
// 3712 {
// 3713   ZDApp_MgmtBindReq_TaskID = TaskID;
// 3714 }
// 3715 #endif
// 3716 
// 3717 /*********************************************************************
// 3718  * @fn      ZDApp_StartUpFromApp()
// 3719  *
// 3720  * @brief   Start the device.  This function will only start a device
// 3721  *          that is in the Holding state.
// 3722  *
// 3723  * @param   mode - ZDAPP_STARTUP_COORD - Start up as coordinator only
// 3724  *                 ZDAPP_STARTUP_ROUTER - Start up as router only
// 3725  *                 ZDAPP_STARTUP_AUTO - Startup in auto, look for coord,
// 3726  *                                       if not found, become coord.
// 3727  *
// 3728  * @return  TRUE if started, FALSE if in the wrong mode
// 3729  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3730 ZStatus_t ZDApp_StartUpFromApp( uint8 mode )
ZDApp_StartUpFromApp:
        CFI Block cfiBlock262 Using cfiCommon0
        CFI Function ZDApp_StartUpFromApp
// 3731 {
        FUNCALL ZDApp_StartUpFromApp, ZDOInitDevice
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3732   ZStatus_t ret = ZFailure;
        MOV	R1,#0x1
// 3733 
// 3734   if ( devState == DEV_HOLD )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JNZ	??ZDApp_StartUpFromApp_0
// 3735   {
// 3736     // Start the device's joining process
// 3737     if ( ZDOInitDevice( 0 ) == ZDO_INITDEV_NEW_NETWORK_STATE )
        ; Setup parameters for call to function ZDOInitDevice
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(ZDOInitDevice & 0xffff)
        MOV	A,#((ZDOInitDevice >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 3738     {
// 3739 #if defined( SOFT_START )
// 3740       if ( mode == ZDAPP_STARTUP_COORD )
// 3741       {
// 3742         devStartMode = MODE_HARD;     // Start as a coordinator
// 3743         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
// 3744       }
// 3745       else
// 3746       {
// 3747         if ( mode == ZDAPP_STARTUP_ROUTER )
// 3748         {
// 3749           softStartAllowCoord = FALSE;  // Don't allow coord to start
// 3750           continueJoining = TRUE;
// 3751         }
// 3752         devStartMode = MODE_JOIN;     // Assume joining
// 3753       }
// 3754 #endif  // SOFT_START
// 3755     }
// 3756     ret = ZSuccess;
        MOV	R1,#0x0
// 3757   }
// 3758 
// 3759   return ( ret );
??ZDApp_StartUpFromApp_0:
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock262
// 3760 }
// 3761 
// 3762 /*********************************************************************
// 3763  * @fn      ZDApp_StopStartUp()
// 3764  *
// 3765  * @brief   Stops the joining process of a router.  This will only
// 3766  *          work if the router is in the scanning process and
// 3767  *          the SOFT_START feature is enabled.
// 3768  *
// 3769  * @param   none
// 3770  *
// 3771  * @return  TRUE if SOFT_START is enabled, FALSE if not possible
// 3772  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3773 uint8 ZDApp_StopStartUp( void )
ZDApp_StopStartUp:
        CFI Block cfiBlock263 Using cfiCommon0
        CFI Function ZDApp_StopStartUp
// 3774 {
        ; Saved register size: 0
        ; Auto size: 0
// 3775   uint8 ret = FALSE;
// 3776 
// 3777 #if defined( SOFT_START )
// 3778   continueJoining = FALSE;
// 3779   ret = TRUE;
// 3780 #endif  // SOFT_START
// 3781 
// 3782   return ( ret );
        LJMP	?Subroutine39 & 0xFFFF
        CFI EndBlock cfiBlock263
// 3783 }
// 3784 
// 3785 /*********************************************************************
// 3786  * @fn      ZDApp_StartJoiningCycle()
// 3787  *
// 3788  * @brief   Starts the joining cycle of a device.  This will only
// 3789  *          continue an already started (or stopped) joining cycle.
// 3790  *
// 3791  * @param   none
// 3792  *
// 3793  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3794  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3795 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
        CFI Block cfiBlock264 Using cfiCommon0
        CFI Function ZDApp_StartJoiningCycle
// 3796 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3797   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0x1
        JZ	??ZDApp_StartJoiningCycle_0
        MOVX	A,@DPTR
        XRL	A,#0x2
        JNZ	??ZDApp_StartJoiningCycle_1
// 3798   {
// 3799     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV	A,#0x1
        MOV	DPTR,#continueJoining
        MOVX	@DPTR,A
// 3800     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(ZDApp_NetworkInit & 0xffff)
        MOV	A,#((ZDApp_NetworkInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 3801 
// 3802     return ( TRUE );
        MOV	R1,#0x1
        SJMP	??ZDApp_StartJoiningCycle_2
// 3803   }
// 3804   else
// 3805     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV	R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock264
// 3806 }
// 3807 
// 3808 /*********************************************************************
// 3809  * @fn      ZDApp_StopJoiningCycle()
// 3810  *
// 3811  * @brief   Stops the joining or rejoining process of a device.
// 3812  *
// 3813  * @param   none
// 3814  *
// 3815  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3816  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3817 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
        CFI Block cfiBlock265 Using cfiCommon0
        CFI Function ZDApp_StopJoiningCycle
// 3818 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3819   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0x1
        JZ	??ZDApp_StopJoiningCycle_0
        MOVX	A,@DPTR
        XRL	A,#0x2
        JNZ	??ZDApp_StopJoiningCycle_1
// 3820   {
// 3821     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        CLR	A
        MOV	DPTR,#continueJoining
        MOVX	@DPTR,A
// 3822     return ( TRUE );
        MOV	R1,#0x1
        SJMP	??ZDApp_StopJoiningCycle_2
// 3823   }
// 3824   else
// 3825     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV	R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP	??Subroutine38_0 & 0xFFFF
        CFI EndBlock cfiBlock265
// 3826 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zdoDiscCounter>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for continueJoining>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devState>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devStartMode>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_BindUnbindRsp_TaskID>`:
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sPVerList>`:
        DB 2, 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_epDesc>`:
        DB 0
        DW ZDAppTaskID, 0H
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_10000>`:
        DD 65536

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_0>`:
        DD 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_80000>`:
        DD 524288

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        END
// 3827 
// 3828 #if !defined ( ZDO_COORDINATOR ) || defined ( SOFT_START )
// 3829 /*********************************************************************
// 3830  * @fn      ZDApp_NodeProfileSync()
// 3831  *
// 3832  * @brief   Sync node with stack profile.
// 3833  *
// 3834  * @param   cfm - ZDO_NetworkDiscoveryCfm_t
// 3835  *
// 3836  * @return  none
// 3837  */
// 3838 void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
// 3839 {
// 3840   networkDesc_t* desc;
// 3841   uint16         panID;
// 3842 
// 3843   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
// 3844   {
// 3845     panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
// 3846 
// 3847     desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
// 3848 
// 3849     if (desc != NULL)
// 3850     {
// 3851       if ( desc->stackProfile != zgStackProfile )
// 3852       {
// 3853         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
// 3854         ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
// 3855       }
// 3856     }
// 3857   }
// 3858 }
// 3859 #endif
// 3860 
// 3861 /*********************************************************************
// 3862 *********************************************************************/
// 
// 5 238 bytes in segment BANKED_CODE
//     2 bytes in segment SFR_AN
//    25 bytes in segment XDATA_I
//    25 bytes in segment XDATA_ID
//    19 bytes in segment XDATA_Z
// 
// 5 251 bytes of CODE  memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  2 bytes shared)
//    32 bytes of XDATA memory (+ 12 bytes shared)
//
//Errors: none
//Warnings: none
