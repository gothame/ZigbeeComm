##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   17/Oct/2013  21:26:00 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\stack\zdo\ZDObject.c                            #
#    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCoor #
#                          d.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS       #
#                          "-DCONST=const __code" -DGENERIC=__generic) -f    #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConfig. #
#                          cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800     #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\Source\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mt\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2430EB\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\osal\mcu #
#                          \ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC #
#                          2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\osal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ #
#                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects #
#                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. #
#                          \Components\stack\af\ -I                          #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\stack\nw #
#                          k\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C #
#                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2430DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ #
#                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\zmac\f8w #
#                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                       #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          mac\high_level\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf03\ -I                #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\low_ #
#                          level\srf03\single_chip\ -D CC2430EB -D ZTOOL_P1  #
#                          -D MT_TASK -D MT_ZDO_FUNC -lC                     #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\ -lA            #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\CoordinatorEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\stack\zdo\ZDObject.c"                          #
#    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\ZDObject.lst    #
#    Object file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\Obj\ZDObject.r51     #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\zdo\ZDObject.c
      1          /*********************************************************************
      2              Filename:       ZDObject.c
      3              Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
      4              Revision:       $Revision: 14296 $
      5          
      6              Description:
      7          
      8                This Zigbee Device Object.
      9          
     10              Notes:
     11          
     12              Copyright (c) 2006 by Texas Instruments, Inc.
     13              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     14              derivative works, modify, distribute, perform, display or sell this
     15              software and/or its documentation for any purpose is prohibited
     16              without the express written consent of Texas Instruments, Inc.
     17          *********************************************************************/
     18          
     19          /*********************************************************************
     20           * INCLUDES
     21           */
     22          #include "ZComdef.h"
     23          #include "OSAL.h"
     24          #include "OSAL_Nv.h"
     25          #include "rtg.h"
     26          #include "NLMEDE.h"
     27          #include "nwk_globals.h"
     28          #include "APS.h"
     29          #include "APSMEDE.h"
     30          #include "AssocList.h"
     31          #include "BindingTable.h"
     32          #include "AddrMgr.h"
     33          #include "AF.h"
     34          #include "ZDObject.h"
     35          #include "ZDProfile.h"
     36          #include "ZDConfig.h"
     37          #include "ZDCache.h"
     38          #include "ZDSecMgr.h"
     39          #include "ZDApp.h"
     40          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     41          #include "ZGlobals.h"
     42          
     43          #if defined( LCD_SUPPORTED )
     44            #include "OnBoard.h"
     45          #endif
     46          
     47          /* HAL */
     48          #include "hal_lcd.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          // NLME Stub Implementations
     58          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     59          
     60          // Status fields used by ZDO_ProcessMgmtRtgReq
     61          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     62          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     63          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     64          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     65          
     66          /*********************************************************************
     67           * TYPEDEFS
     68           */
     69          #if defined ( REFLECTOR )
     70          typedef struct
     71          {
     72            byte SrcTransSeq;
     73            zAddrType_t SrcAddr;
     74            uint16 LocalCoordinator;
     75            byte epIntf;
     76            uint16 ProfileID;
     77            byte numInClusters;
     78            uint16 *inClusters;
     79            byte numOutClusters;
     80            uint16 *outClusters;
     81            byte SecurityUse;
     82            byte status;
     83          } ZDO_EDBind_t;
     84          #endif // defined ( REFLECTOR )
     85          
     86          #if defined ( ZDO_COORDINATOR )
     87          enum
     88          {
     89            ZDMATCH_INIT,           // Initialized
     90            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
     91            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
     92          };
     93          
     94          enum
     95          {
     96            ZDMATCH_REASON_START,
     97            ZDMATCH_REASON_TIMEOUT,
     98            ZDMATCH_REASON_UNBIND_RSP,
     99            ZDMATCH_REASON_BIND_RSP
    100          };
    101          
    102          enum
    103          {
    104            ZDMATCH_SENDING_NOT,
    105            ZDMATCH_SENDING_UNBIND,
    106            ZDMATCH_SENDING_BIND
    107          };
    108          
    109          typedef struct
    110          {
    111            ZDEndDeviceBind_t ed1;
    112            ZDEndDeviceBind_t ed2;
    113            uint8  state;            // One of the above states
    114            uint8  sending;         // 0 - not sent, 1 - unbind, 2 bind - expecting response
    115            uint8  transSeq;
    116            uint8  ed1numMatched;
    117            uint16 *ed1Matched;
    118            uint8  ed2numMatched;
    119            uint16 *ed2Matched;
    120          } ZDMatchEndDeviceBind_t;
    121          #endif
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    138          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ??ZDOBuildBuf:
   \   000000                DS 52
    139          
    140          #if defined ( REFLECTOR )
    141          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
    142          #endif
    143          
    144          #if defined ( MANAGED_SCAN )
    145            uint32 managedScanNextChannel = 0;
    146            uint32 managedScanChannelMask = 0;
    147            uint8  managedScanTimesPerChannel = 0;
    148          #endif
    149          
    150          #if defined ( ZDO_COORDINATOR )

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    151            ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
    152          #endif
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void ZDODeviceSetup( void );
    158          static uint16 *ZDO_CreateAlignedUINT16List(uint8 num, uint8 *buf);
    159          #if defined ( MANAGED_SCAN )
    160            static void ZDOManagedScan_Next( void );
    161          #endif
    162          #if defined ( REFLECTOR )
    163            static void ZDO_RemoveEndDeviceBind( void );
    164            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    165          #endif
    166          #if defined ( REFLECTOR ) || defined( ZDO_COORDINATOR )
    167            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    168                                          byte numList2, uint16 *list2, uint16 *pMatches );
    169          #endif
    170          #if defined ( ZDO_COORDINATOR )
    171            static void ZDO_RemoveMatchMemory( void );
    172            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    173            static uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq );
    174            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    175          #endif
    176          
    177          /*********************************************************************
    178           * @fn          ZDO_Init
    179           *
    180           * @brief       ZDObject and ZDProfile initialization.
    181           *
    182           * @param       none
    183           *
    184           * @return      none
    185           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    186          void ZDO_Init( void )
   \                     ZDO_Init:
    187          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    188            // Initialize ZD items
    189            #if defined ( REFLECTOR )
    190            ZDO_EDBind = NULL;
    191            #endif
    192          
    193            // Setup the device - type of device to create.
    194            ZDODeviceSetup();
   \   000004                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000004   90....       MOV     DPTR,#(NLME_CoordinatorInit & 0xffff)
   \   000007   74..         MOV     A,#((NLME_CoordinatorInit >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    195          
    196            // Initialize ZigBee Device Security Manager
    197            ZDSecMgrInit();
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   90....       MOV     DPTR,#(ZDSecMgrInit & 0xffff)
   \   00000F   74..         MOV     A,#((ZDSecMgrInit >> 16) & 0xff)
   \   000011   02....       LJMP    ?Subroutine90 & 0xFFFF
    198          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??Subroutine90_0:
   \   000003   D083         POP     DPH
   \   000005   D082         POP     DPL
   \   000007   02....       LJMP    ?BRET
    199          
    200          #if defined ( MANAGED_SCAN )
    201          /*********************************************************************
    202           * @fn      ZDOManagedScan_Next()
    203           *
    204           * @brief   Setup a managed scan.
    205           *
    206           * @param   none
    207           *
    208           * @return  none
    209           */
    210          static void ZDOManagedScan_Next( void )
    211          {
    212            // Is it the first time
    213            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    214            {
    215              // Setup the defaults
    216              managedScanNextChannel  = 1;
    217          
    218              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    219                managedScanNextChannel <<= 1;
    220          
    221              managedScanChannelMask = managedScanNextChannel;
    222              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    223            }
    224            else
    225            {
    226              // Do we need to go to the next channel
    227              if ( managedScanTimesPerChannel == 0 )
    228              {
    229                // Find next active channel
    230                managedScanChannelMask  = managedScanNextChannel;
    231                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    232              }
    233              else
    234              {
    235                managedScanTimesPerChannel--;
    236          
    237                if ( managedScanTimesPerChannel == 0 )
    238                {
    239                  managedScanNextChannel  <<= 1;
    240                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    241                    managedScanNextChannel <<= 1;
    242          
    243                  if ( managedScanNextChannel == 0 )
    244                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    245                }
    246              }
    247            }
    248          }
    249          #endif // MANAGED_SCAN
    250          
    251          /*********************************************************************
    252           * @fn      ZDODeviceSetup()
    253           *
    254           * @brief   Call set functions depending on the type of device compiled.
    255           *
    256           * @param   none
    257           *
    258           * @return  none
    259           */
    260          static void ZDODeviceSetup( void )
    261          {
    262          #if defined( ZDO_COORDINATOR )
    263            NLME_CoordinatorInit();
    264          #endif
    265          
    266          #if defined ( REFLECTOR )
    267            #if defined ( ZDO_COORDINATOR )
    268              APS_ReflectorInit( APS_REFLECTOR_PUBLIC );
    269            #else
    270              APS_ReflectorInit( APS_REFLECTOR_PRIVATE );
    271            #endif
    272          #endif
    273          
    274          #if !defined( ZDO_COORDINATOR ) || defined( SOFT_START )
    275            NLME_DeviceJoiningInit();
    276          #endif
    277          }
    278          
    279          /*********************************************************************
    280           * @fn          ZDO_StartDevice
    281           *
    282           * @brief       This function starts a device in a network.
    283           *
    284           * @param       logicalType     - Device type to start
    285           *              startMode       - indicates mode of device startup
    286           *              beaconOrder     - indicates time betwen beacons
    287           *              superframeOrder - indicates length of active superframe
    288           *
    289           * @return      none
    290           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    291          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    292          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
    293            ZStatus_t ret;
    294          
    295            ret = ZUnsupportedMode;
   \   000009   7E12         MOV     R6,#0x12
    296          
    297          #if defined(ZDO_COORDINATOR)
    298            if ( logicalType == NODETYPE_COORDINATOR )
   \   00000B   ED           MOV     A,R5
   \   00000C   7050         JNZ     ??ZDO_StartDevice_0
    299            {
    300              if ( startMode == MODE_HARD )
   \   00000E   7402         MOV     A,#0x2
   \   000010   6A           XRL     A,R2
   \   000011   7032         JNZ     ??ZDO_StartDevice_1
    301              {
    302                devState = DEV_COORD_STARTING;
   \   000013   7408         MOV     A,#0x8
   \   000015   90....       MOV     DPTR,#devState
   \   000018   F0           MOVX    @DPTR,A
    303                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgDefaultChannelList,
    304                                                    zgDefaultStartingScanDuration, beaconOrder,
    305                                                    superframeOrder, false );
   \   000019                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   000019   75..00       MOV     ?V0 + 0,#0x0
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000021   90....       MOV     DPTR,#zgDefaultChannelList
   \   000024   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000027   EC           MOV     A,R4
   \   000028   FD           MOV     R5,A
   \   000029   E9           MOV     A,R1
   \   00002A   FC           MOV     R4,A
   \   00002B   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   90....       MOV     DPTR,#zgConfigPANID
   \   000033   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000036   90....       MOV     DPTR,#(NLME_NetworkFormationRequest & 0xffff)
   \   000039   74..         MOV     A,#((NLME_NetworkFormationRequest >> 16) & 0xff)
   \   00003B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003E   7405         MOV     A,#0x5
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   \   000043   8017         SJMP    ??ZDO_StartDevice_2
    306              }
    307              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_1:
   \   000045   7401         MOV     A,#0x1
   \   000047   6A           XRL     A,R2
   \   000048   7014         JNZ     ??ZDO_StartDevice_0
    308              {
    309                // Just start the coordinator
    310                devState = DEV_COORD_STARTING;
   \   00004A   7408         MOV     A,#0x8
   \   00004C   90....       MOV     DPTR,#devState
   \   00004F   F0           MOVX    @DPTR,A
    311                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
   \   000050                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000050   7B00         MOV     R3,#0x0
   \   000052   E9           MOV     A,R1
   \   000053   FA           MOV     R2,A
   \   000054   90....       MOV     DPTR,#(NLME_StartRouterRequest & 0xffff)
   \   000057   74..         MOV     A,#((NLME_StartRouterRequest >> 16) & 0xff)
   \   000059   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??ZDO_StartDevice_2:
   \   00005C   E9           MOV     A,R1
   \   00005D   FE           MOV     R6,A
    312              }
    313              else
    314              {
    315          #if defined( LCD_SUPPORTED )
    316                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    317          #endif
    318              }
    319            }
    320          #endif  // !ZDO_COORDINATOR
    321          
    322          #if !defined ( ZDO_COORDINATOR ) || defined( SOFT_START )
    323            if ( logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE )
    324            {
    325              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
    326              {
    327                devState = DEV_NWK_DISC;
    328          
    329            #if defined( MANAGED_SCAN )
    330                ZDOManagedScan_Next();
    331                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    332            #else
    333                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
    334            #endif
    335              }
    336              else if ( startMode == MODE_RESUME )
    337              {
    338                if ( logicalType == NODETYPE_ROUTER )
    339                {
    340                  ZMacScanCnf_t scanCnf;
    341                  devState = DEV_NWK_ORPHAN;
    342          
    343                  /* if router and nvram is available, fake successful orphan scan */
    344                  scanCnf.hdr.Status = ZSUCCESS;
    345                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
    346                  scanCnf.UnscannedChannels = 0;
    347                  scanCnf.ResultListSize = 0;
    348                  nwk_ScanJoiningOrphan(&scanCnf);
    349          
    350                  ret = ZSuccess;
    351                }
    352                else
    353                {
    354                  devState = DEV_NWK_ORPHAN;
    355                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    356                                                zgDefaultStartingScanDuration );
    357                }
    358              }
    359              else
    360              {
    361          #if defined( LCD_SUPPORTED )
    362                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    363          #endif
    364              }
    365            }
    366          #endif  //!ZDO COORDINATOR || SOFT_START
    367          
    368            // configure the Security Manager for type of device
    369            ZDSecMgrConfig();
   \                     ??ZDO_StartDevice_0:
   \   00005E                ; Setup parameters for call to function ZDSecMgrConfig
   \   00005E   90....       MOV     DPTR,#(ZDSecMgrConfig & 0xffff)
   \   000061   74..         MOV     A,#((ZDSecMgrConfig >> 16) & 0xff)
   \   000063   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    370          
    371            if ( ret != ZSuccess )
   \   000066   EE           MOV     A,R6
   \   000067   6010         JZ      ??ZDO_StartDevice_3
    372              osal_start_timer( ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \   000069                ; Setup parameters for call to function osal_start_timer
   \   000069   7CE8         MOV     R4,#-0x18
   \   00006B   7D03         MOV     R5,#0x3
   \   00006D   7A01         MOV     R2,#0x1
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   90....       MOV     DPTR,#(osal_start_timer & 0xffff)
   \   000074   74..         MOV     A,#((osal_start_timer >> 16) & 0xff)
   \   000076   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    373          }
   \                     ??ZDO_StartDevice_3:
   \   000079                REQUIRE ?Subroutine91
   \   000079                ; // Fall through to label ?Subroutine91

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \                     ??Subroutine57_0:
   \   000004   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    374          
    375          /*********************************************************************
    376           * @fn      ZDO_UpdateNwkStatus()
    377           *
    378           * @brief
    379           *
    380           *   This function will send an update message to each registered
    381           *   application endpoint/interface about a network status change.
    382           *
    383           * @param   none
    384           *
    385           * @return  none
    386           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    387          void ZDO_UpdateNwkStatus( devStates_t state )
   \                     ZDO_UpdateNwkStatus:
    388          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
    389            // Endpoint/Interface descriptor list.
    390            epList_t *epDesc = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   12....       LCALL   ?Subroutine58 & 0xFFFF
    391            byte bufLen = sizeof(osal_event_hdr_t);
    392            osal_event_hdr_t *msgPtr;
    393          
    394            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??CrossCallReturnLabel_156:
   \   00000D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000D   90....       MOV     DPTR,#(NLME_GetShortAddr & 0xffff)
   \   000010   74..         MOV     A,#((NLME_GetShortAddr >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000015   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000018   12....       LCALL   ?Subroutine20 & 0xFFFF
    395            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_42:
   \   00001B                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001B   90....       MOV     DPTR,#(NLME_GetExtAddr & 0xffff)
   \   00001E   74..         MOV     A,#((NLME_GetExtAddr >> 16) & 0xff)
   \   000020   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000023   803D         SJMP    ??CrossCallReturnLabel_157
    396          
    397            while ( epDesc )
    398            {
    399              if ( epDesc->epDesc->endPoint != ZDO_EP )
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00002C   6025         JZ      ??ZDO_UpdateNwkStatus_1
    400              {
    401                msgPtr = (osal_event_hdr_t *)osal_msg_allocate( bufLen );
   \   00002E                ; Setup parameters for call to function osal_msg_allocate
   \   00002E   7A02         MOV     R2,#0x2
   \   000030   7B00         MOV     R3,#0x0
   \   000032   90....       MOV     DPTR,#(osal_msg_allocate & 0xffff)
   \   000035   74..         MOV     A,#((osal_msg_allocate >> 16) & 0xff)
   \   000037   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    402                if ( msgPtr )
   \   00003A   EA           MOV     A,R2
   \   00003B   7001         JNZ     ??ZDO_UpdateNwkStatus_2
   \   00003D   EB           MOV     A,R3
   \                     ??ZDO_UpdateNwkStatus_2:
   \   00003E   6013         JZ      ??ZDO_UpdateNwkStatus_1
    403                {
    404                  msgPtr->event = ZDO_STATE_CHANGE; // Command ID
   \   000040   74D1         MOV     A,#-0x2f
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   F0           MOVX    @DPTR,A
    405                  msgPtr->status = (byte)state;
   \   000047   A3           INC     DPTR
   \   000048   E5..         MOV     A,?V0 + 0
   \   00004A   12....       LCALL   ?Subroutine19 & 0xFFFF
    406          
    407                  osal_msg_send( *(epDesc->epDesc->task_id), (byte *)msgPtr );
   \                     ??CrossCallReturnLabel_266:
   \   00004D   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000050   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    408                }
    409              }
    410              epDesc = epDesc->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   12....       LCALL   ?Subroutine58 & 0xFFFF
    411            }
   \                     ??CrossCallReturnLabel_157:
   \   000062   EE           MOV     A,R6
   \   000063   7001         JNZ     ??ZDO_UpdateNwkStatus_3
   \   000065   EF           MOV     A,R7
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000066   70BD         JNZ     ??ZDO_UpdateNwkStatus_0
    412          }
   \   000068   02....       LJMP    ?Subroutine92 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000006   F9           MOV     R1,A
   \   000007   90....       MOV     DPTR,#(osal_msg_send & 0xffff)
   \   00000A   74..         MOV     A,#((osal_msg_send >> 16) & 0xff)
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   F8           MOV     R0,A
   \                     ??Subroutine79_0:
   \   000001   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001                REQUIRE ?Subroutine98
   \   000001                ; // Fall through to label ?Subroutine98

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    413          
    414          #if defined ( REFLECTOR )
    415          /*********************************************************************
    416           * @fn          ZDO_RemoveEndDeviceBind
    417           *
    418           * @brief       Remove the end device bind
    419           *
    420           * @param  none
    421           *
    422           * @return      none
    423           */
    424          static void ZDO_RemoveEndDeviceBind( void )
    425          {
    426            if ( ZDO_EDBind )
    427            {
    428              // Free the RAM
    429              if ( ZDO_EDBind->inClusters )
    430                osal_mem_free( ZDO_EDBind->inClusters );
    431              if ( ZDO_EDBind->outClusters )
    432                osal_mem_free( ZDO_EDBind->outClusters );
    433              osal_mem_free( ZDO_EDBind );
    434              ZDO_EDBind = NULL;
    435            }
    436          }
    437          #endif // REFLECTOR
    438          
    439          #if defined ( REFLECTOR )
    440          /*********************************************************************
    441           * @fn          ZDO_RemoveEndDeviceBind
    442           *
    443           * @brief       Remove the end device bind
    444           *
    445           * @param  none
    446           *
    447           * @return      none
    448           */
    449          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    450          {
    451            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    452          
    453          #if defined( LCD_SUPPORTED )
    454            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    455            if ( Status == ZDP_SUCCESS )
    456              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    457            else
    458              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    459          #endif
    460          
    461          }
    462          #endif // REFLECTOR
    463          
    464          #if defined ( REFLECTOR ) || defined ( ZDO_COORDINATOR )
    465          /*********************************************************************
    466           * @fn          ZDO_CompareClusterLists
    467           *
    468           * @brief       Compare one list to another list
    469           *
    470           * @param       numList1 - number of items in list 1
    471           * @param       list1 - first list of cluster IDs
    472           * @param       numList2 - number of items in list 2
    473           * @param       list2 - second list of cluster IDs
    474           * @param       pMatches - buffer to put matches
    475           *
    476           * @return      number of matches
    477           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    478          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ??ZDO_CompareClusterLists:
    479                                    byte numList2, uint16 *list2, uint16 *pMatches )
    480          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   8B..         MOV     ?V0 + 7,R3
   \   00000B   7410         MOV     A,#0x10
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000013   7412         MOV     A,#0x12
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine58 & 0xFFFF
    481            byte x, y;
    482            uint16 z;
    483            byte numMatches = 0;
   \                     ??CrossCallReturnLabel_158:
   \   00001B   7D00         MOV     R5,#0x0
    484          
    485            // Check the first in against the seconds out
    486            for ( x = 0; x < numList1; x++ )
   \   00001D   8D..         MOV     ?V0 + 3,R5
   \   00001F   804E         SJMP    ??ZDO_CompareClusterLists_1
    487            {
    488              for ( y = 0; y < numList2; y++ )
    489              {
    490                z = list2[y];
   \                     ??ZDO_CompareClusterLists_2:
   \   000021   E5..         MOV     A,?V0 + 4
   \   000023   C3           CLR     C
   \   000024   33           RLC     A
   \   000025   F8           MOV     R0,A
   \   000026   E4           CLR     A
   \   000027   33           RLC     A
   \   000028   F9           MOV     R1,A
   \   000029   EA           MOV     A,R2
   \   00002A   28           ADD     A,R0
   \   00002B   F582         MOV     DPL,A
   \   00002D   EB           MOV     A,R3
   \   00002E   12....       LCALL   ?Subroutine80 & 0xFFFF
    491                if ( list1[x] == z )
   \                     ??CrossCallReturnLabel_220:
   \   000031   E5..         MOV     A,?V0 + 3
   \   000033   C3           CLR     C
   \   000034   33           RLC     A
   \   000035   F8           MOV     R0,A
   \   000036   E4           CLR     A
   \   000037   33           RLC     A
   \   000038   F9           MOV     R1,A
   \   000039   E5..         MOV     A,?V0 + 6
   \   00003B   28           ADD     A,R0
   \   00003C   F582         MOV     DPL,A
   \   00003E   E5..         MOV     A,?V0 + 7
   \   000040   39           ADDC    A,R1
   \   000041   F583         MOV     DPH,A
   \   000043   E0           MOVX    A,@DPTR
   \   000044   65..         XRL     A,?V0 + 0
   \   000046   7004         JNZ     ??ZDO_CompareClusterLists_3
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   65..         XRL     A,?V0 + 1
   \                     ??ZDO_CompareClusterLists_3:
   \   00004C   7017         JNZ     ??ZDO_CompareClusterLists_4
    492                  pMatches[numMatches++] = z;
   \   00004E   ED           MOV     A,R5
   \   00004F   C3           CLR     C
   \   000050   33           RLC     A
   \   000051   F8           MOV     R0,A
   \   000052   E4           CLR     A
   \   000053   33           RLC     A
   \   000054   F9           MOV     R1,A
   \   000055   EE           MOV     A,R6
   \   000056   28           ADD     A,R0
   \   000057   F582         MOV     DPL,A
   \   000059   EF           MOV     A,R7
   \   00005A   39           ADDC    A,R1
   \   00005B   F583         MOV     DPH,A
   \   00005D   E5..         MOV     A,?V0 + 0
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   E5..         MOV     A,?V0 + 1
   \   000063   F0           MOVX    @DPTR,A
   \   000064   0D           INC     R5
    493              }
   \                     ??ZDO_CompareClusterLists_4:
   \   000065   05..         INC     ?V0 + 4
   \                     ??ZDO_CompareClusterLists_5:
   \   000067   E5..         MOV     A,?V0 + 4
   \   000069   C3           CLR     C
   \   00006A   9C           SUBB    A,R4
   \   00006B   40B4         JC      ??ZDO_CompareClusterLists_2
   \   00006D   05..         INC     ?V0 + 3
   \                     ??ZDO_CompareClusterLists_1:
   \   00006F   E5..         MOV     A,?V0 + 3
   \   000071   C3           CLR     C
   \   000072   95..         SUBB    A,?V0 + 2
   \   000074   5005         JNC     ??ZDO_CompareClusterLists_6
   \   000076   75..00       MOV     ?V0 + 4,#0x0
   \   000079   80EC         SJMP    ??ZDO_CompareClusterLists_5
    494            }
    495          
    496            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_6:
   \   00007B   ED           MOV     A,R5
   \   00007C   F9           MOV     R1,A
   \   00007D   80..         SJMP    ??Subroutine93_0
    497          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine93_0:
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   39           ADDC    A,R1
   \                     ??Subroutine80_0:
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   22           RET
    498          #endif // REFLECTOR || ZDO_COORDINATOR
    499          
    500          #if defined ( REFLECTOR )
    501          /*********************************************************************
    502           * @fn          ZDO_DoEndDeviceBind
    503           *
    504           * @brief       Process the End Device Bind Req from ZDApp
    505           *
    506           * @param  bindReq  - Bind Request Information
    507           * @param  SecurityUse - Security enable/disable
    508           *
    509           * @return      none
    510           */
    511          void ZDO_DoEndDeviceBind( ZDEndDeviceBind_t *bindReq )
    512          {
    513            uint8 numMatches;
    514            uint8 Status;
    515            BindingEntry_t *pBind;
    516            AddrMgrEntry_t addrEntry;
    517            zAddrType_t SrcAddr;
    518          
    519            SrcAddr.addrMode = Addr16Bit;
    520            SrcAddr.addr.shortAddr = bindReq->srcAddr;
    521          
    522            // Ask for IEEE address
    523            if ( (bindReq->srcAddr != ZDAppNwkAddr.addr.shortAddr) )
    524            {
    525              addrEntry.user = ADDRMGR_USER_BINDING;
    526              addrEntry.nwkAddr = bindReq->srcAddr;
    527              Status = AddrMgrEntryLookupNwk( &addrEntry );
    528              if ( Status == TRUE)
    529              {
    530                // Add a reference to entry
    531                AddrMgrEntryAddRef( &addrEntry );
    532              }
    533              else
    534              {
    535                // If we have the extended address
    536                if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
    537                {
    538                  osal_cpyExtAddr( addrEntry.extAddr, bindReq->ieeeAddr );
    539                }
    540          
    541                // Not in address manager?
    542                AddrMgrEntryUpdate( &addrEntry );   // Add it
    543              }
    544          
    545              if ( AddrMgrExtAddrValid( addrEntry.extAddr ) == FALSE )
    546              {
    547                ZDP_IEEEAddrReq( bindReq->srcAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, false );
    548              }
    549            }
    550          
    551            if ( ZDO_EDBind )   // End Device Bind in progress
    552            {
    553              Status = ZDP_NO_MATCH;
    554          
    555              if ( bindReq->profileID == ZDO_EDBind->ProfileID )
    556              {
    557                // Check the first in against the seconds out
    558                numMatches = ZDO_CompareClusterLists(
    559                            ZDO_EDBind->numOutClusters, ZDO_EDBind->outClusters,
    560                            bindReq->numInClusters, bindReq->inClusters, ZDOBuildBuf );
    561          
    562                if ( numMatches )
    563                {
    564                  // if existing bind exists, remove it
    565                  pBind = bindFindExisting( &(ZDO_EDBind->SrcAddr), ZDO_EDBind->epIntf,
    566                                &SrcAddr, bindReq->endpoint );
    567                  if ( pBind )
    568                  {
    569                    bindRemoveEntry( pBind );
    570                    Status = ZDP_SUCCESS;
    571                  }
    572                  // else add new binding table entry
    573                  else if ( bindAddEntry( &(ZDO_EDBind->SrcAddr), ZDO_EDBind->epIntf,
    574                                &SrcAddr, bindReq->endpoint, numMatches, ZDOBuildBuf ) )
    575                    Status = ZDP_SUCCESS;
    576                  else
    577                    Status = ZDP_TABLE_FULL;
    578                }
    579          
    580                // Check the second in against the first out
    581                numMatches = ZDO_CompareClusterLists( bindReq->numOutClusters, bindReq->outClusters,
    582                                ZDO_EDBind->numInClusters, ZDO_EDBind->inClusters,
    583                                ZDOBuildBuf );
    584          
    585                if ( numMatches )
    586                {
    587                  // if existing bind exists, remove it
    588                  pBind = bindFindExisting( &SrcAddr, bindReq->endpoint, &(ZDO_EDBind->SrcAddr),
    589                                ZDO_EDBind->epIntf );
    590                  if ( pBind )
    591                  {
    592                    bindRemoveEntry( pBind );
    593                    Status = ZDP_SUCCESS;
    594                  }
    595                  // else add new binding table entry
    596                  else if ( bindAddEntry( &SrcAddr, bindReq->endpoint, &(ZDO_EDBind->SrcAddr),
    597                                ZDO_EDBind->epIntf, numMatches, ZDOBuildBuf ) )
    598                    Status = ZDP_SUCCESS;
    599                  else
    600                    Status = ZDP_TABLE_FULL;
    601                }
    602              }
    603          
    604              if ( Status == ZDP_SUCCESS )
    605              {
    606                // We've found a match, so we don't have to wait for the timeout
    607                APS_SetEndDeviceBindTimeout( 10, ZDO_EndDeviceTimeoutCB );  // psuedo stop end device timeout
    608          
    609                  // Notify to save info into NV
    610                osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
    611              }
    612          
    613              ZDO_EDBind->status = Status;
    614          
    615              // Send the response message to the device sending this message
    616              ZDO_SendEDBindRsp( bindReq->TransSeq, &SrcAddr, Status, bindReq->SecurityUse );
    617            }
    618            else  // Start a new End Device Bind
    619            {
    620              // Copy the info
    621              ZDO_EDBind = osal_mem_alloc( sizeof( ZDO_EDBind_t ) );
    622              if ( ZDO_EDBind )
    623              {
    624                osal_memcpy( &(ZDO_EDBind->SrcAddr), &SrcAddr, sizeof( zAddrType_t ) );
    625                ZDO_EDBind->LocalCoordinator = bindReq->localCoordinator;
    626                ZDO_EDBind->epIntf = bindReq->endpoint;
    627                ZDO_EDBind->ProfileID = bindReq->profileID;
    628                ZDO_EDBind->SrcTransSeq = bindReq->TransSeq;
    629          
    630                ZDO_EDBind->numInClusters = bindReq->numInClusters;
    631                if ( bindReq->numInClusters )
    632                {
    633                  ZDO_EDBind->inClusters = osal_mem_alloc( (short)(bindReq->numInClusters * sizeof(uint16)) );
    634                  if ( ZDO_EDBind->inClusters )
    635                  {
    636                    osal_memcpy( ZDO_EDBind->inClusters, bindReq->inClusters, (bindReq->numInClusters * sizeof( uint16 )) );
    637                  }
    638                  else
    639                  {
    640                    // Force no clusters
    641                    ZDO_EDBind->numInClusters = 0;
    642                  }
    643                }
    644                else
    645                  ZDO_EDBind->inClusters = NULL;
    646          
    647                ZDO_EDBind->numOutClusters = bindReq->numOutClusters;
    648                if ( bindReq->numOutClusters )
    649                {
    650                  ZDO_EDBind->outClusters = osal_mem_alloc( (short)(bindReq->numOutClusters*sizeof(uint16)) );
    651                  if ( ZDO_EDBind->outClusters )
    652                  {
    653                    osal_memcpy( ZDO_EDBind->outClusters, bindReq->outClusters, (bindReq->numOutClusters * sizeof( uint16 )) );
    654                  }
    655                  else
    656                  {
    657                    ZDO_EDBind->numOutClusters = 0;
    658                  }
    659                }
    660                else
    661                  ZDO_EDBind->outClusters = NULL;
    662          
    663                ZDO_EDBind->SecurityUse = bindReq->SecurityUse;
    664                ZDO_EDBind->status = ZDP_TIMEOUT;
    665          
    666                // Setup the timer
    667                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceTimeoutCB );
    668              }
    669            }
    670          }
    671          #endif // REFLECTOR
    672          
    673          /*********************************************************************
    674           * Utility functions
    675           */
    676          
    677          /*********************************************************************
    678           * @fn          ZDO_CreateAlignedUINT16List
    679           *
    680           * @brief       Creates a list of cluster IDs that is guaranteed to be aligned.
    681           *              according to the needs of the target. If thre device is running
    682           *              Protocol version 1.0 the incoming buffer will have only a single
    683           *              byte for the cluster ID.
    684           *
    685           *              Depends on the malloc taking care of alignment.
    686           *
    687           *              When cluster ID went to 16 bits alignment for cluster IDs became
    688           *              an issue.
    689           *
    690           * @param       num  - number of entries in list
    691           * @param       buf  - pointer to list
    692           *
    693           * @return      pointer to aligned list. Null if can't allocate memory.
    694           *              Caller's responsibility to free memory.
    695           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    696          static uint16 *ZDO_CreateAlignedUINT16List(uint8 num, uint8 *buf)
   \                     ??ZDO_CreateAlignedUINT16List:
    697          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    698            uint16 *ptr;
    699          
    700            if ((ptr=osal_mem_alloc((short)(num*sizeof(uint16)))))  {
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E9           MOV     A,R1
   \   00000C   C3           CLR     C
   \   00000D   33           RLC     A
   \   00000E   FA           MOV     R2,A
   \   00000F   E4           CLR     A
   \   000010   33           RLC     A
   \   000011   FB           MOV     R3,A
   \   000012   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000015   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   000017   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00001A   8A..         MOV     ?V0 + 0,R2
   \   00001C   8B..         MOV     ?V0 + 1,R3
   \   00001E   EA           MOV     A,R2
   \   00001F   7001         JNZ     ??ZDO_CreateAlignedUINT16List_1
   \   000021   EB           MOV     A,R3
   \                     ??ZDO_CreateAlignedUINT16List_1:
   \   000022   605D         JZ      ??ZDO_CreateAlignedUINT16List_2
    701              uint8 i, ubyte, inc;
    702          
    703              inc = (ZB_PROT_V1_1 == NLME_GetProtocolVersion()) ? 2 : 1;
   \   000024                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000024   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000027   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000029   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002C   E9           MOV     A,R1
   \   00002D   6402         XRL     A,#0x2
   \   00002F   7004         JNZ     ??ZDO_CreateAlignedUINT16List_3
   \   000031   7B02         MOV     R3,#0x2
   \   000033   8002         SJMP    ??ZDO_CreateAlignedUINT16List_4
   \                     ??ZDO_CreateAlignedUINT16List_3:
   \   000035   7B01         MOV     R3,#0x1
    704          
    705              for (i=0; i<num; ++i)  {
   \                     ??ZDO_CreateAlignedUINT16List_4:
   \   000037   7A00         MOV     R2,#0x0
   \   000039   8031         SJMP    ??ZDO_CreateAlignedUINT16List_5
    706                // set upper byte to 0 if we're talking Version 1.0. otherwise
    707                // the buffer contains 16 bit cluster IDs.
    708                ubyte  = (2 == inc) ? buf[1] : 0;
   \                     ??ZDO_CreateAlignedUINT16List_6:
   \   00003B   75..00       MOV     ?V0 + 3,#0x0
    709                ptr[i] = BUILD_UINT16(buf[0], ubyte);
   \                     ??ZDO_CreateAlignedUINT16List_7:
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FC           MOV     R4,A
   \   000044   E4           CLR     A
   \   000045   2C           ADD     A,R4
   \   000046   E5..         MOV     A,?V0 + 3
   \   000048   3400         ADDC    A,#0x0
   \   00004A   FD           MOV     R5,A
   \   00004B   EA           MOV     A,R2
   \   00004C   C3           CLR     C
   \   00004D   33           RLC     A
   \   00004E   F8           MOV     R0,A
   \   00004F   E4           CLR     A
   \   000050   33           RLC     A
   \   000051   F9           MOV     R1,A
   \   000052   E5..         MOV     A,?V0 + 0
   \   000054   28           ADD     A,R0
   \   000055   F582         MOV     DPL,A
   \   000057   E5..         MOV     A,?V0 + 1
   \   000059   39           ADDC    A,R1
   \   00005A   F583         MOV     DPH,A
   \   00005C   EC           MOV     A,R4
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   ED           MOV     A,R5
   \   000060   F0           MOVX    @DPTR,A
    710                buf    += inc;
   \   000061   8B..         MOV     ?V0 + 4,R3
   \   000063   EE           MOV     A,R6
   \   000064   25..         ADD     A,?V0 + 4
   \   000066   FE           MOV     R6,A
   \   000067   EF           MOV     A,R7
   \   000068   3400         ADDC    A,#0x0
   \   00006A   FF           MOV     R7,A
   \   00006B   0A           INC     R2
   \                     ??ZDO_CreateAlignedUINT16List_5:
   \   00006C   EA           MOV     A,R2
   \   00006D   C3           CLR     C
   \   00006E   95..         SUBB    A,?V0 + 2
   \   000070   500F         JNC     ??ZDO_CreateAlignedUINT16List_2
   \   000072   7402         MOV     A,#0x2
   \   000074   6B           XRL     A,R3
   \   000075   70C4         JNZ     ??ZDO_CreateAlignedUINT16List_6
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F5..         MOV     ?V0 + 3,A
   \   00007F   80BD         SJMP    ??ZDO_CreateAlignedUINT16List_7
    711              }
    712            }
    713          
    714            return ptr;
   \                     ??ZDO_CreateAlignedUINT16List_2:
   \   000081   AA..         MOV     R2,?V0 + 0
   \   000083   AB..         MOV     R3,?V0 + 1
   \   000085   02....       LJMP    ??Subroutine103_0 & 0xFFFF
    715          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine103_0:
   \   000003   7F06         MOV     R7,#0x6
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    716          
    717          /*********************************************************************
    718           * @fn          ZDO_CompareByteLists
    719           *
    720           * @brief       Compares two lists for matches.
    721           *
    722           * @param       ACnt  - number of entries in list A
    723           * @param       AList  - List A
    724           * @param       BCnt  - number of entries in list B
    725           * @param       BList  - List B
    726           *
    727           * @return      true if a match is found
    728           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    729          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    730          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8C..         MOV     ?V0 + 1,R4
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine53_0 & 0xFFFF
    731            byte x, y;
    732          
    733            for ( x = 0; x < ACnt; x++ )
   \                     ??CrossCallReturnLabel_137:
   \   000011   75..00       MOV     ?V0 + 3,#0x0
   \   000014   8002         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000016   05..         INC     ?V0 + 3
   \                     ??ZDO_AnyClusterMatches_0:
   \   000018   E5..         MOV     A,?V0 + 3
   \   00001A   C3           CLR     C
   \   00001B   95..         SUBB    A,?V0 + 0
   \   00001D   503E         JNC     ??ZDO_AnyClusterMatches_2
    734            {
    735              for ( y = 0; y < BCnt; y++ )
   \   00001F   75..00       MOV     ?V0 + 2,#0x0
   \   000022   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000024   05..         INC     ?V0 + 2
   \                     ??ZDO_AnyClusterMatches_3:
   \   000026   E5..         MOV     A,?V0 + 2
   \   000028   C3           CLR     C
   \   000029   95..         SUBB    A,?V0 + 1
   \   00002B   50E9         JNC     ??ZDO_AnyClusterMatches_1
    736              {
    737                if ( AList[x] == BList[y] )
   \   00002D   E5..         MOV     A,?V0 + 3
   \   00002F   C3           CLR     C
   \   000030   33           RLC     A
   \   000031   FC           MOV     R4,A
   \   000032   E4           CLR     A
   \   000033   33           RLC     A
   \   000034   FD           MOV     R5,A
   \   000035   EA           MOV     A,R2
   \   000036   2C           ADD     A,R4
   \   000037   F582         MOV     DPL,A
   \   000039   EB           MOV     A,R3
   \   00003A   3D           ADDC    A,R5
   \   00003B   F583         MOV     DPH,A
   \   00003D   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000040   E5..         MOV     A,?V0 + 2
   \   000042   C3           CLR     C
   \   000043   33           RLC     A
   \   000044   FC           MOV     R4,A
   \   000045   E4           CLR     A
   \   000046   33           RLC     A
   \   000047   FD           MOV     R5,A
   \   000048   E8           MOV     A,R0
   \   000049   2C           ADD     A,R4
   \   00004A   F582         MOV     DPL,A
   \   00004C   E9           MOV     A,R1
   \   00004D   3D           ADDC    A,R5
   \   00004E   F583         MOV     DPH,A
   \   000050   E0           MOVX    A,@DPTR
   \   000051   6E           XRL     A,R6
   \   000052   7003         JNZ     ??ZDO_AnyClusterMatches_5
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   6F           XRL     A,R7
   \                     ??ZDO_AnyClusterMatches_5:
   \   000057   70CB         JNZ     ??ZDO_AnyClusterMatches_4
    738                {
    739                  return true;
   \   000059   7901         MOV     R1,#0x1
   \   00005B   8002         SJMP    ??ZDO_AnyClusterMatches_6
    740                }
    741              }
    742            }
    743          
    744            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   00005D   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   00005F   80..         SJMP    ?Subroutine92
    745          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   A3           INC     DPTR
   \                     ??Subroutine53_0:
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   22           RET
    746          
    747          /*********************************************************************
    748           * Callback functions from ZDProfile
    749           */
    750          
    751          /*********************************************************************
    752           * @fn          ZDO_ProcessNodeDescReq
    753           *
    754           * @brief       This function processes and responds to the
    755           *              Node_Desc_req message.
    756           *
    757           * @param       src  - Source address
    758           * @param       msg - NWKAddrOfInterest
    759           * @param       sty - Security enable/disable
    760           *
    761           * @return      none
    762           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    763          void ZDO_ProcessNodeDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
   \                     ZDO_ProcessNodeDescReq:
    764          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine25 & 0xFFFF
    765            uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
    766            NodeDescriptorFormat_t *desc = NULL;
    767            byte stat = ZDP_INVALID_REQTYPE;
    768          
    769            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_73:
   \   000011   7004         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   000017   7026         JNZ     ??ZDO_ProcessNodeDescReq_1
    770            {
    771              desc = &ZDO_Config_Node_Descriptor;
    772            }
    773          #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
    774            else if ( CACHE_SERVER )
    775            {
    776              desc = (NodeDescriptorFormat_t *)ZDCacheGetDesc( aoi, eNodeDesc, &stat );
    777            }
    778          #endif
    779          
    780            if ( desc != NULL )
    781            {
    782              ZDP_NodeDescMsg( seq, src, aoi, desc, sty );
   \   000019                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   000019   ED           MOV     A,R5
   \   00001A   F5..         MOV     ?V0 + 2,A
   \   00001C   78..         MOV     R0,#?V0 + 2
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000021   75....       MOV     ?V0 + 2,#(ZDO_Config_Node_Descriptor & 0xff)
   \   000024   75....       MOV     ?V0 + 3,#((ZDO_Config_Node_Descriptor >> 8) & 0xff)
   \   000027   78..         MOV     R0,#?V0 + 2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   AC..         MOV     R4,?V0 + 0
   \   00002E   AD..         MOV     R5,?V0 + 1
   \   000030   90....       MOV     DPTR,#(ZDP_NodeDescMsg & 0xffff)
   \   000033   74..         MOV     A,#((ZDP_NodeDescMsg >> 16) & 0xff)
   \   000035   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003D   801F         SJMP    ??ZDO_ProcessNodeDescReq_2
    783            }
    784            else
    785            {
    786              ZDP_GenericRsp( seq, src, stat, aoi, Node_Desc_rsp, sty );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   00003F                ; Setup parameters for call to function ZDP_GenericRsp
   \   00003F   75..02       MOV     ?V0 + 2,#0x2
   \   000042   75..80       MOV     ?V0 + 3,#-0x80
   \   000045   78..         MOV     R0,#?V0 + 2
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C80         MOV     R4,#-0x80
   \   000051   90....       MOV     DPTR,#(ZDP_GenericRsp & 0xffff)
   \   000054   74..         MOV     A,#((ZDP_GenericRsp >> 16) & 0xff)
   \   000056   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
    787            }
    788          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   00005E                REQUIRE ?Subroutine92
   \   00005E                ; // Fall through to label ?Subroutine92

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FD           MOV     R5,A
   \   000002   8E82         MOV     DPL,R6
   \   000004   8F83         MOV     DPH,R7
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FF           MOV     R7,A
   \   00000C   E4           CLR     A
   \   00000D   25..         ADD     A,?V0 + 0
   \   00000F   EF           MOV     A,R7
   \   000010   3400         ADDC    A,#0x0
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000017   E0           MOVX    A,@DPTR
   \   000018   65..         XRL     A,?V0 + 0
   \   00001A   22           RET
    789          
    790          /*********************************************************************
    791           * @fn          ZDO_ProcessPowerDescReq
    792           *
    793           * @brief       This function processes and responds to the
    794           *              Node_Power_req message.
    795           *
    796           * @param       src  - Source address
    797           * @param       msg - NWKAddrOfInterest
    798           * @param       sty - Security enable/disable
    799           *
    800           * @return      none
    801           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    802          void ZDO_ProcessPowerDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
   \                     ZDO_ProcessPowerDescReq:
    803          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine25 & 0xFFFF
    804            uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
    805            NodePowerDescriptorFormat_t *desc = NULL;
    806            byte stat = ZDP_INVALID_REQTYPE;
    807          
    808            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_74:
   \   000011   7004         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   000017   7026         JNZ     ??ZDO_ProcessPowerDescReq_1
    809            {
    810              desc = &ZDO_Config_Power_Descriptor;
    811            }
    812          #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
    813            else if ( CACHE_SERVER )
    814            {
    815              desc = (NodePowerDescriptorFormat_t *)ZDCacheGetDesc(aoi,ePowerDesc,&stat);
    816            }
    817          #endif
    818          
    819            if ( desc != NULL )
    820            {
    821              ZDP_PowerDescMsg( seq, src, aoi, desc, sty );
   \   000019                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   000019   ED           MOV     A,R5
   \   00001A   F5..         MOV     ?V0 + 2,A
   \   00001C   78..         MOV     R0,#?V0 + 2
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000021   75....       MOV     ?V0 + 2,#(ZDO_Config_Power_Descriptor & 0xff)
   \   000024   75....       MOV     ?V0 + 3,#((ZDO_Config_Power_Descriptor >> 8) & 0xff)
   \   000027   78..         MOV     R0,#?V0 + 2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   AC..         MOV     R4,?V0 + 0
   \   00002E   AD..         MOV     R5,?V0 + 1
   \   000030   90....       MOV     DPTR,#(ZDP_PowerDescMsg & 0xffff)
   \   000033   74..         MOV     A,#((ZDP_PowerDescMsg >> 16) & 0xff)
   \   000035   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003D   801F         SJMP    ??ZDO_ProcessPowerDescReq_2
    822            }
    823            else
    824            {
    825              ZDP_GenericRsp( seq, src, stat, aoi, Power_Desc_rsp, sty );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   00003F                ; Setup parameters for call to function ZDP_GenericRsp
   \   00003F   75..03       MOV     ?V0 + 2,#0x3
   \   000042   75..80       MOV     ?V0 + 3,#-0x80
   \   000045   78..         MOV     R0,#?V0 + 2
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7C80         MOV     R4,#-0x80
   \   000051   90....       MOV     DPTR,#(ZDP_GenericRsp & 0xffff)
   \   000054   74..         MOV     A,#((ZDP_GenericRsp >> 16) & 0xff)
   \   000056   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
    826            }
    827          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   00005E   80..         SJMP    ?Subroutine92
    828          
    829          /*********************************************************************
    830           * @fn          ZDO_ProcessSimpleDescReq
    831           *
    832           * @brief       This function processes and responds to the
    833           *              Simple_Desc_req message.
    834           *
    835           * @param       src - Source address
    836           * @param       msg - message data
    837           * @param       sty - Security enable/disable
    838           *
    839           * @return      none
    840           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    841          void ZDO_ProcessSimpleDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
   \                     ZDO_ProcessSimpleDescReq:
    842          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   7410         MOV     A,#0x10
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine46 & 0xFFFF
    843            SimpleDescriptionFormat_t *sDesc = NULL;
   \                     ??CrossCallReturnLabel_124:
   \   000018   12....       LCALL   ?Subroutine12 & 0xFFFF
    844            uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_20:
   \   00001B   F8           MOV     R0,A
   \   00001C   E9           MOV     A,R1
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F9           MOV     R1,A
    845            byte endPoint = msg[2];
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
    846            byte free = false;
   \   000028   75..00       MOV     ?V0 + 5,#0x0
    847            byte stat = ZDP_SUCCESS;
   \   00002B   75..00       MOV     ?V0 + 4,#0x0
    848          
    849            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002E   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000030   C3           CLR     C
   \   000031   94F1         SUBB    A,#-0xf
   \   000033   4005         JC      ??ZDO_ProcessSimpleDescReq_1
    850            {
    851              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000035   75..82       MOV     ?V0 + 4,#-0x7e
   \   000038   8038         SJMP    ??ZDO_ProcessSimpleDescReq_2
    852            }
    853            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   68           XRL     A,R0
   \   00003F   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   69           XRL     A,R1
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000044   7029         JNZ     ??ZDO_ProcessSimpleDescReq_4
    854            {
    855              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000046                ; Setup parameters for call to function afFindSimpleDesc
   \   000046   EA           MOV     A,R2
   \   000047   F9           MOV     R1,A
   \   000048   85..82       MOV     DPL,?XSP + 0
   \   00004B   85..83       MOV     DPH,?XSP + 1
   \   00004E   AA82         MOV     R2,DPL
   \   000050   AB83         MOV     R3,DPH
   \   000052   90....       MOV     DPTR,#(afFindSimpleDesc & 0xffff)
   \   000055   74..         MOV     A,#((afFindSimpleDesc >> 16) & 0xff)
   \   000057   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005A   E9           MOV     A,R1
   \   00005B   F5..         MOV     ?V0 + 5,A
    856              if ( sDesc == NULL )
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   7002         JNZ     ??ZDO_ProcessSimpleDescReq_5
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000068   7008         JNZ     ??ZDO_ProcessSimpleDescReq_2
    857              {
    858                stat = ZDP_NOT_ACTIVE;
   \   00006A   75..83       MOV     ?V0 + 4,#-0x7d
   \   00006D   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    859              }
    860            }
    861          #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
    862            else if ( CACHE_SERVER )
    863            {
    864              stat = endPoint;
    865              sDesc = (SimpleDescriptionFormat_t *)ZDCacheGetDesc(aoi, eSimpDesc, &stat);
    866            }
    867          #endif
    868            else
    869            {
    870          #if defined ( RTR_NWK )
    871              stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   00006F   75..81       MOV     ?V0 + 4,#-0x7f
    872          #else
    873              stat = ZDP_INVALID_REQTYPE;
    874          #endif
    875            }
    876          
    877            ZDP_SimpleDescMsg( seq, src, stat, sDesc, Simple_Desc_rsp, sty );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000072                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000072   75..04       MOV     ?V0 + 2,#0x4
   \   000075   75..80       MOV     ?V0 + 3,#-0x80
   \   000078   78..         MOV     R0,#?V0 + 2
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000085   AD..         MOV     R5,?V0 + 1
   \   000087   AC..         MOV     R4,?V0 + 4
   \   000089   EE           MOV     A,R6
   \   00008A   FA           MOV     R2,A
   \   00008B   EF           MOV     A,R7
   \   00008C   FB           MOV     R3,A
   \   00008D   A9..         MOV     R1,?V0 + 0
   \   00008F   90....       MOV     DPTR,#(ZDP_SimpleDescMsg & 0xffff)
   \   000092   74..         MOV     A,#((ZDP_SimpleDescMsg >> 16) & 0xff)
   \   000094   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000097   7404         MOV     A,#0x4
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
    878          
    879            if ( free )
   \   00009C   E5..         MOV     A,?V0 + 5
   \   00009E   600C         JZ      ??ZDO_ProcessSimpleDescReq_6
    880            {
    881              osal_mem_free( sDesc );
   \   0000A0                ; Setup parameters for call to function osal_mem_free
   \   0000A0   85..82       MOV     DPL,?XSP + 0
   \   0000A3   85..83       MOV     DPH,?XSP + 1
   \   0000A6   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000A9   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    882            }
    883          }
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   0000AC   7402         MOV     A,#0x2
   \   0000AE   02....       LJMP    ?Subroutine103 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   E4           CLR     A
   \   00000B   2A           ADD     A,R2
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 1,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E4           CLR     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \                     ??Subroutine21_0:
   \   000004   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000007   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   00000A   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   00000C   22           RET
    884          
    885          /*********************************************************************
    886           * @fn          ZDO_ProcessActiveEPReq
    887           *
    888           * @brief       This function processes and responds to the
    889           *              Active_EP_req message.
    890           *
    891           * @param       src  - Source address
    892           * @param       sty - Security enable/disable
    893           *
    894           * @return      none
    895           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    896          void ZDO_ProcessActiveEPReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
   \                     ZDO_ProcessActiveEPReq:
    897          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   8B..         MOV     ?V0 + 7,R3
   \   00000B   7410         MOV     A,#0x10
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine60 & 0xFFFF
    898            uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_162:
   \   000013   12....       LCALL   ?Subroutine39 & 0xFFFF
    899            byte cnt = CACHE_EP_MAX;
    900            byte stat = ZDP_SUCCESS;
    901          
    902            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_94:
   \   000016   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6F           XRL     A,R7
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   00001B   7063         JNZ     ??ZDO_ProcessActiveEPReq_1
    903            {
    904              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   00001D                ; Setup parameters for call to function afNumEndPoints
   \   00001D   90....       MOV     DPTR,#(afNumEndPoints & 0xffff)
   \   000020   74..         MOV     A,#((afNumEndPoints >> 16) & 0xff)
   \   000022   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000025   E9           MOV     A,R1
   \   000026   14           DEC     A
   \   000027   F5..         MOV     ?V0 + 2,A
    905              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000029                ; Setup parameters for call to function afEndPoints
   \   000029   7901         MOV     R1,#0x1
   \   00002B   7A..         MOV     R2,#(??ZDOBuildBuf & 0xff)
   \   00002D   7B..         MOV     R3,#((??ZDOBuildBuf >> 8) & 0xff)
   \   00002F   90....       MOV     DPTR,#(afEndPoints & 0xffff)
   \   000032   74..         MOV     A,#((afEndPoints >> 16) & 0xff)
   \   000034   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    906            }
    907          #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
    908            else if ( CACHE_SERVER )
    909            {
    910              cnt = *((byte *)ZDCacheGetDesc(aoi, eActEPDesc, (uint8 *)ZDOBuildBuf));
    911              // If cnt = 0, err code in 1st byte of buf, otherwise EP list is in the buf.
    912              if ( cnt == 0 )
    913              {
    914                stat = ZDOBuildBuf[0];
    915              }
    916            }
    917          #endif
    918            else
    919            {
    920              stat = ZDP_INVALID_REQTYPE;
    921            }
    922          
    923            if ( cnt != CACHE_EP_MAX )
   \   000037   7404         MOV     A,#0x4
   \   000039   65..         XRL     A,?V0 + 2
   \   00003B   6043         JZ      ??ZDO_ProcessActiveEPReq_1
    924            {
    925              ZDP_ActiveEPRsp( seq, src, stat, aoi, cnt, (uint8 *)ZDOBuildBuf, sty );
   \   00003D                ; Setup parameters for call to function ZDP_EPRsp
   \   00003D   78..         MOV     R0,#?V0 + 1
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   75....       MOV     ?V0 + 4,#(??ZDOBuildBuf & 0xff)
   \   000045   75....       MOV     ?V0 + 5,#((??ZDOBuildBuf >> 8) & 0xff)
   \   000048   78..         MOV     R0,#?V0 + 4
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   E5..         MOV     A,?V0 + 2
   \   00004F   F5..         MOV     ?V0 + 1,A
   \   000051   78..         MOV     R0,#?V0 + 1
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   8E..         MOV     ?V0 + 2,R6
   \   000058   8F..         MOV     ?V0 + 3,R7
   \   00005A   78..         MOV     R0,#?V0 + 2
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   75..00       MOV     ?V0 + 1,#0x0
   \   000062   78..         MOV     R0,#?V0 + 1
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000067   AC..         MOV     R4,?V0 + 6
   \   000069   AD..         MOV     R5,?V0 + 7
   \   00006B   A9..         MOV     R1,?V0 + 0
   \   00006D   7A05         MOV     R2,#0x5
   \   00006F   7B80         MOV     R3,#-0x80
   \   000071   90....       MOV     DPTR,#(ZDP_EPRsp & 0xffff)
   \   000074   74..         MOV     A,#((ZDP_EPRsp >> 16) & 0xff)
   \   000076   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000079   7407         MOV     A,#0x7
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   802B         SJMP    ??ZDO_ProcessActiveEPReq_2
    926            }
    927            else
    928            {
    929              ZDP_GenericRsp( seq, src, ZDP_NOT_SUPPORTED, aoi, Active_EP_rsp, sty );
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000080                ; Setup parameters for call to function ZDP_GenericRsp
   \   000080   75..05       MOV     ?V0 + 2,#0x5
   \   000083   75..80       MOV     ?V0 + 3,#-0x80
   \   000086   78..         MOV     R0,#?V0 + 2
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   8E..         MOV     ?V0 + 2,R6
   \   00008D   8F..         MOV     ?V0 + 3,R7
   \   00008F   78..         MOV     R0,#?V0 + 2
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   AD..         MOV     R5,?V0 + 1
   \   000096   7C84         MOV     R4,#-0x7c
   \   000098   AA..         MOV     R2,?V0 + 6
   \   00009A   AB..         MOV     R3,?V0 + 7
   \   00009C   A9..         MOV     R1,?V0 + 0
   \   00009E   90....       MOV     DPTR,#(ZDP_GenericRsp & 0xffff)
   \   0000A1   74..         MOV     A,#((ZDP_GenericRsp >> 16) & 0xff)
   \   0000A3   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000A6   7404         MOV     A,#0x4
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
    930            }
    931          }
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   0000AB   02....       LJMP    ??Subroutine93_0 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 1,A
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   E4           CLR     A
   \   000004   2A           ADD     A,R2
   \   000005   FE           MOV     R6,A
   \   000006   E9           MOV     A,R1
   \   000007   3400         ADDC    A,#0x0
   \   000009   FF           MOV     R7,A
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6E           XRL     A,R6
   \   00000F   22           RET
    932          
    933          /*********************************************************************
    934           * @fn          ZDO_ProcessMatchDescReq
    935           *
    936           * @brief       This function processes and responds to the
    937           *              Match_Desc_req message.
    938           *
    939           * @param       src  - Source address
    940           * @param       msg - input message containing search material
    941           * @param       sty - Security enable/disable
    942           *
    943           * @return      none
    944           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    945          void ZDO_ProcessMatchDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
   \                     ZDO_ProcessMatchDescReq:
    946          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   740B         MOV     A,#0xb
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   740C         MOV     A,#0xc
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine20 & 0xFFFF
    947            byte epCnt = 0;
   \                     ??CrossCallReturnLabel_43:
   \   000019   7405         MOV     A,#0x5
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   12....       LCALL   ?Subroutine12 & 0xFFFF
    948            byte numInClusters;
    949            uint16 *inClusters;
    950            byte numOutClusters;
    951            uint16 *outClusters;
    952            epList_t *epDesc;
    953            SimpleDescriptionFormat_t *sDesc = NULL;
    954            uint8 allocated;
    955          
    956            // Parse the incoming message
    957            uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_21:
   \   000022   FE           MOV     R6,A
   \   000023   E9           MOV     A,R1
   \   000024   3400         ADDC    A,#0x0
   \   000026   FF           MOV     R7,A
    958            uint16 profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FA           MOV     R2,A
   \   00002F   8C82         MOV     DPL,R4
   \   000031   8D83         MOV     DPH,R5
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   E4           CLR     A
   \   000039   2A           ADD     A,R2
   \   00003A   F5..         MOV     ?V0 + 0,A
   \   00003C   E9           MOV     A,R1
   \   00003D   12....       LCALL   ??Subroutine67_0 & 0xFFFF
    959            msg += 4;
   \                     ??CrossCallReturnLabel_182:
   \   000040   EC           MOV     A,R4
   \   000041   2404         ADD     A,#0x4
   \   000043   F5..         MOV     ?V0 + 2,A
   \   000045   ED           MOV     A,R5
   \   000046   3400         ADDC    A,#0x0
    960            numInClusters = *msg++;
   \   000048   85..82       MOV     DPL,?V0 + 2
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V0 + 7,A
   \   000050   A3           INC     DPTR
   \   000051   8582..       MOV     ?V0 + 2,DPL
   \   000054   8583..       MOV     ?V0 + 3,DPH
    961            inClusters = NULL;
   \   000057   7406         MOV     A,#0x6
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E4           CLR     A
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   F0           MOVX    @DPTR,A
    962            if (numInClusters)  {
   \   000060   E5..         MOV     A,?V0 + 7
   \   000062   6022         JZ      ??ZDO_ProcessMatchDescReq_0
    963              if (!(inClusters=ZDO_CreateAlignedUINT16List(numInClusters, msg)))  {
   \   000064                ; Setup parameters for call to function ZDO_CreateAlignedUINT16List
   \   000064   AA..         MOV     R2,?V0 + 2
   \   000066   AB..         MOV     R3,?V0 + 3
   \   000068   F9           MOV     R1,A
   \   000069   90....       MOV     DPTR,#(??ZDO_CreateAlignedUINT16List & 0xffff)
   \   00006C   74..         MOV     A,#((??ZDO_CreateAlignedUINT16List >> 16) & 0xff)
   \   00006E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000071   8A..         MOV     ?V0 + 4,R2
   \   000073   8B..         MOV     ?V0 + 5,R3
   \   000075   A8..         MOV     R0,?V0 + 4
   \   000077   A9..         MOV     R1,?V0 + 5
   \   000079   7406         MOV     A,#0x6
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000081   7001         JNZ     ??ZDO_ProcessMatchDescReq_1
   \   000083   E9           MOV     A,R1
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   000084   606C         JZ      ??ZDO_ProcessMatchDescReq_2
    964                // can't allocate memory. drop message
    965                return;
    966              }
    967            }
    968            msg += numInClusters*sizeof(uint16);
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000086   E5..         MOV     A,?V0 + 7
   \   000088   C3           CLR     C
   \   000089   33           RLC     A
   \   00008A   F8           MOV     R0,A
   \   00008B   E4           CLR     A
   \   00008C   33           RLC     A
   \   00008D   F9           MOV     R1,A
   \   00008E   E5..         MOV     A,?V0 + 2
   \   000090   28           ADD     A,R0
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   E5..         MOV     A,?V0 + 3
   \   000095   39           ADDC    A,R1
   \   000096   F5..         MOV     ?V0 + 3,A
    969          
    970            numOutClusters = *msg++;
   \   000098   85..82       MOV     DPL,?V0 + 2
   \   00009B   F583         MOV     DPH,A
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   85..82       MOV     DPL,?XSP + 0
   \   0000A1   85..83       MOV     DPH,?XSP + 1
   \   0000A4   F0           MOVX    @DPTR,A
    971            outClusters = NULL;
   \   0000A5   7408         MOV     A,#0x8
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   E4           CLR     A
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   12....       LCALL   ?Subroutine5 & 0xFFFF
    972            if (numOutClusters)  {
   \                     ??CrossCallReturnLabel_9:
   \   0000B0   6045         JZ      ??ZDO_ProcessMatchDescReq_3
    973              if (!(outClusters=ZDO_CreateAlignedUINT16List(numOutClusters, msg)))  {
   \   0000B2                ; Setup parameters for call to function ZDO_CreateAlignedUINT16List
   \   0000B2   85..82       MOV     DPL,?V0 + 2
   \   0000B5   85..83       MOV     DPH,?V0 + 3
   \   0000B8   A3           INC     DPTR
   \   0000B9   AA82         MOV     R2,DPL
   \   0000BB   AB83         MOV     R3,DPH
   \   0000BD   F9           MOV     R1,A
   \   0000BE   90....       MOV     DPTR,#(??ZDO_CreateAlignedUINT16List & 0xffff)
   \   0000C1   74..         MOV     A,#((??ZDO_CreateAlignedUINT16List >> 16) & 0xff)
   \   0000C3   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000C6   8A..         MOV     ?V0 + 2,R2
   \   0000C8   8B..         MOV     ?V0 + 3,R3
   \   0000CA   A8..         MOV     R0,?V0 + 2
   \   0000CC   A9..         MOV     R1,?V0 + 3
   \   0000CE   7408         MOV     A,#0x8
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000D6   7001         JNZ     ??ZDO_ProcessMatchDescReq_4
   \   0000D8   E9           MOV     A,R1
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000D9   701C         JNZ     ??ZDO_ProcessMatchDescReq_3
    974                // can't allocate memory. drop message
    975                if (inClusters) {
   \   0000DB   7406         MOV     A,#0x6
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   7002         JNZ     ??ZDO_ProcessMatchDescReq_5
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000E5   600B         JZ      ??ZDO_ProcessMatchDescReq_2
    976                  osal_mem_free(inClusters);
   \   0000E7                ; Setup parameters for call to function osal_mem_free
   \   0000E7   7406         MOV     A,#0x6
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000EF   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   0000F2   740E         MOV     A,#0xe
   \   0000F4   02....       LJMP    ?Subroutine93 & 0xFFFF
    977                }
    978                return;
    979              }
    980            }
    981            msg += numOutClusters*sizeof(uint16);
    982          
    983            if ( NWK_BROADCAST_SHORTADDR_DEVALL == aoi )
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0000F7   74FF         MOV     A,#-0x1
   \   0000F9   6E           XRL     A,R6
   \   0000FA   7003         JNZ     ??ZDO_ProcessMatchDescReq_7
   \   0000FC   74FF         MOV     A,#-0x1
   \   0000FE   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   0000FF   6050         JZ      ??ZDO_ProcessMatchDescReq_8
    984            {
    985          #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
    986              if ( CACHE_SERVER )
    987              {
    988                ZDCacheProcessMatchDescReq( seq, src, numInClusters, inClusters,
    989                                      numOutClusters, outClusters, profileID, aoi, sty );
    990              }
    991          #endif
    992            }
    993            else if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000101                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000101   EE           MOV     A,R6
   \   000102   FA           MOV     R2,A
   \   000103   EF           MOV     A,R7
   \   000104   FB           MOV     R3,A
   \   000105   90....       MOV     DPTR,#(NLME_IsAddressBroadcast & 0xffff)
   \   000108   74..         MOV     A,#((NLME_IsAddressBroadcast >> 16) & 0xff)
   \   00010A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00010D   E9           MOV     A,R1
   \   00010E   6401         XRL     A,#0x1
   \   000110   7027         JNZ     ??ZDO_ProcessMatchDescReq_9
    994            {
    995              ZDP_MatchDescRsp( seq, src, ZDP_INVALID_REQTYPE,
    996                                             ZDAppNwkAddr.addr.shortAddr, 0, NULL, sty );
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000112                ; Setup parameters for call to function ZDP_EPRsp
   \   000112   741E         MOV     A,#0x1e
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   00011A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011D   75..00       MOV     ?V0 + 0,#0x0
   \   000120   75..00       MOV     ?V0 + 1,#0x0
   \   000123   78..         MOV     R0,#?V0 + 0
   \   000125   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000128   78..         MOV     R0,#?V0 + 0
   \   00012A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012D   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000130   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000133   75..80       MOV     ?V0 + 0,#-0x80
   \   000136   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    997              if (inClusters)  {
    998                osal_mem_free(inClusters);
    999              }
   1000              if (outClusters)  {
   1001                osal_mem_free(outClusters);
   1002              }
   1003              return;
   1004            }
   1005            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000139                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000139   EE           MOV     A,R6
   \   00013A   FA           MOV     R2,A
   \   00013B   EF           MOV     A,R7
   \   00013C   FB           MOV     R3,A
   \   00013D   74..         MOV     A,#((NLME_IsAddressBroadcast >> 16) & 0xff)
   \   00013F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000142   E9           MOV     A,R1
   \   000143   700C         JNZ     ??ZDO_ProcessMatchDescReq_8
   \   000145   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000148   E0           MOVX    A,@DPTR
   \   000149   6E           XRL     A,R6
   \   00014A   7003         JNZ     ??ZDO_ProcessMatchDescReq_12
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   00014F   70C1         JNZ     ??ZDO_ProcessMatchDescReq_10
   1006            {
   1007          #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
   1008              if ( CACHE_SERVER )
   1009              {
   1010                ZDCacheProcessMatchDescReq( seq, src, numInClusters, inClusters,
   1011                                      numOutClusters, outClusters, profileID, aoi, sty );
   1012              }
   1013          #else
   1014              ZDP_MatchDescRsp( seq, src, ZDP_INVALID_REQTYPE,
   1015                                             ZDAppNwkAddr.addr.shortAddr, 0, NULL, sty );
   1016          #endif
   1017              if (inClusters)  {
   1018                osal_mem_free(inClusters);
   1019              }
   1020              if (outClusters)  {
   1021                osal_mem_free(outClusters);
   1022              }
   1023              return;
   1024            }
   1025          
   1026            // First count the number of endpoints that match.
   1027            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000151   90....       MOV     DPTR,#epList
   \   000154   8062         SJMP    ??ZDO_ProcessMatchDescReq_13
   1028            while ( epDesc )
   1029            {
   1030              // Don't search endpoint 0 and check if response is allowed
   1031              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
   1032              {
   1033                if ( epDesc->pfnDescCB )
   1034                {
   1035                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
   1036                  allocated = TRUE;
   1037                }
   1038                else
   1039                {
   1040                  sDesc = epDesc->epDesc->simpleDesc;
   1041                  allocated = FALSE;
   1042                }
   1043          
   1044                if ( sDesc && sDesc->AppProfId == profileID )
   1045                {
   1046                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
   1047          
   1048                  // If there are no search input/ouput clusters - respond
   1049                  if ( ((numInClusters == 0) && (numOutClusters == 0))
   1050                      // Are there matching input clusters?
   1051                       || (ZDO_AnyClusterMatches( numInClusters, inClusters,
   1052                            sDesc->AppNumInClusters, sDesc->pAppInClusterList ))
   1053                      // Are there matching output clusters?
   1054                       || (ZDO_AnyClusterMatches( numOutClusters, outClusters,
   1055                            sDesc->AppNumOutClusters, sDesc->pAppOutClusterList ))     )
   1056                  {         
   1057                    // Notify the endpoint of the match.
   1058                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
   1059                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
   1060          
   1061                    if (pRspSent)
   1062                    {
   1063                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
   1064                      pRspSent->nwkAddr = src->addr.shortAddr;
   1065                      pRspSent->numInClusters = numInClusters;
   1066                      pRspSent->numOutClusters = numOutClusters;
   1067          
   1068                      if (numInClusters)
   1069                      {
   1070                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
   1071                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
   1072                      }
   1073                      else 
   1074                      {
   1075                        pRspSent->pInClusters = NULL;
   1076                      }
   1077                       
   1078                      if (numOutClusters)
   1079                      {
   1080                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
   1081                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
   1082                      }
   1083                      else 
   1084                      {
   1085                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000156   8E82         MOV     DPL,R6
   \   000158   8F83         MOV     DPH,R7
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   E4           CLR     A
   \   000163   F0           MOVX    @DPTR,A
   \   000164   A3           INC     DPTR
   \   000165   F0           MOVX    @DPTR,A
   1086                      }
   1087                    
   1088                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000166                ; Setup parameters for call to function osal_msg_send
   \   000166   EE           MOV     A,R6
   \   000167   FA           MOV     R2,A
   \   000168   EF           MOV     A,R7
   \   000169   FB           MOV     R3,A
   \   00016A   7401         MOV     A,#0x1
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000172   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000175   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1089                    }
   1090          
   1091                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   000178   7403         MOV     A,#0x3
   \   00017A   12....       LCALL   ?XSTACK_DISP0_8
   \   00017D   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000180   C0E0         PUSH    A
   \   000182   7405         MOV     A,#0x5
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   E0           MOVX    A,@DPTR
   \   000188   24..         ADD     A,#(??ZDOBuildBuf & 0xff)
   \   00018A   F582         MOV     DPL,A
   \   00018C   E4           CLR     A
   \   00018D   34..         ADDC    A,#((??ZDOBuildBuf >> 8) & 0xff)
   \   00018F   F583         MOV     DPH,A
   \   000191   D0E0         POP     A
   \   000193   F0           MOVX    @DPTR,A
   \   000194   7405         MOV     A,#0x5
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   04           INC     A
   \   00019B   F0           MOVX    @DPTR,A
   1092                  }
   1093                }
   1094          
   1095                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   00019C   740A         MOV     A,#0xa
   \   00019E   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   600B         JZ      ??ZDO_ProcessMatchDescReq_18
   1096                  osal_mem_free( sDesc );
   \   0001A4                ; Setup parameters for call to function osal_mem_free
   \   0001A4   7403         MOV     A,#0x3
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001AC   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1097              }
   1098              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   0001AF   7401         MOV     A,#0x1
   \   0001B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B4   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   0001B7   A3           INC     DPTR
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   0001B8   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001C1   7401         MOV     A,#0x1
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   7002         JNZ     ??ZDO_ProcessMatchDescReq_19
   \   0001C9   A3           INC     DPTR
   \   0001CA   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0001CB   7003         JNZ     $+5
   \   0001CD   02....       LJMP    ??ZDO_ProcessMatchDescReq_20 & 0xFFFF
   \   0001D0   7401         MOV     A,#0x1
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   E0           MOVX    A,@DPTR
   \   0001D6   F8           MOV     R0,A
   \   0001D7   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0001DA   60D3         JZ      ??ZDO_ProcessMatchDescReq_18
   \   0001DC   7401         MOV     A,#0x1
   \   0001DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E1   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001E7   50C6         JNC     ??ZDO_ProcessMatchDescReq_18
   \   0001E9   7401         MOV     A,#0x1
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   12....       LCALL   ??Subroutine48_1 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   A3           INC     DPTR
   \   0001F5   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0001F8   FD           MOV     R5,A
   \   0001F9   A3           INC     DPTR
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   FE           MOV     R6,A
   \   0001FC   7900         MOV     R1,#0x0
   \   0001FE   EC           MOV     A,R4
   \   0001FF   4D           ORL     A,R5
   \   000200   4E           ORL     A,R6
   \   000201   602A         JZ      ??ZDO_ProcessMatchDescReq_21
   \   000203                ; Setup parameters for indirect call
   \   000203   7401         MOV     A,#0x1
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00020B   FA           MOV     R2,A
   \   00020C   09           INC     R1
   \   00020D   E9           MOV     A,R1
   \   00020E   12....       LCALL   ?XSTACK_DISP0_8
   \   000211   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000214   E0           MOVX    A,@DPTR
   \   000215   8C82         MOV     DPL,R4
   \   000217   8D83         MOV     DPH,R5
   \   000219   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00021C   7403         MOV     A,#0x3
   \   00021E   12....       LCALL   ?XSTACK_DISP0_8
   \   000221   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000224   740A         MOV     A,#0xa
   \   000226   12....       LCALL   ?XSTACK_DISP0_8
   \   000229   7401         MOV     A,#0x1
   \   00022B   801A         SJMP    ??ZDO_ProcessMatchDescReq_22
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   00022D   7401         MOV     A,#0x1
   \   00022F   12....       LCALL   ?XSTACK_DISP0_8
   \   000232   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000235   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000238   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00023B   12....       LCALL   ?XSTACK_DISP0_8
   \   00023E   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000241   740A         MOV     A,#0xa
   \   000243   12....       LCALL   ?XSTACK_DISP0_8
   \   000246   E4           CLR     A
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   000247   F0           MOVX    @DPTR,A
   \   000248   7403         MOV     A,#0x3
   \   00024A   12....       LCALL   ?XSTACK_DISP0_8
   \   00024D   E0           MOVX    A,@DPTR
   \   00024E   7002         JNZ     ??ZDO_ProcessMatchDescReq_23
   \   000250   A3           INC     DPTR
   \   000251   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   000252   7003         JNZ     $+5
   \   000254   02....       LJMP    ??ZDO_ProcessMatchDescReq_17 & 0xFFFF
   \   000257   7403         MOV     A,#0x3
   \   000259   12....       LCALL   ?XSTACK_DISP0_8
   \   00025C   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   65..         XRL     A,?V0 + 0
   \   000262   7004         JNZ     ??ZDO_ProcessMatchDescReq_24
   \   000264   A3           INC     DPTR
   \   000265   E0           MOVX    A,@DPTR
   \   000266   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   000268   6003         JZ      $+5
   \   00026A   02....       LJMP    ??ZDO_ProcessMatchDescReq_17 & 0xFFFF
   \   00026D   E5..         MOV     A,?V0 + 7
   \   00026F   7009         JNZ     ??ZDO_ProcessMatchDescReq_25
   \   000271   85..82       MOV     DPL,?XSP + 0
   \   000274   85..83       MOV     DPH,?XSP + 1
   \   000277   E0           MOVX    A,@DPTR
   \   000278   6069         JZ      ??ZDO_ProcessMatchDescReq_26
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   00027A                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00027A   7403         MOV     A,#0x3
   \   00027C   12....       LCALL   ?XSTACK_DISP0_8
   \   00027F   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000282   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000285   7405         MOV     A,#0x5
   \   000287   12....       LCALL   ?XSTACK_DISP0_8
   \   00028A   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00028D   A3           INC     DPTR
   \   00028E   A3           INC     DPTR
   \   00028F   E0           MOVX    A,@DPTR
   \   000290   FC           MOV     R4,A
   \   000291   7408         MOV     A,#0x8
   \   000293   12....       LCALL   ?XSTACK_DISP0_8
   \   000296   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000299   A9..         MOV     R1,?V0 + 7
   \   00029B   90....       MOV     DPTR,#(ZDO_AnyClusterMatches & 0xffff)
   \   00029E   74..         MOV     A,#((ZDO_AnyClusterMatches >> 16) & 0xff)
   \   0002A0   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0002A3   7402         MOV     A,#0x2
   \   0002A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A8   E9           MOV     A,R1
   \   0002A9   7038         JNZ     ??ZDO_ProcessMatchDescReq_26
   \   0002AB                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0002AB   7403         MOV     A,#0x3
   \   0002AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B0   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   0002B3   A3           INC     DPTR
   \   0002B4   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0002B7   7405         MOV     A,#0x5
   \   0002B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BC   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   FC           MOV     R4,A
   \   0002C1   740A         MOV     A,#0xa
   \   0002C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C6   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0002C9   7402         MOV     A,#0x2
   \   0002CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   F9           MOV     R1,A
   \   0002D0   90....       MOV     DPTR,#(ZDO_AnyClusterMatches & 0xffff)
   \   0002D3   74..         MOV     A,#((ZDO_AnyClusterMatches >> 16) & 0xff)
   \   0002D5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0002D8   7402         MOV     A,#0x2
   \   0002DA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002DD   E9           MOV     A,R1
   \   0002DE   7003         JNZ     $+5
   \   0002E0   02....       LJMP    ??ZDO_ProcessMatchDescReq_17 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   0002E3                ; Setup parameters for call to function osal_msg_allocate
   \   0002E3   85..82       MOV     DPL,?XSP + 0
   \   0002E6   85..83       MOV     DPH,?XSP + 1
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   25..         ADD     A,?V0 + 7
   \   0002EC   C3           CLR     C
   \   0002ED   33           RLC     A
   \   0002EE   240A         ADD     A,#0xa
   \   0002F0   FA           MOV     R2,A
   \   0002F1   7B00         MOV     R3,#0x0
   \   0002F3   90....       MOV     DPTR,#(osal_msg_allocate & 0xffff)
   \   0002F6   74..         MOV     A,#((osal_msg_allocate >> 16) & 0xff)
   \   0002F8   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0002FB   8A..         MOV     ?V0 + 2,R2
   \   0002FD   8B..         MOV     ?V0 + 3,R3
   \   0002FF   AE..         MOV     R6,?V0 + 2
   \   000301   AF..         MOV     R7,?V0 + 3
   \   000303   EE           MOV     A,R6
   \   000304   7001         JNZ     ??ZDO_ProcessMatchDescReq_27
   \   000306   EF           MOV     A,R7
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   000307   7003         JNZ     $+5
   \   000309   02....       LJMP    ??ZDO_ProcessMatchDescReq_16 & 0xFFFF
   \   00030C   74DB         MOV     A,#-0x25
   \   00030E   8E82         MOV     DPL,R6
   \   000310   8F83         MOV     DPH,R7
   \   000312   F0           MOVX    @DPTR,A
   \   000313   740C         MOV     A,#0xc
   \   000315   12....       LCALL   ?XSTACK_DISP0_8
   \   000318   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00031B   F8           MOV     R0,A
   \   00031C   A3           INC     DPTR
   \   00031D   E0           MOVX    A,@DPTR
   \   00031E   F9           MOV     R1,A
   \   00031F   8E82         MOV     DPL,R6
   \   000321   8F83         MOV     DPH,R7
   \   000323   A3           INC     DPTR
   \   000324   A3           INC     DPTR
   \   000325   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000328   8E82         MOV     DPL,R6
   \   00032A   8F83         MOV     DPH,R7
   \   00032C   A3           INC     DPTR
   \   00032D   A3           INC     DPTR
   \   00032E   A3           INC     DPTR
   \   00032F   A3           INC     DPTR
   \   000330   E5..         MOV     A,?V0 + 7
   \   000332   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000335   8E82         MOV     DPL,R6
   \   000337   8F83         MOV     DPH,R7
   \   000339   A3           INC     DPTR
   \   00033A   A3           INC     DPTR
   \   00033B   A3           INC     DPTR
   \   00033C   A3           INC     DPTR
   \   00033D   A3           INC     DPTR
   \   00033E   A3           INC     DPTR
   \   00033F   A3           INC     DPTR
   \   000340   F0           MOVX    @DPTR,A
   \   000341   E5..         MOV     A,?V0 + 7
   \   000343   6034         JZ      ??ZDO_ProcessMatchDescReq_28
   \   000345   EE           MOV     A,R6
   \   000346   2405         ADD     A,#0x5
   \   000348   FA           MOV     R2,A
   \   000349   EF           MOV     A,R7
   \   00034A   3400         ADDC    A,#0x0
   \   00034C   FB           MOV     R3,A
   \   00034D   EE           MOV     A,R6
   \   00034E   240A         ADD     A,#0xa
   \   000350   F8           MOV     R0,A
   \   000351   EF           MOV     A,R7
   \   000352   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000355                ; Setup parameters for call to function osal_memcpy
   \   000355   7406         MOV     A,#0x6
   \   000357   12....       LCALL   ?XSTACK_DISP0_8
   \   00035A   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00035D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000360   E5..         MOV     A,?V0 + 7
   \   000362   C3           CLR     C
   \   000363   33           RLC     A
   \   000364   FC           MOV     R4,A
   \   000365   E4           CLR     A
   \   000366   33           RLC     A
   \   000367   FD           MOV     R5,A
   \   000368   8A82         MOV     DPL,R2
   \   00036A   8B83         MOV     DPH,R3
   \   00036C   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00036F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000372   7403         MOV     A,#0x3
   \   000374   12....       LCALL   ?DEALLOC_XSTACK8
   \   000377   800D         SJMP    ??ZDO_ProcessMatchDescReq_29
   \                     ??ZDO_ProcessMatchDescReq_28:
   \   000379   8E82         MOV     DPL,R6
   \   00037B   8F83         MOV     DPH,R7
   \   00037D   A3           INC     DPTR
   \   00037E   A3           INC     DPTR
   \   00037F   A3           INC     DPTR
   \   000380   A3           INC     DPTR
   \   000381   A3           INC     DPTR
   \   000382   E4           CLR     A
   \   000383   F0           MOVX    @DPTR,A
   \   000384   A3           INC     DPTR
   \   000385   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_29:
   \   000386   85..82       MOV     DPL,?XSP + 0
   \   000389   85..83       MOV     DPH,?XSP + 1
   \   00038C   E0           MOVX    A,@DPTR
   \   00038D   7003         JNZ     $+5
   \   00038F   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   000392   E5..         MOV     A,?V0 + 7
   \   000394   C3           CLR     C
   \   000395   33           RLC     A
   \   000396   F8           MOV     R0,A
   \   000397   E4           CLR     A
   \   000398   33           RLC     A
   \   000399   F9           MOV     R1,A
   \   00039A   EE           MOV     A,R6
   \   00039B   28           ADD     A,R0
   \   00039C   F8           MOV     R0,A
   \   00039D   EF           MOV     A,R7
   \   00039E   39           ADDC    A,R1
   \   00039F   F9           MOV     R1,A
   \   0003A0   740A         MOV     A,#0xa
   \   0003A2   28           ADD     A,R0
   \   0003A3   FA           MOV     R2,A
   \   0003A4   E4           CLR     A
   \   0003A5   39           ADDC    A,R1
   \   0003A6   FB           MOV     R3,A
   \   0003A7   8E82         MOV     DPL,R6
   \   0003A9   8F83         MOV     DPH,R7
   \   0003AB   A3           INC     DPTR
   \   0003AC   A3           INC     DPTR
   \   0003AD   A3           INC     DPTR
   \   0003AE   A3           INC     DPTR
   \   0003AF   A3           INC     DPTR
   \   0003B0   A3           INC     DPTR
   \   0003B1   A3           INC     DPTR
   \   0003B2   A3           INC     DPTR
   \   0003B3   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0003B6                ; Setup parameters for call to function osal_memcpy
   \   0003B6   7408         MOV     A,#0x8
   \   0003B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0003BB   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0003BE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003C1   7403         MOV     A,#0x3
   \   0003C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C6   E0           MOVX    A,@DPTR
   \   0003C7   C3           CLR     C
   \   0003C8   33           RLC     A
   \   0003C9   FC           MOV     R4,A
   \   0003CA   E4           CLR     A
   \   0003CB   33           RLC     A
   \   0003CC   FD           MOV     R5,A
   \   0003CD   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   0003D0   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   0003D2   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0003D5   7403         MOV     A,#0x3
   \   0003D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003DA   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   1099            }
   1100          
   1101            // Send the message only if at least one match found.
   1102            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0003DD   7405         MOV     A,#0x5
   \   0003DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E2   E0           MOVX    A,@DPTR
   \   0003E3   6050         JZ      ??ZDO_ProcessMatchDescReq_30
   1103            {
   1104              if ( ZSuccess == ZDP_MatchDescRsp( seq, src, ZDP_SUCCESS,
   1105                                 ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, sty ) )
   \   0003E5                ; Setup parameters for call to function ZDP_EPRsp
   \   0003E5   741E         MOV     A,#0x1e
   \   0003E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EA   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   0003ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003F0   75....       MOV     ?V0 + 0,#(??ZDOBuildBuf & 0xff)
   \   0003F3   75....       MOV     ?V0 + 1,#((??ZDOBuildBuf >> 8) & 0xff)
   \   0003F6   78..         MOV     R0,#?V0 + 0
   \   0003F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003FB   7408         MOV     A,#0x8
   \   0003FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000400   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000403   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000406   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000409   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00040C   75..00       MOV     ?V0 + 0,#0x0
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00040F   78..         MOV     R0,#?V0 + 0
   \   000411   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000414   7413         MOV     A,#0x13
   \   000416   12....       LCALL   ?XSTACK_DISP0_8
   \   000419   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00041C   FD           MOV     R5,A
   \   00041D   7412         MOV     A,#0x12
   \   00041F   12....       LCALL   ?XSTACK_DISP0_8
   \   000422   E0           MOVX    A,@DPTR
   \   000423   F9           MOV     R1,A
   \   000424   7A06         MOV     R2,#0x6
   \   000426   7B80         MOV     R3,#-0x80
   \   000428   90....       MOV     DPTR,#(ZDP_EPRsp & 0xffff)
   \   00042B   74..         MOV     A,#((ZDP_EPRsp >> 16) & 0xff)
   \   00042D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000430   7407         MOV     A,#0x7
   \   000432   12....       LCALL   ?DEALLOC_XSTACK8
   1106              {
   1107          #if defined( LCD_SUPPORTED )
   1108                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   1109          #endif
   1110              }
   1111            }
   1112            else
   1113            {
   1114          #if defined( LCD_SUPPORTED )
   1115              HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   1116          #endif
   1117            }
   1118            if (inClusters)  {
   \                     ??ZDO_ProcessMatchDescReq_30:
   \   000435   7406         MOV     A,#0x6
   \   000437   12....       LCALL   ?XSTACK_DISP0_8
   \   00043A   E0           MOVX    A,@DPTR
   \   00043B   7002         JNZ     ??ZDO_ProcessMatchDescReq_31
   \   00043D   A3           INC     DPTR
   \   00043E   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_31:
   \   00043F   600B         JZ      ??ZDO_ProcessMatchDescReq_32
   \   000441                ; Setup parameters for call to function osal_mem_free
   \   000441   7406         MOV     A,#0x6
   \   000443   12....       LCALL   ?XSTACK_DISP0_8
   \   000446   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000449   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??ZDO_ProcessMatchDescReq_32:
   \   00044C   7408         MOV     A,#0x8
   \   00044E   12....       LCALL   ?XSTACK_DISP0_8
   \   000451   E0           MOVX    A,@DPTR
   \   000452   7002         JNZ     ??ZDO_ProcessMatchDescReq_33
   \   000454   A3           INC     DPTR
   \   000455   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_33:
   \   000456   7003         JNZ     $+5
   \   000458   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
   \   00045B                ; Setup parameters for call to function osal_mem_free
   \   00045B   7408         MOV     A,#0x8
   \   00045D   02....       LJMP    ??ZDO_ProcessMatchDescReq_6 & 0xFFFF
   1119              osal_mem_free(inClusters);
   1120            }
   1121            if (outClusters)  {
   1122              osal_mem_free(outClusters);
   1123            }
   1124          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   75..00       MOV     ?V0 + 6,#0x0
   \   00000A   78..         MOV     R0,#?V0 + 4
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   80..         SJMP    ??Subroutine97_1

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \                     ??Subroutine36_0:
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   7403         MOV     A,#0x3
   \   000009   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \                     ??Subroutine30_0:
   \   000002   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000005   80..         SJMP    ?Subroutine97

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000003   80..         SJMP    ??Subroutine97_0

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   A3           INC     DPTR
   \                     ??Subroutine97_0:
   \   000001   A3           INC     DPTR
   \                     ??Subroutine97_1:
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   E8           MOV     A,R0
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2402         ADD     A,#0x2
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \                     ??Subroutine67_0:
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   A3           INC     DPTR
   \                     ??Subroutine52_0:
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX    A,@DPTR
   \                     ??Subroutine48_0:
   \   000001   F8           MOV     R0,A
   \                     ??Subroutine48_1:
   \   000002   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \                     ??Subroutine18_0:
   \   000007   E8           MOV     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E9           MOV     A,R1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   08           INC     R0
   \   000001   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??Subroutine23_0:
   \   000004   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000007   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   00000A   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   00000C   22           RET
   1125          
   1126          #if defined ( ZDO_COORDINATOR )
   1127          /*********************************************************************
   1128           * @fn          ZDO_ProcessEndDeviceBindReq
   1129           *
   1130           * @brief       This function processes and responds to the
   1131           *              End_Device_Bind_req message.
   1132           *
   1133           * @param       SrcAddr  - Source address
   1134           * @param       msg - input message containing search material
   1135           * @param       SecurityUse - Security enable/disable
   1136           *
   1137           * @return      none
   1138           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1139          void ZDO_ProcessEndDeviceBindReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg,
   \                     ZDO_ProcessEndDeviceBindReq:
   1140                                            byte SecurityUse )
   1141          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 3,R1
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   \   000014   7424         MOV     A,#0x24
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 4,A
   1142            ZDEndDeviceBind_t bindReq;
   1143            uint8  protoVer;
   1144          
   1145            protoVer = NLME_GetProtocolVersion();
   \   00001C                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00001C   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   00001F   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000021   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000024   E9           MOV     A,R1
   \   000025   F5..         MOV     ?V0 + 2,A
   1146          
   1147            // Parse the message
   1148            bindReq.TransSeq = TransSeq;
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   E5..         MOV     A,?V0 + 3
   \   00002F   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   1149            bindReq.srcAddr = SrcAddr->addr.shortAddr;
   \                     ??CrossCallReturnLabel_19:
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   1150            bindReq.SecurityUse = SecurityUse;
   \                     ??CrossCallReturnLabel_38:
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E5..         MOV     A,?V0 + 4
   \   000045   12....       LCALL   ?Subroutine19 & 0xFFFF
   1151          
   1152            bindReq.localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_267:
   \   000048   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00004B   7404         MOV     A,#0x4
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   12....       LCALL   ?Subroutine9 & 0xFFFF
   1153            msg += 2;
   1154          
   1155            if ( protoVer != ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_15:
   \   000053   7401         MOV     A,#0x1
   \   000055   65..         XRL     A,?V0 + 2
   \   000057   601D         JZ      ??ZDO_ProcessEndDeviceBindReq_0
   1156            {
   1157              osal_cpyExtAddr( &(bindReq.ieeeAddr), msg );
   \   000059                ; Setup parameters for call to function osal_cpyExtAddr
   \   000059   EE           MOV     A,R6
   \   00005A   FC           MOV     R4,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FD           MOV     R5,A
   \   00005D   7406         MOV     A,#0x6
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   AA82         MOV     R2,DPL
   \   000064   AB83         MOV     R3,DPH
   \   000066   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   000069   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   00006B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1158              msg += Z_EXTADDR_LEN;
   \   00006E   EE           MOV     A,R6
   \   00006F   2408         ADD     A,#0x8
   \   000071   FE           MOV     R6,A
   \   000072   EF           MOV     A,R7
   \   000073   3400         ADDC    A,#0x0
   \   000075   FF           MOV     R7,A
   1159            }
   1160          
   1161            bindReq.endpoint = *msg++;
   \                     ??ZDO_ProcessEndDeviceBindReq_0:
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   C0E0         PUSH    A
   \   00007D   740E         MOV     A,#0xe
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   D0E0         POP     A
   \   000084   12....       LCALL   ?Subroutine14 & 0xFFFF
   1162            bindReq.profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_24:
   \   000087   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00008A   740F         MOV     A,#0xf
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   12....       LCALL   ?Subroutine4 & 0xFFFF
   1163            msg += 2;
   1164          
   1165            bindReq.numInClusters = *msg++;
   \                     ??CrossCallReturnLabel_264:
   \   000092   FA           MOV     R2,A
   \   000093   7411         MOV     A,#0x11
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   EA           MOV     A,R2
   \   000099   12....       LCALL   ?Subroutine15 & 0xFFFF
   1166            bindReq.inClusters = NULL;
   \                     ??CrossCallReturnLabel_27:
   \   00009C   7412         MOV     A,#0x12
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E4           CLR     A
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   F0           MOVX    @DPTR,A
   1167            if ( bindReq.numInClusters )
   \   0000A5   EA           MOV     A,R2
   \   0000A6   602B         JZ      ??ZDO_ProcessEndDeviceBindReq_1
   1168            {
   1169              if ( !(bindReq.inClusters = ZDO_CreateAlignedUINT16List( bindReq.numInClusters, msg )) )
   \   0000A8                ; Setup parameters for call to function ZDO_CreateAlignedUINT16List
   \   0000A8   EE           MOV     A,R6
   \   0000A9   FA           MOV     R2,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   FB           MOV     R3,A
   \   0000AC   7411         MOV     A,#0x11
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   90....       MOV     DPTR,#(??ZDO_CreateAlignedUINT16List & 0xffff)
   \   0000B6   74..         MOV     A,#((??ZDO_CreateAlignedUINT16List >> 16) & 0xff)
   \   0000B8   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000BB   8A..         MOV     ?V0 + 0,R2
   \   0000BD   8B..         MOV     ?V0 + 1,R3
   \   0000BF   A8..         MOV     R0,?V0 + 0
   \   0000C1   A9..         MOV     R1,?V0 + 1
   \   0000C3   7412         MOV     A,#0x12
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000CB   7001         JNZ     ??ZDO_ProcessEndDeviceBindReq_2
   \   0000CD   E9           MOV     A,R1
   \                     ??ZDO_ProcessEndDeviceBindReq_2:
   \   0000CE   7003         JNZ     $+5
   \   0000D0   02....       LJMP    ??ZDO_ProcessEndDeviceBindReq_3 & 0xFFFF
   1170              {
   1171                // can't allocate memory. drop message
   1172                return;
   1173              }
   1174            }
   1175            msg += (bindReq.numInClusters * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 )));
   \                     ??ZDO_ProcessEndDeviceBindReq_1:
   \   0000D3   7401         MOV     A,#0x1
   \   0000D5   65..         XRL     A,?V0 + 2
   \   0000D7   6004         JZ      ??ZDO_ProcessEndDeviceBindReq_4
   \   0000D9   7802         MOV     R0,#0x2
   \   0000DB   8002         SJMP    ??ZDO_ProcessEndDeviceBindReq_5
   \                     ??ZDO_ProcessEndDeviceBindReq_4:
   \   0000DD   7801         MOV     R0,#0x1
   \                     ??ZDO_ProcessEndDeviceBindReq_5:
   \   0000DF   7411         MOV     A,#0x11
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F5..         MOV     ?V0 + 0,A
   \   0000E7   E8           MOV     A,R0
   \   0000E8   85..F0       MOV     B,?V0 + 0
   \   0000EB   A4           MUL     AB
   \   0000EC   F8           MOV     R0,A
   \   0000ED   A9F0         MOV     R1,B
   \   0000EF   EE           MOV     A,R6
   \   0000F0   28           ADD     A,R0
   \   0000F1   FE           MOV     R6,A
   \   0000F2   EF           MOV     A,R7
   \   0000F3   39           ADDC    A,R1
   \   0000F4   FF           MOV     R7,A
   1176          
   1177            bindReq.numOutClusters = *msg++;
   \   0000F5   8E82         MOV     DPL,R6
   \   0000F7   8F83         MOV     DPH,R7
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   FA           MOV     R2,A
   \   0000FB   7414         MOV     A,#0x14
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   EA           MOV     A,R2
   \   000101   F0           MOVX    @DPTR,A
   1178            bindReq.outClusters = NULL;
   \   000102   7415         MOV     A,#0x15
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E4           CLR     A
   \   000108   F0           MOVX    @DPTR,A
   \   000109   A3           INC     DPTR
   \   00010A   F0           MOVX    @DPTR,A
   1179            if ( bindReq.numOutClusters )
   \   00010B   EA           MOV     A,R2
   \   00010C   603D         JZ      ??ZDO_ProcessEndDeviceBindReq_6
   1180            {
   1181              if ( !(bindReq.outClusters=ZDO_CreateAlignedUINT16List( bindReq.numOutClusters, msg )) )
   \   00010E                ; Setup parameters for call to function ZDO_CreateAlignedUINT16List
   \   00010E   8E82         MOV     DPL,R6
   \   000110   8F83         MOV     DPH,R7
   \   000112   A3           INC     DPTR
   \   000113   AA82         MOV     R2,DPL
   \   000115   AB83         MOV     R3,DPH
   \   000117   7414         MOV     A,#0x14
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F9           MOV     R1,A
   \   00011E   90....       MOV     DPTR,#(??ZDO_CreateAlignedUINT16List & 0xffff)
   \   000121   74..         MOV     A,#((??ZDO_CreateAlignedUINT16List >> 16) & 0xff)
   \   000123   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000126   8A..         MOV     ?V0 + 0,R2
   \   000128   8B..         MOV     ?V0 + 1,R3
   \   00012A   A8..         MOV     R0,?V0 + 0
   \   00012C   A9..         MOV     R1,?V0 + 1
   \   00012E   7415         MOV     A,#0x15
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000136   7001         JNZ     ??ZDO_ProcessEndDeviceBindReq_7
   \   000138   E9           MOV     A,R1
   \                     ??ZDO_ProcessEndDeviceBindReq_7:
   \   000139   7010         JNZ     ??ZDO_ProcessEndDeviceBindReq_6
   1182              {
   1183                // can't allocate memory. drop message
   1184                if ( bindReq.inClusters )
   \   00013B   7412         MOV     A,#0x12
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   E0           MOVX    A,@DPTR
   \   000141   7002         JNZ     ??ZDO_ProcessEndDeviceBindReq_8
   \   000143   A3           INC     DPTR
   \   000144   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessEndDeviceBindReq_8:
   \   000145   6044         JZ      ??ZDO_ProcessEndDeviceBindReq_3
   1185                {
   1186                  osal_mem_free( bindReq.inClusters );
   \   000147                ; Setup parameters for call to function osal_mem_free
   \   000147   7412         MOV     A,#0x12
   \   000149   8037         SJMP    ??ZDO_ProcessEndDeviceBindReq_9
   1187                }
   1188                return;
   1189              }
   1190            }
   1191          
   1192            ZDApp_EndDeviceBindReqCB( &bindReq );
   \                     ??ZDO_ProcessEndDeviceBindReq_6:
   \   00014B                ; Setup parameters for call to function ZDApp_EndDeviceBindReqCB
   \   00014B   85..82       MOV     DPL,?XSP + 0
   \   00014E   85..83       MOV     DPH,?XSP + 1
   \   000151   AA82         MOV     R2,DPL
   \   000153   AB83         MOV     R3,DPH
   \   000155   90....       MOV     DPTR,#(ZDApp_EndDeviceBindReqCB & 0xffff)
   \   000158   74..         MOV     A,#((ZDApp_EndDeviceBindReqCB >> 16) & 0xff)
   \   00015A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1193          
   1194            if ( bindReq.inClusters )
   \   00015D   7412         MOV     A,#0x12
   \   00015F   12....       LCALL   ?XSTACK_DISP0_8
   \   000162   E0           MOVX    A,@DPTR
   \   000163   7002         JNZ     ??ZDO_ProcessEndDeviceBindReq_10
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessEndDeviceBindReq_10:
   \   000167   600B         JZ      ??ZDO_ProcessEndDeviceBindReq_11
   1195            {
   1196              osal_mem_free( bindReq.inClusters );
   \   000169                ; Setup parameters for call to function osal_mem_free
   \   000169   7412         MOV     A,#0x12
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000171   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1197            }
   1198            if ( bindReq.outClusters )
   \                     ??ZDO_ProcessEndDeviceBindReq_11:
   \   000174   7415         MOV     A,#0x15
   \   000176   12....       LCALL   ?XSTACK_DISP0_8
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   7002         JNZ     ??ZDO_ProcessEndDeviceBindReq_12
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessEndDeviceBindReq_12:
   \   00017E   600B         JZ      ??ZDO_ProcessEndDeviceBindReq_3
   1199            {
   1200              osal_mem_free( bindReq.outClusters );
   \   000180                ; Setup parameters for call to function osal_mem_free
   \   000180   7415         MOV     A,#0x15
   \                     ??ZDO_ProcessEndDeviceBindReq_9:
   \   000182   12....       LCALL   ?XSTACK_DISP0_8
   \   000185   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000188   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??ZDO_ProcessEndDeviceBindReq_3:
   \   00018B   7417         MOV     A,#0x17
   \   00018D   02....       LJMP    ?Subroutine104 & 0xFFFF
   1201            }
   1202          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \                     ??Subroutine35_0:
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   E4           CLR     A
   \   000005   2A           ADD     A,R2
   \   000006   F8           MOV     R0,A
   \   000007                REQUIRE ?Subroutine101
   \   000007                ; // Fall through to label ?Subroutine101

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   E9           MOV     A,R1
   \   000001   3400         ADDC    A,#0x0
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine104_0:
   \   000003   7F05         MOV     R7,#0x5
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   A3           INC     DPTR
   \   000001   AE82         MOV     R6,DPL
   \   000003   AF83         MOV     R7,DPH
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   02....       LJMP    ?Subroutine100 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \                     ??Subroutine70_0:
   \   000004   F0           MOVX    @DPTR,A
   \   000005   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   02....       LJMP    ?Subroutine98 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \                     ??Subroutine11_0:
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   85..82       MOV     DPL,?V0 + 0
   \   00000E   85..83       MOV     DPH,?V0 + 1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET
   1203          #endif // ZDO_COORDINATOR
   1204          
   1205          #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
   1206          
   1207          /*********************************************************************
   1208           * @fn          ZDO_ProcessBindUnbindReq
   1209           *
   1210           * @brief       This function processes and responds to the
   1211           *              Bind_req or Unbind_req message.
   1212           *
   1213           * @param       SrcAddr  - Source address
   1214           * @param       msgClusterID - message cluster ID
   1215           * @param       msg - input message containing search material
   1216           * @param       SecurityUse - Security enable/disable
   1217           *
   1218           * @return      none
   1219           */
   1220          void ZDO_ProcessBindUnbindReq( byte TransSeq, zAddrType_t *SrcAddr, uint16 msgClusterID,
   1221                                        byte *msg, byte SecurityUse )
   1222          {
   1223            byte *SrcAddress;
   1224            byte SrcEpIntf;
   1225            uint16 ClusterID;
   1226            zAddrType_t DstAddress;
   1227            byte DstEpIntf;
   1228            uint8 protoVer;
   1229          
   1230            protoVer = NLME_GetProtocolVersion();
   1231          
   1232            SrcAddress = msg;
   1233            msg += Z_EXTADDR_LEN;
   1234            SrcEpIntf = *msg++;
   1235          
   1236            if ( protoVer != ZB_PROT_V1_0 )
   1237            {
   1238              ClusterID = BUILD_UINT16( msg[0], msg[1] );
   1239              msg += 2;
   1240            }
   1241            else
   1242            {
   1243              ClusterID = *msg++;
   1244            }
   1245          
   1246            if ( protoVer != ZB_PROT_V1_0 )
   1247            {
   1248              DstAddress.addrMode = *msg++;
   1249              if ( DstAddress.addrMode == Addr64Bit )
   1250              {
   1251                osal_cpyExtAddr( DstAddress.addr.extAddr, msg );
   1252                msg += Z_EXTADDR_LEN;
   1253                DstEpIntf = *msg;
   1254              }
   1255              else
   1256              {
   1257                DstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   1258                msg += sizeof ( uint16 );
   1259              }
   1260            }
   1261            else
   1262            {
   1263              DstAddress.addrMode = Addr64Bit;
   1264              osal_cpyExtAddr( DstAddress.addr.extAddr, msg );
   1265              msg += Z_EXTADDR_LEN;
   1266              DstEpIntf = *msg;
   1267            }
   1268          
   1269          
   1270            if ( msgClusterID == Bind_req )
   1271            {
   1272              ZDApp_BindReqCB( TransSeq, SrcAddr, SrcAddress, SrcEpIntf,
   1273                              ClusterID, &DstAddress, DstEpIntf, SecurityUse );
   1274            }
   1275            else
   1276            {
   1277              ZDApp_UnbindReqCB( TransSeq, SrcAddr, SrcAddress, SrcEpIntf,
   1278                              ClusterID, &DstAddress, DstEpIntf, SecurityUse );
   1279            }
   1280          }
   1281          #endif // REFLECTOR || ZDO_BIND_UNBIND_RESPONSE
   1282          
   1283          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1284          /*********************************************************************
   1285           * @fn      ZDO_ProcessAddrRsp
   1286           *
   1287           * @brief   Process an incoming NWK_addr_rsp or IEEE_addr_rsp message and then
   1288           *          invoke the corresponding CB function.
   1289           *
   1290           * @param   src - Source address of the request.
   1291           * @param   cId - Cluster ID of the request.
   1292           * @param   msg - Incoming request message.
   1293           *
   1294           * @return  none
   1295           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1296          void ZDO_ProcessAddrRsp( zAddrType_t *src, uint16 cId, byte *msg, byte msgLen )
   \                     ZDO_ProcessAddrRsp:
   1297          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7406         MOV     A,#0x6
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000012   7404         MOV     A,#0x4
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EC           MOV     A,R4
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   ED           MOV     A,R5
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   7418         MOV     A,#0x18
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 0,A
   \   000024   A3           INC     DPTR
   \   000025   12....       LCALL   ?Subroutine46 & 0xFFFF
   1298          #if defined ( REFLECTOR )
   1299            AddrMgrEntry_t addrEntry;
   1300          #endif
   1301            uint16 aoi;
   1302            uint16 *list = NULL;
   \                     ??CrossCallReturnLabel_125:
   \   000028   F0           MOVX    @DPTR,A
   1303            byte idx = 0;
   \   000029   F5..         MOV     ?V0 + 4,A
   1304            byte cnt = 0;
   \   00002B   F5..         MOV     ?V0 + 3,A
   1305          
   1306            byte stat = *msg++;
   \   00002D   85..82       MOV     DPL,?V0 + 0
   \   000030   85..83       MOV     DPH,?V0 + 1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 2,A
   1307            byte *ieee = msg;
   \   000036   A3           INC     DPTR
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ?Subroutine20 & 0xFFFF
   1308            msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_47:
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   2408         ADD     A,#0x8
   \   00004B   F5..         MOV     ?V0 + 0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   1309            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_183:
   \   000052   85..82       MOV     DPL,?V0 + 0
   \   000055   F583         MOV     DPH,A
   \   000057   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00005A   FB           MOV     R3,A
   \   00005B   E4           CLR     A
   \   00005C   2C           ADD     A,R4
   \   00005D   FE           MOV     R6,A
   \   00005E   EB           MOV     A,R3
   \   00005F   3400         ADDC    A,#0x0
   \   000061   FF           MOV     R7,A
   1310          
   1311          #if defined ( REFLECTOR )
   1312            // Add this to the address manager
   1313            addrEntry.user = ADDRMGR_USER_DEFAULT;
   1314            addrEntry.nwkAddr = aoi;
   1315            AddrMgrExtAddrSet( addrEntry.extAddr, ieee );
   1316            AddrMgrEntryUpdate( &addrEntry );
   1317          #endif
   1318          
   1319            // NumAssocDev field is only present on success.
   1320            if ( stat == ZDO_SUCCESS )
   \   000062   E5..         MOV     A,?V0 + 2
   \   000064   707D         JNZ     ??ZDO_ProcessAddrRsp_0
   1321            {
   1322              msg += 2;
   \   000066   12....       LCALL   ?Subroutine67 & 0xFFFF
   1323              cnt = ( msgLen > 1 + Z_EXTADDR_LEN + 2 ) ? *msg++ : 0;   // Single req: msgLen = status + IEEEAddr + NWKAddr
   \                     ??CrossCallReturnLabel_184:
   \   000069   E9           MOV     A,R1
   \   00006A   C3           CLR     C
   \   00006B   940C         SUBB    A,#0xc
   \   00006D   4074         JC      ??ZDO_ProcessAddrRsp_0
   \   00006F   85..82       MOV     DPL,?V0 + 0
   \   000072   85..83       MOV     DPH,?V0 + 1
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F5..         MOV     ?V0 + 3,A
   \   000078   A3           INC     DPTR
   1324          
   1325              // StartIndex field is only present if NumAssocDev field is non-zero.
   1326              if ( cnt != 0 )
   \   000079   6068         JZ      ??ZDO_ProcessAddrRsp_0
   1327              {
   1328                idx = *msg++;
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F5..         MOV     ?V0 + 4,A
   \   00007E   A3           INC     DPTR
   \   00007F   8582..       MOV     ?V0 + 0,DPL
   \   000082   8583..       MOV     ?V0 + 1,DPH
   1329          
   1330                if ( cnt > idx )
   \   000085   C3           CLR     C
   \   000086   95..         SUBB    A,?V0 + 3
   \   000088   5059         JNC     ??ZDO_ProcessAddrRsp_0
   1331                {
   1332                  list = osal_mem_alloc( (short)(cnt * sizeof( uint16 )) );
   \   00008A                ; Setup parameters for call to function osal_mem_alloc
   \   00008A   E5..         MOV     A,?V0 + 3
   \   00008C   C3           CLR     C
   \   00008D   33           RLC     A
   \   00008E   FA           MOV     R2,A
   \   00008F   E4           CLR     A
   \   000090   33           RLC     A
   \   000091   FB           MOV     R3,A
   \   000092   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000095   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   000097   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   EA           MOV     A,R2
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   EB           MOV     A,R3
   \   0000A4   12....       LCALL   ?Subroutine5 & 0xFFFF
   1333          
   1334                  if ( list )
   \                     ??CrossCallReturnLabel_11:
   \   0000A7   7002         JNZ     ??ZDO_ProcessAddrRsp_1
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessAddrRsp_1:
   \   0000AB   6036         JZ      ??ZDO_ProcessAddrRsp_0
   1335                  {
   1336                    uint16 *pList = list;
   \   0000AD   85..82       MOV     DPL,?XSP + 0
   \   0000B0   85..83       MOV     DPH,?XSP + 1
   \   0000B3   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   1337                    byte n = cnt - idx;
   \                     ??CrossCallReturnLabel_138:
   \   0000B6   E5..         MOV     A,?V0 + 3
   \   0000B8   C3           CLR     C
   \   0000B9   95..         SUBB    A,?V0 + 4
   \   0000BB   FA           MOV     R2,A
   \   0000BC   8022         SJMP    ??ZDO_ProcessAddrRsp_2
   1338          
   1339                    while ( n != 0 )
   1340                    {
   1341                      *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ProcessAddrRsp_3:
   \   0000BE   85..82       MOV     DPL,?V0 + 0
   \   0000C1   85..83       MOV     DPH,?V0 + 1
   \   0000C4   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000C7   F5..         MOV     ?V0 + 7,A
   \   0000C9   E4           CLR     A
   \   0000CA   2C           ADD     A,R4
   \   0000CB   E5..         MOV     A,?V0 + 7
   \   0000CD   3400         ADDC    A,#0x0
   \   0000CF   FD           MOV     R5,A
   \   0000D0   8882         MOV     DPL,R0
   \   0000D2   8983         MOV     DPH,R1
   \   0000D4   EC           MOV     A,R4
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   ED           MOV     A,R5
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   12....       LCALL   ?Subroutine85 & 0xFFFF
   1342                      msg += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_283:
   \   0000DC   12....       LCALL   ?Subroutine67 & 0xFFFF
   1343                      n--;
   \                     ??CrossCallReturnLabel_185:
   \   0000DF   1A           DEC     R2
   1344                    }
   \                     ??ZDO_ProcessAddrRsp_2:
   \   0000E0   EA           MOV     A,R2
   \   0000E1   70DB         JNZ     ??ZDO_ProcessAddrRsp_3
   1345                  }
   1346                }
   1347              }
   1348            }
   1349          
   1350          #if defined ( ZDO_NWKADDR_REQUEST )
   1351            if ( cId == NWK_addr_rsp )
   \                     ??ZDO_ProcessAddrRsp_0:
   \   0000E3   7404         MOV     A,#0x4
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   7004         JNZ     ??ZDO_ProcessAddrRsp_4
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   6480         XRL     A,#0x80
   \                     ??ZDO_ProcessAddrRsp_4:
   \   0000EF   7039         JNZ     ??ZDO_ProcessAddrRsp_5
   1352            {
   1353              ZDApp_NwkAddrRspCB( src, stat, ieee, aoi, cnt, idx, list );
   \   0000F1                ; Setup parameters for call to function ZDApp_NwkAddrRspCB
   \   0000F1   85..82       MOV     DPL,?XSP + 0
   \   0000F4   85..83       MOV     DPH,?XSP + 1
   \   0000F7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000FA   E5..         MOV     A,?V0 + 4
   \   0000FC   F5..         MOV     ?V0 + 0,A
   \   0000FE   78..         MOV     R0,#?V0 + 0
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000103   E5..         MOV     A,?V0 + 3
   \   000105   F5..         MOV     ?V0 + 0,A
   \   000107   78..         MOV     R0,#?V0 + 0
   \   000109   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010C   8E..         MOV     ?V0 + 0,R6
   \   00010E   8F..         MOV     ?V0 + 1,R7
   \   000110   78..         MOV     R0,#?V0 + 0
   \   000112   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000115   7408         MOV     A,#0x8
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000123   90....       MOV     DPTR,#(ZDApp_NwkAddrRspCB & 0xffff)
   \   000126   74..         MOV     A,#((ZDApp_NwkAddrRspCB >> 16) & 0xff)
   \   000128   8047         SJMP    ??ZDO_ProcessAddrRsp_6
   1354            }
   1355          #endif
   1356          
   1357          #if defined ( ZDO_IEEEADDR_REQUEST )
   1358            if ( cId == IEEE_addr_rsp )
   \                     ??ZDO_ProcessAddrRsp_5:
   \   00012A   7404         MOV     A,#0x4
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   6401         XRL     A,#0x1
   \   000132   7004         JNZ     ??ZDO_ProcessAddrRsp_7
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   6480         XRL     A,#0x80
   \                     ??ZDO_ProcessAddrRsp_7:
   \   000138   703F         JNZ     ??ZDO_ProcessAddrRsp_8
   1359            {
   1360              ZDApp_IEEEAddrRspCB( src, stat, ieee, aoi, cnt, idx, list );
   \   00013A                ; Setup parameters for call to function ZDApp_IEEEAddrRspCB
   \   00013A   85..82       MOV     DPL,?XSP + 0
   \   00013D   85..83       MOV     DPH,?XSP + 1
   \   000140   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000143   E5..         MOV     A,?V0 + 4
   \   000145   F5..         MOV     ?V0 + 0,A
   \   000147   78..         MOV     R0,#?V0 + 0
   \   000149   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014C   E5..         MOV     A,?V0 + 3
   \   00014E   F5..         MOV     ?V0 + 0,A
   \   000150   78..         MOV     R0,#?V0 + 0
   \   000152   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000155   8E..         MOV     ?V0 + 0,R6
   \   000157   8F..         MOV     ?V0 + 1,R7
   \   000159   78..         MOV     R0,#?V0 + 0
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015E   7408         MOV     A,#0x8
   \   000160   12....       LCALL   ?XSTACK_DISP0_8
   \   000163   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00016C   90....       MOV     DPTR,#(ZDApp_IEEEAddrRspCB & 0xffff)
   \   00016F   74..         MOV     A,#((ZDApp_IEEEAddrRspCB >> 16) & 0xff)
   \                     ??ZDO_ProcessAddrRsp_6:
   \   000171   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000174   7406         MOV     A,#0x6
   \   000176   12....       LCALL   ?DEALLOC_XSTACK8
   1361            }
   1362          #endif
   1363          
   1364            if ( list )
   \                     ??ZDO_ProcessAddrRsp_8:
   \   000179   85..82       MOV     DPL,?XSP + 0
   \   00017C   85..83       MOV     DPH,?XSP + 1
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   7002         JNZ     ??ZDO_ProcessAddrRsp_9
   \   000182   A3           INC     DPTR
   \   000183   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessAddrRsp_9:
   \   000184   600C         JZ      ??ZDO_ProcessAddrRsp_10
   1365            {
   1366              osal_mem_free( list );
   \   000186                ; Setup parameters for call to function osal_mem_free
   \   000186   85..82       MOV     DPL,?XSP + 0
   \   000189   85..83       MOV     DPH,?XSP + 1
   \   00018C   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00018F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1367            }
   1368          }
   \                     ??ZDO_ProcessAddrRsp_10:
   \   000192   7408         MOV     A,#0x8
   \   000194   02....       LJMP    ?Subroutine93 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   A9..         MOV     R1,?V0 + 2
   \   000007   740C         MOV     A,#0xc
   \   000009   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E8           MOV     A,R0
   \   000001   2402         ADD     A,#0x2
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   02....       LJMP    ?Subroutine101 & 0xFFFF
   1369          #endif // ZDO_NWKADDR_REQUEST ZDO_IEEEADDR_REQUEST
   1370          
   1371          #if defined ( ZDO_NODEDESC_REQUEST )
   1372          /*********************************************************************
   1373           * @fn          ZDO_ProcessNodeDescRsp
   1374           *
   1375           * @brief       This function processes and responds to the
   1376           *              Node_Desc_rsp message.
   1377           *
   1378           * @param       SrcAddr  - Source address
   1379           * @param       msg - input message containing search material
   1380           *
   1381           * @return      none
   1382           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1383          void ZDO_ProcessNodeDescRsp( zAddrType_t *SrcAddr, byte *msg )
   \                     ZDO_ProcessNodeDescRsp:
   1384          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1385            byte proVer = NLME_GetProtocolVersion();
   \   000012                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000012   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000015   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000017   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00001A   E9           MOV     A,R1
   \   00001B   F5..         MOV     ?V0 + 4,A
   1386            NodeDescriptorFormat_t nodeDesc;
   1387            NodeDescriptorFormat_t *pNodeDesc = NULL;
   \   00001D   75..00       MOV     ?V0 + 2,#0x0
   \   000020   75..00       MOV     ?V0 + 3,#0x0
   1388            byte Status = *msg++;
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   A3           INC     DPTR
   \   00002A   AE82         MOV     R6,DPL
   \   00002C   AF83         MOV     R7,DPH
   1389            uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
   \   00002E   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000031   FB           MOV     R3,A
   \   000032   E4           CLR     A
   \   000033   2C           ADD     A,R4
   \   000034   EB           MOV     A,R3
   \   000035   3400         ADDC    A,#0x0
   \   000037   FD           MOV     R5,A
   1390          
   1391            if ( Status == ZDP_SUCCESS )
   \   000038   E9           MOV     A,R1
   \   000039   6003         JZ      $+5
   \   00003B   02....       LJMP    ??ZDO_ProcessNodeDescRsp_0 & 0xFFFF
   1392            {
   1393              msg += 2;
   \   00003E   12....       LCALL   ?Subroutine88 & 0xFFFF
   1394              nodeDesc.LogicalType = *msg & 0x07;
   \                     ??CrossCallReturnLabel_237:
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   E0           MOVX    A,@DPTR
   \   000046   5407         ANL     A,#0x7
   \   000048   C0E0         PUSH    A
   \   00004A   85..82       MOV     DPL,?XSP + 0
   \   00004D   85..83       MOV     DPH,?XSP + 1
   \   000050   E0           MOVX    A,@DPTR
   \   000051   54F8         ANL     A,#0xf8
   \   000053   FA           MOV     R2,A
   \   000054   D0E0         POP     A
   \   000056   4A           ORL     A,R2
   \   000057   F0           MOVX    @DPTR,A
   1395              if ( proVer == ZB_PROT_V1_0 )
   \   000058   7401         MOV     A,#0x1
   \   00005A   65..         XRL     A,?V0 + 4
   \   00005C   7005         JNZ     ??ZDO_ProcessNodeDescRsp_1
   1396              {
   1397                nodeDesc.UserDescAvail = 0;
   1398                nodeDesc.ComplexDescAvail = 0;
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   54E7         ANL     A,#0xe7
   \   000061   8016         SJMP    ??ZDO_ProcessNodeDescRsp_2
   1399              }
   1400              else
   1401              {
   1402                nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   1403                nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??ZDO_ProcessNodeDescRsp_1:
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   E0           MOVX    A,@DPTR
   \   000068   5418         ANL     A,#0x18
   \   00006A   C0E0         PUSH    A
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   E0           MOVX    A,@DPTR
   \   000073   54E7         ANL     A,#0xe7
   \   000075   FA           MOV     R2,A
   \   000076   D0E0         POP     A
   \   000078   4A           ORL     A,R2
   \                     ??ZDO_ProcessNodeDescRsp_2:
   \   000079   12....       LCALL   ?Subroutine74 & 0xFFFF
   1404              }
   1405              msg++;  // Reserved bits.
   1406              nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   1407              nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_198:
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   AE82         MOV     R6,DPL
   \   000080   AF83         MOV     R7,DPH
   \   000082   C0E0         PUSH    A
   \   000084   7401         MOV     A,#0x1
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   D0E0         POP     A
   \   00008B   12....       LCALL   ?Subroutine19 & 0xFFFF
   1408              nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_268:
   \   00008E   C0E0         PUSH    A
   \   000090   7402         MOV     A,#0x2
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   D0E0         POP     A
   \   000097   12....       LCALL   ?Subroutine0 & 0xFFFF
   1409              nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_0:
   \   00009A   C0E0         PUSH    A
   \   00009C   7403         MOV     A,#0x3
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   D0E0         POP     A
   \   0000A3   12....       LCALL   ?Subroutine0 & 0xFFFF
   1410              nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_1:
   \   0000A6   C0E0         PUSH    A
   \   0000A8   7404         MOV     A,#0x4
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   D0E0         POP     A
   \   0000AF   12....       LCALL   ?Subroutine0 & 0xFFFF
   1411              nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_2:
   \   0000B2   C0E0         PUSH    A
   \   0000B4   7405         MOV     A,#0x5
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   D0E0         POP     A
   \   0000BB   12....       LCALL   ?Subroutine0 & 0xFFFF
   1412              nodeDesc.MaxTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_3:
   \   0000BE   C0E0         PUSH    A
   \   0000C0   7406         MOV     A,#0x6
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   D0E0         POP     A
   \   0000C7   12....       LCALL   ?Subroutine0 & 0xFFFF
   1413              nodeDesc.MaxTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_4:
   \   0000CA   C0E0         PUSH    A
   \   0000CC   7407         MOV     A,#0x7
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   D0E0         POP     A
   \   0000D3   12....       LCALL   ?Subroutine74 & 0xFFFF
   1414              
   1415              if ( proVer == ZB_PROT_V1_0)
   \                     ??CrossCallReturnLabel_199:
   \   0000D6   7401         MOV     A,#0x1
   \   0000D8   65..         XRL     A,?V0 + 4
   \   0000DA   700A         JNZ     ??ZDO_ProcessNodeDescRsp_3
   1416              {
   1417                nodeDesc.ServerMask = 0;
   \   0000DC   7408         MOV     A,#0x8
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   E4           CLR     A
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   8017         SJMP    ??ZDO_ProcessNodeDescRsp_4
   1418              }
   1419              else
   1420              {
   1421                nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ProcessNodeDescRsp_3:
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F5..         MOV     ?V0 + 2,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   FB           MOV     R3,A
   \   0000EC   E4           CLR     A
   \   0000ED   25..         ADD     A,?V0 + 2
   \   0000EF   FA           MOV     R2,A
   \   0000F0   EB           MOV     A,R3
   \   0000F1   3400         ADDC    A,#0x0
   \   0000F3   FB           MOV     R3,A
   \   0000F4   7408         MOV     A,#0x8
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   EA           MOV     A,R2
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   EB           MOV     A,R3
   \                     ??ZDO_ProcessNodeDescRsp_4:
   \   0000FD   12....       LCALL   ?Subroutine71 & 0xFFFF
   1422              }
   1423              
   1424              pNodeDesc = &nodeDesc;
   \                     ??CrossCallReturnLabel_192:
   \   000100   8582..       MOV     ?V0 + 2,DPL
   \   000103   8583..       MOV     ?V0 + 3,DPH
   1425            }
   1426          
   1427            ZDApp_NodeDescRspCB( SrcAddr, Status, aoi, pNodeDesc );
   \                     ??ZDO_ProcessNodeDescRsp_0:
   \   000106                ; Setup parameters for call to function ZDApp_NodeDescRspCB
   \   000106   78..         MOV     R0,#?V0 + 2
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   AA..         MOV     R2,?V0 + 0
   \   00010D   AB..         MOV     R3,?V0 + 1
   \   00010F   90....       MOV     DPTR,#(ZDApp_NodeDescRspCB & 0xffff)
   \   000112   74..         MOV     A,#((ZDApp_NodeDescRspCB >> 16) & 0xff)
   \   000114   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000117   7402         MOV     A,#0x2
   \   000119   12....       LCALL   ?DEALLOC_XSTACK8
   1428          }
   \   00011C   740A         MOV     A,#0xa
   \   00011E   02....       LJMP    ?Subroutine104 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   0E           INC     R6
   \   000004   AF83         MOV     R7,DPH
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1429          #endif // ZDO_NODEDESC_REQUEST
   1430          
   1431          #if defined ( ZDO_POWERDESC_REQUEST )
   1432          /*********************************************************************
   1433           * @fn          ZDO_ProcessPowerDescRsp
   1434           *
   1435           * @brief       This function processes and responds to the
   1436           *              Power_Desc_rsp message.
   1437           *
   1438           * @param       SrcAddr  - Source address
   1439           * @param       msg - input message containing search material
   1440           *
   1441           * @return      none
   1442           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1443          void ZDO_ProcessPowerDescRsp( zAddrType_t *SrcAddr, byte *msg )
   \                     ZDO_ProcessPowerDescRsp:
   1444          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1445            NodePowerDescriptorFormat_t pwrDesc;
   1446            NodePowerDescriptorFormat_t *pPwrDesc = NULL;
   \   00000A   75..00       MOV     ?V0 + 0,#0x0
   \   00000D   75..00       MOV     ?V0 + 1,#0x0
   1447            byte Status = *msg++;
   \   000010   8C82         MOV     DPL,R4
   \   000012   8D83         MOV     DPH,R5
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   A3           INC     DPTR
   \   000017   AC82         MOV     R4,DPL
   \   000019   AD83         MOV     R5,DPH
   1448            uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
   \   000021   E4           CLR     A
   \   000022   25..         ADD     A,?V0 + 2
   \   000024   FE           MOV     R6,A
   \   000025   EF           MOV     A,R7
   \   000026   3400         ADDC    A,#0x0
   \   000028   FF           MOV     R7,A
   1449          
   1450            if ( Status == ZDP_SUCCESS )
   \   000029   E9           MOV     A,R1
   \   00002A   7052         JNZ     ??ZDO_ProcessPowerDescRsp_0
   1451            {
   1452              msg += 2;
   \   00002C   EC           MOV     A,R4
   \   00002D   2402         ADD     A,#0x2
   \   00002F   0C           INC     R4
   \   000030   0C           INC     R4
   \   000031   ED           MOV     A,R5
   \   000032   3400         ADDC    A,#0x0
   \   000034   FD           MOV     R5,A
   1453              pwrDesc.AvailablePowerSources = *msg >> 4;
   1454              pwrDesc.PowerMode = *msg++ & 0x0F;
   \   000035   8C82         MOV     DPL,R4
   \   000037   8D83         MOV     DPH,R5
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0 + 4,A
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   85....       MOV     ?V0 + 0,?V0 + 4
   \   000047   F5..         MOV     ?V0 + 1,A
   \   000049   8C82         MOV     DPL,R4
   \   00004B   8D83         MOV     DPH,R5
   \   00004D   A3           INC     DPTR
   \   00004E   AC82         MOV     R4,DPL
   \   000050   AD83         MOV     R5,DPH
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E5..         MOV     A,?V0 + 0
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V0 + 1
   \   00005E   F0           MOVX    @DPTR,A
   1455              pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   1456              pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   \   00005F   8C82         MOV     DPL,R4
   \   000061   8D83         MOV     DPH,R5
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V0 + 2,A
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   FC           MOV     R4,A
   \   00006E   74FF         MOV     A,#-0x1
   \   000070   5C           ANL     A,R4
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   E5..         MOV     A,?V0 + 2
   \   000075   12....       LCALL   ?Subroutine71 & 0xFFFF
   1457              pPwrDesc = &pwrDesc;
   \                     ??CrossCallReturnLabel_193:
   \   000078   8582..       MOV     ?V0 + 0,DPL
   \   00007B   8583..       MOV     ?V0 + 1,DPH
   1458            }
   1459          
   1460            ZDApp_PowerDescRspCB( SrcAddr, Status, aoi, pPwrDesc );
   \                     ??ZDO_ProcessPowerDescRsp_0:
   \   00007E                ; Setup parameters for call to function ZDApp_PowerDescRspCB
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   EE           MOV     A,R6
   \   000084   FC           MOV     R4,A
   \   000085   EF           MOV     A,R7
   \   000086   FD           MOV     R5,A
   \   000087   90....       MOV     DPTR,#(ZDApp_PowerDescRspCB & 0xffff)
   \   00008A   74..         MOV     A,#((ZDApp_PowerDescRspCB >> 16) & 0xff)
   \   00008C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   1461          }
   \   000094   7402         MOV     A,#0x2
   \   000096                REQUIRE ?Subroutine104
   \   000096                ; // Fall through to label ?Subroutine104
   1462          #endif // ZDO_POWERDESC_REQUEST
   1463          
   1464          #if defined ( ZDO_SIMPLEDESC_REQUEST )
   1465          /*********************************************************************
   1466           * @fn          ZDO_ProcessSimpleDescRsp
   1467           *
   1468           * @brief       This function processes and responds to the
   1469           *              Simple_Desc_rsp message.
   1470           *
   1471           * @param       SrcAddr  - Source address
   1472           * @param       msg - input message containing search material
   1473           *
   1474           * @return      none
   1475           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1476          void ZDO_ProcessSimpleDescRsp( zAddrType_t *SrcAddr, byte *msg )
   \                     ZDO_ProcessSimpleDescRsp:
   1477          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FA           MOV     R2,A
   \   000010   ED           MOV     A,R5
   \   000011   FB           MOV     R3,A
   1478            byte epIntf = 0;
   \   000012   75..00       MOV     ?V0 + 0,#0x0
   1479            SimpleDescriptionFormat_t simpleDesc;
   1480            SimpleDescriptionFormat_t *pSimpleDesc = NULL;
   \   000015   75..00       MOV     ?V0 + 2,#0x0
   \   000018   75..00       MOV     ?V0 + 3,#0x0
   1481            byte Status = *msg++;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 1,A
   \   000022   A3           INC     DPTR
   \   000023   AA82         MOV     R2,DPL
   \   000025   AB83         MOV     R3,DPH
   1482            uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000027   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00002A   F9           MOV     R1,A
   \   00002B   E4           CLR     A
   \   00002C   2C           ADD     A,R4
   \   00002D   FE           MOV     R6,A
   \   00002E   E9           MOV     A,R1
   \   00002F   3400         ADDC    A,#0x0
   \   000031   FF           MOV     R7,A
   1483          
   1484            if ( Status == ZDP_SUCCESS )
   \   000032   E5..         MOV     A,?V0 + 1
   \   000034   7024         JNZ     ??ZDO_ProcessSimpleDescRsp_0
   1485            {
   1486              msg += 3;
   \   000036   EA           MOV     A,R2
   \   000037   2403         ADD     A,#0x3
   \   000039   0A           INC     R2
   \   00003A   0A           INC     R2
   \   00003B   0A           INC     R2
   \   00003C   EB           MOV     A,R3
   \   00003D   12....       LCALL   ?Subroutine84 & 0xFFFF
   1487              epIntf = *msg;
   \                     ??CrossCallReturnLabel_230:
   \   000040   F5..         MOV     ?V0 + 0,A
   1488              pSimpleDesc = &simpleDesc;
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   8582..       MOV     ?V0 + 2,DPL
   \   00004B   8583..       MOV     ?V0 + 3,DPH
   1489              ZDO_ParseSimpleDescBuf( msg, pSimpleDesc );
   \   00004E                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00004E   AC82         MOV     R4,DPL
   \   000050   AD83         MOV     R5,DPH
   \   000052   90....       MOV     DPTR,#(ZDO_ParseSimpleDescBuf & 0xffff)
   \   000055   74..         MOV     A,#((ZDO_ParseSimpleDescBuf >> 16) & 0xff)
   \   000057   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1490            }
   1491          
   1492            ZDApp_SimpleDescRspCB( SrcAddr, Status, aoi, epIntf, pSimpleDesc );
   \                     ??ZDO_ProcessSimpleDescRsp_0:
   \   00005A                ; Setup parameters for call to function ZDApp_SimpleDescRspCB
   \   00005A   78..         MOV     R0,#?V0 + 2
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   EE           MOV     A,R6
   \   000065   FC           MOV     R4,A
   \   000066   EF           MOV     A,R7
   \   000067   FD           MOV     R5,A
   \   000068   A9..         MOV     R1,?V0 + 1
   \   00006A   AA..         MOV     R2,?V0 + 4
   \   00006C   AB..         MOV     R3,?V0 + 5
   \   00006E   90....       MOV     DPTR,#(ZDApp_SimpleDescRspCB & 0xffff)
   \   000071   74..         MOV     A,#((ZDApp_SimpleDescRspCB >> 16) & 0xff)
   \   000073   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   1493          }
   \   00007B   740C         MOV     A,#0xc
   \   00007D   02....       LJMP    ?Subroutine103 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   1494          #endif // ZDO_SIMPLEDESC_REQUEST
   1495          
   1496          #if defined ( ZDO_ACTIVEEP_REQUEST ) || defined ( ZDO_MATCH_REQUEST )
   1497          /*********************************************************************
   1498           * @fn          ZDO_ProcessEPListRsp
   1499           *
   1500           * @brief       This function processes and responds to the
   1501           *              Active_EP_rsp or Match_Desc_rsp message.
   1502           *
   1503           * @param       src  - Source address
   1504           * @param       ClusterID - Active_EP_rsp or Match_Desc_rsp
   1505           * @param       msg - input message containing search material
   1506           *
   1507           * @return      none
   1508           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1509          void ZDO_ProcessEPListRsp( zAddrType_t *src, uint16 ClusterID, byte *msg )
   \                     ZDO_ProcessEPListRsp:
   1510          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   740D         MOV     A,#0xd
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   1511            byte Status = *msg++;
   \                     ??CrossCallReturnLabel_139:
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 2,A
   \   000014   A3           INC     DPTR
   \   000015   A882         MOV     R0,DPL
   \   000017   A983         MOV     R1,DPH
   1512            byte cnt = msg[2];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 3,A
   1513            byte *list = msg+3;
   \   00001E   E8           MOV     A,R0
   \   00001F   2403         ADD     A,#0x3
   \   000021   FE           MOV     R6,A
   \   000022   E9           MOV     A,R1
   \   000023   3400         ADDC    A,#0x0
   \   000025   FF           MOV     R7,A
   \   000026   8E..         MOV     ?V0 + 0,R6
   \   000028   8F..         MOV     ?V0 + 1,R7
   1514          
   1515            src->addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FE           MOV     R6,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   E4           CLR     A
   \   000034   2E           ADD     A,R6
   \   000035   F8           MOV     R0,A
   \   000036   E9           MOV     A,R1
   \   000037   12....       LCALL   ?Subroutine18 & 0xFFFF
   1516          
   1517          #if defined ( ZDO_ACTIVEEP_REQUEST )
   1518            if ( ClusterID == Active_EP_rsp )
   \                     ??CrossCallReturnLabel_39:
   \   00003A   7405         MOV     A,#0x5
   \   00003C   6C           XRL     A,R4
   \   00003D   7003         JNZ     ??ZDO_ProcessEPListRsp_0
   \   00003F   7480         MOV     A,#-0x80
   \   000041   6D           XRL     A,R5
   \                     ??ZDO_ProcessEPListRsp_0:
   \   000042   7010         JNZ     ??ZDO_ProcessEPListRsp_1
   1519              ZDApp_ActiveEPRspCB( src, Status, cnt, list );
   \   000044                ; Setup parameters for call to function ZDApp_ActiveEPRspCB
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   AC..         MOV     R4,?V0 + 3
   \   00004B   A9..         MOV     R1,?V0 + 2
   \   00004D   90....       MOV     DPTR,#(ZDApp_ActiveEPRspCB & 0xffff)
   \   000050   74..         MOV     A,#((ZDApp_ActiveEPRspCB >> 16) & 0xff)
   \   000052   8018         SJMP    ??ZDO_ProcessEPListRsp_2
   1520          #endif
   1521          
   1522          #if defined ( ZDO_MATCH_REQUEST )
   1523            if ( ClusterID == Match_Desc_rsp )
   \                     ??ZDO_ProcessEPListRsp_1:
   \   000054   7406         MOV     A,#0x6
   \   000056   6C           XRL     A,R4
   \   000057   7003         JNZ     ??ZDO_ProcessEPListRsp_3
   \   000059   7480         MOV     A,#-0x80
   \   00005B   6D           XRL     A,R5
   \                     ??ZDO_ProcessEPListRsp_3:
   \   00005C   7016         JNZ     ??ZDO_ProcessEPListRsp_4
   1524              ZDApp_MatchDescRspCB( src, Status, cnt, list );
   \   00005E                ; Setup parameters for call to function ZDApp_MatchDescRspCB
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   AC..         MOV     R4,?V0 + 3
   \   000065   A9..         MOV     R1,?V0 + 2
   \   000067   90....       MOV     DPTR,#(ZDApp_MatchDescRspCB & 0xffff)
   \   00006A   74..         MOV     A,#((ZDApp_MatchDescRspCB >> 16) & 0xff)
   \                     ??ZDO_ProcessEPListRsp_2:
   \   00006C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00006F   7402         MOV     A,#0x2
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   1525          #endif
   1526          }
   \                     ??ZDO_ProcessEPListRsp_4:
   \   000074   02....       LJMP    ??Subroutine104_0 & 0xFFFF
   1527          #endif  // ZDO_ACTIVEEP_REQUEST ZDO_MATCH_REQUEST
   1528          
   1529          #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
   1530          /*********************************************************************
   1531           * @fn          ZDO_ProcessBindUnBindRsp
   1532           *
   1533           * @brief       This function processes and responds to the
   1534           *              End_Device_Bind_rsp message.
   1535           *
   1536           * @param       SrcAddr  - Source address
   1537           * @param       ClusterID - Active_EP_rsp or Match_Desc_rsp
   1538           * @param       msg - input message containing search material
   1539           *
   1540           * @return      none
   1541           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1542          void ZDO_ProcessBindUnbindRsp( zAddrType_t *SrcAddr, uint16 ClusterID, byte Status, uint8 TransSeq )
   \                     ZDO_ProcessBindUnbindRsp:
   1543          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V0 + 2,R1
   \   00000F   740C         MOV     A,#0xc
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 3,A
   1544          #if defined ( ZDO_COORDINATOR )
   1545            uint8 used = FALSE;
   1546          #endif
   1547          
   1548          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
   1549            if ( ClusterID == End_Device_Bind_rsp )
   \   000017   7420         MOV     A,#0x20
   \   000019   6E           XRL     A,R6
   \   00001A   7003         JNZ     ??ZDO_ProcessBindUnbindRsp_0
   \   00001C   7480         MOV     A,#-0x80
   \   00001E   6F           XRL     A,R7
   \                     ??ZDO_ProcessBindUnbindRsp_0:
   \   00001F   7008         JNZ     ??ZDO_ProcessBindUnbindRsp_1
   1550              ZDApp_EndDeviceBindRsp( SrcAddr, Status );
   \   000021                ; Setup parameters for call to function ZDApp_EndDeviceBindRsp
   \   000021   90....       MOV     DPTR,#(ZDApp_EndDeviceBindRsp & 0xffff)
   \   000024   74..         MOV     A,#((ZDApp_EndDeviceBindRsp >> 16) & 0xff)
   \   000026   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1551          #endif
   1552          
   1553          #if defined ( ZDO_COORDINATOR )
   1554            if ( matchED )
   \                     ??ZDO_ProcessBindUnbindRsp_1:
   \   000029   90....       MOV     DPTR,#matchED
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   7002         JNZ     ??ZDO_ProcessBindUnbindRsp_2
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindRsp_2:
   \   000031   601F         JZ      ??ZDO_ProcessBindUnbindRsp_3
   1555            {
   1556              used = ZDMatchSendState(
   1557                     (uint8)((ClusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1558                     Status, TransSeq );
   1559            }
   1560          
   1561            if ( !used )
   \   000033   7421         MOV     A,#0x21
   \   000035   6E           XRL     A,R6
   \   000036   7003         JNZ     ??ZDO_ProcessBindUnbindRsp_4
   \   000038   7480         MOV     A,#-0x80
   \   00003A   6F           XRL     A,R7
   \                     ??ZDO_ProcessBindUnbindRsp_4:
   \   00003B   7004         JNZ     ??ZDO_ProcessBindUnbindRsp_5
   \   00003D   7903         MOV     R1,#0x3
   \   00003F   8002         SJMP    ??ZDO_ProcessBindUnbindRsp_6
   \                     ??ZDO_ProcessBindUnbindRsp_5:
   \   000041   7902         MOV     R1,#0x2
   \                     ??ZDO_ProcessBindUnbindRsp_6:
   \   000043                ; Setup parameters for call to function ZDMatchSendState
   \   000043   AB..         MOV     R3,?V0 + 3
   \   000045   AA..         MOV     R2,?V0 + 2
   \   000047   90....       MOV     DPTR,#(??ZDMatchSendState & 0xffff)
   \   00004A   74..         MOV     A,#((??ZDMatchSendState >> 16) & 0xff)
   \   00004C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004F   E9           MOV     A,R1
   \   000050   701F         JNZ     ??ZDO_ProcessBindUnbindRsp_7
   1562          #endif
   1563            {
   1564            #if defined ( ZDO_BIND_UNBIND_REQUEST )
   1565              if ( ClusterID == Bind_rsp )
   \                     ??ZDO_ProcessBindUnbindRsp_3:
   \   000052   7421         MOV     A,#0x21
   \   000054   6E           XRL     A,R6
   \   000055   7003         JNZ     ??ZDO_ProcessBindUnbindRsp_8
   \   000057   7480         MOV     A,#-0x80
   \   000059   6F           XRL     A,R7
   \                     ??ZDO_ProcessBindUnbindRsp_8:
   \   00005A   A9..         MOV     R1,?V0 + 2
   \   00005C   AA..         MOV     R2,?V0 + 0
   \   00005E   AB..         MOV     R3,?V0 + 1
   \   000060   7007         JNZ     ??ZDO_ProcessBindUnbindRsp_9
   1566                ZDApp_BindRsp( SrcAddr, Status );
   \   000062                ; Setup parameters for call to function ZDApp_BindRsp
   \   000062   90....       MOV     DPTR,#(ZDApp_BindRsp & 0xffff)
   \   000065   74..         MOV     A,#((ZDApp_BindRsp >> 16) & 0xff)
   \   000067   8005         SJMP    ??ZDO_ProcessBindUnbindRsp_10
   1567              else
   1568                ZDApp_UnbindRsp( SrcAddr, Status );
   \                     ??ZDO_ProcessBindUnbindRsp_9:
   \   000069                ; Setup parameters for call to function ZDApp_UnbindRsp
   \   000069   90....       MOV     DPTR,#(ZDApp_UnbindRsp & 0xffff)
   \   00006C   74..         MOV     A,#((ZDApp_UnbindRsp >> 16) & 0xff)
   \                     ??ZDO_ProcessBindUnbindRsp_10:
   \   00006E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1569            #endif
   1570            }
   1571          }
   \                     ??ZDO_ProcessBindUnbindRsp_7:
   \   000071   02....       LJMP    ?Subroutine92 & 0xFFFF
   1572          #endif // ZDO_BIND_UNBIND_REQUEST ZDO_ENDDEVICEBIND_REQUEST
   1573          
   1574          #if defined ( ZDO_SERVERDISC_REQUEST )
   1575          /*********************************************************************
   1576           * @fn          ZDO_ProcessServerDiscRsp
   1577           *
   1578           * @brief       Process the Server_Discovery_rsp message.
   1579           *
   1580           * @param       srcAddr - Source address.
   1581           * @param       msg - Byte array containing the Server_Discovery_rsp command frame.
   1582           * @param       SecurityUse -
   1583           *
   1584           * @return      none
   1585           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1586          void ZDO_ProcessServerDiscRsp(zAddrType_t *srcAddr, byte *msg, byte SecurityUse)
   \                     ZDO_ProcessServerDiscRsp:
   1587          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1588            byte status = *msg++;
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   A3           INC     DPTR
   \   00000E   AC82         MOV     R4,DPL
   \   000010   AD83         MOV     R5,DPH
   1589            uint16 serverMask = BUILD_UINT16( msg[0], msg[1] );
   1590          
   1591            ZDApp_ServerDiscRspCB( srcAddr->addr.shortAddr, status, serverMask,
   1592                                   SecurityUse );
   \   000012                ; Setup parameters for call to function ZDApp_ServerDiscRspCB
   \   000012   EE           MOV     A,R6
   \   000013   F5..         MOV     ?V0 + 0,A
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FE           MOV     R6,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FD           MOV     R5,A
   \   000023   E4           CLR     A
   \   000024   2E           ADD     A,R6
   \   000025   FC           MOV     R4,A
   \   000026   ED           MOV     A,R5
   \   000027   3400         ADDC    A,#0x0
   \   000029   FD           MOV     R5,A
   \   00002A   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00002D   90....       MOV     DPTR,#(ZDApp_ServerDiscRspCB & 0xffff)
   \   000030   74..         MOV     A,#((ZDApp_ServerDiscRspCB >> 16) & 0xff)
   \   000032   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000035   7401         MOV     A,#0x1
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   1593          }
   \   00003A   02....       LJMP    ?Subroutine91 & 0xFFFF
   1594          #endif
   1595          
   1596          #if defined ( ZDO_SERVERDISC_RESPONSE )
   1597          /*********************************************************************
   1598           * @fn          ZDO_ProcessServerDiscReq
   1599           *
   1600           * @brief       Process the Server_Discovery_req message.
   1601           *
   1602           * @param       transID - Transaction sequence number of request.
   1603           * @param       srcAddr  - Source address
   1604           * @param       msg - Byte array containing the Server_Discovery_req command frame.
   1605           * @param       SecurityUse -
   1606           *
   1607           * @return      none
   1608           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1609          void ZDO_ProcessServerDiscReq( byte transID, zAddrType_t *srcAddr, byte *msg,
   \                     ZDO_ProcessServerDiscReq:
   1610                                         byte SecurityUse )
   1611          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EC           MOV     A,R4
   \   000008   F8           MOV     R0,A
   \   000009   ED           MOV     A,R5
   \   00000A   F9           MOV     R1,A
   \   00000B   740A         MOV     A,#0xa
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FD           MOV     R5,A
   1612            uint16 serverMask = BUILD_UINT16( msg[0], msg[1] );
   1613            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   000012   8882         MOV     DPL,R0
   \   000014   8983         MOV     DPH,R1
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   E4           CLR     A
   \   00001D   25..         ADD     A,?V0 + 0
   \   00001F   F8           MOV     R0,A
   \   000020   E9           MOV     A,R1
   \   000021   3400         ADDC    A,#0x0
   \   000023   F9           MOV     R1,A
   \   000024   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 8)
   \   000027   E0           MOVX    A,@DPTR
   \   000028   58           ANL     A,R0
   \   000029   F5..         MOV     ?V0 + 0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   59           ANL     A,R1
   \   00002E   F5..         MOV     ?V0 + 1,A
   1614          
   1615            if ( matchMask )
   \   000030   E5..         MOV     A,?V0 + 0
   \   000032   7002         JNZ     ??ZDO_ProcessServerDiscReq_0
   \   000034   E5..         MOV     A,?V0 + 1
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000036   601C         JZ      ??ZDO_ProcessServerDiscReq_1
   1616            {
   1617              ZDP_ServerDiscRsp( transID, srcAddr, ZSUCCESS, ZDAppNwkAddr.addr.shortAddr,
   1618                                 matchMask, SecurityUse );
   \   000038                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000040   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000043   7C00         MOV     R4,#0x0
   \   000045   EE           MOV     A,R6
   \   000046   F9           MOV     R1,A
   \   000047   90....       MOV     DPTR,#(ZDP_ServerDiscRsp & 0xffff)
   \   00004A   74..         MOV     A,#((ZDP_ServerDiscRsp >> 16) & 0xff)
   \   00004C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   1619            }
   1620          }
   \                     ??ZDO_ProcessServerDiscReq_1:
   \   000054                REQUIRE ?Subroutine105
   \   000054                ; // Fall through to label ?Subroutine105

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1621          #endif
   1622          
   1623          /*********************************************************************
   1624           * Call Back Functions from APS  - API
   1625           */
   1626          
   1627          /*********************************************************************
   1628           * @fn          ZDO_EndDeviceTimeoutCB
   1629           *
   1630           * @brief       This function handles the binding timer for the End
   1631           *              Device Bind command.
   1632           *
   1633           * @param       none
   1634           *
   1635           * @return      none
   1636           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1637          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1638          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1639          #if defined ( REFLECTOR )
   1640            byte stat;
   1641            if ( ZDO_EDBind )
   1642            {
   1643              stat = ZDO_EDBind->status;
   1644          
   1645              // Send the response message to the first sent
   1646              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1647                                  stat, ZDO_EDBind->SecurityUse );
   1648          
   1649              ZDO_RemoveEndDeviceBind();
   1650            }
   1651          #endif  // REFLECTOR
   1652          }
   \   000000   02....       LJMP    ?BRET
   1653          
   1654          /*********************************************************************
   1655           * Optional Management Messages
   1656           */
   1657          
   1658          #if defined( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
   1659          /*********************************************************************
   1660           * @fn          ZDO_ProcessMgmtLqiReq
   1661           *
   1662           * @brief       This function handles parsing the incoming Management
   1663           *              LQI request and generate the response.
   1664           *
   1665           *   Note:      This function will limit the number of items returned
   1666           *              to ZDO_MAX_LQI_ITEMS items.
   1667           *
   1668           * @param       SrcAddr - source of the request
   1669           * @param       StartIndex - where to start the return list
   1670           * @param       SecurityUse -
   1671           *
   1672           * @return      none
   1673           */
   1674          void ZDO_ProcessMgmtLqiReq( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
   1675          {
   1676            byte x;
   1677            byte index;
   1678            byte numItems;
   1679            byte maxItems;
   1680            ZDP_MgmtLqiItem_t* table;
   1681            ZDP_MgmtLqiItem_t* item;
   1682            neighborEntry_t    entry;
   1683            byte aItems;
   1684            associated_devices_t *aDevice;
   1685          
   1686            // Get the number of neighbor items
   1687            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   1688          
   1689            // Get the number of associated items
   1690            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   1691            // Total number of items
   1692            maxItems += aItems;
   1693          
   1694            // Start with the supplied index
   1695            numItems = maxItems - StartIndex;
   1696          
   1697            // limit the size of the list
   1698            if ( numItems > ZDO_MAX_LQI_ITEMS )
   1699              numItems = ZDO_MAX_LQI_ITEMS;
   1700          
   1701            // Allocate the memory to build the table
   1702            table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1703                      ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   1704          
   1705            if ( table != NULL )
   1706            {
   1707              x = 0;
   1708              item = table;
   1709              index = StartIndex;
   1710          
   1711              // Loop through associated items and build list
   1712              for ( ; x < numItems; x++ )
   1713              {
   1714                if ( index < aItems )
   1715                {
   1716                  // get next associated device
   1717                  aDevice = AssocFindDevice( index++ );
   1718          
   1719                  // set basic fields
   1720                  item->panID   = _NIB.nwkPanId;
   1721                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1722                  item->nwkAddr = aDevice->shortAddr;
   1723                  item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1724                  item->depth   = 0xFF;
   1725                  item->lqi     = aDevice->linkInfo.rxCost;
   1726          
   1727                  osal_memset( item->extAddr, 0x00, Z_EXTADDR_LEN );
   1728          
   1729                  // use association info to set other fields
   1730                  if ( aDevice->nodeRelation == PARENT )
   1731                  {
   1732                    if (  aDevice->shortAddr == 0 )
   1733                    {
   1734                      item->devType = ZDP_MGMT_DT_COORD;
   1735                    }
   1736                    else
   1737                    {
   1738                      item->devType = ZDP_MGMT_DT_ROUTER;
   1739                    }
   1740          
   1741                    item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1742                    item->relation = ZDP_MGMT_REL_PARENT;
   1743                  }
   1744                  else
   1745                  {
   1746                    if ( aDevice->nodeRelation < CHILD_FFD )
   1747                    {
   1748                      item->devType = ZDP_MGMT_DT_ENDDEV;
   1749          
   1750                      if ( aDevice->nodeRelation == CHILD_RFD )
   1751                      {
   1752                        item->rxOnIdle = FALSE;
   1753                      }
   1754                      else
   1755                      {
   1756                        item->rxOnIdle = TRUE;
   1757                      }
   1758                    }
   1759                    else
   1760                    {
   1761                      item->devType = ZDP_MGMT_DT_ROUTER;
   1762          
   1763                      if ( aDevice->nodeRelation == CHILD_FFD )
   1764                      {
   1765                        item->rxOnIdle = FALSE;
   1766                      }
   1767                      else
   1768                      {
   1769                        item->rxOnIdle = TRUE;
   1770                      }
   1771                    }
   1772          
   1773                    item->relation = ZDP_MGMT_REL_CHILD;
   1774                  }
   1775          
   1776                  item++;
   1777                }
   1778                else
   1779                {
   1780                  if ( StartIndex <= aItems )
   1781                    // Start with 1st neighbor
   1782                    index = 0;
   1783                  else
   1784                    // Start with >1st neighbor
   1785                    index = StartIndex - aItems;
   1786                  break;
   1787                }
   1788              }
   1789          
   1790              // Loop through neighbor items and finish list
   1791              for ( ; x < numItems; x++ )
   1792              {
   1793                // Add next neighbor table item
   1794                NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1795          
   1796                // set ZDP_MgmtLqiItem_t fields
   1797                item->panID    = entry.panId;
   1798                osal_memset( item->extPanID, 0x00, Z_EXTADDR_LEN);
   1799                osal_memset( item->extAddr, 0x00, Z_EXTADDR_LEN );
   1800                item->nwkAddr  = entry.neighborAddress;
   1801                item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1802                item->relation = ZDP_MGMT_REL_UNKNOWN;
   1803                item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1804                item->depth    = 0xFF;
   1805                item->lqi      = entry.linkInfo.rxCost;
   1806          
   1807                if ( item->nwkAddr == 0 )
   1808                {
   1809                  item->devType = ZDP_MGMT_DT_COORD;
   1810                }
   1811                else
   1812                {
   1813                  item->devType = ZDP_MGMT_DT_ROUTER;
   1814                }
   1815          
   1816                item++;
   1817              }
   1818          
   1819              // Send response
   1820              ZDP_MgmtLqiRsp( TransSeq, SrcAddr, ZSuccess, maxItems,
   1821                              StartIndex, numItems, table, false );
   1822          
   1823              osal_mem_free( table );
   1824            }
   1825          }
   1826          #endif // ZDO_MGMT_LQI_RESPONSE && RTR_NWK
   1827          
   1828          #if defined ( ZDO_MGMT_LQI_REQUEST )
   1829          /*********************************************************************
   1830           * @fn          ZDO_ProcessMgmtLqiRsp
   1831           *
   1832           * @brief       This function handles parsing the incoming Management
   1833           *              LQI response and then generates a callback to the ZD
   1834           *              application.
   1835           *
   1836           * @param       SrcAddr - source of the request
   1837           * @param       msg - buffer holding incoming message to parse
   1838           * @param       SecurityUse -
   1839           *
   1840           * @return      none
   1841           */
   1842          void ZDO_ProcessMgmtLqiRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   1843          {
   1844            byte x;
   1845            byte status;
   1846            byte startIndex = 0;
   1847            byte neighborLqiCount = 0;
   1848            byte neighborLqiEntries = 0;
   1849            neighborLqiItem_t *list = NULL;
   1850            byte proVer = NLME_GetProtocolVersion();
   1851          
   1852            status = *msg++;
   1853            if ( status == ZSuccess )
   1854            {
   1855              neighborLqiEntries = *msg++;
   1856              startIndex = *msg++;
   1857              neighborLqiCount = *msg++;
   1858          
   1859              // Allocate a buffer big enough to handle the list.
   1860              list = (neighborLqiItem_t *)osal_mem_alloc( neighborLqiCount *
   1861                                                  sizeof( neighborLqiItem_t ) );
   1862              if ( list )
   1863              {
   1864                neighborLqiItem_t *pList = list;
   1865          
   1866                for ( x = 0; x < neighborLqiCount; x++ )
   1867                {
   1868                  if ( proVer == ZB_PROT_V1_0 )
   1869                  {
   1870                    pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   1871                    msg += 2;
   1872                  }
   1873                  else
   1874                  {
   1875                    osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   1876                    msg += Z_EXTADDR_LEN;
   1877                  }
   1878          
   1879                  msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   1880                  pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   1881                  if ( proVer == ZB_PROT_V1_0 )
   1882                    msg += 2 + 1 + 1;          // Skip DeviceType, RxOnIdle, Relationship, PermitJoinging and Depth
   1883                  else
   1884                    msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   1885          
   1886                  pList->rxLqi = *msg++;
   1887                  pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   1888                  pList++;
   1889                }
   1890              }
   1891            }
   1892          
   1893            // Call the callback to the application.
   1894            ZDApp_MgmtLqiRspCB( SrcAddr->addr.shortAddr, status, neighborLqiEntries,
   1895                                startIndex, neighborLqiCount, list );
   1896          
   1897            if ( list )
   1898            {
   1899              osal_mem_free( list );
   1900            }
   1901          }
   1902          #endif // ZDO_MGMT_LQI_REQUEST
   1903          
   1904          #if defined( ZDO_MGMT_NWKDISC_RESPONSE )
   1905          /*********************************************************************
   1906           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1907           *
   1908           * @brief       This function handles parsing the incoming Management
   1909           *              Network Discover request and starts the request.
   1910           *
   1911           * @param       SrcAddr - source of the request
   1912           * @param       msg - pointer to incoming message
   1913           * @param       SecurityUse -
   1914           *
   1915           * @return      none
   1916           */
   1917          void ZDO_ProcessMgmtNwkDiscReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   1918          {
   1919            NLME_ScanFields_t scan;
   1920            uint8             index;
   1921          
   1922            scan.channels = BUILD_UINT32( msg[0], msg[1], msg[2], msg[3] );
   1923            msg += 4;
   1924            scan.duration = *msg++;
   1925            index         = *msg;
   1926          
   1927            // Save off the information to be used for the response
   1928            zdappMgmtNwkDiscReqInProgress          = true;
   1929            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   1930            zdappMgmtNwkDiscRspAddr.addr.shortAddr = SrcAddr->addr.shortAddr;
   1931            zdappMgmtNwkDiscStartIndex             = index;
   1932            zdappMgmtNwkDiscRspTransSeq            = TransSeq;
   1933          
   1934            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   1935            {
   1936              NLME_NwkDiscTerm();
   1937          
   1938              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1939            }
   1940          }
   1941          #endif // ZDO_MGMT_NWKDISC_RESPONSE
   1942          
   1943          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1944          /*********************************************************************
   1945           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1946           *
   1947           * @brief       This function finishes the processing of the Management
   1948           *              Network Discover Request and generates the response.
   1949           *
   1950           *   Note:      This function will limit the number of items returned
   1951           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1952           *
   1953           * @param       ResultCountSrcAddr - source of the request
   1954           * @param       msg - pointer to incoming message
   1955           * @param       SecurityUse -
   1956           *
   1957           * @return      none
   1958           */
   1959          void ZDO_FinishProcessingMgmtNwkDiscReq( byte ResultCount,
   1960                                                   networkDesc_t *NetworkList )
   1961          {
   1962            byte count;
   1963          
   1964          #if defined ( RTR_NWK )
   1965            networkDesc_t *newDesc, *pList = NetworkList;
   1966          
   1967            // Look for my PanID.
   1968            while ( pList )
   1969            {
   1970              if ( pList->panId == _NIB.nwkPanId )
   1971              {
   1972                break;
   1973              }
   1974          
   1975              if ( !pList->nextDesc )
   1976              {
   1977                break;
   1978              }
   1979              pList = pList->nextDesc;
   1980            }
   1981          
   1982            // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1983            // prepend it.
   1984            if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1985            {
   1986              newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1987              if ( newDesc )
   1988              {
   1989                byte pJoin;
   1990          
   1991                newDesc->panId = _NIB.nwkPanId;
   1992                newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1993                newDesc->beaconOrder = _NIB.beaconOrder;
   1994                newDesc->superFrameOrder = _NIB.superFrameOrder;
   1995                newDesc->version = NLME_GetProtocolVersion();
   1996                newDesc->stackProfile = zgStackProfile;
   1997                //Extended PanID
   1998                osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1999          
   2000                ZMacGetReq( ZMacAssociationPermit, &pJoin );
   2001                newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   2002                                                   INVALID_NODE_ADDR);
   2003          
   2004                newDesc->nextDesc = NetworkList;
   2005                NetworkList = newDesc;
   2006                ResultCount++;
   2007              }
   2008            }
   2009          #endif
   2010          
   2011            // Calc the count and apply a max count.
   2012            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   2013            {
   2014              count = 0;
   2015            }
   2016            else
   2017            {
   2018              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   2019              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   2020              {
   2021                count = ZDO_MAX_NWKDISC_ITEMS;
   2022              }
   2023          
   2024              // Move the list pointer up to the start index.
   2025              NetworkList += zdappMgmtNwkDiscStartIndex;
   2026            }
   2027          
   2028            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   2029                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   2030                                zdappMgmtNwkDiscStartIndex,
   2031                                count,
   2032                                NetworkList,
   2033                                false );
   2034          
   2035          #if defined ( RTR_NWK )
   2036            if ( newDesc )
   2037            {
   2038              osal_mem_free( newDesc );
   2039            }
   2040          #endif
   2041          
   2042            NLME_NwkDiscTerm();
   2043          }
   2044          #endif
   2045          
   2046          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
   2047          /*********************************************************************
   2048           * @fn          ZDO_ProcessMgmNwkDiscRsp
   2049           *
   2050           * @brief       This function handles parsing the incoming Management
   2051           *              Network Discover response and then generates a callback
   2052           *              to the ZD application.
   2053           *
   2054           * @param       SrcAddr - source of the request
   2055           * @param       msg - buffer holding incoming message to parse
   2056           * @param       SecurityUse -
   2057           *
   2058           * @return      none
   2059           */
   2060          void ZDO_ProcessMgmNwkDiscRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   2061          {
   2062            byte x;
   2063            byte status;
   2064            byte networkCount = 0;
   2065            byte startIndex = 0;
   2066            byte networkListCount = 0;
   2067            mgmtNwkDiscItem_t *list = NULL;
   2068          
   2069            byte proVer = NLME_GetProtocolVersion();
   2070          
   2071            status = *msg++;
   2072            if ( status == ZSuccess )
   2073            {
   2074              networkCount = *msg++;
   2075              startIndex = *msg++;
   2076              networkListCount = *msg++;
   2077          
   2078              // Allocate a buffer big enough to handle the list.
   2079              list = (mgmtNwkDiscItem_t *)osal_mem_alloc( networkListCount *
   2080                                                  sizeof( mgmtNwkDiscItem_t ) );
   2081              if ( list )
   2082              {
   2083                mgmtNwkDiscItem_t *pList = list;
   2084                for ( x = 0; x < networkListCount; x++ )
   2085                {
   2086                  if ( proVer == ZB_PROT_V1_0 )  //Version 1.0
   2087                  {
   2088                    pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   2089                    msg += 2;
   2090                  }
   2091                  else
   2092                  {
   2093                    osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   2094                    pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   2095                    msg += Z_EXTADDR_LEN;
   2096          
   2097                  }
   2098                  pList->logicalChannel = *msg++;
   2099                  pList->stackProfile = (*msg) & 0x0F;
   2100                  pList->version = (*msg++ >> 4) & 0x0F;
   2101                  pList->beaconOrder = (*msg) & 0x0F;
   2102                  pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   2103                  pList->permitJoining = *msg++;
   2104                  pList++;
   2105                }
   2106              }
   2107            }
   2108          
   2109            // Call the callback to the application.
   2110            ZDApp_MgmtNwkDiscRspCB( SrcAddr->addr.shortAddr, status, networkCount,
   2111                                    startIndex, networkListCount, list );
   2112          
   2113            if ( list )
   2114            {
   2115              osal_mem_free( list );
   2116            }
   2117          }
   2118          #endif // ZDO_MGMT_NWKDISC_REQUEST
   2119          
   2120          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && defined ( RTR_NWK )
   2121          /*********************************************************************
   2122           * @fn          ZDO_ProcessMgmtRtgReq
   2123           *
   2124           * @brief       This function finishes the processing of the Management
   2125           *              Routing Request and generates the response.
   2126           *
   2127           *   Note:      This function will limit the number of items returned
   2128           *              to ZDO_MAX_RTG_ITEMS items.
   2129           *
   2130           * @param       ResultCountSrcAddr - source of the request
   2131           * @param       msg - pointer to incoming message
   2132           * @param       SecurityUse -
   2133           *
   2134           * @return      none
   2135           */
   2136          void ZDO_ProcessMgmtRtgReq( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
   2137          {
   2138            byte x;
   2139            byte maxNumItems;
   2140            byte numItems;
   2141            byte *pBuf;
   2142            rtgItem_t *pList;
   2143          
   2144            // Get the number of table items
   2145            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   2146          
   2147            numItems = maxNumItems - StartIndex;    // Start at the passed in index
   2148          
   2149            // limit the size of the list
   2150            if ( numItems > ZDO_MAX_RTG_ITEMS )
   2151              numItems = ZDO_MAX_RTG_ITEMS;
   2152          
   2153            // Allocate the memory to build the table
   2154            pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   2155          
   2156            if ( pBuf )
   2157            {
   2158              // Convert buffer to list
   2159              pList = (rtgItem_t *)pBuf;
   2160          
   2161              // Loop through items and build list
   2162              for ( x = 0; x < numItems; x++ )
   2163              {
   2164                NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   2165          
   2166                // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   2167                switch( pList->status )
   2168                {
   2169                  case RT_ACTIVE:
   2170                    pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   2171                    break;
   2172          
   2173                  case RT_DISC:
   2174                    pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   2175                    break;
   2176          
   2177                  case RT_LINK_FAIL:
   2178                    pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   2179          
   2180                  case RT_INIT:
   2181                  case RT_REPAIR:
   2182                  default:
   2183                    pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   2184                    break;
   2185                }
   2186          
   2187                // Increment pointer to next record
   2188                pList++;
   2189              }
   2190          
   2191              // Send response
   2192              ZDP_MgmtRtgRsp( TransSeq, SrcAddr, ZSuccess, maxNumItems, StartIndex, numItems,
   2193                                    (rtgItem_t *)pBuf, false );
   2194          
   2195              osal_mem_free( pBuf );
   2196            }
   2197          }
   2198          #endif // defined(ZDO_MGMT_RTG_RESPONSE)  && defined(RTR_NWK)
   2199          
   2200          #if defined ( ZDO_MGMT_RTG_REQUEST )
   2201          /*********************************************************************
   2202           * @fn          ZDO_ProcessMgmtRtgRsp
   2203           *
   2204           * @brief       This function handles parsing the incoming Management
   2205           *              Routing response and then generates a callback
   2206           *              to the ZD application.
   2207           *
   2208           * @param       SrcAddr - source of the request
   2209           * @param       msg - buffer holding incoming message to parse
   2210           * @param       SecurityUse -
   2211           *
   2212           * @return      none
   2213           */
   2214          void ZDO_ProcessMgmtRtgRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   2215          {
   2216            byte x;
   2217            byte status;
   2218            byte rtgCount = 0;
   2219            byte startIndex = 0;
   2220            byte rtgListCount = 0;
   2221            byte *pBuf = NULL;
   2222            rtgItem_t *pList = NULL;
   2223          
   2224            status = *msg++;
   2225            if ( status == ZSuccess )
   2226            {
   2227              rtgCount = *msg++;
   2228              startIndex = *msg++;
   2229              rtgListCount = *msg++;
   2230          
   2231              // Allocate a buffer big enough to handle the list
   2232              pBuf = osal_mem_alloc( rtgListCount * sizeof( rtgItem_t ) );
   2233              if ( pBuf )
   2234              {
   2235                pList = (rtgItem_t *)pBuf;
   2236                for ( x = 0; x < rtgListCount; x++ )
   2237                {
   2238                  pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   2239                  msg += 2;
   2240                  pList->status = *msg++;
   2241                  pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   2242                  msg += 2;
   2243                  pList++;
   2244                }
   2245              }
   2246            }
   2247          
   2248            // Call the callback to the application.
   2249            ZDApp_MgmtRtgRspCB( SrcAddr->addr.shortAddr, status, rtgCount,
   2250                                           startIndex, rtgListCount, (rtgItem_t *)pBuf );
   2251          
   2252            if ( pBuf )
   2253            {
   2254              osal_mem_free( pBuf );
   2255            }
   2256          }
   2257          #endif // ZDO_MGMT_RTG_REQUEST
   2258          
   2259          #if defined ( ZDO_MGMT_BIND_RESPONSE )
   2260          /*********************************************************************
   2261           * @fn          ZDO_ProcessMgmtBindReq
   2262           *
   2263           * @brief       This function finishes the processing of the Management
   2264           *              Bind Request and generates the response.
   2265           *
   2266           *   Note:      This function will limit the number of items returned
   2267           *              to ZDO_MAX_BIND_ITEMS items.
   2268           *
   2269           * @param       ResultCountSrcAddr - source of the request
   2270           * @param       msg - pointer to incoming message
   2271           * @param       SecurityUse -
   2272           *
   2273           * @return      none
   2274           */
   2275          void ZDO_ProcessMgmtBindReq( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
   2276          {
   2277          #if defined ( REFLECTOR )
   2278            byte x;
   2279            uint16 maxNumItems;
   2280            uint16 numItems;
   2281            byte *pBuf = NULL;
   2282            apsBindingItem_t *pList;
   2283          
   2284            // Get the number of table items
   2285            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   2286          
   2287            if ( maxNumItems > StartIndex )
   2288              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   2289            else
   2290              numItems = 0;
   2291          
   2292            // limit the size of the list
   2293            if ( numItems > ZDO_MAX_BIND_ITEMS )
   2294              numItems = ZDO_MAX_BIND_ITEMS;
   2295          
   2296            // Allocate the memory to build the table
   2297            if ( numItems )
   2298              pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems );
   2299          
   2300            if ( pBuf )
   2301            {
   2302              // Convert buffer to list
   2303              pList = (apsBindingItem_t *)pBuf;
   2304          
   2305              // Loop through items and build list
   2306              for ( x = 0; x < numItems; x++ )
   2307              {
   2308                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   2309                pList++;
   2310              }
   2311            }
   2312          
   2313            // Send response
   2314            ZDP_MgmtBindRsp( TransSeq, SrcAddr, ZSuccess, (byte)maxNumItems, StartIndex, (byte)numItems,
   2315                                  (apsBindingItem_t *)pBuf, false );
   2316          
   2317            if ( pBuf )
   2318            {
   2319              osal_mem_free( pBuf );
   2320            }
   2321          #else  // See if app support is needed
   2322          
   2323            ZDApp_MgmtBindReqCB( TransSeq, SrcAddr, StartIndex, SecurityUse );
   2324          
   2325          #endif
   2326          }
   2327          #endif // ZDO_MGMT_BIND_RESPONSE
   2328          
   2329          #if defined ( ZDO_MGMT_BIND_REQUEST )
   2330          /*********************************************************************
   2331           * @fn          ZDO_ProcessMgmtBindRsp
   2332           *
   2333           * @brief       This function handles parsing the incoming Management
   2334           *              Binding response and then generates a callback
   2335           *              to the ZD application.
   2336           *
   2337           * @param       SrcAddr - source of the request
   2338           * @param       msg - buffer holding incoming message to parse
   2339           * @param       SecurityUse -
   2340           *
   2341           * @return      none
   2342           */
   2343          void ZDO_ProcessMgmtBindRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   2344          {
   2345            byte x;
   2346            byte status;
   2347            byte bindingCount = 0;
   2348            byte startIndex = 0;
   2349            byte bindingListCount = 0;
   2350            byte *pBuf = NULL;
   2351            apsBindingItem_t *pList = NULL;
   2352          
   2353            status = *msg++;
   2354            if ( status == ZSuccess )
   2355            {
   2356              bindingCount = *msg++;
   2357              startIndex = *msg++;
   2358              bindingListCount = *msg++;
   2359          
   2360              // Allocate a buffer big enough to handle the list
   2361              if ( bindingListCount )
   2362                pBuf = osal_mem_alloc( (short)(bindingListCount * sizeof( apsBindingItem_t )) );
   2363              if ( pBuf )
   2364              {
   2365                pList = (apsBindingItem_t *)pBuf;
   2366                for ( x = 0; x < bindingListCount; x++ )
   2367                {
   2368                  osal_cpyExtAddr( pList->srcAddr, msg );
   2369                  msg += Z_EXTADDR_LEN;
   2370                  pList->srcEP = *msg++;
   2371          
   2372                  // Get the Cluster ID
   2373                  if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
   2374                  {
   2375                    pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2376                    msg += 2;
   2377                    pList->dstAddr.addrMode = *msg++;
   2378                    if ( pList->dstAddr.addrMode == Addr64Bit )
   2379                    {
   2380                      osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2381                      msg += Z_EXTADDR_LEN;
   2382                      pList->dstEP = *msg++;
   2383                    }
   2384                    else
   2385                    {
   2386                      pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   2387                      msg += 2;
   2388                    }
   2389                  }
   2390                  else
   2391                  {
   2392                    pList->clusterID = *msg++;
   2393          
   2394                    osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2395                    msg += Z_EXTADDR_LEN;
   2396                    pList->dstEP = *msg++;
   2397                  }
   2398          
   2399                  pList++;
   2400                }
   2401              }
   2402            }
   2403          
   2404            // Call the callback to the application
   2405            ZDApp_MgmtBindRspCB( SrcAddr->addr.shortAddr, status, bindingCount,
   2406                              startIndex, bindingListCount, (apsBindingItem_t *)pBuf );
   2407          
   2408            if ( pBuf )
   2409                osal_mem_free( pBuf );
   2410          }
   2411          #endif // ZDO_MGMT_BIND_REQUEST
   2412          
   2413          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && defined ( RTR_NWK )
   2414          /*********************************************************************
   2415           * @fn          ZDO_ProcessMgmtDirectJoinReq
   2416           *
   2417           * @brief       This function finishes the processing of the Management
   2418           *              Direct Join Request and generates the response.
   2419           *
   2420           * @param       SrcAddr - source of the request
   2421           * @param       msg - pointer to incoming message
   2422           * @param       SecurityUse -
   2423           *
   2424           * @return      none
   2425           */
   2426          void ZDO_ProcessMgmtDirectJoinReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   2427          {
   2428            byte *deviceAddr;
   2429            byte capInfo;
   2430            byte stat;
   2431          
   2432            // Parse the message
   2433            deviceAddr = msg;
   2434            capInfo = msg[Z_EXTADDR_LEN];
   2435          
   2436            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   2437          
   2438            ZDP_MgmtDirectJoinRsp( TransSeq, SrcAddr, stat, false );
   2439          }
   2440          #endif // ZDO_MGMT_JOINDIRECT_RESPONSE && RTR_NWK
   2441          
   2442          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
   2443          /*********************************************************************
   2444           * @fn          ZDO_ProcessMgmtDirectJoinRsp
   2445           *
   2446           * @brief       This function handles parsing the incoming Management
   2447           *              Direct Join response and then generates a callback
   2448           *              to the ZD application.
   2449           *
   2450           * @param       SrcAddr - source of the request
   2451           * @param       Status - ZSuccess or other for failure
   2452           * @param       SecurityUse -
   2453           *
   2454           * @return      none
   2455           */
   2456          void ZDO_ProcessMgmtDirectJoinRsp( zAddrType_t *SrcAddr, byte Status, byte SecurityUse )
   2457          {
   2458            // Call the callback to the application
   2459            ZDApp_MgmtDirectJoinRspCB( SrcAddr->addr.shortAddr, Status, SecurityUse );
   2460          }
   2461          #endif // ZDO_MGMT_JOINDIRECT_REQUEST
   2462          
   2463          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
   2464          /*********************************************************************
   2465           * @fn          ZDO_ProcessMgmtLeaveReq
   2466           *
   2467           * @brief       This function processes a Management Leave Request
   2468           *              and generates the response.
   2469           *
   2470           * @param       SrcAddr - source of the request
   2471           * @param       msg - pointer to incoming message
   2472           * @param       SecurityUse -
   2473           *
   2474           * @return      none
   2475           */
   2476          void ZDO_ProcessMgmtLeaveReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   2477          {
   2478            NLME_LeaveReq_t req;
   2479            ZStatus_t       status;
   2480          
   2481          
   2482            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   2483                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   2484            {
   2485              // Remove this device
   2486              req.extAddr = NULL;
   2487            }
   2488            else
   2489            {
   2490              // Remove child device
   2491              req.extAddr = msg;
   2492            }
   2493          
   2494            req.removeChildren = FALSE;
   2495            req.rejoin         = FALSE;
   2496            req.silent         = FALSE;
   2497          
   2498            status = NLME_LeaveReq( &req );
   2499          
   2500            ZDP_MgmtLeaveRsp( TransSeq, SrcAddr, status, FALSE );
   2501          }
   2502          #endif // ZDO_MGMT_LEAVE_RESPONSE
   2503          
   2504          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
   2505          /*********************************************************************
   2506           * @fn          ZDO_ProcessMgmtLeaveRsp
   2507           *
   2508           * @brief       This function handles a Management Leave Response
   2509           *              and generates a callback to the ZD application.
   2510           *
   2511           * @param       SrcAddr - source of the request
   2512           * @param       Status - ZSuccess or other for failure
   2513           * @param       SecurityUse -
   2514           *
   2515           * @return      none
   2516           */
   2517          void ZDO_ProcessMgmtLeaveRsp( zAddrType_t *SrcAddr, byte Status, byte SecurityUse )
   2518          {
   2519            // Call the callback to the application
   2520            ZDApp_MgmtLeaveRspCB( SrcAddr->addr.shortAddr, Status, SecurityUse );
   2521          }
   2522          #endif // ZDO_MGMT_LEAVE_REQUEST
   2523          
   2524          #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE ) && defined( RTR_NWK )
   2525          /*********************************************************************
   2526           * @fn          ZDO_ProcessMgmtPermitJoinReq
   2527           *
   2528           * @brief       This function processes a Management Permit Join Request
   2529           *              and generates the response.
   2530           *
   2531           * @param       SrcAddr - source of the request
   2532           * @param       msg - pointer to incoming message
   2533           * @param       SecurityUse -
   2534           *
   2535           * @return      none
   2536           */
   2537          void ZDO_ProcessMgmtPermitJoinReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg,
   2538                                             byte SecurityUse )
   2539          {
   2540            uint8 stat;
   2541            uint8 duration;
   2542            uint8 tcsig;
   2543          
   2544          
   2545            duration = msg[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   2546            tcsig    = msg[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   2547          
   2548            // Set the network layer permit join duration
   2549            stat = (byte) NLME_PermitJoiningRequest( duration );
   2550          
   2551            // Handle the Trust Center Significance
   2552            if ( tcsig == TRUE )
   2553            {
   2554              ZDSecMgrPermitJoining( duration );
   2555            }
   2556          
   2557            // Send a response if unicast
   2558            if (SrcAddr->addr.shortAddr != NWK_BROADCAST_SHORTADDR)
   2559            {
   2560              ZDP_MgmtPermitJoinRsp( TransSeq, SrcAddr, stat, false );
   2561            }
   2562          }
   2563          #endif // ZDO_MGMT_PERMIT_JOIN_RESPONSE && defined( RTR_NWK )
   2564          
   2565          /*
   2566           * This function stub allows the next higher layer to be notified of
   2567           * a permit joining timeout.
   2568           */
   2569          #if defined( RTR_NWK )
   2570          /*********************************************************************
   2571           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   2572           *
   2573           * @brief       This function stub allows the next higher layer to be
   2574           *              notified of a permit joining timeout. Currently, this
   2575           *              directly bypasses the APS layer.
   2576           *
   2577           * @param       none
   2578           *
   2579           * @return      none
   2580           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   2581          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   2582          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2583            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   2584            {
   2585              // Currently, only the ZDSecMgr needs to be notified
   2586              ZDSecMgrPermitJoiningTimeout();
   2587            }
   2588            #endif
   2589          }
   \   000000   02....       LJMP    ?BRET
   2590          #endif // defined( RTR_NWK )
   2591          
   2592          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
   2593          /*********************************************************************
   2594           * @fn          ZDO_ProcessMgmtPermitJoinRsp
   2595           *
   2596           * @brief       This function handles a Management Permit Join Response
   2597           *              and generates a callback to the ZD application.
   2598           *
   2599           * @param       SrcAddr - source of the request
   2600           * @param       Status - ZSuccess or other for failure
   2601           * @param       SecurityUse -
   2602           *
   2603           * @return      none
   2604           */
   2605          void ZDO_ProcessMgmtPermitJoinRsp( zAddrType_t *SrcAddr, byte Status, byte SecurityUse )
   2606          {
   2607            // Call the callback to the application
   2608            ZDApp_MgmtPermitJoinRspCB( SrcAddr->addr.shortAddr, Status, SecurityUse );
   2609          }
   2610          #endif // ZDO_MGMT_PERMIT_JOIN_REQUEST
   2611          
   2612          #if defined ( ZDO_USERDESC_REQUEST )
   2613          /*********************************************************************
   2614           * @fn          ZDO_ProcessUserDescRsp
   2615           *
   2616           * @brief       This function handles parsing the incoming User
   2617           *              Descriptor Response and then generates a callback
   2618           *              to the ZD application.
   2619           *
   2620           * @param       SrcAddr - source of the request
   2621           * @param       msg - incoming response message
   2622           * @param       SecurityUse -
   2623           *
   2624           * @return      none
   2625           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   2626          void ZDO_ProcessUserDescRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   \                     ZDO_ProcessUserDescRsp:
   2627          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   2628            ZDApp_UserDescRspCB( SrcAddr->addr.shortAddr,
   2629                                msg[0],                           // Status
   2630                                BUILD_UINT16( msg[1], msg[2] ),   // NWKAddrOfInterest
   2631                                msg[3],                           // Length
   2632                                &msg[4],                          // User Descriptor
   2633                                SecurityUse );
   \   00000D                ; Setup parameters for call to function ZDApp_UserDescRspCB
   \   00000D   E9           MOV     A,R1
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000015   EA           MOV     A,R2
   \   000016   2404         ADD     A,#0x4
   \   000018   F5..         MOV     ?V0 + 0,A
   \   00001A   EB           MOV     A,R3
   \   00001B   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FC           MOV     R4,A
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   A3           INC     DPTR
   \   00003B   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00004B   90....       MOV     DPTR,#(ZDApp_UserDescRspCB & 0xffff)
   \   00004E   74..         MOV     A,#((ZDApp_UserDescRspCB >> 16) & 0xff)
   \   000050   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   2634          }
   \   000058   80..         SJMP    ?Subroutine105

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ?Subroutine99
   \   000001                ; // Fall through to label ?Subroutine99

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   E4           CLR     A
   \   000004   2C           ADD     A,R4
   \   000005   E9           MOV     A,R1
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   22           RET
   2635          #endif // ZDO_USERDESC_REQUEST
   2636          
   2637          #if defined ( ZDO_USERDESC_RESPONSE )
   2638          /*********************************************************************
   2639           * @fn          ZDO_ProcessUserDescReq
   2640           *
   2641           * @brief       This function finishes the processing of the User
   2642           *              Descriptor Request and generates the response.
   2643           *
   2644           * @param       SrcAddr - source of the request
   2645           * @param       msg - pointer to incoming message
   2646           * @param       SecurityUse -
   2647           *
   2648           * @return      none
   2649           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   2650          void ZDO_ProcessUserDescReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   \                     ZDO_ProcessUserDescReq:
   2651          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
   \   00000C   8A..         MOV     ?V0 + 4,R2
   \   00000E   8B..         MOV     ?V0 + 5,R3
   \   000010   741F         MOV     A,#0x1f
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine60 & 0xFFFF
   2652            uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_163:
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ?Subroutine39 & 0xFFFF
   2653            UserDescriptorFormat_t userDesc;
   2654          
   2655            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   2656                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \                     ??CrossCallReturnLabel_95:
   \   00001D   7003         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000022   7062         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000024                ; Setup parameters for call to function osal_nv_read
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   8582..       MOV     ?V0 + 2,DPL
   \   00002D   8583..       MOV     ?V0 + 3,DPH
   \   000030   78..         MOV     R0,#?V0 + 2
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   75..11       MOV     ?V0 + 2,#0x11
   \   000038   8B..         MOV     ?V0 + 3,R3
   \   00003A   78..         MOV     R0,#?V0 + 2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7C00         MOV     R4,#0x0
   \   000041   7D00         MOV     R5,#0x0
   \   000043   7A81         MOV     R2,#-0x7f
   \   000045   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   000048   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \   00004A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004D   7404         MOV     A,#0x4
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   E9           MOV     A,R1
   \   000053   7031         JNZ     ??ZDO_ProcessUserDescReq_1
   2657            {
   2658              ZDP_UserDescRsp( TransSeq, SrcAddr, aoi, &userDesc, false );
   \   000055                ; Setup parameters for call to function ZDP_UserDescRsp
   \   000055   75..00       MOV     ?V0 + 1,#0x0
   \   000058   78..         MOV     R0,#?V0 + 1
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005D   7401         MOV     A,#0x1
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   8582..       MOV     ?V0 + 2,DPL
   \   000065   8583..       MOV     ?V0 + 3,DPH
   \   000068   78..         MOV     R0,#?V0 + 2
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   EE           MOV     A,R6
   \   00006E   FC           MOV     R4,A
   \   00006F   EF           MOV     A,R7
   \   000070   FD           MOV     R5,A
   \   000071   AA..         MOV     R2,?V0 + 4
   \   000073   AB..         MOV     R3,?V0 + 5
   \   000075   A9..         MOV     R1,?V0 + 0
   \   000077   90....       MOV     DPTR,#(ZDP_UserDescRsp & 0xffff)
   \   00007A   74..         MOV     A,#((ZDP_UserDescRsp >> 16) & 0xff)
   \   00007C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00007F   7403         MOV     A,#0x3
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   \   000084   802B         SJMP    ??ZDO_ProcessUserDescReq_2
   2659            }
   2660            else
   2661            {
   2662          #if defined( ZDO_CACHE )
   2663              (void)aoi;
   2664          #else
   2665              ZDP_GenericRsp(
   2666                 TransSeq, SrcAddr, ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000086                ; Setup parameters for call to function ZDP_GenericRsp
   \   000086   75..11       MOV     ?V0 + 2,#0x11
   \   000089   75..80       MOV     ?V0 + 3,#-0x80
   \   00008C   78..         MOV     R0,#?V0 + 2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   8E..         MOV     ?V0 + 2,R6
   \   000093   8F..         MOV     ?V0 + 3,R7
   \   000095   78..         MOV     R0,#?V0 + 2
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   AD..         MOV     R5,?V0 + 1
   \   00009C   7C84         MOV     R4,#-0x7c
   \   00009E   AA..         MOV     R2,?V0 + 4
   \   0000A0   AB..         MOV     R3,?V0 + 5
   \   0000A2   A9..         MOV     R1,?V0 + 0
   \   0000A4   90....       MOV     DPTR,#(ZDP_GenericRsp & 0xffff)
   \   0000A7   74..         MOV     A,#((ZDP_GenericRsp >> 16) & 0xff)
   \   0000A9   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000AC   7404         MOV     A,#0x4
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   2667          #endif
   2668            }
   2669          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000B1   7411         MOV     A,#0x11
   \   0000B3   02....       LJMP    ?Subroutine103 & 0xFFFF
   2670          #endif // ZDO_USERDESC_RESPONSE
   2671          
   2672          #if defined ( ZDO_USERDESCSET_REQUEST )
   2673          /*********************************************************************
   2674           * @fn          ZDO_ProcessUserDescConf
   2675           *
   2676           * @brief       This function handles parsing the incoming User
   2677           *              Descriptor Confirm and then generates a callback
   2678           *              to the ZD application.
   2679           *
   2680           * @param       SrcAddr - source of the request
   2681           * @param       msg - incoming response message
   2682           * @param       SecurityUse -
   2683           *
   2684           * @return      none
   2685           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   2686          void ZDO_ProcessUserDescConf( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   \                     ZDO_ProcessUserDescConf:
   2687          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   2688            ZDApp_UserDescConfCB( SrcAddr->addr.shortAddr,
   2689                                  msg[0],                           // Status
   2690                                  SecurityUse );
   \   000008                ; Setup parameters for call to function ZDApp_UserDescConfCB
   \   000008   E9           MOV     A,R1
   \   000009   FC           MOV     R4,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00000F   90....       MOV     DPTR,#(ZDApp_UserDescConfCB & 0xffff)
   \   000012   74..         MOV     A,#((ZDApp_UserDescConfCB >> 16) & 0xff)
   \   000014   02....       LJMP    ?Subroutine90 & 0xFFFF
   2691          }
   2692          #endif // ZDO_USERDESCSET_REQUEST
   2693          
   2694          
   2695          #if defined ( ZDO_USERDESCSET_RESPONSE )
   2696          /*********************************************************************
   2697           * @fn          ZDO_ProcessUserDescSet
   2698           *
   2699           * @brief       This function finishes the processing of the User
   2700           *              Descriptor Set and generates the response.
   2701           *
   2702           * @param       SrcAddr - source of the request
   2703           * @param       msg - pointer to incoming message
   2704           * @param       SecurityUse -
   2705           *
   2706           * @return      none
   2707           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   2708          void ZDO_ProcessUserDescSet( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   \                     ZDO_ProcessUserDescSet:
   2709          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 4,R2
   \   000014   8B..         MOV     ?V0 + 5,R3
   \   000016   8C..         MOV     ?V0 + 0,R4
   \   000018   8D..         MOV     ?V0 + 1,R5
   \   00001A   7423         MOV     A,#0x23
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 3,A
   2710            uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
   2711            UserDescriptorFormat_t userDesc;
   2712            uint8 outMsg[3];
   2713            uint8 status;
   2714            uint16 nai;
   2715          
   2716            nai = BUILD_UINT16( msg[0], msg[1] );
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   A3           INC     DPTR
   \   000027   A882         MOV     R0,DPL
   \   000029   A983         MOV     R1,DPH
   \   00002B   8C82         MOV     DPL,R4
   \   00002D   8D83         MOV     DPH,R5
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FE           MOV     R6,A
   2717          
   2718            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000031   FA           MOV     R2,A
   \   000032   8882         MOV     DPL,R0
   \   000034   8983         MOV     DPH,R1
   \   000036   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000039   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   68           XRL     A,R0
   \   00003E   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   69           XRL     A,R1
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   2719            {
   2720              if ( NLME_GetProtocolVersion() == ZB_PROT_V1_0 )
   \   000048                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000048   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   00004B   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   00004D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000050   E9           MOV     A,R1
   \   000051   6401         XRL     A,#0x1
   \   000053   700A         JNZ     ??ZDO_ProcessUserDescSet_2
   2721                userDesc.len = AF_MAX_USER_DESCRIPTOR_LEN;
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   7410         MOV     A,#0x10
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   8030         SJMP    ??ZDO_ProcessUserDescSet_3
   2722              else
   2723              {
   2724                userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??ZDO_ProcessUserDescSet_2:
   \   00005F   85..82       MOV     DPL,?V0 + 0
   \   000062   85..83       MOV     DPH,?V0 + 1
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   C3           CLR     C
   \   000069   9410         SUBB    A,#0x10
   \   00006B   500C         JNC     ??ZDO_ProcessUserDescSet_4
   \   00006D   85..82       MOV     DPL,?V0 + 0
   \   000070   85..83       MOV     DPH,?V0 + 1
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FA           MOV     R2,A
   \   000077   8002         SJMP    ??ZDO_ProcessUserDescSet_5
   \                     ??ZDO_ProcessUserDescSet_4:
   \   000079   7A10         MOV     R2,#0x10
   \                     ??ZDO_ProcessUserDescSet_5:
   \   00007B   7404         MOV     A,#0x4
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   EA           MOV     A,R2
   \   000081   F0           MOVX    @DPTR,A
   2725                msg ++;  // increment one for the length field
   \   000082   85..82       MOV     DPL,?V0 + 0
   \   000085   85..83       MOV     DPH,?V0 + 1
   \   000088   A3           INC     DPTR
   \   000089   8582..       MOV     ?V0 + 0,DPL
   \   00008C   8583..       MOV     ?V0 + 1,DPH
   2726              }
   2727              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??ZDO_ProcessUserDescSet_3:
   \   00008F                ; Setup parameters for call to function osal_memcpy
   \   00008F   85..82       MOV     DPL,?V0 + 0
   \   000092   85..83       MOV     DPH,?V0 + 1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A982         MOV     R1,DPL
   \   000099   AA83         MOV     R2,DPH
   \   00009B   89..         MOV     ?V0 + 0,R1
   \   00009D   8A..         MOV     ?V0 + 1,R2
   \   00009F   75..00       MOV     ?V0 + 2,#0x0
   \   0000A2   78..         MOV     R0,#?V0 + 0
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A7   7407         MOV     A,#0x7
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   FC           MOV     R4,A
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7408         MOV     A,#0x8
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   AA82         MOV     R2,DPL
   \   0000B7   AB83         MOV     R3,DPH
   \   0000B9   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   0000BC   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   0000BE   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
   2728              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   0000C6                ; Setup parameters for call to function osal_nv_write
   \   0000C6   7404         MOV     A,#0x4
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   8582..       MOV     ?V0 + 0,DPL
   \   0000CE   8583..       MOV     ?V0 + 1,DPH
   \   0000D1   78..         MOV     R0,#?V0 + 0
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   75..11       MOV     ?V0 + 0,#0x11
   \   0000D9   75..00       MOV     ?V0 + 1,#0x0
   \   0000DC   78..         MOV     R0,#?V0 + 0
   \   0000DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E1   7C00         MOV     R4,#0x0
   \   0000E3   7D00         MOV     R5,#0x0
   \   0000E5   7A81         MOV     R2,#-0x7f
   \   0000E7   7B00         MOV     R3,#0x0
   \   0000E9   90....       MOV     DPTR,#(osal_nv_write & 0xffff)
   \   0000EC   74..         MOV     A,#((osal_nv_write >> 16) & 0xff)
   \   0000EE   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000F1   7404         MOV     A,#0x4
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   2729              if ( userDesc.len != 0 )
   \   0000F6   7404         MOV     A,#0x4
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000FF   6005         JZ      ??ZDO_ProcessUserDescSet_6
   2730              {
   2731                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000101   E0           MOVX    A,@DPTR
   \   000102   D2E4         SETB    0xE0 /* A   */.4
   \   000104   8003         SJMP    ??ZDO_ProcessUserDescSet_7
   2732              }
   2733              else
   2734              {
   2735                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_6:
   \   000106   E0           MOVX    A,@DPTR
   \   000107   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_7:
   \   000109   F0           MOVX    @DPTR,A
   2736              }
   2737          
   2738              status = ZDP_SUCCESS;
   \   00010A   7A00         MOV     R2,#0x0
   \   00010C   8002         SJMP    ??ZDO_ProcessUserDescSet_8
   2739            }
   2740            else
   2741            {
   2742              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   00010E   7A84         MOV     R2,#-0x7c
   2743            }
   2744          
   2745            outMsg[0] = status;
   \                     ??ZDO_ProcessUserDescSet_8:
   \   000110   7401         MOV     A,#0x1
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   EA           MOV     A,R2
   \   000116   F0           MOVX    @DPTR,A
   2746            outMsg[1] = LO_UINT16( nai );
   \   000117   7402         MOV     A,#0x2
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   EE           MOV     A,R6
   \   00011D   F0           MOVX    @DPTR,A
   2747            outMsg[2] = LO_UINT16( nai );
   \   00011E   7403         MOV     A,#0x3
   \   000120   12....       LCALL   ?XSTACK_DISP0_8
   \   000123   EE           MOV     A,R6
   \   000124   F0           MOVX    @DPTR,A
   2748          
   2749            ZDP_SendData( &TransSeq, SrcAddr, User_Desc_conf, 3, outMsg, SecurityUse );
   \   000125                ; Setup parameters for call to function ZDP_SendData
   \   000125   E5..         MOV     A,?V0 + 3
   \   000127   F5..         MOV     ?V0 + 0,A
   \   000129   78..         MOV     R0,#?V0 + 0
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012E   7402         MOV     A,#0x2
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   8582..       MOV     ?V0 + 0,DPL
   \   000136   8583..       MOV     ?V0 + 1,DPH
   \   000139   78..         MOV     R0,#?V0 + 0
   \   00013B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013E   75..14       MOV     ?V0 + 0,#0x14
   \   000141   75..80       MOV     ?V0 + 1,#-0x80
   \   000144   78..         MOV     R0,#?V0 + 0
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000149   7903         MOV     R1,#0x3
   \   00014B   AC..         MOV     R4,?V0 + 4
   \   00014D   AD..         MOV     R5,?V0 + 5
   \   00014F   7405         MOV     A,#0x5
   \   000151   12....       LCALL   ?XSTACK_DISP0_8
   \   000154   AA82         MOV     R2,DPL
   \   000156   AB83         MOV     R3,DPH
   \   000158   90....       MOV     DPTR,#(ZDP_SendData & 0xffff)
   \   00015B   74..         MOV     A,#((ZDP_SendData >> 16) & 0xff)
   \   00015D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000160   7405         MOV     A,#0x5
   \   000162   12....       LCALL   ?DEALLOC_XSTACK8
   2750          }
   \   000165   7415         MOV     A,#0x15
   \   000167                REQUIRE ?Subroutine103
   \   000167                ; // Fall through to label ?Subroutine103
   2751          #endif // ZDO_USERDESCSET_RESPONSE
   2752          
   2753          #if defined ( ZDO_ENDDEVICE_ANNCE ) && defined(RTR_NWK)
   2754          /*********************************************************************
   2755           * @fn          ZDO_ProcessEndDeviceAnnce
   2756           *
   2757           * @brief       This function processes an end device annouce message.
   2758           *
   2759           * @param       SrcAddr - source of the request
   2760           * @param       msg - pointer to incoming message
   2761           * @param       SecurityUse -
   2762           *
   2763           * @return      none
   2764           */
   2765          void ZDO_ProcessEndDeviceAnnce( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
   2766          {
   2767            uint16 nwkAddr;
   2768            associated_devices_t *dev;
   2769            AddrMgrEntry_t addrEntry;
   2770            uint8 *ieeeAddr;
   2771            uint8 capabilities;
   2772          
   2773            // Parse incoming message
   2774            nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2775            msg += 2;
   2776            ieeeAddr = msg;
   2777            msg += Z_EXTADDR_LEN;
   2778            if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
   2779            {
   2780              capabilities = *msg;
   2781            }
   2782            else
   2783            {
   2784              capabilities = 0;
   2785            }
   2786          
   2787            addrEntry.user = ADDRMGR_USER_DEFAULT;
   2788            addrEntry.nwkAddr = nwkAddr;
   2789            AddrMgrExtAddrSet( addrEntry.extAddr, ieeeAddr );
   2790            AddrMgrEntryUpdate( &addrEntry );
   2791          
   2792            // find device in device list
   2793            dev = AssocGetWithExt( ieeeAddr );
   2794            if ( dev != NULL )
   2795            {
   2796              // if found and address is different
   2797              if ( dev->shortAddr != nwkAddr )
   2798              {
   2799                // update device list if device is (was) not our child
   2800                if ( dev->nodeRelation == NEIGHBOR || dev->nodeRelation == OTHER )
   2801                {
   2802                  dev->shortAddr = nwkAddr;
   2803                }
   2804              }
   2805            }
   2806          
   2807            // Application notification
   2808            ZDApp_EndDeviceAnnounceCB( SrcAddr->addr.shortAddr, nwkAddr, ieeeAddr, capabilities );
   2809          }
   2810          #endif // ZDO_ENDDEVICE_ANNCE
   2811          
   2812          #if defined( ZDO_SIMPLEDESC_REQUEST ) || ( defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 ) )
   2813          /*********************************************************************
   2814           * @fn          ZDO_BuildSimpleDescBuf
   2815           *
   2816           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2817           *
   2818           * @param       buf  - pointer to a byte array big enough for data.
   2819           * @param       desc - SimpleDescriptionFormat_t *
   2820           *
   2821           * @return      none
   2822           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   2823          void ZDO_BuildSimpleDescBuf( byte *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2824          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2825            byte proVer = NLME_GetProtocolVersion();
   \   00000D                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00000D   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000010   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000015   E9           MOV     A,R1
   \   000016   FC           MOV     R4,A
   2826            byte cnt;
   2827            uint16 *ptr;
   2828          
   2829            *buf++ = desc->EndPoint;
   \   000017   85..82       MOV     DPL,?V0 + 0
   \   00001A   85..83       MOV     DPH,?V0 + 1
   \   00001D   12....       LCALL   ?Subroutine10 & 0xFFFF
   2830            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_251:
   \   000020   A882         MOV     R0,DPL
   \   000022   A983         MOV     R1,DPH
   \   000024   12....       LCALL   ?Subroutine3 & 0xFFFF
   2831            *buf++ = LO_UINT16( desc->AppProfId );
   2832            *buf++ = HI_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_7:
   \   000027   E5..         MOV     A,?V0 + 0
   \   000029   2403         ADD     A,#0x3
   \   00002B   F8           MOV     R0,A
   \   00002C   E5..         MOV     A,?V0 + 1
   \   00002E   3400         ADDC    A,#0x0
   \   000030   F9           MOV     R1,A
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \   000035   12....       LCALL   ?Subroutine3 & 0xFFFF
   2833            *buf++ = LO_UINT16( desc->AppDeviceId );
   2834          
   2835            if ( proVer == ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_8:
   \   000038   7401         MOV     A,#0x1
   \   00003A   6C           XRL     A,R4
   \   00003B   85..82       MOV     DPL,?V0 + 0
   \   00003E   85..83       MOV     DPH,?V0 + 1
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   7011         JNZ     ??ZDO_BuildSimpleDescBuf_0
   2836            {
   2837              *buf++ = (byte)((desc->AppDevVer << 4) | (desc->Reserved));
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   \   00004A   C4           SWAP    A
   \   00004B   540F         ANL     A,#0xf
   \   00004D   C0E0         PUSH    A
   \   00004F   EA           MOV     A,R2
   \   000050   C4           SWAP    A
   \   000051   54F0         ANL     A,#0xf0
   \   000053   FA           MOV     R2,A
   \   000054   D0E0         POP     A
   \   000056   4A           ORL     A,R2
   \   000057   8004         SJMP    ??ZDO_BuildSimpleDescBuf_1
   2838            }
   2839            else
   2840            {
   2841              *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   C4           SWAP    A
   \   00005B   54F0         ANL     A,#0xf0
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   00005D   12....       LCALL   ?Subroutine6 & 0xFFFF
   2842            }
   2843          
   2844            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_255:
   \   000060   E0           MOVX    A,@DPTR
   \   000061   12....       LCALL   ?Subroutine6 & 0xFFFF
   2845            ptr = desc->pAppInClusterList;
   \                     ??CrossCallReturnLabel_256:
   \   000064   12....       LCALL   ?Subroutine53 & 0xFFFF
   2846            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_140:
   \   000067   7C00         MOV     R4,#0x0
   \   000069   8003         SJMP    ??CrossCallReturnLabel_5
   2847            {
   2848              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   00006B   12....       LCALL   ?Subroutine1 & 0xFFFF
   2849              *buf++ = LO_UINT16( *ptr );
   2850            }
   \                     ??CrossCallReturnLabel_5:
   \   00006E   85..82       MOV     DPL,?V0 + 0
   \   000071   85..83       MOV     DPH,?V0 + 1
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FA           MOV     R2,A
   \   00007C   EC           MOV     A,R4
   \   00007D   C3           CLR     C
   \   00007E   9A           SUBB    A,R2
   \   00007F   40EA         JC      ??ZDO_BuildSimpleDescBuf_2
   2851          
   2852            *buf++ = desc->AppNumOutClusters;
   \   000081   85..82       MOV     DPL,?V0 + 0
   \   000084   85..83       MOV     DPH,?V0 + 1
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   12....       LCALL   ?Subroutine10 & 0xFFFF
   2853            ptr = desc->pAppOutClusterList;
   \                     ??CrossCallReturnLabel_252:
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   12....       LCALL   ?Subroutine53 & 0xFFFF
   2854            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_141:
   \   00009E   7C00         MOV     R4,#0x0
   \   0000A0   8003         SJMP    ??CrossCallReturnLabel_6
   2855            {
   2856              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   0000A2   12....       LCALL   ?Subroutine1 & 0xFFFF
   2857              *buf++ = LO_UINT16( *ptr );
   2858            }
   \                     ??CrossCallReturnLabel_6:
   \   0000A5   85..82       MOV     DPL,?V0 + 0
   \   0000A8   85..83       MOV     DPH,?V0 + 1
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FA           MOV     R2,A
   \   0000B6   EC           MOV     A,R4
   \   0000B7   C3           CLR     C
   \   0000B8   9A           SUBB    A,R2
   \   0000B9   40E7         JC      ??ZDO_BuildSimpleDescBuf_3
   2859          }
   \   0000BB   02....       LJMP    ?Subroutine105 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003                REQUIRE ?Subroutine96
   \   000003                ; // Fall through to label ?Subroutine96

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ??Subroutine73_1 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   02....       LJMP    ?Subroutine97 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000004   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \                     ??Subroutine73_0:
   \   000004   E0           MOVX    A,@DPTR
   \                     ??Subroutine73_1:
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   0E           INC     R6
   \   00000C   AF83         MOV     R7,DPH
   \   00000E   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000008   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   00000B   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   00000E   0C           INC     R4
   \   00000F   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006                REQUIRE ?Subroutine100
   \   000006                ; // Fall through to label ?Subroutine100
   2860          
   2861          /*********************************************************************
   2862           * @fn          ZDO_ParseSimpleDescBuf
   2863           *
   2864           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   2865           *
   2866           * @param       buf  - pointer to a byte array representing a Simple Desc.
   2867           * @param       desc - SimpleDescriptionFormat_t *
   2868           *
   2869           *              This routine allocates storage for the cluster IDs because
   2870           *              they are 16-bit and need to be aligned to be properly processed.
   2871           *              This routine returns non-zero if an allocation fails.
   2872           *
   2873           *              NOTE: This means that the caller or user of the input structure
   2874           *                    is responsible for freeing the memory
   2875           *
   2876           * @return      0: success
   2877           *              1: failure due to malloc failure.
   2878           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   2879          uint8 ZDO_ParseSimpleDescBuf( byte *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   2880          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2881            byte proVer = NLME_GetProtocolVersion();
   \   00000D                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00000D   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000010   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000015   E9           MOV     A,R1
   \   000016   FA           MOV     R2,A
   2882            uint8 num, i;
   2883          
   2884            desc->EndPoint = *buf++;
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   85..82       MOV     DPL,?V0 + 0
   \   00001F   85..83       MOV     DPH,?V0 + 1
   \   000022   12....       LCALL   ?Subroutine14 & 0xFFFF
   2885            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_25:
   \   000025   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000028   12....       LCALL   ?Subroutine4 & 0xFFFF
   2886            buf += 2;
   2887            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_265:
   \   00002B   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ?Subroutine9 & 0xFFFF
   2888            buf += 2;
   2889            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_16:
   \   000033   E5..         MOV     A,?V0 + 0
   \   000035   2405         ADD     A,#0x5
   \   000037   F8           MOV     R0,A
   \   000038   E5..         MOV     A,?V0 + 1
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F9           MOV     R1,A
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   E0           MOVX    A,@DPTR
   \   000042   C4           SWAP    A
   \   000043   540F         ANL     A,#0xf
   \   000045   C0E0         PUSH    A
   \   000047   8882         MOV     DPL,R0
   \   000049   8983         MOV     DPH,R1
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   54F0         ANL     A,#0xf0
   \   00004E   FB           MOV     R3,A
   \   00004F   D0E0         POP     A
   \   000051   4B           ORL     A,R3
   \   000052   F0           MOVX    @DPTR,A
   2890          
   2891            if ( proVer == ZB_PROT_V1_0 )
   \   000053   7401         MOV     A,#0x1
   \   000055   6A           XRL     A,R2
   \   000056   7025         JNZ     ??ZDO_ParseSimpleDescBuf_0
   2892            {
   2893              desc->Reserved = *buf++ &0x0F;
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   C4           SWAP    A
   \   00005E   54F0         ANL     A,#0xf0
   \   000060   C0E0         PUSH    A
   \   000062   8882         MOV     DPL,R0
   \   000064   8983         MOV     DPH,R1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   540F         ANL     A,#0xf
   \   000069   FA           MOV     R2,A
   \   00006A   D0E0         POP     A
   \   00006C   4A           ORL     A,R2
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   AE82         MOV     R6,DPL
   \   000074   AF83         MOV     R7,DPH
   \   000076   8882         MOV     DPL,R0
   \   000078   8983         MOV     DPH,R1
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   8011         SJMP    ??CrossCallReturnLabel_26
   2894            }
   2895            else
   2896            {
   2897              desc->Reserved = 0;
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   00007D   85..82       MOV     DPL,?V0 + 0
   \   000080   85..83       MOV     DPH,?V0 + 1
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   540F         ANL     A,#0xf
   \   00008B   12....       LCALL   ?Subroutine15 & 0xFFFF
   2898              buf++;
   2899            }
   2900          
   2901            // move in input cluster list (if any). allocate aligned memory.
   2902            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_26:
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   E0           MOVX    A,@DPTR
   \   000093   FA           MOV     R2,A
   \   000094   A3           INC     DPTR
   \   000095   0E           INC     R6
   \   000096   AF83         MOV     R7,DPH
   \   000098   85..82       MOV     DPL,?V0 + 0
   \   00009B   85..83       MOV     DPH,?V0 + 1
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   8A..         MOV     ?V0 + 4,R2
   2903            if (num)  {
   \   0000A7   6028         JZ      ??ZDO_ParseSimpleDescBuf_1
   2904              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))  {
   \   0000A9   E5..         MOV     A,?V0 + 0
   \   0000AB   2407         ADD     A,#0x7
   \   0000AD   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   0000B0   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000B3   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000B6   7002         JNZ     ??ZDO_ParseSimpleDescBuf_2
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   0000BA   7005         JNZ     ??ZDO_ParseSimpleDescBuf_3
   2905                // malloc failed. we're done.
   2906                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   0000BC   7901         MOV     R1,#0x1
   \   0000BE   02....       LJMP    ??ZDO_ParseSimpleDescBuf_5 & 0xFFFF
   2907              }
   2908              for (i=0; i<num; ++i)  {
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000C1   7A00         MOV     R2,#0x0
   \   0000C3   8006         SJMP    ??CrossCallReturnLabel_13
   2909                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   0000C5   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000C8   12....       LCALL   ?Subroutine8 & 0xFFFF
   2910                buf += 2;
   2911              }
   \                     ??CrossCallReturnLabel_13:
   \   0000CB   EA           MOV     A,R2
   \   0000CC   C3           CLR     C
   \   0000CD   95..         SUBB    A,?V0 + 4
   \   0000CF   40F4         JC      ??ZDO_ParseSimpleDescBuf_6
   2912            }
   2913          
   2914            // move in output cluster list (if any). allocate aligned memory.
   2915            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   FA           MOV     R2,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   AE82         MOV     R6,DPL
   \   0000DA   AF83         MOV     R7,DPH
   \   0000DC   85..82       MOV     DPL,?V0 + 0
   \   0000DF   85..83       MOV     DPH,?V0 + 1
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   8A..         MOV     ?V0 + 4,R2
   2916            if (num)  {
   \   0000EE   604F         JZ      ??ZDO_ParseSimpleDescBuf_7
   2917              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))  {
   \   0000F0   E5..         MOV     A,?V0 + 0
   \   0000F2   240A         ADD     A,#0xa
   \   0000F4   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   0000F7   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000FA   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000FD   7002         JNZ     ??ZDO_ParseSimpleDescBuf_8
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000101   7029         JNZ     ??ZDO_ParseSimpleDescBuf_9
   2918                // malloc failed. free input cluster list memory if there is any
   2919                if (desc->pAppInClusterList)  {
   \   000103   85..82       MOV     DPL,?V0 + 0
   \   000106   85..83       MOV     DPH,?V0 + 1
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   7002         JNZ     ??ZDO_ParseSimpleDescBuf_10
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000115   60A5         JZ      ??ZDO_ParseSimpleDescBuf_4
   2920                  osal_mem_free(desc->pAppInClusterList);
   \   000117                ; Setup parameters for call to function osal_mem_free
   \   000117   85..82       MOV     DPL,?V0 + 0
   \   00011A   85..83       MOV     DPH,?V0 + 1
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000127   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00012A   8090         SJMP    ??ZDO_ParseSimpleDescBuf_4
   2921                }
   2922                return 1;
   2923              }
   2924              for (i=0; i<num; ++i)  {
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   00012C   7A00         MOV     R2,#0x0
   \   00012E   8009         SJMP    ??CrossCallReturnLabel_14
   2925                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   000130   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   12....       LCALL   ?Subroutine8 & 0xFFFF
   2926                buf += 2;
   2927              }
   \                     ??CrossCallReturnLabel_14:
   \   000139   EA           MOV     A,R2
   \   00013A   C3           CLR     C
   \   00013B   95..         SUBB    A,?V0 + 4
   \   00013D   40F1         JC      ??ZDO_ParseSimpleDescBuf_11
   2928            }
   2929            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   00013F   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000141   02....       LJMP    ??Subroutine104_0 & 0xFFFF
   2930          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 3,A
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   EA           MOV     A,R2
   \   000009                REQUIRE ?Subroutine94
   \   000009                ; // Fall through to label ?Subroutine94

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000009   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   FC           MOV     R4,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   E4           CLR     A
   \   000005   2C           ADD     A,R4
   \   000006   F8           MOV     R0,A
   \   000007   E9           MOV     A,R1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F9           MOV     R1,A
   \   00000B   02....       LJMP    ?Subroutine96 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000009   EA           MOV     A,R2
   \   00000A   C3           CLR     C
   \   00000B   33           RLC     A
   \   00000C   F8           MOV     R0,A
   \   00000D   E4           CLR     A
   \   00000E   33           RLC     A
   \   00000F   F9           MOV     R1,A
   \   000010   85..82       MOV     DPL,?V0 + 0
   \   000013   85..83       MOV     DPH,?V0 + 1
   \   000016   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   85..82       MOV     DPL,?V0 + 2
   \   00000E   85..83       MOV     DPH,?V0 + 3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FB           MOV     R3,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   39           ADDC    A,R1
   \   00000D   8B82         MOV     DPL,R3
   \   00000F   F583         MOV     DPH,A
   \   000011   EC           MOV     A,R4
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   ED           MOV     A,R5
   \   000015   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000018   0A           INC     R2
   \   000019   22           RET
   2931          #endif
   2932          
   2933          #if defined ( ZDO_COORDINATOR )
   2934          /*********************************************************************
   2935           * @fn      ZDO_MatchEndDeviceBind()
   2936           *
   2937           * @brief
   2938           *
   2939           *   Called to match end device binding requests
   2940           *
   2941           * @param  bindReq  - binding request information
   2942           * @param  SecurityUse - Security enable/disable
   2943           *
   2944           * @return  none
   2945           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   2946          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2947          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   2948            zAddrType_t dstAddr;
   2949            uint8 sendRsp = FALSE;
   \   00000E   7E00         MOV     R6,#0x0
   2950            uint8 status;
   2951          
   2952            // Is this the first request?
   2953            if ( matchED == NULL )
   \   000010   90....       MOV     DPTR,#matchED
   \   000013   E0           MOVX    A,@DPTR
   \   000014   7002         JNZ     ??ZDO_MatchEndDeviceBind_0
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   000018   7066         JNZ     ??ZDO_MatchEndDeviceBind_1
   2954            {
   2955              // Create match info structure
   2956              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00001A                ; Setup parameters for call to function osal_mem_alloc
   \   00001A   7A37         MOV     R2,#0x37
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000021   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   000023   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000026   90....       MOV     DPTR,#matchED
   \   000029   EA           MOV     A,R2
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   EB           MOV     A,R3
   \   00002D   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   2957              if ( matchED )
   \                     ??CrossCallReturnLabel_288:
   \   000030   7002         JNZ     ??ZDO_MatchEndDeviceBind_2
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000034   6023         JZ      ??ZDO_MatchEndDeviceBind_3
   2958              {
   2959                // Clear the structure
   2960                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000036                ; Setup parameters for call to function osal_memset
   \   000036   7C37         MOV     R4,#0x37
   \   000038   7D00         MOV     R5,#0x0
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   90....       MOV     DPTR,#(osal_memset & 0xffff)
   \   00003F   74..         MOV     A,#((osal_memset >> 16) & 0xff)
   \   000041   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   2961          
   2962                // Copy the first request's information
   2963                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000044                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000044   AC..         MOV     R4,?V0 + 4
   \   000046   AD..         MOV     R5,?V0 + 5
   \   000048   90....       MOV     DPTR,#matchED
   \   00004B   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00004E   90....       MOV     DPTR,#(??ZDO_CopyMatchInfo & 0xffff)
   \   000051   74..         MOV     A,#((??ZDO_CopyMatchInfo >> 16) & 0xff)
   \   000053   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000056   E9           MOV     A,R1
   \   000057   7005         JNZ     ??ZDO_MatchEndDeviceBind_4
   2964                {
   2965          
   2966                  status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   000059   7488         MOV     A,#-0x78
   \   00005B   02....       LJMP    ??ZDO_MatchEndDeviceBind_5 & 0xFFFF
   2967                  sendRsp = TRUE;
   2968                }
   2969              }
   2970              else
   2971              {
   2972                status = ZDP_NO_ENTRY;
   2973                sendRsp = TRUE;
   2974              }
   2975          
   2976              if ( !sendRsp )
   2977              {
   2978                // Set into the correct state
   2979                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   00005E   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000061   7401         MOV     A,#0x1
   \   000063   F0           MOVX    @DPTR,A
   2980          
   2981                // Setup the timeout
   2982                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000064                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000064   75....       MOV     ?V0 + 0,#(??ZDO_EndDeviceBindMatchTimeoutCB & 0xff)
   \   000067   75....       MOV     ?V0 + 1,#((??ZDO_EndDeviceBindMatchTimeoutCB >> 8) & 0xff)
   \   00006A   75....       MOV     ?V0 + 2,#((??ZDO_EndDeviceBindMatchTimeoutCB >> 16) & 0xff)
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000072   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000075   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000078   7403         MOV     A,#0x3
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007D   02....       LJMP    ??ZDO_MatchEndDeviceBind_6 & 0xFFFF
   2983              }
   2984            }
   2985            else
   2986            {
   2987                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000080   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000083   7402         MOV     A,#0x2
   \   000085   F0           MOVX    @DPTR,A
   2988          
   2989                // Copy the 2nd request's information
   2990                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   000086                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000086   AC..         MOV     R4,?V0 + 4
   \   000088   AD..         MOV     R5,?V0 + 5
   \   00008A   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   00008D   90....       MOV     DPTR,#(??ZDO_CopyMatchInfo & 0xffff)
   \   000090   74..         MOV     A,#((??ZDO_CopyMatchInfo >> 16) & 0xff)
   \   000092   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000095   E9           MOV     A,R1
   \   000096   700A         JNZ     ??ZDO_MatchEndDeviceBind_7
   2991                {
   2992                  status = ZDP_NO_ENTRY;
   \   000098   7488         MOV     A,#-0x78
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   F0           MOVX    @DPTR,A
   2993                  sendRsp = TRUE;
   \   0000A1   0E           INC     R6
   2994                }
   2995          
   2996                // Make a source match for ed1
   2997                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2998                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2999                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   0000A2                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000A2   75....       MOV     ?V0 + 0,#(??ZDOBuildBuf & 0xff)
   \   0000A5   75....       MOV     ?V0 + 1,#((??ZDOBuildBuf >> 8) & 0xff)
   \   0000A8   78..         MOV     R0,#?V0 + 0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   90....       MOV     DPTR,#matchED
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   2429         ADD     A,#0x29
   \   0000B3   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000B6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000B9   90....       MOV     DPTR,#matchED
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   2428         ADD     A,#0x28
   \   0000BF   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   0000C2   2415         ADD     A,#0x15
   \   0000C4   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   0000C7   2414         ADD     A,#0x14
   \   0000C9   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000CC   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000CF   7404         MOV     A,#0x4
   \   0000D1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D4   E9           MOV     A,R1
   \   0000D5   C0E0         PUSH    A
   \   0000D7   90....       MOV     DPTR,#matchED
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   2431         ADD     A,#0x31
   \   0000DD   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000E0   D0E0         POP     A
   \   0000E2   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   3000                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_289:
   \   0000E5   2431         ADD     A,#0x31
   \   0000E7   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000EA   604C         JZ      ??ZDO_MatchEndDeviceBind_8
   3001                {
   3002                  // Save the match list
   3003                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000EC                ; Setup parameters for call to function osal_mem_alloc
   \   0000EC   C3           CLR     C
   \   0000ED   33           RLC     A
   \   0000EE   FA           MOV     R2,A
   \   0000EF   E4           CLR     A
   \   0000F0   33           RLC     A
   \   0000F1   FB           MOV     R3,A
   \   0000F2   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   0000F5   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   0000F7   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000FA   90....       MOV     DPTR,#matchED
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   2432         ADD     A,#0x32
   \   000100   12....       LCALL   ?Subroutine16 & 0xFFFF
   3004                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_28:
   \   000103   7002         JNZ     ??ZDO_MatchEndDeviceBind_9
   \   000105   A3           INC     DPTR
   \   000106   E0           MOVX    A,@DPTR
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   000107   6024         JZ      ??ZDO_MatchEndDeviceBind_10
   3005                  {
   3006                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   000109                ; Setup parameters for call to function osal_memcpy
   \   000109   75..00       MOV     ?V0 + 2,#0x0
   \   00010C   78..         MOV     R0,#?V0 + 0
   \   00010E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000111   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000114   C3           CLR     C
   \   000115   33           RLC     A
   \   000116   FC           MOV     R4,A
   \   000117   E4           CLR     A
   \   000118   33           RLC     A
   \   000119   FD           MOV     R5,A
   \   00011A   90....       MOV     DPTR,#matchED
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   2432         ADD     A,#0x32
   \   000120   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000123   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000126   7403         MOV     A,#0x3
   \   000128   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012B   800B         SJMP    ??ZDO_MatchEndDeviceBind_8
   3007                  }
   3008                  else
   3009                  {
   3010                    // Allocation error, stop
   3011                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   00012D   7488         MOV     A,#-0x78
   \   00012F   85..82       MOV     DPL,?XSP + 0
   \   000132   85..83       MOV     DPH,?XSP + 1
   \   000135   F0           MOVX    @DPTR,A
   3012                    sendRsp = TRUE;
   \   000136   7E01         MOV     R6,#0x1
   3013                  }
   3014                }
   3015          
   3016                // Make a source match for ed2
   3017                matchED->ed2numMatched = ZDO_CompareClusterLists(
   3018                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   3019                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   000138                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000138   78..         MOV     R0,#?V0 + 0
   \   00013A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013D   90....       MOV     DPTR,#matchED
   \   000140   E0           MOVX    A,@DPTR
   \   000141   2412         ADD     A,#0x12
   \   000143   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000146   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000149   90....       MOV     DPTR,#matchED
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   2411         ADD     A,#0x11
   \   00014F   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000152   242C         ADD     A,#0x2c
   \   000154   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000157   242B         ADD     A,#0x2b
   \   000159   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00015C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00015F   7404         MOV     A,#0x4
   \   000161   12....       LCALL   ?DEALLOC_XSTACK8
   \   000164   E9           MOV     A,R1
   \   000165   C0E0         PUSH    A
   \   000167   90....       MOV     DPTR,#matchED
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   2434         ADD     A,#0x34
   \   00016D   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000170   D0E0         POP     A
   \   000172   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   3020                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_290:
   \   000175   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000178   6043         JZ      ??ZDO_MatchEndDeviceBind_11
   3021                {
   3022                  // Save the match list
   3023                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   00017A                ; Setup parameters for call to function osal_mem_alloc
   \   00017A   C3           CLR     C
   \   00017B   33           RLC     A
   \   00017C   FA           MOV     R2,A
   \   00017D   E4           CLR     A
   \   00017E   33           RLC     A
   \   00017F   FB           MOV     R3,A
   \   000180   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000183   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   000185   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000188   90....       MOV     DPTR,#matchED
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   2435         ADD     A,#0x35
   \   00018E   12....       LCALL   ?Subroutine16 & 0xFFFF
   3024                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_29:
   \   000191   7002         JNZ     ??ZDO_MatchEndDeviceBind_12
   \   000193   A3           INC     DPTR
   \   000194   E0           MOVX    A,@DPTR
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   000195   6041         JZ      ??ZDO_MatchEndDeviceBind_13
   3025                  {
   3026                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000197                ; Setup parameters for call to function osal_memcpy
   \   000197   75..00       MOV     ?V0 + 2,#0x0
   \   00019A   78..         MOV     R0,#?V0 + 0
   \   00019C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00019F   90....       MOV     DPTR,#matchED
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0001A6   C3           CLR     C
   \   0001A7   33           RLC     A
   \   0001A8   FC           MOV     R4,A
   \   0001A9   E4           CLR     A
   \   0001AA   33           RLC     A
   \   0001AB   FD           MOV     R5,A
   \   0001AC   90....       MOV     DPTR,#matchED
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   2435         ADD     A,#0x35
   \   0001B2   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0001B5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001B8   7403         MOV     A,#0x3
   \   0001BA   12....       LCALL   ?DEALLOC_XSTACK8
   3027                  }
   3028                  else
   3029                  {
   3030                    // Allocation error, stop
   3031                    status = ZDP_NO_ENTRY;
   3032                    sendRsp = TRUE;
   3033                  }
   3034                }
   3035          
   3036                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   0001BD   EE           MOV     A,R6
   \   0001BE   7018         JNZ     ??ZDO_MatchEndDeviceBind_13
   \   0001C0   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0001C3   7005         JNZ     ??ZDO_MatchEndDeviceBind_14
   \   0001C5   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0001C8   600E         JZ      ??ZDO_MatchEndDeviceBind_13
   3037                {
   3038                  // Do the first unbind/bind state
   3039                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_14:
   \   0001CA                ; Setup parameters for call to function ZDMatchSendState
   \   0001CA   7B00         MOV     R3,#0x0
   \   0001CC   7A00         MOV     R2,#0x0
   \   0001CE   7900         MOV     R1,#0x0
   \   0001D0   90....       MOV     DPTR,#(??ZDMatchSendState & 0xffff)
   \   0001D3   74..         MOV     A,#((??ZDMatchSendState >> 16) & 0xff)
   \   0001D5   02....       LJMP    ??ZDO_MatchEndDeviceBind_15 & 0xFFFF
   3040                }
   3041                else
   3042                {
   3043                  status = ZDP_NO_MATCH;
   \                     ??ZDO_MatchEndDeviceBind_13:
   \   0001D8   7486         MOV     A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   0001DA   85..82       MOV     DPL,?XSP + 0
   \   0001DD   85..83       MOV     DPH,?XSP + 1
   \   0001E0   F0           MOVX    @DPTR,A
   3044                  sendRsp = TRUE;
   3045                }
   3046            }
   3047          
   3048            if ( sendRsp )
   3049            {
   3050              // send response to this requester
   3051              dstAddr.addrMode = Addr16Bit;
   \   0001E1   7409         MOV     A,#0x9
   \   0001E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E6   7402         MOV     A,#0x2
   \   0001E8   F0           MOVX    @DPTR,A
   3052              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \   0001E9   85..82       MOV     DPL,?V0 + 4
   \   0001EC   85..83       MOV     DPH,?V0 + 5
   \   0001EF   A3           INC     DPTR
   \   0001F0   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0001F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F6   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   3053              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_40:
   \   0001F9                ; Setup parameters for call to function ZDP_SendData
   \   0001F9   85..82       MOV     DPL,?V0 + 4
   \   0001FC   85..83       MOV     DPH,?V0 + 5
   \   0001FF   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000202   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000205   7401         MOV     A,#0x1
   \   000207   12....       LCALL   ?XSTACK_DISP0_8
   \   00020A   8582..       MOV     ?V0 + 0,DPL
   \   00020D   8583..       MOV     ?V0 + 1,DPH
   \   000210   78..         MOV     R0,#?V0 + 0
   \   000212   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000215   75..20       MOV     ?V0 + 0,#0x20
   \   000218   75..80       MOV     ?V0 + 1,#-0x80
   \   00021B   78..         MOV     R0,#?V0 + 0
   \   00021D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000220   7901         MOV     R1,#0x1
   \   000222   7406         MOV     A,#0x6
   \   000224   12....       LCALL   ?XSTACK_DISP0_8
   \   000227   AC82         MOV     R4,DPL
   \   000229   AD83         MOV     R5,DPH
   \   00022B   AA..         MOV     R2,?V0 + 4
   \   00022D   AB..         MOV     R3,?V0 + 5
   \   00022F   90....       MOV     DPTR,#(ZDP_SendData & 0xffff)
   \   000232   74..         MOV     A,#((ZDP_SendData >> 16) & 0xff)
   \   000234   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000237   7405         MOV     A,#0x5
   \   000239   12....       LCALL   ?DEALLOC_XSTACK8
   3054          
   3055              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   00023C   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00023F   7046         JNZ     ??ZDO_MatchEndDeviceBind_16
   3056              {
   3057                // send response to first requester
   3058                dstAddr.addrMode = Addr16Bit;
   \   000241   7409         MOV     A,#0x9
   \   000243   12....       LCALL   ?XSTACK_DISP0_8
   \   000246   7402         MOV     A,#0x2
   \   000248   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   3059                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??CrossCallReturnLabel_291:
   \   00024B   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00024E   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000251   12....       LCALL   ?XSTACK_DISP0_8
   \   000254   12....       LCALL   ?Subroutine2 & 0xFFFF
   3060                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_269:
   \   000257   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00025A   7401         MOV     A,#0x1
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   8582..       MOV     ?V0 + 0,DPL
   \   000262   8583..       MOV     ?V0 + 1,DPH
   \   000265   78..         MOV     R0,#?V0 + 0
   \   000267   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026A   75..20       MOV     ?V0 + 0,#0x20
   \   00026D   75..80       MOV     ?V0 + 1,#-0x80
   \   000270   78..         MOV     R0,#?V0 + 0
   \   000272   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000275   7901         MOV     R1,#0x1
   \   000277   7406         MOV     A,#0x6
   \   000279   12....       LCALL   ?XSTACK_DISP0_8
   \   00027C   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00027F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000282   7405         MOV     A,#0x5
   \   000284   12....       LCALL   ?DEALLOC_XSTACK8
   3061              }
   3062          
   3063              // Process ended - release memory used
   3064              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_16:
   \   000287                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000287   90....       MOV     DPTR,#(??ZDO_RemoveMatchMemory & 0xffff)
   \   00028A   74..         MOV     A,#((??ZDO_RemoveMatchMemory >> 16) & 0xff)
   \                     ??ZDO_MatchEndDeviceBind_15:
   \   00028C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3065            }
   3066          }
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   00028F   740A         MOV     A,#0xa
   \   000291   02....       LJMP    ?Subroutine103 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000009   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   2434         ADD     A,#0x34
   \                     ??Subroutine43_0:
   \   000002   F8           MOV     R0,A
   \                     ??Subroutine43_1:
   \   000003   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   FC           MOV     R4,A
   \   000004   02....       LJMP    ?Subroutine102 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   18           DEC     R0
   \   000001   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000004   F9           MOV     R1,A
   \   000005   90....       MOV     DPTR,#(??ZDO_CompareClusterLists & 0xffff)
   \   000008   74..         MOV     A,#((??ZDO_CompareClusterLists >> 16) & 0xff)
   \   00000A   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   02....       LJMP    ?Subroutine102 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   90....       MOV     DPTR,#matchED
   \                     ??Subroutine24_0:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2434         ADD     A,#0x34
   \   000006   08           INC     R0
   \   000007   08           INC     R0
   \   000008   08           INC     R0
   \   000009   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   EA           MOV     A,R2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00000A   90....       MOV     DPTR,#(ZDP_SendData & 0xffff)
   \   00000D   74..         MOV     A,#((ZDP_SendData >> 16) & 0xff)
   \   00000F   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000003   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000006   90....       MOV     DPTR,#(APS_SetEndDeviceBindTimeout & 0xffff)
   \   000009   74..         MOV     A,#((APS_SetEndDeviceBindTimeout >> 16) & 0xff)
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   F8           MOV     R0,A
   \                     ??Subroutine76_0:
   \   000001   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000009   6402         XRL     A,#0x2
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2431         ADD     A,#0x31
   \   000006   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000009   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   F8           MOV     R0,A
   \                     ??Subroutine75_0:
   \   000001   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \                     ??Subroutine7_0:
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005   80..         SJMP    ?Subroutine102

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005   90....       MOV     DPTR,#matchED
   \   000008   E0           MOVX    A,@DPTR
   \   000009   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00000C   02....       LJMP    ?Subroutine99 & 0xFFFF
   3067          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   3068          static void ZDO_RemoveMatchMemory( void )
   \                     ??ZDO_RemoveMatchMemory:
   3069          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3070            if ( matchED )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??ZDO_RemoveMatchMemory_1
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??ZDO_RemoveMatchMemory_1:
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??ZDO_RemoveMatchMemory_2 & 0xFFFF
   3071            {
   3072              if ( matchED->ed2Matched )
   \   000011   90....       MOV     DPTR,#matchED
   \   000014   E0           MOVX    A,@DPTR
   \   000015   2435         ADD     A,#0x35
   \   000017   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00001A   7002         JNZ     ??ZDO_RemoveMatchMemory_3
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \                     ??ZDO_RemoveMatchMemory_3:
   \   00001E   6006         JZ      ??ZDO_RemoveMatchMemory_4
   3073                osal_mem_free( matchED->ed2Matched );
   \   000020                ; Setup parameters for call to function osal_mem_free
   \   000020   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000023   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3074              if ( matchED->ed1Matched )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   000026   90....       MOV     DPTR,#matchED
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   2432         ADD     A,#0x32
   \   00002C   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00002F   7002         JNZ     ??ZDO_RemoveMatchMemory_5
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000033   6006         JZ      ??ZDO_RemoveMatchMemory_6
   3075                osal_mem_free( matchED->ed1Matched );
   \   000035                ; Setup parameters for call to function osal_mem_free
   \   000035   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000038   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3076          
   3077              if ( matchED->ed1.inClusters )
   \                     ??ZDO_RemoveMatchMemory_6:
   \   00003B   90....       MOV     DPTR,#matchED
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   2412         ADD     A,#0x12
   \   000041   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000044   7002         JNZ     ??ZDO_RemoveMatchMemory_7
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \                     ??ZDO_RemoveMatchMemory_7:
   \   000048   6006         JZ      ??ZDO_RemoveMatchMemory_8
   3078                osal_mem_free( matchED->ed1.inClusters );
   \   00004A                ; Setup parameters for call to function osal_mem_free
   \   00004A   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00004D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3079          
   3080              if ( matchED->ed1.outClusters )
   \                     ??ZDO_RemoveMatchMemory_8:
   \   000050   90....       MOV     DPTR,#matchED
   \   000053   E0           MOVX    A,@DPTR
   \   000054   2415         ADD     A,#0x15
   \   000056   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000059   7002         JNZ     ??ZDO_RemoveMatchMemory_9
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \                     ??ZDO_RemoveMatchMemory_9:
   \   00005D   6006         JZ      ??ZDO_RemoveMatchMemory_10
   3081                osal_mem_free( matchED->ed1.outClusters );
   \   00005F                ; Setup parameters for call to function osal_mem_free
   \   00005F   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000062   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3082          
   3083              if ( matchED->ed2.inClusters )
   \                     ??ZDO_RemoveMatchMemory_10:
   \   000065   90....       MOV     DPTR,#matchED
   \   000068   E0           MOVX    A,@DPTR
   \   000069   2429         ADD     A,#0x29
   \   00006B   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00006E   7002         JNZ     ??ZDO_RemoveMatchMemory_11
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \                     ??ZDO_RemoveMatchMemory_11:
   \   000072   6006         JZ      ??ZDO_RemoveMatchMemory_12
   3084                osal_mem_free( matchED->ed2.inClusters );
   \   000074                ; Setup parameters for call to function osal_mem_free
   \   000074   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000077   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3085          
   3086              if ( matchED->ed2.outClusters )
   \                     ??ZDO_RemoveMatchMemory_12:
   \   00007A   90....       MOV     DPTR,#matchED
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   242C         ADD     A,#0x2c
   \   000080   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000083   7002         JNZ     ??ZDO_RemoveMatchMemory_13
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \                     ??ZDO_RemoveMatchMemory_13:
   \   000087   6006         JZ      ??ZDO_RemoveMatchMemory_14
   3087                osal_mem_free( matchED->ed2.outClusters );
   \   000089                ; Setup parameters for call to function osal_mem_free
   \   000089   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00008C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3088          
   3089              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_14:
   \   00008F                ; Setup parameters for call to function osal_mem_free
   \   00008F   90....       MOV     DPTR,#matchED
   \   000092   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000095   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3090          
   3091              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   000098   90....       MOV     DPTR,#matchED
   \   00009B   E4           CLR     A
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
   \   00009E   F0           MOVX    @DPTR,A
   3092            }
   3093          }
   \                     ??ZDO_RemoveMatchMemory_2:
   \   00009F   02....       LJMP    ??Subroutine90_0 & 0xFFFF
   3094          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   3095          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ??ZDO_CopyMatchInfo:
   3096          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   8C..         MOV     ?V0 + 4,R4
   \   00000B   8D..         MOV     ?V0 + 5,R5
   3097            uint8 allOK = TRUE;
   \   00000D   7E01         MOV     R6,#0x1
   3098          
   3099            // Copy bind information into the match info structure
   3100            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   00000F                ; Setup parameters for call to function osal_memcpy
   \   00000F   8C..         MOV     ?V0 + 0,R4
   \   000011   8D..         MOV     ?V0 + 1,R5
   \   000013   75..00       MOV     ?V0 + 2,#0x0
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001B   7C17         MOV     R4,#0x17
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   000022   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   000024   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000027   7403         MOV     A,#0x3
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   3101          
   3102            // Copy input cluster IDs
   3103            if ( srcReq->numInClusters )
   \   00002C   E5..         MOV     A,?V0 + 4
   \   00002E   2411         ADD     A,#0x11
   \   000030   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000033   6035         JZ      ??ZDO_CopyMatchInfo_1
   3104            {
   3105              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   000035   E5..         MOV     A,?V0 + 6
   \   000037   2412         ADD     A,#0x12
   \   000039   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   00003C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003F   12....       LCALL   ?Subroutine11 & 0xFFFF
   3106              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_17:
   \   000042   7002         JNZ     ??ZDO_CopyMatchInfo_2
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \                     ??ZDO_CopyMatchInfo_2:
   \   000046   6021         JZ      ??ZDO_CopyMatchInfo_3
   3107              {
   3108                // Copy the clusters
   3109                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   3110                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000048                ; Setup parameters for call to function osal_memcpy
   \   000048   E5..         MOV     A,?V0 + 4
   \   00004A   2412         ADD     A,#0x12
   \   00004C   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000052   E5..         MOV     A,?V0 + 4
   \   000054   2411         ADD     A,#0x11
   \   000056   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000059   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00005C   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00005F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   \   000067   8001         SJMP    ??ZDO_CopyMatchInfo_1
   3111              }
   3112              else
   3113                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_3:
   \   000069   1E           DEC     R6
   3114            }
   3115          
   3116            // Copy output cluster IDs
   3117            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_1:
   \   00006A   E5..         MOV     A,?V0 + 4
   \   00006C   2414         ADD     A,#0x14
   \   00006E   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000071   6032         JZ      ??ZDO_CopyMatchInfo_4
   3118            {
   3119              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000073   E5..         MOV     A,?V0 + 6
   \   000075   2415         ADD     A,#0x15
   \   000077   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   00007A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00007D   12....       LCALL   ?Subroutine11 & 0xFFFF
   3120              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_18:
   \   000080   7002         JNZ     ??ZDO_CopyMatchInfo_5
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \                     ??ZDO_CopyMatchInfo_5:
   \   000084   605F         JZ      ??ZDO_CopyMatchInfo_6
   3121              {
   3122                // Copy the clusters
   3123                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   3124                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000086                ; Setup parameters for call to function osal_memcpy
   \   000086   E5..         MOV     A,?V0 + 4
   \   000088   2415         ADD     A,#0x15
   \   00008A   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000090   E5..         MOV     A,?V0 + 4
   \   000092   2414         ADD     A,#0x14
   \   000094   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000097   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   00009A   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00009D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   3125              }
   3126              else
   3127                allOK = FALSE;
   3128            }
   3129          
   3130            if ( !allOK )
   \                     ??ZDO_CopyMatchInfo_4:
   \   0000A5   EE           MOV     A,R6
   \   0000A6   7038         JNZ     ??ZDO_CopyMatchInfo_7
   3131            {
   3132              if ( destReq->inClusters )
   \                     ??ZDO_CopyMatchInfo_8:
   \   0000A8   E5..         MOV     A,?V0 + 6
   \   0000AA   2412         ADD     A,#0x12
   \   0000AC   F582         MOV     DPL,A
   \   0000AE   E5..         MOV     A,?V0 + 7
   \   0000B0   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0000B3   7002         JNZ     ??ZDO_CopyMatchInfo_9
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \                     ??ZDO_CopyMatchInfo_9:
   \   0000B7   600B         JZ      ??ZDO_CopyMatchInfo_10
   3133                osal_mem_free( destReq->inClusters );
   \   0000B9                ; Setup parameters for call to function osal_mem_free
   \   0000B9   E5..         MOV     A,?V0 + 6
   \   0000BB   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   0000BE   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000C1   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3134              if ( destReq->outClusters )
   \                     ??ZDO_CopyMatchInfo_10:
   \   0000C4   E5..         MOV     A,?V0 + 6
   \   0000C6   2415         ADD     A,#0x15
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   E5..         MOV     A,?V0 + 7
   \   0000CC   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   0000CF   7002         JNZ     ??ZDO_CopyMatchInfo_11
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \                     ??ZDO_CopyMatchInfo_11:
   \   0000D3   600B         JZ      ??ZDO_CopyMatchInfo_7
   3135                osal_mem_free( destReq->outClusters );
   \   0000D5                ; Setup parameters for call to function osal_mem_free
   \   0000D5   E5..         MOV     A,?V0 + 6
   \   0000D7   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   0000DA   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000DD   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3136            }
   3137          
   3138            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_7:
   \   0000E0   EE           MOV     A,R6
   \   0000E1   F9           MOV     R1,A
   \   0000E2   02....       LJMP    ??Subroutine93_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000E5   7E00         MOV     R6,#0x0
   \   0000E7   80BF         SJMP    ??ZDO_CopyMatchInfo_8
   3139          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   2412         ADD     A,#0x12
   \   000002                REQUIRE ?Subroutine95
   \   000002                ; // Fall through to label ?Subroutine95

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 7
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   2415         ADD     A,#0x15
   \   000002   80..         SJMP    ?Subroutine95

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 5
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   C3           CLR     C
   \   00000A   33           RLC     A
   \   00000B   FC           MOV     R4,A
   \   00000C   E4           CLR     A
   \   00000D   33           RLC     A
   \   00000E   FD           MOV     R5,A
   \   00000F   E5..         MOV     A,?V0 + 6
   \   000011   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 5
   \   000004   3400         ADDC    A,#0x0
   \   000006   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   E5..         MOV     A,?V0 + 7
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 1,A
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   E0           MOVX    A,@DPTR
   \   000009   02....       LJMP    ?Subroutine94 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 5
   \                     ??Subroutine66_0:
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET
   3140          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   3141          static uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ??ZDMatchSendState:
   3142          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
   3143            uint8 *dstIEEEAddr;
   3144            uint8 dstEP;
   3145            zAddrType_t dstAddr;
   3146            zAddrType_t destinationAddr;
   3147            uint16 msgType;
   3148            uint16 clusterID;
   3149            ZDEndDeviceBind_t *ed = NULL;
   \   00000E   75..00       MOV     ?V0 + 2,#0x0
   \   000011   75..00       MOV     ?V0 + 3,#0x0
   3150            uint8 rspStatus = ZDP_SUCCESS;
   \   000014   E4           CLR     A
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   3151          
   3152            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_292:
   \   00001E   7002         JNZ     ??ZDMatchSendState_1
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \                     ??ZDMatchSendState_1:
   \   000022   7005         JNZ     ??ZDMatchSendState_2
   3153              return ( FALSE );
   \                     ??ZDMatchSendState_3:
   \   000024   7900         MOV     R1,#0x0
   \   000026   02....       LJMP    ??ZDMatchSendState_4 & 0xFFFF
   3154          
   3155            // Check sequence number
   3156            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_2:
   \   000029   7403         MOV     A,#0x3
   \   00002B   6E           XRL     A,R6
   \   00002C   6005         JZ      ??ZDMatchSendState_5
   \   00002E   7402         MOV     A,#0x2
   \   000030   6E           XRL     A,R6
   \   000031   700C         JNZ     ??ZDMatchSendState_6
   3157            {
   3158              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_5:
   \   000033   90....       MOV     DPTR,#matchED
   \   000036   E0           MOVX    A,@DPTR
   \   000037   2430         ADD     A,#0x30
   \   000039   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00003C   6B           XRL     A,R3
   \   00003D   70E5         JNZ     ??ZDMatchSendState_3
   3159                return( FALSE ); // ignore the message
   3160            }
   3161          
   3162            // turn off timer
   3163            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_6:
   \   00003F                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00003F   75....       MOV     ?V0 + 4,#(??ZDO_EndDeviceBindMatchTimeoutCB & 0xff)
   \   000042   75....       MOV     ?V0 + 5,#((??ZDO_EndDeviceBindMatchTimeoutCB >> 8) & 0xff)
   \   000045   75....       MOV     ?V0 + 6,#((??ZDO_EndDeviceBindMatchTimeoutCB >> 16) & 0xff)
   \   000048   78..         MOV     R0,#?V0 + 4
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004D   7A00         MOV     R2,#0x0
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   90....       MOV     DPTR,#(APS_SetEndDeviceBindTimeout & 0xffff)
   \   000054   74..         MOV     A,#((APS_SetEndDeviceBindTimeout >> 16) & 0xff)
   \   000056   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000059   7403         MOV     A,#0x3
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   3164          
   3165            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   00005E   7401         MOV     A,#0x1
   \   000060   6E           XRL     A,R6
   \   000061   700B         JNZ     ??ZDMatchSendState_7
   3166            {
   3167              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000063   7485         MOV     A,#-0x7b
   \                     ??ZDMatchSendState_8:
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \                     ??ZDMatchSendState_9:
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   8036         SJMP    ??ZDMatchSendState_10
   3168            }
   3169          
   3170            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_7:
   \   00006E   EE           MOV     A,R6
   \   00006F   6005         JZ      ??ZDMatchSendState_11
   \   000071   7403         MOV     A,#0x3
   \   000073   6E           XRL     A,R6
   \   000074   7011         JNZ     ??ZDMatchSendState_12
   3171            {
   3172              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_11:
   \   000076   90....       MOV     DPTR,#matchED
   \   000079   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00007C   F0           MOVX    @DPTR,A
   3173          
   3174              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   00007D   7403         MOV     A,#0x3
   \   00007F   6E           XRL     A,R6
   \   000080   701F         JNZ     ??ZDMatchSendState_13
   \   000082   EF           MOV     A,R7
   \   000083   601F         JZ      ??ZDMatchSendState_10
   3175              {
   3176                rspStatus = status;
   \   000085   80DE         SJMP    ??ZDMatchSendState_8
   3177              }
   3178            }
   3179            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_12:
   \   000087   7402         MOV     A,#0x2
   \   000089   6E           XRL     A,R6
   \   00008A   7018         JNZ     ??ZDMatchSendState_10
   3180            {
   3181              if ( status == ZDP_SUCCESS )
   \   00008C   EF           MOV     A,R7
   \   00008D   90....       MOV     DPTR,#matchED
   \   000090   7005         JNZ     ??ZDMatchSendState_14
   3182              {
   3183                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   000092   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000095   80D4         SJMP    ??ZDMatchSendState_9
   3184              }
   3185              else
   3186              {
   3187                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_14:
   \   000097   E0           MOVX    A,@DPTR
   \   000098   242F         ADD     A,#0x2f
   \   00009A   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00009D   7402         MOV     A,#0x2
   \   00009F   80CA         SJMP    ??ZDMatchSendState_9
   3188              }
   3189            }
   3190          
   3191            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_13:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   6019         JZ      ??ZDMatchSendState_15
   \                     ??ZDMatchSendState_10:
   \   0000A4   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000A7   7014         JNZ     ??ZDMatchSendState_15
   3192            {
   3193              // Move to the next cluster ID
   3194              if ( matchED->ed1numMatched )
   \   0000A9   90....       MOV     DPTR,#matchED
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   2431         ADD     A,#0x31
   \   0000AF   08           INC     R0
   \   0000B0   08           INC     R0
   \   0000B1   12....       LCALL   ??Subroutine43_1 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000B4   7005         JNZ     ??ZDMatchSendState_16
   3195                matchED->ed1numMatched--;
   3196              else if ( matchED->ed2numMatched )
   \   0000B6   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000B9   6002         JZ      ??ZDMatchSendState_15
   3197                matchED->ed2numMatched--;
   \                     ??ZDMatchSendState_16:
   \   0000BB   14           DEC     A
   \   0000BC   F0           MOVX    @DPTR,A
   3198            }
   3199          
   3200            // What message do we send now
   3201            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_15:
   \   0000BD   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000C0   90....       MOV     DPTR,#matchED
   \   0000C3   6021         JZ      ??ZDMatchSendState_17
   3202            {
   3203              ed = &(matchED->ed1);
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F5..         MOV     ?V0 + 2,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   12....       LCALL   ?Subroutine54 & 0xFFFF
   3204              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \                     ??CrossCallReturnLabel_295:
   \   0000CD   2432         ADD     A,#0x32
   \   0000CF   12....       LCALL   ?Subroutine22 & 0xFFFF
   3205              dstIEEEAddr = matchED->ed2.ieeeAddr;
   \                     ??CrossCallReturnLabel_293:
   \   0000D2   241D         ADD     A,#0x1d
   \   0000D4   F8           MOV     R0,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   3400         ADDC    A,#0x0
   \   0000D9   F9           MOV     R1,A
   \   0000DA   7401         MOV     A,#0x1
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL   ?Subroutine7 & 0xFFFF
   3206              dstEP = matchED->ed2.endpoint;
   \                     ??CrossCallReturnLabel_285:
   \   0000E2   2425         ADD     A,#0x25
   \   0000E4   802B         SJMP    ??ZDMatchSendState_18
   3207            }
   3208            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_17:
   \   0000E6   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000E9   602B         JZ      ??ZDMatchSendState_19
   3209            {
   3210              ed = &(matchED->ed2);
   \   0000EB   90....       MOV     DPTR,#matchED
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   2417         ADD     A,#0x17
   \   0000F1   F5..         MOV     ?V0 + 2,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   3400         ADDC    A,#0x0
   \   0000F7   12....       LCALL   ?Subroutine54 & 0xFFFF
   3211              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \                     ??CrossCallReturnLabel_296:
   \   0000FA   2435         ADD     A,#0x35
   \   0000FC   12....       LCALL   ?Subroutine22 & 0xFFFF
   3212              dstIEEEAddr = matchED->ed1.ieeeAddr;
   \                     ??CrossCallReturnLabel_294:
   \   0000FF   2406         ADD     A,#0x6
   \   000101   F8           MOV     R0,A
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   3400         ADDC    A,#0x0
   \   000106   F9           MOV     R1,A
   \   000107   7401         MOV     A,#0x1
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   12....       LCALL   ?Subroutine7 & 0xFFFF
   3213              dstEP = matchED->ed1.endpoint;
   \                     ??CrossCallReturnLabel_286:
   \   00010F   240E         ADD     A,#0xe
   \                     ??ZDMatchSendState_18:
   \   000111   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000114   F5..         MOV     ?V0 + 7,A
   3214            }
   3215          
   3216            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_19:
   \   000116   740B         MOV     A,#0xb
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   7402         MOV     A,#0x2
   \   00011D   12....       LCALL   ?Subroutine5 & 0xFFFF
   3217          
   3218            // Send the next message
   3219            if ( rspStatus == ZDP_SUCCESS && ed )
   \                     ??CrossCallReturnLabel_12:
   \   000120   6003         JZ      $+5
   \   000122   02....       LJMP    ??ZDMatchSendState_20 & 0xFFFF
   \   000125   E5..         MOV     A,?V0 + 2
   \   000127   7002         JNZ     ??ZDMatchSendState_21
   \   000129   E5..         MOV     A,?V0 + 3
   \                     ??ZDMatchSendState_21:
   \   00012B   7003         JNZ     $+5
   \   00012D   02....       LJMP    ??ZDMatchSendState_20 & 0xFFFF
   3220            {
   3221              // Send unbind/bind message to source
   3222              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   000130   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000133   7004         JNZ     ??ZDMatchSendState_22
   3223                msgType = Unbind_req;
   \   000135   7E22         MOV     R6,#0x22
   \   000137   8002         SJMP    ??ZDMatchSendState_23
   3224              else
   3225                msgType = Bind_req;
   \                     ??ZDMatchSendState_22:
   \   000139   7E21         MOV     R6,#0x21
   3226          
   3227              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_23:
   \   00013B   85..82       MOV     DPL,?V0 + 2
   \   00013E   85..83       MOV     DPH,?V0 + 3
   \   000141   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   3228          
   3229              // Save off the transaction sequence number
   3230              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_41:
   \   00014A   90....       MOV     DPTR,#ZDP_TransID
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   C0E0         PUSH    A
   \   000150   90....       MOV     DPTR,#matchED
   \   000153   E0           MOVX    A,@DPTR
   \   000154   2430         ADD     A,#0x30
   \   000156   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000159   D0E0         POP     A
   \   00015B   F0           MOVX    @DPTR,A
   3231          
   3232              destinationAddr.addrMode = Addr64Bit;
   \   00015C   7414         MOV     A,#0x14
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   7403         MOV     A,#0x3
   \   000163   F0           MOVX    @DPTR,A
   3233              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000164                ; Setup parameters for call to function osal_cpyExtAddr
   \   000164   7401         MOV     A,#0x1
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00016C   FD           MOV     R5,A
   \   00016D   740C         MOV     A,#0xc
   \   00016F   12....       LCALL   ?XSTACK_DISP0_8
   \   000172   AA82         MOV     R2,DPL
   \   000174   AB83         MOV     R3,DPH
   \   000176   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   000179   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   00017B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3234          
   3235              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   3236                  &destinationAddr, dstEP, ed->SecurityUse );
   \   00017E                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00017E   85..82       MOV     DPL,?V0 + 2
   \   000181   85..83       MOV     DPH,?V0 + 3
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F5..         MOV     ?V0 + 4,A
   \   000188   78..         MOV     R0,#?V0 + 4
   \   00018A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00018D   E5..         MOV     A,?V0 + 7
   \   00018F   F5..         MOV     ?V0 + 4,A
   \   000191   78..         MOV     R0,#?V0 + 4
   \   000193   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000196   740E         MOV     A,#0xe
   \   000198   12....       LCALL   ?XSTACK_DISP0_8
   \   00019B   8582..       MOV     ?V0 + 4,DPL
   \   00019E   8583..       MOV     ?V0 + 5,DPH
   \   0001A1   78..         MOV     R0,#?V0 + 4
   \   0001A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A6   78..         MOV     R0,#?V0 + 0
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AB   E5..         MOV     A,?V0 + 2
   \   0001AD   2406         ADD     A,#0x6
   \   0001AF   F5..         MOV     ?V0 + 0,A
   \   0001B1   E5..         MOV     A,?V0 + 3
   \   0001B3   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0001B6   78..         MOV     R0,#?V0 + 0
   \   0001B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BB   E5..         MOV     A,?V0 + 2
   \   0001BD   240E         ADD     A,#0xe
   \   0001BF   F582         MOV     DPL,A
   \   0001C1   E5..         MOV     A,?V0 + 3
   \   0001C3   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   0001C6   F9           MOV     R1,A
   \   0001C7   740B         MOV     A,#0xb
   \   0001C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CC   AC82         MOV     R4,DPL
   \   0001CE   AD83         MOV     R5,DPH
   \   0001D0   EE           MOV     A,R6
   \   0001D1   FA           MOV     R2,A
   \   0001D2   7B00         MOV     R3,#0x0
   \   0001D4   90....       MOV     DPTR,#(ZDP_BindUnbindReq & 0xffff)
   \   0001D7   74..         MOV     A,#((ZDP_BindUnbindReq >> 16) & 0xff)
   \   0001D9   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001DC   7408         MOV     A,#0x8
   \   0001DE   12....       LCALL   ?DEALLOC_XSTACK8
   3237          
   3238              // Set timeout for response
   3239              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001E1                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001E1   75....       MOV     ?V0 + 0,#(??ZDO_EndDeviceBindMatchTimeoutCB & 0xff)
   \   0001E4   75....       MOV     ?V0 + 1,#((??ZDO_EndDeviceBindMatchTimeoutCB >> 8) & 0xff)
   \   0001E7   75....       MOV     ?V0 + 2,#((??ZDO_EndDeviceBindMatchTimeoutCB >> 16) & 0xff)
   \   0001EA   78..         MOV     R0,#?V0 + 0
   \   0001EC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001EF   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0001F2   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001F5   7403         MOV     A,#0x3
   \   0001F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FA   02....       LJMP    ??ZDMatchSendState_24 & 0xFFFF
   3240            }
   3241            else
   3242            {
   3243              // Send the response messages to requesting devices
   3244              // send response to first requester
   3245              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_20:
   \   0001FD   90....       MOV     DPTR,#matchED
   \   000200   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000203   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000206   12....       LCALL   ?XSTACK_DISP0_8
   \   000209   12....       LCALL   ?Subroutine2 & 0xFFFF
   3246              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_270:
   \   00020C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020F   7401         MOV     A,#0x1
   \   000211   12....       LCALL   ?XSTACK_DISP0_8
   \   000214   8582..       MOV     ?V0 + 0,DPL
   \   000217   8583..       MOV     ?V0 + 1,DPH
   \   00021A   78..         MOV     R0,#?V0 + 0
   \   00021C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021F   75..20       MOV     ?V0 + 0,#0x20
   \   000222   75..80       MOV     ?V0 + 1,#-0x80
   \   000225   78..         MOV     R0,#?V0 + 0
   \   000227   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022A   7901         MOV     R1,#0x1
   \   00022C   7408         MOV     A,#0x8
   \   00022E   12....       LCALL   ?XSTACK_DISP0_8
   \   000231   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000234   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000237   7405         MOV     A,#0x5
   \   000239   12....       LCALL   ?DEALLOC_XSTACK8
   3247          
   3248              // send response to second requester
   3249              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   00023C   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00023F   7054         JNZ     ??ZDMatchSendState_25
   3250              {
   3251                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   000241   90....       MOV     DPTR,#matchED
   \   000244   E0           MOVX    A,@DPTR
   \   000245   2419         ADD     A,#0x19
   \   000247   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00024A   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00024D   12....       LCALL   ?XSTACK_DISP0_8
   \   000250   12....       LCALL   ?Subroutine7 & 0xFFFF
   3252                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   \                     ??CrossCallReturnLabel_287:
   \   000253   2418         ADD     A,#0x18
   \   000255   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000258   F5..         MOV     ?V0 + 0,A
   \   00025A   78..         MOV     R0,#?V0 + 0
   \   00025C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00025F   7401         MOV     A,#0x1
   \   000261   12....       LCALL   ?XSTACK_DISP0_8
   \   000264   8582..       MOV     ?V0 + 0,DPL
   \   000267   8583..       MOV     ?V0 + 1,DPH
   \   00026A   78..         MOV     R0,#?V0 + 0
   \   00026C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026F   75..20       MOV     ?V0 + 0,#0x20
   \   000272   75..80       MOV     ?V0 + 1,#-0x80
   \   000275   78..         MOV     R0,#?V0 + 0
   \   000277   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00027A   7901         MOV     R1,#0x1
   \   00027C   7408         MOV     A,#0x8
   \   00027E   12....       LCALL   ?XSTACK_DISP0_8
   \   000281   AC82         MOV     R4,DPL
   \   000283   AD83         MOV     R5,DPH
   \   000285   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000288   90....       MOV     DPTR,#(ZDP_SendData & 0xffff)
   \   00028B   74..         MOV     A,#((ZDP_SendData >> 16) & 0xff)
   \   00028D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000290   7405         MOV     A,#0x5
   \   000292   12....       LCALL   ?DEALLOC_XSTACK8
   3253              }
   3254          
   3255              // Process ended - release memory used
   3256              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_25:
   \   000295                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000295   90....       MOV     DPTR,#(??ZDO_RemoveMatchMemory & 0xffff)
   \   000298   74..         MOV     A,#((??ZDO_RemoveMatchMemory >> 16) & 0xff)
   \   00029A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   3257            }
   3258          
   3259            return ( TRUE );
   \                     ??ZDMatchSendState_24:
   \   00029D   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_4:
   \   00029F   7415         MOV     A,#0x15
   \   0002A1   02....       LJMP    ?Subroutine93 & 0xFFFF
   3260          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F5..         MOV     ?V0 + 3,A
   \   000002   8882         MOV     DPL,R0
   \   000004   8983         MOV     DPH,R1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   C3           CLR     C
   \   000008   33           RLC     A
   \   000009   F8           MOV     R0,A
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D                REQUIRE ?Subroutine102
   \   00000D                ; // Fall through to label ?Subroutine102

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   242F         ADD     A,#0x2f
   \   000003   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242F         ADD     A,#0x2f
   \   000006   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000009   6401         XRL     A,#0x1
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000006   28           ADD     A,R0
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   39           ADDC    A,R1
   \   00000B   F9           MOV     R1,A
   \   00000C   74FE         MOV     A,#-0x2
   \   00000E   28           ADD     A,R0
   \   00000F   F582         MOV     DPL,A
   \   000011   74FF         MOV     A,#-0x1
   \   000013   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000016   80..         SJMP    ?Subroutine102
   3261          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   3262          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ??ZDO_EndDeviceBindMatchTimeoutCB:
   3263          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3264            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   90....       MOV     DPTR,#(??ZDMatchSendState & 0xffff)
   \   00000D   74..         MOV     A,#((??ZDMatchSendState >> 16) & 0xff)
   \   00000F                REQUIRE ?Subroutine90
   \   00000F                ; // Fall through to label ?Subroutine90
   3265          }
   3266          
   3267          #endif // ZDO_COORDINATOR
   3268          
   3269          /*********************************************************************
   3270          *********************************************************************/
   3271          
   3272          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     NLME_PermitJoiningTimeout          0      0      0
     ZDMatchSendState                   3      0     69
       -> APS_SetEndDeviceBindTimeout
                                        0      0     80
       -> osal_cpyExtAddr               0      0     74
       -> ZDP_BindUnbindReq             0      0     90
       -> APS_SetEndDeviceBindTimeout
                                        0      0     80
       -> ZDP_SendData                  0      0     84
       -> ZDP_SendData                  0      0     84
       -> ZDO_RemoveMatchMemory         0      0     74
     ZDO_AnyClusterMatches              0      0     44
     ZDO_BuildSimpleDescBuf             1      0     10
       -> NLME_GetProtocolVersion       0      0     20
     ZDO_CompareClusterLists            0      0     44
     ZDO_CopyMatchInfo                  0      0     43
       -> osal_memcpy                   0      0     38
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
       -> osal_mem_free                 0      0     32
       -> osal_mem_free                 0      0     32
     ZDO_CreateAlignedUINT16List        0      0     50
       -> osal_mem_alloc                0      0     28
       -> NLME_GetProtocolVersion       0      0     28
     ZDO_EndDeviceBindMatchTimeoutCB
                                        2      0      0
       -> ZDMatchSendState              4      0      0
     ZDO_EndDeviceTimeoutCB             0      0      0
     ZDO_Init                           2      0      0
       -> NLME_CoordinatorInit          4      0      0
       -> ZDSecMgrInit                  4      0      0
     ZDO_MatchEndDeviceBind             1      0     29
       -> osal_mem_alloc                0      0     48
       -> osal_memset                   0      0     48
       -> ZDO_CopyMatchInfo             0      0     48
       -> APS_SetEndDeviceBindTimeout
                                        0      0     54
       -> ZDO_CopyMatchInfo             0      0     48
       -> ZDO_CompareClusterLists       0      0     56
       -> osal_mem_alloc                0      0     48
       -> osal_memcpy                   0      0     54
       -> ZDO_CompareClusterLists       0      0     56
       -> osal_mem_alloc                0      0     48
       -> osal_memcpy                   0      0     54
       -> ZDMatchSendState              0      0     48
       -> ZDP_SendData                  0      0     58
       -> ZDP_SendData                  0      0     58
       -> ZDO_RemoveMatchMemory         0      0     48
     ZDO_ParseSimpleDescBuf             1      0     39
       -> NLME_GetProtocolVersion       0      0     26
       -> osal_mem_alloc                0      0     26
       -> osal_mem_alloc                0      0     26
       -> osal_mem_free                 0      0     26
     ZDO_ProcessActiveEPReq             0      0     24
       -> afNumEndPoints                0      0     32
       -> afEndPoints                   0      0     32
       -> ZDP_EPRsp                     0      0     46
       -> ZDP_GenericRsp                0      0     40
     ZDO_ProcessAddrRsp                 0      0     32
       -> osal_mem_alloc                0      0     48
       -> ZDApp_NwkAddrRspCB            0      0     60
       -> ZDApp_IEEEAddrRspCB           0      0     60
       -> osal_mem_free                 0      0     48
     ZDO_ProcessBindUnbindRsp           0      0     13
       -> ZDApp_EndDeviceBindRsp        0      0     24
       -> ZDMatchSendState              0      0     24
       -> ZDApp_BindRsp                 0      0     24
       -> ZDApp_UnbindRsp               0      0     24
     ZDO_ProcessEPListRsp               0      0     17
       -> ZDApp_ActiveEPRspCB           0      0     30
       -> ZDApp_MatchDescRspCB          0      0     30
     ZDO_ProcessEndDeviceBindReq        1      0     37
       -> NLME_GetProtocolVersion       0      0     72
       -> osal_cpyExtAddr               0      0     72
       -> ZDO_CreateAlignedUINT16List
                                        0      0     72
       -> ZDO_CreateAlignedUINT16List
                                        0      0     72
       -> osal_mem_free                 0      0     72
       -> ZDApp_EndDeviceBindReqCB      0      0     72
       -> osal_mem_free                 0      0     72
       -> osal_mem_free                 0      0     72
     ZDO_ProcessMatchDescReq            1      0     38
       -> ZDO_CreateAlignedUINT16List
                                        0      0     60
       -> ZDO_CreateAlignedUINT16List
                                        0      0     60
       -> osal_mem_free                 0      0     60
       -> NLME_IsAddressBroadcast       0      0     60
       -> ZDP_EPRsp                     0      0     74
       -> NLME_IsAddressBroadcast       0      0     60
       -> osal_msg_send                 0      0     60
       -> osal_mem_free                 0      0     60
       -> ZDO_AnyClusterMatches         0      0     64
       -> ZDO_AnyClusterMatches         0      0     64
       -> osal_msg_allocate             0      0     60
       -> osal_memcpy                   0      0     66
       -> osal_memcpy                   0      0     66
       -> ZDP_EPRsp                     0      0     74
       -> osal_mem_free                 0      0     60
       -> osal_mem_free                 0      0     60
     ZDO_ProcessNodeDescReq             0      0     17
       -> ZDP_NodeDescMsg               0      0     30
       -> ZDP_GenericRsp                0      0     32
     ZDO_ProcessNodeDescRsp             1      0     25
       -> NLME_GetProtocolVersion       0      0     46
       -> ZDApp_NodeDescRspCB           0      0     50
     ZDO_ProcessPowerDescReq            0      0     17
       -> ZDP_PowerDescMsg              0      0     30
       -> ZDP_GenericRsp                0      0     32
     ZDO_ProcessPowerDescRsp            0      0     17
       -> ZDApp_PowerDescRspCB          0      0     34
     ZDO_ProcessServerDiscReq           0      0     15
       -> ZDP_ServerDiscRsp             0      0     28
     ZDO_ProcessServerDiscRsp           0      0     10
       -> ZDApp_ServerDiscRspCB         0      0     20
     ZDO_ProcessSimpleDescReq           0      0     21
       -> afFindSimpleDesc              0      0     32
       -> ZDP_SimpleDescMsg             0      0     40
       -> osal_mem_free                 0      0     32
     ZDO_ProcessSimpleDescRsp           0      0     29
       -> ZDO_ParseSimpleDescBuf        0      0     52
       -> ZDApp_SimpleDescRspCB         0      0     58
     ZDO_ProcessUserDescConf            2      0      0
       -> ZDApp_UserDescConfCB          4      0      0
     ZDO_ProcessUserDescReq             0      0     36
       -> osal_nv_read                  0      0     70
       -> ZDP_UserDescRsp               0      0     68
       -> ZDP_GenericRsp                0      0     70
     ZDO_ProcessUserDescRsp             0      0     14
       -> ZDApp_UserDescRspCB           0      0     28
     ZDO_ProcessUserDescSet             1      0     41
       -> NLME_GetProtocolVersion       0      0     70
       -> osal_memcpy                   0      0     76
       -> osal_nv_write                 0      0     78
       -> ZDP_SendData                  0      0     80
     ZDO_RemoveMatchMemory              2      0     37
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
     ZDO_StartDevice                    0      0     14
       -> NLME_NetworkFormationRequest
                                        0      0     28
       -> NLME_StartRouterRequest       0      0     18
       -> ZDSecMgrConfig                0      0     18
       -> osal_start_timer              0      0     18
     ZDO_UpdateNwkStatus                1      0     12
       -> NLME_GetShortAddr             0      0     24
       -> NLME_GetExtAddr               0      0     24
       -> osal_msg_allocate             0      0     24
       -> osal_msg_send                 0      0     24


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     ZDOBuildBuf                      52
     matchED                           2
     ZDO_Init                         20
     ?Subroutine90                    10
     ZDO_StartDevice                 121
     ?Subroutine91                     5
     ?Subroutine57                     8
     ?Subroutine81                     6
     ZDO_UpdateNwkStatus             107
     ?Subroutine58                     6
     ?Subroutine92                     5
     ?Subroutine41                     4
     ?Subroutine77                     5
     ?Subroutine86                     6
     ?Subroutine89                     7
     ?Subroutine28                    13
     ?Subroutine79                     6
     ?Subroutine20                     6
     ?Subroutine19                     1
     ?Subroutine98                     6
     ZDO_CompareClusterLists         127
     ?Subroutine93                     8
     ?Subroutine80                    11
     ZDO_CreateAlignedUINT16List     136
     ?Subroutine103                    8
     ZDO_AnyClusterMatches            97
     ?Subroutine53                     7
     ZDO_ProcessNodeDescReq           94
     ?Subroutine25                    27
     ZDO_ProcessPowerDescReq          96
     ZDO_ProcessSimpleDescReq        177
     ?Subroutine12                    13
     ?Subroutine46                    13
     ?Subroutine21                    13
     ZDO_ProcessActiveEPReq          174
     ?Subroutine60                    10
     ?Subroutine39                    16
     ZDO_ProcessMatchDescReq        1120
     ?Subroutine49                    13
     ?Subroutine47                     4
     ?Subroutine78                     5
     ?Subroutine40                     7
     ?Subroutine36                    10
     ?Subroutine30                     7
     ?Subroutine29                     5
     ?Subroutine97                     7
     ?Subroutine17                     7
     ?Subroutine5                      5
     ?Subroutine71                     8
     ?Subroutine62                     5
     ?Subroutine67                    13
     ?Subroutine99                     6
     ?Subroutine52                     9
     ?Subroutine48                     6
     ?Subroutine18                    13
     ?Subroutine23                    13
     ZDO_ProcessEndDeviceBindReq     400
     ?Subroutine35                     7
     ?Subroutine101                    5
     ?Subroutine104                    8
     ?Subroutine100                    6
     ?Subroutine15                     4
     ?Subroutine72                     8
     ?Subroutine14                     5
     ?Subroutine9                      4
     ?Subroutine70                     9
     ?Subroutine88                    10
     ?Subroutine4                      6
     ?Subroutine11                    19
     ZDO_ProcessAddrRsp              407
     ?Subroutine61                    10
     ?Subroutine85                     8
     ZDO_ProcessNodeDescRsp          289
     ?Subroutine0                      8
     ?Subroutine74                     7
     ZDO_ProcessPowerDescRsp         150
     ZDO_ProcessSimpleDescRsp        128
     ?Subroutine84                     9
     ZDO_ProcessEPListRsp            119
     ZDO_ProcessBindUnbindRsp        116
     ZDO_ProcessServerDiscRsp         61
     ZDO_ProcessServerDiscReq         84
     ?Subroutine105                    5
     ZDO_EndDeviceTimeoutCB            3
     NLME_PermitJoiningTimeout         3
     ZDO_ProcessUserDescRsp           90
     ?Subroutine51                     1
     ?Subroutine83                    10
     ZDO_ProcessUserDescReq          182
     ZDO_ProcessUserDescConf          23
     ZDO_ProcessUserDescSet          359
     ZDO_BuildSimpleDescBuf          190
     ?Subroutine10                     3
     ?Subroutine96                     8
     ?Subroutine6                     12
     ?Subroutine3                      8
     ?Subroutine73                    15
     ?Subroutine1                     16
     ?Subroutine82                     6
     ZDO_ParseSimpleDescBuf          324
     ?Subroutine65                     9
     ?Subroutine94                    12
     ?Subroutine32                    14
     ?Subroutine27                    23
     ?Subroutine13                    19
     ?Subroutine8                     26
     ZDO_MatchEndDeviceBind          660
     ?Subroutine44                    10
     ?Subroutine43                     7
     ?Subroutine42                     7
     ?Subroutine37                    11
     ?Subroutine31                    10
     ?Subroutine24                    13
     ?Subroutine16                    14
     ?Subroutine64                    13
     ?Subroutine56                    16
     ?Subroutine55                    12
     ?Subroutine102                    5
     ?Subroutine45                     4
     ?Subroutine76                     5
     ?Subroutine87                    10
     ?Subroutine33                    12
     ?Subroutine26                    10
     ?Subroutine75                     6
     ?Subroutine7                      7
     ?Subroutine2                     15
     ZDO_RemoveMatchMemory           162
     ZDO_CopyMatchInfo               233
     ?Subroutine69                     2
     ?Subroutine95                     9
     ?Subroutine68                     4
     ?Subroutine63                    18
     ?Subroutine59                    12
     ?Subroutine50                    12
     ?Subroutine66                    10
     ZDMatchSendState                676
     ?Subroutine54                    13
     ?Subroutine38                     9
     ?Subroutine34                    12
     ?Subroutine22                    24
     ZDO_EndDeviceBindMatchTimeoutCB
                                      15

 
 7 938 bytes in segment BANKED_CODE
    54 bytes in segment XDATA_Z
 
 7 938 bytes of CODE  memory
    54 bytes of XDATA memory

Errors: none
Warnings: none
