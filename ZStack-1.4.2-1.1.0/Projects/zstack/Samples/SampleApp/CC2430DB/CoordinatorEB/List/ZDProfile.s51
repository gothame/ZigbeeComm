//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:26:01 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\stack\zdo\ZDProfile.c                         /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wC /
//                          oord.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS     /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D ZTOOL_P1 -D MT_TASK -D            /
//                          MT_ZDO_FUNC -lC E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\CoordinatorEB\L /
//                          ist\ -lA E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\CoordinatorEB\List\    /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\CoordinatorEB\Obj\ -e        /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\stack\zdo\ZDProfile.c"                       /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\CoordinatorEB\List\ZDProfile.s5 /
//                          1                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ZDProfile

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??fillAndSend,021203H
        ARGFRAME XSTACK, 24, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        FUNCTION ??zdpProcessAddrReq,021203H
        ARGFRAME XSTACK, 25, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
?Subroutine27 EQU 0
        PUBLIC ZDP_AF_ENDPOINT
        PUBLIC ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_EPRsp
        FUNCTION ZDP_EPRsp,021203H
        ARGFRAME XSTACK, 7, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,021203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0a1203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDP_NodeDescMsg
        FUNCTION ZDP_NodeDescMsg,021203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDP_PowerDescMsg
        FUNCTION ZDP_PowerDescMsg,021203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDP_SendData
        FUNCTION ZDP_SendData,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_ServerDiscRsp
        FUNCTION ZDP_ServerDiscRsp,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDP_SimpleDescMsg
        FUNCTION ZDP_SimpleDescMsg,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDP_TransID
        PUBLIC ZDP_UserDescRsp
        FUNCTION ZDP_UserDescRsp,021203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME XSTACK, 28, STACK
        EXTERN osal_ExtAddrEqual
        FUNCTION osal_ExtAddrEqual,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN osal_cpyExtAddr
        FUNCTION osal_cpyExtAddr,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN NLME_GetProtocolVersion
        FUNCTION NLME_GetProtocolVersion,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN AssocMakeList
        FUNCTION AssocMakeList,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME XSTACK, 19, STACK
        EXTERN ZDO_ProcessAddrRsp
        FUNCTION ZDO_ProcessAddrRsp,0202H
        ARGFRAME XSTACK, 24, STACK
        EXTERN ZDO_ProcessNodeDescRsp
        FUNCTION ZDO_ProcessNodeDescRsp,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN ZDO_ProcessPowerDescRsp
        FUNCTION ZDO_ProcessPowerDescRsp,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN ZDO_ProcessSimpleDescRsp
        FUNCTION ZDO_ProcessSimpleDescRsp,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN ZDO_ProcessEPListRsp
        FUNCTION ZDO_ProcessEPListRsp,0202H
        ARGFRAME XSTACK, 24, STACK
        EXTERN ZDO_ProcessBindUnbindRsp
        FUNCTION ZDO_ProcessBindUnbindRsp,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessUserDescRsp
        FUNCTION ZDO_ProcessUserDescRsp,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN ZDO_ProcessServerDiscRsp
        FUNCTION ZDO_ProcessServerDiscRsp,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN ZDO_ProcessNodeDescReq
        FUNCTION ZDO_ProcessNodeDescReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessPowerDescReq
        FUNCTION ZDO_ProcessPowerDescReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessSimpleDescReq
        FUNCTION ZDO_ProcessSimpleDescReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessActiveEPReq
        FUNCTION ZDO_ProcessActiveEPReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessMatchDescReq
        FUNCTION ZDO_ProcessMatchDescReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessEndDeviceBindReq
        FUNCTION ZDO_ProcessEndDeviceBindReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessUserDescReq
        FUNCTION ZDO_ProcessUserDescReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessUserDescSet
        FUNCTION ZDO_ProcessUserDescSet,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessServerDiscReq
        FUNCTION ZDO_ProcessServerDiscReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0202H
        ARGFRAME XSTACK, 27, STACK
        EXTERN ZDAppNwkAddr
        EXTERN ZDApp_epDesc
        EXTERN saveExtAddr

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\zdo\ZDProfile.c
//    1 /*********************************************************************
//    2     Filename:       ZDProfile.c
//    3     Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
//    4     Revision:       $Revision: 14296 $
//    5 
//    6     Description:
//    7 
//    8       This Zigbee Device Profile.
//    9 
//   10     Notes:
//   11 
//   12     Copyright (c) 2006 by Texas Instruments, Inc.
//   13     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   14     derivative works, modify, distribute, perform, display or sell this
//   15     software and/or its documentation for any purpose is prohibited
//   16     without the express written consent of Texas Instruments, Inc.
//   17 *********************************************************************/
//   18 
//   19 /*********************************************************************
//   20  * INCLUDES
//   21  */
//   22 #include "ZComdef.h"
//   23 #include "OSAL.h"
//   24 #include "AF.h"
//   25 #include "NLMEDE.h"
//   26 #include "nwk_util.h"
//   27 #include "APS.h"
//   28 
//   29 #include "ZDCache.h"
//   30 #include "ZDConfig.h"
//   31 #include "ZDProfile.h"
//   32 #include "ZDObject.h"
//   33 
//   34 #if defined( LCD_SUPPORTED )
//   35   #include "OnBoard.h"
//   36 #endif
//   37 
//   38 #include "nwk_util.h"
//   39 
//   40 /*********************************************************************
//   41  * MACROS
//   42  */
//   43 
//   44 #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \ 
//   45   (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \ 
//   46   (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \ 
//   47   (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \ 
//   48 }
//   49 
//   50 #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \ 
//   51   afStatus_t stat;                                    \ 
//   52   ZDP_TmpBuf = (BUF)+1;                               \ 
//   53   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   54   ZDP_TmpBuf = ZDP_Buf+1;                             \ 
//   55   return stat;                                        \ 
//   56 }
//   57 
//   58 #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \ 
//   59   afStatus_t stat;                                    \ 
//   60   ZDP_TxOptions = (TxO);                              \ 
//   61   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   62   ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \ 
//   63   return stat;                                        \ 
//   64 }
//   65 
//   66 /*********************************************************************
//   67  * CONSTANTS
//   68  */
//   69 
//   70 #define ZDP_BUF_SZ          80
//   71 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   72 CONST byte ZDP_AF_ENDPOINT = 0;
ZDP_AF_ENDPOINT:
        DB 0
//   73 
//   74 /*********************************************************************
//   75  * TYPEDEFS
//   76  */
//   77 
//   78 /*********************************************************************
//   79  * GLOBAL VARIABLES
//   80  */
//   81 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   82 byte ZDP_TransID = 0;
ZDP_TransID:
        DS 1
//   83 
//   84 /*********************************************************************
//   85  * EXTERNAL VARIABLES
//   86  */
//   87 
//   88 extern endPointDesc_t ZDApp_epDesc;
//   89 
//   90 /*********************************************************************
//   91  * EXTERNAL FUNCTIONS
//   92  */
//   93 
//   94 /*********************************************************************
//   95  * LOCAL FUNCTIONS
//   96  */
//   97 
//   98 static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
//   99 
//  100 /*********************************************************************
//  101  * LOCAL VARIABLES
//  102  */
//  103 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  104 static byte  ZDP_Buf[ ZDP_BUF_SZ ];
??ZDP_Buf:
        DS 80

        RSEG XDATA_I:XDATA:NOROOT(0)
//  105 static byte *ZDP_TmpBuf = ZDP_Buf+1;
??ZDP_TmpBuf:
        DS 2
        REQUIRE `?<Initializer for ZDP_TmpBuf>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  106 static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
??ZDP_TxOptions:
        DS 1
//  107 
//  108 /*********************************************************************
//  109  * @fn          fillAndSend
//  110  *
//  111  * @brief       Combined to reduce space
//  112  *
//  113  * @param
//  114  * @param
//  115  *
//  116  * @return      afStatus_t
//  117  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  118 static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
??fillAndSend:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ??fillAndSend
//  119 {
        FUNCALL ??fillAndSend, AF_DataRequest
        LOCFRAME XSTACK, 28, STACK
        ARGFRAME XSTACK, 28, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 4
        MOV	A,#-0x4
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	A,#0x13
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine49 & 0xFFFF
//  120 #if ( AF_V1_SUPPORT )
//  121 
//  122   byte proVer = NLME_GetProtocolVersion();
//  123 #endif
//  124   afAddrType_t afAddr;
//  125 
//  126   ZADDR_TO_AFADDR( addr, afAddr );
??CrossCallReturnLabel_116:
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  127 
//  128 #if ( AF_V1_SUPPORT )
//  129   if ( proVer == ZB_PROT_V1_0 )
//  130   {
//  131     return ( afFillAndSendMessage( &afAddr, ZDP_AF_ENDPOINT, clusterID,
//  132                1, FRAMETYPE_MSG, transSeq,
//  133                NULL, NULL, NULL, NULL, len, ZDP_TmpBuf,
//  134                ZDP_TxOptions, FALSE, AF_DEFAULT_RADIUS ) );
//  135   }
//  136   else
//  137 #endif
//  138   {
//  139     *(ZDP_TmpBuf-1) = *transSeq;
        MOV	DPTR,#??ZDP_TmpBuf
        MOVX	A,@DPTR
        ADD	A,#-0x1
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#-0x1
        MOV	?V0 + 5,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        MOVX	@DPTR,A
//  140 
//  141     return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
//  142                            (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
//  143                            transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV	?V0 + 6,#0xa
        MOV	R0,#?V0 + 6
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	?V0 + 0,R1
        MOV	A,#0x1
        ADD	A,?V0 + 0
        MOV	?V0 + 0,A
        CLR	A
        ADDC	A,#0x0
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	R4,#(ZDApp_epDesc & 0xff)
        MOV	R5,#((ZDApp_epDesc >> 8) & 0xff)
        MOV	A,#0x9
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(AF_DataRequest & 0xffff)
        MOV	A,#((AF_DataRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x9
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,#0x4
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine62
        ; // Fall through to label ?Subroutine62
//  144   }
//  145 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine62:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Valid
        MOV	R7,#0x7
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  146 
//  147 /*********************************************************************
//  148  * @fn          ZDP_SendData
//  149  *
//  150  * @brief       This builds and send a request message that has
//  151  *              NWKAddrOfInterest as its only parameter.
//  152  *
//  153  * @param       dstAddr - destination address
//  154  * @param       cmd - clusterID
//  155  * @param       dataLen - number of bytes of data
//  156  * @param       data - pointer to the data
//  157  * @param       SecurityEnable - Security Options
//  158  *
//  159  * @return      afStatus_t
//  160  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  161 afStatus_t ZDP_SendData( byte *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
ZDP_SendData:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZDP_SendData
//  162                         byte len, byte *buf, byte SecurityEnable )
//  163 {
        FUNCALL ZDP_SendData, ??fillAndSend
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	?V0 + 2,R1
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
//  164   byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine14 & 0xFFFF
//  165   byte cnt = len;
??CrossCallReturnLabel_30:
        MOV	?V0 + 4,?V0 + 2
        SJMP	??ZDP_SendData_0
//  166 
//  167   while ( cnt-- )
//  168   {
//  169     *pBuf++ = *buf++;
??ZDP_SendData_1:
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_151:
        MOV	R6,DPL
        MOV	R7,DPH
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOV	R0,DPL
        MOV	R1,DPH
//  170   }
??ZDP_SendData_0:
        MOV	?V0 + 5,?V0 + 4
        MOV	A,#-0x1
        ADD	A,?V0 + 5
        MOV	?V0 + 4,A
        MOV	A,?V0 + 5
        JNZ	??ZDP_SendData_1
//  171 
//  172   FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
//  173                (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
        MOV	A,?V0 + 3
        JZ	??ZDP_SendData_2
        MOV	R0,#0x40
        SJMP	??ZDP_SendData_3
??ZDP_SendData_2:
        MOV	R0,#0x0
??ZDP_SendData_3:
        MOV	A,R0
        ORL	A,#0xa
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	R1,?V0 + 2
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        CLR	A
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  174 }
//  175 
//  176 #if defined ( ZDO_NODEDESC_REQUEST ) || defined ( ZDO_POWERDESC_REQUEST ) ||\ 
//  177     defined ( ZDO_ACTIVEEP_REQUEST ) || defined ( ZDO_COMPLEXDESC_REQUEST ) ||\ 
//  178     defined ( ZDO_USERDESC_REQUEST )
//  179 /*********************************************************************
//  180  * @fn          ZDP_NWKAddrOfInterestReq
//  181  *
//  182  * @brief       This builds and send a request message that has
//  183  *              NWKAddrOfInterest as its only parameter.
//  184  *
//  185  * @param       dstAddr - destination address
//  186  * @param       nwkAddr - 16 bit address
//  187  * @param       SecurityEnable - Security Options
//  188  *
//  189  * @return      afStatus_t
//  190  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  191 afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_NWKAddrOfInterestReq:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ZDP_NWKAddrOfInterestReq
//  192                                      byte cmd, byte SecurityEnable )
//  193 {
        FUNCALL ZDP_NWKAddrOfInterestReq, ??fillAndSend
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  194   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
        LCALL	?Subroutine5 & 0xFFFF
//  195   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
//  196 
//  197   return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
??CrossCallReturnLabel_14:
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,R1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R1,#0x2
        CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine70
        ; // Fall through to label ?Subroutine70
//  198 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine70:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,#(ZDP_TransID & 0xff)
        MOV	R3,#((ZDP_TransID >> 8) & 0xff)
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        SJMP	??Subroutine63_1
        CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine63:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
??Subroutine63_0:
        MOV	R5,A
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,#0x1
??Subroutine63_1:
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  199 #endif // ZDO_NODEDESC_REQUEST ZDO_POWERDESC_REQUEST ZDO_ACTIVEEP_REQUEST ZDO_COMPLEXDESC_REQUEST  ZDO_USERDESC_REQUEST
//  200 
//  201 /*********************************************************************
//  202  * Address Requests
//  203  */
//  204 
//  205 #if defined ( ZDO_NWKADDR_REQUEST )
//  206 /*********************************************************************
//  207  * @fn          ZDP_NwkAddrReq
//  208  *
//  209  * @brief       This builds and send a NWK_addr_req message.  This
//  210  *              function sends a broadcast message looking for a 16
//  211  *              bit address with a 64 bit address as bait.
//  212  *
//  213  * @param       IEEEAddress - looking for this device
//  214  * @param       SecurityEnable - Security Options
//  215  *
//  216  * @return      afStatus_t
//  217  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  218 afStatus_t ZDP_NwkAddrReq( byte *IEEEAddress, byte ReqType,
ZDP_NwkAddrReq:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ZDP_NwkAddrReq
//  219                            byte StartIndex, byte SecurityEnable )
//  220 {
        FUNCALL ZDP_NwkAddrReq, osal_ExtAddrEqual
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL ZDP_NwkAddrReq, osal_cpyExtAddr
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL ZDP_NwkAddrReq, ??fillAndSend
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV	A,#-0x9
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	?V0 + 0,R1
        MOV	?V0 + 1,R4
//  221   byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine25 & 0xFFFF
//  222   byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
//  223   zAddrType_t dstAddr;
//  224 
//  225   if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
??CrossCallReturnLabel_63:
        ; Setup parameters for call to function osal_ExtAddrEqual
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	R2,#(saveExtAddr & 0xff)
        MOV	R3,#((saveExtAddr >> 8) & 0xff)
        MOV	DPTR,#(osal_ExtAddrEqual & 0xffff)
        MOV	A,#((osal_ExtAddrEqual >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JNZ	??ZDP_NwkAddrReq_0
//  226   {
//  227     dstAddr.addrMode = AddrBroadcast;
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine32 & 0xFFFF
//  228     dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
??CrossCallReturnLabel_76:
        MOV	A,#-0x1
        MOVX	@DPTR,A
        INC	DPTR
        SJMP	??CrossCallReturnLabel_28
//  229   }
//  230   else
//  231   {
//  232     dstAddr.addrMode = Addr16Bit;
??ZDP_NwkAddrReq_0:
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x2
        MOVX	@DPTR,A
//  233     dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
        MOV	DPTR,#ZDAppNwkAddr
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_28:
        MOVX	@DPTR,A
//  234   }
//  235 
//  236   pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R6,?V0 + 2
        MOV	R7,?V0 + 3
//  237 
//  238   *pBuf++ = ReqType;
        MOV	DPL,R6
        MOV	DPH,R7
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
//  239   *pBuf++ = StartIndex;
        INC	DPTR
        MOV	A,?V0 + 1
        MOVX	@DPTR,A
//  240 
//  241   return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x0
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	R1,#0xa
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#(ZDP_TransID & 0xff)
        MOV	R3,#((ZDP_TransID >> 8) & 0xff)
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	A,#0x9
        CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine64
        ; // Fall through to label ?Subroutine64
//  242 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine64:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Valid
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV	A,#0xf
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 19)
??Subroutine32_0:
        MOVX	@DPTR,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
        CFI EndBlock cfiCond11
//  243 #endif
//  244 
//  245 #if defined ( ZDO_IEEEADDR_REQUEST )
//  246 /*********************************************************************
//  247  * @fn          ZDP_IEEEAddrReq
//  248  *
//  249  * @brief       This builds and send a IEEE_addr_req message.  This
//  250  *              function sends a unicast message looking for a 64
//  251  *              bit IEEE address with a 16 bit address as bait.
//  252  *
//  253  * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
//  254  *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
//  255  * @param       SecurityEnable - Security Options
//  256  *
//  257  * @return      afStatus_t
//  258  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  259 afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
ZDP_IEEEAddrReq:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ZDP_IEEEAddrReq
//  260                             byte StartIndex, byte SecurityEnable )
//  261 {
        FUNCALL ZDP_IEEEAddrReq, ??fillAndSend
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV	A,#-0x9
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,R1
        MOV	R5,A
//  262   byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine14 & 0xFFFF
//  263   byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
//  264   zAddrType_t dstAddr;
//  265 
//  266   dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
??CrossCallReturnLabel_31:
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x2
        LCALL	??Subroutine32_0 & 0xFFFF
//  267   dstAddr.addr.shortAddr = shortAddr;
??CrossCallReturnLabel_78:
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  268 
//  269   *pBuf++ = LO_UINT16( shortAddr );
        MOV	A,R2
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	@DPTR,A
        INC	DPTR
//  270   *pBuf++ = HI_UINT16( shortAddr );
        MOV	A,R3
        MOVX	@DPTR,A
        INC	DPTR
//  271 
//  272   *pBuf++ = ReqType;
        MOV	A,R5
        MOVX	@DPTR,A
//  273   *pBuf++ = StartIndex;
        MOV	A,R4
        INC	DPTR
        MOVX	@DPTR,A
//  274 
//  275   return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	R1,#0x4
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#(ZDP_TransID & 0xff)
        MOV	R3,#((ZDP_TransID >> 8) & 0xff)
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock12
        REQUIRE ?Subroutine71
        ; // Fall through to label ?Subroutine71
//  276 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine71:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x9
        LJMP	??Subroutine63_1 & 0xFFFF
        CFI EndBlock cfiBlock13
//  277 #endif
//  278 
//  279 #if defined ( ZDO_MATCH_REQUEST )
//  280 /*********************************************************************
//  281  * @fn          ZDP_MatchDescReq
//  282  *
//  283  * @brief       This builds and send a Match_Desc_req message.  This
//  284  *              function sends a broadcast or unicast message
//  285  *              requesting the list of endpoint/interfaces that
//  286  *              match profile ID and cluster IDs.
//  287  *
//  288  * @param       dstAddr - destination address
//  289  * @param       ProfileID - Profile ID
//  290  * @param       NumInClusters - number of input clusters
//  291  * @param       InClusterList - input cluster ID list
//  292  * @param       NumOutClusters - number of output clusters
//  293  * @param       OutClusterList - output cluster ID list
//  294  * @param       SecurityEnable - Security Options
//  295  *
//  296  * @return      afStatus_t
//  297  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  298 afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_MatchDescReq:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function ZDP_MatchDescReq
//  299                                 uint16 ProfileID,
//  300                                 byte NumInClusters, cId_t *InClusterList,
//  301                                 byte NumOutClusters, cId_t *OutClusterList,
//  302                                 byte SecurityEnable )
//  303 {
        FUNCALL ZDP_MatchDescReq, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL ZDP_MatchDescReq, ??fillAndSend
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
        MOV	?V0 + 6,R1
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine20 & 0xFFFF
//  304   byte *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_51:
        LCALL	?Subroutine19 & 0xFFFF
//  305   // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
//  306   byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
//  307   uint8 protoVer = NLME_GetProtocolVersion();
??CrossCallReturnLabel_152:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R3,A
//  308 
//  309   len += (NumInClusters + NumOutClusters)*((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
        MOV	A,#0x1
        XRL	A,R3
        JZ	??ZDP_MatchDescReq_0
        MOV	R0,#0x2
        SJMP	??ZDP_MatchDescReq_1
??ZDP_MatchDescReq_0:
        MOV	R0,#0x1
??ZDP_MatchDescReq_1:
        MOV	A,?V0 + 7
        ADD	A,?V0 + 6
        MOV	B,A
        MOV	A,R0
        MUL	AB
        ADD	A,#0x6
        MOV	R2,A
//  310 
//  311   if ( len >= ZDP_BUF_SZ-1 )
        CLR	C
        SUBB	A,#0x4f
        JC	??ZDP_MatchDescReq_2
//  312   {
//  313     return afStatus_MEM_FAIL;
        MOV	R1,#-0x7f
        LJMP	??ZDP_MatchDescReq_3 & 0xFFFF
//  314   }
//  315 
//  316   *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
??ZDP_MatchDescReq_2:
        MOV	A,R6
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOVX	@DPTR,A
        INC	DPTR
//  317   *pBuf++ = HI_UINT16( nwkAddr );
        MOV	A,R7
        LCALL	?Subroutine33 & 0xFFFF
//  318 
//  319   *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
//  320   *pBuf++ = HI_UINT16( ProfileID );
//  321 
//  322   *pBuf++ = NumInClusters; // Input cluster list
??CrossCallReturnLabel_79:
        MOV	A,?V0 + 6
        LCALL	?Subroutine35 & 0xFFFF
//  323   if ( NumInClusters )
??CrossCallReturnLabel_83:
        JZ	??ZDP_MatchDescReq_4
//  324   {
//  325     for (i=0; i<NumInClusters; ++i)  {
        MOV	R4,#0x0
//  326       *pBuf++ = LO_UINT16( InClusterList[i] );
??ZDP_MatchDescReq_5:
        MOV	A,R4
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL	?Subroutine10 & 0xFFFF
//  327       if (protoVer != ZB_PROT_V1_0)  {
??CrossCallReturnLabel_22:
        JZ	??CrossCallReturnLabel_39
//  328         *pBuf++ = HI_UINT16( InClusterList[i] );
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL	?Subroutine15 & 0xFFFF
//  329       }
//  330     }
??CrossCallReturnLabel_39:
        INC	R4
        MOV	A,R4
        CLR	C
        SUBB	A,?V0 + 6
        JC	??ZDP_MatchDescReq_5
//  331   }
//  332 
//  333   *pBuf++ = NumOutClusters; // Output cluster list
??ZDP_MatchDescReq_4:
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOV	A,?V0 + 7
        LCALL	?Subroutine35 & 0xFFFF
//  334   if ( NumOutClusters )
??CrossCallReturnLabel_84:
        JZ	??ZDP_MatchDescReq_6
//  335   {
//  336     for (i=0; i<NumOutClusters; ++i)  {
        MOV	R4,#0x0
//  337       *pBuf++ = LO_UINT16( OutClusterList[i] );
??ZDP_MatchDescReq_7:
        MOV	A,R4
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,?V0 + 4
        ADD	A,R0
        MOV	DPL,A
        MOV	A,?V0 + 5
        ADDC	A,R1
        LCALL	?Subroutine10 & 0xFFFF
//  338       if (protoVer != ZB_PROT_V1_0)  {
??CrossCallReturnLabel_23:
        JZ	??CrossCallReturnLabel_40
//  339         *pBuf++ = HI_UINT16( OutClusterList[i] );
        MOV	A,?V0 + 4
        ADD	A,R0
        MOV	DPL,A
        MOV	A,?V0 + 5
        ADDC	A,R1
        LCALL	?Subroutine15 & 0xFFFF
//  340       }
//  341     }
??CrossCallReturnLabel_40:
        INC	R4
        MOV	A,R4
        CLR	C
        SUBB	A,?V0 + 7
        JC	??ZDP_MatchDescReq_7
//  342   }
//  343 
//  344   return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
??ZDP_MatchDescReq_6:
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x6
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	A,R2
        MOV	R1,A
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
??ZDP_MatchDescReq_3:
        LJMP	?Subroutine69 & 0xFFFF
        CFI EndBlock cfiBlock14
//  345 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        LCALL	?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_140:
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_140, ??CrossCallReturnLabel_71
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_16
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_12
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_141, ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_17
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_140, ??CrossCallReturnLabel_70
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R5,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R1
        MOV	DPL,R5
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL	?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_109:
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        LCALL	?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_103:
        XRL	A,R3
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30
//  346 #endif // ZDO_MATCH_REQUEST
//  347 
//  348 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  349 /*********************************************************************
//  350  * @fn          ZDP_SimpleDescReq
//  351  *
//  352  * @brief       This builds and send a NWK_Simple_Desc_req
//  353  *              message.  This function sends unicast message to the
//  354  *              destination device.
//  355  *
//  356  * @param       dstAddr - destination address
//  357  * @param       nwkAddr - 16 bit address
//  358  * @param       epIntf - endpoint/interface
//  359  * @param       SecurityEnable - Security Options
//  360  *
//  361  * @return      afStatus_t
//  362  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  363 afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_SimpleDescReq:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function ZDP_SimpleDescReq
//  364                                     byte endPoint, byte SecurityEnable )
//  365 
//  366 {
        FUNCALL ZDP_SimpleDescReq, ??fillAndSend
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  367   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
        LCALL	?Subroutine5 & 0xFFFF
//  368   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
//  369   ZDP_TmpBuf[2] = endPoint;
??CrossCallReturnLabel_15:
        LCALL	?Subroutine21 & 0xFFFF
//  370 
//  371   return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
??CrossCallReturnLabel_55:
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x4
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R1,#0x3
        LJMP	?Subroutine70 & 0xFFFF
        CFI EndBlock cfiBlock31
//  372 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOV	DPTR,#??ZDP_TmpBuf
        LCALL	?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_146:
        MOV	A,R4
        MOVX	@DPTR,A
        LCALL	?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_112:
        MOV	A,R5
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_15
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_14
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_55
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV	DPTR,#??ZDP_TmpBuf
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_24
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_69
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_68
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_25
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 19)
??Subroutine48_0:
        LCALL	?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_147:
        INC	DPTR
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_25
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_15
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_24
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_56
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_15
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_14
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_69
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_68
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_14
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54
        REQUIRE ?Subroutine65
        ; // Fall through to label ?Subroutine65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine65:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_142
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_69
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_68
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_144
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_143
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_56
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_15
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_25
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_55
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_24
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_15
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_145
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_14
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69
//  373 #endif // ZDO_SIMPLEDESC_REQUEST
//  374 
//  375 #if defined ( ZDO_USERDESCSET_REQUEST )
//  376 /*********************************************************************
//  377  * @fn          ZDP_UserDescSet
//  378  *
//  379  * @brief       This builds and send a User_Desc_set message to set
//  380  *              the user descriptor.  This function sends unicast
//  381  *              message to the destination device.
//  382  *
//  383  * @param       dstAddr - destination address
//  384  * @param       nwkAddr - 16 bit address
//  385  * @param       UserDescriptor - user descriptor
//  386  * @param       SecurityEnable - Security Options
//  387  *
//  388  * @return      afStatus_t
//  389  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  390 afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_UserDescSet:
        CFI Block cfiBlock70 Using cfiCommon0
        CFI Function ZDP_UserDescSet
//  391                           UserDescriptorFormat_t *UserDescriptor,
//  392                           byte SecurityEnable )
//  393 {
        FUNCALL ZDP_UserDescSet, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDP_UserDescSet, osal_memcpy
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_UserDescSet, osal_memset
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDP_UserDescSet, ??fillAndSend
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine18_0 & 0xFFFF
//  394   byte *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_47:
        LCALL	?Subroutine25 & 0xFFFF
//  395   byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
//  396               UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
??CrossCallReturnLabel_64:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,#0x10
        JNC	??ZDP_UserDescSet_0
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        SJMP	??ZDP_UserDescSet_1
??ZDP_UserDescSet_0:
        MOV	?V0 + 4,#0x10
//  397   byte addrLen = 2;
??ZDP_UserDescSet_1:
        MOV	?V0 + 3,#0x2
//  398 
//  399   *pBuf++ = LO_UINT16( nwkAddr );
        MOV	A,R4
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
        INC	DPTR
//  400   *pBuf++ = HI_UINT16( nwkAddr );
        MOV	A,R5
        LCALL	?Subroutine36 & 0xFFFF
//  401 
//  402   if ( NLME_GetProtocolVersion() == ZB_PROT_V1_1 )
??CrossCallReturnLabel_86:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x2
        JNZ	??ZDP_UserDescSet_2
//  403   {
//  404     *pBuf++ = len;
        MOV	DPL,R6
        MOV	DPH,R7
        MOV	A,?V0 + 4
        MOVX	@DPTR,A
        INC	DPTR
        INC	R6
        MOV	R7,DPH
//  405     addrLen = 3;
        MOV	?V0 + 3,#0x3
//  406   }
//  407   pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
??ZDP_UserDescSet_2:
        ; Setup parameters for call to function osal_memcpy
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        MOV	R1,DPL
        MOV	R2,DPH
        MOV	?V0 + 0,R1
        MOV	?V0 + 1,R2
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	R4,?V0 + 4
        MOV	R5,#0x0
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  408   osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
        ; Setup parameters for call to function osal_memset
        MOV	A,#0x10
        CLR	C
        SUBB	A,?V0 + 4
        MOV	R4,A
        CLR	A
        SUBB	A,#0x0
        MOV	R5,A
        MOV	R1,#0x20
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  409 
//  410   return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x14
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,#0x10
        ADD	A,?V0 + 3
        MOV	R1,A
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        MOV	R2,#(ZDP_TransID & 0xff)
        MOV	R3,#((ZDP_TransID >> 8) & 0xff)
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LJMP	?Subroutine69 & 0xFFFF
        CFI EndBlock cfiBlock70
//  411 }
//  412 #endif // ZDO_USERDESCSET_REQUEST
//  413 
//  414 #if defined ( ZDO_SERVERDISC_REQUEST )
//  415 /*********************************************************************
//  416  * @fn          ZDP_ServerDiscReq
//  417  *
//  418  * @brief       Build and send a Server_Discovery_req request message.
//  419  *
//  420  * @param       serverMask - 16-bit bit-mask of server services being sought.
//  421  * @param       SecurityEnable - Security Options
//  422  *
//  423  * @return      afStatus_t
//  424  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  425 afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
ZDP_ServerDiscReq:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI Function ZDP_ServerDiscReq
//  426 {
        FUNCALL ZDP_ServerDiscReq, ??fillAndSend
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV	A,#-0x9
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  427   byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine23 & 0xFFFF
//  428   zAddrType_t dstAddr;
//  429 
//  430   dstAddr.addrMode = AddrBroadcast;
??CrossCallReturnLabel_57:
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine32 & 0xFFFF
//  431   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
??CrossCallReturnLabel_77:
        MOV	A,#-0x4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#-0x1
        MOVX	@DPTR,A
//  432 
//  433   *pBuf++ = LO_UINT16( serverMask );
        MOV	A,R2
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	@DPTR,A
//  434   *pBuf = HI_UINT16( serverMask );
        MOV	A,R3
        INC	DPTR
        MOVX	@DPTR,A
//  435 
//  436   FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
//  437              ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
        MOV	A,R1
        JZ	??ZDP_ServerDiscReq_0
        MOV	A,#0x40
        SJMP	??ZDP_ServerDiscReq_1
??ZDP_ServerDiscReq_0:
        CLR	A
??ZDP_ServerDiscReq_1:
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x15
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	R1,#0x2
        MOV	A,R1
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#(ZDP_TransID & 0xff)
        MOV	R3,#((ZDP_TransID >> 8) & 0xff)
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        CLR	A
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        LJMP	?Subroutine71 & 0xFFFF
        CFI EndBlock cfiBlock71
//  438 }
//  439 #endif
//  440 
//  441 #if defined ( ZDO_ENDDEVICE_ANNCE_REQUEST ) || defined ( ZDO_ENDDEVICE_ANNCE_GENERATE )
//  442 /*********************************************************************
//  443  * @fn          ZDP_EndDeviceAnnce
//  444  *
//  445  * @brief       This builds and send an End_Device_Annce
//  446  *              message.  This function sends a broadcast message.
//  447  *
//  448  * @param       nwkAddr - 16 bit address of the device
//  449  * @param       IEEEAddr - 64 bit address of the device
//  450  * @param       capabilities - device capabilities.  This field is only
//  451  *                 sent for v1.1 networks.
//  452  * @param       SecurityEnable - Security Options
//  453  *
//  454  * @return      afStatus_t
//  455  */
//  456 afStatus_t ZDP_EndDeviceAnnce( uint16 nwkAddr, byte *IEEEAddr,
//  457                               byte capabilities, byte SecurityEnable )
//  458 {
//  459   zAddrType_t dstAddr;
//  460   uint8 len;
//  461 
//  462   dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
//  463   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  464 
//  465   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
//  466   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
//  467   osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
//  468   len = 2 + Z_EXTADDR_LEN;
//  469 
//  470   if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
//  471   {
//  472     ZDP_TmpBuf[10] = capabilities;
//  473     len++;
//  474   }
//  475 
//  476   return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_annce, len );
//  477 }
//  478 #endif // ZDO_ENDDEVICE_ANNCE_REQUEST
//  479 
//  480 /*********************************************************************
//  481  * Address Responses
//  482  */
//  483 
//  484 /*********************************************************************
//  485  * @fn      zdpProcessAddrReq
//  486  *
//  487  * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
//  488  *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
//  489  *
//  490  * @param   seq - Message sequence number of the request.
//  491  * @param   src - Source address of the request.
//  492  * @param   msg - Incoming request message.
//  493  * @param   cId - Cluster ID of the request.
//  494  * @param   sty - Security enable/disable options.
//  495  *
//  496  * @return  none
//  497  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  498 static void zdpProcessAddrReq(
??zdpProcessAddrReq:
        CFI Block cfiBlock72 Using cfiCommon0
        CFI Function ??zdpProcessAddrReq
//  499                     byte seq, zAddrType_t *src, byte *msg, uint16 cId, byte sty )
//  500 {
        FUNCALL ??zdpProcessAddrReq, osal_ExtAddrEqual
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ??zdpProcessAddrReq, osal_cpyExtAddr
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ??zdpProcessAddrReq, AssocMakeList
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ??zdpProcessAddrReq, osal_mem_free
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ??zdpProcessAddrReq, ??fillAndSend
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 6
        MOV	A,#-0x6
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,R1
        MOVX	@DPTR,A
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
//  501   byte reqType = msg[(cId == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
        MOV	A,?V0 + 6
        JNZ	??zdpProcessAddrReq_1
        MOV	A,?V0 + 7
??zdpProcessAddrReq_1:
        JNZ	??zdpProcessAddrReq_2
        MOV	R0,#0x8
        SJMP	??zdpProcessAddrReq_3
??zdpProcessAddrReq_2:
        MOV	R0,#0x2
??zdpProcessAddrReq_3:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	DPL,R2
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
//  502 
//  503   uint16 aoi = INVALID_NODE_ADDR;
//  504   byte *ieee = NULL;
        MOV	?V0 + 4,#0x0
        MOV	?V0 + 5,#0x0
//  505 
//  506   if ( cId == NWK_addr_req )
        MOV	A,?V0 + 6
        JNZ	??zdpProcessAddrReq_4
        MOV	A,?V0 + 7
??zdpProcessAddrReq_4:
        JNZ	??zdpProcessAddrReq_5
//  507   {
//  508     ieee = msg;
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine20 & 0xFFFF
//  509 
//  510     if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
??CrossCallReturnLabel_52:
        ; Setup parameters for call to function osal_ExtAddrEqual
        MOV	R4,?V0 + 4
        MOV	R2,#(saveExtAddr & 0xff)
        MOV	R3,#((saveExtAddr >> 8) & 0xff)
        MOV	DPTR,#(osal_ExtAddrEqual & 0xffff)
        MOV	A,#((osal_ExtAddrEqual >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JNZ	$+5
        LJMP	??zdpProcessAddrReq_6 & 0xFFFF
//  511     {
//  512       aoi = ZDAppNwkAddr.addr.shortAddr;
        MOV	DPTR,#ZDAppNwkAddr
        LCALL	??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_65:
        SJMP	??zdpProcessAddrReq_7
//  513     }
//  514     /*
//  515     else if ( reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP )
//  516     {
//  517       //ggg - what to do?
//  518     }
//  519     */
//  520 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  521     else
//  522     {
//  523       aoi = ZDCacheGetNwkAddr( msg );
//  524     }
//  525 #endif
//  526   }
//  527   else  // if ( cId == IEEE_addr_req )
//  528   {
//  529     aoi = BUILD_UINT16( msg[0], msg[1] );
??zdpProcessAddrReq_5:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_142:
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_143:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        CLR	A
        ADD	A,R2
        MOV	R6,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R7,A
//  530 
//  531     if ( aoi == ZDAppNwkAddr.addr.shortAddr )
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??zdpProcessAddrReq_8
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R7
??zdpProcessAddrReq_8:
        JNZ	??zdpProcessAddrReq_7
//  532     {
//  533       ieee = saveExtAddr;
        MOV	?V0 + 4,#(saveExtAddr & 0xff)
        MOV	?V0 + 5,#((saveExtAddr >> 8) & 0xff)
//  534     }
//  535 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  536     else
//  537     {
//  538       ieee = ZDCacheGetExtAddr( aoi );
//  539     }
//  540 #endif
//  541   }
//  542 
//  543   if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
??zdpProcessAddrReq_7:
        MOV	A,#-0x2
        XRL	A,R6
        JNZ	??zdpProcessAddrReq_9
        MOV	A,#-0x1
        XRL	A,R7
??zdpProcessAddrReq_9:
        JNZ	$+5
        LJMP	??zdpProcessAddrReq_6 & 0xFFFF
        MOV	A,?V0 + 4
        JNZ	??zdpProcessAddrReq_10
        MOV	A,?V0 + 5
??zdpProcessAddrReq_10:
        JNZ	$+5
        LJMP	??zdpProcessAddrReq_6 & 0xFFFF
//  544   {
//  545     byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine18 & 0xFFFF
//  546     // Status + IEEE-Addr + Nwk-Addr.
//  547     byte len = 1 + Z_EXTADDR_LEN + 2;
??CrossCallReturnLabel_48:
        MOV	?V0 + 2,#0xb
//  548 
//  549     byte stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) ||
//  550               (reqType == ZDP_ADDR_REQTYPE_EXTENDED) ||
//  551           ((reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP) && (cId == NWK_addr_req)) ) ?
//  552       ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
        MOV	A,?V0 + 3
        JZ	??zdpProcessAddrReq_11
        MOV	A,#0x1
        XRL	A,?V0 + 3
        JZ	??zdpProcessAddrReq_11
        MOV	A,#0x2
        XRL	A,?V0 + 3
        JNZ	??zdpProcessAddrReq_12
        MOV	A,?V0 + 6
        JNZ	??zdpProcessAddrReq_13
        MOV	A,?V0 + 7
??zdpProcessAddrReq_13:
        JNZ	??zdpProcessAddrReq_12
??zdpProcessAddrReq_11:
        MOV	R2,#0x0
        SJMP	??zdpProcessAddrReq_14
??zdpProcessAddrReq_12:
        MOV	R2,#-0x80
//  553 
//  554     *pBuf++ = stat;
??zdpProcessAddrReq_14:
        MOV	A,R2
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	@DPTR,A
//  555 
//  556     pBuf = osal_cpyExtAddr( pBuf, ieee );
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	R4,?V0 + 4
        MOV	R5,?V0 + 5
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  557 
//  558     *pBuf++ = LO_UINT16( aoi );
        MOV	A,R6
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
        INC	DPTR
//  559     *pBuf++ = HI_UINT16( aoi );
        MOV	A,R7
        LCALL	?Subroutine31 & 0xFFFF
//  560 
//  561 #if defined( RTR_NWK )
//  562     if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) &&
//  563          (aoi == ZDAppNwkAddr.addr.shortAddr) )
??CrossCallReturnLabel_74:
        JZ	$+5
        LJMP	??zdpProcessAddrReq_15 & 0xFFFF
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??zdpProcessAddrReq_16
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R7
??zdpProcessAddrReq_16:
        JZ	$+5
        LJMP	??zdpProcessAddrReq_15 & 0xFFFF
//  564     {
//  565       byte cnt = 0;
        CLR	A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//  566       uint16 *list = AssocMakeList( &cnt );
        ; Setup parameters for call to function AssocMakeList
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(AssocMakeList & 0xffff)
        MOV	A,#((AssocMakeList >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  567 
//  568       // NumAssocDev field is only present on success.
//  569       *pBuf++ = cnt;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine16 & 0xFFFF
//  570       len++;
??CrossCallReturnLabel_41:
        MOV	?V0 + 2,#0xc
//  571 
//  572       if ( list != NULL )
        MOV	A,R2
        JNZ	??zdpProcessAddrReq_17
        MOV	A,R3
??zdpProcessAddrReq_17:
        JZ	??zdpProcessAddrReq_15
//  573       {
//  574         byte idx =
//  575           msg[(((cId == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
        MOV	A,?V0 + 6
        JNZ	??zdpProcessAddrReq_18
        MOV	A,?V0 + 7
??zdpProcessAddrReq_18:
        JNZ	??zdpProcessAddrReq_19
        MOV	R0,#0x8
        SJMP	??zdpProcessAddrReq_20
??zdpProcessAddrReq_19:
        MOV	R0,#0x2
??zdpProcessAddrReq_20:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	DPL,R4
        MOV	DPH,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R4,A
//  576         uint16 *pList = list + idx;
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,R2
        ADD	A,R0
        MOV	R0,A
        MOV	A,R3
        ADDC	A,R1
        MOV	R1,A
//  577 
//  578         // StartIndex field is only present if NumAssocDev field is non-zero.
//  579         *pBuf++ = idx;
        MOV	A,R4
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	?Subroutine38 & 0xFFFF
//  580         len++;
??CrossCallReturnLabel_91:
        MOV	?V0 + 2,#0xd
//  581 
//  582         if ( cnt > idx )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,R4
        CLR	C
        SUBB	A,R5
        JNC	??zdpProcessAddrReq_21
//  583         {
//  584           cnt -= idx;
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R4
        MOVX	@DPTR,A
//  585           len += (cnt * sizeof( uint16 ));
        CLR	C
        RLC	A
        ADD	A,#0xd
        MOV	?V0 + 2,A
        SJMP	??zdpProcessAddrReq_22
//  586         }
//  587         else
//  588         {
//  589           cnt = 0;
??zdpProcessAddrReq_21:
        CLR	A
        MOVX	@DPTR,A
        SJMP	??zdpProcessAddrReq_23
//  590         }
//  591 
//  592         while ( cnt != 0 )
//  593         {
//  594           *pBuf++ = LO_UINT16( *pList );
??zdpProcessAddrReq_24:
        LCALL	?Subroutine8 & 0xFFFF
//  595           *pBuf++ = HI_UINT16( *pList );
??CrossCallReturnLabel_156:
        INC	DPTR
        LCALL	?Subroutine16 & 0xFFFF
//  596           pList++;
??CrossCallReturnLabel_42:
        MOV	A,R0
        ADD	A,#0x2
        INC	R0
        INC	R0
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R1,A
//  597           cnt--;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        DEC	A
        MOVX	@DPTR,A
//  598         }
??zdpProcessAddrReq_22:
        MOVX	A,@DPTR
        JNZ	??zdpProcessAddrReq_24
//  599 
//  600         osal_mem_free( (byte *)list );
??zdpProcessAddrReq_23:
        ; Setup parameters for call to function osal_mem_free
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  601       }
//  602     }
//  603 
//  604 #endif
//  605 
//  606     ZDP_TxOptions = AF_MSG_ACK_REQUEST;
??zdpProcessAddrReq_15:
        MOV	A,#0x10
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
//  607     fillAndSend( &seq, src, (cId_t)(cId | ZDO_RESPONSE_BIT), len );
        ; Setup parameters for call to function fillAndSend
        MOV	A,?V0 + 6
        MOV	?V0 + 0,A
        MOV	A,#-0x80
        ORL	A,?V0 + 7
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	R1,?V0 + 2
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  608     ZDP_TxOptions = AF_TX_OPTIONS_NONE;
        CLR	A
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
//  609   }
//  610 }
??zdpProcessAddrReq_6:
        MOV	A,#0x6
        LJMP	??Subroutine69_0 & 0xFFFF
        CFI EndBlock cfiBlock72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        LCALL	?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_111:
        RET
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_156
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_157
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_41
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_42
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker80 Using cfiCommon1
        CFI (cfiPicker80) NoFunction
        CFI (cfiPicker80) Picker
        LCALL	?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_136:
        LCALL	?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_132:
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiPicker80
//  611 
//  612 /*********************************************************************
//  613  * @fn          ZDP_NodeDescMsg
//  614  *
//  615  * @brief       Builds and sends a Node Descriptor message, unicast to the
//  616  *              specified device.
//  617  *
//  618  * @param       dstAddr - destination address
//  619  * @param       nwkAddr - 16 bit network address for device
//  620  * @param       pNodeDesc - pointer to the node descriptor
//  621  * @param       SecurityEnable - Security Options
//  622  *
//  623  * @return      afStatus_t
//  624  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  625 afStatus_t ZDP_NodeDescMsg( byte TransSeq, zAddrType_t *dstAddr,
ZDP_NodeDescMsg:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI Function ZDP_NodeDescMsg
//  626        uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc, byte SecurityEnable )
//  627 {
        FUNCALL ZDP_NodeDescMsg, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        FUNCALL ZDP_NodeDescMsg, ??fillAndSend
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	A,#0xd
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine24 & 0xFFFF
//  628   byte proVer = NLME_GetProtocolVersion();
??CrossCallReturnLabel_154:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R2,A
//  629   byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine14 & 0xFFFF
//  630   byte len;
//  631 
//  632   if ( proVer == ZB_PROT_V1_0 )
??CrossCallReturnLabel_32:
        MOV	A,#0x1
        XRL	A,R2
        JNZ	??ZDP_NodeDescMsg_0
//  633   {
//  634     len = 1 + 2 + 8;  // Status + nwkAddr + Node descriptor
        MOV	R4,#0xb
        SJMP	??ZDP_NodeDescMsg_1
//  635   }
//  636   else
//  637   {
//  638     len = 1 + 2 + 10;  // Status + nwkAddr + Node descriptor
??ZDP_NodeDescMsg_0:
        MOV	R4,#0xd
//  639   }
//  640 
//  641   *pBuf++ = ZDP_SUCCESS;
??ZDP_NodeDescMsg_1:
        CLR	A
        MOV	DPL,R0
        MOV	DPH,R1
        LCALL	?Subroutine33 & 0xFFFF
//  642 
//  643   *pBuf++ = LO_UINT16( nwkAddr );
//  644   *pBuf++ = HI_UINT16( nwkAddr );
??CrossCallReturnLabel_80:
        MOV	R0,DPL
        MOV	R1,DPH
//  645 
//  646   if ( proVer == ZB_PROT_V1_0 )
        MOV	A,#0x1
        XRL	A,R2
        MOV	DPL,R6
        MOV	DPH,R7
        JNZ	??ZDP_NodeDescMsg_2
//  647   {
//  648     *pBuf++ = (byte)(pNodeDesc->LogicalType & 0x07);
        MOVX	A,@DPTR
        ANL	A,#0x7
        SJMP	??ZDP_NodeDescMsg_3
//  649   }
//  650   else
//  651   {
//  652     *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
//  653                      (pNodeDesc->UserDescAvail << 4) |
//  654                      (pNodeDesc->LogicalType & 0x07));
??ZDP_NodeDescMsg_2:
        MOVX	A,@DPTR
        ANL	A,#0x1f
??ZDP_NodeDescMsg_3:
        LCALL	?Subroutine52 & 0xFFFF
//  655   }
//  656 
//  657   *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
??CrossCallReturnLabel_123:
        LCALL	?Subroutine12 & 0xFFFF
//  658   *pBuf++ = pNodeDesc->CapabilityFlags;
??CrossCallReturnLabel_26:
        LCALL	?Subroutine12 & 0xFFFF
//  659   *pBuf++ = pNodeDesc->ManufacturerCode[0];
??CrossCallReturnLabel_27:
        INC	DPTR
        LCALL	?Subroutine9 & 0xFFFF
//  660   *pBuf++ = pNodeDesc->ManufacturerCode[1];
??CrossCallReturnLabel_20:
        LCALL	?Subroutine9 & 0xFFFF
//  661   *pBuf++ = pNodeDesc->MaxBufferSize;
??CrossCallReturnLabel_21:
        INC	DPTR
        LCALL	?Subroutine7 & 0xFFFF
//  662   *pBuf++ = pNodeDesc->MaxTransferSize[0];
??CrossCallReturnLabel_18:
        LCALL	?Subroutine7 & 0xFFFF
//  663   *pBuf++ = pNodeDesc->MaxTransferSize[1];
??CrossCallReturnLabel_19:
        LCALL	?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_158:
        MOVX	@DPTR,A
        INC	DPTR
        INC	R0
        MOV	R1,DPH
//  664 
//  665   if ( proVer != ZB_PROT_V1_0 )
        MOV	A,#0x1
        XRL	A,R2
        JZ	??ZDP_NodeDescMsg_4
//  666   {
//  667     *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
        MOV	A,R6
        ADD	A,#0x8
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_159:
        MOVX	@DPTR,A
//  668     *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_160:
        INC	DPTR
        MOVX	@DPTR,A
//  669   }
//  670 
//  671   return fillAndSend( &TransSeq, dstAddr, Node_Desc_rsp, len );
??ZDP_NodeDescMsg_4:
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x2
        MOV	?V0 + 1,#-0x80
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	A,R4
        MOV	R1,A
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	A,#0x1
        LJMP	?Subroutine64 & 0xFFFF
        CFI EndBlock cfiBlock81
//  672 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_79
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 1
        MOVX	@DPTR,A
        INC	DPTR
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        MOVX	A,@DPTR
        LCALL	?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_124:
        INC	DPTR
        RET
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
        CFI Block cfiCond88 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_27
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        LCALL	?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_149:
        RET
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_20
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_26
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_19
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_27
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_18
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_123
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	@DPTR,A
        INC	DPTR
        INC	R0
        MOV	R1,DPH
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99
        REQUIRE ?Subroutine66
        ; // Fall through to label ?Subroutine66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine66:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_123
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_26
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_27
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_19
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_21
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_18
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_148
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        RET
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker112 Using cfiCommon1
        CFI (cfiPicker112) NoFunction
        CFI (cfiPicker112) Picker
        LCALL	?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_101:
        RET
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_18
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_21
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_20
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOVX	A,@DPTR
        LCALL	?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_150:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        LCALL	?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_102:
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120
//  673 
//  674 /*********************************************************************
//  675  * @fn          ZDP_PowerDescMsg
//  676  *
//  677  * @brief       Builds and sends a Power Descriptor message, unicast to the
//  678  *              specified device.
//  679  *
//  680  * @param       dstAddr - destination address
//  681  * @param       Status - message status (ZDP_SUCCESS or other)
//  682  * @param       nwkAddr - 16 bit network address for device
//  683  * @param       pPowerDesc - pointer to the node descriptor
//  684  * @param       SecurityEnable - Security Options
//  685  *
//  686  * @return      afStatus_t
//  687  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  688 afStatus_t ZDP_PowerDescMsg( byte TransSeq, zAddrType_t *dstAddr,
ZDP_PowerDescMsg:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI Function ZDP_PowerDescMsg
//  689   uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc, byte SecurityEnable )
//  690 {
        FUNCALL ZDP_PowerDescMsg, ??fillAndSend
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV	A,R0
        MOV	R6,A
        MOV	A,R1
        MOV	R7,A
//  691   byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine14 & 0xFFFF
//  692   byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
//  693 
//  694   *pBuf++ = ZDP_SUCCESS;
??CrossCallReturnLabel_34:
        CLR	A
        MOV	DPL,R0
        MOV	DPH,R1
        LCALL	?Subroutine39 & 0xFFFF
//  695 
//  696   *pBuf++ = LO_UINT16( nwkAddr );
//  697   *pBuf++ = HI_UINT16( nwkAddr );
??CrossCallReturnLabel_93:
        MOV	R0,DPL
        MOV	R1,DPH
//  698 
//  699   *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
//  700                     | (pPowerDesc->PowerMode & 0x0F));
        LCALL	?Subroutine22 & 0xFFFF
//  701   *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
//  702                     | (pPowerDesc->CurrentPowerSource & 0x0F));
??CrossCallReturnLabel_148:
        LCALL	??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_161:
        INC	DPTR
        MOVX	@DPTR,A
//  703 
//  704   return fillAndSend( &TransSeq, dstAddr, Power_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x3
        MOV	?V0 + 1,#-0x80
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	R1,#0x5
        LJMP	?Subroutine63 & 0xFFFF
        CFI EndBlock cfiBlock121
//  705 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond122 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_158
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_160
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker124 Using cfiCommon1
        CFI (cfiPicker124) NoFunction
        CFI (cfiPicker124) Picker
        INC	DPTR
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_161
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_159
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 13)
??Subroutine28_0:
        MOVX	A,@DPTR
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiPicker124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        REQUIRE ?Subroutine68
        ; // Fall through to label ?Subroutine68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine68:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_159
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_161
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_162
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_160
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_157
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_156
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_163
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_158
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_164
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker136 Using cfiCommon1
        CFI (cfiPicker136) NoFunction
        CFI (cfiPicker136) Picker
        MOV	DPL,R0
        MOV	DPH,R1
        RET
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiPicker136

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond137 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_148
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker139 Using cfiCommon1
        CFI (cfiPicker139) NoFunction
        CFI (cfiPicker139) Picker
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	@DPTR,A
        SJMP	?Subroutine66
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiPicker139
//  706 
//  707 /*********************************************************************
//  708  * @fn          ZDP_SimpleDescMsg
//  709  *
//  710  * @brief       Builds and sends a Simple Descriptor message, unicast to the
//  711  *              specified device.
//  712  *
//  713  * @param       dstAddr - destination address
//  714  * @param       Status - message status (ZDP_SUCCESS or other)
//  715  * @param       pSimpleDesc - pointer to the node descriptor
//  716  * @param       SecurityEnable - Security Options
//  717  *
//  718  * @return      afStatus_t
//  719  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  720 afStatus_t ZDP_SimpleDescMsg( byte TransSeq, zAddrType_t *dstAddr, byte Status,
ZDP_SimpleDescMsg:
        CFI Block cfiBlock140 Using cfiCommon0
        CFI Function ZDP_SimpleDescMsg
//  721                               SimpleDescriptionFormat_t *pSimpleDesc,
//  722                               cId_t clusterID, byte SecurityEnable )
//  723 {
        FUNCALL ZDP_SimpleDescMsg, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDP_SimpleDescMsg, ??fillAndSend
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	?V0 + 6,R4
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine49 & 0xFFFF
//  724   uint8 *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_117:
        MOV	DPTR,#??ZDP_TmpBuf
        LCALL	?Subroutine24 & 0xFFFF
//  725   uint8 i, len;
//  726   uint8 protoVer;
//  727 
//  728   protoVer = NLME_GetProtocolVersion();
??CrossCallReturnLabel_155:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R3,A
//  729 
//  730   if ( Status == ZDP_SUCCESS && pSimpleDesc )
        MOV	A,?V0 + 6
        JNZ	??ZDP_SimpleDescMsg_0
        MOV	A,?V0 + 0
        JNZ	??ZDP_SimpleDescMsg_1
        MOV	A,?V0 + 1
??ZDP_SimpleDescMsg_1:
        JZ	??ZDP_SimpleDescMsg_0
//  731   {
//  732     // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
//  733     len = 1 + 2 + 1 + 8;
//  734     len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters)
//  735             * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
        MOV	A,#0x1
        XRL	A,R3
        JZ	??ZDP_SimpleDescMsg_2
        MOV	R0,#0x2
        SJMP	??ZDP_SimpleDescMsg_3
??ZDP_SimpleDescMsg_2:
        MOV	R0,#0x1
??ZDP_SimpleDescMsg_3:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_72:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOV	R2,A
        MOVX	A,@DPTR
        ADD	A,R2
        MOV	B,A
        MOV	A,R0
        MUL	AB
        ADD	A,#0xc
        MOV	R2,A
//  736   }
//  737   else
//  738   {
//  739     len = 2; // Status + desc length
//  740   }
//  741   if ( len >= ZDP_BUF_SZ-1 )
        CLR	C
        SUBB	A,#0x4f
        JC	??ZDP_SimpleDescMsg_4
//  742   {
//  743     return afStatus_MEM_FAIL;
        MOV	R1,#-0x7f
        LJMP	??ZDP_SimpleDescMsg_5 & 0xFFFF
//  744   }
??ZDP_SimpleDescMsg_0:
        MOV	R2,#0x2
//  745 
//  746   *pBuf++ = Status;
??ZDP_SimpleDescMsg_4:
        MOV	DPL,R6
        MOV	DPH,R7
        MOV	A,?V0 + 6
        LCALL	?Subroutine36 & 0xFFFF
//  747 
//  748   *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
??CrossCallReturnLabel_87:
        MOV	DPTR,#ZDAppNwkAddr
        LCALL	??Subroutine4_0 & 0xFFFF
//  749   *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
??CrossCallReturnLabel_9:
        MOV	DPTR,#(ZDAppNwkAddr + 1)
        LCALL	?Subroutine59 & 0xFFFF
//  750 
//  751   if ( len > 2 )
??CrossCallReturnLabel_137:
        MOV	A,R2
        CLR	C
        SUBB	A,#0x3
        JNC	$+5
        LJMP	??ZDP_SimpleDescMsg_6 & 0xFFFF
//  752   {
//  753     *pBuf++ = len - 4;   // Simple descriptor length
        MOV	A,#-0x4
        ADD	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        INC	R6
        INC	R6
        MOV	R7,DPH
//  754 
//  755     *pBuf++ = pSimpleDesc->EndPoint;
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	??Subroutine4_0 & 0xFFFF
//  756     *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
??CrossCallReturnLabel_10:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        MOV	R0,DPL
        MOV	R1,DPH
        LCALL	?Subroutine3 & 0xFFFF
//  757     *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
//  758     *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
??CrossCallReturnLabel_7:
        MOV	A,?V0 + 0
        ADD	A,#0x3
        LCALL	?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_162:
        LCALL	?Subroutine3 & 0xFFFF
//  759     *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
//  760 
//  761     if ( protoVer == ZB_PROT_V1_0 )
??CrossCallReturnLabel_8:
        MOV	A,#0x1
        XRL	A,R3
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        JNZ	??ZDP_SimpleDescMsg_7
//  762     {
//  763       *pBuf++ = (byte)((pSimpleDesc->AppDevVer << 4) | (pSimpleDesc->Reserved));
        MOVX	A,@DPTR
        MOV	R4,A
        SWAP	A
        ANL	A,#0xf
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,R4
        SWAP	A
        ANL	A,#0xf0
        MOV	R4,A
        POP	A
        CFI CFA_SP SP+0
        ORL	A,R4
        SJMP	??ZDP_SimpleDescMsg_8
//  764     }
//  765     else
//  766     {
//  767       *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
??ZDP_SimpleDescMsg_7:
        MOVX	A,@DPTR
        SWAP	A
        ANL	A,#0xf0
??ZDP_SimpleDescMsg_8:
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
        INC	DPTR
        INC	R6
        MOV	R7,DPH
//  768     }
//  769 
//  770     *pBuf++ = pSimpleDesc->AppNumInClusters;
        MOV	A,?V0 + 0
        ADD	A,#0x6
        INC	R0
        INC	R0
        INC	R0
        LCALL	??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_163:
        LCALL	??Subroutine4_0 & 0xFFFF
//  771     if ( pSimpleDesc->AppNumInClusters )
??CrossCallReturnLabel_11:
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        JZ	??ZDP_SimpleDescMsg_9
//  772     {
//  773       for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
        MOV	R4,#0x0
        SJMP	??ZDP_SimpleDescMsg_10
//  774       {
//  775         *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
??ZDP_SimpleDescMsg_11:
        MOV	A,R4
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	?Subroutine6 & 0xFFFF
//  776         if ( protoVer != ZB_PROT_V1_0 )
??CrossCallReturnLabel_16:
        JZ	??CrossCallReturnLabel_12
//  777         {
//  778         *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	?Subroutine4 & 0xFFFF
//  779       }
//  780     }
??CrossCallReturnLabel_12:
        INC	R4
??ZDP_SimpleDescMsg_10:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,R4
        CLR	C
        SUBB	A,R5
        JC	??ZDP_SimpleDescMsg_11
//  781     }
//  782     *pBuf++ = pSimpleDesc->AppNumOutClusters;
??ZDP_SimpleDescMsg_9:
        MOV	A,?V0 + 0
        ADD	A,#0x9
        LCALL	?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_164:
        MOVX	A,@DPTR
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine36 & 0xFFFF
//  783     if ( pSimpleDesc->AppNumOutClusters )
??CrossCallReturnLabel_88:
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        JZ	??ZDP_SimpleDescMsg_12
//  784     {
//  785       for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
        MOV	R4,#0x0
??ZDP_SimpleDescMsg_13:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,R4
        CLR	C
        SUBB	A,R5
        JNC	??ZDP_SimpleDescMsg_12
//  786       {
//  787         *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
        MOV	A,R4
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine6 & 0xFFFF
//  788         if ( protoVer != ZB_PROT_V1_0 )
??CrossCallReturnLabel_17:
        JZ	??CrossCallReturnLabel_13
//  789         {
//  790         *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine4 & 0xFFFF
//  791       }
//  792     }
??CrossCallReturnLabel_13:
        INC	R4
        SJMP	??ZDP_SimpleDescMsg_13
//  793   }
//  794   }
//  795   else
//  796   {
//  797     *pBuf = 0; // Description Length = 0;
??ZDP_SimpleDescMsg_6:
        CLR	A
        MOVX	@DPTR,A
//  798   }
//  799 
//  800   return fillAndSend( &TransSeq, dstAddr, clusterID, len );
??ZDP_SimpleDescMsg_12:
        ; Setup parameters for call to function fillAndSend
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,R2
        MOV	R1,A
        MOV	R4,?V0 + 4
        MOV	R5,?V0 + 5
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
??ZDP_SimpleDescMsg_5:
        MOV	A,#0x1
        LJMP	?Subroutine62 & 0xFFFF
        CFI EndBlock cfiBlock140
//  801 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_152
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_153
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker145 Using cfiCommon1
        CFI (cfiPicker145) NoFunction
        CFI (cfiPicker145) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiPicker145

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond146 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_162
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_164
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker148 Using cfiCommon1
        CFI (cfiPicker148) NoFunction
        CFI (cfiPicker148) Picker
        MOV	R0,A
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_163
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 16)
??Subroutine40_0:
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	R1,A
        LJMP	?Subroutine68 & 0xFFFF
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiPicker148
        CFI EndBlock cfiCond149

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond150 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker153 Using cfiCommon1
        CFI (cfiPicker153) NoFunction
        CFI (cfiPicker153) Picker
        MOVX	@DPTR,A
        INC	DPTR
        MOV	R6,DPL
        MOV	R7,DPH
        RET
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiPicker153

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond154 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_154
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_155
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker156 Using cfiCommon1
        CFI (cfiPicker156) NoFunction
        CFI (cfiPicker156) Picker
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiPicker156
        ; Setup parameters for call to function NLME_GetProtocolVersion
        ; Setup parameters for call to function NLME_GetProtocolVersion
        REQUIRE ?Subroutine67
        ; // Fall through to label ?Subroutine67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine67:
        CFI Block cfiCond157 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_152
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_153
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_154
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_155
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond162 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker164 Using cfiCommon1
        CFI (cfiPicker164) NoFunction
        CFI (cfiPicker164) Picker
        MOV	DPTR,#??ZDP_TmpBuf
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 16)
??Subroutine18_0:
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        RET
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiPicker164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond169 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker171 Using cfiCommon1
        CFI (cfiPicker171) NoFunction
        CFI (cfiPicker171) Picker
        LCALL	?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_120:
        LCALL	?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_138:
        MOV	R6,DPL
        MOV	R7,DPH
        MOV	A,#0x1
        XRL	A,R3
        RET
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiPicker171

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
        CFI Block cfiCond172 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_12
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_7
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_138, ??CrossCallReturnLabel_17
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_10
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_7
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_138, ??CrossCallReturnLabel_16
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_9
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_8
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_11
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_8
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker184 Using cfiCommon1
        CFI (cfiPicker184) NoFunction
        CFI (cfiPicker184) Picker
        MOVX	A,@DPTR
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
        INC	DPTR
        RET
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiPicker184

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond185 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker187 Using cfiCommon1
        CFI (cfiPicker187) NoFunction
        CFI (cfiPicker187) Picker
        LCALL	?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_119:
        INC	DPTR
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 16)
??Subroutine4_0:
        LCALL	?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_107:
        RET
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiPicker187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond191 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_16
        CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond192) CFA_SP SP+0
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_12
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_17
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker195 Using cfiCommon1
        CFI (cfiPicker195) NoFunction
        CFI (cfiPicker195) Picker
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_141:
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond196 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker198 Using cfiCommon1
        CFI (cfiPicker198) NoFunction
        CFI (cfiPicker198) Picker
        LCALL	?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_105:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        LCALL	?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_106:
        RET
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiPicker198

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond199 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_9
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_8
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_13
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_8
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_11
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_10
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_7
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_12
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker208 Using cfiCommon1
        CFI (cfiPicker208) NoFunction
        CFI (cfiPicker208) Picker
        LCALL	?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_139:
        INC	R6
        MOV	R7,DPH
        RET
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiPicker208
//  802 
//  803 /*********************************************************************
//  804  * @fn          ZDP_EPRsp
//  805  *
//  806  * @brief       This builds and send an endpoint list. Used in
//  807  *              Active_EP_rsp and Match_Desc_Rsp
//  808  *              message.  This function sends unicast message to the
//  809  *              requesting device.
//  810  *
//  811  * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
//  812  * @param       dstAddr - destination address
//  813  * @param       Status - message status (ZDP_SUCCESS or other)
//  814  * @param       nwkAddr - Device's short address that this response describes
//  815  * @param       Count - number of endpoint/interfaces in list
//  816  * @param       pEPIntfList - Array of Endpoint/Interfaces
//  817  * @param       SecurityEnable - Security Options
//  818  *
//  819  * @return      afStatus_t
//  820  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  821 afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
ZDP_EPRsp:
        CFI Block cfiBlock209 Using cfiCommon0
        CFI Function ZDP_EPRsp
//  822                         byte Status, uint16 nwkAddr, byte Count,
//  823                         byte *pEPList,
//  824                         byte SecurityEnable )
//  825 {
        FUNCALL ZDP_EPRsp, osal_memcpy
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ZDP_EPRsp, ??fillAndSend
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
        MOV	A,#0x11
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine17 & 0xFFFF
//  826   byte *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_43:
        MOV	R3,A
//  827   byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
        MOV	?V0 + 3,#0x4
//  828   byte txOptions;
//  829 
//  830   if ( MsgType == Match_Desc_rsp )
        MOV	A,#0x6
        XRL	A,R6
        JNZ	??ZDP_EPRsp_0
        MOV	A,#-0x80
        XRL	A,R7
??ZDP_EPRsp_0:
        JNZ	??ZDP_EPRsp_1
//  831     txOptions = AF_MSG_ACK_REQUEST;
        MOV	?V0 + 4,#0x10
        SJMP	??ZDP_EPRsp_2
//  832   else
//  833     txOptions = 0;
??ZDP_EPRsp_1:
        MOV	?V0 + 4,#0x0
//  834 
//  835     *pBuf++ = Status;
??ZDP_EPRsp_2:
        MOV	A,R5
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
        INC	DPTR
//  836   *pBuf++ = LO_UINT16( nwkAddr );
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
//  837   *pBuf++ = HI_UINT16( nwkAddr );
        MOV	A,R1
        MOVX	@DPTR,A
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
//  838 
//  839   *pBuf++ = Count;   // Endpoint/Interface count
        MOV	A,R4
        MOVX	@DPTR,A
//  840 
//  841   if ( Count )
        JZ	??ZDP_EPRsp_3
//  842   {
//  843     len += Count;
        MOV	A,#0x4
        ADD	A,R4
        MOV	?V0 + 3,A
//  844     osal_memcpy( pBuf, pEPList, Count );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R5,#0x0
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	R2
        MOV	R3,DPH
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  845   }
//  846 
//  847   FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
??ZDP_EPRsp_3:
        MOV	A,?V0 + 4
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,R6
        MOV	?V0 + 1,R7
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	R1,?V0 + 3
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        CLR	A
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        CFI EndBlock cfiBlock209
        REQUIRE ?Subroutine72
        ; // Fall through to label ?Subroutine72
//  848 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine72:
        CFI Block cfiBlock210 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x1
        SJMP	??Subroutine69_0
        CFI EndBlock cfiBlock210

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine69:
        CFI Block cfiBlock211 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x2
??Subroutine69_0:
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock211
//  849 
//  850 #if defined ( ZDO_USERDESC_RESPONSE )
//  851 /*********************************************************************
//  852  * @fn          ZDP_UserDescRsp
//  853  *
//  854  * @brief       Build and send the User Decriptor Response.
//  855  *
//  856  *
//  857  * @param       dstAddr - destination address
//  858  * @param       nwkAddrOfInterest -
//  859  * @param       userDesc -
//  860  * @param       SecurityEnable - Security Options
//  861  *
//  862  * @return      ZStatus_t
//  863  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  864 ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_UserDescRsp:
        CFI Block cfiBlock212 Using cfiCommon0
        CFI Function ZDP_UserDescRsp
//  865                 uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
//  866                 byte SecurityEnable )
//  867 {
        FUNCALL ZDP_UserDescRsp, osal_memcpy
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ZDP_UserDescRsp, ??fillAndSend
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
        MOV	A,#0x11
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine20 & 0xFFFF
//  868   byte *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_53:
        MOV	DPTR,#??ZDP_TmpBuf
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
//  869   byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
//  870 
//  871   len += userDesc->len;
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        MOVX	A,@DPTR
        ADD	A,#0x4
        MOV	R7,A
//  872 
//  873   *pBuf++ = ZSUCCESS;
        CLR	A
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	?Subroutine39 & 0xFFFF
//  874 
//  875   *pBuf++ = LO_UINT16( nwkAddrOfInterest );
//  876   *pBuf++ = HI_UINT16( nwkAddrOfInterest );
??CrossCallReturnLabel_94:
        MOV	R2,DPL
        MOV	R3,DPH
//  877 
//  878   *pBuf++ = userDesc->len;
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        MOVX	A,@DPTR
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
//  879   osal_memcpy( pBuf, userDesc->desc, userDesc->len );
        ; Setup parameters for call to function osal_memcpy
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        INC	DPTR
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	R5,#0x0
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	R2
        MOV	R3,DPH
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  880 
//  881   return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x11
        MOV	?V0 + 1,#-0x80
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,R7
        MOV	R1,A
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        LJMP	?Subroutine72 & 0xFFFF
        CFI EndBlock cfiBlock212
//  882 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond213 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond214) CFA_SP SP+0
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker215 Using cfiCommon1
        CFI (cfiPicker215) NoFunction
        CFI (cfiPicker215) Picker
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
        INC	DPTR
        RET
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiPicker215

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond216 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond217 Using cfiCommon0
        CFI (cfiCond217) NoFunction
        CFI (cfiCond217) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond217) CFA_SP SP+0
        CFI (cfiCond217) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker220 Using cfiCommon1
        CFI (cfiPicker220) NoFunction
        CFI (cfiPicker220) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 5,A
        RET
        CFI EndBlock cfiCond216
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiPicker220
//  883 #endif // ZDO_USERDESC_RESPONSE
//  884 
//  885 #if defined ( ZDO_SERVERDISC_RESPONSE )
//  886 /*********************************************************************
//  887  * @fn          ZDP_ServerDiscRsp
//  888  *
//  889  * @brief       Build and send the Server_Discovery_rsp response.
//  890  *
//  891  * @param       transID - Transaction sequence number of request.
//  892  * @param       dstAddr - Network Destination Address.
//  893  * @param       status - Status of response to request.
//  894  * @param       aoi - Network Address of Interest of request.
//  895  * @param       serverMask - Bit map of service(s) being sought.
//  896  * @param       SecurityEnable - Security Options
//  897  *
//  898  * @return      ZStatus_t
//  899  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  900 ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
ZDP_ServerDiscRsp:
        CFI Block cfiBlock221 Using cfiCommon0
        CFI Function ZDP_ServerDiscRsp
//  901                            uint16 aoi, uint16 serverMask, byte SecurityEnable )
//  902 {
        FUNCALL ZDP_ServerDiscRsp, ??fillAndSend
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	A,R4
        MOV	R6,A
        MOV	A,#0xd
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine14_0 & 0xFFFF
//  903   const byte len = 1  + 2;  // status + aoi + mask.
//  904   byte *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_36:
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV	DPL,R4
        MOV	DPH,R5
//  905 
//  906   *pBuf++ = status;
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
//  907 
//  908   *pBuf++ = LO_UINT16( serverMask );
        MOV	A,R0
        MOVX	@DPTR,A
//  909   *pBuf++ = HI_UINT16( serverMask );
        MOV	A,R1
        INC	DPTR
        MOVX	@DPTR,A
//  910 
//  911   return (ZStatus_t)fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x15
        MOV	?V0 + 1,#-0x80
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	R1,#0x3
        LJMP	?Subroutine63 & 0xFFFF
        CFI EndBlock cfiBlock221
//  912 }
//  913 #endif // ZDO_USERDESC_RESPONSE
//  914 
//  915 /*********************************************************************
//  916  * @fn          ZDP_GenericRsp
//  917  *
//  918  * @brief       Sends a response message with only the parameter status
//  919  *              byte and the addr of interest for data.
//  920  *              This function sends unicast message to the
//  921  *              requesting device.
//  922  *
//  923  * @param       dstAddr - destination address
//  924  * @param       status  - generic status for response
//  925  * @param       aoi     - address of interest
//  926  * @param       dstAddr - destination address
//  927  * @param       rspId   - response cluster ID
//  928  * @param       SecurityEnable - Security Options
//  929  *
//  930  * @return      afStatus_t
//  931  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  932 afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_GenericRsp:
        CFI Block cfiBlock222 Using cfiCommon0
        CFI Function ZDP_GenericRsp
//  933                      byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
//  934 {
        FUNCALL ZDP_GenericRsp, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        FUNCALL ZDP_GenericRsp, ??fillAndSend
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV	A,#0xd
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine17 & 0xFFFF
//  935   uint8 len;
//  936 
//  937   ZDP_TmpBuf[0] = status;
??CrossCallReturnLabel_44:
        MOV	DPH,A
        MOV	DPL,R2
        MOV	A,R4
        MOVX	@DPTR,A
//  938   ZDP_TmpBuf[1] = LO_UINT16( aoi );
        MOV	DPTR,#??ZDP_TmpBuf
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R2
        INC	DPTR
        MOV	A,R0
        MOVX	@DPTR,A
//  939   ZDP_TmpBuf[2] = HI_UINT16( aoi );
        LCALL	?Subroutine21 & 0xFFFF
//  940 
//  941   if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
??CrossCallReturnLabel_56:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JZ	??ZDP_GenericRsp_0
//  942   {
//  943     // Length byte
//  944     ZDP_TmpBuf[3] = 0;
        MOV	DPTR,#??ZDP_TmpBuf
        LCALL	?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_68:
        INC	DPTR
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  945     len = 4;
        MOV	R1,#0x4
        SJMP	??ZDP_GenericRsp_1
//  946   }
//  947   else
//  948   {
//  949     len = 3;
??ZDP_GenericRsp_0:
        MOV	R1,#0x3
//  950   }
//  951 
//  952 
//  953   return fillAndSend( &TransSeq, dstAddr, rspID, len );
??ZDP_GenericRsp_1:
        ; Setup parameters for call to function fillAndSend
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	A,R6
        MOV	R4,A
        MOV	A,R7
        LJMP	??Subroutine63_0 & 0xFFFF
        CFI EndBlock cfiBlock222
//  954 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond223 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond224 Using cfiCommon0
        CFI (cfiCond224) NoFunction
        CFI (cfiCond224) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond224) CFA_SP SP+0
        CFI (cfiCond224) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker225 Using cfiCommon1
        CFI (cfiPicker225) NoFunction
        CFI (cfiPicker225) Picker
        LCALL	?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_114:
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond223
        CFI EndBlock cfiCond224
        CFI EndBlock cfiPicker225

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond226 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker228 Using cfiCommon1
        CFI (cfiPicker228) NoFunction
        CFI (cfiPicker228) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        MOV	DPTR,#??ZDP_TmpBuf
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiPicker228
//  955 
//  956 /*********************************************************************
//  957  * Binding
//  958  */
//  959 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  960 /*********************************************************************
//  961  * @fn          ZDP_EndDeviceBindReq
//  962  *
//  963  * @brief       This builds and sends a End_Device_Bind_req message.
//  964  *              This function sends a unicast message.
//  965  *
//  966  * @param       dstAddr - destination address
//  967  * @param       LocalCoordinator - short address of local coordinator
//  968  * @param       epIntf - Endpoint/Interface of Simple Desc
//  969  * @param       ProfileID - Profile ID
//  970  *
//  971  *   The Input cluster list is the opposite of what you would think.
//  972  *   This is the output cluster list of this device
//  973  * @param       NumInClusters - number of input clusters
//  974  * @param       InClusterList - input cluster ID list
//  975  *
//  976  *   The Output cluster list is the opposite of what you would think.
//  977  *   This is the input cluster list of this device
//  978  * @param       NumOutClusters - number of output clusters
//  979  * @param       OutClusterList - output cluster ID list
//  980  *
//  981  * @param       SecurityEnable - Security Options
//  982  *
//  983  * @return      afStatus_t
//  984  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  985 afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
ZDP_EndDeviceBindReq:
        CFI Block cfiBlock229 Using cfiCommon0
        CFI Function ZDP_EndDeviceBindReq
//  986                                  uint16 LocalCoordinator,
//  987                                  byte endPoint,
//  988                                  uint16 ProfileID,
//  989                                  byte NumInClusters, cId_t *InClusterList,
//  990                                  byte NumOutClusters, cId_t *OutClusterList,
//  991                                  byte SecurityEnable )
//  992 {
        FUNCALL ZDP_EndDeviceBindReq, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_EndDeviceBindReq, NLME_GetExtAddr
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_EndDeviceBindReq, osal_cpyExtAddr
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_EndDeviceBindReq, ??fillAndSend
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 3
        MOV	A,#-0x3
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        LCALL	?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	A,#0x13
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 6,A
//  993   uint8 *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine19 & 0xFFFF
//  994   uint8 i, len;
//  995   uint8 *ieeeAddr;
//  996   uint8 protoVer = NLME_GetProtocolVersion();
??CrossCallReturnLabel_153:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	?V0 + 5,A
//  997 
//  998   if ( protoVer != ZB_PROT_V1_0 )
        MOV	A,#0x1
        XRL	A,?V0 + 5
        JZ	??ZDP_EndDeviceBindReq_0
//  999   {
// 1000     // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
// 1001     len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
        MOV	?V0 + 4,#0xf
        MOV	R0,#0x2
        SJMP	??ZDP_EndDeviceBindReq_1
// 1002   }
// 1003   else
// 1004   {
// 1005     // LocalCoordinator + ep + ProfileID +  NumInClusters + NumOutClusters.
// 1006     len = 2 + 1 + 2 + 1 + 1;
??ZDP_EndDeviceBindReq_0:
        MOV	?V0 + 4,#0x7
        MOV	R0,#0x1
??ZDP_EndDeviceBindReq_1:
        MOV	A,?V0 + 6
        ADD	A,?V0 + 7
        MOV	B,A
        MOV	A,R0
        MUL	AB
        ADD	A,?V0 + 4
        MOV	?V0 + 4,A
// 1007   }
// 1008 
// 1009   len += (NumInClusters + NumOutClusters) * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
// 1010   if ( len >= ZDP_BUF_SZ-1 )
        CLR	C
        SUBB	A,#0x4f
        JC	??ZDP_EndDeviceBindReq_2
// 1011   {
// 1012     return afStatus_MEM_FAIL;
        MOV	R1,#-0x7f
        LJMP	??ZDP_EndDeviceBindReq_3 & 0xFFFF
// 1013   }
// 1014 
// 1015   *pBuf++ = LO_UINT16( LocalCoordinator );
??ZDP_EndDeviceBindReq_2:
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
// 1016   *pBuf++ = HI_UINT16( LocalCoordinator );
        MOV	A,?V0 + 1
        LCALL	?Subroutine35 & 0xFFFF
// 1017 
// 1018   if ( protoVer != ZB_PROT_V1_0 )
??CrossCallReturnLabel_85:
        MOV	A,#0x1
        XRL	A,?V0 + 5
        JZ	??ZDP_EndDeviceBindReq_4
// 1019   {
// 1020     ieeeAddr = NLME_GetExtAddr();
// 1021     pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
        ; Setup parameters for call to function osal_cpyExtAddr
        ; Setup parameters for call to function NLME_GetExtAddr
        MOV	DPTR,#(NLME_GetExtAddr & 0xffff)
        MOV	A,#((NLME_GetExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
// 1022   }
// 1023 
// 1024   *pBuf++ = endPoint;
??ZDP_EndDeviceBindReq_4:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOVX	@DPTR,A
        INC	DPTR
// 1025 
// 1026   *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
// 1027   *pBuf++ = HI_UINT16( ProfileID );
        MOV	A,R7
        MOVX	@DPTR,A
        INC	DPTR
// 1028 
// 1029   *pBuf++ = NumInClusters; // Input cluster list
        MOV	A,?V0 + 7
        LCALL	?Subroutine34 & 0xFFFF
// 1030   for ( i = 0; i < NumInClusters; ++i )
??CrossCallReturnLabel_81:
        SJMP	??ZDP_EndDeviceBindReq_5
// 1031   {
// 1032     *pBuf++ = LO_UINT16(InClusterList[i]);
??ZDP_EndDeviceBindReq_6:
        MOV	A,R2
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine0 & 0xFFFF
// 1033     if (protoVer != ZB_PROT_V1_0)  {
??CrossCallReturnLabel_0:
        JZ	??CrossCallReturnLabel_2
// 1034       *pBuf++ = HI_UINT16(InClusterList[i]);
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine1 & 0xFFFF
// 1035     }
// 1036   }
??CrossCallReturnLabel_2:
        INC	R2
??ZDP_EndDeviceBindReq_5:
        MOV	A,R2
        CLR	C
        SUBB	A,?V0 + 7
        JC	??ZDP_EndDeviceBindReq_6
// 1037 
// 1038   *pBuf++ = NumOutClusters; // Output cluster list
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOV	A,?V0 + 6
        LCALL	?Subroutine34 & 0xFFFF
// 1039   for ( i = 0; i < NumOutClusters; ++i )
??CrossCallReturnLabel_82:
        SJMP	??ZDP_EndDeviceBindReq_7
// 1040   {
// 1041     *pBuf++ = LO_UINT16(OutClusterList[i]);
??ZDP_EndDeviceBindReq_8:
        MOV	A,R2
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,#0x19
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine0 & 0xFFFF
// 1042     if (protoVer != ZB_PROT_V1_0)  {
??CrossCallReturnLabel_1:
        JZ	??CrossCallReturnLabel_3
// 1043       *pBuf++ = HI_UINT16(OutClusterList[i]);
        MOV	A,#0x19
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine1 & 0xFFFF
// 1044     }
// 1045   }
??CrossCallReturnLabel_3:
        INC	R2
??ZDP_EndDeviceBindReq_7:
        MOV	A,R2
        CLR	C
        SUBB	A,?V0 + 6
        JC	??ZDP_EndDeviceBindReq_8
// 1046 
// 1047   return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x20
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	R1,?V0 + 4
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        CFI EndBlock cfiBlock229
??ZDP_EndDeviceBindReq_3:
        REQUIRE ?Subroutine73
        ; // Fall through to label ?Subroutine73
// 1048 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine73:
        CFI Block cfiBlock230 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x3
        LJMP	??Subroutine69_0 & 0xFFFF
        CFI EndBlock cfiBlock230

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond231 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker234 Using cfiCommon1
        CFI (cfiPicker234) NoFunction
        CFI (cfiPicker234) Picker
        LCALL	?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_126:
        RET
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiPicker234

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
        CFI Block cfiCond235 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_83
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_81
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_85
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_82
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker240 Using cfiCommon1
        CFI (cfiPicker240) NoFunction
        CFI (cfiPicker240) Picker
        LCALL	??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_131:
        RET
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiPicker240

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond241 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker243 Using cfiCommon1
        CFI (cfiPicker243) NoFunction
        CFI (cfiPicker243) Picker
        LCALL	?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_125:
        MOV	R2,#0x0
        RET
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiPicker243

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond244 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_153
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_152
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker246 Using cfiCommon1
        CFI (cfiPicker246) NoFunction
        CFI (cfiPicker246) Picker
        MOV	DPTR,#??ZDP_TmpBuf
        LCALL	?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_118:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        ; Setup parameters for call to function NLME_GetProtocolVersion
        LJMP	?Subroutine67 & 0xFFFF
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiPicker246

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond247 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker250 Using cfiCommon1
        CFI (cfiPicker250) NoFunction
        CFI (cfiPicker250) Picker
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	R2,#(ZDP_TransID & 0xff)
        MOV	R3,#((ZDP_TransID >> 8) & 0xff)
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiPicker250

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond251 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker253 Using cfiCommon1
        CFI (cfiPicker253) NoFunction
        CFI (cfiPicker253) Picker
        LCALL	?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_122:
        LCALL	?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_108:
        RET
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiPicker253

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond254 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_2
        CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond255) CFA_SP SP+0
        CFI (cfiCond255) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond256 Using cfiCommon0
        CFI (cfiCond256) NoFunction
        CFI (cfiCond256) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_3
        CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond256) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond256) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond256) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond256) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond256) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond256) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond256) CFA_SP SP+0
        CFI (cfiCond256) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond257 Using cfiCommon0
        CFI (cfiCond257) NoFunction
        CFI (cfiCond257) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_39
        CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond257) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond257) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond257) CFA_SP SP+0
        CFI (cfiCond257) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker258 Using cfiCommon1
        CFI (cfiPicker258) NoFunction
        CFI (cfiPicker258) Picker
        MOV	DPH,A
        INC	DPTR
        LCALL	?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_130:
        RET
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiCond256
        CFI EndBlock cfiCond257
        CFI EndBlock cfiPicker258

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
        CFI Block cfiCond259 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond260 Using cfiCommon0
        CFI (cfiCond260) NoFunction
        CFI (cfiCond260) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_23
        CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond260) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond260) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond260) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond260) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond260) CFA_SP SP+0
        CFI (cfiCond260) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond261 Using cfiCommon0
        CFI (cfiCond261) NoFunction
        CFI (cfiCond261) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_2
        CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond261) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond261) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond261) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond261) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond261) CFA_SP SP+0
        CFI (cfiCond261) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond262 Using cfiCommon0
        CFI (cfiCond262) NoFunction
        CFI (cfiCond262) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_40
        CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond262) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond262) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond262) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond262) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond262) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond262) CFA_SP SP+0
        CFI (cfiCond262) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_1
        CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond263) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond263) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond263) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond263) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond263) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond263) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond263) CFA_SP SP+0
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_0
        CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond264) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond264) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond264) CFA_SP SP+0
        CFI (cfiCond264) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond265 Using cfiCommon0
        CFI (cfiCond265) NoFunction
        CFI (cfiCond265) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_3
        CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond265) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond265) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond265) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond265) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond265) CFA_SP SP+0
        CFI (cfiCond265) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond266 Using cfiCommon0
        CFI (cfiCond266) NoFunction
        CFI (cfiCond266) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_39
        CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond266) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond266) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond266) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond266) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond266) CFA_SP SP+0
        CFI (cfiCond266) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker267 Using cfiCommon1
        CFI (cfiPicker267) NoFunction
        CFI (cfiPicker267) Picker
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        CFI Block cfiCond268 Using cfiCommon0
        CFI (cfiCond268) NoFunction
        CFI (cfiCond268) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_82
        CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond268) CFA_SP SP+0
        CFI (cfiCond268) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond269 Using cfiCommon0
        CFI (cfiCond269) NoFunction
        CFI (cfiCond269) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_85
        CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond269) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond269) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond269) CFA_SP SP+0
        CFI (cfiCond269) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_83
        CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond270) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond270) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond270) CFA_SP SP+0
        CFI (cfiCond270) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond271 Using cfiCommon0
        CFI (cfiCond271) NoFunction
        CFI (cfiCond271) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_81
        CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond271) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond271) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond271) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond271) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond271) CFA_SP SP+0
        CFI (cfiCond271) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond272 Using cfiCommon0
        CFI (cfiCond272) NoFunction
        CFI (cfiCond272) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_84
        CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond272) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond272) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond272) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond272) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond272) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond272) CFA_SP SP+0
        CFI (cfiCond272) CFA_XSP16 add(XSP16, 18)
??Subroutine55_0:
        MOVX	@DPTR,A
        INC	DPTR
        MOV	?V0 + 2,DPL
        MOV	?V0 + 3,DPH
        RET
        CFI EndBlock cfiCond259
        CFI EndBlock cfiCond260
        CFI EndBlock cfiCond261
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiCond265
        CFI EndBlock cfiCond266
        CFI EndBlock cfiPicker267
        CFI EndBlock cfiCond268
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiCond271
        CFI EndBlock cfiCond272

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond273 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond274 Using cfiCommon0
        CFI (cfiCond274) NoFunction
        CFI (cfiCond274) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond274) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond274) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond274) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond274) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond274) CFA_SP SP+0
        CFI (cfiCond274) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker275 Using cfiCommon1
        CFI (cfiPicker275) NoFunction
        CFI (cfiPicker275) Picker
        LCALL	?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_121:
        LCALL	?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_104:
        XRL	A,?V0 + 5
        RET
        CFI EndBlock cfiCond273
        CFI EndBlock cfiCond274
        CFI EndBlock cfiPicker275

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
        CFI Block cfiCond276 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_1
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_0
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond277) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond277) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond278 Using cfiCommon0
        CFI (cfiCond278) NoFunction
        CFI (cfiCond278) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_2
        CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond278) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond278) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond278) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond278) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond278) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond278) CFA_SP SP+0
        CFI (cfiCond278) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond279 Using cfiCommon0
        CFI (cfiCond279) NoFunction
        CFI (cfiCond279) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_3
        CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond279) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond279) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond279) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond279) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond279) CFA_SP SP+0
        CFI (cfiCond279) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker280 Using cfiCommon1
        CFI (cfiPicker280) NoFunction
        CFI (cfiPicker280) Picker
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R3,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R1
        MOV	DPL,R3
        RET
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiCond278
        CFI EndBlock cfiCond279
        CFI EndBlock cfiPicker280

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond281 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond282 Using cfiCommon0
        CFI (cfiCond282) NoFunction
        CFI (cfiCond282) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_22
        CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond282) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond282) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond282) CFA_SP SP+0
        CFI (cfiCond282) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond283 Using cfiCommon0
        CFI (cfiCond283) NoFunction
        CFI (cfiCond283) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_1
        CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond283) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond283) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond283) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond283) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond283) CFA_SP SP+0
        CFI (cfiCond283) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond284 Using cfiCommon0
        CFI (cfiCond284) NoFunction
        CFI (cfiCond284) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_0
        CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond284) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond284) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond284) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond284) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond284) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond284) CFA_SP SP+0
        CFI (cfiCond284) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker285 Using cfiCommon1
        CFI (cfiPicker285) NoFunction
        CFI (cfiPicker285) Picker
        MOV	DPH,A
        LCALL	?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_129:
        MOV	A,#0x1
        RET
        CFI EndBlock cfiCond281
        CFI EndBlock cfiCond282
        CFI EndBlock cfiCond283
        CFI EndBlock cfiCond284
        CFI EndBlock cfiPicker285
// 1049 #endif // ZDO_ENDDEVICEBIND_REQUEST
// 1050 
// 1051 #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
// 1052 /*********************************************************************
// 1053  * @fn          ZDP_BindUnbindReq
// 1054  *
// 1055  * @brief       This builds and send a Bind_req or Unbind_req message
// 1056  *              Depending on the ClusterID. This function
// 1057  *              sends a unicast message to the local coordinator.
// 1058  *
// 1059  * @param       BindOrUnbind - either Bind_req or Unbind_req
// 1060  * @param       dstAddr - destination address of the message
// 1061  * @param       SourceAddr - source 64 bit address of the binding
// 1062  * @param       SrcEPIntf - Source endpoint/interface
// 1063  * @param       ClusterID - Binding cluster ID
// 1064  * @param       DestinationAddr - destination 64 bit addr of binding
// 1065  * @param       DstEPIntf - destination endpoint/interface
// 1066  * @param       SecurityEnable - Security Options
// 1067  *
// 1068  * @return      afStatus_t
// 1069  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1070 afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
ZDP_BindUnbindReq:
        CFI Block cfiBlock286 Using cfiCommon0
        CFI Function ZDP_BindUnbindReq
// 1071                               byte *SourceAddr, byte SrcEndPoint,
// 1072                               cId_t ClusterID,
// 1073                               zAddrType_t *destinationAddr, byte DstEndPoint,
// 1074                               byte SecurityEnable )
// 1075 {
        FUNCALL ZDP_BindUnbindReq, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_BindUnbindReq, osal_cpyExtAddr
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_BindUnbindReq, osal_cpyExtAddr
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_BindUnbindReq, osal_cpyExtAddr
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_BindUnbindReq, ??fillAndSend
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 3
        MOV	A,#-0x3
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        LCALL	?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
        MOV	A,#0x13
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine25_0 & 0xFFFF
// 1076   uint8 *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_67:
        LCALL	?Subroutine18 & 0xFFFF
// 1077   uint8  protoVer;
// 1078   byte len;
// 1079 
// 1080   protoVer = NLME_GetProtocolVersion();
??CrossCallReturnLabel_50:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	?V0 + 3,A
// 1081 
// 1082   if ( protoVer == ZB_PROT_V1_0 )
        MOV	A,#0x1
        XRL	A,?V0 + 3
        JNZ	??ZDP_BindUnbindReq_0
// 1083   {
// 1084     // SourceAddr + SrcEPIntf + ClusterID +  DestinationAddr + DstEPIntf.
// 1085     len = Z_EXTADDR_LEN + 1 + sizeof( uint8 ) + Z_EXTADDR_LEN + 1;
        MOV	?V0 + 2,#0x13
        SJMP	??ZDP_BindUnbindReq_1
// 1086   }
// 1087   else
// 1088   {
// 1089     // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
// 1090     len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
??ZDP_BindUnbindReq_0:
        MOV	?V0 + 2,#0xc
// 1091     if ( destinationAddr->addrMode == Addr64Bit )
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_24:
        XRL	A,#0x3
        JNZ	??ZDP_BindUnbindReq_2
// 1092       len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
        MOV	?V0 + 2,#0x15
        SJMP	??ZDP_BindUnbindReq_1
// 1093     else if ( destinationAddr->addrMode == AddrGroup )
??ZDP_BindUnbindReq_2:
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_144:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??ZDP_BindUnbindReq_1
// 1094       len += sizeof ( uint16 );
        MOV	?V0 + 2,#0xe
// 1095   }
// 1096 
// 1097   pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
??ZDP_BindUnbindReq_1:
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	R4,?V0 + 4
        MOV	R5,?V0 + 5
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1098   *pBuf++ = SrcEndPoint;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
        INC	DPTR
// 1099 
// 1100   *pBuf++ = LO_UINT16( ClusterID );
        MOV	A,R6
        LCALL	?Subroutine31 & 0xFFFF
// 1101   if ( protoVer != ZB_PROT_V1_0 )
??CrossCallReturnLabel_75:
        JZ	??ZDP_BindUnbindReq_3
// 1102   {
// 1103     *pBuf++ = HI_UINT16( ClusterID );
        MOV	A,R7
        LCALL	?Subroutine38 & 0xFFFF
// 1104 
// 1105     *pBuf++ = destinationAddr->addrMode;
??CrossCallReturnLabel_92:
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,#0x8
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        LCALL	?Subroutine8 & 0xFFFF
// 1106     if ( destinationAddr->addrMode == Addr64Bit )
??CrossCallReturnLabel_157:
        MOVX	A,@DPTR
        XRL	A,#0x3
        JZ	??ZDP_BindUnbindReq_3
// 1107     {
// 1108       pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
        ; Setup parameters for call to function osal_cpyExtAddr
// 1109       *pBuf = DstEndPoint;
// 1110     }
// 1111     else if ( destinationAddr->addrMode == AddrGroup )
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_25:
        XRL	A,#0x1
        JNZ	??ZDP_BindUnbindReq_4
// 1112     {
// 1113       *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_145:
        LCALL	?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_134:
        MOVX	@DPTR,A
// 1114       *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL	?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_73:
        SJMP	??ZDP_BindUnbindReq_5
// 1115     }
// 1116   }
// 1117   else
// 1118   {
// 1119     pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
??ZDP_BindUnbindReq_3:
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1120     *pBuf = DstEndPoint;
        MOV	A,#0x19
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	DPL,R2
        MOV	DPH,R3
??ZDP_BindUnbindReq_5:
        MOVX	@DPTR,A
// 1121   }
// 1122 
// 1123   FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
??ZDP_BindUnbindReq_4:
        MOV	A,#0x10
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV	R0,#?V0 + 6
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	R1,?V0 + 2
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        CLR	A
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        LJMP	?Subroutine73 & 0xFFFF
        CFI EndBlock cfiBlock286
// 1124 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
        CFI Block cfiCond287 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_156
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond288 Using cfiCommon0
        CFI (cfiCond288) NoFunction
        CFI (cfiCond288) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_73
        CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond288) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond288) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond288) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond288) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond288) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond288) CFA_SP SP+0
        CFI (cfiCond288) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond289 Using cfiCommon0
        CFI (cfiCond289) NoFunction
        CFI (cfiCond289) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_72
        CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond289) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond289) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond289) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond289) CFA_SP SP+0
        CFI (cfiCond289) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond290 Using cfiCommon0
        CFI (cfiCond290) NoFunction
        CFI (cfiCond290) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_41
        CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond290) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond290) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond290) CFA_SP SP+0
        CFI (cfiCond290) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond291 Using cfiCommon0
        CFI (cfiCond291) NoFunction
        CFI (cfiCond291) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond291) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond291) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond291) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond291) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond291) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond291) CFA_SP SP+0
        CFI (cfiCond291) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond292 Using cfiCommon0
        CFI (cfiCond292) NoFunction
        CFI (cfiCond292) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_42
        CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond292) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond292) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond292) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond292) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond292) CFA_SP SP+0
        CFI (cfiCond292) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond293 Using cfiCommon0
        CFI (cfiCond293) NoFunction
        CFI (cfiCond293) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_157
        CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond293) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond293) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond293) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond293) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond293) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond293) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond293) CFA_SP SP+0
        CFI (cfiCond293) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker294 Using cfiCommon1
        CFI (cfiPicker294) NoFunction
        CFI (cfiPicker294) Picker
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        RET
        CFI EndBlock cfiCond287
        CFI EndBlock cfiCond288
        CFI EndBlock cfiCond289
        CFI EndBlock cfiCond290
        CFI EndBlock cfiCond291
        CFI EndBlock cfiCond292
        CFI EndBlock cfiCond293
        CFI EndBlock cfiPicker294

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond295 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_92
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond296 Using cfiCommon0
        CFI (cfiCond296) NoFunction
        CFI (cfiCond296) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond296) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond296) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond296) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond296) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond296) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond296) CFA_SP SP+0
        CFI (cfiCond296) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker297 Using cfiCommon1
        CFI (cfiPicker297) NoFunction
        CFI (cfiPicker297) Picker
        LCALL	?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_128:
        RET
        CFI EndBlock cfiCond295
        CFI EndBlock cfiCond296
        CFI EndBlock cfiPicker297

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
        CFI Block cfiCond298 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond299 Using cfiCommon0
        CFI (cfiCond299) NoFunction
        CFI (cfiCond299) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_92
        CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond299) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond299) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond299) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond299) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond299) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond299) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond299) CFA_SP SP+0
        CFI (cfiCond299) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond300 Using cfiCommon0
        CFI (cfiCond300) NoFunction
        CFI (cfiCond300) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_74
        CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond300) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond300) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond300) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond300) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond300) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond300) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond300) CFA_SP SP+0
        CFI (cfiCond300) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond301 Using cfiCommon0
        CFI (cfiCond301) NoFunction
        CFI (cfiCond301) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_91
        CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond301) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond301) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond301) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond301) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond301) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond301) CFA_SP SP+0
        CFI (cfiCond301) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker302 Using cfiCommon1
        CFI (cfiPicker302) NoFunction
        CFI (cfiPicker302) Picker
        LCALL	?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_133:
        RET
        CFI EndBlock cfiCond298
        CFI EndBlock cfiCond299
        CFI EndBlock cfiCond300
        CFI EndBlock cfiCond301
        CFI EndBlock cfiPicker302

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
        CFI Block cfiCond303 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond304 Using cfiCommon0
        CFI (cfiCond304) NoFunction
        CFI (cfiCond304) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_75
        CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond304) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond304) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond304) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond304) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond304) CFA_SP SP+0
        CFI (cfiCond304) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond305 Using cfiCommon0
        CFI (cfiCond305) NoFunction
        CFI (cfiCond305) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_41
        CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond305) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond305) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond305) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond305) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond305) CFA_SP SP+0
        CFI (cfiCond305) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond306 Using cfiCommon0
        CFI (cfiCond306) NoFunction
        CFI (cfiCond306) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_42
        CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond306) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond306) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond306) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond306) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond306) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond306) CFA_SP SP+0
        CFI (cfiCond306) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond307 Using cfiCommon0
        CFI (cfiCond307) NoFunction
        CFI (cfiCond307) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_92
        CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond307) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond307) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond307) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond307) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond307) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond307) CFA_SP SP+0
        CFI (cfiCond307) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond308 Using cfiCommon0
        CFI (cfiCond308) NoFunction
        CFI (cfiCond308) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_74
        CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond308) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond308) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond308) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond308) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond308) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond308) CFA_SP SP+0
        CFI (cfiCond308) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond309 Using cfiCommon0
        CFI (cfiCond309) NoFunction
        CFI (cfiCond309) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_157
        CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond309) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond309) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond309) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond309) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond309) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond309) CFA_SP SP+0
        CFI (cfiCond309) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond310 Using cfiCommon0
        CFI (cfiCond310) NoFunction
        CFI (cfiCond310) Conditional ??CrossCallReturnLabel_132, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_156
        CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond310) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond310) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond310) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond310) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond310) CFA_SP SP+0
        CFI (cfiCond310) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker311 Using cfiCommon1
        CFI (cfiPicker311) NoFunction
        CFI (cfiPicker311) Picker
        MOVX	@DPTR,A
        INC	DPTR
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        RET
        CFI EndBlock cfiCond303
        CFI EndBlock cfiCond304
        CFI EndBlock cfiCond305
        CFI EndBlock cfiCond306
        CFI EndBlock cfiCond307
        CFI EndBlock cfiCond308
        CFI EndBlock cfiCond309
        CFI EndBlock cfiCond310
        CFI EndBlock cfiPicker311

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond312 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond313 Using cfiCommon0
        CFI (cfiCond313) NoFunction
        CFI (cfiCond313) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond313) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond313) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond313) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond313) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond313) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond313) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond313) CFA_SP SP+0
        CFI (cfiCond313) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker314 Using cfiCommon1
        CFI (cfiPicker314) NoFunction
        CFI (cfiPicker314) Picker
        MOVX	@DPTR,A
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond312
        CFI EndBlock cfiCond313
        CFI EndBlock cfiPicker314

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond315 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond316 Using cfiCommon0
        CFI (cfiCond316) NoFunction
        CFI (cfiCond316) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond316) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond316) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond316) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond316) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond316) CFA_SP SP+0
        CFI (cfiCond316) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker317 Using cfiCommon1
        CFI (cfiPicker317) NoFunction
        CFI (cfiPicker317) Picker
        LCALL	?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_127:
        MOV	A,#0x1
        XRL	A,?V0 + 3
        RET
        CFI EndBlock cfiCond315
        CFI EndBlock cfiCond316
        CFI EndBlock cfiPicker317

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond318 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond319 Using cfiCommon0
        CFI (cfiCond319) NoFunction
        CFI (cfiCond319) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond319) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond319) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond319) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond319) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond319) CFA_SP SP+0
        CFI (cfiCond319) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker320 Using cfiCommon1
        CFI (cfiPicker320) NoFunction
        CFI (cfiPicker320) Picker
        LCALL	?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_135:
        INC	DPTR
        RET
        CFI EndBlock cfiCond318
        CFI EndBlock cfiCond319
        CFI EndBlock cfiPicker320

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond321 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond322 Using cfiCommon0
        CFI (cfiCond322) NoFunction
        CFI (cfiCond322) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond322) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond322) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond322) CFA_SP SP+0
        CFI (cfiCond322) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker323 Using cfiCommon1
        CFI (cfiPicker323) NoFunction
        CFI (cfiPicker323) Picker
        LCALL	??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_115:
        RET
        CFI EndBlock cfiCond321
        CFI EndBlock cfiCond322
        CFI EndBlock cfiPicker323

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond324 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond325 Using cfiCommon0
        CFI (cfiCond325) NoFunction
        CFI (cfiCond325) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond325) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond325) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond325) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond325) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond325) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond325) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond325) CFA_SP SP+0
        CFI (cfiCond325) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker326 Using cfiCommon1
        CFI (cfiPicker326) NoFunction
        CFI (cfiPicker326) Picker
        MOV	DPTR,#??ZDP_TmpBuf
        CFI Block cfiCond327 Using cfiCommon0
        CFI (cfiCond327) NoFunction
        CFI (cfiCond327) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond327) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond327) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond327) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond327) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond327) CFA_SP SP+0
        CFI (cfiCond327) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond328 Using cfiCommon0
        CFI (cfiCond328) NoFunction
        CFI (cfiCond328) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond328) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond328) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond328) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond328) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond328) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond328) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond328) CFA_SP SP+0
        CFI (cfiCond328) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond329 Using cfiCommon0
        CFI (cfiCond329) NoFunction
        CFI (cfiCond329) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond329) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond329) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond329) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond329) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond329) CFA_SP SP+0
        CFI (cfiCond329) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond330 Using cfiCommon0
        CFI (cfiCond330) NoFunction
        CFI (cfiCond330) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond330) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond330) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond330) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond330) CFA_SP SP+0
        CFI (cfiCond330) CFA_XSP16 add(XSP16, 14)
??Subroutine25_0:
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        RET
        CFI EndBlock cfiCond324
        CFI EndBlock cfiCond325
        CFI EndBlock cfiPicker326
        CFI EndBlock cfiCond327
        CFI EndBlock cfiCond328
        CFI EndBlock cfiCond329
        CFI EndBlock cfiCond330

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond331 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond332 Using cfiCommon0
        CFI (cfiCond332) NoFunction
        CFI (cfiCond332) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond332) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond332) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond332) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond332) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond332) CFA_SP SP+0
        CFI (cfiCond332) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker333 Using cfiCommon1
        CFI (cfiPicker333) NoFunction
        CFI (cfiPicker333) Picker
        LCALL	??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_113:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond331
        CFI EndBlock cfiCond332
        CFI EndBlock cfiPicker333

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond334 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_157
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond335 Using cfiCommon0
        CFI (cfiCond335) NoFunction
        CFI (cfiCond335) Conditional ??CrossCallReturnLabel_156
        CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond335) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond335) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond335) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond335) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond335) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond335) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond335) CFA_SP SP+0
        CFI (cfiCond335) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker336 Using cfiCommon1
        CFI (cfiPicker336) NoFunction
        CFI (cfiPicker336) Picker
        MOV	DPL,R0
        MOV	DPH,R1
        LCALL	?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_110:
        LJMP	?Subroutine68 & 0xFFFF
        CFI EndBlock cfiCond334
        CFI EndBlock cfiCond335
        CFI EndBlock cfiPicker336
// 1125 #endif // ZDO_BIND_UNBIND_REQUEST
// 1126 
// 1127 /*********************************************************************
// 1128  * Network Management
// 1129  */
// 1130 
// 1131 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
// 1132 /*********************************************************************
// 1133  * @fn          ZDP_MgmtNwkDiscReq
// 1134  *
// 1135  * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
// 1136  *              function sends a unicast message.
// 1137  *
// 1138  * @param       dstAddr - destination address of the message
// 1139  * @param       ScanChannels - 32 bit address bit map
// 1140  * @param       StartIndex - Starting index within the reporting network
// 1141  *                           list
// 1142  * @param       SecurityEnable - Security Options
// 1143  *
// 1144  * @return      afStatus_t
// 1145  */
// 1146 afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
// 1147                                uint32 ScanChannels,
// 1148                                byte ScanDuration,
// 1149                                byte StartIndex,
// 1150                                byte SecurityEnable )
// 1151 {
// 1152   byte *pBuf = ZDP_TmpBuf;
// 1153   byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
// 1154 
// 1155   *pBuf++ = BREAK_UINT32( ScanChannels, 0 );
// 1156   *pBuf++ = BREAK_UINT32( ScanChannels, 1 );
// 1157   *pBuf++ = BREAK_UINT32( ScanChannels, 2 );
// 1158   *pBuf++ = BREAK_UINT32( ScanChannels, 3 );
// 1159 
// 1160   *pBuf++ = ScanDuration;
// 1161   *pBuf = StartIndex;
// 1162 
// 1163   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
// 1164 }
// 1165 #endif // ZDO_MGMT_NWKDISC_REQUEST
// 1166 
// 1167 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
// 1168 /*********************************************************************
// 1169  * @fn          ZDP_MgmtDirectJoinReq
// 1170  *
// 1171  * @brief       This builds and send a Mgmt_Direct_Join_req message. This
// 1172  *              function sends a unicast message.
// 1173  *
// 1174  * @param       dstAddr - destination address of the message
// 1175  * @param       deviceAddr - 64 bit IEEE Address
// 1176  * @param       SecurityEnable - Security Options
// 1177  *
// 1178  * @return      afStatus_t
// 1179  */
// 1180 afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
// 1181                                byte *deviceAddr,
// 1182                                byte capInfo,
// 1183                                byte SecurityEnable )
// 1184 {
// 1185   osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
// 1186   ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
// 1187 
// 1188   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
// 1189 }
// 1190 #endif // ZDO_MGMT_JOINDIRECT_REQUEST
// 1191 
// 1192 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
// 1193 /*********************************************************************
// 1194  * @fn          ZDP_MgmtPermitJoinReq
// 1195  *
// 1196  * @brief       This builds and send a Mgmt_Permit_Join_req message.
// 1197  *
// 1198  * @param       dstAddr - destination address of the message
// 1199  * @param       duration - Permit duration
// 1200  * @param       TcSignificance - Trust Center Significance
// 1201  *
// 1202  * @return      afStatus_t
// 1203  */
// 1204 afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
// 1205                                   byte TcSignificance, byte SecurityEnable )
// 1206 {
// 1207   // Build buffer
// 1208   ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
// 1209   ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
// 1210 
// 1211   // Send the message
// 1212   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
// 1213                       ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
// 1214 }
// 1215 #endif // ZDO_MGMT_PERMIT_JOIN_REQUEST
// 1216 
// 1217 /*********************************************************************
// 1218  * Network Management Responses
// 1219  */
// 1220 
// 1221 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1222 /*********************************************************************
// 1223  * @fn          ZDP_MgmtNwkDiscRsp
// 1224  *
// 1225  * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
// 1226  *              function sends a unicast message.
// 1227  *
// 1228  * @param       dstAddr - destination address of the message
// 1229  * @param       Status - message status (ZDP_SUCCESS or other)
// 1230  * @param       NetworkCount - Total number of networks found
// 1231  * @param       StartIndex - Starting index within the reporting network
// 1232  *                           list
// 1233  * @param       NetworkListCount - number of network lists included
// 1234  *                                 in this message
// 1235  * @param       NetworkList - List of network descriptors
// 1236  * @param       SecurityEnable - Security Options
// 1237  *
// 1238  * @return      afStatus_t
// 1239  */
// 1240 afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
// 1241                             byte Status,
// 1242                             byte NetworkCount,
// 1243                             byte StartIndex,
// 1244                             byte NetworkListCount,
// 1245                             networkDesc_t *NetworkList,
// 1246                             byte SecurityEnable )
// 1247 {
// 1248   byte *buf;
// 1249   byte *pBuf;
// 1250   byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
// 1251   byte idx;
// 1252 
// 1253   byte proVer = NLME_GetProtocolVersion();
// 1254 
// 1255   if ( proVer == ZB_PROT_V1_0 )
// 1256   {
// 1257     len += ((NetworkListCount - StartIndex) * ( ZDP_NETWORK_DISCRIPTOR_SIZE - 2 ));  // Four half bytes
// 1258   }
// 1259   else //Include the extended PanID
// 1260   {
// 1261     len += ((NetworkListCount - StartIndex) * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
// 1262   }
// 1263 
// 1264   buf = osal_mem_alloc( len+1 );
// 1265   if ( buf == NULL )
// 1266   {
// 1267     return afStatus_MEM_FAIL;
// 1268   }
// 1269 
// 1270   pBuf = buf+1;
// 1271 
// 1272   *pBuf++ = Status;
// 1273   *pBuf++ = NetworkCount;
// 1274   *pBuf++ = StartIndex;
// 1275   *pBuf++ = NetworkListCount;
// 1276 
// 1277   for ( idx = StartIndex; idx < (NetworkListCount - StartIndex); idx++ )
// 1278   {
// 1279     if ( proVer == ZB_PROT_V1_0 )
// 1280     {
// 1281       *pBuf++  = LO_UINT16( NetworkList->panId );            // PANID
// 1282       *pBuf++  = HI_UINT16( NetworkList->panId );
// 1283     }
// 1284     else
// 1285     {
// 1286       osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
// 1287       pBuf += Z_EXTADDR_LEN;
// 1288     }
// 1289 
// 1290     *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
// 1291     *pBuf    = NetworkList->stackProfile;                  // Stack profile
// 1292     *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
// 1293     *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
// 1294     *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
// 1295 
// 1296     if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
// 1297     {
// 1298       *pBuf++ = TRUE;                         // Permit Joining
// 1299     }
// 1300     else
// 1301     {
// 1302       *pBuf++ = FALSE;
// 1303     }
// 1304 
// 1305     NetworkList = NetworkList->nextDesc;    // Move to next list entry
// 1306   }
// 1307 
// 1308   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
// 1309 }
// 1310 #endif // ZDO_MGMT_NWKDISC_RESPONSE
// 1311 
// 1312 #if defined ( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
// 1313 /*********************************************************************
// 1314  * @fn          ZDP_MgmtLqiRsp
// 1315  *
// 1316  * @brief       This builds and send a Mgmt_Lqi_rsp message. This
// 1317  *              function sends a unicast message.
// 1318  *
// 1319  * @param       dstAddr - destination address of the message
// 1320  * @param       Status - message status (ZDP_SUCCESS or other)
// 1321  * @param       NeighborLqiEntries - Total number of entries found
// 1322  * @param       StartIndex - Starting index within the reporting list
// 1323  * @param       NeighborLqiCount - number of lists included
// 1324  *                                 in this message
// 1325  * @param       NeighborLqiList - List of NeighborLqiItems.  This list
// 1326  *                is the list to be sent, not the entire list
// 1327  * @param       SecurityEnable - true if secure
// 1328  *
// 1329  * @return      ZStatus_t
// 1330  */
// 1331 ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
// 1332                           byte Status,
// 1333                           byte NeighborLqiEntries,
// 1334                           byte StartIndex,
// 1335                           byte NeighborLqiCount,
// 1336                           ZDP_MgmtLqiItem_t* NeighborList,
// 1337                           byte SecurityEnable )
// 1338 {
// 1339   ZDP_MgmtLqiItem_t* list = NeighborList;
// 1340   byte *buf, *pBuf;
// 1341   byte len, x;
// 1342   byte proVer = NLME_GetProtocolVersion();
// 1343 
// 1344   if ( ZSuccess != Status )
// 1345   {
// 1346     ZDP_TmpBuf[0] = Status;
// 1347     return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
// 1348   }
// 1349 
// 1350   // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
// 1351   //  neighbor LQI data.
// 1352   len = (1 + 1 + 1 + 1) + (NeighborLqiCount * (( proVer == ZB_PROT_V1_0 ) ? ZDP_MGMTLQI_SIZE : ZDP_MGMTLQI_EXTENDED_SIZE));
// 1353 
// 1354   buf = osal_mem_alloc( len+1 );
// 1355   if ( buf == NULL )
// 1356   {
// 1357     return afStatus_MEM_FAIL;
// 1358   }
// 1359 
// 1360   pBuf = buf+1;
// 1361 
// 1362   *pBuf++ = Status;
// 1363   *pBuf++ = NeighborLqiEntries;
// 1364   *pBuf++ = StartIndex;
// 1365   *pBuf++ = NeighborLqiCount;
// 1366 
// 1367   for ( x = 0; x < NeighborLqiCount; x++ )
// 1368   {
// 1369     if ( proVer == ZB_PROT_V1_0 )
// 1370     {
// 1371       *pBuf++  = LO_UINT16( list->panID );            // PANID
// 1372       *pBuf++  = HI_UINT16( list->panID );
// 1373     }
// 1374     else
// 1375     {
// 1376       osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
// 1377       pBuf += Z_EXTADDR_LEN;
// 1378     }
// 1379 
// 1380     // EXTADDR
// 1381     pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
// 1382 
// 1383     // NWKADDR
// 1384     *pBuf++ = LO_UINT16( list->nwkAddr );
// 1385     *pBuf++ = HI_UINT16( list->nwkAddr );
// 1386 
// 1387     // DEVICETYPE
// 1388     *pBuf = list->devType;
// 1389 
// 1390     // RXONIDLE
// 1391     *pBuf |= (uint8)(list->rxOnIdle << 2);
// 1392 
// 1393     if ( proVer == ZB_PROT_V1_0 )
// 1394     {
// 1395       // RELATIONSHIP
// 1396       *pBuf |= (uint8)(list->relation << 3);
// 1397 
// 1398       // PERMITJOINING
// 1399       *pBuf++ |= (uint8)(list->permit << 5);
// 1400 
// 1401       // DEPTH
// 1402       *pBuf++ = list->depth;
// 1403     }
// 1404 
// 1405     else
// 1406     {
// 1407       // RELATIONSHIP
// 1408       *pBuf++ |= (uint8)(list->relation << 4);
// 1409 
// 1410       // PERMITJOINING
// 1411       *pBuf++ = (uint8)(list->permit);
// 1412 
// 1413       // DEPTH
// 1414       *pBuf++ = list->depth;
// 1415     }
// 1416 
// 1417     // LQI
// 1418     *pBuf++ = list->lqi;
// 1419 
// 1420     list++; // next list entry
// 1421   }
// 1422 
// 1423   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
// 1424 }
// 1425 #endif // ZDO_MGMT_LQI_RESPONSE && RTR_NWK
// 1426 
// 1427 #if defined ( ZDO_MGMT_RTG_RESPONSE )
// 1428 /*********************************************************************
// 1429  * @fn          ZDP_MgmtRtgRsp
// 1430  *
// 1431  * @brief       This builds and send a Mgmt_Rtg_rsp message. This
// 1432  *              function sends a unicast message.
// 1433  *
// 1434  * @param       dstAddr - destination address of the message
// 1435  * @param       Status - message status (ZDP_SUCCESS or other)
// 1436  * @param       RoutingTableEntries - Total number of entries
// 1437  * @param       StartIndex - Starting index within the reporting list
// 1438  * @param       RoutingTableListCount - number of entries included
// 1439  *                                      in this message
// 1440  * @param       RoutingTableList - List of Routing Table entries
// 1441  * @param       SecurityEnable - true to enable security for this message
// 1442  *
// 1443  * @return      ZStatus_t
// 1444  */
// 1445 ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
// 1446                             byte Status,
// 1447                             byte RoutingTableEntries,
// 1448                             byte StartIndex,
// 1449                             byte RoutingListCount,
// 1450                             rtgItem_t *RoutingTableList,
// 1451                             byte SecurityEnable )
// 1452 {
// 1453   byte *buf;
// 1454   byte *pBuf;
// 1455   // Status + RoutingTableEntries + StartIndex + RoutingListCount.
// 1456   byte len = 1 + 1 + 1 + 1;
// 1457   byte x;
// 1458 
// 1459   // Add an array for Routing List data
// 1460   len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
// 1461 
// 1462   buf = osal_mem_alloc( (short)(len+1) );
// 1463   if ( buf == NULL )
// 1464   {
// 1465     return afStatus_MEM_FAIL;
// 1466   }
// 1467 
// 1468   pBuf = buf+1;
// 1469 
// 1470   *pBuf++ = Status;
// 1471   *pBuf++ = RoutingTableEntries;
// 1472   *pBuf++ = StartIndex;
// 1473   *pBuf++ = RoutingListCount;
// 1474 
// 1475   for ( x = 0; x < RoutingListCount; x++ )
// 1476   {
// 1477     *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
// 1478     *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
// 1479     *pBuf++ = RoutingTableList->status;
// 1480     *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
// 1481     *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
// 1482     RoutingTableList++;    // Move to next list entry
// 1483   }
// 1484 
// 1485   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
// 1486 }
// 1487 #endif // ZDO_MGMT_RTG_RESPONSE
// 1488 
// 1489 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
// 1490 /*********************************************************************
// 1491  * @fn          ZDP_MgmtBindRsp
// 1492  *
// 1493  * @brief       This builds and send a Mgmt_Bind_rsp message. This
// 1494  *              function sends a unicast message.
// 1495  *
// 1496  * @param       dstAddr - destination address of the message
// 1497  * @param       Status - message status (ZDP_SUCCESS or other)
// 1498  * @param       BindingTableEntries - Total number of entries
// 1499  * @param       StartIndex - Starting index within the reporting list
// 1500  * @param       BindingTableListCount - number of entries included
// 1501  *                                 in this message
// 1502  * @param       BindingTableList - List of Binding Table entries
// 1503  * @param       SecurityEnable - Security Options
// 1504  *
// 1505  * @return      ZStatus_t
// 1506  */
// 1507 ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
// 1508                             byte Status,
// 1509                             byte BindingTableEntries,
// 1510                             byte StartIndex,
// 1511                             byte BindingTableListCount,
// 1512                             apsBindingItem_t *BindingTableList,
// 1513                             byte SecurityEnable )
// 1514 {
// 1515   uint8 *buf;
// 1516   uint8 *pBuf;
// 1517   uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
// 1518   uint8 len;    // Actual length varies due to different addrMode
// 1519   uint8 x;
// 1520   uint8 protoVer;
// 1521   byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
// 1522   byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
// 1523 
// 1524   protoVer = NLME_GetProtocolVersion();
// 1525 
// 1526   // Status + BindingTableEntries + StartIndex + BindingTableListCount.
// 1527   maxLen = 1 + 1 + 1 + 1;
// 1528   maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
// 1529   buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
// 1530 
// 1531   if ( buf == NULL )
// 1532   {
// 1533     return afStatus_MEM_FAIL;
// 1534   }
// 1535 
// 1536   pBuf = buf+1;
// 1537 
// 1538   *pBuf++ = Status;
// 1539   *pBuf++ = BindingTableEntries;
// 1540   *pBuf++ = StartIndex;
// 1541   *pBuf++ = BindingTableListCount;
// 1542 
// 1543   // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
// 1544   // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
// 1545   //           extZdpBindEntrySize     -- Version 1.1 extended address mode
// 1546   //           shortZdpBindEntrySize   -- Version 1.1 group address mode
// 1547 
// 1548   len = 1 + 1 + 1 + 1;
// 1549   for ( x = 0; x < BindingTableListCount; x++ )
// 1550   {
// 1551     pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
// 1552     *pBuf++ = BindingTableList->srcEP;
// 1553 
// 1554     // Cluster ID
// 1555     *pBuf++ = LO_UINT16( BindingTableList->clusterID );
// 1556 
// 1557     if ( protoVer != ZB_PROT_V1_0 )
// 1558     {
// 1559       *pBuf++ = HI_UINT16( BindingTableList->clusterID );
// 1560     }
// 1561 
// 1562     if ( protoVer == ZB_PROT_V1_0 )
// 1563     {
// 1564       len += ZDP_BINDINGENTRY_SIZE;
// 1565       pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
// 1566       *pBuf++ = BindingTableList->dstEP;
// 1567     }
// 1568     else
// 1569     {
// 1570       *pBuf++ = BindingTableList->dstAddr.addrMode;
// 1571       if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
// 1572       {
// 1573         len += extZdpBindEntrySize;
// 1574         pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
// 1575        *pBuf++ = BindingTableList->dstEP;
// 1576       }
// 1577       else
// 1578       {
// 1579         len += shortZdpBindEntrySize;
// 1580         *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
// 1581         *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
// 1582       }
// 1583     }
// 1584     BindingTableList++;    // Move to next list entry
// 1585   }
// 1586 
// 1587   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
// 1588 }
// 1589 #endif // ZDO_MGMT_BIND_RESPONSE && REFLECTOR
// 1590 
// 1591 /*********************************************************************
// 1592  * Callbacks from the APS layer
// 1593  */
// 1594 
// 1595 /*********************************************************************
// 1596  * @fn          ZDP_IncomingData
// 1597  *
// 1598  * @brief       This function indicates the transfer of a data PDU (ASDU)
// 1599  *              from the APS sub-layer to the ZDO.
// 1600  *
// 1601  * @param       pData - Incoming Message
// 1602  *
// 1603  * @return      none
// 1604  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1605 void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
ZDP_IncomingData:
        CFI Block cfiBlock337 Using cfiCommon0
        CFI Function ZDP_IncomingData
// 1606 {
        FUNCALL ZDP_IncomingData, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessAddrRsp
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessNodeDescRsp
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessPowerDescRsp
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessSimpleDescRsp
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessEPListRsp
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessBindUnbindRsp
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessUserDescRsp
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessServerDiscRsp
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ZDP_IncomingData, ??zdpProcessAddrReq
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessNodeDescReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessPowerDescReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessSimpleDescReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessActiveEPReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessMatchDescReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessEndDeviceBindReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessUserDescReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessUserDescSet
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessServerDiscReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDApp_InMsgCB
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        MOV	A,#-0xd
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 9
        MOV	A,#-0x9
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
// 1607   byte proVer = NLME_GetProtocolVersion();
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R4,A
// 1608   zAddrType_t addr;
// 1609   zAddrType_t *srcAddr;
// 1610   byte wasBroadcast;
// 1611   cId_t clusterID;
// 1612   byte asduLen;
// 1613   byte *asdu;
// 1614   byte SecurityUse;
// 1615   byte TransSeq;
// 1616 
// 1617   addr.addrMode = Addr16Bit;
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x2
        MOVX	@DPTR,A
// 1618   addr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_29:
        MOVX	@DPTR,A
// 1619   srcAddr = &addr;
// 1620   wasBroadcast = pData->wasBroadcast;
        MOV	A,R6
        ADD	A,#0xb
        LCALL	??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV	?V0 + 2,A
// 1621   clusterID = pData->clusterId;
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
// 1622   SecurityUse = pData->SecurityUse;
        MOV	A,R6
        ADD	A,#0xd
        LCALL	??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV	?V0 + 4,A
// 1623 
// 1624   if ( proVer == ZB_PROT_V1_0 )
        MOV	A,#0x1
        XRL	A,R4
        JNZ	??ZDP_IncomingData_0
// 1625   {
// 1626   asduLen = pData->cmd.DataLength;
        LCALL	?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_97:
        LCALL	?Subroutine42 & 0xFFFF
// 1627   asdu = pData->cmd.Data;
??CrossCallReturnLabel_99:
        LCALL	??Subroutine23_0 & 0xFFFF
// 1628   TransSeq = pData->cmd.TransSeqNumber;
??CrossCallReturnLabel_61:
        MOV	A,R6
        ADD	A,#0x12
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        SJMP	??ZDP_IncomingData_1
// 1629   }
// 1630   else
// 1631   {
// 1632     asduLen = pData->cmd.DataLength-1;
??ZDP_IncomingData_0:
        LCALL	?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_98:
        DEC	A
        LCALL	?Subroutine42 & 0xFFFF
// 1633     asdu = pData->cmd.Data+1;
??CrossCallReturnLabel_100:
        LCALL	??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOV	R4,DPL
        MOV	R5,DPH
// 1634     TransSeq = pData->cmd.Data[0];
        MOV	DPL,R0
        MOV	DPH,R1
??ZDP_IncomingData_1:
        MOVX	A,@DPTR
        MOV	R1,A
// 1635   }
// 1636 
// 1637   switch ( clusterID )
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?US_SWITCH_SPARSE
`?<Jumptable for ZDP_IncomingData>_0`:
        DW        4
        DW        0
        DW        1
        DW        ??ZDP_IncomingData_2
        DW        32768
        DW        32769
        DW        ??ZDP_IncomingData_3
        DW        32773
        DW        32774
        DW        ??ZDP_IncomingData_4
        DW        32800
        DW        32802
        DW        ??ZDP_IncomingData_5
        DW        14
        DW        2
        DW        ??ZDP_IncomingData_6
        DW        3
        DW        ??ZDP_IncomingData_7
        DW        4
        DW        ??ZDP_IncomingData_8
        DW        5
        DW        ??ZDP_IncomingData_9
        DW        6
        DW        ??ZDP_IncomingData_10
        DW        17
        DW        ??ZDP_IncomingData_11
        DW        20
        DW        ??ZDP_IncomingData_12
        DW        21
        DW        ??ZDP_IncomingData_13
        DW        32
        DW        ??ZDP_IncomingData_14
        DW        32770
        DW        ??ZDP_IncomingData_15
        DW        32771
        DW        ??ZDP_IncomingData_16
        DW        32772
        DW        ??ZDP_IncomingData_17
        DW        32785
        DW        ??ZDP_IncomingData_18
        DW        32789
        DW        ??ZDP_IncomingData_19
        DW        ??ZDP_IncomingData_20
// 1638   {
// 1639     // Response messages for our requests
// 1640 
// 1641 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1642     case NWK_addr_rsp:
// 1643     case IEEE_addr_rsp:
// 1644       ZDO_ProcessAddrRsp( srcAddr, clusterID, asdu, asduLen);
??ZDP_IncomingData_3:
        ; Setup parameters for call to function ZDO_ProcessAddrRsp
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	R1,?V0 + 3
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessAddrRsp & 0xffff)
        MOV	A,#((ZDO_ProcessAddrRsp >> 16) & 0xff)
??ZDP_IncomingData_21:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        LJMP	??ZDP_IncomingData_22 & 0xFFFF
// 1645       break;
// 1646 #endif
// 1647 
// 1648 #if defined ( ZDO_NODEDESC_REQUEST )
// 1649     case Node_Desc_rsp:
// 1650       ZDO_ProcessNodeDescRsp( srcAddr, asdu );
??ZDP_IncomingData_15:
        ; Setup parameters for call to function ZDO_ProcessNodeDescRsp
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessNodeDescRsp & 0xffff)
        MOV	A,#((ZDO_ProcessNodeDescRsp >> 16) & 0xff)
??ZDP_IncomingData_23:
        LCALL	?BCALL               ; Banked call to: DPTR()
        LJMP	??ZDP_IncomingData_22 & 0xFFFF
// 1651       break;
// 1652 #endif
// 1653 
// 1654 #if defined ( ZDO_POWERDESC_REQUEST )
// 1655     case Power_Desc_rsp:
// 1656       ZDO_ProcessPowerDescRsp( srcAddr, asdu );
??ZDP_IncomingData_16:
        ; Setup parameters for call to function ZDO_ProcessPowerDescRsp
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessPowerDescRsp & 0xffff)
        MOV	A,#((ZDO_ProcessPowerDescRsp >> 16) & 0xff)
        SJMP	??ZDP_IncomingData_23
// 1657       break;
// 1658 #endif
// 1659 
// 1660 #if defined ( ZDO_SIMPLEDESC_REQUEST )
// 1661     case Simple_Desc_rsp:
// 1662       ZDO_ProcessSimpleDescRsp( srcAddr, asdu );
??ZDP_IncomingData_17:
        ; Setup parameters for call to function ZDO_ProcessSimpleDescRsp
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessSimpleDescRsp & 0xffff)
        MOV	A,#((ZDO_ProcessSimpleDescRsp >> 16) & 0xff)
??ZDP_IncomingData_24:
        SJMP	??ZDP_IncomingData_23
// 1663       break;
// 1664 #endif
// 1665 
// 1666 #if defined ( ZDO_MATCH_REQUEST ) || defined ( ZDO_ACTIVEEP_REQUEST )
// 1667     case Match_Desc_rsp:
// 1668     case Active_EP_rsp:
// 1669       ZDO_ProcessEPListRsp( srcAddr, clusterID, asdu );
??ZDP_IncomingData_4:
        ; Setup parameters for call to function ZDO_ProcessEPListRsp
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessEPListRsp & 0xffff)
        MOV	A,#((ZDO_ProcessEPListRsp >> 16) & 0xff)
        SJMP	??ZDP_IncomingData_21
        CFI CFA_XSP16 add(XSP16, 22)
// 1670       break;
// 1671 #endif
// 1672 
// 1673 #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
// 1674   #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
// 1675     case Bind_rsp:
// 1676     case Unbind_rsp:
// 1677   #endif
// 1678   #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST )
// 1679     case End_Device_Bind_rsp:
// 1680   #endif
// 1681       ZDO_ProcessBindUnbindRsp( srcAddr, clusterID, *asdu, TransSeq );
??ZDP_IncomingData_5:
        ; Setup parameters for call to function ZDO_ProcessBindUnbindRsp
        MOV	A,R1
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessBindUnbindRsp & 0xffff)
        MOV	A,#((ZDO_ProcessBindUnbindRsp >> 16) & 0xff)
??ZDP_IncomingData_25:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        LJMP	??ZDP_IncomingData_22 & 0xFFFF
// 1682       break;
// 1683 #endif
// 1684 
// 1685 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
// 1686     case Mgmt_NWK_Disc_rsp:
// 1687       ZDO_ProcessMgmNwkDiscRsp( srcAddr, asdu, SecurityUse );
// 1688       break;
// 1689 #endif
// 1690 
// 1691 #if defined ( ZDO_MGMT_LQI_REQUEST )
// 1692     case Mgmt_Lqi_rsp:
// 1693       ZDO_ProcessMgmtLqiRsp( srcAddr, asdu, SecurityUse );
// 1694       break;
// 1695 #endif
// 1696 
// 1697 #if defined ( ZDO_MGMT_RTG_REQUEST )
// 1698     case Mgmt_Rtg_rsp:
// 1699       ZDO_ProcessMgmtRtgRsp( srcAddr, asdu, SecurityUse );
// 1700       break;
// 1701 #endif
// 1702 
// 1703 #if defined ( ZDO_MGMT_BIND_REQUEST )
// 1704     case Mgmt_Bind_rsp:
// 1705       ZDO_ProcessMgmtBindRsp( srcAddr, asdu, SecurityUse );
// 1706       break;
// 1707 #endif
// 1708 
// 1709 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
// 1710     case Mgmt_Direct_Join_rsp:
// 1711       ZDO_ProcessMgmtDirectJoinRsp( srcAddr, *asdu, SecurityUse );
// 1712       break;
// 1713 #endif
// 1714 
// 1715 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
// 1716     case Mgmt_Leave_rsp:
// 1717       ZDO_ProcessMgmtLeaveRsp( srcAddr, *asdu, SecurityUse );
// 1718       break;
// 1719 #endif
// 1720 
// 1721 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
// 1722     case Mgmt_Permit_Join_rsp:
// 1723       ZDO_ProcessMgmtPermitJoinRsp( srcAddr, *asdu, SecurityUse );
// 1724       break;
// 1725 #endif
// 1726 
// 1727 #if defined ( ZDO_USERDESC_REQUEST )
// 1728     case User_Desc_rsp:
// 1729       ZDO_ProcessUserDescRsp( srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_18:
        ; Setup parameters for call to function ZDO_ProcessUserDescRsp
        MOV	R1,?V0 + 4
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessUserDescRsp & 0xffff)
        MOV	A,#((ZDO_ProcessUserDescRsp >> 16) & 0xff)
        LJMP	??ZDP_IncomingData_23 & 0xFFFF
// 1730       break;
// 1731 #endif
// 1732 
// 1733 #if defined ( ZDO_SERVERDISC_REQUEST )
// 1734     case Server_Discovery_rsp:
// 1735       ZDO_ProcessServerDiscRsp( srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_19:
        ; Setup parameters for call to function ZDO_ProcessServerDiscRsp
        MOV	R1,?V0 + 4
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessServerDiscRsp & 0xffff)
        MOV	A,#((ZDO_ProcessServerDiscRsp >> 16) & 0xff)
        SJMP	??ZDP_IncomingData_24
// 1736       break;
// 1737 #endif
// 1738 
// 1739 #if defined( ZDO_CACHE )
// 1740     case Discovery_Cache_rsp:
// 1741     case Discovery_store_rsp:
// 1742     case Remove_node_cache_rsp:
// 1743     case Find_node_cache_rsp:
// 1744     case Node_Desc_store_rsp:
// 1745     case Power_Desc_store_rsp:
// 1746     case Active_EP_store_rsp:
// 1747     case Simple_Desc_store_rsp:
// 1748     case Mgmt_Cache_rsp:
// 1749 #if ( CACHE_DEV_MAX == 0 )
// 1750       ZDCacheProcessRsp( srcAddr, asdu, asduLen, clusterID, TransSeq );
// 1751 #endif
// 1752       break;
// 1753 #endif
// 1754 
// 1755     // Request messages
// 1756     case NWK_addr_req:
// 1757     case IEEE_addr_req:
// 1758       zdpProcessAddrReq( TransSeq, srcAddr, asdu, clusterID, SecurityUse );
??ZDP_IncomingData_2:
        ; Setup parameters for call to function zdpProcessAddrReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	?V0 + 0,R2
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??zdpProcessAddrReq & 0xffff)
        MOV	A,#((??zdpProcessAddrReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        LJMP	??ZDP_IncomingData_22 & 0xFFFF
// 1759       break;
// 1760 
// 1761     case Node_Desc_req:
// 1762       ZDO_ProcessNodeDescReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_6:
        ; Setup parameters for call to function ZDO_ProcessNodeDescReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessNodeDescReq & 0xffff)
        MOV	A,#((ZDO_ProcessNodeDescReq >> 16) & 0xff)
        SJMP	??ZDP_IncomingData_25
        CFI CFA_XSP16 add(XSP16, 22)
// 1763       break;
// 1764 
// 1765     case Power_Desc_req:
// 1766       ZDO_ProcessPowerDescReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_7:
        ; Setup parameters for call to function ZDO_ProcessPowerDescReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessPowerDescReq & 0xffff)
        MOV	A,#((ZDO_ProcessPowerDescReq >> 16) & 0xff)
??ZDP_IncomingData_26:
        LJMP	??ZDP_IncomingData_25 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 22)
// 1767       break;
// 1768 
// 1769     case Simple_Desc_req:
// 1770       ZDO_ProcessSimpleDescReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_8:
        ; Setup parameters for call to function ZDO_ProcessSimpleDescReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessSimpleDescReq & 0xffff)
        MOV	A,#((ZDO_ProcessSimpleDescReq >> 16) & 0xff)
        LJMP	??ZDP_IncomingData_25 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 22)
// 1771       break;
// 1772 
// 1773     case Active_EP_req:
// 1774       ZDO_ProcessActiveEPReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_9:
        ; Setup parameters for call to function ZDO_ProcessActiveEPReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessActiveEPReq & 0xffff)
        MOV	A,#((ZDO_ProcessActiveEPReq >> 16) & 0xff)
        SJMP	??ZDP_IncomingData_26
        CFI CFA_XSP16 add(XSP16, 22)
// 1775       break;
// 1776 
// 1777     case Match_Desc_req:
// 1778       ZDO_ProcessMatchDescReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_10:
        ; Setup parameters for call to function ZDO_ProcessMatchDescReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessMatchDescReq & 0xffff)
        MOV	A,#((ZDO_ProcessMatchDescReq >> 16) & 0xff)
        LJMP	??ZDP_IncomingData_25 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 22)
// 1779       break;
// 1780 
// 1781 #if defined ( ZDO_COORDINATOR )
// 1782     case End_Device_Bind_req:
// 1783       ZDO_ProcessEndDeviceBindReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_14:
        ; Setup parameters for call to function ZDO_ProcessEndDeviceBindReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessEndDeviceBindReq & 0xffff)
        MOV	A,#((ZDO_ProcessEndDeviceBindReq >> 16) & 0xff)
        LJMP	??ZDP_IncomingData_25 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 22)
// 1784       break;
// 1785 #endif
// 1786 
// 1787 #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
// 1788     case Bind_req:
// 1789     case Unbind_req:
// 1790       ZDO_ProcessBindUnbindReq( TransSeq, srcAddr, clusterID, asdu, SecurityUse );
// 1791       break;
// 1792 #endif
// 1793 
// 1794 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1795     case Mgmt_NWK_Disc_req:
// 1796       ZDO_ProcessMgmtNwkDiscReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1797       break;
// 1798 #endif
// 1799 
// 1800 #if defined ( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
// 1801     case Mgmt_Lqi_req:
// 1802       ZDO_ProcessMgmtLqiReq( TransSeq, srcAddr, *asdu, SecurityUse );
// 1803       break;
// 1804 #endif
// 1805 
// 1806 #if defined ( ZDO_MGMT_RTG_RESPONSE ) && defined ( RTR_NWK )
// 1807     case Mgmt_Rtg_req:
// 1808       ZDO_ProcessMgmtRtgReq( TransSeq, srcAddr, *asdu, SecurityUse );
// 1809       break;
// 1810 #endif
// 1811 
// 1812 #if defined ( ZDO_MGMT_BIND_RESPONSE )
// 1813     case Mgmt_Bind_req:
// 1814       ZDO_ProcessMgmtBindReq( TransSeq, srcAddr, *asdu, SecurityUse );
// 1815       break;
// 1816 #endif
// 1817 
// 1818 #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && defined ( RTR_NWK )
// 1819     case Mgmt_Direct_Join_req:
// 1820       ZDO_ProcessMgmtDirectJoinReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1821       break;
// 1822 #endif
// 1823 
// 1824 #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
// 1825     case Mgmt_Leave_req:
// 1826       ZDO_ProcessMgmtLeaveReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1827       break;
// 1828 #endif
// 1829 
// 1830 #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && defined ( RTR_NWK )
// 1831     case Mgmt_Permit_Join_req:
// 1832       ZDO_ProcessMgmtPermitJoinReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1833       break;
// 1834 #endif
// 1835 
// 1836 #if defined ( ZDO_USERDESC_RESPONSE )
// 1837     case User_Desc_req:
// 1838       ZDO_ProcessUserDescReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_11:
        ; Setup parameters for call to function ZDO_ProcessUserDescReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessUserDescReq & 0xffff)
        MOV	A,#((ZDO_ProcessUserDescReq >> 16) & 0xff)
        LJMP	??ZDP_IncomingData_25 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 22)
// 1839       break;
// 1840 #endif
// 1841 
// 1842 #if defined ( ZDO_USERDESCSET_RESPONSE )
// 1843     case User_Desc_set:
// 1844       ZDO_ProcessUserDescSet( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_12:
        ; Setup parameters for call to function ZDO_ProcessUserDescSet
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessUserDescSet & 0xffff)
        MOV	A,#((ZDO_ProcessUserDescSet >> 16) & 0xff)
        LJMP	??ZDP_IncomingData_25 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 22)
// 1845       break;
// 1846 #endif
// 1847 
// 1848 #if defined ( ZDO_SERVERDISC_RESPONSE )
// 1849     case Server_Discovery_req:
// 1850       ZDO_ProcessServerDiscReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_13:
        ; Setup parameters for call to function ZDO_ProcessServerDiscReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessServerDiscReq & 0xffff)
        MOV	A,#((ZDO_ProcessServerDiscReq >> 16) & 0xff)
        LJMP	??ZDP_IncomingData_25 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 22)
// 1851       break;
// 1852 #endif
// 1853 
// 1854 #if defined ( ZDO_ENDDEVICE_ANNCE ) && defined ( RTR_NWK )
// 1855     case End_Device_annce:
// 1856       ZDO_ProcessEndDeviceAnnce( TransSeq, srcAddr, asdu, SecurityUse );
// 1857       break;
// 1858 #endif
// 1859 
// 1860 #if defined( ZDO_CACHE )
// 1861     case Discovery_Cache_req:
// 1862     case Discovery_store_req:
// 1863     case Remove_node_cache_req:
// 1864     case Find_node_cache_req:
// 1865     case Node_Desc_store_req:
// 1866     case Power_Desc_store_req:
// 1867     case Active_EP_store_req:
// 1868     case Simple_Desc_store_req:
// 1869     case Mgmt_Cache_req:
// 1870 #if ( CACHE_DEV_MAX > 0 )
// 1871       ZDCacheProcessReq(srcAddr,asdu,asduLen,clusterID,TransSeq,SecurityUse);
// 1872 #endif
// 1873       break;
// 1874 #endif
// 1875 
// 1876     case Complex_Desc_req:
// 1877     case Complex_Desc_rsp:
// 1878     default:
// 1879       ZDApp_InMsgCB( TransSeq, srcAddr, wasBroadcast,
// 1880                      clusterID, asduLen, asdu, SecurityUse );
??ZDP_IncomingData_20:
        ; Setup parameters for call to function ZDApp_InMsgCB
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	R5,?V0 + 3
        MOV	R4,?V0 + 2
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDApp_InMsgCB & 0xffff)
        MOV	A,#((ZDApp_InMsgCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x5
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
// 1881       break;
// 1882   }
// 1883 }
??ZDP_IncomingData_22:
        MOV	A,#0x9
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	R7,#0x5
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock337

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond338 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_100
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond339 Using cfiCommon0
        CFI (cfiCond339) NoFunction
        CFI (cfiCond339) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond339) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond339) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond339) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond339) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond339) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond339) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond339) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond339) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond339) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond339) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond339) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond339) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond339) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond339) CFA_SP SP+0
        CFI (cfiCond339) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker340 Using cfiCommon1
        CFI (cfiPicker340) NoFunction
        CFI (cfiPicker340) Picker
        MOV	?V0 + 3,A
        MOV	A,R6
        ADD	A,#0x15
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond338
        CFI EndBlock cfiCond339
        CFI EndBlock cfiPicker340

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond341 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond342 Using cfiCommon0
        CFI (cfiCond342) NoFunction
        CFI (cfiCond342) Conditional ??CrossCallReturnLabel_97
        CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond342) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond342) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond342) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond342) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond342) CFA_SP SP+0
        CFI (cfiCond342) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker343 Using cfiCommon1
        CFI (cfiPicker343) NoFunction
        CFI (cfiPicker343) Picker
        MOV	A,R6
        ADD	A,#0x13
        CFI Block cfiCond344 Using cfiCommon0
        CFI (cfiCond344) NoFunction
        CFI (cfiCond344) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond344) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond344) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond344) CFA_SP SP+0
        CFI (cfiCond344) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond345 Using cfiCommon0
        CFI (cfiCond345) NoFunction
        CFI (cfiCond345) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond345) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond345) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond345) CFA_SP SP+0
        CFI (cfiCond345) CFA_XSP16 add(XSP16, 22)
??Subroutine41_0:
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond341
        CFI EndBlock cfiCond342
        CFI EndBlock cfiPicker343
        CFI EndBlock cfiCond344
        CFI EndBlock cfiCond345

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond346 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond347 Using cfiCommon0
        CFI (cfiCond347) NoFunction
        CFI (cfiCond347) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond347) CFA_SP SP+0
        CFI (cfiCond347) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker348 Using cfiCommon1
        CFI (cfiPicker348) NoFunction
        CFI (cfiPicker348) Picker
        MOV	DPTR,#??ZDP_TmpBuf
        CFI Block cfiCond349 Using cfiCommon0
        CFI (cfiCond349) NoFunction
        CFI (cfiCond349) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond349) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond349) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond349) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond349) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond349) CFA_SP SP+0
        CFI (cfiCond349) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond350 Using cfiCommon0
        CFI (cfiCond350) NoFunction
        CFI (cfiCond350) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond350) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond350) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond350) CFA_SP SP+0
        CFI (cfiCond350) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond351 Using cfiCommon0
        CFI (cfiCond351) NoFunction
        CFI (cfiCond351) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond351) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond351) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond351) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond351) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond351) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond351) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond351) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond351) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond351) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond351) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond351) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond351) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond351) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond351) CFA_SP SP+0
        CFI (cfiCond351) CFA_XSP16 add(XSP16, 22)
??Subroutine23_0:
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        RET
        CFI EndBlock cfiCond346
        CFI EndBlock cfiCond347
        CFI EndBlock cfiPicker348
        CFI EndBlock cfiCond349
        CFI EndBlock cfiCond350
        CFI EndBlock cfiCond351

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond352 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond353 Using cfiCommon0
        CFI (cfiCond353) NoFunction
        CFI (cfiCond353) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond353) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond353) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond353) CFA_SP SP+0
        CFI (cfiCond353) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond354 Using cfiCommon0
        CFI (cfiCond354) NoFunction
        CFI (cfiCond354) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond354) CFA_SP SP+0
        CFI (cfiCond354) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond355 Using cfiCommon0
        CFI (cfiCond355) NoFunction
        CFI (cfiCond355) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond355) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond355) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond355) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond355) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond355) CFA_SP SP+0
        CFI (cfiCond355) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker356 Using cfiCommon1
        CFI (cfiPicker356) NoFunction
        CFI (cfiPicker356) Picker
        MOV	DPTR,#??ZDP_TmpBuf
        CFI Block cfiCond357 Using cfiCommon0
        CFI (cfiCond357) NoFunction
        CFI (cfiCond357) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond357) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond357) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond357) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond357) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond357) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond357) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond357) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond357) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond357) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond357) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond357) CFA_SP SP+0
        CFI (cfiCond357) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond358 Using cfiCommon0
        CFI (cfiCond358) NoFunction
        CFI (cfiCond358) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond358) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond358) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond358) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond358) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond358) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond358) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond358) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond358) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond358) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond358) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond358) CFA_SP SP+0
        CFI (cfiCond358) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond359 Using cfiCommon0
        CFI (cfiCond359) NoFunction
        CFI (cfiCond359) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond359) CFA_SP SP+0
        CFI (cfiCond359) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond360 Using cfiCommon0
        CFI (cfiCond360) NoFunction
        CFI (cfiCond360) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond360) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond360) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond360) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond360) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond360) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond360) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond360) CFA_SP SP+0
        CFI (cfiCond360) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond361 Using cfiCommon0
        CFI (cfiCond361) NoFunction
        CFI (cfiCond361) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond361) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond361) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond361) CFA_SP SP+0
        CFI (cfiCond361) CFA_XSP16 add(XSP16, 22)
??Subroutine14_0:
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        RET
        CFI EndBlock cfiCond352
        CFI EndBlock cfiCond353
        CFI EndBlock cfiCond354
        CFI EndBlock cfiCond355
        CFI EndBlock cfiPicker356
        CFI EndBlock cfiCond357
        CFI EndBlock cfiCond358
        CFI EndBlock cfiCond359
        CFI EndBlock cfiCond360
        CFI EndBlock cfiCond361

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond362 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond363 Using cfiCommon0
        CFI (cfiCond363) NoFunction
        CFI (cfiCond363) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond363) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond363) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond363) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond363) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond363) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond363) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond363) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond363) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond363) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond363) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond363) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond363) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond363) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond363) CFA_SP SP+0
        CFI (cfiCond363) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker364 Using cfiCommon1
        CFI (cfiPicker364) NoFunction
        CFI (cfiPicker364) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        RET
        CFI EndBlock cfiCond362
        CFI EndBlock cfiCond363
        CFI EndBlock cfiPicker364

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDP_TmpBuf>`:
        DW ??ZDP_Buf + 1H

        END
// 1884 
// 1885 /*********************************************************************
// 1886 *********************************************************************/
// 1887 
// 
// 4 741 bytes in segment BANKED_CODE
//     1 byte  in segment CODE_C
//     2 bytes in segment XDATA_I
//     2 bytes in segment XDATA_ID
//    82 bytes in segment XDATA_Z
// 
// 4 744 bytes of CODE  memory
//    84 bytes of XDATA memory
//
//Errors: none
//Warnings: none
