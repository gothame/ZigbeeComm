##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   17/Oct/2013  21:26:02 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC2430 #
#                          EB\hal_adc.c                                      #
#    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCoor #
#                          d.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS       #
#                          "-DCONST=const __code" -DGENERIC=__generic) -f    #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConfig. #
#                          cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800     #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\Source\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mt\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2430EB\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\osal\mcu #
#                          \ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC #
#                          2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\osal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ #
#                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects #
#                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. #
#                          \Components\stack\af\ -I                          #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\stack\nw #
#                          k\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C #
#                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2430DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ #
#                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\zmac\f8w #
#                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                       #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          mac\high_level\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf03\ -I                #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\low_ #
#                          level\srf03\single_chip\ -D CC2430EB -D ZTOOL_P1  #
#                          -D MT_TASK -D MT_ZDO_FUNC -lC                     #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\ -lA            #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\CoordinatorEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC2430 #
#                          EB\hal_adc.c                                      #
#    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\hal_adc.lst     #
#    Object file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\Obj\hal_adc.r51      #
#                                                                            #
#                                                                            #
##############################################################################

E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC2430EB\hal_adc.c
      1          /**************************************************************************************************
      2              Filename:       hal_adc.c
      3              Revised:        $Date: 2007-03-23 10:59:45 -0700 (Fri, 23 Mar 2007) $
      4              Revision:       $Revision: 13836 $
      5          
      6              Description:
      7          
      8              This file contains the interface to the HAL ADC.
      9          
     10              Copyright (c) 2006 by Texas Instruments, Inc.
     11              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     12              derivative works, modify, distribute, perform, display or sell this
     13              software and/or its documentation for any purpose is prohibited
     14              without the express written consent of Texas Instruments, Inc.
     15          **************************************************************************************************/
     16          
     17          /**************************************************************************************************
     18           *                                           INCLUDES
     19           **************************************************************************************************/
     20          #include  "hal_mcu.h"

   \                                 In segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xb5
   \   unsigned char volatile __sfr ADCCON2
   \                     ADCCON2:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1
     21          #include  "hal_defs.h"
     22          #include  "hal_types.h"
     23          #include  "hal_adc.h"
     24          
     25          /**************************************************************************************************
     26           *                                            CONSTANTS
     27           **************************************************************************************************/
     28          #define HAL_ADC_EOC         0x80    /* End of Conversion bit */
     29          #define HAL_ADC_START       0x40    /* Starts Conversion */
     30          
     31          #define HAL_ADC_STSEL_EXT   0x00    /* External Trigger */
     32          #define HAL_ADC_STSEL_FULL  0x10    /* Full Speed, No Trigger */
     33          #define HAL_ADC_STSEL_T1C0  0x20    /* Timer1, Channel 0 Compare Event Trigger */
     34          #define HAL_ADC_STSEL_ST    0x30    /* ADCCON1.ST =1 Trigger */
     35          
     36          #define HAL_ADC_RAND_NORM   0x00    /* Normal Operation */
     37          #define HAL_ADC_RAND_LFSR   0x04    /* Clock LFSR */
     38          #define HAL_ADC_RAND_SEED   0x08    /* Seed Modulator */
     39          #define HAL_ADC_RAND_STOP   0x0c    /* Stop Random Generator */
     40          #define HAL_ADC_RAND_BITS   0x0c    /* Bits [3:2] */
     41          
     42          #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
     43          #define HAL_ADC_REF_AIN7    0x40    /* AIN7 Reference */
     44          #define HAL_ADC_REF_AVDD    0x80    /* AVDD_SOC Pin Reference */
     45          #define HAL_ADC_REF_DIFF    0xc0    /* AIN7,AIN6 Differential Reference */
     46          #define HAL_ADC_REF_BITS    0xc0    /* Bits [7:6] */
     47          
     48          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     49          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     50          #define HAL_ADC_DEC_256     0x20    /* Decimate by 256 : 12-bit resolution */
     51          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     52          #define HAL_ADC_DEC_BITS    0x30    /* Bits [5:4] */
     53          
     54          #define HAL_ADC_CHN_AIN0    0x00    /* AIN0 */
     55          #define HAL_ADC_CHN_AIN1    0x01    /* AIN1 */
     56          #define HAL_ADC_CHN_AIN2    0x02    /* AIN2 */
     57          #define HAL_ADC_CHN_AIN3    0x03    /* AIN3 */
     58          #define HAL_ADC_CHN_AIN4    0x04    /* AIN4 */
     59          #define HAL_ADC_CHN_AIN5    0x05    /* AIN5 */
     60          #define HAL_ADC_CHN_AIN6    0x06    /* AIN6 */
     61          #define HAL_ADC_CHN_AIN7    0x07    /* AIN7 */
     62          #define HAL_ADC_CHN_A0A1    0x08    /* AIN0,AIN1 */
     63          #define HAL_ADC_CHN_A2A3    0x09    /* AIN2,AIN3 */
     64          #define HAL_ADC_CHN_A4A5    0x0a    /* AIN4,AIN5 */
     65          #define HAL_ADC_CHN_A6A7    0x0b    /* AIN6,AIN7 */
     66          #define HAL_ADC_CHN_GND     0x0c    /* GND */
     67          #define HAL_ADC_CHN_VREF    0x0d    /* Positive voltage reference */
     68          #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
     69          #define HAL_ADC_CHN_VDD3    0x0f    /* VDD/3 */
     70          #define HAL_ADC_CHN_BITS    0x0f    /* Bits [3:0] */
     71          
     72          #define HAL_ADC_STSEL       HAL_ADC_STSEL_ST
     73          #define HAL_ADC_RAND_GEN    HAL_ADC_RAND_STOP
     74          #define HAL_ADC_REF_VOLT    HAL_ADC_REF_AVDD
     75          #define HAL_ADC_DEC_RATE    HAL_ADC_DEC_064
     76          #define HAL_ADC_SCHN        HAL_ADC_CHN_VDD3
     77          #define HAL_ADC_ECHN        HAL_ADC_CHN_GND
     78          
     79          
     80          /* Vdd limit values */

   \                                 In segment CODE_C, align 1
     81          static __code const uint16 HalAdcVddLimit[] =
   \                     ??HalAdcVddLimit:
   \   000000   9C36063A     DW 13980, 14854, 15728, 16601, 17475, 18349, 19223, 20097, 20970
   \            703DD940
   \            4344AD47
   \            174B814E
   \            EA51    
     82          {
     83            0x369C,       /*  VDD Limit - 1.6v  */
     84            0x3A06,       /*  VDD Limit - 1.7v  */
     85            0x3D70,       /*  VDD Limit - 1.8v  */
     86            0x40D9,       /*  VDD Limit - 1.9v  */
     87            0x4443,       /*  VDD Limit - 2.0v  */
     88            0x47AD,       /*  VDD Limit - 2.1v  */
     89            0x4B17,       /*  VDD Limit - 2.2v  */
     90            0x4E81,       /*  VDD Limit - 2.3v  */
     91            0x51EA,       /*  VDD Limit - 2.4v  */
     92          };
     93          
     94          
     95          /**************************************************************************************************
     96           *                                              MACROS
     97           **************************************************************************************************/
     98          #define HAL_ADC_CLR_EOC()   asm("PUSH A"); asm("MOV A,ADCL"); asm("MOV A,ADCH"); asm("POP A");
     99          
    100          /**************************************************************************************************
    101           *                                            TYPEDEFS
    102           **************************************************************************************************/
    103          
    104          /**************************************************************************************************
    105           *                                         GLOBAL VARIABLES
    106           **************************************************************************************************/
    107          
    108          /**************************************************************************************************
    109           *                                          FUNCTIONS - API
    110           **************************************************************************************************/
    111          extern bool HalAdcCheckVdd (uint8 limit);
    112          
    113          /**************************************************************************************************
    114           * @fn      HalAdcInit
    115           *
    116           * @brief   Initialize ADC Service
    117           *
    118           * @param   None
    119           *
    120           * @return  None
    121           **************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    122          void HalAdcInit (void)
   \                     HalAdcInit:
    123          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    124          #if (HAL_ADC == TRUE)
    125            volatile uint8  tmp;
    126          
    127            ADCCON1 = HAL_ADC_STSEL | HAL_ADC_RAND_GEN | 0x03;
   \   000009   75B43F       MOV     0xb4,#0x3f
    128            ADCCON2 = HAL_ADC_REF_VOLT | HAL_ADC_DEC_RATE | HAL_ADC_SCHN;
   \   00000C   75B58F       MOV     0xb5,#-0x71
    129            /*
    130            *  After reset, the first ADC reading of the extra conversion always reads GND level.
    131            *  We will do a few dummy conversions to bypass this bug.
    132            */
    133            tmp = ADCL;     /* read ADCL,ADCH to clear EOC */
   \   00000F   E5BA         MOV     A,0xba
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   F0           MOVX    @DPTR,A
    134            tmp = ADCH;
   \   000018   E5BB         MOV     A,0xbb
   \   00001A   F0           MOVX    @DPTR,A
    135            ADCCON3 = HAL_ADC_REF_VOLT | HAL_ADC_DEC_RATE | HAL_ADC_ECHN;
   \   00001B   75B68C       MOV     0xb6,#-0x74
    136            while ((ADCCON1 & HAL_ADC_EOC) != HAL_ADC_EOC);   /* Wait for conversion */
   \                     ??HalAdcInit_0:
   \   00001E   E5B4         MOV     A,0xb4
   \   000020   A2E7         MOV     C,0xE0 /* A   */.7
   \   000022   50FA         JNC     ??HalAdcInit_0
    137            tmp = ADCL;     /* read ADCL,ADCH to clear EOC */
   \   000024   E5BA         MOV     A,0xba
   \   000026   F0           MOVX    @DPTR,A
    138            tmp = ADCH;
   \   000027   E5BB         MOV     A,0xbb
   \   000029   F0           MOVX    @DPTR,A
    139            ADCCON3 = HAL_ADC_REF_VOLT | HAL_ADC_DEC_RATE | HAL_ADC_ECHN;
   \   00002A   75B68C       MOV     0xb6,#-0x74
    140            while ((ADCCON1 & HAL_ADC_EOC) != HAL_ADC_EOC);   /* Wait for conversion */
   \                     ??HalAdcInit_1:
   \   00002D   E5B4         MOV     A,0xb4
   \   00002F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000031   50FA         JNC     ??HalAdcInit_1
    141            tmp = ADCL;     /* read ADCL,ADCH to clear EOC */
   \   000033   E5BA         MOV     A,0xba
   \   000035   F0           MOVX    @DPTR,A
    142            tmp = ADCH;
   \   000036   E5BB         MOV     A,0xbb
   \   000038   F0           MOVX    @DPTR,A
    143          #endif
    144          }
   \   000039   7401         MOV     A,#0x1
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003E                REQUIRE ?Subroutine0
   \   00003E                ; // Fall through to label ?Subroutine0

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    145          
    146          /**************************************************************************************************
    147           * @fn      HalAdcRead
    148           *
    149           * @brief   Read the ADC based on given channel and resolution
    150           *
    151           * @param   channel - channel where ADC will be read
    152           * @param   resolution - the resolution of the value
    153           *
    154           * @return  16 bit value of the ADC in offset binary format.
    155           *          Note that the ADC is "bipolar", which means the GND (0V) level is mid-scale.
    156           **************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    157          uint16 HalAdcRead (uint8 channel, uint8 resolution)
   \                     HalAdcRead:
    158          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    159            int16  reading = 0;
    160          
    161          #if (HAL_ADC == TRUE)
    162          
    163            uint8   i, resbits;
    164            uint8   adctemp;
    165            volatile  uint8 tmp;
    166            uint8  adcChannel = 1;
   \   00000A   7C01         MOV     R4,#0x1
    167          
    168            /*
    169            * If Analog input channel is AIN0..AIN7, make sure corresponing P0 I/O pin is enabled.  The code
    170            * does NOT disable the pin at the end of this function.  I think it is better to leave the pin
    171            * enabled because the results will be more accurate.  Because of the inherent capacitance on the
    172            * pin, it takes time for the voltage on the pin to charge up to its steady-state level.  If
    173            * HalAdcRead() has to turn on the pin for every conversion, the results may show a lower voltage
    174            * than actuality because the pin did not have time to fully charge.
    175            */
    176            if (channel < 8)
   \   00000C   E9           MOV     A,R1
   \   00000D   C3           CLR     C
   \   00000E   9408         SUBB    A,#0x8
   \   000010   500E         JNC     ??HalAdcRead_0
    177            {
    178              for (i=0; i < channel; i++)
   \   000012   7B00         MOV     R3,#0x0
   \   000014   8005         SJMP    ??HalAdcRead_1
    179              {
    180                adcChannel <<= 1;
   \                     ??HalAdcRead_2:
   \   000016   EC           MOV     A,R4
   \   000017   C3           CLR     C
   \   000018   33           RLC     A
   \   000019   FC           MOV     R4,A
    181              }
   \   00001A   0B           INC     R3
   \                     ??HalAdcRead_1:
   \   00001B   EB           MOV     A,R3
   \   00001C   C3           CLR     C
   \   00001D   99           SUBB    A,R1
   \   00001E   40F6         JC      ??HalAdcRead_2
    182            }
    183          
    184            /* Enable channel */
    185            ADCCFG |= adcChannel;
   \                     ??HalAdcRead_0:
   \   000020   EC           MOV     A,R4
   \   000021   45F2         ORL     A,0xf2
   \   000023   F5F2         MOV     0xf2,A
    186          
    187            /* Convert resolution to decimation rate */
    188            switch (resolution)
   \   000025   EA           MOV     A,R2
   \   000026   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for HalAdcRead>_0`:
   \   000029   01           DB        1
   \   00002A   02           DB        2
   \   00002B   ....         DW        ??HalAdcRead_3
   \   00002D   ....         DW        ??HalAdcRead_4
   \   00002F   ....         DW        ??HalAdcRead_5
   \   000031   ....         DW        ??HalAdcRead_6
    189            {
    190              case HAL_ADC_RESOLUTION_8:
    191                resbits = HAL_ADC_DEC_064;
   \                     ??HalAdcRead_4:
   \   000033   7B00         MOV     R3,#0x0
   \   000035   800A         SJMP    ??HalAdcRead_7
    192                break;
    193              case HAL_ADC_RESOLUTION_10:
    194                resbits = HAL_ADC_DEC_128;
   \                     ??HalAdcRead_5:
   \   000037   7B10         MOV     R3,#0x10
   \   000039   8006         SJMP    ??HalAdcRead_7
    195                break;
    196              case HAL_ADC_RESOLUTION_12:
    197                resbits = HAL_ADC_DEC_256;
   \                     ??HalAdcRead_6:
   \   00003B   7B20         MOV     R3,#0x20
   \   00003D   8002         SJMP    ??HalAdcRead_7
    198                break;
    199              case HAL_ADC_RESOLUTION_14:
    200              default:
    201                resbits = HAL_ADC_DEC_512;
   \                     ??HalAdcRead_3:
   \   00003F   7B30         MOV     R3,#0x30
    202                break;
    203            }
    204          
    205            /* read ADCL,ADCH to clear EOC */
    206            tmp = ADCL;
   \                     ??HalAdcRead_7:
   \   000041   E5BA         MOV     A,0xba
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
    207            tmp = ADCH;
   \   00004A   E5BB         MOV     A,0xbb
   \   00004C   F0           MOVX    @DPTR,A
    208          
    209            /* Setup Sample */
    210            adctemp = ADCCON3;
   \   00004D   E5B6         MOV     A,0xb6
    211            adctemp &= ~(HAL_ADC_CHN_BITS | HAL_ADC_DEC_BITS | HAL_ADC_REF_BITS);
    212            adctemp |= channel | resbits | HAL_ADC_REF_VOLT;
    213          
    214            /* writing to this register starts the extra conversion */
    215            ADCCON3 = adctemp;
   \   00004F   EB           MOV     A,R3
   \   000050   49           ORL     A,R1
   \   000051   4480         ORL     A,#0x80
   \   000053   F5B6         MOV     0xb6,A
    216          
    217            /* Wait for the conversion to be done */
    218            while (!(ADCCON1 & HAL_ADC_EOC));
   \                     ??HalAdcRead_8:
   \   000055   E5B4         MOV     A,0xb4
   \   000057   A2E7         MOV     C,0xE0 /* A   */.7
   \   000059   50FA         JNC     ??HalAdcRead_8
    219          
    220            /* Disable channel after done conversion */
    221            ADCCFG &= ~adcChannel;
   \   00005B   EC           MOV     A,R4
   \   00005C   F4           CPL     A
   \   00005D   55F2         ANL     A,0xf2
   \   00005F   F5F2         MOV     0xf2,A
    222          
    223            /* Read the result */
    224            reading = (int16) (ADCL);
   \   000061   ABBA         MOV     R3,0xba
   \   000063   8B82         MOV     DPL,R3
   \   000065   A882         MOV     R0,DPL
    225            reading |= (int16) (ADCH << 8);
   \   000067   E5BB         MOV     A,0xbb
   \   000069   F9           MOV     R1,A
    226          
    227            /* Treat small negative as 0 */
    228            if (reading < 0)
   \   00006A   C3           CLR     C
   \   00006B   E8           MOV     A,R0
   \   00006C   9400         SUBB    A,#0x0
   \   00006E   E9           MOV     A,R1
   \   00006F   9400         SUBB    A,#0x0
   \   000071   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000073   65D0         XRL     A,PSW
   \   000075   33           RLC     A
   \   000076   5004         JNC     ??HalAdcRead_9
    229              reading = 0;
   \   000078   7800         MOV     R0,#0x0
   \   00007A   7900         MOV     R1,#0x0
    230          
    231            switch (resolution)
   \                     ??HalAdcRead_9:
   \   00007C   EA           MOV     A,R2
   \   00007D   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for HalAdcRead>_1`:
   \   000080   01           DB        1
   \   000081   02           DB        2
   \   000082   ....         DW        ??HalAdcRead_10
   \   000084   ....         DW        ??HalAdcRead_11
   \   000086   ....         DW        ??HalAdcRead_12
   \   000088   ....         DW        ??HalAdcRead_13
    232            {
    233              case HAL_ADC_RESOLUTION_8:
    234                reading >>= 8;
   \                     ??HalAdcRead_11:
   \   00008A   88..         MOV     ?V0 + 0,R0
   \   00008C   89..         MOV     ?V0 + 1,R1
   \   00008E   7408         MOV     A,#0x8
   \   000090   800E         SJMP    ??HalAdcRead_14
    235                break;
    236              case HAL_ADC_RESOLUTION_10:
    237                reading >>= 6;
   \                     ??HalAdcRead_12:
   \   000092   88..         MOV     ?V0 + 0,R0
   \   000094   89..         MOV     ?V0 + 1,R1
   \   000096   7406         MOV     A,#0x6
   \   000098   8006         SJMP    ??HalAdcRead_14
    238                break;
    239              case HAL_ADC_RESOLUTION_12:
    240                reading >>= 4;
   \                     ??HalAdcRead_13:
   \   00009A   88..         MOV     ?V0 + 0,R0
   \   00009C   89..         MOV     ?V0 + 1,R1
   \   00009E   7404         MOV     A,#0x4
   \                     ??HalAdcRead_14:
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?SS_SHR
   \   0000A5   A8..         MOV     R0,?V0 + 0
   \   0000A7   A9..         MOV     R1,?V0 + 1
    241                break;
    242              case HAL_ADC_RESOLUTION_14:
    243              default:
    244              break;
    245            }
    246          #endif
    247          
    248            return ((uint16)reading);
   \                     ??HalAdcRead_10:
   \   0000A9   E8           MOV     A,R0
   \   0000AA   FA           MOV     R2,A
   \   0000AB   E9           MOV     A,R1
   \   0000AC   FB           MOV     R3,A
   \   0000AD   7401         MOV     A,#0x1
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B2   7F02         MOV     R7,#0x2
   \   0000B4   02....       LJMP    ?BANKED_LEAVE_XDATA
    249          }
    250          
    251          /**************************************************************************************************
    252           * @fn      HalAdcCheckVdd
    253           *
    254           * @brief   Check the Vdd and return TRUE if it greater than or equal the limit
    255           *
    256           * @param   limit - limit that needs to be checked with the Vdd
    257           *
    258           * @return  TRUE if Vdd >= limit, FALSE otherwise
    259           *
    260           **************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    261          bool HalAdcCheckVdd (uint8 limit)
   \                     HalAdcCheckVdd:
    262          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    263            uint16 value;
    264          
    265            /* If rev C or earlier, dont check the voltage */
    266            if (CHVER < REV_D)
   \   000004   90DF60       MOV     DPTR,#-0x20a0
   \   000007   E0           MOVX    A,@DPTR
   \   000008   C3           CLR     C
   \   000009   9403         SUBB    A,#0x3
   \   00000B   5004         JNC     ??HalAdcCheckVdd_0
    267            {
    268              return TRUE;
   \                     ??HalAdcCheckVdd_1:
   \   00000D   7901         MOV     R1,#0x1
   \   00000F   802F         SJMP    ??HalAdcCheckVdd_2
    269            }
    270          
    271            /* Clear ADC interrupt flag */
    272            ADCIF = 0;
   \                     ??HalAdcCheckVdd_0:
   \   000011   C28D         CLR     0x88.5
    273          
    274            /* Setup the new value for conversion */
    275            ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_064 | HAL_ADC_CHN_VDD3);
   \   000013   75B60F       MOV     0xb6,#0xf
    276          
    277            /* Wait for the conversion to finish */
    278            while ( !ADCIF );
   \                     ??HalAdcCheckVdd_3:
   \   000016   A28D         MOV     C,0x88.5
   \   000018   50FC         JNC     ??HalAdcCheckVdd_3
    279          
    280            /* Get the result */
    281            value = ADCL;
   \   00001A   AABA         MOV     R2,0xba
    282            value |= ((uint16) ADCH) << 8;
   \   00001C   E5BB         MOV     A,0xbb
   \   00001E   FB           MOV     R3,A
    283          
    284            /* Check the limit and return */
    285            return ( value >= HalAdcVddLimit[limit] );
   \   00001F   E9           MOV     A,R1
   \   000020   C3           CLR     C
   \   000021   33           RLC     A
   \   000022   F8           MOV     R0,A
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   24..         ADD     A,#(??HalAdcVddLimit & 0xff)
   \   000029   F582         MOV     DPL,A
   \   00002B   E9           MOV     A,R1
   \   00002C   34..         ADDC    A,#((??HalAdcVddLimit >> 8) & 0xff)
   \   00002E   F583         MOV     DPH,A
   \   000030   E4           CLR     A
   \   000031   93           MOVC    A,@A+DPTR
   \   000032   F8           MOV     R0,A
   \   000033   7401         MOV     A,#0x1
   \   000035   93           MOVC    A,@A+DPTR
   \   000036   F9           MOV     R1,A
   \   000037   C3           CLR     C
   \   000038   EA           MOV     A,R2
   \   000039   98           SUBB    A,R0
   \   00003A   EB           MOV     A,R3
   \   00003B   99           SUBB    A,R1
   \   00003C   50CF         JNC     ??HalAdcCheckVdd_1
   \   00003E   7900         MOV     R1,#0x0
   \                     ??HalAdcCheckVdd_2:
   \   000040   02....       LJMP    ?Subroutine0 & 0xFFFF
    286          }

   \                                 In segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1
    287          
    288          /**************************************************************************************************
    289          **************************************************************************************************/
    290          
    291          
    292          
    293          

   Maximum stack usage in bytes:

     Function       ISTACK PSTACK XSTACK
     --------       ------ ------ ------
     HalAdcCheckVdd     2      0      0
     HalAdcInit         3      0      1
     HalAdcRead         1      0     11


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     ADCCON1           1
     ADCCON2           1
     ADCCON3           1
     ADCL              1
     ADCH              1
     ADCCFG            1
     HalAdcVddLimit   18
     HalAdcInit       62
     ?Subroutine0      7
     HalAdcRead      183
     HalAdcCheckVdd   67
     _A_TCON           1

 
 319 bytes in segment BANKED_CODE
  18 bytes in segment CODE_C
   7 bytes in segment SFR_AN
 
 337 bytes of CODE memory
   0 bytes of DATA memory (+ 7 bytes shared)

Errors: none
Warnings: none
