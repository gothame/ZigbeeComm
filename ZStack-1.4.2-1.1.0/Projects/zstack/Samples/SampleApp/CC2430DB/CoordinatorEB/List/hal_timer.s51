//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:26:04 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC24 /
//                          30EB\hal_timer.c                                 /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wC /
//                          oord.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS     /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D ZTOOL_P1 -D MT_TASK -D            /
//                          MT_ZDO_FUNC -lC E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\CoordinatorEB\L /
//                          ist\ -lA E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\CoordinatorEB\List\    /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\CoordinatorEB\Obj\ -e        /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC24 /
//                          30EB\hal_timer.c                                 /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\CoordinatorEB\List\hal_timer.s5 /
//                          1                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME hal_timer

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?G_EQ
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?L_MUL
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC HalTimerConfig
        FUNCTION HalTimerConfig,021203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC HalTimerInit
        FUNCTION HalTimerInit,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalTimerInterruptEnable
        FUNCTION HalTimerInterruptEnable,080203H
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalTimerStart
        FUNCTION HalTimerStart,021203H
        LOCFRAME XSTACK, 16, STACK
        PUBLIC HalTimerStop
        FUNCTION HalTimerStop,0a1203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalTimerTick
        FUNCTION HalTimerTick,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK T1CCTL0
        PUBWEAK T1CCTL1
        PUBWEAK T1CCTL2
        PUBWEAK T1CTL
        PUBWEAK T3CCTL0
        PUBWEAK T3CCTL1
        PUBWEAK T3CTL
        PUBWEAK T4CCTL0
        PUBWEAK T4CCTL1
        PUBWEAK T4CTL
        PUBWEAK _A_IEN1
        PUBWEAK _A_TIMIF
        PUBLIC halProcessTimer1
        FUNCTION halProcessTimer1,021203H
        ARGFRAME ISTACK, 15, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halProcessTimer3
        FUNCTION halProcessTimer3,021203H
        ARGFRAME ISTACK, 15, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halProcessTimer4
        FUNCTION halProcessTimer4,021203H
        ARGFRAME ISTACK, 15, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimer1Isr
        FUNCTION halTimer1Isr,021233H
        LOCFRAME ISTACK, 15, STACK
        PUBWEAK `halTimer1Isr??INTVEC 75`
        PUBLIC halTimer3Isr
        FUNCTION halTimer3Isr,021233H
        LOCFRAME ISTACK, 15, STACK
        PUBWEAK `halTimer3Isr??INTVEC 91`
        PUBLIC halTimer4Isr
        FUNCTION halTimer4Isr,021233H
        LOCFRAME ISTACK, 15, STACK
        PUBWEAK `halTimer4Isr??INTVEC 99`
        PUBLIC halTimerRemap
        FUNCTION halTimerRemap,080203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimerSendCallBack
        FUNCTION halTimerSendCallBack,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC halTimerSetChannelMode
        FUNCTION halTimerSetChannelMode,080203H
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimerSetCount
        FUNCTION halTimerSetCount,0203H
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC halTimerSetOpMode
        FUNCTION halTimerSetOpMode,080203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halTimerSetPrescale
        FUNCTION halTimerSetPrescale,080203H
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
halTimer1Isr        SYMBOL "halTimer1Isr"
`halTimer1Isr??INTVEC 75` SYMBOL "??INTVEC 75", halTimer1Isr
halTimer3Isr        SYMBOL "halTimer3Isr"
`halTimer3Isr??INTVEC 91` SYMBOL "??INTVEC 91", halTimer3Isr
halTimer4Isr        SYMBOL "halTimer4Isr"
`halTimer4Isr??INTVEC 99` SYMBOL "??INTVEC 99", halTimer4Isr

// E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC2430EB\hal_timer.c
//    1 /**************************************************************************************************
//    2     Filename:       hal_timer.c
//    3     Revised:        $Date: 2006-11-01 15:05:21 -0700 (Wed, 01 Nov 2006) $
//    4     Revision:       $Revision: 12475 $
//    5 
//    6     Description:
//    7 
//    8     This file contains the interface to the Timer Service.
//    9     This also contains the Task functions.
//   10 
//   11     Copyright (c) 2006 by Texas Instruments, Inc.
//   12     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   13     derivative works, modify, distribute, perform, display or sell this
//   14     software and/or its documentation for any purpose is prohibited
//   15     without the express written consent of Texas Instruments, Inc.
//   16 **************************************************************************************************/
//   17 /*********************************************************************
//   18  NOTE: The following mapping is done between the logical timer
//   19        names defined in HAL_TIMER.H and the physical HW timer.
//   20 
//   21        HAL_TIMER_0 --> HW Timer 3  (8-bits)
//   22        HAL_TIMER_2 --> HW Timer 4  (8-bits)
//   23        HAL_TIMER_3 --> HW Timer 1  (16-bits)
//   24 
//   25  NOTE: The timer code assumes only one channel, CHANNEL 0, is used
//   26        for each timer.  There is currently no support for other
//   27        channels.
//   28 
//   29  NOTE: Only Output Compare Mode is supported.  There is no provision
//   30        to support Input Capture Mode.
//   31 
//   32  NOTE: There is no support to map the output of the timers to a
//   33        physical I/O pin
//   34 
//   35 *********************************************************************/
//   36 /*********************************************************************
//   37  * INCLUDES
//   38  */
//   39 #include  "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,0cbH
// unsigned char volatile __sfr T3CTL
T3CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ccH
// unsigned char volatile __sfr T3CCTL0
T3CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ceH
// unsigned char volatile __sfr T3CCTL1
T3CCTL1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e5H
// unsigned char volatile __sfr T1CCTL0
T1CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e6H
// unsigned char volatile __sfr T1CCTL1
T1CCTL1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e7H
// unsigned char volatile __sfr T1CCTL2
T1CCTL2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ebH
// unsigned char volatile __sfr T4CTL
T4CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ecH
// unsigned char volatile __sfr T4CCTL0
T4CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0eeH
// unsigned char volatile __sfr T4CCTL1
T4CCTL1:
        DS 1
//   40 #include  "hal_defs.h"
//   41 #include  "hal_types.h"
//   42 #include  "hal_timer.h"
//   43 
//   44 /*********************************************************************
//   45  * MACROS
//   46  */
//   47 
//   48 /*********************************************************************
//   49  * CONSTANTS
//   50  */
//   51 #define HW_TIMER_1        0x00
//   52 #define HW_TIMER_3        0x01
//   53 #define HW_TIMER_4        0x02
//   54 #define HW_TIMER_INVALID  0x03
//   55 #define HW_TIMER_MAX      0x03
//   56 
//   57 #define IEN1_T1IE     0x02    /* Timer1 Interrupt Enable */
//   58 #define IEN1_T3IE     0x08    /* Timer3 Interrupt Enable */
//   59 #define IEN1_T4IE     0x10    /* Timer4 Interrupt Enable */
//   60 
//   61 #define T1CTL_CH2IF   0x80
//   62 #define T1CTL_CH1IF   0x40
//   63 #define T1CTL_CH0IF   0x20
//   64 #define T1CTL_OVFIF   0x10
//   65 
//   66 #define TIMIF_T1OVFIM 0x40
//   67 #define TIMIF_T4CH1IF 0x20
//   68 #define TIMIF_T4CH0IF 0x10
//   69 #define TIMIF_T4OVFIF 0x08
//   70 #define TIMIF_T3CH1IF 0x04
//   71 #define TIMIF_T3CH0IF 0x02
//   72 #define TIMIF_T3OVFIF 0x01
//   73 
//   74 #define T34CTL_OVFIM  0x80
//   75 
//   76 #define T134CCTL_IM         0x40    /* Interrupt Mask */
//   77 #define T134CCTL_CMP_BITS   0x38    /* Bits[5:3] == CMP[2:0] */
//   78 #define T134CCTL_MODE       0x04    /* Capture(0)/Compare(1) mode */
//   79 #define T134CCTL_CAP_BITS   0x03    /* Bits[1:0] == CAP[1:0] */
//   80 
//   81 #define T134CCTL_CMP_OC     0x18    /* Set output on compare, clear at 0 */
//   82 #define T134CCTL_CAP_RE     0x01    /* Set input capture on rising edge */
//   83 
//   84 /* Timer clock pre-scaler definitions for 16bit timer1 */
//   85 #define HAL_TIMER1_16_TC_DIV1     0x00  /* No clock pre-scaling */
//   86 #define HAL_TIMER1_16_TC_DIV8     0x04  /* Clock pre-scaled by 8 */
//   87 #define HAL_TIMER1_16_TC_DIV32    0x08  /* Clock pre-scaled by 32 */
//   88 #define HAL_TIMER1_16_TC_DIV128   0x0c  /* Clock pre-scaled by 128 */
//   89 #define HAL_TIMER1_16_TC_BITS     0x0c  /* Bits 3:2 */
//   90 
//   91 /* Timer clock pre-scaler definitions for 8bit timer3 and timer4 */
//   92 #define HAL_TIMER34_8_TC_DIV1     0x00  /* No clock pre-scaling */
//   93 #define HAL_TIMER34_8_TC_DIV2     0x20  /* Clock pre-scaled by 2 */
//   94 #define HAL_TIMER34_8_TC_DIV4     0x40  /* Clock pre-scaled by 4 */
//   95 #define HAL_TIMER34_8_TC_DIV8     0x60  /* Clock pre-scaled by 8 */
//   96 #define HAL_TIMER34_8_TC_DIV16    0x80  /* Clock pre-scaled by 16 */
//   97 #define HAL_TIMER34_8_TC_DIV32    0xA0  /* Clock pre-scaled by 32 */
//   98 #define HAL_TIMER34_8_TC_DIV64    0xC0  /* Clock pre-scaled by 64 */
//   99 #define HAL_TIMER34_8_TC_DIV128   0xE0  /* Clock pre-scaled by 128 */
//  100 #define HAL_TIMER34_8_TC_BITS     0xE0  /* Bits 7:5 */
//  101 
//  102 /* Operation Mode definitions */
//  103 #define HAL_TIMER1_OPMODE_STOP      0x00  /* Free Running Mode, Count from 0 to Max */
//  104 #define HAL_TIMER1_OPMODE_FREERUN   0x01  /* Free Running Mode, Count from 0 to Max */
//  105 #define HAL_TIMER1_OPMODE_MODULO    0x02  /* Modulo Mode, Count from 0 to CompareValue */
//  106 #define HAL_TIMER1_OPMODE_BITS      0x03  /* Bits 1:0 */
//  107 
//  108 #define HAL_TIMER34_START           0x10  /* Timer3 and Timer4 have separate Start bit */
//  109 #define HAL_TIMER34_OPMODE_FREERUN  0x00  /* Free Running Mode, Count from 0 to Max */
//  110 #define HAL_TIMER34_OPMODE_MODULO   0x02  /* Modulo Mode, Count from 0 to CompareValue */
//  111 #define HAL_TIMER34_OPMODE_BITS     0x03  /* Bits 1:0 */
//  112 
//  113 #define HAL_TIMER_MODE_STOP         0x03
//  114 
//  115 /* Prescale settings */
//  116 #define HAL_TIMER1_16_PRESCALE      HAL_TIMER1_16_TC_DIV128
//  117 #define HAL_TIMER1_16_PRESCALE_VAL  128
//  118 #define HAL_TIMER3_8_PRESCALE       HAL_TIMER34_8_TC_DIV128
//  119 #define HAL_TIMER3_8_PRESCALE_VAL   128
//  120 #define HAL_TIMER4_8_PRESCALE       HAL_TIMER34_8_TC_DIV128
//  121 #define HAL_TIMER4_8_PRESCALE_VAL   128
//  122 
//  123 /* Clock settings */
//  124 #define HAL_TIMER_16MHZ           16
//  125 #define HAL_TIMER_32MHZ           32
//  126 
//  127 /* Default all timers to use channel 0 */
//  128 #define TCHN_T1CCTL   &(X_T1CCTL0)
//  129 #define TCHN_T1CCL    &(X_T1CC0L)
//  130 #define TCHN_T1CCH    &(X_T1CC0H)
//  131 #define TCNH_T1OVF    &(X_TIMIF)
//  132 #define TCHN_T1OVFBIT TIMIF_T1OVFIM
//  133 #define TCHN_T1INTBIT IEN1_T1IE
//  134 
//  135 #define TCHN_T3CCTL   &(X_T3CCTL0)
//  136 #define TCHN_T3CCL    &(X_T3CC0)
//  137 #define TCHN_T3CCH    &(X_T3CC0)
//  138 #define TCNH_T3OVF    &(X_T3CTL)
//  139 #define TCHN_T3OVFBIT T34CTL_OVFIM
//  140 #define TCHN_T3INTBIT IEN1_T3IE
//  141 
//  142 #define TCHN_T4CCTL   &(X_T4CCTL0)
//  143 #define TCHN_T4CCL    &(X_T4CC0)
//  144 #define TCHN_T4CCH    &(X_T4CC0)
//  145 #define TCNH_T4OVF    &(X_T4CTL)
//  146 #define TCHN_T4OVFBIT T34CTL_OVFIM
//  147 #define TCHN_T4INTBIT IEN1_T4IE
//  148 
//  149 /*********************************************************************
//  150  * TYPEDEFS
//  151  */
//  152 typedef struct
//  153 {
//  154   bool configured;
//  155   bool intEnable;
//  156   uint8 opMode;
//  157   uint8 channel;
//  158   uint8 channelMode;
//  159   uint8 prescale;
//  160   uint8 prescaleVal;
//  161   uint8 clock;
//  162   halTimerCBack_t callBackFunc;
//  163 } halTimerSettings_t;
//  164 
//  165 typedef struct
//  166 {
//  167   uint8 volatile XDATA *TxCCTL;
//  168   uint8 volatile XDATA *TxCCH;
//  169   uint8 volatile XDATA *TxCCL;
//  170   uint8 volatile XDATA *TxOVF;
//  171   uint8 ovfbit;
//  172   uint8 intbit;
//  173 } halTimerChannel_t;
//  174 
//  175 /*********************************************************************
//  176  * GLOBAL VARIABLES
//  177  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  178 static halTimerSettings_t halTimerRecord[HW_TIMER_MAX];
??halTimerRecord:
        DS 33

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  179 static halTimerChannel_t  halTimerChannel[HW_TIMER_MAX];
??halTimerChannel:
        DS 30
//  180 
//  181 /*********************************************************************
//  182  * FUNCTIONS - External
//  183  */
//  184 
//  185 /*********************************************************************
//  186  * FUNCTIONS - Local
//  187  */
//  188 uint8 halTimerSetCount (uint8 cc2430id, uint32 timePerTick);
//  189 uint8 halTimerSetPrescale (uint8 cc2430id, uint8 prescale);
//  190 uint8 halTimerSetOpMode (uint8 cc2430id, uint8 opMode);
//  191 uint8 halTimerSetChannelMode (uint8 cc2430id, uint8 channelMode);
//  192 void halTimerSendCallBack (uint8 timerId, uint8 channel, uint8 channelMode);
//  193 uint8 halTimerRemap (uint8 timerId);
//  194 void halProcessTimer1 (void);
//  195 void halProcessTimer3 (void);
//  196 void halProcessTimer4 (void);
//  197 
//  198 
//  199 /*********************************************************************
//  200  * FUNCTIONS - API
//  201  */
//  202 
//  203 /*********************************************************************
//  204  * @fn      HalTimerInit
//  205  *
//  206  * @brief   Initialize Timer Service
//  207  *
//  208  * @param   None
//  209  *
//  210  * @return  None
//  211  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  212 void HalTimerInit (void)
HalTimerInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalTimerInit
//  213 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  214   T1CCTL0 = 0;    /* Make sure interrupts are disabled */
        MOV	0xe5,#0x0
//  215   T1CCTL1 = 0;    /* Make sure interrupts are disabled */
        MOV	0xe6,#0x0
//  216   T1CCTL2 = 0;    /* Make sure interrupts are disabled */
        MOV	0xe7,#0x0
//  217   T3CCTL0 = 0;    /* Make sure interrupts are disabled */
        MOV	0xcc,#0x0
//  218   T3CCTL1 = 0;    /* Make sure interrupts are disabled */
        MOV	0xce,#0x0
//  219   T4CCTL0 = 0;    /* Make sure interrupts are disabled */
        MOV	0xec,#0x0
//  220   T4CCTL1 = 0;    /* Make sure interrupts are disabled */
        MOV	0xee,#0x0
//  221 
//  222   /* Setup prescale & clock for timer0 */
//  223   halTimerRecord[HW_TIMER_1].prescale    = HAL_TIMER1_16_PRESCALE;
        MOV	A,#0xc
        MOV	DPTR,#(??halTimerRecord + 5)
        MOVX	@DPTR,A
//  224   halTimerRecord[HW_TIMER_1].clock       = HAL_TIMER_32MHZ;
        MOV	A,#0x20
        MOV	DPTR,#(??halTimerRecord + 7)
        MOVX	@DPTR,A
//  225   halTimerRecord[HW_TIMER_1].prescaleVal = HAL_TIMER1_16_PRESCALE_VAL;
        MOV	A,#-0x80
        MOV	DPTR,#(??halTimerRecord + 6)
        MOVX	@DPTR,A
//  226 
//  227   /* Setup prescale & clock for timer2 */
//  228   halTimerRecord[HW_TIMER_3].prescale    = HAL_TIMER3_8_PRESCALE;
        MOV	A,#-0x20
        MOV	DPTR,#(??halTimerRecord + 16)
        MOVX	@DPTR,A
//  229   halTimerRecord[HW_TIMER_3].clock       = HAL_TIMER_32MHZ;
        MOV	A,#0x20
        MOV	DPTR,#(??halTimerRecord + 18)
        MOVX	@DPTR,A
//  230   halTimerRecord[HW_TIMER_3].prescaleVal = HAL_TIMER3_8_PRESCALE_VAL;
        MOV	A,#-0x80
        MOV	DPTR,#(??halTimerRecord + 17)
        MOVX	@DPTR,A
//  231 
//  232   /* Setup prescale & clock for timer3 */
//  233   halTimerRecord[HW_TIMER_4].prescale    = HAL_TIMER4_8_PRESCALE;
        MOV	A,#-0x20
        MOV	DPTR,#(??halTimerRecord + 27)
        MOVX	@DPTR,A
//  234   halTimerRecord[HW_TIMER_4].clock       = HAL_TIMER_32MHZ;
        MOV	A,#0x20
        MOV	DPTR,#(??halTimerRecord + 29)
        MOVX	@DPTR,A
//  235   halTimerRecord[HW_TIMER_4].prescaleVal = HAL_TIMER4_8_PRESCALE_VAL;
        MOV	A,#-0x80
        MOV	DPTR,#(??halTimerRecord + 28)
        MOVX	@DPTR,A
//  236 
//  237   /* Setup Timer1 Channel structure */
//  238   halTimerChannel[HW_TIMER_1].TxCCTL =  TCHN_T1CCTL;
        MOV	DPTR,#??halTimerChannel
        MOV	A,#-0x1b
        LCALL	??Subroutine0_0 & 0xFFFF
//  239   halTimerChannel[HW_TIMER_1].TxCCL =   TCHN_T1CCL;
??CrossCallReturnLabel_0:
        MOV	DPTR,#(??halTimerChannel + 4)
        MOV	A,#-0x26
        LCALL	??Subroutine0_0 & 0xFFFF
//  240   halTimerChannel[HW_TIMER_1].TxCCH =   TCHN_T1CCH;
??CrossCallReturnLabel_1:
        MOV	DPTR,#(??halTimerChannel + 2)
        MOV	A,#-0x25
        LCALL	??Subroutine0_0 & 0xFFFF
//  241   halTimerChannel[HW_TIMER_1].TxOVF =   TCNH_T1OVF;
??CrossCallReturnLabel_2:
        MOV	DPTR,#(??halTimerChannel + 6)
        MOV	A,#-0x28
        LCALL	??Subroutine0_0 & 0xFFFF
//  242   halTimerChannel[HW_TIMER_1].ovfbit =  TCHN_T1OVFBIT;
??CrossCallReturnLabel_3:
        MOV	A,#0x40
        MOV	DPTR,#(??halTimerChannel + 8)
        MOVX	@DPTR,A
//  243   halTimerChannel[HW_TIMER_1].intbit =  TCHN_T1INTBIT;
        MOV	A,#0x2
        MOV	DPTR,#(??halTimerChannel + 9)
        MOVX	@DPTR,A
//  244 
//  245   /* Setup Timer3 Channel structure */
//  246   halTimerChannel[HW_TIMER_3].TxCCTL =  TCHN_T3CCTL;
        MOV	DPTR,#(??halTimerChannel + 10)
        MOV	A,#-0x34
        LCALL	??Subroutine0_0 & 0xFFFF
//  247   halTimerChannel[HW_TIMER_3].TxCCL =   TCHN_T3CCL;
??CrossCallReturnLabel_4:
        MOV	DPTR,#(??halTimerChannel + 14)
        LCALL	?Subroutine0 & 0xFFFF
//  248   halTimerChannel[HW_TIMER_3].TxCCH =   TCHN_T3CCH;
??CrossCallReturnLabel_5:
        MOV	DPTR,#(??halTimerChannel + 12)
        LCALL	?Subroutine0 & 0xFFFF
//  249   halTimerChannel[HW_TIMER_3].TxOVF =   TCNH_T3OVF;
??CrossCallReturnLabel_6:
        MOV	DPTR,#(??halTimerChannel + 16)
        MOV	A,#-0x35
        LCALL	??Subroutine0_0 & 0xFFFF
//  250   halTimerChannel[HW_TIMER_3].ovfbit =  TCHN_T3OVFBIT;
??CrossCallReturnLabel_7:
        MOV	A,#-0x80
        MOV	DPTR,#(??halTimerChannel + 18)
        MOVX	@DPTR,A
//  251   halTimerChannel[HW_TIMER_3].intbit =  TCHN_T3INTBIT;
        MOV	A,#0x8
        MOV	DPTR,#(??halTimerChannel + 19)
        MOVX	@DPTR,A
//  252 
//  253   /* Setup Timer4 Channel structure */
//  254   halTimerChannel[HW_TIMER_4].TxCCTL =  TCHN_T4CCTL;
        MOV	DPTR,#(??halTimerChannel + 20)
        MOV	A,#-0x14
        LCALL	??Subroutine0_0 & 0xFFFF
//  255   halTimerChannel[HW_TIMER_4].TxCCL =   TCHN_T4CCL;
??CrossCallReturnLabel_8:
        MOV	DPTR,#(??halTimerChannel + 24)
        MOV	A,#-0x13
        LCALL	??Subroutine0_0 & 0xFFFF
//  256   halTimerChannel[HW_TIMER_4].TxCCH =   TCHN_T4CCH;
??CrossCallReturnLabel_9:
        MOV	DPTR,#(??halTimerChannel + 22)
        MOV	A,#-0x13
        LCALL	??Subroutine0_0 & 0xFFFF
//  257   halTimerChannel[HW_TIMER_4].TxOVF =   TCNH_T4OVF;
??CrossCallReturnLabel_10:
        MOV	DPTR,#(??halTimerChannel + 26)
        MOV	A,#-0x15
        LCALL	??Subroutine0_0 & 0xFFFF
//  258   halTimerChannel[HW_TIMER_4].ovfbit =  TCHN_T4OVFBIT;
??CrossCallReturnLabel_11:
        MOV	A,#-0x80
        MOV	DPTR,#(??halTimerChannel + 28)
        MOVX	@DPTR,A
//  259   halTimerChannel[HW_TIMER_4].intbit =  TCHN_T4INTBIT;
        MOV	A,#0x10
        MOV	DPTR,#(??halTimerChannel + 29)
        MOVX	@DPTR,A
//  260 }
        LJMP	?Subroutine13 & 0xFFFF
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond2) CFA_SP SP+-5
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV	A,#-0x33
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond4) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond4) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond4) CFA_SP SP+-5
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond5) CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond7) CFA_SP SP+-5
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond8) CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond9) CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond10) CFA_SP SP+-5
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond11) CFA_SP SP+-5
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond12) CFA_SP SP+-5
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond13) CFA_SP SP+-5
??Subroutine0_0:
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#-0x21
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
//  261 
//  262 /***************************************************************************************************
//  263  * @fn      HalTimerConfig
//  264  *
//  265  * @brief   Configure the Timer Serivce
//  266  *
//  267  * @param   timerId - Id of the timer
//  268  *          opMode  - Operation mode
//  269  *          channel - Channel where the counter operates on
//  270  *          channelMode - Mode of that channel
//  271  *          prescale - Prescale of the clock
//  272  *          cBack - Pointer to the callback function
//  273  *
//  274  * @return  Status of the configuration
//  275  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  276 uint8 HalTimerConfig (uint8 timerId, uint8 opMode, uint8 channel, uint8 channelMode,
HalTimerConfig:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function HalTimerConfig
//  277                       bool intEnable, halTimerCBack_t cBack)
//  278 {
        FUNCALL HalTimerConfig, halTimerRemap
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
        MOV	A,R2
        MOV	R7,A
        MOV	?V0 + 0,R3
        MOV	?V0 + 1,R4
        MOV	?V0 + 2,R5
        MOV	A,#0xf
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R1,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	?V0 + 4,R1
        MOV	?V0 + 5,R2
        MOV	?V0 + 6,R3
//  279   uint8 hwtimerid;
//  280 
//  281   hwtimerid = halTimerRemap (timerId);
        ; Setup parameters for call to function halTimerRemap
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(halTimerRemap & 0xffff)
        MOV	A,#((halTimerRemap >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R2,A
//  282 
//  283   if ((opMode & HAL_TIMER_MODE_MASK) && (timerId < HAL_TIMER_MAX) &&
//  284       (channelMode & HAL_TIMER_CHANNEL_MASK) && (channel & HAL_TIMER_CHANNEL_MASK))
        MOV	A,#0x3
        ANL	A,R7
        JZ	??HalTimerConfig_0
        MOV	A,R6
        CLR	C
        SUBB	A,#0x4
        JNC	??HalTimerConfig_0
        MOV	A,#0xf
        ANL	A,?V0 + 1
        JZ	??HalTimerConfig_0
        MOV	A,#0xf
        ANL	A,?V0 + 0
        JZ	??HalTimerConfig_0
//  285   {
//  286     halTimerRecord[hwtimerid].configured    = TRUE;
        MOV	A,R2
        MOV	B,#0xb
        MUL	AB
        ADD	A,#(??halTimerRecord & 0xff)
        MOV	R0,A
        MOV	A,B
        ADDC	A,#((??halTimerRecord >> 8) & 0xff)
        MOV	R1,A
        MOV	A,#0x1
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	@DPTR,A
//  287     halTimerRecord[hwtimerid].opMode        = opMode;
        MOV	A,R7
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine11 & 0xFFFF
//  288     halTimerRecord[hwtimerid].channel       = channel;
??CrossCallReturnLabel_38:
        MOV	A,?V0 + 0
        LCALL	?Subroutine1 & 0xFFFF
//  289     halTimerRecord[hwtimerid].channelMode   = channelMode;
??CrossCallReturnLabel_12:
        MOV	A,?V0 + 1
        MOVX	@DPTR,A
//  290     halTimerRecord[hwtimerid].intEnable     = intEnable;
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOV	A,?V0 + 2
        LCALL	?Subroutine1 & 0xFFFF
//  291     halTimerRecord[hwtimerid].callBackFunc  = cBack;
??CrossCallReturnLabel_13:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOV	A,?V0 + 4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 5
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 6
        MOVX	@DPTR,A
//  292   }
//  293   else
//  294   {
//  295     return HAL_TIMER_PARAMS_ERROR;
//  296   }
//  297   return HAL_TIMER_OK;
        MOV	R1,#0x0
        SJMP	??HalTimerConfig_1
??HalTimerConfig_0:
        MOV	R1,#0x2
??HalTimerConfig_1:
        MOV	R7,#0x7
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock14
//  298 }
//  299 
//  300 
//  301 /***************************************************************************************************
//  302  * @fn      HalTimerStart
//  303  *
//  304  * @brief   Start the Timer Service
//  305  *
//  306  * @param   timerId      - ID of the timer
//  307  *          timerPerTick - number of micro sec per tick, (ticks x prescale) / clock = usec/tick
//  308  *
//  309  * @return  Status - OK or Not OK
//  310  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  311 uint8 HalTimerStart (uint8 timerId, uint32 timePerTick)
HalTimerStart:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function HalTimerStart
//  312 {
        FUNCALL HalTimerStart, halTimerRemap
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL HalTimerStart, halTimerSetCount
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL HalTimerStart, halTimerSetPrescale
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL HalTimerStart, halTimerSetOpMode
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL HalTimerStart, halTimerSetChannelMode
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL HalTimerStart, HalTimerInterruptEnable
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
//  313   uint8 hwtimerid;
//  314 
//  315   hwtimerid = halTimerRemap (timerId);
        ; Setup parameters for call to function halTimerRemap
        MOV	DPTR,#(halTimerRemap & 0xffff)
        MOV	A,#((halTimerRemap >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	?V0 + 0,A
//  316 
//  317   if (halTimerRecord[hwtimerid].configured)
        MOV	B,#0xb
        MUL	AB
        ADD	A,#(??halTimerRecord & 0xff)
        MOV	DPL,A
        MOV	A,B
        ADDC	A,#((??halTimerRecord >> 8) & 0xff)
        MOV	DPH,A
        MOVX	A,@DPTR
        JNZ	$+5
        LJMP	??HalTimerStart_0 & 0xFFFF
//  318   {
//  319     halTimerSetCount (hwtimerid, timePerTick);
        ; Setup parameters for call to function halTimerSetCount
        MOV	R2,?V0 + 4
        MOV	R3,?V0 + 5
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        MOV	DPTR,#(halTimerSetCount & 0xffff)
        MOV	A,#((halTimerSetCount >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  320     halTimerSetPrescale (hwtimerid, halTimerRecord[hwtimerid].prescale);
        MOV	A,?V0 + 0
        MOV	B,#0xb
        MUL	AB
        ADD	A,#(??halTimerRecord & 0xff)
        MOV	R6,A
        MOV	A,B
        ADDC	A,#((??halTimerRecord >> 8) & 0xff)
        MOV	R7,A
        ; Setup parameters for call to function halTimerSetPrescale
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(halTimerSetPrescale & 0xffff)
        MOV	A,#((halTimerSetPrescale >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  321     halTimerSetOpMode (hwtimerid, halTimerRecord[hwtimerid].opMode);
        ; Setup parameters for call to function halTimerSetOpMode
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(halTimerSetOpMode & 0xffff)
        MOV	A,#((halTimerSetOpMode >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  322     halTimerSetChannelMode (hwtimerid, halTimerRecord[hwtimerid].channelMode);
        ; Setup parameters for call to function halTimerSetChannelMode
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(halTimerSetChannelMode & 0xffff)
        MOV	A,#((halTimerSetChannelMode >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  323 
//  324     if (hwtimerid == HW_TIMER_3)
        MOV	A,#0x1
        XRL	A,?V0 + 0
        JNZ	??HalTimerStart_1
//  325     {
//  326       T3CTL |= HAL_TIMER34_START;
        ORL	0xcb,#0x10
        SJMP	??HalTimerStart_2
//  327     }
//  328     if (hwtimerid == HW_TIMER_4)
??HalTimerStart_1:
        MOV	A,#0x2
        XRL	A,?V0 + 0
        JNZ	??HalTimerStart_2
//  329     {
//  330       T4CTL |= HAL_TIMER34_START;
        ORL	0xeb,#0x10
//  331     }
//  332     HalTimerInterruptEnable (hwtimerid, halTimerRecord[hwtimerid].channelMode,
//  333                              halTimerRecord[hwtimerid].intEnable);
??HalTimerStart_2:
        ; Setup parameters for call to function HalTimerInterruptEnable
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(HalTimerInterruptEnable & 0xffff)
        MOV	A,#((HalTimerInterruptEnable >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  334   }
//  335   else
//  336   {
//  337     return HAL_TIMER_NOT_CONFIGURED;
//  338   }
//  339   return HAL_TIMER_OK;
        MOV	R1,#0x0
        SJMP	??HalTimerStart_3
??HalTimerStart_0:
        MOV	R1,#0x3
        CFI EndBlock cfiBlock15
??HalTimerStart_3:
        REQUIRE ?Subroutine14
        ; // Fall through to label ?Subroutine14
//  340 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock16
//  341 
//  342 /***************************************************************************************************
//  343  * @fn      HalTimerTick
//  344  *
//  345  * @brief   Check the counter for expired counter.
//  346  *
//  347  * @param   None
//  348  *
//  349  * @return  None
//  350  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  351 void HalTimerTick (void)
HalTimerTick:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function HalTimerTick
//  352 {
        FUNCALL HalTimerTick, halProcessTimer1
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalTimerTick, halProcessTimer3
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalTimerTick, halProcessTimer4
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  353   if (!halTimerRecord[HW_TIMER_1].intEnable)
        MOV	DPTR,#(??halTimerRecord + 1)
        MOVX	A,@DPTR
        JNZ	??HalTimerTick_0
//  354   {
//  355     halProcessTimer1 ();
        ; Setup parameters for call to function halProcessTimer1
        MOV	DPTR,#(halProcessTimer1 & 0xffff)
        MOV	A,#((halProcessTimer1 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  356   }
//  357 
//  358   if (!halTimerRecord[HW_TIMER_3].intEnable)
??HalTimerTick_0:
        MOV	DPTR,#(??halTimerRecord + 12)
        MOVX	A,@DPTR
        JNZ	??HalTimerTick_1
//  359   {
//  360     halProcessTimer3 ();
        ; Setup parameters for call to function halProcessTimer3
        MOV	DPTR,#(halProcessTimer3 & 0xffff)
        MOV	A,#((halProcessTimer3 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  361   }
//  362 
//  363   if (!halTimerRecord[HW_TIMER_4].intEnable)
??HalTimerTick_1:
        MOV	DPTR,#(??halTimerRecord + 23)
        MOVX	A,@DPTR
        JNZ	??HalTimerTick_2
//  364   {
//  365     halProcessTimer4 ();
        ; Setup parameters for call to function halProcessTimer4
        MOV	DPTR,#(halProcessTimer4 & 0xffff)
        MOV	A,#((halProcessTimer4 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  366   }
//  367 }
??HalTimerTick_2:
        LJMP	?Subroutine13 & 0xFFFF
        CFI EndBlock cfiBlock17
//  368 
//  369 /***************************************************************************************************
//  370  * @fn      HalTimerStop
//  371  *
//  372  * @brief   Stop the Timer Service
//  373  *
//  374  * @param   timerId - ID of the timer
//  375  *
//  376  * @return  Status - OK or Not OK
//  377  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  378 uint8 HalTimerStop (uint8 timerId)
HalTimerStop:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function HalTimerStop
//  379 {
        FUNCALL HalTimerStop, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalTimerStop, halTimerSetOpMode
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  380   uint8 hwtimerid;
//  381 
//  382   hwtimerid = halTimerRemap (timerId);
//  383 
//  384   switch (hwtimerid)
        ; Setup parameters for call to function halTimerRemap
        MOV	DPTR,#(halTimerRemap & 0xffff)
        MOV	A,#((halTimerRemap >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for HalTimerStop>_0`:
        DB        0
        DB        2
        DW        ??HalTimerStop_0
        DW        ??HalTimerStop_1
        DW        ??HalTimerStop_2
        DW        ??HalTimerStop_3
//  385   {
//  386     case HW_TIMER_1:
//  387       halTimerSetOpMode(HW_TIMER_1, HAL_TIMER_MODE_STOP);
??HalTimerStop_1:
        ; Setup parameters for call to function halTimerSetOpMode
        MOV	R2,#0x3
        MOV	R1,#0x0
        MOV	DPTR,#(halTimerSetOpMode & 0xffff)
        MOV	A,#((halTimerSetOpMode >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  388       break;
//  389     case HW_TIMER_3:
//  390       T3CTL &= ~(HAL_TIMER34_START);
//  391       break;
//  392     case HW_TIMER_4:
//  393       T4CTL &= ~(HAL_TIMER34_START);
//  394       break;
//  395     default:
//  396       return HAL_TIMER_INVALID_ID;
//  397   }
//  398   return HAL_TIMER_OK;
??HalTimerStop_4:
        MOV	R1,#0x0
??HalTimerStop_5:
        LJMP	?Subroutine13 & 0xFFFF
??HalTimerStop_2:
        ANL	0xcb,#0xef
        SJMP	??HalTimerStop_4
??HalTimerStop_3:
        ANL	0xeb,#0xef
        SJMP	??HalTimerStop_4
??HalTimerStop_0:
        MOV	R1,#0x4
        SJMP	??HalTimerStop_5
        CFI EndBlock cfiBlock18
//  399 }
//  400 
//  401 /***************************************************************************************************
//  402  * @fn      halTimerSetCount
//  403  *
//  404  * @brief   Stop the Timer Service
//  405  *
//  406  * @param   hwtimerid - ID of the timer
//  407  *          timerPerTick - Number micro sec per ticks
//  408  *
//  409  * @return  Status - OK or Not OK
//  410  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  411 uint8 halTimerSetCount (uint8 hwtimerid, uint32 timePerTick)
halTimerSetCount:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function halTimerSetCount
//  412 {
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
//  413   uint16  count;
//  414   uint8   high, low;
//  415 
//  416   /* Load count = ((sec/tick) x clock) / prescale */
//  417   count = (uint16)((timePerTick * halTimerRecord[hwtimerid].clock) / halTimerRecord[hwtimerid].prescaleVal);
        MOV	DPL,R1
        MOV	R2,DPL
        MOV	A,R2
        MOV	B,#0xb
        MUL	AB
        ADD	A,#(??halTimerRecord & 0xff)
        MOV	R4,A
        MOV	A,B
        ADDC	A,#((??halTimerRecord >> 8) & 0xff)
        MOV	R5,A
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	?V0 + 1,#0x0
        MOV	?V0 + 2,#0x0
        MOV	?V0 + 3,#0x0
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?L_MUL
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?UL_DIV_MOD
//  418   high = (uint8) (count >> 8);
//  419   low = (uint8) count;
//  420 
//  421   *(halTimerChannel[hwtimerid].TxCCH) = high;
        MOV	A,R2
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_28:
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV	A,?V0 + 5
        LCALL	?Subroutine1 & 0xFFFF
//  422   *(halTimerChannel[hwtimerid].TxCCL) = low;
??CrossCallReturnLabel_14:
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV	A,?V0 + 4
        MOVX	@DPTR,A
//  423 
//  424   return HAL_TIMER_OK;
        MOV	R1,#0x0
        LJMP	?Subroutine14 & 0xFFFF
        CFI EndBlock cfiBlock19
//  425 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_39:
        INC	DPTR
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_13
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_14
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_12
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX	@DPTR,A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
//  426 
//  427 /***************************************************************************************************
//  428  * @fn      halTimerSetPrescale
//  429  *
//  430  * @brief   Stop the Timer Service
//  431  *
//  432  * @param   hwtimerid - ID of the timer
//  433  *          prescale - Prescale of the clock
//  434  *
//  435  * @return  Status - OK or Not OK
//  436  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  437 uint8 halTimerSetPrescale (uint8 hwtimerid, uint8 prescale)
halTimerSetPrescale:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function halTimerSetPrescale
//  438 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  439   switch (hwtimerid)
        MOV	A,R1
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetPrescale>_0`:
        DB        0
        DB        2
        DW        ??halTimerSetPrescale_0
        DW        ??halTimerSetPrescale_1
        DW        ??halTimerSetPrescale_2
        DW        ??halTimerSetPrescale_3
//  440   {
//  441     case HW_TIMER_1:
//  442       T1CTL &= ~(HAL_TIMER1_16_TC_BITS);
??halTimerSetPrescale_1:
        ANL	0xe4,#0xf3
        MOV	A,0xe4
//  443       T1CTL |= prescale;
        MOV	A,R2
        ORL	A,0xe4
        MOV	0xe4,A
//  444       break;
//  445     case HW_TIMER_3:
//  446       T3CTL &= ~(HAL_TIMER34_8_TC_BITS);
//  447       T3CTL |= prescale;
//  448       break;
//  449     case HW_TIMER_4:
//  450       T4CTL &= ~(HAL_TIMER34_8_TC_BITS);
//  451       T4CTL |= prescale;
//  452       break;
//  453     default:
//  454       return HAL_TIMER_INVALID_ID;
//  455   }
//  456   return HAL_TIMER_OK;
??halTimerSetPrescale_4:
        MOV	R1,#0x0
??halTimerSetPrescale_5:
        LJMP	?Subroutine13 & 0xFFFF
??halTimerSetPrescale_2:
        ANL	0xcb,#0x1f
        MOV	A,0xcb
        MOV	A,R2
        ORL	A,0xcb
        MOV	0xcb,A
        SJMP	??halTimerSetPrescale_4
??halTimerSetPrescale_3:
        ANL	0xeb,#0x1f
        MOV	A,0xeb
        MOV	A,R2
        ORL	A,0xeb
        MOV	0xeb,A
        SJMP	??halTimerSetPrescale_4
??halTimerSetPrescale_0:
        MOV	R1,#0x4
        SJMP	??halTimerSetPrescale_5
        CFI EndBlock cfiBlock29
//  457 }
//  458 
//  459 /***************************************************************************************************
//  460  * @fn      halTimerSetOpMode
//  461  *
//  462  * @brief   Setup operate modes
//  463  *
//  464  * @param   hwtimerid - ID of the timer
//  465  *          opMode - operation mode of the timer
//  466  *
//  467  * @return  Status - OK or Not OK
//  468  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  469 uint8 halTimerSetOpMode (uint8 hwtimerid, uint8 opMode)
halTimerSetOpMode:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function halTimerSetOpMode
//  470 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  471   /* Load Waveform Generation Mode */
//  472   switch (opMode)
        MOV	A,R2
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetOpMode>_0`:
        DB        1
        DB        2
        DW        ??halTimerSetOpMode_0
        DW        ??halTimerSetOpMode_1
        DW        ??halTimerSetOpMode_2
        DW        ??halTimerSetOpMode_3
//  473   {
//  474     case HAL_TIMER_MODE_NORMAL:
//  475       switch (hwtimerid)
??halTimerSetOpMode_1:
        MOV	A,R1
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetOpMode>_1`:
        DB        0
        DB        2
        DW        ??halTimerSetOpMode_4
        DW        ??halTimerSetOpMode_5
        DW        ??halTimerSetOpMode_6
        DW        ??halTimerSetOpMode_7
//  476       {
//  477         case HW_TIMER_1:
//  478           T1CTL &= ~(HAL_TIMER1_OPMODE_BITS);
??halTimerSetOpMode_5:
        ANL	0xe4,#0xfc
        MOV	A,0xe4
//  479           T1CTL |= HAL_TIMER1_OPMODE_FREERUN;
        ORL	0xe4,#0x1
//  480           break;
//  481         case HW_TIMER_3:
//  482           T3CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  483           T3CTL |= HAL_TIMER34_OPMODE_FREERUN;
//  484           break;
//  485         case HW_TIMER_4:
//  486           T4CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  487           T4CTL |= HAL_TIMER34_OPMODE_FREERUN;
//  488           break;
//  489         default:
//  490           return HAL_TIMER_INVALID_ID;
//  491       }
//  492       break;
//  493 
//  494     case HAL_TIMER_MODE_CTC:
//  495       switch (hwtimerid)
//  496       {
//  497         case HW_TIMER_1:
//  498           T1CTL &= ~(HAL_TIMER1_OPMODE_BITS);
//  499           T1CTL |= HAL_TIMER1_OPMODE_MODULO;
//  500           break;
//  501         case HW_TIMER_3:
//  502           T3CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  503           T3CTL |= HAL_TIMER34_OPMODE_MODULO;
//  504           break;
//  505         case HW_TIMER_4:
//  506           T4CTL &= ~(HAL_TIMER34_OPMODE_BITS);
//  507           T4CTL |= HAL_TIMER34_OPMODE_MODULO;
//  508           break;
//  509         default:
//  510           return HAL_TIMER_INVALID_ID;
//  511       }
//  512       break;
//  513 
//  514     case HAL_TIMER_MODE_STOP:
//  515       if (hwtimerid == HW_TIMER_1)
//  516       {
//  517         T1CTL &= ~(HAL_TIMER1_OPMODE_BITS);
//  518         T1CTL |= HAL_TIMER1_OPMODE_STOP;
//  519       }
//  520       break;
//  521 
//  522     default:
//  523       return HAL_TIMER_INVALID_OP_MODE;
//  524   }
//  525   return HAL_TIMER_OK;
??halTimerSetOpMode_8:
        MOV	R1,#0x0
??halTimerSetOpMode_9:
        LJMP	?Subroutine13 & 0xFFFF
??halTimerSetOpMode_6:
        ANL	0xcb,#0xfc
        MOV	A,0xcb
        MOV	0xcb,0xcb
        SJMP	??halTimerSetOpMode_8
??halTimerSetOpMode_7:
        ANL	0xeb,#0xfc
        MOV	A,0xeb
        MOV	0xeb,0xeb
        SJMP	??halTimerSetOpMode_8
??halTimerSetOpMode_4:
        MOV	R1,#0x4
        SJMP	??halTimerSetOpMode_9
??halTimerSetOpMode_2:
        MOV	A,R1
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetOpMode>_2`:
        DB        0
        DB        2
        DW        ??halTimerSetOpMode_4
        DW        ??halTimerSetOpMode_10
        DW        ??halTimerSetOpMode_11
        DW        ??halTimerSetOpMode_12
??halTimerSetOpMode_10:
        ANL	0xe4,#0xfc
        MOV	A,0xe4
        ORL	0xe4,#0x2
        SJMP	??halTimerSetOpMode_8
??halTimerSetOpMode_11:
        ANL	0xcb,#0xfc
        MOV	A,0xcb
        ORL	0xcb,#0x2
        SJMP	??halTimerSetOpMode_8
??halTimerSetOpMode_12:
        ANL	0xeb,#0xfc
        MOV	A,0xeb
        ORL	0xeb,#0x2
        SJMP	??halTimerSetOpMode_8
??halTimerSetOpMode_3:
        MOV	A,R1
        JNZ	??halTimerSetOpMode_8
        ANL	0xe4,#0xfc
        MOV	A,0xe4
        MOV	0xe4,0xe4
        SJMP	??halTimerSetOpMode_8
??halTimerSetOpMode_0:
        MOV	R1,#0x6
        SJMP	??halTimerSetOpMode_9
        CFI EndBlock cfiBlock30
//  526 }
//  527 
//  528 /***************************************************************************************************
//  529  * @fn      halTimerSetChannelMode
//  530  *
//  531  * @brief   Setup channel modes.  Currently, only output compare mode is supported.  Input capture
//  532  *          mode is NOT supported.  Additionally, mapping timer channel inputs/outputs to I/O pins
//  533  *          is NOT supported.
//  534  *
//  535  * @param   hwtimerid - ID of the timer
//  536  *          channelMode - channel mode of the timer
//  537  *
//  538  * @return  Status - OK or Not OK
//  539  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  540 uint8 halTimerSetChannelMode (uint8 hwtimerid, uint8 channelMode)
halTimerSetChannelMode:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function halTimerSetChannelMode
//  541 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  542   switch (channelMode)
        MOV	A,R2
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for halTimerSetChannelMode>_0`:
        DB        1
        DB        1
        DW        ??halTimerSetChannelMode_0
        DW        ??halTimerSetChannelMode_1
        DW        ??halTimerSetChannelMode_2
//  543   {
//  544     case HAL_TIMER_CH_MODE_OUTPUT_COMPARE:
//  545       *(halTimerChannel[hwtimerid].TxCCTL) &= ~(T134CCTL_CMP_BITS);
??halTimerSetChannelMode_2:
        MOV	A,R1
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_35:
        MOVX	A,@DPTR
        ANL	A,#0xc7
        MOVX	@DPTR,A
//  546       *(halTimerChannel[hwtimerid].TxCCTL) |= (T134CCTL_CMP_OC | T134CCTL_MODE);
        MOV	DPL,R0
        MOV	DPH,R1
        LCALL	??Subroutine2_0 & 0xFFFF
??CrossCallReturnLabel_15:
        ORL	A,#0x1c
        MOVX	@DPTR,A
//  547       break;
//  548 
//  549     case HAL_TIMER_CH_MODE_INPUT_CAPTURE:       /* Not Supported */
//  550 /*
//  551       *(halTimerChannel[hwtimerid].TxCCTL) &= ~(T134CCTL_CAP_BITS | T134CCTL_MODE);
//  552       *(halTimerChannel[hwtimerid].TxCCTL) |= T134CCTL_CAP_RE;
//  553 */
//  554       break;
//  555 
//  556     default:
//  557       return HAL_TIMER_INVALID_CH_MODE;
//  558   }
//  559   return HAL_TIMER_OK;
??halTimerSetChannelMode_1:
        MOV	R1,#0x0
??halTimerSetChannelMode_3:
        LJMP	?Subroutine13 & 0xFFFF
??halTimerSetChannelMode_0:
        MOV	R1,#0x5
        SJMP	??halTimerSetChannelMode_3
        CFI EndBlock cfiBlock31
//  560 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond33) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond33) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond33) CFA_SP SP+-5
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R2
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond36) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond36) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond36) CFA_SP SP+-5
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOV	B,#0xa
        MUL	AB
        ADD	A,#(??halTimerChannel & 0xff)
        MOV	R0,A
        MOV	A,B
        ADDC	A,#((??halTimerChannel >> 8) & 0xff)
        MOV	R1,A
        MOV	DPL,R0
        MOV	DPH,R1
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37
//  561 
//  562 /***************************************************************************************************
//  563  * @fn      HalTimerInterruptEnable
//  564  *
//  565  * @brief   Setup operate modes
//  566  *
//  567  * @param   hwtimerid - ID of the timer
//  568  *          channelMode - channel mode
//  569  *          enable - TRUE or FALSE
//  570  *
//  571  * @return  Status - OK or Not OK
//  572  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  573 uint8 HalTimerInterruptEnable (uint8 hwtimerid, uint8 channelMode, bool enable)
HalTimerInterruptEnable:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI Function HalTimerInterruptEnable
//  574 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  575   switch (channelMode)
        MOV	A,R2
        LCALL	?UC_SWITCH_SPARSE
`?<Jumptable for HalTimerInterruptEnable>_0`:
        DB        1
        DB        1
        DB        2
        DW        ??HalTimerInterruptEnable_0
        DB        1
        DB        4
        DW        ??HalTimerInterruptEnable_1
        DW        ??HalTimerInterruptEnable_2
//  576   {
//  577     case HAL_TIMER_CH_MODE_OVERFLOW:
//  578 
//  579       if (enable)
??HalTimerInterruptEnable_1:
        MOV	A,R3
        MOV	DPL,R1
        JZ	??HalTimerInterruptEnable_3
//  580       {
//  581         *(halTimerChannel[hwtimerid].TxOVF) |= halTimerChannel[hwtimerid].ovfbit;
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV	R4,A
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	??Subroutine2_0 & 0xFFFF
??CrossCallReturnLabel_16:
        ORL	A,R4
??HalTimerInterruptEnable_4:
        MOVX	@DPTR,A
//  582       }
//  583       else
//  584       {
//  585         *(halTimerChannel[hwtimerid].TxOVF) &= ~(halTimerChannel[hwtimerid].ovfbit);
//  586       }
//  587       break;
//  588 
//  589     case HAL_TIMER_CH_MODE_OUTPUT_COMPARE:
//  590     case HAL_TIMER_CH_MODE_INPUT_CAPTURE:
//  591 
//  592       if (enable)
//  593       {
//  594         *(halTimerChannel[hwtimerid].TxCCTL) |= T134CCTL_IM;
//  595       }
//  596       else
//  597       {
//  598         *(halTimerChannel[hwtimerid].TxCCTL) &= ~(T134CCTL_IM);
//  599       }
//  600       break;
//  601 
//  602     default:
//  603       return HAL_TIMER_INVALID_CH_MODE;
//  604   }
//  605 
//  606   if (halTimerRecord[hwtimerid].intEnable)
        MOV	A,R1
        MOV	B,#0xb
        MUL	AB
        ADD	A,#((??halTimerRecord + 1) & 0xff)
        MOV	DPL,A
        MOV	A,B
        ADDC	A,#(((??halTimerRecord + 1) >> 8) & 0xff)
        MOV	DPH,A
        MOVX	A,@DPTR
        JZ	??HalTimerInterruptEnable_5
//  607   {
//  608     IEN1 |= halTimerChannel[hwtimerid].intbit;
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_30:
        ORL	A,0xb8
        SJMP	??HalTimerInterruptEnable_6
//  609   }
??HalTimerInterruptEnable_3:
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_27:
        CPL	A
        MOV	R4,A
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	??Subroutine2_0 & 0xFFFF
??CrossCallReturnLabel_17:
        ANL	A,R4
        SJMP	??HalTimerInterruptEnable_4
??HalTimerInterruptEnable_0:
        MOV	A,R3
        JZ	??HalTimerInterruptEnable_7
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_18:
        SETB	0xE0 /* A   */.6
        SJMP	??HalTimerInterruptEnable_4
??HalTimerInterruptEnable_7:
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_19:
        CLR	0xE0 /* A   */.6
        SJMP	??HalTimerInterruptEnable_4
??HalTimerInterruptEnable_2:
        MOV	R1,#0x5
        SJMP	??HalTimerInterruptEnable_8
//  610   else
//  611   {
//  612     IEN1 &= ~(halTimerChannel[hwtimerid].intbit);
??HalTimerInterruptEnable_5:
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_31:
        CPL	A
        ANL	A,0xb8
??HalTimerInterruptEnable_6:
        MOV	0xb8,A
//  613   }
//  614   return HAL_TIMER_OK;
        MOV	R1,#0x0
??HalTimerInterruptEnable_8:
        LJMP	?Subroutine13 & 0xFFFF
        CFI EndBlock cfiBlock38
//  615 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond40) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond40) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond40) CFA_SP SP+-5
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOV	A,R1
        MOV	B,#0xa
        MUL	AB
        ADD	A,#((??halTimerChannel + 9) & 0xff)
        MOV	DPL,A
        MOV	A,B
        ADDC	A,#(((??halTimerChannel + 9) >> 8) & 0xff)
        MOV	DPH,A
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond43) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond43) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond43) CFA_SP SP+-5
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOV	A,DPL
        MOV	B,#0xa
        MUL	AB
        ADD	A,#(??halTimerChannel & 0xff)
        MOV	R2,A
        MOV	A,B
        ADDC	A,#((??halTimerChannel >> 8) & 0xff)
        MOV	R3,A
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond46) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond46) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond46) CFA_SP SP+-5
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOV	A,R1
        MOV	B,#0xa
        MUL	AB
        ADD	A,#(??halTimerChannel & 0xff)
        MOV	DPL,A
        MOV	A,B
        ADDC	A,#((??halTimerChannel >> 8) & 0xff)
        MOV	DPH,A
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond48) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond48) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond48) CFA_SP SP+-5
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond49) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond49) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond49) CFA_SP SP+-5
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond50) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond50) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond50) CFA_SP SP+-5
??Subroutine2_0:
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_41:
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_18
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_17
        CFI (cfiCond52) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond52) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond52) CFA_SP SP+-5
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_15
        CFI (cfiCond53) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond53) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond53) CFA_SP SP+-5
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_19
        CFI (cfiCond54) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond54) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond54) CFA_SP SP+-5
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_16
        CFI (cfiCond56) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond56) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond56) CFA_SP SP+-5
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
//  616 
//  617 /***************************************************************************************************
//  618  * @fn      halTimerSendCallBack
//  619  *
//  620  * @brief   Send Callback back to the caller
//  621  *
//  622  * @param   timerId - ID of the timer
//  623  *          channel - channel where the interrupt occurs
//  624  *          channelMode - channel mode
//  625  *
//  626  *
//  627  * @return  None
//  628  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  629 void halTimerSendCallBack (uint8 timerId, uint8 channel, uint8 channelMode)
halTimerSendCallBack:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function halTimerSendCallBack
//  630 {
        FUNCALL halTimerSendCallBack, halTimerRemap
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        MOV	A,#-0xb
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV	A,R1
        MOV	R7,A
        MOV	?V0 + 1,R2
        MOV	?V0 + 0,R3
//  631   uint8 hwtimerid;
//  632 
//  633   hwtimerid = halTimerRemap (timerId);
        ; Setup parameters for call to function halTimerRemap
        MOV	DPTR,#(halTimerRemap & 0xffff)
        MOV	A,#((halTimerRemap >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	?V0 + 2,A
//  634 
//  635   if (halTimerRecord[hwtimerid].callBackFunc)
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_32:
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        MOV	A,R4
        ORL	A,R5
        ORL	A,R6
        JZ	??halTimerSendCallBack_0
//  636     (halTimerRecord[hwtimerid].callBackFunc) (timerId, channel, channelMode);
        ; Setup parameters for indirect call
        MOV	R3,?V0 + 0
        MOV	R2,?V0 + 1
        MOV	A,R7
        MOV	R1,A
        MOV	A,?V0 + 2
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_33:
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPL,R4
        MOV	DPH,R5
        LCALL	?BCALL               ; Banked call to: DPTR()
//  637 }
??halTimerSendCallBack_0:
        MOV	R7,#0x3
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        MOV	B,#0xb
        MUL	AB
        ADD	A,#((??halTimerRecord + 8) & 0xff)
        MOV	DPL,A
        MOV	A,B
        ADDC	A,#(((??halTimerRecord + 8) >> 8) & 0xff)
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61
//  638 
//  639 /***************************************************************************************************
//  640  * @fn      halTimerRemap
//  641  *
//  642  * @brief   Maps API HAL_TIMER_ID to HW Timer ID.
//  643  *          HAL_TIMER_0 --> HW Timer 3
//  644  *          HAL_TIMER_2 --> HW Timer 4
//  645  *          HAL_TIMER_3 --> HW Timer 1
//  646  *
//  647  * @param   timerId - ID of the timer
//  648  *
//  649  * @return  HW timer ID
//  650  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  651 uint8 halTimerRemap (uint8 timerId)
halTimerRemap:
        CFI Block cfiBlock62 Using cfiCommon0
        CFI Function halTimerRemap
//  652 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  653   switch (timerId)
        MOV	A,R1
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for halTimerRemap>_0`:
        DB        0
        DB        3
        DW        ??halTimerRemap_0
        DW        ??halTimerRemap_1
        DW        ??halTimerRemap_0
        DW        ??halTimerRemap_2
        DW        ??halTimerRemap_3
//  654   {
//  655     case HAL_TIMER_0:
//  656       return HW_TIMER_3;
??halTimerRemap_1:
        MOV	R1,#0x1
        SJMP	??halTimerRemap_4
//  657     case HAL_TIMER_2:
//  658       return HW_TIMER_4;
??halTimerRemap_2:
        MOV	R1,#0x2
        SJMP	??halTimerRemap_4
//  659     case HAL_TIMER_3:
//  660       return HW_TIMER_1;
??halTimerRemap_3:
        MOV	R1,#0x0
        SJMP	??halTimerRemap_4
//  661     default:
//  662       return HW_TIMER_INVALID;
??halTimerRemap_0:
        MOV	R1,#0x3
        CFI EndBlock cfiBlock62
??halTimerRemap_4:
        REQUIRE ?Subroutine13
        ; // Fall through to label ?Subroutine13
//  663   }
//  664 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock63
//  665 
//  666 /***************************************************************************************************
//  667  * @fn      halProcessTimer1
//  668  *
//  669  * @brief   Processes Timer 1 Events.
//  670  *
//  671  * @param
//  672  *
//  673  * @return
//  674  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  675 void halProcessTimer1 (void)
halProcessTimer1:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function halProcessTimer1
//  676 {
        FUNCALL halProcessTimer1, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer1, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer1, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  677   if (halTimerRecord[halTimerRemap(HAL_TIMER_3)].channelMode == HAL_TIMER_CH_MODE_OUTPUT_COMPARE)
        ; Setup parameters for call to function halTimerRemap
        MOV	R1,#0x3
        MOV	DPTR,#(halTimerRemap & 0xffff)
        MOV	A,#((halTimerRemap >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_20:
        JNZ	??halProcessTimer1_0
//  678   {
//  679     if (T1CTL & T1CTL_CH0IF)
        MOV	A,0xe4
        MOV	C,0xE0 /* A   */.5
        JNC	??halProcessTimer1_1
//  680     {
//  681       T1CTL &= ~(T1CTL_CH0IF);
        ANL	0xe4,#0xdf
//  682       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_A, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV	R3,#0x2
        MOV	R2,#0x2
        MOV	R1,#0x3
        MOV	DPTR,#(halTimerSendCallBack & 0xffff)
        MOV	A,#((halTimerSendCallBack >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  683     }
//  684     if (T1CTL & T1CTL_CH1IF)
??halProcessTimer1_1:
        MOV	A,0xe4
        MOV	C,0xE0 /* A   */.6
        JNC	??halProcessTimer1_2
//  685     {
//  686       T1CTL &= ~(T1CTL_CH1IF);
        ANL	0xe4,#0xbf
//  687       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_B, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV	R3,#0x2
        MOV	R2,#0x4
        MOV	R1,#0x3
        MOV	DPTR,#(halTimerSendCallBack & 0xffff)
        MOV	A,#((halTimerSendCallBack >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  688     }
//  689     if (T1CTL & T1CTL_CH2IF)
??halProcessTimer1_2:
        MOV	A,0xe4
        MOV	C,0xE0 /* A   */.7
        JNC	??halProcessTimer1_3
//  690     {
//  691       T1CTL &= ~(T1CTL_CH2IF);
        ANL	0xe4,#0x7f
//  692       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_C, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV	R3,#0x2
        MOV	R2,#0x8
        SJMP	??halProcessTimer1_4
//  693     }
//  694   }
//  695   else if (halTimerRecord[halTimerRemap(HAL_TIMER_3)].channelMode == HAL_TIMER_CH_MODE_OVERFLOW)
??halProcessTimer1_0:
        ; Setup parameters for call to function halTimerRemap
        MOV	R1,#0x3
        MOV	DPTR,#(halTimerRemap & 0xffff)
        MOV	A,#((halTimerRemap >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_23:
        JNZ	??halProcessTimer1_3
//  696   {
//  697     if (T1CTL & T1CTL_OVFIF)
        MOV	A,0xe4
        MOV	C,0xE0 /* A   */.4
        JNC	??halProcessTimer1_3
//  698     {
//  699       T1CTL &= ~(T1CTL_OVFIF);
        ANL	0xe4,#0xef
//  700       halTimerSendCallBack (HAL_TIMER_3, HAL_TIMER_CHANNEL_SINGLE, HAL_TIMER_CH_MODE_OVERFLOW);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV	R3,#0x4
        MOV	R2,#0x1
??halProcessTimer1_4:
        MOV	R1,#0x3
        MOV	DPTR,#(halTimerSendCallBack & 0xffff)
        MOV	A,#((halTimerSendCallBack >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  701     }
//  702   }
//  703 }
??halProcessTimer1_3:
        SJMP	?Subroutine13
        CFI EndBlock cfiBlock64
//  704 
//  705 /***************************************************************************************************
//  706  * @fn      halProcessTimer3
//  707  *
//  708  * @brief   Processes Timer 3 Events.
//  709  *
//  710  * @param
//  711  *
//  712  * @return
//  713  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  714 void halProcessTimer3 (void)
halProcessTimer3:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function halProcessTimer3
//  715 {
        FUNCALL halProcessTimer3, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer3, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer3, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer3, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer3, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  716   if (halTimerRecord[halTimerRemap(HAL_TIMER_0)].channelMode == HAL_TIMER_CH_MODE_OUTPUT_COMPARE)
        ; Setup parameters for call to function halTimerRemap
        MOV	R1,#0x0
        MOV	DPTR,#(halTimerRemap & 0xffff)
        MOV	A,#((halTimerRemap >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_21:
        JNZ	??halProcessTimer3_0
//  717   {
//  718     if (TIMIF & TIMIF_T3CH0IF)
        MOV	C,0xd8.1
        JNC	??halProcessTimer3_1
//  719     {
//  720       TIMIF &= ~(TIMIF_T3CH0IF);
        CLR	0xd8.1
//  721       halTimerSendCallBack (HAL_TIMER_0, HAL_TIMER_CHANNEL_A, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV	R3,#0x2
        MOV	R2,#0x2
        MOV	R1,#0x0
        MOV	DPTR,#(halTimerSendCallBack & 0xffff)
        MOV	A,#((halTimerSendCallBack >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  722     }
//  723     if (TIMIF & TIMIF_T3CH1IF)
??halProcessTimer3_1:
        MOV	C,0xd8.2
        JNC	??halProcessTimer3_2
//  724     {
//  725       TIMIF &= ~(TIMIF_T3CH1IF);
        CLR	0xd8.2
//  726       halTimerSendCallBack (HAL_TIMER_0, HAL_TIMER_CHANNEL_B, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV	R3,#0x2
        MOV	R2,#0x4
        SJMP	??halProcessTimer3_3
//  727     }
//  728   }
//  729   else if (halTimerRecord[halTimerRemap(HAL_TIMER_0)].channelMode == HAL_TIMER_CH_MODE_OVERFLOW)
??halProcessTimer3_0:
        ; Setup parameters for call to function halTimerRemap
        MOV	R1,#0x0
        MOV	DPTR,#(halTimerRemap & 0xffff)
        MOV	A,#((halTimerRemap >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_24:
        JNZ	??halProcessTimer3_2
//  730   {
//  731     if (TIMIF & TIMIF_T3OVFIF)
        MOV	C,0xd8.0
        JNC	??halProcessTimer3_2
//  732     {
//  733       TIMIF &= ~(TIMIF_T3OVFIF);
        CLR	0xd8.0
//  734       halTimerSendCallBack (HAL_TIMER_0, HAL_TIMER_CHANNEL_SINGLE, HAL_TIMER_CH_MODE_OVERFLOW);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV	R3,#0x4
        MOV	R2,#0x1
??halProcessTimer3_3:
        MOV	R1,#0x0
        MOV	DPTR,#(halTimerSendCallBack & 0xffff)
        MOV	A,#((halTimerSendCallBack >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  735     }
//  736   }
//  737 }
??halProcessTimer3_2:
        LJMP	?Subroutine13 & 0xFFFF
        CFI EndBlock cfiBlock65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond67) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond67) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond67) CFA_SP SP+-5
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond68) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond68) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond68) CFA_SP SP+-5
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_37:
        XRL	A,#0x4
        RET
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond71) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond71) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond71) CFA_SP SP+-5
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond72) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond72) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond72) CFA_SP SP+-5
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_36:
        XRL	A,#0x2
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_22
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_25
        CFI (cfiCond75) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond75) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond75) CFA_SP SP+-5
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_24
        CFI (cfiCond76) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond76) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond76) CFA_SP SP+-5
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_21
        CFI (cfiCond77) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond77) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond77) CFA_SP SP+-5
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_20
        CFI (cfiCond78) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond78) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond78) CFA_SP SP+-5
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_23
        CFI (cfiCond79) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond79) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond79) CFA_SP SP+-5
        CFI Block cfiPicker80 Using cfiCommon1
        CFI (cfiPicker80) NoFunction
        CFI (cfiPicker80) Picker
        MOV	A,R1
        MOV	B,#0xb
        MUL	AB
        ADD	A,#((??halTimerRecord + 4) & 0xff)
        MOV	DPL,A
        MOV	A,B
        ADDC	A,#(((??halTimerRecord + 4) >> 8) & 0xff)
        MOV	DPH,A
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiPicker80
//  738 
//  739 /***************************************************************************************************
//  740  * @fn      halProcessTimer4
//  741  *
//  742  * @brief   Processes Timer 4 Events.
//  743  *
//  744  * @param
//  745  *
//  746  * @return
//  747  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  748 void halProcessTimer4 (void)
halProcessTimer4:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI Function halProcessTimer4
//  749 {
        FUNCALL halProcessTimer4, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer4, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer4, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer4, halTimerRemap
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL halProcessTimer4, halTimerSendCallBack
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  750   if (halTimerRecord[halTimerRemap(HAL_TIMER_2)].channelMode == HAL_TIMER_CH_MODE_OUTPUT_COMPARE)
        ; Setup parameters for call to function halTimerRemap
        MOV	R1,#0x2
        MOV	DPTR,#(halTimerRemap & 0xffff)
        MOV	A,#((halTimerRemap >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_22:
        JNZ	??halProcessTimer4_0
//  751   {
//  752     if (TIMIF & TIMIF_T4CH0IF)
        MOV	C,0xd8.4
        JNC	??halProcessTimer4_1
//  753     {
//  754       TIMIF &= ~(TIMIF_T4CH0IF);
        CLR	0xd8.4
//  755       halTimerSendCallBack (HAL_TIMER_2, HAL_TIMER_CHANNEL_A, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV	R3,#0x2
        MOV	R2,#0x2
        MOV	R1,#0x2
        MOV	DPTR,#(halTimerSendCallBack & 0xffff)
        MOV	A,#((halTimerSendCallBack >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  756     }
//  757     if (TIMIF & TIMIF_T4CH1IF)
??halProcessTimer4_1:
        MOV	C,0xd8.5
        JNC	??halProcessTimer4_2
//  758     {
//  759       TIMIF &= ~(TIMIF_T4CH1IF);
        CLR	0xd8.5
//  760       halTimerSendCallBack (HAL_TIMER_2, HAL_TIMER_CHANNEL_B, HAL_TIMER_CH_MODE_OUTPUT_COMPARE);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV	R3,#0x2
        MOV	R2,#0x4
        SJMP	??halProcessTimer4_3
//  761     }
//  762   }
//  763   else if (halTimerRecord[halTimerRemap(HAL_TIMER_2)].channelMode == HAL_TIMER_CH_MODE_OVERFLOW)
??halProcessTimer4_0:
        ; Setup parameters for call to function halTimerRemap
        MOV	R1,#0x2
        MOV	DPTR,#(halTimerRemap & 0xffff)
        MOV	A,#((halTimerRemap >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_25:
        JNZ	??halProcessTimer4_2
//  764   if (TIMIF & TIMIF_T4OVFIF)
        MOV	C,0xd8.3
        JNC	??halProcessTimer4_2
//  765   {
//  766     TIMIF &= ~(TIMIF_T4OVFIF);
        CLR	0xd8.3
//  767     halTimerSendCallBack (HAL_TIMER_2, HAL_TIMER_CHANNEL_SINGLE, HAL_TIMER_CH_MODE_OVERFLOW);
        ; Setup parameters for call to function halTimerSendCallBack
        MOV	R3,#0x4
        MOV	R2,#0x1
??halProcessTimer4_3:
        MOV	R1,#0x2
        MOV	DPTR,#(halTimerSendCallBack & 0xffff)
        MOV	A,#((halTimerSendCallBack >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  768   }
//  769 }
??halProcessTimer4_2:
        LJMP	?Subroutine13 & 0xFFFF
        CFI EndBlock cfiBlock81
//  770 
//  771 /***************************************************************************************************
//  772  *                                    INTERRUPT SERVICE ROUTINE
//  773  ***************************************************************************************************/
//  774 
//  775 /**************************************************************************************************
//  776  * @fn      halTimer1Isr
//  777  *
//  778  * @brief   Timer 1 ISR
//  779  *
//  780  * @param
//  781  *
//  782  * @return
//  783  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  784 HAL_ISR_FUNCTION( halTimer1Isr, T1_VECTOR )
halTimer1Isr:
        CFI Block cfiBlock82 Using cfiCommon1
        CFI Function halTimer1Isr
//  785 {
        FUNCALL halTimer1Isr, halProcessTimer1
        LOCFRAME ISTACK, 15, STACK
        ARGFRAME ISTACK, 15, STACK
        PUSH	A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV	A,#-0xe
        LCALL	?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  786   halProcessTimer1 ();
        ; Setup parameters for call to function halProcessTimer1
        MOV	DPTR,#(halProcessTimer1 & 0xffff)
        MOV	A,#((halProcessTimer1 >> 16) & 0xff)
        CFI EndBlock cfiBlock82
        REQUIRE ?Subroutine15
        ; // Fall through to label ?Subroutine15
//  787 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiBlock83 Using cfiCommon1
        CFI NoFunction
        CFI CFA_SP SP+-3
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI A Frame(CFA_SP, 3)
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	R7,#0x1
        LJMP	?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock83
//  788 
//  789 /**************************************************************************************************
//  790  * @fn      halTimer3Isr
//  791  *
//  792  * @brief   Timer 3 ISR
//  793  *
//  794  * @param
//  795  *
//  796  * @return
//  797  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  798 HAL_ISR_FUNCTION( halTimer3Isr, T3_VECTOR )
halTimer3Isr:
        CFI Block cfiBlock84 Using cfiCommon1
        CFI Function halTimer3Isr
//  799 {
        FUNCALL halTimer3Isr, halProcessTimer3
        LOCFRAME ISTACK, 15, STACK
        ARGFRAME ISTACK, 15, STACK
        PUSH	A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV	A,#-0xe
        LCALL	?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  800   halProcessTimer3 ();
        ; Setup parameters for call to function halProcessTimer3
        MOV	DPTR,#(halProcessTimer3 & 0xffff)
        MOV	A,#((halProcessTimer3 >> 16) & 0xff)
        SJMP	?Subroutine15
        CFI EndBlock cfiBlock84
//  801 }
//  802 
//  803 /**************************************************************************************************
//  804  * @fn      halTimer4Isr
//  805  *
//  806  * @brief   Timer 4 ISR
//  807  *
//  808  * @param
//  809  *
//  810  * @return
//  811  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  812 HAL_ISR_FUNCTION( halTimer4Isr, T4_VECTOR )
halTimer4Isr:
        CFI Block cfiBlock85 Using cfiCommon1
        CFI Function halTimer4Isr
//  813 {
        FUNCALL halTimer4Isr, halProcessTimer4
        LOCFRAME ISTACK, 15, STACK
        ARGFRAME ISTACK, 15, STACK
        PUSH	A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV	A,#-0xe
        LCALL	?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  814   halProcessTimer4 ();
        ; Setup parameters for call to function halProcessTimer4
        MOV	DPTR,#(halProcessTimer4 & 0xffff)
        MOV	A,#((halProcessTimer4 >> 16) & 0xff)
        SJMP	?Subroutine15
        CFI EndBlock cfiBlock85
//  815 }

        COMMON INTVEC:CODE:ROOT(0)
        ORG 75
`halTimer1Isr??INTVEC 75`:
        LJMP       (halTimer1Isr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 91
`halTimer3Isr??INTVEC 91`:
        LJMP       (halTimer3Isr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 99
`halTimer4Isr??INTVEC 99`:
        LJMP       (halTimer4Isr)

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d8H
// union <unnamed> volatile __sfr _A_TIMIF
_A_TIMIF:
        DS 1

        END
//  816 
//  817 /***************************************************************************************************
//  818 ***************************************************************************************************/
//  819 
// 
// 1 680 bytes in segment BANKED_CODE
//     9 bytes in segment INTVEC
//    48 bytes in segment NEAR_CODE
//    12 bytes in segment SFR_AN
//    63 bytes in segment XDATA_Z
// 
// 1 728 bytes of CODE  memory (+  9 bytes shared)
//     0 bytes of DATA  memory (+ 12 bytes shared)
//    63 bytes of XDATA memory
//
//Errors: none
//Warnings: none
