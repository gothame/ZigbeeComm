##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   17/Oct/2013  21:26:06 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\mac\low_level\srf03\mac_radio.c                 #
#    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCoor #
#                          d.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS       #
#                          "-DCONST=const __code" -DGENERIC=__generic) -f    #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConfig. #
#                          cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800     #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\Source\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mt\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2430EB\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\osal\mcu #
#                          \ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC #
#                          2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\osal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ #
#                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects #
#                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. #
#                          \Components\stack\af\ -I                          #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\stack\nw #
#                          k\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C #
#                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2430DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ #
#                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\zmac\f8w #
#                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                       #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          mac\high_level\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf03\ -I                #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\low_ #
#                          level\srf03\single_chip\ -D CC2430EB -D ZTOOL_P1  #
#                          -D MT_TASK -D MT_ZDO_FUNC -lC                     #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\ -lA            #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\CoordinatorEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\mac\low_level\srf03\mac_radio.c"               #
#    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\mac_radio.lst   #
#    Object file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\Obj\mac_radio.r51    #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mac\low_level\srf03\mac_radio.c
      1          /**************************************************************************************************
      2              Filename:
      3              Revised:        $Date: 2007-03-26 16:18:09 -0700 (Mon, 26 Mar 2007) $
      4              Revision:       $Revision: 13860 $
      5          
      6              Description:
      7          
      8              Describe the purpose and contents of the file.
      9          
     10              Copyright (c) 2006 by Texas Instruments, Inc.
     11              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     12              derivative works, modify, distribute, perform, display or sell this
     13              software and/or its documentation for any purpose is prohibited
     14              without the express written consent of Texas Instruments, Inc.
     15          **************************************************************************************************/
     16          
     17          
     18          /* ------------------------------------------------------------------------------------------------
     19           *                                          Includes
     20           * ------------------------------------------------------------------------------------------------
     21           */
     22          
     23          /* hal */
     24          #include "hal_types.h"
     25          
     26          /* high-level */
     27          #include "mac_pib.h"
     28          
     29          /* exported low-level */
     30          #include "mac_low_level.h"
     31          
     32          /* low-level specific */
     33          #include "mac_radio.h"
     34          #include "mac_tx.h"
     35          #include "mac_rx.h"
     36          #include "mac_rx_onoff.h"
     37          #include "mac_sleep.h"
     38          #include "mac_backoff_timer.h"
     39          
     40          /* target specific */
     41          #include "mac_radio_defs.h"
     42          
     43          /* debug */
     44          #include "mac_assert.h"
     45          
     46          
     47          /* ------------------------------------------------------------------------------------------------
     48           *                                          Includes
     49           * ------------------------------------------------------------------------------------------------
     50           */
     51          #define ED_RF_POWER_MIN_DBM   (MAC_RADIO_RECEIVER_SENSITIVITY_DBM + MAC_SPEC_ED_MIN_DBM_ABOVE_RECEIVER_SENSITIVITY)
     52          #define ED_RF_POWER_MAX_DBM   MAC_RADIO_RECEIVER_SATURATION_DBM
     53          
     54          
     55          /* ------------------------------------------------------------------------------------------------
     56           *                                        Global Variables
     57           * ------------------------------------------------------------------------------------------------
     58           */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     59          uint8 macPhyTxPower;
   \                     macPhyTxPower:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     60          uint8 macPhyChannel;
   \                     macPhyChannel:
   \   000000                DS 1
     61          
     62          
     63          /* ------------------------------------------------------------------------------------------------
     64           *                                        Local Variables
     65           * ------------------------------------------------------------------------------------------------
     66           */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     67          static uint8 reqChannel;
   \                     ??reqChannel:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     68          static uint8 reqTxPower;
   \                     ??reqTxPower:
   \   000000                DS 1
     69          
     70          
     71          /* ------------------------------------------------------------------------------------------------
     72           *                                        Local Functions
     73           * ------------------------------------------------------------------------------------------------
     74           */
     75          static uint8 radioComputeED(int8 rssiDbm);
     76          
     77          
     78          /**************************************************************************************************
     79           * @fn          macRadioInit
     80           *
     81           * @brief       Initialize radio software.
     82           *
     83           * @param       none
     84           *
     85           * @return      none
     86           **************************************************************************************************
     87           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
     88          void macRadioInit(void)
   \                     macRadioInit:
     89          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     90            /* variable initialization for this module */
     91            reqChannel    = MAC_RADIO_CHANNEL_DEFAULT;
   \   000004   740B         MOV     A,#0xb
   \   000006   90....       MOV     DPTR,#??reqChannel
   \   000009   F0           MOVX    @DPTR,A
     92            macPhyChannel = MAC_RADIO_CHANNEL_DEFAULT;
   \   00000A   90....       MOV     DPTR,#macPhyChannel
   \   00000D   F0           MOVX    @DPTR,A
     93            reqTxPower    = MAC_RADIO_TX_POWER_DEFAULT;
   \   00000E   741F         MOV     A,#0x1f
   \   000010   90....       MOV     DPTR,#??reqTxPower
   \   000013   F0           MOVX    @DPTR,A
     94            macPhyTxPower = MAC_RADIO_TX_POWER_DEFAULT;
   \   000014   90....       MOV     DPTR,#macPhyTxPower
   \   000017   80..         SJMP    ??Subroutine2_0
     95          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90DF4B       MOV     DPTR,#-0x20b5
   \                     ??Subroutine2_0:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   80..         SJMP    ??Subroutine0_1

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#(??radioComputeED & 0xffff)
   \   000003   74..         MOV     A,#((??radioComputeED >> 16) & 0xff)
   \                     ??Subroutine0_0:
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??Subroutine0_1:
   \   000008   D083         POP     DPH
   \   00000A   D082         POP     DPL
   \   00000C   02....       LJMP    ?BRET
     96          
     97          
     98          /**************************************************************************************************
     99           * @fn          macRadioReset
    100           *
    101           * @brief       Resets the radio module.
    102           *
    103           * @param       none
    104           *
    105           * @return      none
    106           **************************************************************************************************
    107           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    108          void macRadioReset(void)
   \                     macRadioReset:
    109          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    110            macRadioStopScan();
   \   000004                ; Setup parameters for call to function macRadioStopScan
   \   000004   90....       MOV     DPTR,#(macRadioStopScan & 0xffff)
   \   000007   74..         MOV     A,#((macRadioStopScan >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    111            macRadioEnergyDetectStop();
   \   00000C                ; Setup parameters for call to function macRadioEnergyDetectStop
   \   00000C   90....       MOV     DPTR,#(macRadioEnergyDetectStop & 0xffff)
   \   00000F   74..         MOV     A,#((macRadioEnergyDetectStop >> 16) & 0xff)
   \   000011   80..         SJMP    ??Subroutine0_0
    112          }
    113          
    114          
    115          /**************************************************************************************************
    116           * @fn          macRadioRandomByte
    117           *
    118           * @brief       Return a random byte derived from previously set random seed.
    119           *
    120           * @param       none
    121           *
    122           * @return      a random byte
    123           **************************************************************************************************
    124           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    125          uint8 macRadioRandomByte(void)
   \                     macRadioRandomByte:
    126          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    127            return(MAC_RADIO_RANDOM_BYTE());
   \   000004                ; Setup parameters for call to function macMcuRandomByte
   \   000004   90....       MOV     DPTR,#(macMcuRandomByte & 0xffff)
   \   000007   74..         MOV     A,#((macMcuRandomByte >> 16) & 0xff)
   \   000009   80..         SJMP    ??Subroutine0_0
    128          }
    129          
    130          
    131          /**************************************************************************************************
    132           * @fn          macRadioSetPanCoordinator
    133           *
    134           * @brief       Configure the pan coordinator status of the radio
    135           *
    136           * @param       panCoordFlag - non-zero to configure radio to be pan coordinator
    137           *                             zero to configure radio as NON pan coordinator
    138           *
    139           * @return      none
    140           **************************************************************************************************
    141           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    142          void macRadioSetPanCoordinator(uint8 panCoordFlag)
   \                     macRadioSetPanCoordinator:
    143          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    144            /* abstracted radio configuration */
    145            MAC_RADIO_SET_PAN_COORDINATOR(panCoordFlag);
   \   000004   90DF02       MOV     DPTR,#-0x20fe
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   E9           MOV     A,R1
   \   00000A   6004         JZ      ??macRadioSetPanCoordinator_0
   \   00000C   D2F0         SETB    B.0
   \   00000E   8002         SJMP    ??macRadioSetPanCoordinator_1
   \                     ??macRadioSetPanCoordinator_0:
   \   000010   C2F0         CLR     B.0
   \                     ??macRadioSetPanCoordinator_1:
   \   000012   A2F0         MOV     C,B.0
   \   000014   E4           CLR     A
   \   000015   92E0         MOV     0xE0 /* A   */.0,C
   \   000017   C4           SWAP    A
   \   000018   C0E0         PUSH    A
   \   00001A   74EF         MOV     A,#-0x11
   \   00001C   5A           ANL     A,R2
   \   00001D   FA           MOV     R2,A
   \   00001E   D0E0         POP     A
   \   000020   4A           ORL     A,R2
   \   000021   80..         SJMP    ??Subroutine2_0
    146          }
    147          
    148          
    149          /**************************************************************************************************
    150           * @fn          macRadioSetPanID
    151           *
    152           * @brief       Set the pan ID on the radio.
    153           *
    154           * @param       panID - 16 bit PAN identifier
    155           *
    156           * @return      none
    157           **************************************************************************************************
    158           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    159          void macRadioSetPanID(uint16 panID)
   \                     macRadioSetPanID:
    160          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    161            /* abstracted radio configuration */
    162            MAC_RADIO_SET_PAN_ID(panID);
   \   000004   EA           MOV     A,R2
   \   000005   90DF4C       MOV     DPTR,#-0x20b4
   \   000008   F0           MOVX    @DPTR,A
   \   000009   EB           MOV     A,R3
   \   00000A   80..         SJMP    ?Subroutine2
    163          }
    164          
    165          
    166          /**************************************************************************************************
    167           * @fn          macRadioSetShortAddr
    168           *
    169           * @brief       Set the short addrss on the radio.
    170           *
    171           * @param       shortAddr - 16 bit short address
    172           *
    173           * @return      none
    174           **************************************************************************************************
    175           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    176          void macRadioSetShortAddr(uint16 shortAddr)
   \                     macRadioSetShortAddr:
    177          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    178            /* abstracted radio configuration */
    179            MAC_RADIO_SET_SHORT_ADDR(shortAddr);
   \   000004   EA           MOV     A,R2
   \   000005   90DF4E       MOV     DPTR,#-0x20b2
   \   000008   F0           MOVX    @DPTR,A
   \   000009   EB           MOV     A,R3
   \   00000A   90DF4D       MOV     DPTR,#-0x20b3
   \   00000D   80..         SJMP    ??Subroutine2_0
    180          }
    181          
    182          
    183          /**************************************************************************************************
    184           * @fn          macRadioSetIEEEAddr
    185           *
    186           * @brief       Set the IEEE address on the radio.
    187           *
    188           * @param       pIEEEAddr - pointer to array holding 64 bit IEEE address; array must be little
    189           *                          endian format (starts with lowest signficant byte)
    190           *
    191           * @return      none
    192           **************************************************************************************************
    193           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    194          void macRadioSetIEEEAddr(uint8 * pIEEEAddr)
   \                     macRadioSetIEEEAddr:
    195          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
    196            /* abstracted radio configuration */
    197            MAC_RADIO_SET_IEEE_ADDR(pIEEEAddr);
   \   000008                ; Setup parameters for call to function macMemWriteRam
   \   000008   7908         MOV     R1,#0x8
   \   00000A   7A43         MOV     R2,#0x43
   \   00000C   7BDF         MOV     R3,#-0x21
   \   00000E   90....       MOV     DPTR,#(macMemWriteRam & 0xffff)
   \   000011   74..         MOV     A,#((macMemWriteRam >> 16) & 0xff)
   \   000013   80..         SJMP    ??Subroutine0_0
    198          }
    199          
    200          
    201          /**************************************************************************************************
    202           * @fn          macRadioSetTxPower
    203           *
    204           * @brief       Set transmitter power of the radio.
    205           *
    206           * @param       txPower - the minus dBm for power but as a postive integer (or if configured
    207           *                        for it, txPower is the raw register value).
    208           *
    209           * @return      none
    210           **************************************************************************************************
    211           */
    212          #ifndef HAL_MAC_USE_REGISTER_POWER_VALUES
    213          /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    214          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    215          void macRadioSetTxPower(uint8 txPower)
   \                     macRadioSetTxPower:
    216          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    217            halIntState_t  s;
    218          
    219            /* if the selected dBm is out of range, use the closest available */
    220            if (txPower > MAC_RADIO_TX_POWER_MAX_MINUS_DBM)
   \   000005   E9           MOV     A,R1
   \   000006   C3           CLR     C
   \   000007   941A         SUBB    A,#0x1a
   \   000009   4002         JC      ??macRadioSetTxPower_0
    221            {
    222              txPower = MAC_RADIO_TX_POWER_MAX_MINUS_DBM;
   \   00000B   7919         MOV     R1,#0x19
    223            }
    224          
    225            /*
    226             *  Set the global variable reqTxPower.  This variable is referenced
    227             *  by the function macRadioUpdateTxPower() to write the radio register.
    228             *
    229             *  A lookup table is used to translate the power level to the register
    230             *  value.
    231             */
    232            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRadioSetTxPower_0:
   \   00000D   A2AF         MOV     C,0xa8.7
   \   00000F   E4           CLR     A
   \   000010   92E0         MOV     0xE0 /* A   */.0,C
   \   000012   FA           MOV     R2,A
   \   000013   C2AF         CLR     0xa8.7
    233            reqTxPower = macRadioDefsTxPowerTable[txPower];
   \   000015   89..         MOV     ?V0 + 0,R1
   \   000017   E5..         MOV     A,?V0 + 0
   \   000019   24..         ADD     A,#(macRadioDefsTxPowerTable & 0xff)
   \   00001B   F582         MOV     DPL,A
   \   00001D   E4           CLR     A
   \   00001E   34..         ADDC    A,#((macRadioDefsTxPowerTable >> 8) & 0xff)
   \   000020   F583         MOV     DPH,A
   \   000022   E4           CLR     A
   \   000023   93           MOVC    A,@A+DPTR
   \   000024   90....       MOV     DPTR,#??reqTxPower
   \   000027   F0           MOVX    @DPTR,A
    234            HAL_EXIT_CRITICAL_SECTION(s);
   \   000028   EA           MOV     A,R2
   \   000029   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002B   92AF         MOV     0xa8.7,C
    235          
    236            /* update the radio power setting */
    237            macRadioUpdateTxPower();
   \   00002D                ; Setup parameters for call to function macRadioUpdateTxPower
   \   00002D   90....       MOV     DPTR,#(macRadioUpdateTxPower & 0xffff)
   \   000030   74..         MOV     A,#((macRadioUpdateTxPower >> 16) & 0xff)
   \   000032   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    238          }
   \   000035   7F02         MOV     R7,#0x2
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA
    239          
    240          #else
    241          /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    242          
    243          void macRadioSetTxPower(uint8 txPower)
    244          {
    245            halIntState_t  s;
    246          
    247            /* same as above but with no lookup table, use raw register value */
    248            HAL_ENTER_CRITICAL_SECTION(s);
    249            reqTxPower = txPower;
    250            HAL_EXIT_CRITICAL_SECTION(s);
    251          
    252            /* update the radio power setting */
    253            macRadioUpdateTxPower();
    254          }
    255          
    256          #endif
    257          
    258          
    259          /**************************************************************************************************
    260           * @fn          macRadioUpdateTxPower
    261           *
    262           * @brief       Update the radio's transmit power if a new power level has been requested
    263           *
    264           * @param       reqTxPower - file scope variable that holds the last request power level
    265           *              macPhyTxPower - global variable that holds radio's set power level
    266           *
    267           * @return      none
    268           **************************************************************************************************
    269           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    270          void macRadioUpdateTxPower(void)
   \                     macRadioUpdateTxPower:
    271          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    272            halIntState_t  s;
    273          
    274            /*
    275             *  If the requested power setting is different from the actual radio setting,
    276             *  attempt to udpate to the new power setting.
    277             */
    278            HAL_ENTER_CRITICAL_SECTION(s);
   \   000004   A2AF         MOV     C,0xa8.7
   \   000006   E4           CLR     A
   \   000007   92E0         MOV     0xE0 /* A   */.0,C
   \   000009   FB           MOV     R3,A
   \   00000A   C2AF         CLR     0xa8.7
    279            if (reqTxPower != macPhyTxPower)
   \   00000C   90....       MOV     DPTR,#??reqTxPower
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \   000011   90....       MOV     DPTR,#macPhyTxPower
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6A           XRL     A,R2
   \   000016   601A         JZ      ??macRadioUpdateTxPower_0
    280            {
    281              /*
    282               *  Radio power cannot be updated when the radio is physically transmitting.
    283               *  If there is a possibility radio is transmitting, do not change the power
    284               *  setting.  This function will be called again after the current transmit
    285               *  completes.
    286               */
    287              if (!macRxOutgoingAckFlag && !MAC_TX_IS_PHYSICALLY_ACTIVE())
   \   000018   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   7014         JNZ     ??macRadioUpdateTxPower_0
   \   00001E   90....       MOV     DPTR,#macTxActive
   \   000021   E0           MOVX    A,@DPTR
   \   000022   A2E7         MOV     C,0xE0 /* A   */.7
   \   000024   400C         JC      ??macRadioUpdateTxPower_0
    288              {
    289                /*
    290                 *  Set new power level;  update the shadow value and write
    291                 *  the new value to the radio hardware.
    292                 */
    293                macPhyTxPower = reqTxPower;
   \   000026   90....       MOV     DPTR,#??reqTxPower
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   90....       MOV     DPTR,#macPhyTxPower
   \   00002D   F0           MOVX    @DPTR,A
    294                MAC_RADIO_SET_TX_POWER(macPhyTxPower);
   \   00002E   90DF0B       MOV     DPTR,#-0x20f5
   \   000031   F0           MOVX    @DPTR,A
    295              }
    296            }
    297            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRadioUpdateTxPower_0:
   \   000032   EB           MOV     A,R3
   \   000033   A2E0         MOV     C,0xE0 /* A   */.0
   \   000035   92AF         MOV     0xa8.7,C
    298          }
   \   000037   02....       LJMP    ??Subroutine0_1 & 0xFFFF
    299          
    300          
    301          /**************************************************************************************************
    302           * @fn          macRadioSetChannel
    303           *
    304           * @brief       Set radio channel.
    305           *
    306           * @param       channel - channel number, valid range is 11 through 26
    307           *
    308           * @return      none
    309           **************************************************************************************************
    310           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    311          void macRadioSetChannel(uint8 channel)
   \                     macRadioSetChannel:
    312          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    313            halIntState_t  s;
    314          
    315            MAC_ASSERT((channel >= 11) && (channel <= 28));  /* illegal channel */
   \   000007   C3           CLR     C
   \   000008   940B         SUBB    A,#0xb
   \   00000A   4006         JC      ??macRadioSetChannel_0
   \   00000C   EE           MOV     A,R6
   \   00000D   C3           CLR     C
   \   00000E   941D         SUBB    A,#0x1d
   \   000010   4008         JC      ??macRadioSetChannel_1
   \                     ??macRadioSetChannel_0:
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000015   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000017   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    316          
    317            /* critical section to make sure transmit does not start while updating channel */
    318            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRadioSetChannel_1:
   \   00001A   A2AF         MOV     C,0xa8.7
   \   00001C   E4           CLR     A
   \   00001D   92E0         MOV     0xE0 /* A   */.0,C
   \   00001F   FF           MOV     R7,A
   \   000020   C2AF         CLR     0xa8.7
    319          
    320            /* set requested channel */
    321            reqChannel = channel;
   \   000022   EE           MOV     A,R6
   \   000023   90....       MOV     DPTR,#??reqChannel
   \   000026   F0           MOVX    @DPTR,A
    322          
    323            /*
    324             *  If transmit is not active, update the radio hardware immediately.  If transmit is active,
    325             *  the channel will be updated at the end of the current transmit.
    326             */
    327            if (!macTxActive)
   \   000027   90....       MOV     DPTR,#macTxActive
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7008         JNZ     ??macRadioSetChannel_2
    328            {
    329              macRadioUpdateChannel();
   \   00002D                ; Setup parameters for call to function macRadioUpdateChannel
   \   00002D   90....       MOV     DPTR,#(macRadioUpdateChannel & 0xffff)
   \   000030   74..         MOV     A,#((macRadioUpdateChannel >> 16) & 0xff)
   \   000032   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    330            }
    331            
    332            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRadioSetChannel_2:
   \   000035   EF           MOV     A,R7
   \   000036   A2E0         MOV     C,0xE0 /* A   */.0
   \   000038   92AF         MOV     0xa8.7,C
    333          }
   \   00003A                REQUIRE ?Subroutine1
   \   00003A                ; // Fall through to label ?Subroutine1

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    334          
    335          
    336          /**************************************************************************************************
    337           * @fn          macRadioUpdateChannel
    338           *
    339           * @brief       Update the radio channel if a new channel has been requested.
    340           *
    341           * @param       none
    342           *
    343           * @return      none
    344           **************************************************************************************************
    345           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    346          void macRadioUpdateChannel(void)
   \                     macRadioUpdateChannel:
    347          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    348            halIntState_t  s;
    349          
    350            MAC_ASSERT(!macTxActive); /* cannot change channel during a transmit */
   \   000004   90....       MOV     DPTR,#macTxActive
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6008         JZ      ??macRadioUpdateChannel_0
   \   00000A                ; Setup parameters for call to function halAssertHandler
   \   00000A   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   00000D   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    351          
    352            /* if the channel has changed, set the radio to the new channel */
    353            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRadioUpdateChannel_0:
   \   000012   A2AF         MOV     C,0xa8.7
   \   000014   E4           CLR     A
   \   000015   92E0         MOV     0xE0 /* A   */.0,C
   \   000017   C2AF         CLR     0xa8.7
    354            if (reqChannel != macPhyChannel)
   \   000019   90....       MOV     DPTR,#??reqChannel
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   90....       MOV     DPTR,#macPhyChannel
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6A           XRL     A,R2
   \   000023   602A         JZ      ??macRadioUpdateChannel_1
    355            {
    356              macPhyChannel = reqChannel;
   \   000025   90....       MOV     DPTR,#??reqChannel
   \   000028   E0           MOVX    A,@DPTR
   \   000029   90....       MOV     DPTR,#macPhyChannel
   \   00002C   F0           MOVX    @DPTR,A
    357              HAL_EXIT_CRITICAL_SECTION(s);
   \   00002D   92AF         MOV     0xa8.7,C
    358          
    359              /* changing the channel stops any receive in progress */
    360              macRxOff();
   \   00002F                ; Setup parameters for call to function macRxOff
   \   00002F   90....       MOV     DPTR,#(macRxOff & 0xffff)
   \   000032   74..         MOV     A,#((macRxOff >> 16) & 0xff)
   \   000034   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    361              MAC_RADIO_SET_CHANNEL(macPhyChannel);
   \   000037   75F005       MOV     B,#0x5
   \   00003A   90....       MOV     DPTR,#macPhyChannel
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   A4           MUL     AB
   \   00003F   242E         ADD     A,#0x2e
   \   000041   90DF11       MOV     DPTR,#-0x20ef
   \   000044   F0           MOVX    @DPTR,A
    362              macRxOnRequest();
   \   000045                ; Setup parameters for call to function macRxOnRequest
   \   000045   90....       MOV     DPTR,#(macRxOnRequest & 0xffff)
   \   000048   74..         MOV     A,#((macRxOnRequest >> 16) & 0xff)
   \   00004A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004D   8002         SJMP    ??macRadioUpdateChannel_2
    363            }
    364            else
    365            {
    366              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRadioUpdateChannel_1:
   \   00004F   92AF         MOV     0xa8.7,C
    367            }
    368          }
   \                     ??macRadioUpdateChannel_2:
   \   000051   02....       LJMP    ??Subroutine0_1 & 0xFFFF
    369          
    370          
    371          /**************************************************************************************************
    372           * @fn          macRadioStartScan
    373           *
    374           * @brief       Puts radio into selected scan mode.
    375           *
    376           * @param       scanMode - scan mode, see #defines in .h file
    377           *
    378           * @return      none
    379           **************************************************************************************************
    380           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    381          void macRadioStartScan(uint8 scanMode)
   \                     macRadioStartScan:
    382          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    383            MAC_ASSERT(macSleepState == MAC_SLEEP_STATE_AWAKE); /* radio must be awake */
   \   000007   90....       MOV     DPTR,#macSleepState
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6008         JZ      ??macRadioStartScan_0
   \   00000D                ; Setup parameters for call to function halAssertHandler
   \   00000D   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000010   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    384            MAC_ASSERT(macRxFilter == RX_FILTER_OFF); /* all filtering must be off to start scan */
   \                     ??macRadioStartScan_0:
   \   000015   90....       MOV     DPTR,#macRxFilter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6008         JZ      ??macRadioStartScan_1
   \   00001B                ; Setup parameters for call to function halAssertHandler
   \   00001B   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   00001E   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000020   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    385          
    386            /* set the receive filter based on the selected scan mode */
    387            if (scanMode == MAC_SCAN_ED)
   \                     ??macRadioStartScan_1:
   \   000023   EE           MOV     A,R6
   \   000024   7007         JNZ     ??macRadioStartScan_2
    388            {
    389              macRxFilter = RX_FILTER_ALL;
   \   000026   7401         MOV     A,#0x1
   \                     ??macRadioStartScan_3:
   \   000028   90....       MOV     DPTR,#macRxFilter
   \   00002B   802A         SJMP    ??macRadioStartScan_4
    390            }
    391            else if (scanMode == MAC_SCAN_ORPHAN)
   \                     ??macRadioStartScan_2:
   \   00002D   7403         MOV     A,#0x3
   \   00002F   6E           XRL     A,R6
   \   000030   7004         JNZ     ??macRadioStartScan_5
    392            {
    393              macRxFilter = RX_FILTER_NON_COMMAND_FRAMES;
   \   000032   7403         MOV     A,#0x3
   \   000034   80F2         SJMP    ??macRadioStartScan_3
    394            }
    395            else
    396            {
    397              MAC_ASSERT((scanMode == MAC_SCAN_ACTIVE) || (scanMode == MAC_SCAN_PASSIVE)); /* invalid scan type */
   \                     ??macRadioStartScan_5:
   \   000036   7401         MOV     A,#0x1
   \   000038   6E           XRL     A,R6
   \   000039   600D         JZ      ??macRadioStartScan_6
   \   00003B   7402         MOV     A,#0x2
   \   00003D   6E           XRL     A,R6
   \   00003E   6008         JZ      ??macRadioStartScan_6
   \   000040                ; Setup parameters for call to function halAssertHandler
   \   000040   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000043   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000045   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    398              macRxFilter = RX_FILTER_NON_BEACON_FRAMES;
   \                     ??macRadioStartScan_6:
   \   000048   7402         MOV     A,#0x2
   \   00004A   90....       MOV     DPTR,#macRxFilter
   \   00004D   F0           MOVX    @DPTR,A
    399          
    400              /* for active and passive scans, per spec the pan ID must be 0xFFFF */
    401              MAC_RADIO_SET_PAN_ID(0xFFFF);
   \   00004E   74FF         MOV     A,#-0x1
   \   000050   90DF4C       MOV     DPTR,#-0x20b4
   \   000053   F0           MOVX    @DPTR,A
   \   000054   90DF4B       MOV     DPTR,#-0x20b5
   \                     ??macRadioStartScan_4:
   \   000057   F0           MOVX    @DPTR,A
    402            }
    403          }
   \   000058   02....       LJMP    ?Subroutine1 & 0xFFFF
    404          
    405          
    406          /**************************************************************************************************
    407           * @fn          macRadioStopScan
    408           *
    409           * @brief       Takes radio out of scan mode.  Note can be called if
    410           *
    411           * @param       none
    412           *
    413           * @return      none
    414           **************************************************************************************************
    415           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    416          void macRadioStopScan(void)
   \                     macRadioStopScan:
    417          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    418            macRxFilter = RX_FILTER_OFF;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#macRxFilter
   \   000008   F0           MOVX    @DPTR,A
    419          
    420            /* restore the pan ID (passive and active scans set pan ID to 0xFFFF) */
    421            MAC_RADIO_SET_PAN_ID(macPib.panId);
   \   000009   90....       MOV     DPTR,#(macPib + 29)
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   90DF4C       MOV     DPTR,#-0x20b4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   90....       MOV     DPTR,#(macPib + 30)
   \   000014   E0           MOVX    A,@DPTR
   \   000015   02....       LJMP    ?Subroutine2 & 0xFFFF
    422          }
    423          
    424          
    425          /**************************************************************************************************
    426           * @fn          macRadioEnergyDetectStart
    427           *
    428           * @brief       Initiates energy detect.  The highest energy detected is recorded from the time
    429           *              when this function is called until the energy detect is stopped.
    430           *
    431           * @param       none
    432           *
    433           * @return      none
    434           **************************************************************************************************
    435           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    436          void macRadioEnergyDetectStart(void)
   \                     macRadioEnergyDetectStart:
    437          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    438            MAC_RADIO_RECORD_MAX_RSSI_START();
   \   000004                ; Setup parameters for call to function macMcuRecordMaxRssiStart
   \   000004   90....       MOV     DPTR,#(macMcuRecordMaxRssiStart & 0xffff)
   \   000007   74..         MOV     A,#((macMcuRecordMaxRssiStart >> 16) & 0xff)
   \   000009   02....       LJMP    ??Subroutine0_0 & 0xFFFF
    439          }
    440          
    441          
    442          /**************************************************************************************************
    443           * @fn          macRadioEnergyDetectStop
    444           *
    445           * @brief       Called at completion of an energy detect.  Note: can be called even if energy
    446           *              detect is already stopped (needed by reset).
    447           *
    448           * @param       none
    449           *
    450           * @return      highest energy detect measurement
    451           **************************************************************************************************
    452           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    453          uint8 macRadioEnergyDetectStop(void)
   \                     macRadioEnergyDetectStop:
    454          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    455            uint8 rssiDbm;
    456            uint8 energyDetectMeasurement;
    457            
    458            rssiDbm = MAC_RADIO_RECORD_MAX_RSSI_STOP() + MAC_RADIO_RSSI_OFFSET;
   \   000004                ; Setup parameters for call to function macMcuRecordMaxRssiStop
   \   000004   90....       MOV     DPTR,#(macMcuRecordMaxRssiStop & 0xffff)
   \   000007   74..         MOV     A,#((macMcuRecordMaxRssiStop >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000C   E9           MOV     A,R1
   \   00000D   24D3         ADD     A,#-0x2d
   \   00000F   F9           MOV     R1,A
    459            energyDetectMeasurement = radioComputeED(rssiDbm);
    460            
    461            return(energyDetectMeasurement);
   \   000010                ; Setup parameters for call to function radioComputeED
   \   000010   02....       LJMP    ?Subroutine0 & 0xFFFF
    462          }
    463          
    464          /*=================================================================================================
    465           * @fn          radioComputeED
    466           *
    467           * @brief       Compute energy detect measurement.
    468           *
    469           * @param       rssi - raw RSSI value from radio hardware
    470           *
    471           * @return      energy detect measurement in the range of 0x00-0xFF
    472           *=================================================================================================
    473           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    474          static uint8 radioComputeED(int8 rssiDbm)
   \                     ??radioComputeED:
    475          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    476            uint8 ed;
    477            
    478            /*
    479             *  Keep RF power between minimum and maximum values.
    480             *  This min/max range is derived from datasheet and specification.
    481             */
    482            if (rssiDbm < ED_RF_POWER_MIN_DBM)
   \   000000   E9           MOV     A,R1
   \   000001   C3           CLR     C
   \   000002   94AF         SUBB    A,#-0x51
   \   000004   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000006   65D0         XRL     A,PSW
   \   000008   33           RLC     A
   \   000009   5004         JNC     ??radioComputeED_1
    483            {
    484              rssiDbm = ED_RF_POWER_MIN_DBM;
   \   00000B   79AF         MOV     R1,#-0x51
   \   00000D   800D         SJMP    ??radioComputeED_2
    485            }
    486            else if (rssiDbm > ED_RF_POWER_MAX_DBM)
   \                     ??radioComputeED_1:
   \   00000F   E9           MOV     A,R1
   \   000010   C3           CLR     C
   \   000011   940B         SUBB    A,#0xb
   \   000013   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000015   65D0         XRL     A,PSW
   \   000017   33           RLC     A
   \   000018   4002         JC      ??radioComputeED_2
    487            {
    488              rssiDbm = ED_RF_POWER_MAX_DBM;
   \   00001A   790A         MOV     R1,#0xa
    489            }
    490            
    491            /*
    492             *  Create energy detect measurement by normalizing and scaling RF power level.
    493             *
    494             *  Note : The division operation below is designed for maximum accuracy and
    495             *         best granularity.  This is done by grouping the math operations to
    496             *         compute the entire numerator before doing any division.
    497             */
    498            ed = (MAC_SPEC_ED_MAX * (rssiDbm - ED_RF_POWER_MIN_DBM)) / (ED_RF_POWER_MAX_DBM - ED_RF_POWER_MIN_DBM);
    499          
    500            return(ed);
   \                     ??radioComputeED_2:
   \   00001C   E9           MOV     A,R1
   \   00001D   F8           MOV     R0,A
   \   00001E   33           RLC     A
   \   00001F   95E0         SUBB    A,0xE0 /* A   */
   \   000021   F9           MOV     R1,A
   \   000022   7451         MOV     A,#0x51
   \   000024   28           ADD     A,R0
   \   000025   F8           MOV     R0,A
   \   000026   E4           CLR     A
   \   000027   39           ADDC    A,R1
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   75F0FF       MOV     B,#-0x1
   \   00002D   A4           MUL     AB
   \   00002E   F8           MOV     R0,A
   \   00002F   AAF0         MOV     R2,B
   \   000031   75F0FF       MOV     B,#-0x1
   \   000034   E9           MOV     A,R1
   \   000035   A4           MUL     AB
   \   000036   2A           ADD     A,R2
   \   000037   F9           MOV     R1,A
   \   000038   7A5B         MOV     R2,#0x5b
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   12....       LCALL   ?S_DIV_MOD
   \   00003F   E8           MOV     A,R0
   \   000040   F9           MOV     R1,A
   \   000041   02....       LJMP    ?BRET
    501          }
    502          
    503          
    504          /**************************************************************************************************
    505           * @fn          macRadioComputeLQI
    506           *
    507           * @brief       Compute link quality indication.
    508           *
    509           * @param       rssi - raw RSSI value from radio hardware
    510           *              corr - correlation value from radio hardware
    511           *
    512           * @return      link quality indicator value
    513           **************************************************************************************************
    514           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    515          uint8 macRadioComputeLQI(int8 rssiDbm, uint8 corr)
   \                     macRadioComputeLQI:
    516          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    517            (void) corr; /* suppress compiler warning of unused parameter */
    518            
    519            /*
    520             *  Note : Currently the LQI value is simply the energy detect measurement.
    521             *         A more accurate value could be derived by using the correlation
    522             *         value along with the RSSI value.
    523             */  
    524            return(radioComputeED(rssiDbm));
   \   000004                ; Setup parameters for call to function radioComputeED
   \   000004   02....       LJMP    ?Subroutine0 & 0xFFFF
    525          }

   \                                 In segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
    526          
    527          
    528          /**************************************************************************************************
    529          */

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     macRadioComputeLQI                2      0      0
       -> radioComputeED               4      0      0
     macRadioEnergyDetectStart         2      0      0
       -> macMcuRecordMaxRssiStart     4      0      0
     macRadioEnergyDetectStop          4      0      0
       -> macMcuRecordMaxRssiStop      4      0      0
       -> radioComputeED               4      0      0
     macRadioInit                      2      0      0
     macRadioRandomByte                2      0      0
       -> macMcuRandomByte             4      0      0
     macRadioReset                     2      0      0
       -> macRadioStopScan             4      0      0
       -> macRadioEnergyDetectStop     4      0      0
     macRadioSetChannel                0      0      9
       -> halAssertHandler             0      0     18
       -> macRadioUpdateChannel        0      0     18
     macRadioSetIEEEAddr               2      0      0
       -> macMemWriteRam               4      0      0
     macRadioSetPanCoordinator         3      0      0
     macRadioSetPanID                  2      0      0
     macRadioSetShortAddr              2      0      0
     macRadioSetTxPower                0      0     10
       -> macRadioUpdateTxPower        0      0     20
     macRadioStartScan                 0      0      9
       -> halAssertHandler             0      0     18
       -> halAssertHandler             0      0     18
       -> halAssertHandler             0      0     18
     macRadioStopScan                  4      0      0
     macRadioUpdateChannel             2      0      9
       -> halAssertHandler             4      0      0
       -> macRxOff                     4      0      0
       -> macRxOnRequest               4      0      0
     macRadioUpdateTxPower             2      0     10
     radioComputeED                    2      0      0


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     macPhyTxPower                1
     macPhyChannel                1
     reqChannel                   1
     reqTxPower                   1
     macRadioInit                25
     ?Subroutine2                 6
     ?Subroutine0                15
     macRadioReset               19
     macRadioRandomByte          11
     macRadioSetPanCoordinator   35
     macRadioSetPanID            12
     macRadioSetShortAddr        15
     macRadioSetIEEEAddr         21
     macRadioSetTxPower          58
     macRadioUpdateTxPower       58
     macRadioSetChannel          58
     ?Subroutine1                 5
     macRadioUpdateChannel       84
     macRadioStartScan           91
     macRadioStopScan            24
     macRadioEnergyDetectStart   12
     macRadioEnergyDetectStop    19
     radioComputeED              68
     macRadioComputeLQI           7
     _A_IEN0                      1

 
 643 bytes in segment BANKED_CODE
   1 byte  in segment SFR_AN
   4 bytes in segment XDATA_Z
 
 643 bytes of CODE  memory
   0 bytes of DATA  memory (+ 1 byte shared)
   4 bytes of XDATA memory

Errors: none
Warnings: none
