//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:26:06 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\mac\low_level\srf03\mac_radio.c               /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wC /
//                          oord.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS     /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D ZTOOL_P1 -D MT_TASK -D            /
//                          MT_ZDO_FUNC -lC E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\CoordinatorEB\L /
//                          ist\ -lA E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\CoordinatorEB\List\    /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\CoordinatorEB\Obj\ -e        /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\mac\low_level\srf03\mac_radio.c"             /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\CoordinatorEB\List\mac_radio.s5 /
//                          1                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME mac_radio

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?S_DIV_MOD
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        FUNCTION ??radioComputeED,0203H
        ARGFRAME ISTACK, 2, STACK
        PUBWEAK _A_IEN0
        PUBLIC macPhyChannel
        PUBLIC macPhyTxPower
        PUBLIC macRadioComputeLQI
        FUNCTION macRadioComputeLQI,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioEnergyDetectStart
        FUNCTION macRadioEnergyDetectStart,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioEnergyDetectStop
        FUNCTION macRadioEnergyDetectStop,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioInit
        FUNCTION macRadioInit,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioRandomByte
        FUNCTION macRadioRandomByte,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioReset
        FUNCTION macRadioReset,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioSetChannel
        FUNCTION macRadioSetChannel,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC macRadioSetIEEEAddr
        FUNCTION macRadioSetIEEEAddr,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioSetPanCoordinator
        FUNCTION macRadioSetPanCoordinator,0203H
        LOCFRAME ISTACK, 3, STACK
        PUBLIC macRadioSetPanID
        FUNCTION macRadioSetPanID,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioSetShortAddr
        FUNCTION macRadioSetShortAddr,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioSetTxPower
        FUNCTION macRadioSetTxPower,021203H
        LOCFRAME XSTACK, 10, STACK
        PUBLIC macRadioStartScan
        FUNCTION macRadioStartScan,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC macRadioStopScan
        FUNCTION macRadioStopScan,0203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioUpdateChannel
        FUNCTION macRadioUpdateChannel,021203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRadioUpdateTxPower
        FUNCTION macRadioUpdateTxPower,0203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        EXTERN macMcuRandomByte
        FUNCTION macMcuRandomByte,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN macMemWriteRam
        FUNCTION macMemWriteRam,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN halAssertHandler
        FUNCTION halAssertHandler,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 9, STACK
        EXTERN macRxOff
        FUNCTION macRxOff,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN macRxOnRequest
        FUNCTION macRxOnRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN macMcuRecordMaxRssiStart
        FUNCTION macMcuRecordMaxRssiStart,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN macMcuRecordMaxRssiStop
        FUNCTION macMcuRecordMaxRssiStop,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN macPib
        EXTERN macRadioDefsTxPowerTable
        EXTERN macRxFilter
        EXTERN macRxOutgoingAckFlag
        EXTERN macSleepState
        EXTERN macTxActive

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mac\low_level\srf03\mac_radio.c
//    1 /**************************************************************************************************
//    2     Filename:
//    3     Revised:        $Date: 2007-03-26 16:18:09 -0700 (Mon, 26 Mar 2007) $
//    4     Revision:       $Revision: 13860 $
//    5 
//    6     Description:
//    7 
//    8     Describe the purpose and contents of the file.
//    9 
//   10     Copyright (c) 2006 by Texas Instruments, Inc.
//   11     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   12     derivative works, modify, distribute, perform, display or sell this
//   13     software and/or its documentation for any purpose is prohibited
//   14     without the express written consent of Texas Instruments, Inc.
//   15 **************************************************************************************************/
//   16 
//   17 
//   18 /* ------------------------------------------------------------------------------------------------
//   19  *                                          Includes
//   20  * ------------------------------------------------------------------------------------------------
//   21  */
//   22 
//   23 /* hal */
//   24 #include "hal_types.h"
//   25 
//   26 /* high-level */
//   27 #include "mac_pib.h"
//   28 
//   29 /* exported low-level */
//   30 #include "mac_low_level.h"
//   31 
//   32 /* low-level specific */
//   33 #include "mac_radio.h"
//   34 #include "mac_tx.h"
//   35 #include "mac_rx.h"
//   36 #include "mac_rx_onoff.h"
//   37 #include "mac_sleep.h"
//   38 #include "mac_backoff_timer.h"
//   39 
//   40 /* target specific */
//   41 #include "mac_radio_defs.h"
//   42 
//   43 /* debug */
//   44 #include "mac_assert.h"
//   45 
//   46 
//   47 /* ------------------------------------------------------------------------------------------------
//   48  *                                          Includes
//   49  * ------------------------------------------------------------------------------------------------
//   50  */
//   51 #define ED_RF_POWER_MIN_DBM   (MAC_RADIO_RECEIVER_SENSITIVITY_DBM + MAC_SPEC_ED_MIN_DBM_ABOVE_RECEIVER_SENSITIVITY)
//   52 #define ED_RF_POWER_MAX_DBM   MAC_RADIO_RECEIVER_SATURATION_DBM
//   53 
//   54 
//   55 /* ------------------------------------------------------------------------------------------------
//   56  *                                        Global Variables
//   57  * ------------------------------------------------------------------------------------------------
//   58  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   59 uint8 macPhyTxPower;
macPhyTxPower:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   60 uint8 macPhyChannel;
macPhyChannel:
        DS 1
//   61 
//   62 
//   63 /* ------------------------------------------------------------------------------------------------
//   64  *                                        Local Variables
//   65  * ------------------------------------------------------------------------------------------------
//   66  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   67 static uint8 reqChannel;
??reqChannel:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   68 static uint8 reqTxPower;
??reqTxPower:
        DS 1
//   69 
//   70 
//   71 /* ------------------------------------------------------------------------------------------------
//   72  *                                        Local Functions
//   73  * ------------------------------------------------------------------------------------------------
//   74  */
//   75 static uint8 radioComputeED(int8 rssiDbm);
//   76 
//   77 
//   78 /**************************************************************************************************
//   79  * @fn          macRadioInit
//   80  *
//   81  * @brief       Initialize radio software.
//   82  *
//   83  * @param       none
//   84  *
//   85  * @return      none
//   86  **************************************************************************************************
//   87  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   88 void macRadioInit(void)
macRadioInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function macRadioInit
//   89 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   90   /* variable initialization for this module */
//   91   reqChannel    = MAC_RADIO_CHANNEL_DEFAULT;
        MOV	A,#0xb
        MOV	DPTR,#??reqChannel
        MOVX	@DPTR,A
//   92   macPhyChannel = MAC_RADIO_CHANNEL_DEFAULT;
        MOV	DPTR,#macPhyChannel
        MOVX	@DPTR,A
//   93   reqTxPower    = MAC_RADIO_TX_POWER_DEFAULT;
        MOV	A,#0x1f
        MOV	DPTR,#??reqTxPower
        MOVX	@DPTR,A
//   94   macPhyTxPower = MAC_RADIO_TX_POWER_DEFAULT;
        MOV	DPTR,#macPhyTxPower
        SJMP	??Subroutine2_0
        CFI EndBlock cfiBlock0
//   95 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV	DPTR,#-0x20b5
??Subroutine2_0:
        MOVX	@DPTR,A
        SJMP	??Subroutine0_1
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV	DPTR,#(??radioComputeED & 0xffff)
        MOV	A,#((??radioComputeED >> 16) & 0xff)
??Subroutine0_0:
        LCALL	?BCALL               ; Banked call to: DPTR()
??Subroutine0_1:
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock2
//   96 
//   97 
//   98 /**************************************************************************************************
//   99  * @fn          macRadioReset
//  100  *
//  101  * @brief       Resets the radio module.
//  102  *
//  103  * @param       none
//  104  *
//  105  * @return      none
//  106  **************************************************************************************************
//  107  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  108 void macRadioReset(void)
macRadioReset:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function macRadioReset
//  109 {
        FUNCALL macRadioReset, macRadioStopScan
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL macRadioReset, macRadioEnergyDetectStop
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  110   macRadioStopScan();
        ; Setup parameters for call to function macRadioStopScan
        MOV	DPTR,#(macRadioStopScan & 0xffff)
        MOV	A,#((macRadioStopScan >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  111   macRadioEnergyDetectStop();
        ; Setup parameters for call to function macRadioEnergyDetectStop
        MOV	DPTR,#(macRadioEnergyDetectStop & 0xffff)
        MOV	A,#((macRadioEnergyDetectStop >> 16) & 0xff)
        SJMP	??Subroutine0_0
        CFI EndBlock cfiBlock3
//  112 }
//  113 
//  114 
//  115 /**************************************************************************************************
//  116  * @fn          macRadioRandomByte
//  117  *
//  118  * @brief       Return a random byte derived from previously set random seed.
//  119  *
//  120  * @param       none
//  121  *
//  122  * @return      a random byte
//  123  **************************************************************************************************
//  124  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 uint8 macRadioRandomByte(void)
macRadioRandomByte:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function macRadioRandomByte
//  126 {
        FUNCALL macRadioRandomByte, macMcuRandomByte
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  127   return(MAC_RADIO_RANDOM_BYTE());
        ; Setup parameters for call to function macMcuRandomByte
        MOV	DPTR,#(macMcuRandomByte & 0xffff)
        MOV	A,#((macMcuRandomByte >> 16) & 0xff)
        SJMP	??Subroutine0_0
        CFI EndBlock cfiBlock4
//  128 }
//  129 
//  130 
//  131 /**************************************************************************************************
//  132  * @fn          macRadioSetPanCoordinator
//  133  *
//  134  * @brief       Configure the pan coordinator status of the radio
//  135  *
//  136  * @param       panCoordFlag - non-zero to configure radio to be pan coordinator
//  137  *                             zero to configure radio as NON pan coordinator
//  138  *
//  139  * @return      none
//  140  **************************************************************************************************
//  141  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  142 void macRadioSetPanCoordinator(uint8 panCoordFlag)
macRadioSetPanCoordinator:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function macRadioSetPanCoordinator
//  143 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  144   /* abstracted radio configuration */
//  145   MAC_RADIO_SET_PAN_COORDINATOR(panCoordFlag);
        MOV	DPTR,#-0x20fe
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,R1
        JZ	??macRadioSetPanCoordinator_0
        SETB	B.0
        SJMP	??macRadioSetPanCoordinator_1
??macRadioSetPanCoordinator_0:
        CLR	B.0
??macRadioSetPanCoordinator_1:
        MOV	C,B.0
        CLR	A
        MOV	0xE0 /* A   */.0,C
        SWAP	A
        PUSH	A
        CFI CFA_SP SP+-6
        MOV	A,#-0x11
        ANL	A,R2
        MOV	R2,A
        POP	A
        CFI CFA_SP SP+-5
        ORL	A,R2
        SJMP	??Subroutine2_0
        CFI EndBlock cfiBlock5
//  146 }
//  147 
//  148 
//  149 /**************************************************************************************************
//  150  * @fn          macRadioSetPanID
//  151  *
//  152  * @brief       Set the pan ID on the radio.
//  153  *
//  154  * @param       panID - 16 bit PAN identifier
//  155  *
//  156  * @return      none
//  157  **************************************************************************************************
//  158  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  159 void macRadioSetPanID(uint16 panID)
macRadioSetPanID:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function macRadioSetPanID
//  160 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  161   /* abstracted radio configuration */
//  162   MAC_RADIO_SET_PAN_ID(panID);
        MOV	A,R2
        MOV	DPTR,#-0x20b4
        MOVX	@DPTR,A
        MOV	A,R3
        SJMP	?Subroutine2
        CFI EndBlock cfiBlock6
//  163 }
//  164 
//  165 
//  166 /**************************************************************************************************
//  167  * @fn          macRadioSetShortAddr
//  168  *
//  169  * @brief       Set the short addrss on the radio.
//  170  *
//  171  * @param       shortAddr - 16 bit short address
//  172  *
//  173  * @return      none
//  174  **************************************************************************************************
//  175  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  176 void macRadioSetShortAddr(uint16 shortAddr)
macRadioSetShortAddr:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function macRadioSetShortAddr
//  177 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  178   /* abstracted radio configuration */
//  179   MAC_RADIO_SET_SHORT_ADDR(shortAddr);
        MOV	A,R2
        MOV	DPTR,#-0x20b2
        MOVX	@DPTR,A
        MOV	A,R3
        MOV	DPTR,#-0x20b3
        SJMP	??Subroutine2_0
        CFI EndBlock cfiBlock7
//  180 }
//  181 
//  182 
//  183 /**************************************************************************************************
//  184  * @fn          macRadioSetIEEEAddr
//  185  *
//  186  * @brief       Set the IEEE address on the radio.
//  187  *
//  188  * @param       pIEEEAddr - pointer to array holding 64 bit IEEE address; array must be little
//  189  *                          endian format (starts with lowest signficant byte)
//  190  *
//  191  * @return      none
//  192  **************************************************************************************************
//  193  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  194 void macRadioSetIEEEAddr(uint8 * pIEEEAddr)
macRadioSetIEEEAddr:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function macRadioSetIEEEAddr
//  195 {
        FUNCALL macRadioSetIEEEAddr, macMemWriteRam
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
//  196   /* abstracted radio configuration */
//  197   MAC_RADIO_SET_IEEE_ADDR(pIEEEAddr);
        ; Setup parameters for call to function macMemWriteRam
        MOV	R1,#0x8
        MOV	R2,#0x43
        MOV	R3,#-0x21
        MOV	DPTR,#(macMemWriteRam & 0xffff)
        MOV	A,#((macMemWriteRam >> 16) & 0xff)
        SJMP	??Subroutine0_0
        CFI EndBlock cfiBlock8
//  198 }
//  199 
//  200 
//  201 /**************************************************************************************************
//  202  * @fn          macRadioSetTxPower
//  203  *
//  204  * @brief       Set transmitter power of the radio.
//  205  *
//  206  * @param       txPower - the minus dBm for power but as a postive integer (or if configured
//  207  *                        for it, txPower is the raw register value).
//  208  *
//  209  * @return      none
//  210  **************************************************************************************************
//  211  */
//  212 #ifndef HAL_MAC_USE_REGISTER_POWER_VALUES
//  213 /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
//  214 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  215 void macRadioSetTxPower(uint8 txPower)
macRadioSetTxPower:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function macRadioSetTxPower
//  216 {
        FUNCALL macRadioSetTxPower, macRadioUpdateTxPower
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  217   halIntState_t  s;
//  218 
//  219   /* if the selected dBm is out of range, use the closest available */
//  220   if (txPower > MAC_RADIO_TX_POWER_MAX_MINUS_DBM)
        MOV	A,R1
        CLR	C
        SUBB	A,#0x1a
        JC	??macRadioSetTxPower_0
//  221   {
//  222     txPower = MAC_RADIO_TX_POWER_MAX_MINUS_DBM;
        MOV	R1,#0x19
//  223   }
//  224 
//  225   /*
//  226    *  Set the global variable reqTxPower.  This variable is referenced
//  227    *  by the function macRadioUpdateTxPower() to write the radio register.
//  228    *
//  229    *  A lookup table is used to translate the power level to the register
//  230    *  value.
//  231    */
//  232   HAL_ENTER_CRITICAL_SECTION(s);
??macRadioSetTxPower_0:
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R2,A
        CLR	0xa8.7
//  233   reqTxPower = macRadioDefsTxPowerTable[txPower];
        MOV	?V0 + 0,R1
        MOV	A,?V0 + 0
        ADD	A,#(macRadioDefsTxPowerTable & 0xff)
        MOV	DPL,A
        CLR	A
        ADDC	A,#((macRadioDefsTxPowerTable >> 8) & 0xff)
        MOV	DPH,A
        CLR	A
        MOVC	A,@A+DPTR
        MOV	DPTR,#??reqTxPower
        MOVX	@DPTR,A
//  234   HAL_EXIT_CRITICAL_SECTION(s);
        MOV	A,R2
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
//  235 
//  236   /* update the radio power setting */
//  237   macRadioUpdateTxPower();
        ; Setup parameters for call to function macRadioUpdateTxPower
        MOV	DPTR,#(macRadioUpdateTxPower & 0xffff)
        MOV	A,#((macRadioUpdateTxPower >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  238 }
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9
//  239 
//  240 #else
//  241 /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
//  242 
//  243 void macRadioSetTxPower(uint8 txPower)
//  244 {
//  245   halIntState_t  s;
//  246 
//  247   /* same as above but with no lookup table, use raw register value */
//  248   HAL_ENTER_CRITICAL_SECTION(s);
//  249   reqTxPower = txPower;
//  250   HAL_EXIT_CRITICAL_SECTION(s);
//  251 
//  252   /* update the radio power setting */
//  253   macRadioUpdateTxPower();
//  254 }
//  255 
//  256 #endif
//  257 
//  258 
//  259 /**************************************************************************************************
//  260  * @fn          macRadioUpdateTxPower
//  261  *
//  262  * @brief       Update the radio's transmit power if a new power level has been requested
//  263  *
//  264  * @param       reqTxPower - file scope variable that holds the last request power level
//  265  *              macPhyTxPower - global variable that holds radio's set power level
//  266  *
//  267  * @return      none
//  268  **************************************************************************************************
//  269  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  270 void macRadioUpdateTxPower(void)
macRadioUpdateTxPower:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function macRadioUpdateTxPower
//  271 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  272   halIntState_t  s;
//  273 
//  274   /*
//  275    *  If the requested power setting is different from the actual radio setting,
//  276    *  attempt to udpate to the new power setting.
//  277    */
//  278   HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R3,A
        CLR	0xa8.7
//  279   if (reqTxPower != macPhyTxPower)
        MOV	DPTR,#??reqTxPower
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPTR,#macPhyTxPower
        MOVX	A,@DPTR
        XRL	A,R2
        JZ	??macRadioUpdateTxPower_0
//  280   {
//  281     /*
//  282      *  Radio power cannot be updated when the radio is physically transmitting.
//  283      *  If there is a possibility radio is transmitting, do not change the power
//  284      *  setting.  This function will be called again after the current transmit
//  285      *  completes.
//  286      */
//  287     if (!macRxOutgoingAckFlag && !MAC_TX_IS_PHYSICALLY_ACTIVE())
        MOV	DPTR,#macRxOutgoingAckFlag
        MOVX	A,@DPTR
        JNZ	??macRadioUpdateTxPower_0
        MOV	DPTR,#macTxActive
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.7
        JC	??macRadioUpdateTxPower_0
//  288     {
//  289       /*
//  290        *  Set new power level;  update the shadow value and write
//  291        *  the new value to the radio hardware.
//  292        */
//  293       macPhyTxPower = reqTxPower;
        MOV	DPTR,#??reqTxPower
        MOVX	A,@DPTR
        MOV	DPTR,#macPhyTxPower
        MOVX	@DPTR,A
//  294       MAC_RADIO_SET_TX_POWER(macPhyTxPower);
        MOV	DPTR,#-0x20f5
        MOVX	@DPTR,A
//  295     }
//  296   }
//  297   HAL_EXIT_CRITICAL_SECTION(s);
??macRadioUpdateTxPower_0:
        MOV	A,R3
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
//  298 }
        LJMP	??Subroutine0_1 & 0xFFFF
        CFI EndBlock cfiBlock10
//  299 
//  300 
//  301 /**************************************************************************************************
//  302  * @fn          macRadioSetChannel
//  303  *
//  304  * @brief       Set radio channel.
//  305  *
//  306  * @param       channel - channel number, valid range is 11 through 26
//  307  *
//  308  * @return      none
//  309  **************************************************************************************************
//  310  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  311 void macRadioSetChannel(uint8 channel)
macRadioSetChannel:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function macRadioSetChannel
//  312 {
        FUNCALL macRadioSetChannel, halAssertHandler
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL macRadioSetChannel, macRadioUpdateChannel
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  313   halIntState_t  s;
//  314 
//  315   MAC_ASSERT((channel >= 11) && (channel <= 28));  /* illegal channel */
        CLR	C
        SUBB	A,#0xb
        JC	??macRadioSetChannel_0
        MOV	A,R6
        CLR	C
        SUBB	A,#0x1d
        JC	??macRadioSetChannel_1
??macRadioSetChannel_0:
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  316 
//  317   /* critical section to make sure transmit does not start while updating channel */
//  318   HAL_ENTER_CRITICAL_SECTION(s);
??macRadioSetChannel_1:
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R7,A
        CLR	0xa8.7
//  319 
//  320   /* set requested channel */
//  321   reqChannel = channel;
        MOV	A,R6
        MOV	DPTR,#??reqChannel
        MOVX	@DPTR,A
//  322 
//  323   /*
//  324    *  If transmit is not active, update the radio hardware immediately.  If transmit is active,
//  325    *  the channel will be updated at the end of the current transmit.
//  326    */
//  327   if (!macTxActive)
        MOV	DPTR,#macTxActive
        MOVX	A,@DPTR
        JNZ	??macRadioSetChannel_2
//  328   {
//  329     macRadioUpdateChannel();
        ; Setup parameters for call to function macRadioUpdateChannel
        MOV	DPTR,#(macRadioUpdateChannel & 0xffff)
        MOV	A,#((macRadioUpdateChannel >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  330   }
//  331   
//  332   HAL_EXIT_CRITICAL_SECTION(s);
??macRadioSetChannel_2:
        MOV	A,R7
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
        CFI EndBlock cfiBlock11
//  333 }
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock12
//  334 
//  335 
//  336 /**************************************************************************************************
//  337  * @fn          macRadioUpdateChannel
//  338  *
//  339  * @brief       Update the radio channel if a new channel has been requested.
//  340  *
//  341  * @param       none
//  342  *
//  343  * @return      none
//  344  **************************************************************************************************
//  345  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  346 void macRadioUpdateChannel(void)
macRadioUpdateChannel:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function macRadioUpdateChannel
//  347 {
        FUNCALL macRadioUpdateChannel, halAssertHandler
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL macRadioUpdateChannel, macRxOff
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL macRadioUpdateChannel, macRxOnRequest
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  348   halIntState_t  s;
//  349 
//  350   MAC_ASSERT(!macTxActive); /* cannot change channel during a transmit */
        MOV	DPTR,#macTxActive
        MOVX	A,@DPTR
        JZ	??macRadioUpdateChannel_0
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  351 
//  352   /* if the channel has changed, set the radio to the new channel */
//  353   HAL_ENTER_CRITICAL_SECTION(s);
??macRadioUpdateChannel_0:
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        CLR	0xa8.7
//  354   if (reqChannel != macPhyChannel)
        MOV	DPTR,#??reqChannel
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPTR,#macPhyChannel
        MOVX	A,@DPTR
        XRL	A,R2
        JZ	??macRadioUpdateChannel_1
//  355   {
//  356     macPhyChannel = reqChannel;
        MOV	DPTR,#??reqChannel
        MOVX	A,@DPTR
        MOV	DPTR,#macPhyChannel
        MOVX	@DPTR,A
//  357     HAL_EXIT_CRITICAL_SECTION(s);
        MOV	0xa8.7,C
//  358 
//  359     /* changing the channel stops any receive in progress */
//  360     macRxOff();
        ; Setup parameters for call to function macRxOff
        MOV	DPTR,#(macRxOff & 0xffff)
        MOV	A,#((macRxOff >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  361     MAC_RADIO_SET_CHANNEL(macPhyChannel);
        MOV	B,#0x5
        MOV	DPTR,#macPhyChannel
        MOVX	A,@DPTR
        MUL	AB
        ADD	A,#0x2e
        MOV	DPTR,#-0x20ef
        MOVX	@DPTR,A
//  362     macRxOnRequest();
        ; Setup parameters for call to function macRxOnRequest
        MOV	DPTR,#(macRxOnRequest & 0xffff)
        MOV	A,#((macRxOnRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??macRadioUpdateChannel_2
//  363   }
//  364   else
//  365   {
//  366     HAL_EXIT_CRITICAL_SECTION(s);
??macRadioUpdateChannel_1:
        MOV	0xa8.7,C
//  367   }
//  368 }
??macRadioUpdateChannel_2:
        LJMP	??Subroutine0_1 & 0xFFFF
        CFI EndBlock cfiBlock13
//  369 
//  370 
//  371 /**************************************************************************************************
//  372  * @fn          macRadioStartScan
//  373  *
//  374  * @brief       Puts radio into selected scan mode.
//  375  *
//  376  * @param       scanMode - scan mode, see #defines in .h file
//  377  *
//  378  * @return      none
//  379  **************************************************************************************************
//  380  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  381 void macRadioStartScan(uint8 scanMode)
macRadioStartScan:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function macRadioStartScan
//  382 {
        FUNCALL macRadioStartScan, halAssertHandler
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL macRadioStartScan, halAssertHandler
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL macRadioStartScan, halAssertHandler
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  383   MAC_ASSERT(macSleepState == MAC_SLEEP_STATE_AWAKE); /* radio must be awake */
        MOV	DPTR,#macSleepState
        MOVX	A,@DPTR
        JZ	??macRadioStartScan_0
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  384   MAC_ASSERT(macRxFilter == RX_FILTER_OFF); /* all filtering must be off to start scan */
??macRadioStartScan_0:
        MOV	DPTR,#macRxFilter
        MOVX	A,@DPTR
        JZ	??macRadioStartScan_1
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  385 
//  386   /* set the receive filter based on the selected scan mode */
//  387   if (scanMode == MAC_SCAN_ED)
??macRadioStartScan_1:
        MOV	A,R6
        JNZ	??macRadioStartScan_2
//  388   {
//  389     macRxFilter = RX_FILTER_ALL;
        MOV	A,#0x1
??macRadioStartScan_3:
        MOV	DPTR,#macRxFilter
        SJMP	??macRadioStartScan_4
//  390   }
//  391   else if (scanMode == MAC_SCAN_ORPHAN)
??macRadioStartScan_2:
        MOV	A,#0x3
        XRL	A,R6
        JNZ	??macRadioStartScan_5
//  392   {
//  393     macRxFilter = RX_FILTER_NON_COMMAND_FRAMES;
        MOV	A,#0x3
        SJMP	??macRadioStartScan_3
//  394   }
//  395   else
//  396   {
//  397     MAC_ASSERT((scanMode == MAC_SCAN_ACTIVE) || (scanMode == MAC_SCAN_PASSIVE)); /* invalid scan type */
??macRadioStartScan_5:
        MOV	A,#0x1
        XRL	A,R6
        JZ	??macRadioStartScan_6
        MOV	A,#0x2
        XRL	A,R6
        JZ	??macRadioStartScan_6
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  398     macRxFilter = RX_FILTER_NON_BEACON_FRAMES;
??macRadioStartScan_6:
        MOV	A,#0x2
        MOV	DPTR,#macRxFilter
        MOVX	@DPTR,A
//  399 
//  400     /* for active and passive scans, per spec the pan ID must be 0xFFFF */
//  401     MAC_RADIO_SET_PAN_ID(0xFFFF);
        MOV	A,#-0x1
        MOV	DPTR,#-0x20b4
        MOVX	@DPTR,A
        MOV	DPTR,#-0x20b5
??macRadioStartScan_4:
        MOVX	@DPTR,A
//  402   }
//  403 }
        LJMP	?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock14
//  404 
//  405 
//  406 /**************************************************************************************************
//  407  * @fn          macRadioStopScan
//  408  *
//  409  * @brief       Takes radio out of scan mode.  Note can be called if
//  410  *
//  411  * @param       none
//  412  *
//  413  * @return      none
//  414  **************************************************************************************************
//  415  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  416 void macRadioStopScan(void)
macRadioStopScan:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function macRadioStopScan
//  417 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  418   macRxFilter = RX_FILTER_OFF;
        CLR	A
        MOV	DPTR,#macRxFilter
        MOVX	@DPTR,A
//  419 
//  420   /* restore the pan ID (passive and active scans set pan ID to 0xFFFF) */
//  421   MAC_RADIO_SET_PAN_ID(macPib.panId);
        MOV	DPTR,#(macPib + 29)
        MOVX	A,@DPTR
        MOV	DPTR,#-0x20b4
        MOVX	@DPTR,A
        MOV	DPTR,#(macPib + 30)
        MOVX	A,@DPTR
        LJMP	?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock15
//  422 }
//  423 
//  424 
//  425 /**************************************************************************************************
//  426  * @fn          macRadioEnergyDetectStart
//  427  *
//  428  * @brief       Initiates energy detect.  The highest energy detected is recorded from the time
//  429  *              when this function is called until the energy detect is stopped.
//  430  *
//  431  * @param       none
//  432  *
//  433  * @return      none
//  434  **************************************************************************************************
//  435  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  436 void macRadioEnergyDetectStart(void)
macRadioEnergyDetectStart:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function macRadioEnergyDetectStart
//  437 {
        FUNCALL macRadioEnergyDetectStart, macMcuRecordMaxRssiStart
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  438   MAC_RADIO_RECORD_MAX_RSSI_START();
        ; Setup parameters for call to function macMcuRecordMaxRssiStart
        MOV	DPTR,#(macMcuRecordMaxRssiStart & 0xffff)
        MOV	A,#((macMcuRecordMaxRssiStart >> 16) & 0xff)
        LJMP	??Subroutine0_0 & 0xFFFF
        CFI EndBlock cfiBlock16
//  439 }
//  440 
//  441 
//  442 /**************************************************************************************************
//  443  * @fn          macRadioEnergyDetectStop
//  444  *
//  445  * @brief       Called at completion of an energy detect.  Note: can be called even if energy
//  446  *              detect is already stopped (needed by reset).
//  447  *
//  448  * @param       none
//  449  *
//  450  * @return      highest energy detect measurement
//  451  **************************************************************************************************
//  452  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  453 uint8 macRadioEnergyDetectStop(void)
macRadioEnergyDetectStop:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function macRadioEnergyDetectStop
//  454 {
        FUNCALL macRadioEnergyDetectStop, macMcuRecordMaxRssiStop
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL macRadioEnergyDetectStop, ??radioComputeED
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  455   uint8 rssiDbm;
//  456   uint8 energyDetectMeasurement;
//  457   
//  458   rssiDbm = MAC_RADIO_RECORD_MAX_RSSI_STOP() + MAC_RADIO_RSSI_OFFSET;
        ; Setup parameters for call to function macMcuRecordMaxRssiStop
        MOV	DPTR,#(macMcuRecordMaxRssiStop & 0xffff)
        MOV	A,#((macMcuRecordMaxRssiStop >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        ADD	A,#-0x2d
        MOV	R1,A
//  459   energyDetectMeasurement = radioComputeED(rssiDbm);
//  460   
//  461   return(energyDetectMeasurement);
        ; Setup parameters for call to function radioComputeED
        LJMP	?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock17
//  462 }
//  463 
//  464 /*=================================================================================================
//  465  * @fn          radioComputeED
//  466  *
//  467  * @brief       Compute energy detect measurement.
//  468  *
//  469  * @param       rssi - raw RSSI value from radio hardware
//  470  *
//  471  * @return      energy detect measurement in the range of 0x00-0xFF
//  472  *=================================================================================================
//  473  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  474 static uint8 radioComputeED(int8 rssiDbm)
??radioComputeED:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function ??radioComputeED
//  475 {
        ; Saved register size: 0
        ; Auto size: 0
//  476   uint8 ed;
//  477   
//  478   /*
//  479    *  Keep RF power between minimum and maximum values.
//  480    *  This min/max range is derived from datasheet and specification.
//  481    */
//  482   if (rssiDbm < ED_RF_POWER_MIN_DBM)
        MOV	A,R1
        CLR	C
        SUBB	A,#-0x51
        MOV	C,0xD0 /* PSW */.2
        XRL	A,PSW
        RLC	A
        JNC	??radioComputeED_1
//  483   {
//  484     rssiDbm = ED_RF_POWER_MIN_DBM;
        MOV	R1,#-0x51
        SJMP	??radioComputeED_2
//  485   }
//  486   else if (rssiDbm > ED_RF_POWER_MAX_DBM)
??radioComputeED_1:
        MOV	A,R1
        CLR	C
        SUBB	A,#0xb
        MOV	C,0xD0 /* PSW */.2
        XRL	A,PSW
        RLC	A
        JC	??radioComputeED_2
//  487   {
//  488     rssiDbm = ED_RF_POWER_MAX_DBM;
        MOV	R1,#0xa
//  489   }
//  490   
//  491   /*
//  492    *  Create energy detect measurement by normalizing and scaling RF power level.
//  493    *
//  494    *  Note : The division operation below is designed for maximum accuracy and
//  495    *         best granularity.  This is done by grouping the math operations to
//  496    *         compute the entire numerator before doing any division.
//  497    */
//  498   ed = (MAC_SPEC_ED_MAX * (rssiDbm - ED_RF_POWER_MIN_DBM)) / (ED_RF_POWER_MAX_DBM - ED_RF_POWER_MIN_DBM);
//  499 
//  500   return(ed);
??radioComputeED_2:
        MOV	A,R1
        MOV	R0,A
        RLC	A
        SUBB	A,0xE0 /* A   */
        MOV	R1,A
        MOV	A,#0x51
        ADD	A,R0
        MOV	R0,A
        CLR	A
        ADDC	A,R1
        MOV	R1,A
        MOV	A,R0
        MOV	B,#-0x1
        MUL	AB
        MOV	R0,A
        MOV	R2,B
        MOV	B,#-0x1
        MOV	A,R1
        MUL	AB
        ADD	A,R2
        MOV	R1,A
        MOV	R2,#0x5b
        MOV	R3,#0x0
        LCALL	?S_DIV_MOD
        MOV	A,R0
        MOV	R1,A
        LJMP	?BRET
        CFI EndBlock cfiBlock18
//  501 }
//  502 
//  503 
//  504 /**************************************************************************************************
//  505  * @fn          macRadioComputeLQI
//  506  *
//  507  * @brief       Compute link quality indication.
//  508  *
//  509  * @param       rssi - raw RSSI value from radio hardware
//  510  *              corr - correlation value from radio hardware
//  511  *
//  512  * @return      link quality indicator value
//  513  **************************************************************************************************
//  514  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  515 uint8 macRadioComputeLQI(int8 rssiDbm, uint8 corr)
macRadioComputeLQI:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function macRadioComputeLQI
//  516 {
        FUNCALL macRadioComputeLQI, ??radioComputeED
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  517   (void) corr; /* suppress compiler warning of unused parameter */
//  518   
//  519   /*
//  520    *  Note : Currently the LQI value is simply the energy detect measurement.
//  521    *         A more accurate value could be derived by using the correlation
//  522    *         value along with the RSSI value.
//  523    */  
//  524   return(radioComputeED(rssiDbm));
        ; Setup parameters for call to function radioComputeED
        LJMP	?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock19
//  525 }

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        END
//  526 
//  527 
//  528 /**************************************************************************************************
//  529 */
// 
// 643 bytes in segment BANKED_CODE
//   1 byte  in segment SFR_AN
//   4 bytes in segment XDATA_Z
// 
// 643 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 1 byte shared)
//   4 bytes of XDATA memory
//
//Errors: none
//Warnings: none
