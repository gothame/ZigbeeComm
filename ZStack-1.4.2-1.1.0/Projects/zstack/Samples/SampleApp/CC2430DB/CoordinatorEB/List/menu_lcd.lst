##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   17/Oct/2013  21:26:08 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Components\wxl\source\menu_l #
#                          cd.c                                              #
#    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCoor #
#                          d.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS       #
#                          "-DCONST=const __code" -DGENERIC=__generic) -f    #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConfig. #
#                          cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800     #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\Source\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mt\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2430EB\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\osal\mcu #
#                          \ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC #
#                          2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\osal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ #
#                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects #
#                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. #
#                          \Components\stack\af\ -I                          #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\stack\nw #
#                          k\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C #
#                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2430DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ #
#                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\zmac\f8w #
#                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                       #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          mac\high_level\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf03\ -I                #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\low_ #
#                          level\srf03\single_chip\ -D CC2430EB -D ZTOOL_P1  #
#                          -D MT_TASK -D MT_ZDO_FUNC -lC                     #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\ -lA            #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\CoordinatorEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Components\wxl\source\menu_l #
#                          cd.c                                              #
#    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\List\menu_lcd.lst    #
#    Object file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\CoordinatorEB\Obj\menu_lcd.r51     #
#                                                                            #
#                                                                            #
##############################################################################

E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Components\wxl\source\menu_lcd.c
      1          #include "app_ex.h"

   \                                 In segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1
      2          #include "hal.h"
      3          #include "lcd128_64.h"
      4          #include "string.h"
      5          #include "Font.h"
      6          #include "Menu.h"
      7          #include "hal_key.h"
      8          #include "OSAL.h"

  typedef uint16  UINT16;
                  ^
"E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Components\osal\include\ZComDef.h",180  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef int16   INT16;
                  ^
"E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Components\osal\include\ZComDef.h",181  Warning[Pe301]: 
          typedef name has already been declared (with same type)
      9          #include "ZGlobals.h"
     10          #include "AF.h"
     11          #include "aps_groups.h"
     12          #include "ZDApp.h"
     13          #include "stdio.h"
     14          #include "SampleApp.h"
     15          #include "SampleAppHw.h"
     16          #include "wxl_uart.h"
     17          
     18          #include  "hal_types.h"

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     19          INT8U NowItem = 0;
   \                     NowItem:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     20          INT8U FirstItem = 0;
   \                     FirstItem:
   \   000000                DS 1

   \                                 In segment XDATA_I, align 1, keep-with-next
     21          INT8U TopDisp = 1;
   \                     TopDisp:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for TopDisp>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     22          unsigned char MenuItem[13][17];					//²Ëµ¥»º³åÇø
   \                     MenuItem:
   \   000000                DS 221
     23          extern INT8U ContrastValue;
     24          
     25          
     26          extern struct join
     27          {
     28          	uint8 RfdCount;		//RFD¼ÆÊýÆ÷
     29          	uint8 RouterCount;	//Â·ÓÉÆ÷¼ÆÊýÆ÷
     30          	uint8 RfdAddr[20][10];	//´æ´¢RFD½ÚµãµØÖ·ÓÃ£¬¸ßÁ½Î»ÎªÍøÂçµØÖ·£¬µÍ8Î»ÎªÎïÀíµØÖ·
     31          	uint8 RouterAddr[20][10];//´æ´¢RFD½ÚµãµØÖ·ÓÃ£¬¸ßÁ½Î»ÎªÍøÂçµØÖ·£¬µÍ8Î»ÎªÎïÀíµØÖ·
     32          }JoinNode;
     33          
     34          extern union j{
     35            uint8 TxBuf[29];
     36            struct RFTXBUF
     37            {
     38                  uint8 HeadCom[3]; //ÃüÁîÍ·
     39                  uint8 Laddr[8];
     40                  uint16 Saddr;
     41                  uint8 DataBuf[16];  //Êý¾Ý»º³åÇø
     42            }TXDATA;
     43          }RfTx;//ÎÞÏß·¢ËÍ»º³åÇø
     44          
     45          void Page1Display(INT8U ss, INT8U tt);
     46          INT8U  DrawMenu(INT8U MenuItem[][17] , INT8U MenuNo,uint8 key);
     47          void MenuMenuDisp( uint8 keys );
     48          void Menu_all(uint8 key);
     49          void Zigbee_Network(INT8U key);
     50          void Aboat_Driver(uint8 key);
     51          void IEEE_menu(void);
     52          void Short_menu(void);
     53          void Zigbee_Network(INT8U key);
     54          INT8U Ten_to_16(INT8U Source_Data);
     55          void Send_Test(INT8U key);
     56          void Send_Broadcast(uint8 key);
     57          void Send_Option(uint8 key);
     58          extern uint8 SendData(uint8 *buf, uint16 addr, uint8 Leng);
     59          void ClearScreenLcd(void);
     60          void SelectTxAddr(INT8U key);
     61          void Uart_Menu(INT8U key);
     62          void Sensor_Menu(INT8U key);
     63          void Uart_Send(INT8U key);
     64          void Uart_RX(INT8U key);
     65          void Uart_Pingpong(INT8U key);
     66          uint16 ReadBattery(void);
     67          uint16 Read_Temp(void);
     68          void Temp_menu(INT8U key);
     69          void ReadBattery_menu(INT8U key);
     70          extern void SingleTxTest(uint8 key);
     71          void PingpongTxTest(uint8 key);
     72          extern void ConsecutionTxTest(uint8 key);
     73          extern void halWait(BYTE wait);
     74          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     75          INT8U disp_ieee[17],Short_Add[7];
   \                     disp_ieee:
   \   000000                DS 17

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
   \                     Short_Add:
   \   000000                DS 7

   \                                 In segment XDATA_I, align 1, keep-with-next
     76          int Menu_option = Aboat_Menu_2;
   \                     Menu_option:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for Menu_option>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     77          int Uart_Rx_Flag = 0;
   \                     Uart_Rx_Flag:
   \   000000                DS 2

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     78          int Uart_PP_Flag = 0;
   \                     Uart_PP_Flag:
   \   000000                DS 2

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     79          int Send_Flag;
   \                     Send_Flag:
   \   000000                DS 2

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     80          int Send_Flag_Consecution = 0;
   \                     Send_Flag_Consecution:
   \   000000                DS 2
     81          #ifdef ZG_Coord
     82          INT16U SrcSaddr = 0xffff;//·¢ËÍÊý¾ÝµØÖ·
     83          #else

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     84          INT16U SrcSaddr = 0x0000;//·¢ËÍÊý¾ÝµØÖ·
   \                     SrcSaddr:
   \   000000                DS 2
     85          #endif
     86          
     87          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
     88          void ClearScreenLcd(void)
   \                     ClearScreenLcd:
     89          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     90            ClearScreen();
   \   000004                ; Setup parameters for call to function ClearScreen
   \   000004   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   000007   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     91          #ifdef	ZG_Coord
     92            Print(0,4,"-----COORD-----",1);
     93          #endif	
     94          #ifdef	ZG_Router
     95            Print(0,0,"-----ROUTER-----",1);
     96          #endif
     97          #ifdef	ZG_ENDDEVICE
     98            Print(0,4,"---ENDDEVICE----",1);
     99          #endif
    100          }
   \   00000C                REQUIRE ?Subroutine25
   \   00000C                ; // Fall through to label ?Subroutine25

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    101          //*********************************************************************************
    102          //º¯ÊýÃû:INT8U  DrawMenu(INT8U MenuItem[][16] , INT8U MenuNo)
    103          //¹¦ÄÜ:²Ëµ¥ÏÔÊ¾
    104          //ÊäÈë£ºÎÞ
    105          //Êä³ö£ºÎÞ
    106          //*********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    107          INT8U  DrawMenu(INT8U MenuItem[][17] , INT8U MenuNo,uint8 key)
   \                     DrawMenu:
    108          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   EC           MOV     A,R4
   \   00000C   FF           MOV     R7,A
    109          	INT8U ii;
    110                  INT8U sel;
    111          	ClearScreenLcd();
   \   00000D                ; Setup parameters for call to function ClearScreen
   \   00000D   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   000010   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    112                  if(HAL_KEY_UP == key)
   \   000015   7401         MOV     A,#0x1
   \   000017   6F           XRL     A,R7
   \   000018   7012         JNZ     ??DrawMenu_0
    113          	{
    114          		if(NowItem > 0) NowItem -= 1;
   \   00001A   90....       MOV     DPTR,#NowItem
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6004         JZ      ??DrawMenu_1
   \                     ??DrawMenu_2:
   \   000020   14           DEC     A
   \   000021   F0           MOVX    @DPTR,A
   \   000022   8061         SJMP    ??DrawMenu_3
    115          		else if(FirstItem > 0) FirstItem -= 1;
   \                     ??DrawMenu_1:
   \   000024   90....       MOV     DPTR,#FirstItem
   \   000027   E0           MOVX    A,@DPTR
   \   000028   605B         JZ      ??DrawMenu_3
   \   00002A   80F4         SJMP    ??DrawMenu_2
    116          	}
    117          	if(HAL_KEY_DOWN == key)
   \                     ??DrawMenu_0:
   \   00002C   7410         MOV     A,#0x10
   \   00002E   6F           XRL     A,R7
   \   00002F   703B         JNZ     ??DrawMenu_4
    118          	{
    119          		if(MenuNo > 2)
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   C3           CLR     C
   \   000034   9403         SUBB    A,#0x3
   \   000036   90....       MOV     DPTR,#NowItem
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   4027         JC      ??DrawMenu_5
    120          		{
    121          			if(NowItem < 2) 	NowItem += 1;
   \   00003C   C3           CLR     C
   \   00003D   9402         SUBB    A,#0x2
   \   00003F   5005         JNC     ??DrawMenu_6
   \                     ??DrawMenu_7:
   \   000041   E0           MOVX    A,@DPTR
   \   000042   04           INC     A
   \   000043   F0           MOVX    @DPTR,A
   \   000044   8046         SJMP    ??DrawMenu_8
    122          			else if((FirstItem + 3) < MenuNo) 	FirstItem += 1;
   \                     ??DrawMenu_6:
   \   000046   90....       MOV     DPTR,#FirstItem
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   7403         MOV     A,#0x3
   \   00004D   28           ADD     A,R0
   \   00004E   08           INC     R0
   \   00004F   08           INC     R0
   \   000050   08           INC     R0
   \   000051   E4           CLR     A
   \   000052   3400         ADDC    A,#0x0
   \   000054   F9           MOV     R1,A
   \   000055   E8           MOV     A,R0
   \   000056   95..         SUBB    A,?V0 + 0
   \   000058   E9           MOV     A,R1
   \   000059   9400         SUBB    A,#0x0
   \   00005B   C3           CLR     C
   \   00005C   65D0         XRL     A,PSW
   \   00005E   33           RLC     A
   \   00005F   502B         JNC     ??DrawMenu_8
   \   000061   80DE         SJMP    ??DrawMenu_7
    123          		}
    124          		else
    125          		{
    126          			if(NowItem < 1) 	NowItem += 1;	
   \                     ??DrawMenu_5:
   \   000063   7003         JNZ     ??DrawMenu_9
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
    127          		}
    128          	}
    129          	if(HAL_KEY_ENTER == key)
    130          	{
    131          		sel = FirstItem + NowItem;
    132          		
    133          	}
    134          	if(HAL_KEY_CANCEL == key)
    135          	{
    136          		sel = 0xff;
    137          	}
    138          		if(MenuNo > 2)
    139          		{
    140          			for(ii = 0 ; ii < 3 ; ii++)
    141          			{
    142          				if(NowItem != ii)
    143          				{				
    144          					Print((ii*2+2),0,MenuItem[FirstItem + ii],1);
    145          				}
    146          				else
    147          				{	
    148          					Print((ii*2+2),0,MenuItem[FirstItem + ii],0);				
    149          				}
    150          			}
    151          		}
    152          		else
    153          		{
    154          			for(ii = 0 ; ii < MenuNo ; ii++)
   \                     ??DrawMenu_9:
   \   000068   7F00         MOV     R7,#0x0
   \   00006A   8076         SJMP    ??DrawMenu_10
   \                     ??DrawMenu_4:
   \   00006C   7420         MOV     A,#0x20
   \   00006E   6F           XRL     A,R7
   \   00006F   700D         JNZ     ??DrawMenu_11
   \   000071   90....       MOV     DPTR,#NowItem
   \   000074   E0           MOVX    A,@DPTR
   \   000075   90....       MOV     DPTR,#FirstItem
   \   000078   FA           MOV     R2,A
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   2A           ADD     A,R2
   \   00007B   FE           MOV     R6,A
   \   00007C   8007         SJMP    ??DrawMenu_3
   \                     ??DrawMenu_11:
   \   00007E   7404         MOV     A,#0x4
   \   000080   6F           XRL     A,R7
   \   000081   7002         JNZ     ??DrawMenu_3
   \   000083   7EFF         MOV     R6,#-0x1
   \                     ??DrawMenu_3:
   \   000085   E5..         MOV     A,?V0 + 0
   \   000087   C3           CLR     C
   \   000088   9403         SUBB    A,#0x3
   \   00008A   40DC         JC      ??DrawMenu_9
   \                     ??DrawMenu_8:
   \   00008C   7F00         MOV     R7,#0x0
   \   00008E   8026         SJMP    ??DrawMenu_12
   \                     ??DrawMenu_13:
   \   000090                ; Setup parameters for call to function Print
   \   000090   75..00       MOV     ?V0 + 0,#0x0
   \                     ??DrawMenu_14:
   \   000093   75..00       MOV     ?V0 + 1,#0x0
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   90....       MOV     DPTR,#FirstItem
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F8           MOV     R0,A
   \   0000A0   8F..         MOV     ?V0 + 0,R7
   \   0000A2   E5..         MOV     A,?V0 + 0
   \   0000A4   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000A7   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AF   0F           INC     R7
   \   0000B0   EF           MOV     A,R7
   \   0000B1   C3           CLR     C
   \   0000B2   9403         SUBB    A,#0x3
   \   0000B4   503E         JNC     ??DrawMenu_15
   \                     ??DrawMenu_12:
   \   0000B6   90....       MOV     DPTR,#NowItem
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   6F           XRL     A,R7
   \   0000BB   60D3         JZ      ??DrawMenu_13
   \   0000BD                ; Setup parameters for call to function Print
   \   0000BD   75..01       MOV     ?V0 + 0,#0x1
   \   0000C0   80D1         SJMP    ??DrawMenu_14
    155          			{
    156          				if(NowItem != ii)
    157          				{				
    158          					Print((ii*2+2),0,MenuItem[FirstItem + ii],1);
    159          				}
    160          				else
    161          				{	
    162          					Print((ii*2+2),0,MenuItem[FirstItem + ii],0);				
   \                     ??DrawMenu_16:
   \   0000C2                ; Setup parameters for call to function Print
   \   0000C2   75..00       MOV     ?V0 + 2,#0x0
   \                     ??DrawMenu_17:
   \   0000C5   75..00       MOV     ?V0 + 3,#0x0
   \   0000C8   78..         MOV     R0,#?V0 + 2
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CD   90....       MOV     DPTR,#FirstItem
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F8           MOV     R0,A
   \   0000D2   8F..         MOV     ?V0 + 2,R7
   \   0000D4   E5..         MOV     A,?V0 + 2
   \   0000D6   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000D9   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000DC   7402         MOV     A,#0x2
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
    163          				}
   \   0000E1   0F           INC     R7
   \                     ??DrawMenu_10:
   \   0000E2   EF           MOV     A,R7
   \   0000E3   C3           CLR     C
   \   0000E4   95..         SUBB    A,?V0 + 0
   \   0000E6   500C         JNC     ??DrawMenu_15
   \   0000E8   90....       MOV     DPTR,#NowItem
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   6F           XRL     A,R7
   \   0000ED   60D3         JZ      ??DrawMenu_16
   \   0000EF                ; Setup parameters for call to function Print
   \   0000EF   75..01       MOV     ?V0 + 2,#0x1
   \   0000F2   80D1         SJMP    ??DrawMenu_17
    164          			}
    165          		}
    166          		
    167                  return sel;
   \                     ??DrawMenu_15:
   \   0000F4   EE           MOV     A,R6
   \   0000F5   F9           MOV     R1,A
   \   0000F6   7F06         MOV     R7,#0x6
   \   0000F8   02....       LJMP    ?BANKED_LEAVE_XDATA
    168          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   28           ADD     A,R0
   \   000001   F8           MOV     R0,A
   \   000002   E4           CLR     A
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   E8           MOV     A,R0
   \   000007   75F011       MOV     B,#0x11
   \   00000A   A4           MUL     AB
   \   00000B   F8           MOV     R0,A
   \   00000C   AAF0         MOV     R2,B
   \   00000E   75F011       MOV     B,#0x11
   \   000011   E9           MOV     A,R1
   \   000012   A4           MUL     AB
   \   000013   2A           ADD     A,R2
   \   000014   F9           MOV     R1,A
   \   000015   E5..         MOV     A,?V0 + 4
   \   000017   28           ADD     A,R0
   \   000018   FC           MOV     R4,A
   \   000019   E5..         MOV     A,?V0 + 5
   \   00001B   39           ADDC    A,R1
   \   00001C   FD           MOV     R5,A
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   EF           MOV     A,R7
   \   000020   C3           CLR     C
   \   000021   33           RLC     A
   \   000022   2402         ADD     A,#0x2
   \   000024   F9           MOV     R1,A
   \   000025   90....       MOV     DPTR,#(Print & 0xffff)
   \   000028   74..         MOV     A,#((Print >> 16) & 0xff)
   \   00002A   22           RET
    169          //*********************************************************************************
    170          //º¯ÊýÃû:void MenuMenuDisp( void )
    171          //¹¦ÄÜ:Ö÷²Ëµ¥ÏÔÊ¾
    172          //ÊäÈë£ºÎÞ
    173          //Êä³ö£ºÎÞ
    174          //*********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    175          void MenuMenuDisp( uint8 key )
   \                     MenuMenuDisp:
    176          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    177              INT8U sel;
    178              strcpy((char*)MenuItem[0] ,"1:ZigBee Test   ");
   \   000007                ; Setup parameters for call to function strcpy
   \   000007   7C..         MOV     R4,#(`?<Constant "1:ZigBee Test   ">` & 0xff)
   \   000009   7D..         MOV     R5,#((`?<Constant "1:ZigBee Test   ">` >> 8) & 0xff)
   \   00000B   7A..         MOV     R2,#(MenuItem & 0xff)
   \   00000D   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   00000F   90....       MOV     DPTR,#(strcpy & 0xffff)
   \   000012   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    179              strcpy((char*)MenuItem[1] ,"2:Uart Test     ");
   \   000017                ; Setup parameters for call to function strcpy
   \   000017   7C..         MOV     R4,#(`?<Constant "2:Uart Test     ">` & 0xff)
   \   000019   7D..         MOV     R5,#((`?<Constant "2:Uart Test     ">` >> 8) & 0xff)
   \   00001B   7A..         MOV     R2,#((MenuItem + 17) & 0xff)
   \   00001D   7B..         MOV     R3,#(((MenuItem + 17) >> 8) & 0xff)
   \   00001F   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000021   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    180          #ifndef ZG_Coord
    181              strcpy((char*)MenuItem[2] ,"3:Sensor Test   ");
   \   000024                ; Setup parameters for call to function strcpy
   \   000024   7C..         MOV     R4,#(`?<Constant "3:Sensor Test   ">` & 0xff)
   \   000026   7D..         MOV     R5,#((`?<Constant "3:Sensor Test   ">` >> 8) & 0xff)
   \   000028   7A..         MOV     R2,#((MenuItem + 34) & 0xff)
   \   00002A   7B..         MOV     R3,#(((MenuItem + 34) >> 8) & 0xff)
   \   00002C   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   00002E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    182              strcpy((char*)MenuItem[3] ,"4:About         ");
   \   000031                ; Setup parameters for call to function strcpy
   \   000031   7C..         MOV     R4,#(`?<Constant "4:About         ">` & 0xff)
   \   000033   7D..         MOV     R5,#((`?<Constant "4:About         ">` >> 8) & 0xff)
   \   000035   7A..         MOV     R2,#((MenuItem + 51) & 0xff)
   \   000037   7B..         MOV     R3,#(((MenuItem + 51) >> 8) & 0xff)
   \   000039   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   00003B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    183              sel = DrawMenu(MenuItem , 4,key);
   \   00003E                ; Setup parameters for call to function DrawMenu
   \   00003E   EE           MOV     A,R6
   \   00003F   FC           MOV     R4,A
   \   000040   7904         MOV     R1,#0x4
   \   000042   7A..         MOV     R2,#(MenuItem & 0xff)
   \   000044   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   000046   90....       MOV     DPTR,#(DrawMenu & 0xffff)
   \   000049   74..         MOV     A,#((DrawMenu >> 16) & 0xff)
   \   00004B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004E   E9           MOV     A,R1
   \   00004F   FE           MOV     R6,A
    184          #else
    185              strcpy((char*)MenuItem[2] ,"3:About         ");
    186              sel = DrawMenu(MenuItem , 3,key);
    187          #endif
    188          
    189          
    190              halWait(5);
   \   000050                ; Setup parameters for call to function halWait
   \   000050   7905         MOV     R1,#0x5
   \   000052   90....       MOV     DPTR,#(halWait & 0xffff)
   \   000055   74..         MOV     A,#((halWait >> 16) & 0xff)
   \   000057   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    191              switch(sel)
   \   00005A   EE           MOV     A,R6
   \   00005B   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for MenuMenuDisp>_0`:
   \   00005E   FF           DB        255
   \   00005F   04           DB        4
   \   000060   ....         DW        ??MenuMenuDisp_0
   \   000062   ....         DW        ??MenuMenuDisp_1
   \   000064   ....         DW        ??MenuMenuDisp_2
   \   000066   ....         DW        ??MenuMenuDisp_3
   \   000068   ....         DW        ??MenuMenuDisp_4
   \   00006A   ....         DW        ??MenuMenuDisp_5
    192              {
    193                case 0:
    194                {
    195                  Menu_option = Zigbee_Menu_2;
   \                     ??MenuMenuDisp_2:
   \   00006C   90....       MOV     DPTR,#Menu_option
   \   00006F   7401         MOV     A,#0x1
   \   000071   8020         SJMP    ??MenuMenuDisp_6
    196                  Menu_all(0);
    197                  //Zigbee_Network(key);
    198                }break;
    199                case 1:
    200                {
    201                  Menu_option = Uart_Menu_2;
   \                     ??MenuMenuDisp_3:
   \   000073   90....       MOV     DPTR,#Menu_option
   \   000076   7402         MOV     A,#0x2
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
    202                  FirstItem = 0;
   \   00007C   90....       MOV     DPTR,#FirstItem
   \                     ??MenuMenuDisp_7:
   \   00007F   12....       LCALL   ?Subroutine28 & 0xFFFF
    203                  NowItem = 0;
   \                     ??CrossCallReturnLabel_69:
   \   000082   8012         SJMP    ??MenuMenuDisp_8
    204                  Menu_all(0);
    205          			//stop_watch_main();
    206                }break;
    207          #ifndef ZG_Coord
    208                case 2:
    209                {
    210          
    211          	Menu_option = Sensor_Menu_2;
   \                     ??MenuMenuDisp_4:
   \   000084   90....       MOV     DPTR,#Menu_option
   \   000087   7403         MOV     A,#0x3
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E4           CLR     A
   \   00008C   80F1         SJMP    ??MenuMenuDisp_7
    212          
    213                  NowItem = 0;
    214                  Menu_all(0);
    215                }break;
    216                case 3:
    217                {
    218          	Menu_option = Aboat_Menu_2;
   \                     ??MenuMenuDisp_5:
   \   00008E   90....       MOV     DPTR,#Menu_option
   \   000091   7406         MOV     A,#0x6
   \                     ??MenuMenuDisp_6:
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   E4           CLR     A
   \                     ??MenuMenuDisp_8:
   \   000096   F0           MOVX    @DPTR,A
    219                  Menu_all(0);			//clockmodes_main();
    220                }break;
    221          #else
    222                case 2:
    223                {
    224          	Menu_option = Aboat_Menu_2;
    225                  Menu_all(0);			//clockmodes_main();
    226                }break;
    227          #endif
    228                case 0xFF:
    229                {
    230                  Menu_all(0);
   \                     ??MenuMenuDisp_1:
   \   000097                ; Setup parameters for call to function Menu_all
   \   000097   7900         MOV     R1,#0x0
   \   000099   90....       MOV     DPTR,#(Menu_all & 0xffff)
   \   00009C   74..         MOV     A,#((Menu_all >> 16) & 0xff)
   \   00009E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    231                }break;
    232                default:
    233                break;
    234              }
    235          }
   \                     ??MenuMenuDisp_0:
   \   0000A1   02....       LJMP    ?Subroutine30 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#NowItem
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    236          
    237          //*********************************************************************************
    238          //º¯ÊýÃû:void Menu_all(uint8 key)
    239          //¹¦ÄÜ:²Ëµ¥Ñ¡Ôñ
    240          //ÊäÈë£ºÎÞ
    241          //Êä³ö£ºÎÞ
    242          //*********************************************************************************
    243          
    244          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    245          void Menu_all(uint8 key)
   \                     Menu_all:
    246          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    247            if(Menu_option == Main_Menu_1)
   \   000004   90....       MOV     DPTR,#Menu_option
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??Menu_all_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??Menu_all_0:
   \   00000C   7008         JNZ     ??Menu_all_1
    248            {
    249              MenuMenuDisp(key);
   \   00000E                ; Setup parameters for call to function MenuMenuDisp
   \   00000E   90....       MOV     DPTR,#(MenuMenuDisp & 0xffff)
   \   000011   74..         MOV     A,#((MenuMenuDisp >> 16) & 0xff)
   \   000013   02....       LJMP    ??Menu_all_2 & 0xFFFF
    250            }
    251            else if(Menu_option == Zigbee_Menu_2)
   \                     ??Menu_all_1:
   \   000016   90....       MOV     DPTR,#Menu_option
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6401         XRL     A,#0x1
   \   00001C   7002         JNZ     ??Menu_all_3
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \                     ??Menu_all_3:
   \   000020   7008         JNZ     ??Menu_all_4
    252            {
    253              Zigbee_Network(key);
   \   000022                ; Setup parameters for call to function Zigbee_Network
   \   000022   90....       MOV     DPTR,#(Zigbee_Network & 0xffff)
   \   000025   74..         MOV     A,#((Zigbee_Network >> 16) & 0xff)
   \   000027   02....       LJMP    ??Menu_all_2 & 0xFFFF
    254            }
    255            else if(Menu_option == Aboat_Menu_2)
   \                     ??Menu_all_4:
   \   00002A   90....       MOV     DPTR,#Menu_option
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6406         XRL     A,#0x6
   \   000030   7002         JNZ     ??Menu_all_5
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \                     ??Menu_all_5:
   \   000034   7008         JNZ     ??Menu_all_6
    256            {
    257              Aboat_Driver(key);
   \   000036                ; Setup parameters for call to function Aboat_Driver
   \   000036   90....       MOV     DPTR,#(Aboat_Driver & 0xffff)
   \   000039   74..         MOV     A,#((Aboat_Driver >> 16) & 0xff)
   \   00003B   02....       LJMP    ??Menu_all_2 & 0xFFFF
    258            }
    259            else if(Menu_option == Send_Menu_3)
   \                     ??Menu_all_6:
   \   00003E   90....       MOV     DPTR,#Menu_option
   \   000041   E0           MOVX    A,@DPTR
   \   000042   6407         XRL     A,#0x7
   \   000044   7002         JNZ     ??Menu_all_7
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \                     ??Menu_all_7:
   \   000048   7008         JNZ     ??Menu_all_8
    260            {
    261              Send_Option(key);
   \   00004A                ; Setup parameters for call to function Send_Option
   \   00004A   90....       MOV     DPTR,#(Send_Option & 0xffff)
   \   00004D   74..         MOV     A,#((Send_Option >> 16) & 0xff)
   \   00004F   02....       LJMP    ??Menu_all_2 & 0xFFFF
    262            }
    263            else if((Menu_option == Single_Send_Menu_4)||(Menu_option == Continuous_Send_Menu_4))
   \                     ??Menu_all_8:
   \   000052   90....       MOV     DPTR,#Menu_option
   \   000055   E0           MOVX    A,@DPTR
   \   000056   6408         XRL     A,#0x8
   \   000058   7002         JNZ     ??Menu_all_9
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \                     ??Menu_all_9:
   \   00005C   600C         JZ      ??Menu_all_10
   \   00005E   90....       MOV     DPTR,#Menu_option
   \   000061   E0           MOVX    A,@DPTR
   \   000062   6409         XRL     A,#0x9
   \   000064   7002         JNZ     ??Menu_all_11
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \                     ??Menu_all_11:
   \   000068   7008         JNZ     ??Menu_all_12
    264            {
    265              Send_Test(key);
   \                     ??Menu_all_10:
   \   00006A                ; Setup parameters for call to function Send_Test
   \   00006A   90....       MOV     DPTR,#(Send_Test & 0xffff)
   \   00006D   74..         MOV     A,#((Send_Test >> 16) & 0xff)
   \   00006F   02....       LJMP    ??Menu_all_2 & 0xFFFF
    266            }
    267            else if(Menu_option == Send_Broadcast_Menu_5)
   \                     ??Menu_all_12:
   \   000072   90....       MOV     DPTR,#Menu_option
   \   000075   E0           MOVX    A,@DPTR
   \   000076   640A         XRL     A,#0xa
   \   000078   7002         JNZ     ??Menu_all_13
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \                     ??Menu_all_13:
   \   00007C   7008         JNZ     ??Menu_all_14
    268            {
    269              Send_Broadcast(key);
   \   00007E                ; Setup parameters for call to function Send_Broadcast
   \   00007E   90....       MOV     DPTR,#(Send_Broadcast & 0xffff)
   \   000081   74..         MOV     A,#((Send_Broadcast >> 16) & 0xff)
   \   000083   02....       LJMP    ??Menu_all_2 & 0xFFFF
    270            }
    271            else if(Menu_option == Pingpong_Test_Menu_5)
   \                     ??Menu_all_14:
   \   000086   90....       MOV     DPTR,#Menu_option
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   6411         XRL     A,#0x11
   \   00008C   7002         JNZ     ??Menu_all_15
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \                     ??Menu_all_15:
   \   000090   7008         JNZ     ??Menu_all_16
    272            {
    273              PingpongTxTest(key);
   \   000092                ; Setup parameters for call to function PingpongTxTest
   \   000092   90....       MOV     DPTR,#(PingpongTxTest & 0xffff)
   \   000095   74..         MOV     A,#((PingpongTxTest >> 16) & 0xff)
   \   000097   02....       LJMP    ??Menu_all_2 & 0xFFFF
    274            }
    275            else if(Menu_option == Nod_Menu_3)
   \                     ??Menu_all_16:
   \   00009A   90....       MOV     DPTR,#Menu_option
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   640B         XRL     A,#0xb
   \   0000A0   7002         JNZ     ??Menu_all_17
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \                     ??Menu_all_17:
   \   0000A4   7008         JNZ     ??Menu_all_18
    276            {
    277              SelectTxAddr(key);
   \   0000A6                ; Setup parameters for call to function SelectTxAddr
   \   0000A6   90....       MOV     DPTR,#(SelectTxAddr & 0xffff)
   \   0000A9   74..         MOV     A,#((SelectTxAddr >> 16) & 0xff)
   \   0000AB   02....       LJMP    ??Menu_all_2 & 0xFFFF
    278            }
    279            else if(Menu_option == Send_Short_Addr_Menu_5)
   \                     ??Menu_all_18:
   \   0000AE   90....       MOV     DPTR,#Menu_option
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   640D         XRL     A,#0xd
   \   0000B4   7002         JNZ     ??Menu_all_19
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \                     ??Menu_all_19:
   \   0000B8   7008         JNZ     ??Menu_all_20
    280            {
    281              SingleTxTest(key);
   \   0000BA                ; Setup parameters for call to function SingleTxTest
   \   0000BA   90....       MOV     DPTR,#(SingleTxTest & 0xffff)
   \   0000BD   74..         MOV     A,#((SingleTxTest >> 16) & 0xff)
   \   0000BF   02....       LJMP    ??Menu_all_2 & 0xFFFF
    282            }
    283            else if(Menu_option == Uart_Menu_2)
   \                     ??Menu_all_20:
   \   0000C2   90....       MOV     DPTR,#Menu_option
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   6402         XRL     A,#0x2
   \   0000C8   7002         JNZ     ??Menu_all_21
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \                     ??Menu_all_21:
   \   0000CC   7007         JNZ     ??Menu_all_22
    284            {
    285              Uart_Menu(key);
   \   0000CE                ; Setup parameters for call to function Uart_Menu
   \   0000CE   90....       MOV     DPTR,#(Uart_Menu & 0xffff)
   \   0000D1   74..         MOV     A,#((Uart_Menu >> 16) & 0xff)
   \   0000D3   8070         SJMP    ??Menu_all_2
    286            }
    287            else if(Menu_option == Uart_TX_Menu_3)
   \                     ??Menu_all_22:
   \   0000D5   90....       MOV     DPTR,#Menu_option
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   640E         XRL     A,#0xe
   \   0000DB   7002         JNZ     ??Menu_all_23
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \                     ??Menu_all_23:
   \   0000DF   7007         JNZ     ??Menu_all_24
    288            {
    289              Uart_Send(key);
   \   0000E1                ; Setup parameters for call to function Uart_Send
   \   0000E1   90....       MOV     DPTR,#(Uart_Send & 0xffff)
   \   0000E4   74..         MOV     A,#((Uart_Send >> 16) & 0xff)
   \   0000E6   805D         SJMP    ??Menu_all_2
    290            }
    291            else if(Menu_option == Uart_RX_Menu_3)
   \                     ??Menu_all_24:
   \   0000E8   90....       MOV     DPTR,#Menu_option
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   640F         XRL     A,#0xf
   \   0000EE   7002         JNZ     ??Menu_all_25
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \                     ??Menu_all_25:
   \   0000F2   7007         JNZ     ??Menu_all_26
    292            {
    293              Uart_RX(key);
   \   0000F4                ; Setup parameters for call to function Uart_RX
   \   0000F4   90....       MOV     DPTR,#(Uart_RX & 0xffff)
   \   0000F7   74..         MOV     A,#((Uart_RX >> 16) & 0xff)
   \   0000F9   804A         SJMP    ??Menu_all_2
    294            }
    295            else if(Menu_option == Uart_PP_Menu_3)
   \                     ??Menu_all_26:
   \   0000FB   90....       MOV     DPTR,#Menu_option
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   6410         XRL     A,#0x10
   \   000101   7002         JNZ     ??Menu_all_27
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \                     ??Menu_all_27:
   \   000105   7007         JNZ     ??Menu_all_28
    296            {
    297              Uart_Pingpong(key);
   \   000107                ; Setup parameters for call to function Uart_Pingpong
   \   000107   90....       MOV     DPTR,#(Uart_Pingpong & 0xffff)
   \   00010A   74..         MOV     A,#((Uart_Pingpong >> 16) & 0xff)
   \   00010C   8037         SJMP    ??Menu_all_2
    298            }
    299          #ifndef ZG_Coord
    300            else if(Menu_option == Sensor_ReadBattery_Menu_3)
   \                     ??Menu_all_28:
   \   00010E   90....       MOV     DPTR,#Menu_option
   \   000111   E0           MOVX    A,@DPTR
   \   000112   6412         XRL     A,#0x12
   \   000114   7002         JNZ     ??Menu_all_29
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \                     ??Menu_all_29:
   \   000118   7007         JNZ     ??Menu_all_30
    301            {
    302              ReadBattery_menu(key);
   \   00011A                ; Setup parameters for call to function ReadBattery_menu
   \   00011A   90....       MOV     DPTR,#(ReadBattery_menu & 0xffff)
   \   00011D   74..         MOV     A,#((ReadBattery_menu >> 16) & 0xff)
   \   00011F   8024         SJMP    ??Menu_all_2
    303            }
    304            else if(Menu_option == Sensor_Menu_2)
   \                     ??Menu_all_30:
   \   000121   90....       MOV     DPTR,#Menu_option
   \   000124   E0           MOVX    A,@DPTR
   \   000125   6403         XRL     A,#0x3
   \   000127   7002         JNZ     ??Menu_all_31
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \                     ??Menu_all_31:
   \   00012B   7007         JNZ     ??Menu_all_32
    305            {
    306              Sensor_Menu(key);
   \   00012D                ; Setup parameters for call to function Sensor_Menu
   \   00012D   90....       MOV     DPTR,#(Sensor_Menu & 0xffff)
   \   000130   74..         MOV     A,#((Sensor_Menu >> 16) & 0xff)
   \   000132   8011         SJMP    ??Menu_all_2
    307            }
    308            else if(Menu_option == Sensor_Temp_Menu_3)
   \                     ??Menu_all_32:
   \   000134   90....       MOV     DPTR,#Menu_option
   \   000137   E0           MOVX    A,@DPTR
   \   000138   6413         XRL     A,#0x13
   \   00013A   7002         JNZ     ??Menu_all_33
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \                     ??Menu_all_33:
   \   00013E   7008         JNZ     ??Menu_all_34
    309            {
    310              Temp_menu(key);
   \   000140                ; Setup parameters for call to function Temp_menu
   \   000140   90....       MOV     DPTR,#(Temp_menu & 0xffff)
   \   000143   74..         MOV     A,#((Temp_menu >> 16) & 0xff)
   \                     ??Menu_all_2:
   \   000145   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    311            }
    312          #endif
    313          }
   \                     ??Menu_all_34:
   \   000148   02....       LJMP    ?Subroutine25 & 0xFFFF
    314          //*********************************************************************************
    315          //º¯ÊýÃû:void Zigbee_Network(INT8U key)
    316          //¹¦ÄÜ:ZIGBEE²Ëµ¥
    317          //ÊäÈë£ºÎÞ
    318          //Êä³ö£ºÎÞ
    319          //*********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    320          void Zigbee_Network(INT8U key)
   \                     Zigbee_Network:
    321          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    322            INT8U sel;
    323             strcpy((char*)MenuItem[0] ,"1:Send Test     ");
   \   000007                ; Setup parameters for call to function strcpy
   \   000007   7C..         MOV     R4,#(`?<Constant "1:Send Test     ">` & 0xff)
   \   000009   7D..         MOV     R5,#((`?<Constant "1:Send Test     ">` >> 8) & 0xff)
   \   00000B   7A..         MOV     R2,#(MenuItem & 0xff)
   \   00000D   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   00000F   90....       MOV     DPTR,#(strcpy & 0xffff)
   \   000012   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    324              strcpy((char*)MenuItem[1] ,"2:Network nod   ");
   \   000017                ; Setup parameters for call to function strcpy
   \   000017   7C..         MOV     R4,#(`?<Constant "2:Network nod   ">` & 0xff)
   \   000019   7D..         MOV     R5,#((`?<Constant "2:Network nod   ">` >> 8) & 0xff)
   \   00001B   7A..         MOV     R2,#((MenuItem + 17) & 0xff)
   \   00001D   7B..         MOV     R3,#(((MenuItem + 17) >> 8) & 0xff)
   \   00001F   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000021   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    325              sel = DrawMenu(MenuItem ,2,key);
    326                switch(sel)
   \   000024                ; Setup parameters for call to function DrawMenu
   \   000024   EE           MOV     A,R6
   \   000025   FC           MOV     R4,A
   \   000026   7902         MOV     R1,#0x2
   \   000028   7A..         MOV     R2,#(MenuItem & 0xff)
   \   00002A   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   00002C   90....       MOV     DPTR,#(DrawMenu & 0xffff)
   \   00002F   74..         MOV     A,#((DrawMenu >> 16) & 0xff)
   \   000031   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000034   E9           MOV     A,R1
   \   000035   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for Zigbee_Network>_0`:
   \   000038   FF           DB        255
   \   000039   02           DB        2
   \   00003A   ....         DW        ??Zigbee_Network_0
   \   00003C   ....         DW        ??Zigbee_Network_1
   \   00003E   ....         DW        ??Zigbee_Network_2
   \   000040   ....         DW        ??Zigbee_Network_3
    327                {
    328                  case 0:
    329                    Menu_option = Send_Menu_3;
   \                     ??Zigbee_Network_2:
   \   000042   90....       MOV     DPTR,#Menu_option
   \   000045   7407         MOV     A,#0x7
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E4           CLR     A
   \   00004A   8010         SJMP    ??CrossCallReturnLabel_70
    330                    Menu_all(0);
    331                    //SelectTxAddr(key);//Ñ¡ÔñµØÖ·
    332                  break;
    333                  case 1:
    334                    Menu_option = Nod_Menu_3;
   \                     ??Zigbee_Network_3:
   \   00004C   90....       MOV     DPTR,#Menu_option
   \   00004F   740B         MOV     A,#0xb
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   E4           CLR     A
   \   000054   8003         SJMP    ??CrossCallReturnLabel_23
    335          
    336                    NowItem = 0;
    337                    Menu_all(0);
    338                  break;
    339                  case 0xff:
    340                    Menu_option = Main_Menu_1;
   \                     ??Zigbee_Network_1:
   \   000056   12....       LCALL   ?Subroutine11 & 0xFFFF
    341                    FirstItem = 0;
   \                     ??CrossCallReturnLabel_23:
   \   000059   12....       LCALL   ?Subroutine28 & 0xFFFF
    342                    NowItem = 0;
   \                     ??CrossCallReturnLabel_70:
   \   00005C   12....       LCALL   ?Subroutine27 & 0xFFFF
    343                    Menu_all(0);
   \                     ??CrossCallReturnLabel_62:
   \   00005F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    344                    break;
    345                }
    346          }
   \                     ??Zigbee_Network_0:
   \   000062   02....       LJMP    ?Subroutine30 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#Menu_option
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   90....       MOV     DPTR,#FirstItem
   \   00000A   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001                ; Setup parameters for call to function Menu_all
   \   000001   F9           MOV     R1,A
   \   000002   90....       MOV     DPTR,#(Menu_all & 0xffff)
   \   000005   74..         MOV     A,#((Menu_all >> 16) & 0xff)
   \   000007   22           RET
    347          //*********************************************************************************
    348          //º¯ÊýÃû:void Send_Option(uint8 key)
    349          //¹¦ÄÜ:·¢ËÍ²Ëµ¥Ñ¡Ïî
    350          //ÊäÈë£ºÎÞ
    351          //Êä³ö£ºÎÞ
    352          //*********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    353          void Send_Option(uint8 key)
   \                     Send_Option:
    354          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    355            INT8U sel;
    356            strcpy((char*)MenuItem[0] ,"1:Single Send   ");
   \   000007                ; Setup parameters for call to function strcpy
   \   000007   7C..         MOV     R4,#(`?<Constant "1:Single Send   ">` & 0xff)
   \   000009   7D..         MOV     R5,#((`?<Constant "1:Single Send   ">` >> 8) & 0xff)
   \   00000B   7A..         MOV     R2,#(MenuItem & 0xff)
   \   00000D   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   00000F   90....       MOV     DPTR,#(strcpy & 0xffff)
   \   000012   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    357            strcpy((char*)MenuItem[1] ,"2:Continuous    ");
   \   000017                ; Setup parameters for call to function strcpy
   \   000017   7C..         MOV     R4,#(`?<Constant "2:Continuous    ">` & 0xff)
   \   000019   7D..         MOV     R5,#((`?<Constant "2:Continuous    ">` >> 8) & 0xff)
   \   00001B   7A..         MOV     R2,#((MenuItem + 17) & 0xff)
   \   00001D   7B..         MOV     R3,#(((MenuItem + 17) >> 8) & 0xff)
   \   00001F   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000021   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    358            sel = DrawMenu(MenuItem ,2,key);
    359            switch(sel)
   \   000024                ; Setup parameters for call to function DrawMenu
   \   000024   EE           MOV     A,R6
   \   000025   FC           MOV     R4,A
   \   000026   7902         MOV     R1,#0x2
   \   000028   7A..         MOV     R2,#(MenuItem & 0xff)
   \   00002A   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   00002C   90....       MOV     DPTR,#(DrawMenu & 0xffff)
   \   00002F   74..         MOV     A,#((DrawMenu >> 16) & 0xff)
   \   000031   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000034   E9           MOV     A,R1
   \   000035   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for Send_Option>_0`:
   \   000038   FF           DB        255
   \   000039   02           DB        2
   \   00003A   ....         DW        ??Send_Option_0
   \   00003C   ....         DW        ??Send_Option_1
   \   00003E   ....         DW        ??Send_Option_2
   \   000040   ....         DW        ??Send_Option_3
    360            {
    361              case 0:
    362                Send_Flag = Send_Flag_Single;
   \                     ??Send_Option_2:
   \   000042   90....       MOV     DPTR,#Send_Flag
   \   000045   E4           CLR     A
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   12....       LCALL   ?Subroutine28 & 0xFFFF
    363                NowItem = 0;
   \                     ??CrossCallReturnLabel_71:
   \   00004B   12....       LCALL   ?Subroutine29 & 0xFFFF
    364                Menu_option = Single_Send_Menu_4;
   \                     ??CrossCallReturnLabel_77:
   \   00004E   7408         MOV     A,#0x8
   \                     ??Send_Option_4:
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   E4           CLR     A
   \   000053   801A         SJMP    ??CrossCallReturnLabel_7
    365                Menu_all(0);
    366               break;
    367              case 1:
    368                Send_Flag = Send_Flag_Continuous;
   \                     ??Send_Option_3:
   \   000055   90....       MOV     DPTR,#Send_Flag
   \   000058   7401         MOV     A,#0x1
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   E4           CLR     A
   \   00005D   12....       LCALL   ?Subroutine28 & 0xFFFF
    369                NowItem = 0;
   \                     ??CrossCallReturnLabel_72:
   \   000060   12....       LCALL   ?Subroutine29 & 0xFFFF
    370                Menu_option = Continuous_Send_Menu_4;
   \                     ??CrossCallReturnLabel_78:
   \   000063   7409         MOV     A,#0x9
   \   000065   80E9         SJMP    ??Send_Option_4
    371                Menu_all(0);
    372              break;
    373              case 0xff:
    374                Menu_option = Zigbee_Menu_2;
   \                     ??Send_Option_1:
   \   000067   90....       MOV     DPTR,#Menu_option
   \   00006A   7401         MOV     A,#0x1
   \   00006C   12....       LCALL   ?Subroutine5 & 0xFFFF
    375                FirstItem = 0;
    376                NowItem = 0;
   \                     ??CrossCallReturnLabel_7:
   \   00006F   12....       LCALL   ?Subroutine27 & 0xFFFF
    377                Menu_all(0);
   \                     ??CrossCallReturnLabel_63:
   \   000072   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    378              break;
    379            }
    380          }
   \                     ??Send_Option_0:
   \   000075   80..         SJMP    ?Subroutine30

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#FirstItem
   \   000004   02....       LJMP    ?Subroutine28 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#Menu_option
   \   000004   22           RET
    381          //*********************************************************************************
    382          //º¯ÊýÃû:void Send_Test(INT8U key)
    383          //¹¦ÄÜ:·¢ËÍ²âÊÔ²Ëµ¥
    384          //ÊäÈë£ºÎÞ
    385          //Êä³ö£ºÎÞ
    386          //*********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    387          void Send_Test(INT8U key)
   \                     Send_Test:
    388          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    389            INT8U sel;
    390             strcpy((char*)MenuItem[0] ,"1:Short Addr    ");                 //¶ÌµØÖ·£¨ÍøÂçµØÖ·£©·¢ËÍ
   \   000007                ; Setup parameters for call to function strcpy
   \   000007   7C..         MOV     R4,#(`?<Constant "1:Short Addr    ">` & 0xff)
   \   000009   7D..         MOV     R5,#((`?<Constant "1:Short Addr    ">` >> 8) & 0xff)
   \   00000B   7A..         MOV     R2,#(MenuItem & 0xff)
   \   00000D   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   00000F   90....       MOV     DPTR,#(strcpy & 0xffff)
   \   000012   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    391             strcpy((char*)MenuItem[1] ,"2:Broadcast Send");                 //¹ã²¥·¢ËÍ
   \   000017                ; Setup parameters for call to function strcpy
   \   000017   7C..         MOV     R4,#(`?<Constant "2:Broadcast Send">` & 0xff)
   \   000019   7D..         MOV     R5,#((`?<Constant "2:Broadcast Send">` >> 8) & 0xff)
   \   00001B   7A..         MOV     R2,#((MenuItem + 17) & 0xff)
   \   00001D   7B..         MOV     R3,#(((MenuItem + 17) >> 8) & 0xff)
   \   00001F   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000021   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    392          #ifdef ZG_Coord
    393             strcpy((char*)MenuItem[2] ,"3:PingPong  Send");                 //Æ¹ÅÒ²âÊÔ
    394             sel = DrawMenu(MenuItem ,3,key);
    395          #else
    396             sel = DrawMenu(MenuItem ,2,key);
    397          #endif
    398                switch(sel)
   \   000024                ; Setup parameters for call to function DrawMenu
   \   000024   EE           MOV     A,R6
   \   000025   FC           MOV     R4,A
   \   000026   7902         MOV     R1,#0x2
   \   000028   7A..         MOV     R2,#(MenuItem & 0xff)
   \   00002A   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   00002C   90....       MOV     DPTR,#(DrawMenu & 0xffff)
   \   00002F   74..         MOV     A,#((DrawMenu >> 16) & 0xff)
   \   000031   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000034   E9           MOV     A,R1
   \   000035   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for Send_Test>_0`:
   \   000038   FF           DB        255
   \   000039   03           DB        3
   \   00003A   ....         DW        ??Send_Test_0
   \   00003C   ....         DW        ??Send_Test_1
   \   00003E   ....         DW        ??Send_Test_2
   \   000040   ....         DW        ??Send_Test_3
   \   000042   ....         DW        ??Send_Test_4
    399                {
    400                  case 0:
    401                    Menu_option = Send_Short_Addr_Menu_5;
   \                     ??Send_Test_2:
   \   000044   90....       MOV     DPTR,#Menu_option
   \   000047   740D         MOV     A,#0xd
   \                     ??Send_Test_5:
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   E4           CLR     A
   \   00004C   8016         SJMP    ??CrossCallReturnLabel_8
    402                    Menu_all(0);
    403                  break;
    404                  case 1:
    405                    Menu_option = Send_Broadcast_Menu_5;
   \                     ??Send_Test_3:
   \   00004E   90....       MOV     DPTR,#Menu_option
   \   000051   740A         MOV     A,#0xa
   \   000053   80F4         SJMP    ??Send_Test_5
    406                    Menu_all(0);
    407                  break;
    408                  case 2:
    409                    Menu_option = Pingpong_Test_Menu_5;
   \                     ??Send_Test_4:
   \   000055   90....       MOV     DPTR,#Menu_option
   \   000058   7411         MOV     A,#0x11
   \   00005A   80ED         SJMP    ??Send_Test_5
    410                    Menu_all(0);
    411                  break;
    412                  case 0xff:
    413                    Menu_option = Send_Menu_3;
   \                     ??Send_Test_1:
   \   00005C   90....       MOV     DPTR,#Menu_option
   \   00005F   7407         MOV     A,#0x7
   \   000061   12....       LCALL   ?Subroutine5 & 0xFFFF
    414                    FirstItem = 0;
    415                    NowItem = 0;
   \                     ??CrossCallReturnLabel_8:
   \   000064   12....       LCALL   ?Subroutine27 & 0xFFFF
    416                    Menu_all(0);
   \                     ??CrossCallReturnLabel_64:
   \   000067   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    417                    break;
    418                }
    419          }
   \                     ??Send_Test_0:
   \   00006A                REQUIRE ?Subroutine30
   \   00006A                ; // Fall through to label ?Subroutine30
    420          //*********************************************************************************
    421          //º¯ÊýÃû:void Send_Broadcast(uint8 key)
    422          //¹¦ÄÜ:¹ã²¥·½Ê½·¢ËÍ
    423          //ÊäÈë£ºÎÞ
    424          //Êä³ö£ºÎÞ
    425          //*********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    426          void Send_Broadcast(uint8 key)
   \                     Send_Broadcast:
    427          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    428            if(Send_Flag == Send_Flag_Single)
   \   000007   90....       MOV     DPTR,#Send_Flag
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   7002         JNZ     ??Send_Broadcast_0
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \                     ??Send_Broadcast_0:
   \   00000F   701C         JNZ     ??Send_Broadcast_1
    429            {
    430              SendData("hello", Send_Mode_Broadcast, 5);
   \   000011                ; Setup parameters for call to function SendData
   \   000011   7905         MOV     R1,#0x5
   \   000013   7CFF         MOV     R4,#-0x1
   \   000015   7DFF         MOV     R5,#-0x1
   \   000017   7A..         MOV     R2,#(`?<Constant "hello">` & 0xff)
   \   000019   7B..         MOV     R3,#((`?<Constant "hello">` >> 8) & 0xff)
   \   00001B   90....       MOV     DPTR,#(SendData & 0xffff)
   \   00001E   74..         MOV     A,#((SendData >> 16) & 0xff)
   \   000020   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    431              Menu_option = Single_Send_Menu_4;
   \   000023   90....       MOV     DPTR,#Menu_option
   \   000026   7408         MOV     A,#0x8
   \   000028   12....       LCALL   ?Subroutine5 & 0xFFFF
    432              FirstItem = 0;
    433              NowItem = 0;
   \                     ??CrossCallReturnLabel_9:
   \   00002B   8044         SJMP    ??Send_Broadcast_2
    434          
    435            }
    436            else if(Send_Flag == Send_Flag_Continuous)
   \                     ??Send_Broadcast_1:
   \   00002D   90....       MOV     DPTR,#Send_Flag
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6401         XRL     A,#0x1
   \   000033   7002         JNZ     ??Send_Broadcast_3
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \                     ??Send_Broadcast_3:
   \   000037   7039         JNZ     ??Send_Broadcast_4
    437            {
    438              ClearScreenLcd();
   \   000039                ; Setup parameters for call to function ClearScreen
   \   000039   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   00003C   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   00003E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    439              //Rectangle(0,2,127,7);
    440              Print(3,3,"Consecution Tx",1);
   \   000041                ; Setup parameters for call to function Print
   \   000041   75..01       MOV     ?V0 + 0,#0x1
   \   000044   75..00       MOV     ?V0 + 1,#0x0
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   7C..         MOV     R4,#(`?<Constant "Consecution Tx">` & 0xff)
   \   00004E   7D..         MOV     R5,#((`?<Constant "Consecution Tx">` >> 8) & 0xff)
   \   000050   7A03         MOV     R2,#0x3
   \   000052   7903         MOV     R1,#0x3
   \   000054   90....       MOV     DPTR,#(Print & 0xffff)
   \   000057   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000059   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
    441              Send_Flag_Consecution = Broadcast_Continuous;
   \   000061   90....       MOV     DPTR,#Send_Flag_Consecution
   \   000064   740A         MOV     A,#0xa
   \   000066   12....       LCALL   ?Subroutine5 & 0xFFFF
    442              FirstItem = 0;
    443              NowItem = 0;
   \                     ??CrossCallReturnLabel_10:
   \   000069   12....       LCALL   ?Subroutine29 & 0xFFFF
    444              Menu_option = Send_Broadcast_Menu_5;
   \                     ??CrossCallReturnLabel_79:
   \   00006C   740A         MOV     A,#0xa
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E4           CLR     A
   \                     ??Send_Broadcast_2:
   \   000071   F0           MOVX    @DPTR,A
    445            }
    446            if(key == HAL_KEY_CANCEL)
   \                     ??Send_Broadcast_4:
   \   000072   7404         MOV     A,#0x4
   \   000074   6E           XRL     A,R6
   \   000075   7014         JNZ     ??Send_Broadcast_5
    447            {
    448              Menu_option = Single_Send_Menu_4;
   \   000077   90....       MOV     DPTR,#Menu_option
   \   00007A   7408         MOV     A,#0x8
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   E4           CLR     A
   \   00007F   F0           MOVX    @DPTR,A
    449              Send_Flag_Consecution = 0;
   \   000080   90....       MOV     DPTR,#Send_Flag_Consecution
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   12....       LCALL   ??Subroutine2_2 & 0xFFFF
    450              FirstItem = 0;
    451              NowItem = 0;
    452              Menu_all(0);
   \                     ??CrossCallReturnLabel_56:
   \   000088   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    453            }
    454          }
   \                     ??Send_Broadcast_5:
   \   00008B   02....       LJMP    ??Subroutine31_1 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   7406         MOV     A,#0x6
   \                     ??Subroutine31_0:
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine31_1:
   \   000005   7F02         MOV     R7,#0x2
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \                     ??Subroutine2_0:
   \   000004   90....       MOV     DPTR,#Menu_option
   \   000007   7402         MOV     A,#0x2
   \                     ??Subroutine2_1:
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E4           CLR     A
   \                     ??Subroutine2_2:
   \   00000C   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00000F   02....       LJMP    ?Subroutine27 & 0xFFFF
    455          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    456          void Aboat_Driver(uint8 key)
   \                     Aboat_Driver:
    457          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    458            ClearScreen();
   \   000007                ; Setup parameters for call to function ClearScreen
   \   000007   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   00000A   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   00000C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    459            Print(0,0,"Name:",1);
   \   00000F                ; Setup parameters for call to function Print
   \   00000F   75..01       MOV     ?V0 + 0,#0x1
   \   000012   75..00       MOV     ?V0 + 1,#0x0
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   7C..         MOV     R4,#(`?<Constant "Name:">` & 0xff)
   \   00001C   7D..         MOV     R5,#((`?<Constant "Name:">` >> 8) & 0xff)
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7900         MOV     R1,#0x0
   \   000022   90....       MOV     DPTR,#(Print & 0xffff)
   \   000025   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000027   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
    460            Print(4,0,"IEEE Add:(Hex)",1);
   \   00002F                ; Setup parameters for call to function Print
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   7C..         MOV     R4,#(`?<Constant "IEEE Add:(Hex)">` & 0xff)
   \   000036   7D..         MOV     R5,#((`?<Constant "IEEE Add:(Hex)">` >> 8) & 0xff)
   \   000038   7A00         MOV     R2,#0x0
   \   00003A   7904         MOV     R1,#0x4
   \   00003C   90....       MOV     DPTR,#(Print & 0xffff)
   \   00003F   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000041   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
    461            Print(2,0,"Short Add:",1);
   \   000049                ; Setup parameters for call to function Print
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7C..         MOV     R4,#(`?<Constant "Short Add:">` & 0xff)
   \   000050   7D..         MOV     R5,#((`?<Constant "Short Add:">` >> 8) & 0xff)
   \   000052   7A00         MOV     R2,#0x0
   \   000054   7902         MOV     R1,#0x2
   \   000056   90....       MOV     DPTR,#(Print & 0xffff)
   \   000059   74..         MOV     A,#((Print >> 16) & 0xff)
   \   00005B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
    462              Short_menu();
   \   000063                ; Setup parameters for call to function Short_menu
   \   000063   90....       MOV     DPTR,#(Short_menu & 0xffff)
   \   000066   74..         MOV     A,#((Short_menu >> 16) & 0xff)
   \   000068   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    463            Print(2,80,Short_Add,1);
   \   00006B                ; Setup parameters for call to function Print
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   7C..         MOV     R4,#(Short_Add & 0xff)
   \   000072   7D..         MOV     R5,#((Short_Add >> 8) & 0xff)
   \   000074   7A50         MOV     R2,#0x50
   \   000076   7902         MOV     R1,#0x2
   \   000078   90....       MOV     DPTR,#(Print & 0xffff)
   \   00007B   74..         MOV     A,#((Print >> 16) & 0xff)
   \   00007D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    464            IEEE_menu();
   \   000085                ; Setup parameters for call to function IEEE_menu
   \   000085   90....       MOV     DPTR,#(IEEE_menu & 0xffff)
   \   000088   74..         MOV     A,#((IEEE_menu >> 16) & 0xff)
   \   00008A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    465            Print(6,0,disp_ieee,1);
   \   00008D                ; Setup parameters for call to function Print
   \   00008D   78..         MOV     R0,#?V0 + 0
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   7C..         MOV     R4,#(disp_ieee & 0xff)
   \   000094   7D..         MOV     R5,#((disp_ieee >> 8) & 0xff)
   \   000096   7A00         MOV     R2,#0x0
   \   000098   7906         MOV     R1,#0x6
   \   00009A   90....       MOV     DPTR,#(Print & 0xffff)
   \   00009D   74..         MOV     A,#((Print >> 16) & 0xff)
   \   00009F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000A2   7402         MOV     A,#0x2
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
    466          #ifdef ZG_Coord
    467            Print(0,40,"Coord",1);
    468          #endif
    469          #ifdef ZG_Router
    470            Print(0,40,"Router",1);
    471          #endif
    472          #ifdef ZG_ENDDEVICE
    473            Print(0,40,"END",1);
    474          #endif
    475            if(key == HAL_KEY_CANCEL)
   \   0000A7   7404         MOV     A,#0x4
   \   0000A9   6E           XRL     A,R6
   \   0000AA   700C         JNZ     ??Aboat_Driver_0
    476            {
    477              Menu_option = Main_Menu_1;
   \   0000AC   90....       MOV     DPTR,#Menu_option
   \   0000AF   E4           CLR     A
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   12....       LCALL   ??Subroutine2_2 & 0xFFFF
    478              FirstItem = 0;
    479              NowItem = 0;
    480              Menu_all(0);
   \                     ??CrossCallReturnLabel_57:
   \   0000B5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    481            }
    482          }
   \                     ??Aboat_Driver_0:
   \   0000B8   02....       LJMP    ??Subroutine31_1 & 0xFFFF
    483          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    484          void IEEE_menu(void)
   \                     IEEE_menu:
    485          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    486            int j;
    487            INT8U TEMP[16],ieee[8],*ABC = NLME_GetExtAddr() ;
   \   00000A                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000A   90....       MOV     DPTR,#(NLME_GetExtAddr & 0xffff)
   \   00000D   74..         MOV     A,#((NLME_GetExtAddr >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   8A..         MOV     ?V0 + 0,R2
   \   000014   8B..         MOV     ?V0 + 1,R3
   \   000016   A8..         MOV     R0,?V0 + 0
   \   000018   A9..         MOV     R1,?V0 + 1
    488            for(j=0;j<8;j++)
   \   00001A   7E00         MOV     R6,#0x0
   \   00001C   7F00         MOV     R7,#0x0
    489            {
    490              ieee[j] = *ABC++;
   \                     ??IEEE_menu_0:
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   C0E0         PUSH    A
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00002E   D0E0         POP     A
   \   000030   F0           MOVX    @DPTR,A
   \   000031   8882         MOV     DPL,R0
   \   000033   8983         MOV     DPH,R1
   \   000035   A3           INC     DPTR
   \   000036   A882         MOV     R0,DPL
   \   000038   A983         MOV     R1,DPH
    491            }
   \   00003A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00003D   9408         SUBB    A,#0x8
   \   00003F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000042   40DA         JC      ??IEEE_menu_0
    492          for(j=0;j<8;j++)
   \   000044   7E00         MOV     R6,#0x0
   \   000046   7F00         MOV     R7,#0x0
    493            {
    494              TEMP[2*j]= ieee[j]%16;
   \                     ??IEEE_menu_1:
   \   000048   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00004B   540F         ANL     A,#0xf
   \   00004D   F9           MOV     R1,A
   \   00004E   EE           MOV     A,R6
   \   00004F   FA           MOV     R2,A
   \   000050   EF           MOV     A,R7
   \   000051   FB           MOV     R3,A
   \   000052   EA           MOV     A,R2
   \   000053   C3           CLR     C
   \   000054   33           RLC     A
   \   000055   FA           MOV     R2,A
   \   000056   EB           MOV     A,R3
   \   000057   33           RLC     A
   \   000058   FB           MOV     R3,A
   \   000059   7408         MOV     A,#0x8
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   E582         MOV     A,DPL
   \   000060   2A           ADD     A,R2
   \   000061   F5..         MOV     ?V0 + 0,A
   \   000063   E583         MOV     A,DPH
   \   000065   3B           ADDC    A,R3
   \   000066   F5..         MOV     ?V0 + 1,A
   \   000068   E9           MOV     A,R1
   \   000069   85..82       MOV     DPL,?V0 + 0
   \   00006C   85..83       MOV     DPH,?V0 + 1
   \   00006F   F0           MOVX    @DPTR,A
    495              TEMP[2*j] = Ten_to_16(TEMP[2*j]);
   \   000070                ; Setup parameters for call to function Ten_to_16
   \   000070   90....       MOV     DPTR,#(Ten_to_16 & 0xffff)
   \   000073   74..         MOV     A,#((Ten_to_16 >> 16) & 0xff)
   \   000075   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000078   12....       LCALL   ?Subroutine7 & 0xFFFF
    496            }
   \                     ??CrossCallReturnLabel_45:
   \   00007B   40CB         JC      ??IEEE_menu_1
    497          for(j=0;j<8;j++)
   \   00007D   7E00         MOV     R6,#0x0
   \   00007F   7F00         MOV     R7,#0x0
    498            {
    499              TEMP[2*j+1]= ieee[j] / 16;
   \                     ??IEEE_menu_2:
   \   000081   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000084   C4           SWAP    A
   \   000085   540F         ANL     A,#0xf
   \   000087   FA           MOV     R2,A
   \   000088   EE           MOV     A,R6
   \   000089   F8           MOV     R0,A
   \   00008A   EF           MOV     A,R7
   \   00008B   F9           MOV     R1,A
   \   00008C   E8           MOV     A,R0
   \   00008D   C3           CLR     C
   \   00008E   33           RLC     A
   \   00008F   F8           MOV     R0,A
   \   000090   E9           MOV     A,R1
   \   000091   33           RLC     A
   \   000092   F9           MOV     R1,A
   \   000093   7408         MOV     A,#0x8
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E582         MOV     A,DPL
   \   00009A   28           ADD     A,R0
   \   00009B   F582         MOV     DPL,A
   \   00009D   E583         MOV     A,DPH
   \   00009F   39           ADDC    A,R1
   \   0000A0   F583         MOV     DPH,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   8582..       MOV     ?V0 + 0,DPL
   \   0000A6   8583..       MOV     ?V0 + 1,DPH
   \   0000A9   EA           MOV     A,R2
   \   0000AA   F0           MOVX    @DPTR,A
    500              TEMP[2*j+1] = Ten_to_16(TEMP[2*j+1]);
   \   0000AB                ; Setup parameters for call to function Ten_to_16
   \   0000AB   F9           MOV     R1,A
   \   0000AC   90....       MOV     DPTR,#(Ten_to_16 & 0xffff)
   \   0000AF   74..         MOV     A,#((Ten_to_16 >> 16) & 0xff)
   \   0000B1   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000B4   12....       LCALL   ?Subroutine7 & 0xFFFF
    501            }
   \                     ??CrossCallReturnLabel_46:
   \   0000B7   40C8         JC      ??IEEE_menu_2
    502          
    503            for(j=15;j>=0;j--)
   \   0000B9   7E0F         MOV     R6,#0xf
   \   0000BB   7F00         MOV     R7,#0x0
    504            {
    505              disp_ieee[15-j] = TEMP[j] ;
   \                     ??IEEE_menu_3:
   \   0000BD   7408         MOV     A,#0x8
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000C5   C0E0         PUSH    A
   \   0000C7   C3           CLR     C
   \   0000C8   E4           CLR     A
   \   0000C9   9E           SUBB    A,R6
   \   0000CA   F8           MOV     R0,A
   \   0000CB   E4           CLR     A
   \   0000CC   9F           SUBB    A,R7
   \   0000CD   F9           MOV     R1,A
   \   0000CE   E8           MOV     A,R0
   \   0000CF   24..         ADD     A,#((disp_ieee + 15) & 0xff)
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   E9           MOV     A,R1
   \   0000D4   34..         ADDC    A,#(((disp_ieee + 15) >> 8) & 0xff)
   \   0000D6   F583         MOV     DPH,A
   \   0000D8   D0E0         POP     A
   \   0000DA   F0           MOVX    @DPTR,A
    506            }
   \   0000DB   EE           MOV     A,R6
   \   0000DC   24FF         ADD     A,#-0x1
   \   0000DE   1E           DEC     R6
   \   0000DF   EF           MOV     A,R7
   \   0000E0   34FF         ADDC    A,#-0x1
   \   0000E2   FF           MOV     R7,A
   \   0000E3   C3           CLR     C
   \   0000E4   EE           MOV     A,R6
   \   0000E5   9400         SUBB    A,#0x0
   \   0000E7   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000EA   50D1         JNC     ??IEEE_menu_3
    507            disp_ieee[16] = '\0';
   \   0000EC   E4           CLR     A
   \   0000ED   90....       MOV     DPTR,#(disp_ieee + 16)
   \   0000F0   F0           MOVX    @DPTR,A
    508          }
   \   0000F1   7418         MOV     A,#0x18
   \   0000F3   02....       LJMP    ??Subroutine31_0 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EF           MOV     A,R7
   \   000001                REQUIRE ?Subroutine26
   \   000001                ; // Fall through to label ?Subroutine26

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00000B   9408         SUBB    A,#0x8
   \   00000D   EF           MOV     A,R7
   \   00000E   80..         SJMP    ?Subroutine26

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   EE           MOV     A,R6
   \   000001   2401         ADD     A,#0x1
   \   000003   0E           INC     R6
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   C3           CLR     C
   \   000009   EE           MOV     A,R6
   \   00000A   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \                     ??Subroutine15_0:
   \   000006   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E582         MOV     A,DPL
   \   000002   2E           ADD     A,R6
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
    509          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    510          INT8U Ten_to_16(INT8U Source_Data)
   \                     Ten_to_16:
    511          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   FA           MOV     R2,A
    512            INT8U Destination_Data;
    513            if(Source_Data == 10)
   \   000002   740A         MOV     A,#0xa
   \   000004   6A           XRL     A,R2
   \   000005   7004         JNZ     ??Ten_to_16_0
    514              Destination_Data = 'A';
   \   000007   7941         MOV     R1,#0x41
   \   000009   8037         SJMP    ??Ten_to_16_1
    515            if(Source_Data == 11)
   \                     ??Ten_to_16_0:
   \   00000B   740B         MOV     A,#0xb
   \   00000D   6A           XRL     A,R2
   \   00000E   7004         JNZ     ??Ten_to_16_2
    516              Destination_Data = 'B';
   \   000010   7942         MOV     R1,#0x42
   \   000012   802E         SJMP    ??Ten_to_16_1
    517            if(Source_Data == 12)
   \                     ??Ten_to_16_2:
   \   000014   740C         MOV     A,#0xc
   \   000016   6A           XRL     A,R2
   \   000017   7004         JNZ     ??Ten_to_16_3
    518              Destination_Data = 'C';
   \   000019   7943         MOV     R1,#0x43
   \   00001B   8025         SJMP    ??Ten_to_16_1
    519            if(Source_Data == 13)
   \                     ??Ten_to_16_3:
   \   00001D   740D         MOV     A,#0xd
   \   00001F   6A           XRL     A,R2
   \   000020   7004         JNZ     ??Ten_to_16_4
    520              Destination_Data = 'D';
   \   000022   7944         MOV     R1,#0x44
   \   000024   801C         SJMP    ??Ten_to_16_1
    521            if(Source_Data == 14)
   \                     ??Ten_to_16_4:
   \   000026   740E         MOV     A,#0xe
   \   000028   6A           XRL     A,R2
   \   000029   7004         JNZ     ??Ten_to_16_5
    522              Destination_Data = 'E';
   \   00002B   7945         MOV     R1,#0x45
   \   00002D   8013         SJMP    ??Ten_to_16_1
    523            if(Source_Data == 15)
   \                     ??Ten_to_16_5:
   \   00002F   740F         MOV     A,#0xf
   \   000031   6A           XRL     A,R2
   \   000032   7004         JNZ     ??Ten_to_16_6
    524              Destination_Data = 'F';
   \   000034   7946         MOV     R1,#0x46
   \   000036   800A         SJMP    ??Ten_to_16_1
    525            if((Source_Data>=0) &&(Source_Data<=9))
                                  ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \                     ??Ten_to_16_6:
   \   000038   EA           MOV     A,R2
   \   000039   C3           CLR     C
   \   00003A   940A         SUBB    A,#0xa
   \   00003C   5004         JNC     ??Ten_to_16_1
    526              Destination_Data = Source_Data + 48;
   \   00003E   7430         MOV     A,#0x30
   \   000040   2A           ADD     A,R2
   \   000041   F9           MOV     R1,A
    527            return Destination_Data;
   \                     ??Ten_to_16_1:
   \   000042   02....       LJMP    ?BRET
    528          }
    529          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    530          void Short_menu(void)
   \                     Short_menu:
    531          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    532            uint16 Short;
    533            int j ;
    534            INT8U TEMP[7];
    535            Short = NLME_GetShortAddr();
   \   00000A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000A   90....       MOV     DPTR,#(NLME_GetShortAddr & 0xffff)
   \   00000D   74..         MOV     A,#((NLME_GetShortAddr >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   8A..         MOV     ?V0 + 0,R2
   \   000014   8B..         MOV     ?V0 + 1,R3
    536            TEMP[2] = Short / 16 / 16 / 16;
   \   000016   740C         MOV     A,#0xc
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?US_SHR
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   F0           MOVX    @DPTR,A
    537            TEMP[3] = Short / 16 / 16 % 16;
   \   000025   EB           MOV     A,R3
   \   000026   540F         ANL     A,#0xf
   \   000028   C0E0         PUSH    A
   \   00002A   7403         MOV     A,#0x3
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   D0E0         POP     A
   \   000031   F0           MOVX    @DPTR,A
    538            TEMP[4] = Short / 16 % 16;
   \   000032   EA           MOV     A,R2
   \   000033   C4           SWAP    A
   \   000034   540F         ANL     A,#0xf
   \   000036   C0E0         PUSH    A
   \   000038   7404         MOV     A,#0x4
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   D0E0         POP     A
   \   00003F   F0           MOVX    @DPTR,A
    539            TEMP[5] = Short % 16;
   \   000040   EA           MOV     A,R2
   \   000041   540F         ANL     A,#0xf
   \   000043   C0E0         PUSH    A
   \   000045   7405         MOV     A,#0x5
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   D0E0         POP     A
   \   00004C   F0           MOVX    @DPTR,A
    540            for(j=2;j<6;j++)
   \   00004D   7E02         MOV     R6,#0x2
   \   00004F   7F00         MOV     R7,#0x0
    541            {
    542              Short_Add[j] = Ten_to_16(TEMP[j]);
   \                     ??Short_menu_0:
   \   000051                ; Setup parameters for call to function Ten_to_16
   \   000051   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000054   F9           MOV     R1,A
   \   000055   90....       MOV     DPTR,#(Ten_to_16 & 0xffff)
   \   000058   74..         MOV     A,#((Ten_to_16 >> 16) & 0xff)
   \   00005A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005D   EE           MOV     A,R6
   \   00005E   24..         ADD     A,#(Short_Add & 0xff)
   \   000060   F582         MOV     DPL,A
   \   000062   EF           MOV     A,R7
   \   000063   34..         ADDC    A,#((Short_Add >> 8) & 0xff)
   \   000065   F583         MOV     DPH,A
   \   000067   E9           MOV     A,R1
   \   000068   F0           MOVX    @DPTR,A
    543            }
   \   000069   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00006C   9406         SUBB    A,#0x6
   \   00006E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000071   40DE         JC      ??Short_menu_0
    544            Short_Add[0] = '0';
   \   000073   7430         MOV     A,#0x30
   \   000075   90....       MOV     DPTR,#Short_Add
   \   000078   F0           MOVX    @DPTR,A
    545            Short_Add[1] = 'x';
   \   000079   7478         MOV     A,#0x78
   \   00007B   90....       MOV     DPTR,#(Short_Add + 1)
   \   00007E   F0           MOVX    @DPTR,A
    546            Short_Add[6] = '\0';
   \   00007F   E4           CLR     A
   \   000080   90....       MOV     DPTR,#(Short_Add + 6)
   \   000083   F0           MOVX    @DPTR,A
    547          }
   \   000084   7407         MOV     A,#0x7
   \   000086   80..         SJMP    ??Subroutine31_0
    548          
    549          //*********************************************************************************
    550          //º¯ÊýÃû:void SelectTxAddr(INT8U key)
    551          //¹¦ÄÜ:²é¿´ROUTERµÄ¸öÊý
    552          //ÊäÈë£º°´¼üÖµ
    553          //Êä³ö£ºÎÞ
    554          //*********************************************************************************

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    555          int Short_Addr_number;
   \                     Short_Addr_number:
   \   000000                DS 2

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    556          void SelectTxAddr(INT8U key)
   \                     SelectTxAddr:
    557          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 1,R1
    558          	INT8U arr[20];
    559          	INT8U i, sel;
    560          	
    561          	ClearScreenLcd();
   \   00000C                ; Setup parameters for call to function ClearScreen
   \   00000C   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   00000F   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   000011   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    562          	if((JoinNode.RouterCount == 0) && (JoinNode.RfdCount == 0))
   \   000014   90....       MOV     DPTR,#(JoinNode + 1)
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7044         JNZ     ??SelectTxAddr_0
   \   00001A   90....       MOV     DPTR,#JoinNode
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   703E         JNZ     ??SelectTxAddr_0
    563          	{
    564          		//Rectangle(0,2,127,5);
    565          		strcpy((char*)arr, "NO JOIN NODE");
   \   000020                ; Setup parameters for call to function strcpy
   \   000020   7C..         MOV     R4,#(`?<Constant "NO JOIN NODE">` & 0xff)
   \   000022   7D..         MOV     R5,#((`?<Constant "NO JOIN NODE">` >> 8) & 0xff)
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   90....       MOV     DPTR,#(strcpy & 0xffff)
   \   000031   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000033   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    566          		Print(3,3,arr,1);
   \   000036                ; Setup parameters for call to function Print
   \   000036   75..01       MOV     ?V0 + 2,#0x1
   \   000039   75..00       MOV     ?V0 + 3,#0x0
   \   00003C   78..         MOV     R0,#?V0 + 2
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   AC82         MOV     R4,DPL
   \   000048   AD83         MOV     R5,DPH
   \   00004A   7A03         MOV     R2,#0x3
   \   00004C   7903         MOV     R1,#0x3
   \   00004E   90....       MOV     DPTR,#(Print & 0xffff)
   \   000051   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000053   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   02....       LJMP    ??SelectTxAddr_1 & 0xFFFF
    567          	}
    568          	else
    569          	{
    570          		for(i=0; i<JoinNode.RouterCount; i++)
   \                     ??SelectTxAddr_0:
   \   00005E   75..00       MOV     ?V0 + 0,#0x0
   \   000061   803D         SJMP    ??CrossCallReturnLabel_5
    571          		{
    572          			MenuItem[i][0] = i+'1';
   \                     ??SelectTxAddr_2:
   \   000063   12....       LCALL   ?Subroutine8 & 0xFFFF
    573          			MenuItem[i][1] = '.';
    574          			MenuItem[i][2] = 'R';
    575          			MenuItem[i][3] = 'o';
   \                     ??CrossCallReturnLabel_17:
   \   000066   746F         MOV     A,#0x6f
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   F0           MOVX    @DPTR,A
    576          			MenuItem[i][4] = 'u';
   \   000070   7475         MOV     A,#0x75
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   F0           MOVX    @DPTR,A
    577          			memcpy(&MenuItem[i][5], &JoinNode.RouterAddr[i][0], 8);
   \   00007B                ; Setup parameters for call to function memcpy
   \   00007B   75..08       MOV     ?V0 + 2,#0x8
   \   00007E   75..00       MOV     ?V0 + 3,#0x0
   \   000081   78..         MOV     R0,#?V0 + 2
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   EA           MOV     A,R2
   \   000087   75F00A       MOV     B,#0xa
   \   00008A   A4           MUL     AB
   \   00008B   24..         ADD     A,#((JoinNode + 202) & 0xff)
   \   00008D   FC           MOV     R4,A
   \   00008E   E5F0         MOV     A,B
   \   000090   34..         ADDC    A,#(((JoinNode + 202) >> 8) & 0xff)
   \   000092   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000095   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000098   7402         MOV     A,#0x2
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
    578                                  MenuItem[i][13] = ' ';
   \   00009D   12....       LCALL   ?Subroutine3 & 0xFFFF
    579          			MenuItem[i][14] = ' ';
    580          			MenuItem[i][15] = ' ';
    581          			MenuItem[i][16] = '\0';
    582          		}
   \                     ??CrossCallReturnLabel_5:
   \   0000A0   90....       MOV     DPTR,#(JoinNode + 1)
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   E5..         MOV     A,?V0 + 0
   \   0000A7   C3           CLR     C
   \   0000A8   9A           SUBB    A,R2
   \   0000A9   40B8         JC      ??SelectTxAddr_2
    583          		for(i=JoinNode.RouterCount; i<(JoinNode.RouterCount+JoinNode.RfdCount); i++)
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F5..         MOV     ?V0 + 0,A
   \   0000AE   803F         SJMP    ??CrossCallReturnLabel_6
    584          		{
    585          			MenuItem[i][0] = i+'1';
   \                     ??SelectTxAddr_3:
   \   0000B0   12....       LCALL   ?Subroutine8 & 0xFFFF
    586          			MenuItem[i][1] = '.';
    587          			MenuItem[i][2] = 'R';
    588          			MenuItem[i][3] = 'f';
   \                     ??CrossCallReturnLabel_18:
   \   0000B3   7466         MOV     A,#0x66
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   F0           MOVX    @DPTR,A
    589          			MenuItem[i][4] = 'd';	
   \   0000BD   7464         MOV     A,#0x64
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   F0           MOVX    @DPTR,A
    590          			memcpy(&MenuItem[i][5], &JoinNode.RfdAddr[i-JoinNode.RouterCount][0], 8);
   \   0000C8                ; Setup parameters for call to function memcpy
   \   0000C8   75..08       MOV     ?V0 + 2,#0x8
   \   0000CB   78..         MOV     R0,#?V0 + 2
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D0   90....       MOV     DPTR,#(JoinNode + 1)
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F8           MOV     R0,A
   \   0000D5   EA           MOV     A,R2
   \   0000D6   C3           CLR     C
   \   0000D7   98           SUBB    A,R0
   \   0000D8   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000DB   24..         ADD     A,#((JoinNode + 2) & 0xff)
   \   0000DD   FC           MOV     R4,A
   \   0000DE   E9           MOV     A,R1
   \   0000DF   34..         ADDC    A,#(((JoinNode + 2) >> 8) & 0xff)
   \   0000E1   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000E4   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
    591          			MenuItem[i][13] = ' ';
   \   0000EC   12....       LCALL   ?Subroutine3 & 0xFFFF
    592          			MenuItem[i][14] = ' ';
    593          			MenuItem[i][15] = ' ';
    594          			MenuItem[i][16] = '\0';
    595          		}
   \                     ??CrossCallReturnLabel_6:
   \   0000EF   85....       MOV     ?V0 + 2,?V0 + 0
   \   0000F2   75..00       MOV     ?V0 + 3,#0x0
   \   0000F5   90....       MOV     DPTR,#(JoinNode + 1)
   \   0000F8   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000FB   E5..         MOV     A,?V0 + 2
   \   0000FD   98           SUBB    A,R0
   \   0000FE   E4           CLR     A
   \   0000FF   99           SUBB    A,R1
   \   000100   C3           CLR     C
   \   000101   65D0         XRL     A,PSW
   \   000103   33           RLC     A
   \   000104   40AA         JC      ??SelectTxAddr_3
    596          			
    597          		sel = DrawMenu(MenuItem , JoinNode.RouterCount+JoinNode.RfdCount,key);
   \   000106                ; Setup parameters for call to function DrawMenu
   \   000106   AC..         MOV     R4,?V0 + 1
   \   000108   E0           MOVX    A,@DPTR
   \   000109   90....       MOV     DPTR,#(JoinNode + 1)
   \   00010C   FA           MOV     R2,A
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   2A           ADD     A,R2
   \   00010F   F9           MOV     R1,A
   \   000110   7A..         MOV     R2,#(MenuItem & 0xff)
   \   000112   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   000114   90....       MOV     DPTR,#(DrawMenu & 0xffff)
   \   000117   74..         MOV     A,#((DrawMenu >> 16) & 0xff)
   \   000119   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00011C   E9           MOV     A,R1
   \   00011D   FC           MOV     R4,A
    598                          if((sel == 0xff))
   \   00011E   74FF         MOV     A,#-0x1
   \   000120   6C           XRL     A,R4
   \   000121   7008         JNZ     ??SelectTxAddr_4
    599          		{
    600          			NowItem = 0;
   \   000123   12....       LCALL   ?Subroutine4 & 0xFFFF
    601          			FirstItem = 0;
    602                                  Menu_option = Zigbee_Menu_2;
    603                                  Menu_all(0);
   \                     ??CrossCallReturnLabel_58:
   \   000126   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000129   8071         SJMP    ??SelectTxAddr_1
    604          		}
    605          		else if(sel < JoinNode.RouterCount)
   \                     ??SelectTxAddr_4:
   \   00012B   90....       MOV     DPTR,#(JoinNode + 1)
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   FA           MOV     R2,A
   \   000130   E9           MOV     A,R1
   \   000131   C3           CLR     C
   \   000132   9A           SUBB    A,R2
   \   000133   5021         JNC     ??SelectTxAddr_5
    606          		{
    607          			SrcSaddr = JoinNode.RouterAddr[sel][8];
    608          			SrcSaddr <<= 8;
    609          			SrcSaddr += JoinNode.RouterAddr[sel][9];
   \   000135   8C82         MOV     DPL,R4
   \   000137   E582         MOV     A,DPL
   \   000139   75F00A       MOV     B,#0xa
   \   00013C   A4           MUL     AB
   \   00013D   24..         ADD     A,#(JoinNode & 0xff)
   \   00013F   F8           MOV     R0,A
   \   000140   E5F0         MOV     A,B
   \   000142   34..         ADDC    A,#((JoinNode >> 8) & 0xff)
   \   000144   F9           MOV     R1,A
   \   000145   E8           MOV     A,R0
   \   000146   24D2         ADD     A,#-0x2e
   \   000148   F582         MOV     DPL,A
   \   00014A   E9           MOV     A,R1
   \   00014B   3400         ADDC    A,#0x0
   \   00014D   F583         MOV     DPH,A
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   FB           MOV     R3,A
   \   000151   E8           MOV     A,R0
   \   000152   24D3         ADD     A,#-0x2d
   \   000154   8030         SJMP    ??SelectTxAddr_6
    610          		}
    611          		else if(sel < (JoinNode.RouterCount+JoinNode.RfdCount))
   \                     ??SelectTxAddr_5:
   \   000156   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000159   EC           MOV     A,R4
   \   00015A   98           SUBB    A,R0
   \   00015B   E4           CLR     A
   \   00015C   99           SUBB    A,R1
   \   00015D   C3           CLR     C
   \   00015E   65D0         XRL     A,PSW
   \   000160   33           RLC     A
   \   000161   5039         JNC     ??SelectTxAddr_1
   \   000163   8C82         MOV     DPL,R4
   \   000165   E582         MOV     A,DPL
   \   000167   C3           CLR     C
   \   000168   9A           SUBB    A,R2
   \   000169   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00016C   24..         ADD     A,#(JoinNode & 0xff)
   \   00016E   F8           MOV     R0,A
   \   00016F   E9           MOV     A,R1
   \   000170   34..         ADDC    A,#((JoinNode >> 8) & 0xff)
   \   000172   F9           MOV     R1,A
   \   000173   8882         MOV     DPL,R0
   \   000175   8983         MOV     DPH,R1
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   FB           MOV     R3,A
   \   000183   E8           MOV     A,R0
   \   000184   240B         ADD     A,#0xb
   \                     ??SelectTxAddr_6:
   \   000186   F582         MOV     DPL,A
   \   000188   E9           MOV     A,R1
   \   000189   3400         ADDC    A,#0x0
   \   00018B   F583         MOV     DPH,A
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   2400         ADD     A,#0x0
   \   000190   F8           MOV     R0,A
   \   000191   E4           CLR     A
   \   000192   3B           ADDC    A,R3
   \   000193   F9           MOV     R1,A
   \   000194   90....       MOV     DPTR,#SrcSaddr
   \   000197   E8           MOV     A,R0
   \   000198   F0           MOVX    @DPTR,A
   \   000199   A3           INC     DPTR
   \   00019A   E9           MOV     A,R1
   \   00019B   F0           MOVX    @DPTR,A
    612          		{
    613          			SrcSaddr = JoinNode.RfdAddr[sel-JoinNode.RouterCount][8];
    614          			SrcSaddr <<= 8;
    615          			SrcSaddr += JoinNode.RfdAddr[sel-JoinNode.RouterCount][9];
    616             		}
    617                  }
    618                  if(key == HAL_KEY_CANCEL)
   \                     ??SelectTxAddr_1:
   \   00019C   7404         MOV     A,#0x4
   \   00019E   65..         XRL     A,?V0 + 1
   \   0001A0   7006         JNZ     ??SelectTxAddr_7
    619                  {
    620                    NowItem = 0;
   \   0001A2   12....       LCALL   ?Subroutine4 & 0xFFFF
    621                    FirstItem = 0;
    622                    Menu_option = Zigbee_Menu_2;
    623                    Menu_all(0);
   \                     ??CrossCallReturnLabel_59:
   \   0001A5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    624                  }
    625          }
   \                     ??SelectTxAddr_7:
   \   0001A8   7414         MOV     A,#0x14
   \   0001AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AD   7F04         MOV     R7,#0x4
   \   0001AF   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   FD           MOV     R5,A
   \   000001   EE           MOV     A,R6
   \   000002   2405         ADD     A,#0x5
   \   000004   FA           MOV     R2,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   90....       MOV     DPTR,#(memcpy & 0xffff)
   \   00000C   74..         MOV     A,#((memcpy >> 16) & 0xff)
   \   00000E   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   9400         SUBB    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   75F00A       MOV     B,#0xa
   \   000009   A4           MUL     AB
   \   00000A   F8           MOV     R0,A
   \   00000B   AAF0         MOV     R2,B
   \   00000D   75F00A       MOV     B,#0xa
   \   000010   E9           MOV     A,R1
   \   000011   A4           MUL     AB
   \   000012   2A           ADD     A,R2
   \   000013   F9           MOV     R1,A
   \   000014   E8           MOV     A,R0
   \   000015   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   AA82         MOV     R2,DPL
   \   000005   EA           MOV     A,R2
   \   000006   75F011       MOV     B,#0x11
   \   000009   A4           MUL     AB
   \   00000A   24..         ADD     A,#(MenuItem & 0xff)
   \   00000C   FE           MOV     R6,A
   \   00000D   E5F0         MOV     A,B
   \   00000F   34..         ADDC    A,#((MenuItem >> 8) & 0xff)
   \   000011   FF           MOV     R7,A
   \   000012   7431         MOV     A,#0x31
   \   000014   25..         ADD     A,?V0 + 0
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   742E         MOV     A,#0x2e
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   7452         MOV     A,#0x52
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   F0           MOVX    @DPTR,A
   \   000028   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   240D         ADD     A,#0xd
   \   000003   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000006   240E         ADD     A,#0xe
   \   000008   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00000B   240F         ADD     A,#0xf
   \   00000D   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000010   2410         ADD     A,#0x10
   \   000012   F582         MOV     DPL,A
   \   000014   EF           MOV     A,R7
   \   000015   3400         ADDC    A,#0x0
   \   000017   F583         MOV     DPH,A
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   05..         INC     ?V0 + 0
   \   00001D   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   7420         MOV     A,#0x20
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   90....       MOV     DPTR,#JoinNode
   \   000005   E0           MOVX    A,@DPTR
   \   000006   28           ADD     A,R0
   \   000007   F8           MOV     R0,A
   \   000008   E4           CLR     A
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E4           CLR     A
   \   000001   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000004   7401         MOV     A,#0x1
   \                     ??Subroutine4_0:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E4           CLR     A
   \   000009                REQUIRE ?Subroutine27
   \   000009                ; // Fall through to label ?Subroutine27

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   90....       MOV     DPTR,#NowItem
   \   000003   F0           MOVX    @DPTR,A
   \   000004   90....       MOV     DPTR,#FirstItem
   \   000007                REQUIRE ?Subroutine29
   \   000007                ; // Fall through to label ?Subroutine29
    626          //*********************************************************************************
    627          //º¯ÊýÃû:void SingleTxTest(uint8 key)
    628          //¹¦ÄÜ:µ¥´Î·¢ËÍº¯Êý
    629          //ÊäÈë£ºÎÞ
    630          //Êä³ö£ºÎÞ
    631          //*********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    632          void SingleTxTest(uint8 key)
   \                     SingleTxTest:
    633          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    634            RfTx.TXDATA.HeadCom[0] = 'S';         //µ¥´Î
   \   000007   7453         MOV     A,#0x53
   \   000009   90....       MOV     DPTR,#RfTx
   \   00000C   F0           MOVX    @DPTR,A
    635            RfTx.TXDATA.HeadCom[1] = 'I';
   \   00000D   7449         MOV     A,#0x49
   \   00000F   90....       MOV     DPTR,#(RfTx + 1)
   \   000012   F0           MOVX    @DPTR,A
    636            RfTx.TXDATA.HeadCom[2] = 'N';
   \   000013   744E         MOV     A,#0x4e
   \   000015   90....       MOV     DPTR,#(RfTx + 2)
   \   000018   F0           MOVX    @DPTR,A
    637          
    638            strcpy((char*)RfTx.TXDATA.DataBuf, "3w.c51rf.com");
   \   000019                ; Setup parameters for call to function strcpy
   \   000019   7C..         MOV     R4,#(`?<Constant "3w.c51rf.com">` & 0xff)
   \   00001B   7D..         MOV     R5,#((`?<Constant "3w.c51rf.com">` >> 8) & 0xff)
   \   00001D   7A..         MOV     R2,#((RfTx + 13) & 0xff)
   \   00001F   7B..         MOV     R3,#(((RfTx + 13) >> 8) & 0xff)
   \   000021   90....       MOV     DPTR,#(strcpy & 0xffff)
   \   000024   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000026   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    639            ClearScreenLcd();
   \   000029                ; Setup parameters for call to function ClearScreen
   \   000029   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   00002C   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   00002E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    640            Print(3,0,"Send Data:",10);
   \   000031                ; Setup parameters for call to function Print
   \   000031   75..0A       MOV     ?V0 + 0,#0xa
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7C..         MOV     R4,#(`?<Constant "Send Data:">` & 0xff)
   \   00003E   7D..         MOV     R5,#((`?<Constant "Send Data:">` >> 8) & 0xff)
   \   000040   7A00         MOV     R2,#0x0
   \   000042   7903         MOV     R1,#0x3
   \   000044   90....       MOV     DPTR,#(Print & 0xffff)
   \   000047   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000049   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
    641            Print(5,0,RfTx.TXDATA.DataBuf,12);
   \   000051                ; Setup parameters for call to function Print
   \   000051   75..0C       MOV     ?V0 + 0,#0xc
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   7C..         MOV     R4,#((RfTx + 13) & 0xff)
   \   00005B   7D..         MOV     R5,#(((RfTx + 13) >> 8) & 0xff)
   \   00005D   7A00         MOV     R2,#0x0
   \   00005F   7905         MOV     R1,#0x5
   \   000061   90....       MOV     DPTR,#(Print & 0xffff)
   \   000064   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000066   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    642            if(Send_Flag == Send_Flag_Single)
   \   00006E   90....       MOV     DPTR,#Send_Flag
   \   000071   E0           MOVX    A,@DPTR
   \   000072   7002         JNZ     ??SingleTxTest_0
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \                     ??SingleTxTest_0:
   \   000076   7023         JNZ     ??SingleTxTest_1
    643            {
    644              SendData(RfTx.TxBuf, SrcSaddr, 29);
   \   000078                ; Setup parameters for call to function SendData
   \   000078   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00007B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    645              for(int i=0;i<5;i++)
   \   00007E   7E05         MOV     R6,#0x5
    646              halWait(200);
   \                     ??SingleTxTest_2:
   \   000080                ; Setup parameters for call to function halWait
   \   000080   79C8         MOV     R1,#-0x38
   \   000082   90....       MOV     DPTR,#(halWait & 0xffff)
   \   000085   74..         MOV     A,#((halWait >> 16) & 0xff)
   \   000087   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00008A   1E           DEC     R6
   \   00008B   EE           MOV     A,R6
   \   00008C   70F2         JNZ     ??SingleTxTest_2
    647              NowItem = 0;
   \                     ??SingleTxTest_3:
   \   00008E   E4           CLR     A
   \   00008F   12....       LCALL   ?Subroutine10 & 0xFFFF
    648              FirstItem = 0;
    649              Menu_option = Single_Send_Menu_4;
   \                     ??CrossCallReturnLabel_21:
   \   000092   12....       LCALL   ??Subroutine4_0 & 0xFFFF
    650              Menu_all(0);
   \                     ??CrossCallReturnLabel_60:
   \   000095   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    651            }
    652            else if(Send_Flag == Send_Flag_Continuous)
    653            {
    654              Send_Flag_Consecution = Short_Send_Continuous;
    655              if(key == HAL_KEY_CANCEL)
    656              {
    657                Send_Flag_Consecution = 0;
    658                NowItem = 0;
    659                FirstItem = 0;
    660                Menu_option = Single_Send_Menu_4;
    661                Menu_all(0);
    662              }
    663            }
    664          
    665          }
   \                     ??SingleTxTest_4:
   \   000098   02....       LJMP    ??Subroutine31_1 & 0xFFFF
   \                     ??SingleTxTest_1:
   \   00009B   90....       MOV     DPTR,#Send_Flag
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   6401         XRL     A,#0x1
   \   0000A1   7002         JNZ     ??SingleTxTest_5
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \                     ??SingleTxTest_5:
   \   0000A5   70F1         JNZ     ??SingleTxTest_4
   \   0000A7   90....       MOV     DPTR,#Send_Flag_Consecution
   \   0000AA   740B         MOV     A,#0xb
   \   0000AC   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000AF   70E7         JNZ     ??SingleTxTest_4
   \   0000B1   90....       MOV     DPTR,#Send_Flag_Consecution
   \   0000B4   E4           CLR     A
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   80D4         SJMP    ??SingleTxTest_3

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   791D         MOV     R1,#0x1d
   \                     ??Subroutine0_0:
   \   000002   90....       MOV     DPTR,#SrcSaddr
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FC           MOV     R4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FD           MOV     R5,A
   \   00000A   7A..         MOV     R2,#(RfTx & 0xff)
   \   00000C   7B..         MOV     R3,#((RfTx >> 8) & 0xff)
   \   00000E   90....       MOV     DPTR,#(SendData & 0xffff)
   \   000011   74..         MOV     A,#((SendData >> 16) & 0xff)
   \   000013   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   7408         MOV     A,#0x8
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   7404         MOV     A,#0x4
   \   000006   6E           XRL     A,R6
   \   000007   22           RET
    666          
    667          //*********************************************************************************
    668          //º¯ÊýÃû:void PingpongTxTest(uint8 key)
    669          //¹¦ÄÜ:Pingpong·¢ËÍº¯Êý
    670          //ÊäÈë£ºÎÞ
    671          //Êä³ö£ºÎÞ
    672          //*********************************************************************************

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    673          int flag = 0;
   \                     flag:
   \   000000                DS 2
    674          extern int Send_Data;

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    675          void PingpongTxTest(uint8 key)
   \                     PingpongTxTest:
    676          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
    677            uint8 S_Addr[7];
    678            ClearScreenLcd();
   \   00000C                ; Setup parameters for call to function ClearScreen
   \   00000C   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   00000F   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   000011   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    679            Print(4,0,"S_Data:",10);
   \   000014                ; Setup parameters for call to function Print
   \   000014   75..0A       MOV     ?V0 + 0,#0xa
   \   000017   75..00       MOV     ?V0 + 1,#0x0
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7C..         MOV     R4,#(`?<Constant "S_Data:">` & 0xff)
   \   000021   7D..         MOV     R5,#((`?<Constant "S_Data:">` >> 8) & 0xff)
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7904         MOV     R1,#0x4
   \   000027   90....       MOV     DPTR,#(Print & 0xffff)
   \   00002A   74..         MOV     A,#((Print >> 16) & 0xff)
   \   00002C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
    680            Print(6,0,"R_Data:",10);
   \   000034                ; Setup parameters for call to function Print
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7C..         MOV     R4,#(`?<Constant "R_Data:">` & 0xff)
   \   00003B   7D..         MOV     R5,#((`?<Constant "R_Data:">` >> 8) & 0xff)
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7906         MOV     R1,#0x6
   \   000041   90....       MOV     DPTR,#(Print & 0xffff)
   \   000044   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000046   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
    681          
    682            if(Send_Flag == Send_Flag_Single)
   \   00004E   90....       MOV     DPTR,#Send_Flag
   \   000051   E0           MOVX    A,@DPTR
   \   000052   7002         JNZ     ??PingpongTxTest_0
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \                     ??PingpongTxTest_0:
   \   000056   7061         JNZ     ??PingpongTxTest_1
    683            {
    684              RfTx.TXDATA.HeadCom[0] = 'S';         //µ¥´Î
   \   000058   7453         MOV     A,#0x53
   \   00005A   12....       LCALL   ?Subroutine9 & 0xFFFF
    685              RfTx.TXDATA.HeadCom[1] = 'P';         //Æ¹ÅÒ·½Ê½
    686              RfTx.TXDATA.HeadCom[2] = 'N';
    687              strcpy((char*)RfTx.TXDATA.DataBuf, "c51rf.com");
   \                     ??CrossCallReturnLabel_19:
   \   00005D                ; Setup parameters for call to function strcpy
   \   00005D   7C..         MOV     R4,#(`?<Constant "c51rf.com">` & 0xff)
   \   00005F   7D..         MOV     R5,#((`?<Constant "c51rf.com">` >> 8) & 0xff)
   \   000061   7A..         MOV     R2,#((RfTx + 13) & 0xff)
   \   000063   7B..         MOV     R3,#(((RfTx + 13) >> 8) & 0xff)
   \   000065   90....       MOV     DPTR,#(strcpy & 0xffff)
   \   000068   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   00006A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    688              Print(4,56,RfTx.TXDATA.DataBuf,9);
   \   00006D                ; Setup parameters for call to function Print
   \   00006D   75..09       MOV     ?V0 + 0,#0x9
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   7C..         MOV     R4,#((RfTx + 13) & 0xff)
   \   000077   7D..         MOV     R5,#(((RfTx + 13) >> 8) & 0xff)
   \   000079   7A38         MOV     R2,#0x38
   \   00007B   7904         MOV     R1,#0x4
   \   00007D   90....       MOV     DPTR,#(Print & 0xffff)
   \   000080   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000082   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
    689              if(flag == 0)
   \   00008A   90....       MOV     DPTR,#flag
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   7002         JNZ     ??PingpongTxTest_2
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \                     ??PingpongTxTest_2:
   \   000092   7008         JNZ     ??PingpongTxTest_3
    690              SendData(RfTx.TxBuf, SrcSaddr, 26);
   \   000094                ; Setup parameters for call to function SendData
   \   000094   791A         MOV     R1,#0x1a
   \   000096   12....       LCALL   ??Subroutine0_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000099   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    691              flag++;
   \                     ??PingpongTxTest_3:
   \   00009C   90....       MOV     DPTR,#flag
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   2401         ADD     A,#0x1
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   3400         ADDC    A,#0x0
   \   0000A7   F0           MOVX    @DPTR,A
    692              if(key != 0)
   \   0000A8   E5..         MOV     A,?V0 + 2
   \   0000AA   7003         JNZ     $+5
   \   0000AC   02....       LJMP    ??PingpongTxTest_4 & 0xFFFF
    693              {
    694                flag = 0;
   \   0000AF   90....       MOV     DPTR,#flag
   \   0000B2   E4           CLR     A
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   02....       LJMP    ??PingpongTxTest_5 & 0xFFFF
    695                Send_Flag_Consecution = 0;
    696                NowItem = 0;
    697                FirstItem = 0;
    698                Menu_option = Single_Send_Menu_4;
    699                Menu_all(0);
    700              }
    701            }
    702            else if(Send_Flag == Send_Flag_Continuous)
   \                     ??PingpongTxTest_1:
   \   0000B9   90....       MOV     DPTR,#Send_Flag
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   6401         XRL     A,#0x1
   \   0000BF   7002         JNZ     ??PingpongTxTest_6
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \                     ??PingpongTxTest_6:
   \   0000C3   6003         JZ      $+5
   \   0000C5   02....       LJMP    ??PingpongTxTest_4 & 0xFFFF
    703            {
    704              RfTx.TXDATA.HeadCom[0] = 'C';         //Á¬Ðø
   \   0000C8   7443         MOV     A,#0x43
   \   0000CA   12....       LCALL   ?Subroutine9 & 0xFFFF
    705              RfTx.TXDATA.HeadCom[1] = 'P';         //Æ¹ÅÒ·½Ê½
    706              RfTx.TXDATA.HeadCom[2] = 'N';
    707              Send_Flag_Consecution = Pingpong_Send_Continuous;
   \                     ??CrossCallReturnLabel_20:
   \   0000CD   90....       MOV     DPTR,#Send_Flag_Consecution
   \   0000D0   740C         MOV     A,#0xc
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E4           CLR     A
   \   0000D5   F0           MOVX    @DPTR,A
    708              Send_Data = 0;
   \   0000D6   90....       MOV     DPTR,#Send_Data
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   F0           MOVX    @DPTR,A
    709              sprintf(RfTx.TXDATA.DataBuf,(char *)"%d",Send_Data);
                             ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \   0000DC                ; Setup parameters for call to function sprintf
   \   0000DC   F5..         MOV     ?V0 + 0,A
   \   0000DE   78..         MOV     R0,#?V0 + 0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   7C..         MOV     R4,#(`?<Constant "%d">` & 0xff)
   \   0000E5   7D..         MOV     R5,#((`?<Constant "%d">` >> 8) & 0xff)
   \   0000E7   7A..         MOV     R2,#((RfTx + 13) & 0xff)
   \   0000E9   7B..         MOV     R3,#(((RfTx + 13) >> 8) & 0xff)
   \   0000EB   90....       MOV     DPTR,#(sprintf & 0xffff)
   \   0000EE   74..         MOV     A,#((sprintf >> 16) & 0xff)
   \   0000F0   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000F3   7402         MOV     A,#0x2
   \   0000F5   12....       LCALL   ?DEALLOC_XSTACK8
    710              SendData(RfTx.TxBuf, SrcSaddr, 29);
   \   0000F8                ; Setup parameters for call to function SendData
   \   0000F8   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000FB   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    711              S_Addr[0] = '0';
   \   0000FE   7430         MOV     A,#0x30
   \   000100   85..82       MOV     DPL,?XSP + 0
   \   000103   85..83       MOV     DPH,?XSP + 1
   \   000106   F0           MOVX    @DPTR,A
    712              S_Addr[1] = 'x';
   \   000107   7401         MOV     A,#0x1
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   7478         MOV     A,#0x78
   \   00010E   F0           MOVX    @DPTR,A
    713              S_Addr[6] = '\0';
   \   00010F   7406         MOV     A,#0x6
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   E4           CLR     A
   \   000115   F0           MOVX    @DPTR,A
    714              S_Addr[2] = SrcSaddr /16/16/16;
   \   000116   90....       MOV     DPTR,#SrcSaddr
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   F5..         MOV     ?V0 + 0,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   F5..         MOV     ?V0 + 1,A
   \   000120   740C         MOV     A,#0xc
   \   000122   78..         MOV     R0,#?V0 + 0
   \   000124   12....       LCALL   ?US_SHR
   \   000127   7402         MOV     A,#0x2
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   E5..         MOV     A,?V0 + 0
   \   00012E   F0           MOVX    @DPTR,A
    715              S_Addr[3] = SrcSaddr /16/16%16;
   \   00012F   90....       MOV     DPTR,#(SrcSaddr + 1)
   \   000132   E0           MOVX    A,@DPTR
   \   000133   540F         ANL     A,#0xf
   \   000135   C0E0         PUSH    A
   \   000137   7403         MOV     A,#0x3
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   D0E0         POP     A
   \   00013E   F0           MOVX    @DPTR,A
    716              S_Addr[4] = SrcSaddr /16%16;
   \   00013F   90....       MOV     DPTR,#SrcSaddr
   \   000142   E0           MOVX    A,@DPTR
   \   000143   C4           SWAP    A
   \   000144   540F         ANL     A,#0xf
   \   000146   C0E0         PUSH    A
   \   000148   7404         MOV     A,#0x4
   \   00014A   12....       LCALL   ?XSTACK_DISP0_8
   \   00014D   D0E0         POP     A
   \   00014F   F0           MOVX    @DPTR,A
    717              S_Addr[5] = SrcSaddr %16;
   \   000150   90....       MOV     DPTR,#SrcSaddr
   \   000153   E0           MOVX    A,@DPTR
   \   000154   540F         ANL     A,#0xf
   \   000156   C0E0         PUSH    A
   \   000158   7405         MOV     A,#0x5
   \   00015A   12....       LCALL   ?XSTACK_DISP0_8
   \   00015D   D0E0         POP     A
   \   00015F   F0           MOVX    @DPTR,A
    718              for(int j=2;j<6;j++)
   \   000160   75..02       MOV     ?V0 + 0,#0x2
    719              {
    720                S_Addr[j] = Ten_to_16(S_Addr[j]);
   \                     ??PingpongTxTest_7:
   \   000163   85..82       MOV     DPL,?XSP + 0
   \   000166   85..83       MOV     DPH,?XSP + 1
   \   000169   E582         MOV     A,DPL
   \   00016B   25..         ADD     A,?V0 + 0
   \   00016D   FE           MOV     R6,A
   \   00016E   E583         MOV     A,DPH
   \   000170   35..         ADDC    A,?V0 + 1
   \   000172   FF           MOV     R7,A
   \   000173                ; Setup parameters for call to function Ten_to_16
   \   000173   8E82         MOV     DPL,R6
   \   000175   8F83         MOV     DPH,R7
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F9           MOV     R1,A
   \   000179   90....       MOV     DPTR,#(Ten_to_16 & 0xffff)
   \   00017C   74..         MOV     A,#((Ten_to_16 >> 16) & 0xff)
   \   00017E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000181   E9           MOV     A,R1
   \   000182   8E82         MOV     DPL,R6
   \   000184   8F83         MOV     DPH,R7
   \   000186   F0           MOVX    @DPTR,A
    721              }
   \   000187   E5..         MOV     A,?V0 + 0
   \   000189   2401         ADD     A,#0x1
   \   00018B   F5..         MOV     ?V0 + 0,A
   \   00018D   E5..         MOV     A,?V0 + 1
   \   00018F   3400         ADDC    A,#0x0
   \   000191   F5..         MOV     ?V0 + 1,A
   \   000193   C3           CLR     C
   \   000194   E5..         MOV     A,?V0 + 0
   \   000196   9406         SUBB    A,#0x6
   \   000198   E5..         MOV     A,?V0 + 1
   \   00019A   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00019D   40C4         JC      ??PingpongTxTest_7
    722              Print(2,0,"Short add:",1);
   \   00019F                ; Setup parameters for call to function Print
   \   00019F   75..01       MOV     ?V0 + 0,#0x1
   \   0001A2   75..00       MOV     ?V0 + 1,#0x0
   \   0001A5   78..         MOV     R0,#?V0 + 0
   \   0001A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AA   7C..         MOV     R4,#(`?<Constant "Short add:">` & 0xff)
   \   0001AC   7D..         MOV     R5,#((`?<Constant "Short add:">` >> 8) & 0xff)
   \   0001AE   7A00         MOV     R2,#0x0
   \   0001B0   7902         MOV     R1,#0x2
   \   0001B2   90....       MOV     DPTR,#(Print & 0xffff)
   \   0001B5   74..         MOV     A,#((Print >> 16) & 0xff)
   \   0001B7   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001BA   7402         MOV     A,#0x2
   \   0001BC   12....       LCALL   ?DEALLOC_XSTACK8
    723              Print(2,80,S_Addr,1);
   \   0001BF                ; Setup parameters for call to function Print
   \   0001BF   78..         MOV     R0,#?V0 + 0
   \   0001C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C4   7402         MOV     A,#0x2
   \   0001C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C9   AC82         MOV     R4,DPL
   \   0001CB   AD83         MOV     R5,DPH
   \   0001CD   7A50         MOV     R2,#0x50
   \   0001CF   7902         MOV     R1,#0x2
   \   0001D1   90....       MOV     DPTR,#(Print & 0xffff)
   \   0001D4   74..         MOV     A,#((Print >> 16) & 0xff)
   \   0001D6   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001D9   7402         MOV     A,#0x2
   \   0001DB   12....       LCALL   ?DEALLOC_XSTACK8
    724              Print(4,56,RfTx.TXDATA.DataBuf,1);
   \   0001DE                ; Setup parameters for call to function Print
   \   0001DE   78..         MOV     R0,#?V0 + 0
   \   0001E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E3   7C..         MOV     R4,#((RfTx + 13) & 0xff)
   \   0001E5   7D..         MOV     R5,#(((RfTx + 13) >> 8) & 0xff)
   \   0001E7   7A38         MOV     R2,#0x38
   \   0001E9   7904         MOV     R1,#0x4
   \   0001EB   90....       MOV     DPTR,#(Print & 0xffff)
   \   0001EE   74..         MOV     A,#((Print >> 16) & 0xff)
   \   0001F0   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001F3   7402         MOV     A,#0x2
   \   0001F5   12....       LCALL   ?DEALLOC_XSTACK8
    725              if(key == HAL_KEY_CANCEL)
   \   0001F8   7404         MOV     A,#0x4
   \   0001FA   65..         XRL     A,?V0 + 2
   \   0001FC   7010         JNZ     ??PingpongTxTest_4
    726              {
    727                Send_Flag_Consecution = 0;
   \                     ??PingpongTxTest_5:
   \   0001FE   90....       MOV     DPTR,#Send_Flag_Consecution
   \   000201   E4           CLR     A
   \   000202   F0           MOVX    @DPTR,A
   \   000203   A3           INC     DPTR
   \   000204   F0           MOVX    @DPTR,A
    728                NowItem = 0;
   \   000205   12....       LCALL   ?Subroutine10 & 0xFFFF
    729                FirstItem = 0;
    730                Menu_option = Single_Send_Menu_4;
   \                     ??CrossCallReturnLabel_22:
   \   000208   12....       LCALL   ??Subroutine4_0 & 0xFFFF
    731                Menu_all(0);
   \                     ??CrossCallReturnLabel_61:
   \   00020B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    732              }
    733            }
    734          
    735          }
   \                     ??PingpongTxTest_4:
   \   00020E   7407         MOV     A,#0x7
   \   000210   12....       LCALL   ?DEALLOC_XSTACK8
   \   000213   7F03         MOV     R7,#0x3
   \   000215   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#RfTx
   \   000003   F0           MOVX    @DPTR,A
   \   000004   7450         MOV     A,#0x50
   \   000006   90....       MOV     DPTR,#(RfTx + 1)
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   744E         MOV     A,#0x4e
   \   00000C   90....       MOV     DPTR,#(RfTx + 2)
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET
    736          #ifndef ZG_Coord
    737          //********************************************************************************
    738          //º¯ÊýÃû£ºvoid Sensor_Menu(INT8U key)
    739          //¹¦ÄÜ£º´«¸ÐÆ÷²âÊÔ²Ëµ¥
    740          //ÊäÈë£ºKEY
    741          //Êä³ö£ºnull
    742          //********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    743          void Sensor_Menu(INT8U key)
   \                     Sensor_Menu:
    744          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    745            INT8U sel;
    746            strcpy((char*)MenuItem[0] ,"1:Power Check   ");
   \   000007                ; Setup parameters for call to function strcpy
   \   000007   7C..         MOV     R4,#(`?<Constant "1:Power Check   ">` & 0xff)
   \   000009   7D..         MOV     R5,#((`?<Constant "1:Power Check   ">` >> 8) & 0xff)
   \   00000B   7A..         MOV     R2,#(MenuItem & 0xff)
   \   00000D   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   00000F   90....       MOV     DPTR,#(strcpy & 0xffff)
   \   000012   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    747            strcpy((char*)MenuItem[1] ,"2:Temp Check    ");
   \   000017                ; Setup parameters for call to function strcpy
   \   000017   7C..         MOV     R4,#(`?<Constant "2:Temp Check    ">` & 0xff)
   \   000019   7D..         MOV     R5,#((`?<Constant "2:Temp Check    ">` >> 8) & 0xff)
   \   00001B   7A..         MOV     R2,#((MenuItem + 17) & 0xff)
   \   00001D   7B..         MOV     R3,#(((MenuItem + 17) >> 8) & 0xff)
   \   00001F   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000021   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    748            //strcpy((char*)MenuItem[2] ,"3:GuangM  Check ");
    749            //strcpy((char*)MenuItem[3] ,"3:Pot  Check    ");
    750            sel = DrawMenu(MenuItem ,2,key);
    751            switch(sel)
   \   000024                ; Setup parameters for call to function DrawMenu
   \   000024   EE           MOV     A,R6
   \   000025   FC           MOV     R4,A
   \   000026   7902         MOV     R1,#0x2
   \   000028   7A..         MOV     R2,#(MenuItem & 0xff)
   \   00002A   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   00002C   90....       MOV     DPTR,#(DrawMenu & 0xffff)
   \   00002F   74..         MOV     A,#((DrawMenu >> 16) & 0xff)
   \   000031   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000034   E9           MOV     A,R1
   \   000035   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for Sensor_Menu>_0`:
   \   000038   FF           DB        255
   \   000039   04           DB        4
   \   00003A   ....         DW        ??Sensor_Menu_0
   \   00003C   ....         DW        ??Sensor_Menu_1
   \   00003E   ....         DW        ??Sensor_Menu_2
   \   000040   ....         DW        ??Sensor_Menu_3
   \   000042   ....         DW        ??Sensor_Menu_4
   \   000044   ....         DW        ??Sensor_Menu_4
    752            {
    753              case 0:
    754                Menu_option = Sensor_ReadBattery_Menu_3;
   \                     ??Sensor_Menu_2:
   \   000046   90....       MOV     DPTR,#Menu_option
   \   000049   7412         MOV     A,#0x12
   \                     ??Sensor_Menu_5:
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E4           CLR     A
   \   00004E   8017         SJMP    ??CrossCallReturnLabel_73
    755                Menu_all(0);
    756              break;
    757              case 1:
    758                Menu_option = Sensor_Temp_Menu_3;
   \                     ??Sensor_Menu_3:
   \   000050   90....       MOV     DPTR,#Menu_option
   \   000053   7413         MOV     A,#0x13
   \   000055   80F4         SJMP    ??Sensor_Menu_5
    759                Menu_all(0);
    760              break;
    761              case 2:
    762                Menu_option = Sensor_ReadBattery_Menu_3;
   \                     ??Sensor_Menu_4:
   \   000057   90....       MOV     DPTR,#Menu_option
   \   00005A   7412         MOV     A,#0x12
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E4           CLR     A
   \   00005F   8003         SJMP    ??CrossCallReturnLabel_24
    763                NowItem = 0;
    764                Menu_all(0);
    765              break;
    766              case 3:
    767                Menu_option = Sensor_ReadBattery_Menu_3;
    768                NowItem = 0;
    769                Menu_all(0);
    770              break;
    771              case 0xff:
    772                Menu_option = Main_Menu_1;
   \                     ??Sensor_Menu_1:
   \   000061   12....       LCALL   ?Subroutine11 & 0xFFFF
    773                FirstItem = 0;
   \                     ??CrossCallReturnLabel_24:
   \   000064   12....       LCALL   ?Subroutine28 & 0xFFFF
    774                NowItem = 0;
   \                     ??CrossCallReturnLabel_73:
   \   000067   12....       LCALL   ?Subroutine27 & 0xFFFF
    775                Menu_all(0);
   \                     ??CrossCallReturnLabel_65:
   \   00006A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    776              break;
    777            }
    778          }
   \                     ??Sensor_Menu_0:
   \   00006D   02....       LJMP    ?Subroutine30 & 0xFFFF
    779          #endif
    780          //********************************************************************************
    781          //º¯ÊýÃû£ºvoid Uart_Menu(INT8U key)
    782          //¹¦ÄÜ£º´®¿Ú²âÊÔ²Ëµ¥
    783          //ÊäÈë£ºKEY
    784          //Êä³ö£ºnull
    785          //********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    786          void Uart_Menu(INT8U key)
   \                     Uart_Menu:
    787          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    788            INT8U sel;
    789            strcpy((char*)MenuItem[0] ,"1:Tx Test       ");
   \   000007                ; Setup parameters for call to function strcpy
   \   000007   7C..         MOV     R4,#(`?<Constant "1:Tx Test       ">` & 0xff)
   \   000009   7D..         MOV     R5,#((`?<Constant "1:Tx Test       ">` >> 8) & 0xff)
   \   00000B   7A..         MOV     R2,#(MenuItem & 0xff)
   \   00000D   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   00000F   90....       MOV     DPTR,#(strcpy & 0xffff)
   \   000012   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    790            strcpy((char*)MenuItem[1] ,"2:Rx Test       ");
   \   000017                ; Setup parameters for call to function strcpy
   \   000017   7C..         MOV     R4,#(`?<Constant "2:Rx Test       ">` & 0xff)
   \   000019   7D..         MOV     R5,#((`?<Constant "2:Rx Test       ">` >> 8) & 0xff)
   \   00001B   7A..         MOV     R2,#((MenuItem + 17) & 0xff)
   \   00001D   7B..         MOV     R3,#(((MenuItem + 17) >> 8) & 0xff)
   \   00001F   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   000021   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    791            strcpy((char*)MenuItem[2] ,"3:Pingpong Test ");
   \   000024                ; Setup parameters for call to function strcpy
   \   000024   7C..         MOV     R4,#(`?<Constant "3:Pingpong Test ">` & 0xff)
   \   000026   7D..         MOV     R5,#((`?<Constant "3:Pingpong Test ">` >> 8) & 0xff)
   \   000028   7A..         MOV     R2,#((MenuItem + 34) & 0xff)
   \   00002A   7B..         MOV     R3,#(((MenuItem + 34) >> 8) & 0xff)
   \   00002C   74..         MOV     A,#((strcpy >> 16) & 0xff)
   \   00002E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    792            sel = DrawMenu(MenuItem ,3,key);
    793            switch(sel)
   \   000031                ; Setup parameters for call to function DrawMenu
   \   000031   EE           MOV     A,R6
   \   000032   FC           MOV     R4,A
   \   000033   7903         MOV     R1,#0x3
   \   000035   7A..         MOV     R2,#(MenuItem & 0xff)
   \   000037   7B..         MOV     R3,#((MenuItem >> 8) & 0xff)
   \   000039   90....       MOV     DPTR,#(DrawMenu & 0xffff)
   \   00003C   74..         MOV     A,#((DrawMenu >> 16) & 0xff)
   \   00003E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000041   E9           MOV     A,R1
   \   000042   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for Uart_Menu>_0`:
   \   000045   FF           DB        255
   \   000046   03           DB        3
   \   000047   ....         DW        ??Uart_Menu_0
   \   000049   ....         DW        ??Uart_Menu_1
   \   00004B   ....         DW        ??Uart_Menu_2
   \   00004D   ....         DW        ??Uart_Menu_3
   \   00004F   ....         DW        ??Uart_Menu_4
    794            {
    795              case 0:
    796                Menu_option = Uart_TX_Menu_3;
   \                     ??Uart_Menu_2:
   \   000051   90....       MOV     DPTR,#Menu_option
   \   000054   740E         MOV     A,#0xe
   \                     ??Uart_Menu_5:
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E4           CLR     A
   \   000059   8017         SJMP    ??CrossCallReturnLabel_74
    797                Menu_all(0);
    798              break;
    799              case 1:
    800                Menu_option = Uart_RX_Menu_3;
   \                     ??Uart_Menu_3:
   \   00005B   90....       MOV     DPTR,#Menu_option
   \   00005E   740F         MOV     A,#0xf
   \   000060   80F4         SJMP    ??Uart_Menu_5
    801                Menu_all(0);
    802              break;
    803              case 2:
    804                Menu_option = Uart_PP_Menu_3;
   \                     ??Uart_Menu_4:
   \   000062   90....       MOV     DPTR,#Menu_option
   \   000065   7410         MOV     A,#0x10
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E4           CLR     A
   \   00006A   8003         SJMP    ??CrossCallReturnLabel_25
    805                NowItem = 0;
    806                Menu_all(0);
    807              break;
    808              case 0xff:
    809                Menu_option = Main_Menu_1;
   \                     ??Uart_Menu_1:
   \   00006C   12....       LCALL   ?Subroutine11 & 0xFFFF
    810                FirstItem = 0;
   \                     ??CrossCallReturnLabel_25:
   \   00006F   12....       LCALL   ?Subroutine28 & 0xFFFF
    811                NowItem = 0;
   \                     ??CrossCallReturnLabel_74:
   \   000072   12....       LCALL   ?Subroutine27 & 0xFFFF
    812                Menu_all(0);
   \                     ??CrossCallReturnLabel_66:
   \   000075   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    813              break;
    814            }
    815          }
   \                     ??Uart_Menu_0:
   \   000078   02....       LJMP    ?Subroutine30 & 0xFFFF
    816          //********************************************************************************
    817          //º¯ÊýÃû£ºvoid Uart_Send(INT8U key)
    818          //¹¦ÄÜ£º´®¿Ú·¢ËÍ²âÊÔ
    819          //ÊäÈë£ºKEY
    820          //Êä³ö£ºnull
    821          //********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    822          void Uart_Send(INT8U key)
   \                     Uart_Send:
    823          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    824            uint8 Baud_rate[6];
    825            ClearScreenLcd();
   \   00000C                ; Setup parameters for call to function ClearScreen
   \   00000C   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   00000F   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   000011   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    826            Uart_Baud_rate(Baud_rate_38400);
   \   000014                ; Setup parameters for call to function Uart_Baud_rate
   \   000014   7A80         MOV     R2,#-0x80
   \   000016   7B01         MOV     R3,#0x1
   \   000018   90....       MOV     DPTR,#(Uart_Baud_rate & 0xffff)
   \   00001B   74..         MOV     A,#((Uart_Baud_rate >> 16) & 0xff)
   \   00001D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    827            Print(2,8,"Uart send test",1);
   \   000020                ; Setup parameters for call to function Print
   \   000020   75..01       MOV     ?V0 + 0,#0x1
   \   000023   75..00       MOV     ?V0 + 1,#0x0
   \   000026   78..         MOV     R0,#?V0 + 0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   7C..         MOV     R4,#(`?<Constant "Uart send test">` & 0xff)
   \   00002D   7D..         MOV     R5,#((`?<Constant "Uart send test">` >> 8) & 0xff)
   \   00002F   7A08         MOV     R2,#0x8
   \   000031   7902         MOV     R1,#0x2
   \   000033   90....       MOV     DPTR,#(Print & 0xffff)
   \   000036   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000038   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    828            Print(4,0,"Baud rate:",1);
   \   000040                ; Setup parameters for call to function Print
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7C..         MOV     R4,#(`?<Constant "Baud rate:">` & 0xff)
   \   000047   7D..         MOV     R5,#((`?<Constant "Baud rate:">` >> 8) & 0xff)
   \   000049   7A00         MOV     R2,#0x0
   \   00004B   7904         MOV     R1,#0x4
   \   00004D   90....       MOV     DPTR,#(Print & 0xffff)
   \   000050   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000052   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
    829            sprintf(Baud_rate,(char *)"%d00",Baud_rate_38400);
                           ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \   00005A                ; Setup parameters for call to function sprintf
   \   00005A   75..80       MOV     ?V0 + 0,#-0x80
   \   00005D   75..01       MOV     ?V0 + 1,#0x1
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7C..         MOV     R4,#(`?<Constant "%d00">` & 0xff)
   \   000067   7D..         MOV     R5,#((`?<Constant "%d00">` >> 8) & 0xff)
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
   \   000072   90....       MOV     DPTR,#(sprintf & 0xffff)
   \   000075   74..         MOV     A,#((sprintf >> 16) & 0xff)
   \   000077   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
    830            Print(4,80,Baud_rate,1);
   \   00007F                ; Setup parameters for call to function Print
   \   00007F   75..01       MOV     ?V0 + 0,#0x1
   \   000082   75..00       MOV     ?V0 + 1,#0x0
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   AC82         MOV     R4,DPL
   \   000091   AD83         MOV     R5,DPH
   \   000093   7A50         MOV     R2,#0x50
   \   000095   7904         MOV     R1,#0x4
   \   000097   90....       MOV     DPTR,#(Print & 0xffff)
   \   00009A   74..         MOV     A,#((Print >> 16) & 0xff)
   \   00009C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    831            Print(6,0,"Data:hello word!",1);
   \   0000A4                ; Setup parameters for call to function Print
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   7C..         MOV     R4,#(`?<Constant "Data:hello word!">` & 0xff)
   \   0000AB   7D..         MOV     R5,#((`?<Constant "Data:hello word!">` >> 8) & 0xff)
   \   0000AD   7A00         MOV     R2,#0x0
   \   0000AF   7906         MOV     R1,#0x6
   \   0000B1   90....       MOV     DPTR,#(Print & 0xffff)
   \   0000B4   74..         MOV     A,#((Print >> 16) & 0xff)
   \   0000B6   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
    832            UartTX_Send_String("ChengDu WXL Communication Technology C0.,LTD\n",45);
   \   0000BE                ; Setup parameters for call to function UartTX_Send_String
   \   0000BE   7C2D         MOV     R4,#0x2d
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   7A..         MOV     R2,#(`?<Constant "ChengDu WXL Communica...">` & 0xff)
   \   0000C4   7B..         MOV     R3,#((`?<Constant "ChengDu WXL Communica...">` >> 8) & 0xff)
   \   0000C6   90....       MOV     DPTR,#(UartTX_Send_String & 0xffff)
   \   0000C9   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0000CB   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    833            UartTX_Send_String("Uart send test\n",15);
   \   0000CE                ; Setup parameters for call to function UartTX_Send_String
   \   0000CE   7C0F         MOV     R4,#0xf
   \   0000D0   7D00         MOV     R5,#0x0
   \   0000D2   7A..         MOV     R2,#(`?<Constant "Uart send test\\n">` & 0xff)
   \   0000D4   7B..         MOV     R3,#((`?<Constant "Uart send test\\n">` >> 8) & 0xff)
   \   0000D6   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0000D8   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    834            UartTX_Send_String("Baud rate:38400\n",16);
   \   0000DB                ; Setup parameters for call to function UartTX_Send_String
   \   0000DB   7C10         MOV     R4,#0x10
   \   0000DD   7D00         MOV     R5,#0x0
   \   0000DF   7A..         MOV     R2,#(`?<Constant "Baud rate:38400\\n">` & 0xff)
   \   0000E1   7B..         MOV     R3,#((`?<Constant "Baud rate:38400\\n">` >> 8) & 0xff)
   \   0000E3   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0000E5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    835            Menu_option = Uart_TX_Menu_3;
   \   0000E8   90....       MOV     DPTR,#Menu_option
   \   0000EB   740E         MOV     A,#0xe
   \   0000ED   12....       LCALL   ?Subroutine6 & 0xFFFF
    836            if(key == HAL_KEY_CANCEL)
   \                     ??CrossCallReturnLabel_12:
   \   0000F0   7015         JNZ     ??Uart_Send_0
    837            {
    838              UartTX_Send_String("Exit\n",5);
   \   0000F2                ; Setup parameters for call to function UartTX_Send_String
   \   0000F2   7C05         MOV     R4,#0x5
   \   0000F4   7D00         MOV     R5,#0x0
   \   0000F6   7A..         MOV     R2,#(`?<Constant "Exit\\n">` & 0xff)
   \   0000F8   7B..         MOV     R3,#((`?<Constant "Exit\\n">` >> 8) & 0xff)
   \   0000FA   90....       MOV     DPTR,#(UartTX_Send_String & 0xffff)
   \   0000FD   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0000FF   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    839              Menu_option = Uart_Menu_2;
   \   000102   12....       LCALL   ??Subroutine2_0 & 0xFFFF
    840              FirstItem = 0;
    841              NowItem = 0;
    842              Menu_all(0);
   \                     ??CrossCallReturnLabel_53:
   \   000105   8012         SJMP    ??Uart_Send_1
    843            }
    844            else if(key == HAL_KEY_ENTER)
   \                     ??Uart_Send_0:
   \   000107   7420         MOV     A,#0x20
   \   000109   6E           XRL     A,R6
   \   00010A   7010         JNZ     ??Uart_Send_2
    845            {
    846              UartTX_Send_String("hello word!\n",12);
   \   00010C                ; Setup parameters for call to function UartTX_Send_String
   \   00010C   7C0C         MOV     R4,#0xc
   \   00010E   7D00         MOV     R5,#0x0
   \   000110   7A..         MOV     R2,#(`?<Constant "hello word!\\n">` & 0xff)
   \   000112   7B..         MOV     R3,#((`?<Constant "hello word!\\n">` >> 8) & 0xff)
   \   000114   90....       MOV     DPTR,#(UartTX_Send_String & 0xffff)
   \   000117   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \                     ??Uart_Send_1:
   \   000119   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    847            }
    848          }
   \                     ??Uart_Send_2:
   \   00011C   02....       LJMP    ?Subroutine31 & 0xFFFF
    849          //********************************************************************************
    850          //º¯ÊýÃû£ºvoid Uart_RX(INT8U key);
    851          //¹¦ÄÜ£º´®¿Ú½ÓÊÕ²âÊÔ
    852          //ÊäÈë£ºKEY
    853          //Êä³ö£ºnull
    854          //********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    855          void Uart_RX(INT8U key)
   \                     Uart_RX:
    856          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    857          
    858            uint8 Baud_rate[6];
    859            ClearScreenLcd();
   \   00000C                ; Setup parameters for call to function ClearScreen
   \   00000C   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   00000F   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   000011   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    860            Uart_Baud_rate(Baud_rate_38400);
   \   000014                ; Setup parameters for call to function Uart_Baud_rate
   \   000014   7A80         MOV     R2,#-0x80
   \   000016   7B01         MOV     R3,#0x1
   \   000018   90....       MOV     DPTR,#(Uart_Baud_rate & 0xffff)
   \   00001B   74..         MOV     A,#((Uart_Baud_rate >> 16) & 0xff)
   \   00001D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    861            Print(2,16,"Uart Rx test",1);
   \   000020                ; Setup parameters for call to function Print
   \   000020   75..01       MOV     ?V0 + 0,#0x1
   \   000023   75..00       MOV     ?V0 + 1,#0x0
   \   000026   78..         MOV     R0,#?V0 + 0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   7C..         MOV     R4,#(`?<Constant "Uart Rx test">` & 0xff)
   \   00002D   7D..         MOV     R5,#((`?<Constant "Uart Rx test">` >> 8) & 0xff)
   \   00002F   7A10         MOV     R2,#0x10
   \   000031   7902         MOV     R1,#0x2
   \   000033   90....       MOV     DPTR,#(Print & 0xffff)
   \   000036   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000038   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    862            Print(4,0,"Baud rate:",1);
   \   000040                ; Setup parameters for call to function Print
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7C..         MOV     R4,#(`?<Constant "Baud rate:">` & 0xff)
   \   000047   7D..         MOV     R5,#((`?<Constant "Baud rate:">` >> 8) & 0xff)
   \   000049   7A00         MOV     R2,#0x0
   \   00004B   7904         MOV     R1,#0x4
   \   00004D   90....       MOV     DPTR,#(Print & 0xffff)
   \   000050   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000052   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
    863            sprintf(Baud_rate,(char *)"%d00",Baud_rate_38400);
                           ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \   00005A                ; Setup parameters for call to function sprintf
   \   00005A   75..80       MOV     ?V0 + 0,#-0x80
   \   00005D   75..01       MOV     ?V0 + 1,#0x1
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7C..         MOV     R4,#(`?<Constant "%d00">` & 0xff)
   \   000067   7D..         MOV     R5,#((`?<Constant "%d00">` >> 8) & 0xff)
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
   \   000072   90....       MOV     DPTR,#(sprintf & 0xffff)
   \   000075   74..         MOV     A,#((sprintf >> 16) & 0xff)
   \   000077   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
    864            Print(4,80,Baud_rate,1);
   \   00007F                ; Setup parameters for call to function Print
   \   00007F   75..01       MOV     ?V0 + 0,#0x1
   \   000082   75..00       MOV     ?V0 + 1,#0x0
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   AC82         MOV     R4,DPL
   \   000091   AD83         MOV     R5,DPH
   \   000093   7A50         MOV     R2,#0x50
   \   000095   7904         MOV     R1,#0x4
   \   000097   90....       MOV     DPTR,#(Print & 0xffff)
   \   00009A   74..         MOV     A,#((Print >> 16) & 0xff)
   \   00009C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    865            Print(6,0,"Data:",1);
   \   0000A4                ; Setup parameters for call to function Print
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   7C..         MOV     R4,#(`?<Constant "Data:">` & 0xff)
   \   0000AB   7D..         MOV     R5,#((`?<Constant "Data:">` >> 8) & 0xff)
   \   0000AD   7A00         MOV     R2,#0x0
   \   0000AF   7906         MOV     R1,#0x6
   \   0000B1   90....       MOV     DPTR,#(Print & 0xffff)
   \   0000B4   74..         MOV     A,#((Print >> 16) & 0xff)
   \   0000B6   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
    866            UartTX_Send_String("ChengDu WXL Communication Technology C0.,LTD\n",45);
   \   0000BE                ; Setup parameters for call to function UartTX_Send_String
   \   0000BE   7C2D         MOV     R4,#0x2d
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   7A..         MOV     R2,#(`?<Constant "ChengDu WXL Communica...">` & 0xff)
   \   0000C4   7B..         MOV     R3,#((`?<Constant "ChengDu WXL Communica...">` >> 8) & 0xff)
   \   0000C6   90....       MOV     DPTR,#(UartTX_Send_String & 0xffff)
   \   0000C9   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0000CB   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    867            UartTX_Send_String("Uart RX test\n",13);
   \   0000CE                ; Setup parameters for call to function UartTX_Send_String
   \   0000CE   7C0D         MOV     R4,#0xd
   \   0000D0   7D00         MOV     R5,#0x0
   \   0000D2   7A..         MOV     R2,#(`?<Constant "Uart RX test\\n">` & 0xff)
   \   0000D4   7B..         MOV     R3,#((`?<Constant "Uart RX test\\n">` >> 8) & 0xff)
   \   0000D6   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0000D8   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    868            UartTX_Send_String("Baud rate:38400\n",16);
   \   0000DB                ; Setup parameters for call to function UartTX_Send_String
   \   0000DB   7C10         MOV     R4,#0x10
   \   0000DD   7D00         MOV     R5,#0x0
   \   0000DF   7A..         MOV     R2,#(`?<Constant "Baud rate:38400\\n">` & 0xff)
   \   0000E1   7B..         MOV     R3,#((`?<Constant "Baud rate:38400\\n">` >> 8) & 0xff)
   \   0000E3   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0000E5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    869            Uart_Rx_Flag = Open;
   \   0000E8   90....       MOV     DPTR,#Uart_Rx_Flag
   \   0000EB   7401         MOV     A,#0x1
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E4           CLR     A
   \   0000F0   12....       LCALL   ?Subroutine29 & 0xFFFF
    870            Menu_option = Uart_RX_Menu_3;
   \                     ??CrossCallReturnLabel_80:
   \   0000F3   740F         MOV     A,#0xf
   \   0000F5   12....       LCALL   ?Subroutine6 & 0xFFFF
    871            if(key == HAL_KEY_CANCEL)
   \                     ??CrossCallReturnLabel_13:
   \   0000F8   7009         JNZ     ??Uart_RX_0
    872            {
    873              Uart_Rx_Flag = Close;
   \   0000FA   90....       MOV     DPTR,#Uart_Rx_Flag
   \   0000FD   12....       LCALL   ?Subroutine2 & 0xFFFF
    874              Menu_option = Uart_Menu_2;
    875              FirstItem = 0;
    876              NowItem = 0;
    877              Menu_all(0);
   \                     ??CrossCallReturnLabel_51:
   \   000100   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    878            }
    879          }
   \                     ??Uart_RX_0:
   \   000103   02....       LJMP    ?Subroutine31 & 0xFFFF
    880          //********************************************************************************
    881          //º¯ÊýÃû£ºvoid Uart_Pingpong(INT8U key);
    882          //¹¦ÄÜ£º´®¿ÚÊÕ·¢²âÊÔ
    883          //ÊäÈë£ºKEY
    884          //Êä³ö£ºnull
    885          //********************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    886          void Uart_Pingpong(INT8U key)
   \                     Uart_Pingpong:
    887          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    888            uint8 Baud_rate[6];
    889            ClearScreenLcd();
   \   00000C                ; Setup parameters for call to function ClearScreen
   \   00000C   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   00000F   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   000011   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    890            Uart_Baud_rate(Baud_rate_38400);
   \   000014                ; Setup parameters for call to function Uart_Baud_rate
   \   000014   7A80         MOV     R2,#-0x80
   \   000016   7B01         MOV     R3,#0x1
   \   000018   90....       MOV     DPTR,#(Uart_Baud_rate & 0xffff)
   \   00001B   74..         MOV     A,#((Uart_Baud_rate >> 16) & 0xff)
   \   00001D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    891            Print(2,16,"Uart PP test",1);
   \   000020                ; Setup parameters for call to function Print
   \   000020   75..01       MOV     ?V0 + 0,#0x1
   \   000023   75..00       MOV     ?V0 + 1,#0x0
   \   000026   78..         MOV     R0,#?V0 + 0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   7C..         MOV     R4,#(`?<Constant "Uart PP test">` & 0xff)
   \   00002D   7D..         MOV     R5,#((`?<Constant "Uart PP test">` >> 8) & 0xff)
   \   00002F   7A10         MOV     R2,#0x10
   \   000031   7902         MOV     R1,#0x2
   \   000033   90....       MOV     DPTR,#(Print & 0xffff)
   \   000036   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000038   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    892            Print(4,0,"Baud rate:",1);
   \   000040                ; Setup parameters for call to function Print
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7C..         MOV     R4,#(`?<Constant "Baud rate:">` & 0xff)
   \   000047   7D..         MOV     R5,#((`?<Constant "Baud rate:">` >> 8) & 0xff)
   \   000049   7A00         MOV     R2,#0x0
   \   00004B   7904         MOV     R1,#0x4
   \   00004D   90....       MOV     DPTR,#(Print & 0xffff)
   \   000050   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000052   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
    893            sprintf(Baud_rate,(char *)"%d00",Baud_rate_38400);
                           ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \   00005A                ; Setup parameters for call to function sprintf
   \   00005A   75..80       MOV     ?V0 + 0,#-0x80
   \   00005D   75..01       MOV     ?V0 + 1,#0x1
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7C..         MOV     R4,#(`?<Constant "%d00">` & 0xff)
   \   000067   7D..         MOV     R5,#((`?<Constant "%d00">` >> 8) & 0xff)
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
   \   000072   90....       MOV     DPTR,#(sprintf & 0xffff)
   \   000075   74..         MOV     A,#((sprintf >> 16) & 0xff)
   \   000077   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
    894            Print(4,80,Baud_rate,1);
   \   00007F                ; Setup parameters for call to function Print
   \   00007F   75..01       MOV     ?V0 + 0,#0x1
   \   000082   75..00       MOV     ?V0 + 1,#0x0
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   AC82         MOV     R4,DPL
   \   000091   AD83         MOV     R5,DPH
   \   000093   7A50         MOV     R2,#0x50
   \   000095   7904         MOV     R1,#0x4
   \   000097   90....       MOV     DPTR,#(Print & 0xffff)
   \   00009A   74..         MOV     A,#((Print >> 16) & 0xff)
   \   00009C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    895            Print(6,0,"Data:",1);
   \   0000A4                ; Setup parameters for call to function Print
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   7C..         MOV     R4,#(`?<Constant "Data:">` & 0xff)
   \   0000AB   7D..         MOV     R5,#((`?<Constant "Data:">` >> 8) & 0xff)
   \   0000AD   7A00         MOV     R2,#0x0
   \   0000AF   7906         MOV     R1,#0x6
   \   0000B1   90....       MOV     DPTR,#(Print & 0xffff)
   \   0000B4   74..         MOV     A,#((Print >> 16) & 0xff)
   \   0000B6   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
    896            UartTX_Send_String("ChengDu WXL Communication Technology C0.,LTD\n",45);
   \   0000BE                ; Setup parameters for call to function UartTX_Send_String
   \   0000BE   7C2D         MOV     R4,#0x2d
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   7A..         MOV     R2,#(`?<Constant "ChengDu WXL Communica...">` & 0xff)
   \   0000C4   7B..         MOV     R3,#((`?<Constant "ChengDu WXL Communica...">` >> 8) & 0xff)
   \   0000C6   90....       MOV     DPTR,#(UartTX_Send_String & 0xffff)
   \   0000C9   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0000CB   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    897            UartTX_Send_String("Uart Pingpong test\n",19);
   \   0000CE                ; Setup parameters for call to function UartTX_Send_String
   \   0000CE   7C13         MOV     R4,#0x13
   \   0000D0   7D00         MOV     R5,#0x0
   \   0000D2   7A..         MOV     R2,#(`?<Constant "Uart Pingpong test\\n">` & 0xff)
   \   0000D4   7B..         MOV     R3,#((`?<Constant "Uart Pingpong test\\n">` >> 8) & 0xff)
   \   0000D6   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0000D8   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    898            UartTX_Send_String("Baud rate:38400\n",16);
   \   0000DB                ; Setup parameters for call to function UartTX_Send_String
   \   0000DB   7C10         MOV     R4,#0x10
   \   0000DD   7D00         MOV     R5,#0x0
   \   0000DF   7A..         MOV     R2,#(`?<Constant "Baud rate:38400\\n">` & 0xff)
   \   0000E1   7B..         MOV     R3,#((`?<Constant "Baud rate:38400\\n">` >> 8) & 0xff)
   \   0000E3   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   0000E5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    899            Uart_PP_Flag = Open;
   \   0000E8   90....       MOV     DPTR,#Uart_PP_Flag
   \   0000EB   7401         MOV     A,#0x1
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E4           CLR     A
   \   0000F0   12....       LCALL   ?Subroutine29 & 0xFFFF
    900            Menu_option = Uart_PP_Menu_3;
   \                     ??CrossCallReturnLabel_81:
   \   0000F3   7410         MOV     A,#0x10
   \   0000F5   12....       LCALL   ?Subroutine6 & 0xFFFF
    901            if(key == HAL_KEY_CANCEL)
   \                     ??CrossCallReturnLabel_14:
   \   0000F8   7009         JNZ     ??Uart_Pingpong_0
    902            {
    903              Uart_PP_Flag = Close;
   \   0000FA   90....       MOV     DPTR,#Uart_PP_Flag
   \   0000FD   12....       LCALL   ?Subroutine2 & 0xFFFF
    904              Menu_option = Uart_Menu_2;
    905              FirstItem = 0;
    906              NowItem = 0;
    907              Menu_all(0);
   \                     ??CrossCallReturnLabel_52:
   \   000100   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    908            }
    909          }
   \                     ??Uart_Pingpong_0:
   \   000103   02....       LJMP    ?Subroutine31 & 0xFFFF
    910          
    911          
    912          #ifndef ZG_Coord
    913          extern int Sensor_Flag;
    914          //****************************************************************************
    915          //º¯ÊýÃû£ºuint16 ReadBattery_menu(INT8U key)
    916          //¹¦  ÄÜ£º¶ÁµçÔ´µçÑ¹
    917          //Êä  Èë£ºkey
    918          //Êä  ³ö£º
    919          //****************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#Sensor_Flag
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   02....       LJMP    ?Subroutine29 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    920          void ReadBattery_menu(INT8U key)
   \                     ReadBattery_menu:
    921          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    922            ClearScreenLcd();
   \   000007                ; Setup parameters for call to function ClearScreen
   \   000007   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   00000A   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   00000C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    923            Print(2,0,"Power value",1);
   \   00000F                ; Setup parameters for call to function Print
   \   00000F   75..01       MOV     ?V0 + 0,#0x1
   \   000012   75..00       MOV     ?V0 + 1,#0x0
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   7C..         MOV     R4,#(`?<Constant "Power value">` & 0xff)
   \   00001C   7D..         MOV     R5,#((`?<Constant "Power value">` >> 8) & 0xff)
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7902         MOV     R1,#0x2
   \   000022   90....       MOV     DPTR,#(Print & 0xffff)
   \   000025   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000027   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
    924            Sensor_Flag = Sensor_ReadBattery;
   \   00002F   90....       MOV     DPTR,#Sensor_Flag
   \   000032   7401         MOV     A,#0x1
   \   000034   12....       LCALL   ?Subroutine6 & 0xFFFF
    925            if(key == HAL_KEY_CANCEL)
   \                     ??CrossCallReturnLabel_15:
   \   000037   700B         JNZ     ??ReadBattery_menu_0
    926            {
    927              Sensor_Flag = 0;
   \   000039   12....       LCALL   ?Subroutine12 & 0xFFFF
    928              Menu_option = Sensor_Menu_2;
   \                     ??CrossCallReturnLabel_75:
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ??Subroutine2_1 & 0xFFFF
    929              FirstItem = 0;
    930              NowItem = 0;
    931              Menu_all(0);
   \                     ??CrossCallReturnLabel_54:
   \   000041   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    932            }
    933          
    934          }
   \                     ??ReadBattery_menu_0:
   \   000044   02....       LJMP    ??Subroutine31_1 & 0xFFFF
    935          
    936          //****************************************************************************
    937          //º¯ÊýÃû£ºuint16 Temp_menu(INT8U key)
    938          //¹¦  ÄÜ£º¶ÁÆ¬ÄÚÎÂ¶È²Ëµ¥
    939          //Êä  Èë£ºkey
    940          //Êä  ³ö£º
    941          //****************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    942          void Temp_menu(INT8U key)
   \                     Temp_menu:
    943          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    944            ClearScreenLcd();
   \   000007                ; Setup parameters for call to function ClearScreen
   \   000007   90....       MOV     DPTR,#(ClearScreen & 0xffff)
   \   00000A   74..         MOV     A,#((ClearScreen >> 16) & 0xff)
   \   00000C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    945            Print(2,0,"Temp value",1);
   \   00000F                ; Setup parameters for call to function Print
   \   00000F   75..01       MOV     ?V0 + 0,#0x1
   \   000012   75..00       MOV     ?V0 + 1,#0x0
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   7C..         MOV     R4,#(`?<Constant "Temp value">` & 0xff)
   \   00001C   7D..         MOV     R5,#((`?<Constant "Temp value">` >> 8) & 0xff)
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7902         MOV     R1,#0x2
   \   000022   90....       MOV     DPTR,#(Print & 0xffff)
   \   000025   74..         MOV     A,#((Print >> 16) & 0xff)
   \   000027   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
    946            Sensor_Flag = Sensor_Temp;
   \   00002F   90....       MOV     DPTR,#Sensor_Flag
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?Subroutine6 & 0xFFFF
    947            if(key == HAL_KEY_CANCEL)
   \                     ??CrossCallReturnLabel_16:
   \   000037   700B         JNZ     ??Temp_menu_0
    948            {
    949              Sensor_Flag = 0;
   \   000039   12....       LCALL   ?Subroutine12 & 0xFFFF
    950              Menu_option = Sensor_Menu_2;
   \                     ??CrossCallReturnLabel_76:
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ??Subroutine2_1 & 0xFFFF
    951              FirstItem = 0;
    952              NowItem = 0;
    953              Menu_all(0);
   \                     ??CrossCallReturnLabel_55:
   \   000041   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    954            }
    955          
    956          }
   \                     ??Temp_menu_0:
   \   000044   02....       LJMP    ??Subroutine31_1 & 0xFFFF
    957          //****************************************************************************
    958          //º¯ÊýÃû£ºuint16 Read_Temp(void)
    959          //¹¦  ÄÜ£º¶ÁµçÔ´µçÑ¹
    960          //Êä  Èë£ºkey
    961          //Êä  ³ö£º
    962          //****************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    963          uint16 Read_Temp(void)
   \                     Read_Temp:
    964          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    965            uint16 value;
    966            ADCIF = 0;//Çå³ýADC±êÖ¾
   \   000005   C28D         CLR     0x88.5
    967            ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_512 | HAL_ADC_CHN_TEMP);        //²ÉÓÃÄÚ²¿»ù×¼£¬12Î»ADC£¬ÎÂ¶ÈÍ¨µÀ
   \   000007   75B63E       MOV     0xb6,#0x3e
    968            while ( !ADCIF );//µÈµ½×ª»¯Íê³É
   \                     ??Read_Temp_0:
   \   00000A   A28D         MOV     C,0x88.5
   \   00000C   50FC         JNC     ??Read_Temp_0
    969            value = ADCL;
   \   00000E   AABA         MOV     R2,0xba
   \   000010   8A82         MOV     DPL,R2
   \   000012   A882         MOV     R0,DPL
    970            value |= ((uint16) ADCH) << 8;      //È¡ADCÖµ
   \   000014   E5BB         MOV     A,0xbb
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   CA           XCH     A,R2
   \   000019   F9           MOV     R1,A
    971            /*
    972             * ´Ó0µ½0x8000±íÊ¾0µ½1.25V
    973             * 0¡æ = 0.763 V = 20002
    974             * ÎÂ¶ÈÏµÊý = 0.0024 V/C = 62.9 /C
    975             * ÉÏÃæµÄ²ÎÊý¶¼ÊÇµäÐÍÖµÐèÒªÐ£×¼Çë²Î¼ûÊý¾ÝÊÖ²á
    976             */
    977          #define VOLTAGE_AT_TEMP_ZERO      20002   // 0.763 V
    978          #define TEMP_COEFFICIENT          63.9    // 0.0024 V/C
    979          
    980            // ×îµÍÎÂ¶ÈÏÞÖÆ
    981            if ( value < VOLTAGE_AT_TEMP_ZERO )
   \   00001A   C3           CLR     C
   \   00001B   E8           MOV     A,R0
   \   00001C   9422         SUBB    A,#0x22
   \   00001E   E9           MOV     A,R1
   \   00001F   944E         SUBB    A,#0x4e
   \   000021   5004         JNC     ??Read_Temp_1
    982              value = VOLTAGE_AT_TEMP_ZERO;
   \   000023   7822         MOV     R0,#0x22
   \   000025   794E         MOV     R1,#0x4e
    983          
    984            value = value - VOLTAGE_AT_TEMP_ZERO;
   \                     ??Read_Temp_1:
   \   000027   E8           MOV     A,R0
   \   000028   24DE         ADD     A,#-0x22
   \   00002A   F8           MOV     R0,A
   \   00002B   E9           MOV     A,R1
   \   00002C   34B1         ADDC    A,#-0x4f
   \   00002E   F9           MOV     R1,A
    985          
    986            //×î¸ßÎÂ¶ÈÏÞÖÆ
    987            if ( value > TEMP_COEFFICIENT * 99 )
   \   00002F   C3           CLR     C
   \   000030   E8           MOV     A,R0
   \   000031   94B7         SUBB    A,#-0x49
   \   000033   E9           MOV     A,R1
   \   000034   9418         SUBB    A,#0x18
   \   000036   4004         JC      ??Read_Temp_2
    988              value = TEMP_COEFFICIENT * 99;
   \   000038   78B6         MOV     R0,#-0x4a
   \   00003A   7918         MOV     R1,#0x18
    989          
    990            return ( (uint8)(value/TEMP_COEFFICIENT) );
   \                     ??Read_Temp_2:
   \   00003C   88..         MOV     ?V0 + 0,R0
   \   00003E   89..         MOV     ?V0 + 1,R1
   \   000040   8A..         MOV     ?V0 + 2,R2
   \   000042   8A..         MOV     ?V0 + 3,R2
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?UL_TO_FLT
   \   000049   90....       MOV     DPTR,#__Constant_427f999a
   \   00004C   78..         MOV     R0,#?V0 + 4
   \   00004E   12....       LCALL   ?L_MOV_X
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   79..         MOV     R1,#?V0 + 4
   \   000055   12....       LCALL   ?FLT_DIV
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?FLT_TO_L
   \   00005D   AA..         MOV     R2,?V0 + 0
   \   00005F   7B00         MOV     R3,#0x0
   \   000061                REQUIRE ?Subroutine32
   \   000061                ; // Fall through to label ?Subroutine32
    991          
    992          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    993          
    994          
    995          
    996          //****************************************************************************
    997          //º¯ÊýÃû£ºuint16 ReadBattery(void)
    998          //¹¦  ÄÜ£º¶ÁµçÔ´µçÑ¹
    999          //Êä  Èë£ºkey
   1000          //Êä  ³ö£º
   1001          //****************************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1002          uint16 ReadBattery(void)
   \                     ReadBattery:
   1003          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   1004             uint16 value;
   1005          
   1006            ADCIF = 0;    //Çå³ýADCÖÐ¶Ï±êÖ¾
   \   000005   C28D         CLR     0x88.5
   1007          
   1008            ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_128 | HAL_ADC_CHN_VDD3);          //Ñ¡ÔñÄÚ²¿»ù×¼£¬ÓÃ10Î»ADC£¬¼ì²âµçÔ´µçÑ¹
   \   000007   75B61F       MOV     0xb6,#0x1f
   1009          
   1010            /*µÈ´ý×ª»»Íê³É*/
   1011            while ( !ADCIF );
   \                     ??ReadBattery_0:
   \   00000A   A28D         MOV     C,0x88.5
   \   00000C   50FC         JNC     ??ReadBattery_0
   1012          
   1013            //·µ»Ø½á¹û
   1014            value = ADCL;
   \   00000E   AABA         MOV     R2,0xba
   \   000010   8A82         MOV     DPL,R2
   \   000012   8582..       MOV     ?V0 + 0,DPL
   1015            value |= ((uint16) ADCH) << 8;
   \   000015   E5BB         MOV     A,0xbb
   \   000017   F5..         MOV     ?V0 + 1,A
   1016          
   1017            /*
   1018             * Õâ¸öÖµÊÇ²âÁ¿µçÔ´µçÑ¹Öµ
   1019             * 1.25V 0±íÊ¾0V£¬32767±íÊ¾1.25V
   1020             * voltage = (value*3*1.25)/32767 volts
   1021             * Ôö¼Ó10±¶µçÔ´µçÑ¹£¬ÒÔ±íÊ¾ÓÐÐ¡Ê÷Î»Ôö¼Ó¾«¶È
   1022             */
   1023          
   1024            value = value >> 6;   // divide first by 2^6
   1025            value = value * 37.5;
   1026            value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
   1027          
   1028            return value;
   \   000019   7406         MOV     A,#0x6
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?US_SHR
   \   000020   F5..         MOV     ?V0 + 2,A
   \   000022   F5..         MOV     ?V0 + 3,A
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?UL_TO_FLT
   \   000029   90....       MOV     DPTR,#__Constant_42160000
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?L_MOV_X
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   79..         MOV     R1,#?V0 + 4
   \   000035   12....       LCALL   ?FLT_MUL
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?FLT_TO_L
   \   00003D   7409         MOV     A,#0x9
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?US_SHR
   \   000044   AA..         MOV     R2,?V0 + 0
   \   000046   FB           MOV     R3,A
   \   000047   80..         SJMP    ?Subroutine32
   1029          }

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "3:Pingpong Test "`:
   \   000000   333A5069     DB "3:Pingpong Test "
   \            6E67706F
   \            6E672054
   \            65737420
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Uart send test">>`:
   \   000000   55617274     DB "Uart send test"
   \            2073656E
   \            64207465
   \            737400  

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Baud rate:">>`:
   \   000000   42617564     DB "Baud rate:"
   \            20726174
   \            653A00  

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%d00">>`:
   \   000000   25643030     DB "%d00"
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Data:hello word!"`:
   \   000000   44617461     DB "Data:hello word!"
   \            3A68656C
   \            6C6F2077
   \            6F726421
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ChengDu WXL Commu`:
   \   000000   4368656E     DB "ChengDu WXL Communication Technology C0.,LTD\012"
   \            67447520
   \            57584C20
   \            436F6D6D
   \            756E6963
   \            6174696F
   \            6E205465
   \            63686E6F
   \            6C6F6779
   \            2043302E
   \            2C4C5444
   \            0A00    

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "IEEE Add:(Hex)">>`:
   \   000000   49454545     DB "IEEE Add:(Hex)"
   \            20416464
   \            3A284865
   \            782900  

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Uart send test\\n"`:
   \   000000   55617274     DB "Uart send test\012"
   \            2073656E
   \            64207465
   \            73740A00

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Baud rate:38400\\n`:
   \   000000   42617564     DB "Baud rate:38400\012"
   \            20726174
   \            653A3338
   \            3430300A
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Exit\\n">>`:
   \   000000   45786974     DB "Exit\012"
   \            0A00    

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Uart Rx test">>`:
   \   000000   55617274     DB "Uart Rx test"
   \            20527820
   \            74657374
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Data:">>`:
   \   000000   44617461     DB "Data:"
   \            3A00    

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Uart RX test\\n">>`:
   \   000000   55617274     DB "Uart RX test\012"
   \            20525820
   \            74657374
   \            0A00    

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Uart PP test">>`:
   \   000000   55617274     DB "Uart PP test"
   \            20505020
   \            74657374
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Uart Pingpong tes`:
   \   000000   55617274     DB "Uart Pingpong test\012"
   \            2050696E
   \            67706F6E
   \            67207465
   \            73740A00

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Power value">>`:
   \   000000   506F7765     DB "Power value"
   \            72207661
   \            6C756500

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Temp value">>`:
   \   000000   54656D70     DB "Temp value"
   \            2076616C
   \            756500  

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "1:ZigBee Test   "`:
   \   000000   313A5A69     DB "1:ZigBee Test   "
   \            67426565
   \            20546573
   \            74202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "2:Uart Test     "`:
   \   000000   323A5561     DB "2:Uart Test     "
   \            72742054
   \            65737420
   \            20202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "3:Sensor Test   "`:
   \   000000   333A5365     DB "3:Sensor Test   "
   \            6E736F72
   \            20546573
   \            74202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "4:About         "`:
   \   000000   343A4162     DB "4:About         "
   \            6F757420
   \            20202020
   \            20202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "1:Send Test     "`:
   \   000000   313A5365     DB "1:Send Test     "
   \            6E642054
   \            65737420
   \            20202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "2:Network nod   "`:
   \   000000   323A4E65     DB "2:Network nod   "
   \            74776F72
   \            6B206E6F
   \            64202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "1:Single Send   "`:
   \   000000   313A5369     DB "1:Single Send   "
   \            6E676C65
   \            2053656E
   \            64202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "2:Continuous    "`:
   \   000000   323A436F     DB "2:Continuous    "
   \            6E74696E
   \            756F7573
   \            20202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "1:Short Addr    "`:
   \   000000   313A5368     DB "1:Short Addr    "
   \            6F727420
   \            41646472
   \            20202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "2:Broadcast Send"`:
   \   000000   323A4272     DB "2:Broadcast Send"
   \            6F616463
   \            61737420
   \            53656E64
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "hello">>`:
   \   000000   68656C6C     DB "hello"
   \            6F00    

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Consecution Tx">>`:
   \   000000   436F6E73     DB "Consecution Tx"
   \            65637574
   \            696F6E20
   \            547800  

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Name:">>`:
   \   000000   4E616D65     DB "Name:"
   \            3A00    

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "hello word!\\n">>`:
   \   000000   68656C6C     DB "hello word!\012"
   \            6F20776F
   \            7264210A
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Short Add:">>`:
   \   000000   53686F72     DB "Short Add:"
   \            74204164
   \            643A00  

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "NO JOIN NODE">>`:
   \   000000   4E4F204A     DB "NO JOIN NODE"
   \            4F494E20
   \            4E4F4445
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "3w.c51rf.com">>`:
   \   000000   33772E63     DB "3w.c51rf.com"
   \            35317266
   \            2E636F6D
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Send Data:">>`:
   \   000000   53656E64     DB "Send Data:"
   \            20446174
   \            613A00  

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "S_Data:">>`:
   \   000000   535F4461     DB "S_Data:"
   \            74613A00

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "R_Data:">>`:
   \   000000   525F4461     DB "R_Data:"
   \            74613A00

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "c51rf.com">>`:
   \   000000   63353172     DB "c51rf.com"
   \            662E636F
   \            6D00    

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "%d">>`:
   \   000000   256400       DB "%d"

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Short add:">>`:
   \   000000   53686F72     DB "Short add:"
   \            74206164
   \            643A00  

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "1:Power Check   "`:
   \   000000   313A506F     DB "1:Power Check   "
   \            77657220
   \            43686563
   \            6B202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "2:Temp Check    "`:
   \   000000   323A5465     DB "2:Temp Check    "
   \            6D702043
   \            6865636B
   \            20202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "1:Tx Test       "`:
   \   000000   313A5478     DB "1:Tx Test       "
   \            20546573
   \            74202020
   \            20202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "2:Rx Test       "`:
   \   000000   323A5278     DB "2:Rx Test       "
   \            20546573
   \            74202020
   \            20202020
   \            00      

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for TopDisp>`:
   \   000000   01           DB 1

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Menu_option>`:
   \   000000   0600         DW 6

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_427f999a>`:
   \   000000   9A997F42     DD 427F999AH

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_42160000>`:
   \   000000   00001642     DD 42160000H

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "3:Pingpong Test ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "3:Pingpong Test "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Uart send test">`:
   \   000000                DS 15
   \   00000F                REQUIRE `?<Initializer for <Constant "Uart send test">>`
   \   00000F                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Baud rate:">`:
   \   000000                DS 11
   \   00000B                REQUIRE `?<Initializer for <Constant "Baud rate:">>`
   \   00000B                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%d00">`:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for <Constant "%d00">>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Data:hello word!">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "Data:hello word!"`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "ChengDu WXL Communica...">`:
   \   000000                DS 46
   \   00002E                REQUIRE `?<Initializer for <Constant "ChengDu WXL Commu`
   \   00002E                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "IEEE Add:(Hex)">`:
   \   000000                DS 15
   \   00000F                REQUIRE `?<Initializer for <Constant "IEEE Add:(Hex)">>`
   \   00000F                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Uart send test\\n">`:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for <Constant "Uart send test\\n"`
   \   000010                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Baud rate:38400\\n">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "Baud rate:38400\\n`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Exit\\n">`:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for <Constant "Exit\\n">>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Uart Rx test">`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "Uart Rx test">>`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Data:">`:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for <Constant "Data:">>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Uart RX test\\n">`:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for <Constant "Uart RX test\\n">>`
   \   00000E                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Uart PP test">`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "Uart PP test">>`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Uart Pingpong test\\n">`:
   \   000000                DS 20
   \   000014                REQUIRE `?<Initializer for <Constant "Uart Pingpong tes`
   \   000014                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Power value">`:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for <Constant "Power value">>`
   \   00000C                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Temp value">`:
   \   000000                DS 11
   \   00000B                REQUIRE `?<Initializer for <Constant "Temp value">>`
   \   00000B                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "1:ZigBee Test   ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "1:ZigBee Test   "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "2:Uart Test     ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "2:Uart Test     "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "3:Sensor Test   ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "3:Sensor Test   "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "4:About         ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "4:About         "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "1:Send Test     ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "1:Send Test     "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "2:Network nod   ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "2:Network nod   "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "1:Single Send   ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "1:Single Send   "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "2:Continuous    ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "2:Continuous    "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "1:Short Addr    ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "1:Short Addr    "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "2:Broadcast Send">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "2:Broadcast Send"`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "hello">`:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for <Constant "hello">>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Consecution Tx">`:
   \   000000                DS 15
   \   00000F                REQUIRE `?<Initializer for <Constant "Consecution Tx">>`
   \   00000F                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Name:">`:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for <Constant "Name:">>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "hello word!\\n">`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "hello word!\\n">>`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Short Add:">`:
   \   000000                DS 11
   \   00000B                REQUIRE `?<Initializer for <Constant "Short Add:">>`
   \   00000B                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "NO JOIN NODE">`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "NO JOIN NODE">>`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "3w.c51rf.com">`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "3w.c51rf.com">>`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Send Data:">`:
   \   000000                DS 11
   \   00000B                REQUIRE `?<Initializer for <Constant "Send Data:">>`
   \   00000B                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "S_Data:">`:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for <Constant "S_Data:">>`
   \   000008                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "R_Data:">`:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for <Constant "R_Data:">>`
   \   000008                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "c51rf.com">`:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for <Constant "c51rf.com">>`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "%d">`:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for <Constant "%d">>`
   \   000003                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Short add:">`:
   \   000000                DS 11
   \   00000B                REQUIRE `?<Initializer for <Constant "Short add:">>`
   \   00000B                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "1:Power Check   ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "1:Power Check   "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "2:Temp Check    ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "2:Temp Check    "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "1:Tx Test       ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "1:Tx Test       "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "2:Rx Test       ">`:
   \   000000                DS 17
   \   000011                REQUIRE `?<Initializer for <Constant "2:Rx Test       "`
   \   000011                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     __Constant_427f999a:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_427f999a>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     __Constant_42160000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_42160000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1
   1030          
   1031          #endif

   Maximum stack usage in bytes:

     Function                ISTACK PSTACK XSTACK
     --------                ------ ------ ------
     Aboat_Driver                2      0     12
       -> ClearScreen            0      0     20
       -> Print                  0      0     24
       -> Print                  0      0     24
       -> Print                  0      0     24
       -> Short_menu             0      0     20
       -> Print                  0      0     24
       -> IEEE_menu              0      0     20
       -> Print                  0      0     24
       -> Menu_all               0      0     20
     ClearScreenLcd              2      0      0
       -> ClearScreen            4      0      0
     DrawMenu                    0      0     48
       -> ClearScreen            0      0     28
       -> Print                  0      0     32
       -> Print                  0      0     32
       -> Print                  0      0     32
       -> Print                  0      0     32
     IEEE_menu                   1      0     44
       -> NLME_GetExtAddr        0      0     68
       -> Ten_to_16              0      0     68
       -> Ten_to_16              0      0     68
     MenuMenuDisp                2      0      9
       -> strcpy                 0      0     18
       -> strcpy                 0      0     18
       -> strcpy                 0      0     18
       -> strcpy                 0      0     18
       -> DrawMenu               0      0     18
       -> halWait                0      0     18
       -> Menu_all               0      0     18
     Menu_all                    2      0     32
       -> MenuMenuDisp           4      0      0
       -> Zigbee_Network         4      0      0
       -> Aboat_Driver           4      0      0
       -> Send_Option            4      0      0
       -> Send_Test              4      0      0
       -> Send_Broadcast         4      0      0
       -> PingpongTxTest         4      0      0
       -> SelectTxAddr           4      0      0
       -> SingleTxTest           4      0      0
       -> Uart_Menu              4      0      0
       -> Uart_Send              4      0      0
       -> Uart_RX                4      0      0
       -> Uart_Pingpong          4      0      0
       -> ReadBattery_menu       4      0      0
       -> Sensor_Menu            4      0      0
       -> Temp_menu              4      0      0
     PingpongTxTest              3      0     20
       -> ClearScreen            0      0     36
       -> Print                  0      0     40
       -> Print                  0      0     40
       -> strcpy                 0      0     36
       -> Print                  0      0     40
       -> SendData               0      0     36
       -> sprintf                0      0     40
       -> SendData               0      0     36
       -> Ten_to_16              0      0     36
       -> Print                  0      0     40
       -> Print                  0      0     40
       -> Print                  0      0     40
       -> Menu_all               0      0     36
     ReadBattery                 0      0     16
     ReadBattery_menu            2      0     12
       -> ClearScreen            0      0     20
       -> Print                  0      0     24
       -> Menu_all               0      0     20
     Read_Temp                   0      0     16
     SelectTxAddr                3      0     34
       -> ClearScreen            0      0     64
       -> strcpy                 0      0     64
       -> Print                  0      0     68
       -> memcpy                 0      0     68
       -> memcpy                 0      0     68
       -> DrawMenu               0      0     64
       -> Menu_all               0      0     64
       -> Menu_all               0      0     64
     Send_Broadcast              2      0     12
       -> SendData               0      0     20
       -> ClearScreen            0      0     20
       -> Print                  0      0     24
       -> Menu_all               0      0     20
     Send_Option                 2      0      9
       -> strcpy                 0      0     18
       -> strcpy                 0      0     18
       -> DrawMenu               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
     Send_Test                   2      0      9
       -> strcpy                 0      0     18
       -> strcpy                 0      0     18
       -> DrawMenu               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
     Sensor_Menu                 2      0      9
       -> strcpy                 0      0     18
       -> strcpy                 0      0     18
       -> DrawMenu               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
     Short_menu                  1      0     27
       -> NLME_GetShortAddr      0      0     34
       -> Ten_to_16              0      0     34
     SingleTxTest                2      0     12
       -> strcpy                 0      0     20
       -> ClearScreen            0      0     20
       -> Print                  0      0     24
       -> Print                  0      0     24
       -> SendData               0      0     20
       -> halWait                0      0     20
       -> Menu_all               0      0     20
     Temp_menu                   2      0     12
       -> ClearScreen            0      0     20
       -> Print                  0      0     24
       -> Menu_all               0      0     20
     Ten_to_16                   0      0     34
     Uart_Menu                   2      0      9
       -> strcpy                 0      0     18
       -> strcpy                 0      0     18
       -> strcpy                 0      0     18
       -> DrawMenu               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
     Uart_Pingpong               2      0     18
       -> ClearScreen            0      0     32
       -> Uart_Baud_rate         0      0     32
       -> Print                  0      0     36
       -> Print                  0      0     36
       -> sprintf                0      0     36
       -> Print                  0      0     36
       -> Print                  0      0     36
       -> UartTX_Send_String     0      0     32
       -> UartTX_Send_String     0      0     32
       -> UartTX_Send_String     0      0     32
       -> Menu_all               0      0     32
     Uart_RX                     2      0     18
       -> ClearScreen            0      0     32
       -> Uart_Baud_rate         0      0     32
       -> Print                  0      0     36
       -> Print                  0      0     36
       -> sprintf                0      0     36
       -> Print                  0      0     36
       -> Print                  0      0     36
       -> UartTX_Send_String     0      0     32
       -> UartTX_Send_String     0      0     32
       -> UartTX_Send_String     0      0     32
       -> Menu_all               0      0     32
     Uart_Send                   2      0     18
       -> ClearScreen            0      0     32
       -> Uart_Baud_rate         0      0     32
       -> Print                  0      0     36
       -> Print                  0      0     36
       -> sprintf                0      0     36
       -> Print                  0      0     36
       -> Print                  0      0     36
       -> UartTX_Send_String     0      0     32
       -> UartTX_Send_String     0      0     32
       -> UartTX_Send_String     0      0     32
       -> UartTX_Send_String     0      0     32
       -> Menu_all               0      0     32
       -> UartTX_Send_String     0      0     32
     Zigbee_Network              2      0      9
       -> strcpy                 0      0     18
       -> strcpy                 0      0     18
       -> DrawMenu               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18
       -> Menu_all               0      0     18


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     ADCCON3                           1
     ADCL                              1
     ADCH                              1
     NowItem                           1
     FirstItem                         1
     TopDisp                           1
     MenuItem                        221
     disp_ieee                        17
     Short_Add                         7
     Menu_option                       2
     Uart_Rx_Flag                      2
     Uart_PP_Flag                      2
     Send_Flag                         2
     Send_Flag_Consecution             2
     SrcSaddr                          2
     ClearScreenLcd                   12
     ?Subroutine25                     7
     DrawMenu                        251
     ?Subroutine14                    43
     MenuMenuDisp                    164
     ?Subroutine28                     5
     ?Subroutine30                     5
     Menu_all                        331
     Zigbee_Network                  101
     ?Subroutine11                    11
     ?Subroutine27                     8
     Send_Option                     119
     ?Subroutine5                      7
     ?Subroutine20                     7
     ?Subroutine29                     5
     Send_Test                       106
     Send_Broadcast                  142
     ?Subroutine31                    10
     ?Subroutine2                     18
     Aboat_Driver                    187
     IEEE_menu                       246
     ?Subroutine17                     1
     ?Subroutine26                     8
     ?Subroutine7                     16
     ?Subroutine19                     4
     ?Subroutine23                    11
     ?Subroutine15                    11
     ?Subroutine24                    11
     Ten_to_16                        69
     Short_menu                      136
     Short_Addr_number                 2
     SelectTxAddr                    434
     ?Subroutine18                    15
     ?Subroutine16                    22
     ?Subroutine8                     41
     ?Subroutine3                     30
     ?Subroutine22                    12
     ?Subroutine1                     13
     ?Subroutine4                      9
     ?Subroutine21                     7
     SingleTxTest                    186
     ?Subroutine0                     20
     ?Subroutine10                     6
     ?Subroutine6                      8
     flag                              2
     PingpongTxTest                  536
     ?Subroutine9                     17
     Sensor_Menu                     112
     Uart_Menu                       123
     Uart_Send                       287
     Uart_RX                         262
     Uart_Pingpong                   262
     ?Subroutine12                     9
     ReadBattery_menu                 71
     Temp_menu                        71
     Read_Temp                        97
     ?Subroutine32                     5
     ReadBattery                      73
     ?<Initializer for <Constant "3:Pingpong Test "
                                      17
     ?<Initializer for <Constant "Uart send test">>
                                      15
     ?<Initializer for <Constant "Baud rate:">>
                                      11
     ?<Initializer for <Constant "%d00">>
                                       5
     ?<Initializer for <Constant "Data:hello word!"
                                      17
     ?<Initializer for <Constant "ChengDu WXL Commu
                                      46
     ?<Initializer for <Constant "IEEE Add:(Hex)">>
                                      15
     ?<Initializer for <Constant "Uart send test\n"
                                      16
     ?<Initializer for <Constant "Baud rate:38400\n
                                      17
     ?<Initializer for <Constant "Exit\n">>
                                       6
     ?<Initializer for <Constant "Uart Rx test">>
                                      13
     ?<Initializer for <Constant "Data:">>
                                       6
     ?<Initializer for <Constant "Uart RX test\n">>
                                      14
     ?<Initializer for <Constant "Uart PP test">>
                                      13
     ?<Initializer for <Constant "Uart Pingpong tes
                                      20
     ?<Initializer for <Constant "Power value">>
                                      12
     ?<Initializer for <Constant "Temp value">>
                                      11
     ?<Initializer for <Constant "1:ZigBee Test   "
                                      17
     ?<Initializer for <Constant "2:Uart Test     "
                                      17
     ?<Initializer for <Constant "3:Sensor Test   "
                                      17
     ?<Initializer for <Constant "4:About         "
                                      17
     ?<Initializer for <Constant "1:Send Test     "
                                      17
     ?<Initializer for <Constant "2:Network nod   "
                                      17
     ?<Initializer for <Constant "1:Single Send   "
                                      17
     ?<Initializer for <Constant "2:Continuous    "
                                      17
     ?<Initializer for <Constant "1:Short Addr    "
                                      17
     ?<Initializer for <Constant "2:Broadcast Send"
                                      17
     ?<Initializer for <Constant "hello">>
                                       6
     ?<Initializer for <Constant "Consecution Tx">>
                                      15
     ?<Initializer for <Constant "Name:">>
                                       6
     ?<Initializer for <Constant "hello word!\n">>
                                      13
     ?<Initializer for <Constant "Short Add:">>
                                      11
     ?<Initializer for <Constant "NO JOIN NODE">>
                                      13
     ?<Initializer for <Constant "3w.c51rf.com">>
                                      13
     ?<Initializer for <Constant "Send Data:">>
                                      11
     ?<Initializer for <Constant "S_Data:">>
                                       8
     ?<Initializer for <Constant "R_Data:">>
                                       8
     ?<Initializer for <Constant "c51rf.com">>
                                      10
     ?<Initializer for <Constant "%d">>
                                       3
     ?<Initializer for <Constant "Short add:">>
                                      11
     ?<Initializer for <Constant "1:Power Check   "
                                      17
     ?<Initializer for <Constant "2:Temp Check    "
                                      17
     ?<Initializer for <Constant "1:Tx Test       "
                                      17
     ?<Initializer for <Constant "2:Rx Test       "
                                      17
     ?<Initializer for TopDisp>        1
     ?<Initializer for Menu_option>    2
     ?<Initializer for __Constant_427f999a>
                                       4
     ?<Initializer for __Constant_42160000>
                                       4
     ?<Constant "3:Pingpong Test ">   17
     ?<Constant "Uart send test">     15
     ?<Constant "Baud rate:">         11
     ?<Constant "%d00">                5
     ?<Constant "Data:hello word!">   17
     ?<Constant "ChengDu WXL Communica...">
                                      46
     ?<Constant "IEEE Add:(Hex)">     15
     ?<Constant "Uart send test\n">   16
     ?<Constant "Baud rate:38400\n">
                                      17
     ?<Constant "Exit\n">              6
     ?<Constant "Uart Rx test">       13
     ?<Constant "Data:">               6
     ?<Constant "Uart RX test\n">     14
     ?<Constant "Uart PP test">       13
     ?<Constant "Uart Pingpong test\n">
                                      20
     ?<Constant "Power value">        12
     ?<Constant "Temp value">         11
     ?<Constant "1:ZigBee Test   ">   17
     ?<Constant "2:Uart Test     ">   17
     ?<Constant "3:Sensor Test   ">   17
     ?<Constant "4:About         ">   17
     ?<Constant "1:Send Test     ">   17
     ?<Constant "2:Network nod   ">   17
     ?<Constant "1:Single Send   ">   17
     ?<Constant "2:Continuous    ">   17
     ?<Constant "1:Short Addr    ">   17
     ?<Constant "2:Broadcast Send">   17
     ?<Constant "hello">               6
     ?<Constant "Consecution Tx">     15
     ?<Constant "Name:">               6
     ?<Constant "hello word!\n">      13
     ?<Constant "Short Add:">         11
     ?<Constant "NO JOIN NODE">       13
     ?<Constant "3w.c51rf.com">       13
     ?<Constant "Send Data:">         11
     ?<Constant "S_Data:">             8
     ?<Constant "R_Data:">             8
     ?<Constant "c51rf.com">          10
     ?<Constant "%d">                  3
     ?<Constant "Short add:">         11
     ?<Constant "1:Power Check   ">   17
     ?<Constant "2:Temp Check    ">   17
     ?<Constant "1:Tx Test       ">   17
     ?<Constant "2:Rx Test       ">   17
     __Constant_427f999a               4
     __Constant_42160000               4
     _A_TCON                           1

 
 4 780 bytes in segment BANKED_CODE
     4 bytes in segment SFR_AN
   631 bytes in segment XDATA_I
   631 bytes in segment XDATA_ID
   261 bytes in segment XDATA_Z
 
 5 403 bytes of CODE  memory (+ 8 bytes shared)
     0 bytes of DATA  memory (+ 4 bytes shared)
   884 bytes of XDATA memory (+ 8 bytes shared)

Errors: none
Warnings: 7
