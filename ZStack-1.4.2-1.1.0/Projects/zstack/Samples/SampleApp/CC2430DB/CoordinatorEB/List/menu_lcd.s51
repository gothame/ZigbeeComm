//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:26:08 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Components\wxl\source\menu /
//                          _lcd.c                                           /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wC /
//                          oord.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS     /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D ZTOOL_P1 -D MT_TASK -D            /
//                          MT_ZDO_FUNC -lC E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\CoordinatorEB\L /
//                          ist\ -lA E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\CoordinatorEB\List\    /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\CoordinatorEB\Obj\ -e        /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Components\wxl\source\menu /
//                          _lcd.c                                           /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\CoordinatorEB\List\menu_lcd.s51 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME menu_lcd

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UL_TO_FLT
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

?Subroutine13 EQU 0
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC Aboat_Driver
        FUNCTION Aboat_Driver,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ClearScreenLcd
        FUNCTION ClearScreenLcd,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC DrawMenu
        FUNCTION DrawMenu,021203H
        ARGFRAME XSTACK, 32, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC FirstItem
        PUBLIC IEEE_menu
        FUNCTION IEEE_menu,021203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC MenuItem
        PUBLIC MenuMenuDisp
        FUNCTION MenuMenuDisp,0a1203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Menu_all
        FUNCTION Menu_all,021203H
        ARGFRAME XSTACK, 32, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Menu_option
        PUBLIC NowItem
        PUBLIC PingpongTxTest
        FUNCTION PingpongTxTest,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ReadBattery
        FUNCTION ReadBattery,0203H
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ReadBattery_menu
        FUNCTION ReadBattery_menu,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Read_Temp
        FUNCTION Read_Temp,0203H
        LOCFRAME XSTACK, 16, STACK
        PUBLIC SelectTxAddr
        FUNCTION SelectTxAddr,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC Send_Broadcast
        FUNCTION Send_Broadcast,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Send_Flag
        PUBLIC Send_Flag_Consecution
        PUBLIC Send_Option
        FUNCTION Send_Option,0a1203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Send_Test
        FUNCTION Send_Test,0a1203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Sensor_Menu
        FUNCTION Sensor_Menu,0a1203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Short_Add
        PUBLIC Short_Addr_number
        PUBLIC Short_menu
        FUNCTION Short_menu,021203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC SingleTxTest
        FUNCTION SingleTxTest,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SrcSaddr
        PUBLIC Temp_menu
        FUNCTION Temp_menu,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Ten_to_16
        FUNCTION Ten_to_16,0203H
        ARGFRAME XSTACK, 34, STACK
        PUBLIC TopDisp
        PUBLIC Uart_Menu
        FUNCTION Uart_Menu,0a1203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Uart_PP_Flag
        PUBLIC Uart_Pingpong
        FUNCTION Uart_Pingpong,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC Uart_RX
        FUNCTION Uart_RX,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC Uart_Rx_Flag
        PUBLIC Uart_Send
        FUNCTION Uart_Send,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC Zigbee_Network
        FUNCTION Zigbee_Network,0a1203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_TCON
        PUBWEAK __Constant_42160000
        PUBWEAK __Constant_427f999a
        PUBLIC disp_ieee
        PUBLIC flag
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN ClearScreen
        FUNCTION ClearScreen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 32, STACK
        EXTERN Print
        FUNCTION Print,0202H
        ARGFRAME XSTACK, 34, STACK
        EXTERN strcpy
        FUNCTION strcpy,010202H
        ARGFRAME XSTACK, 32, STACK
        EXTERN halWait
        FUNCTION halWait,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN SendData
        FUNCTION SendData,0202H
        ARGFRAME XSTACK, 18, STACK
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME XSTACK, 34, STACK
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME XSTACK, 17, STACK
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME XSTACK, 34, STACK
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN Uart_Baud_rate
        FUNCTION Uart_Baud_rate,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN UartTX_Send_String
        FUNCTION UartTX_Send_String,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN JoinNode
        EXTERN RfTx
        EXTERN Send_Data
        EXTERN Sensor_Flag

// E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Components\wxl\source\menu_lcd.c
//    1 #include "app_ex.h"

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DS 1
//    2 #include "hal.h"
//    3 #include "lcd128_64.h"
//    4 #include "string.h"
//    5 #include "Font.h"
//    6 #include "Menu.h"
//    7 #include "hal_key.h"
//    8 #include "OSAL.h"
//    9 #include "ZGlobals.h"
//   10 #include "AF.h"
//   11 #include "aps_groups.h"
//   12 #include "ZDApp.h"
//   13 #include "stdio.h"
//   14 #include "SampleApp.h"
//   15 #include "SampleAppHw.h"
//   16 #include "wxl_uart.h"
//   17 
//   18 #include  "hal_types.h"

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   19 INT8U NowItem = 0;
NowItem:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   20 INT8U FirstItem = 0;
FirstItem:
        DS 1

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "3:Pingpong Test ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "3:Pingpong Test "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Uart send test">`:
        DS 15
        REQUIRE `?<Initializer for <Constant "Uart send test">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Baud rate:">`:
        DS 11
        REQUIRE `?<Initializer for <Constant "Baud rate:">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "%d00">`:
        DS 5
        REQUIRE `?<Initializer for <Constant "%d00">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Data:hello word!">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "Data:hello word!"`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "ChengDu WXL Communica...">`:
        DS 46
        REQUIRE `?<Initializer for <Constant "ChengDu WXL Commu`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "IEEE Add:(Hex)">`:
        DS 15
        REQUIRE `?<Initializer for <Constant "IEEE Add:(Hex)">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Uart send test\\n">`:
        DS 16
        REQUIRE `?<Initializer for <Constant "Uart send test\\n"`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Baud rate:38400\\n">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "Baud rate:38400\\n`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Exit\\n">`:
        DS 6
        REQUIRE `?<Initializer for <Constant "Exit\\n">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Uart Rx test">`:
        DS 13
        REQUIRE `?<Initializer for <Constant "Uart Rx test">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Data:">`:
        DS 6
        REQUIRE `?<Initializer for <Constant "Data:">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Uart RX test\\n">`:
        DS 14
        REQUIRE `?<Initializer for <Constant "Uart RX test\\n">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Uart PP test">`:
        DS 13
        REQUIRE `?<Initializer for <Constant "Uart PP test">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Uart Pingpong test\\n">`:
        DS 20
        REQUIRE `?<Initializer for <Constant "Uart Pingpong tes`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Power value">`:
        DS 12
        REQUIRE `?<Initializer for <Constant "Power value">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Temp value">`:
        DS 11
        REQUIRE `?<Initializer for <Constant "Temp value">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "1:ZigBee Test   ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "1:ZigBee Test   "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "2:Uart Test     ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "2:Uart Test     "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "3:Sensor Test   ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "3:Sensor Test   "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "4:About         ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "4:About         "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "1:Send Test     ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "1:Send Test     "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "2:Network nod   ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "2:Network nod   "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "1:Single Send   ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "1:Single Send   "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "2:Continuous    ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "2:Continuous    "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "1:Short Addr    ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "1:Short Addr    "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "2:Broadcast Send">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "2:Broadcast Send"`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "hello">`:
        DS 6
        REQUIRE `?<Initializer for <Constant "hello">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Consecution Tx">`:
        DS 15
        REQUIRE `?<Initializer for <Constant "Consecution Tx">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Name:">`:
        DS 6
        REQUIRE `?<Initializer for <Constant "Name:">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "hello word!\\n">`:
        DS 13
        REQUIRE `?<Initializer for <Constant "hello word!\\n">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Short Add:">`:
        DS 11
        REQUIRE `?<Initializer for <Constant "Short Add:">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "NO JOIN NODE">`:
        DS 13
        REQUIRE `?<Initializer for <Constant "NO JOIN NODE">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "3w.c51rf.com">`:
        DS 13
        REQUIRE `?<Initializer for <Constant "3w.c51rf.com">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Send Data:">`:
        DS 11
        REQUIRE `?<Initializer for <Constant "Send Data:">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "S_Data:">`:
        DS 8
        REQUIRE `?<Initializer for <Constant "S_Data:">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "R_Data:">`:
        DS 8
        REQUIRE `?<Initializer for <Constant "R_Data:">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "c51rf.com">`:
        DS 10
        REQUIRE `?<Initializer for <Constant "c51rf.com">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "%d">`:
        DS 3
        REQUIRE `?<Initializer for <Constant "%d">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Short add:">`:
        DS 11
        REQUIRE `?<Initializer for <Constant "Short add:">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "1:Power Check   ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "1:Power Check   "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "2:Temp Check    ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "2:Temp Check    "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "1:Tx Test       ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "1:Tx Test       "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "2:Rx Test       ">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "2:Rx Test       "`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   21 INT8U TopDisp = 1;
TopDisp:
        DS 1
        REQUIRE `?<Initializer for TopDisp>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   22 unsigned char MenuItem[13][17];					//²Ëµ¥»º³åÇø
MenuItem:
        DS 221
//   23 extern INT8U ContrastValue;
//   24 
//   25 
//   26 extern struct join
//   27 {
//   28 	uint8 RfdCount;		//RFD¼ÆÊýÆ÷
//   29 	uint8 RouterCount;	//Â·ÓÉÆ÷¼ÆÊýÆ÷
//   30 	uint8 RfdAddr[20][10];	//´æ´¢RFD½ÚµãµØÖ·ÓÃ£¬¸ßÁ½Î»ÎªÍøÂçµØÖ·£¬µÍ8Î»ÎªÎïÀíµØÖ·
//   31 	uint8 RouterAddr[20][10];//´æ´¢RFD½ÚµãµØÖ·ÓÃ£¬¸ßÁ½Î»ÎªÍøÂçµØÖ·£¬µÍ8Î»ÎªÎïÀíµØÖ·
//   32 }JoinNode;
//   33 
//   34 extern union j{
//   35   uint8 TxBuf[29];
//   36   struct RFTXBUF
//   37   {
//   38         uint8 HeadCom[3]; //ÃüÁîÍ·
//   39         uint8 Laddr[8];
//   40         uint16 Saddr;
//   41         uint8 DataBuf[16];  //Êý¾Ý»º³åÇø
//   42   }TXDATA;
//   43 }RfTx;//ÎÞÏß·¢ËÍ»º³åÇø
//   44 
//   45 void Page1Display(INT8U ss, INT8U tt);
//   46 INT8U  DrawMenu(INT8U MenuItem[][17] , INT8U MenuNo,uint8 key);
//   47 void MenuMenuDisp( uint8 keys );
//   48 void Menu_all(uint8 key);
//   49 void Zigbee_Network(INT8U key);
//   50 void Aboat_Driver(uint8 key);
//   51 void IEEE_menu(void);
//   52 void Short_menu(void);
//   53 void Zigbee_Network(INT8U key);
//   54 INT8U Ten_to_16(INT8U Source_Data);
//   55 void Send_Test(INT8U key);
//   56 void Send_Broadcast(uint8 key);
//   57 void Send_Option(uint8 key);
//   58 extern uint8 SendData(uint8 *buf, uint16 addr, uint8 Leng);
//   59 void ClearScreenLcd(void);
//   60 void SelectTxAddr(INT8U key);
//   61 void Uart_Menu(INT8U key);
//   62 void Sensor_Menu(INT8U key);
//   63 void Uart_Send(INT8U key);
//   64 void Uart_RX(INT8U key);
//   65 void Uart_Pingpong(INT8U key);
//   66 uint16 ReadBattery(void);
//   67 uint16 Read_Temp(void);
//   68 void Temp_menu(INT8U key);
//   69 void ReadBattery_menu(INT8U key);
//   70 extern void SingleTxTest(uint8 key);
//   71 void PingpongTxTest(uint8 key);
//   72 extern void ConsecutionTxTest(uint8 key);
//   73 extern void halWait(BYTE wait);
//   74 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   75 INT8U disp_ieee[17],Short_Add[7];
disp_ieee:
        DS 17

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
Short_Add:
        DS 7

        RSEG XDATA_I:XDATA:NOROOT(0)
//   76 int Menu_option = Aboat_Menu_2;
Menu_option:
        DS 2
        REQUIRE `?<Initializer for Menu_option>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_427f999a:
        DS 4
        REQUIRE `?<Initializer for __Constant_427f999a>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_42160000:
        DS 4
        REQUIRE `?<Initializer for __Constant_42160000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   77 int Uart_Rx_Flag = 0;
Uart_Rx_Flag:
        DS 2

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   78 int Uart_PP_Flag = 0;
Uart_PP_Flag:
        DS 2

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   79 int Send_Flag;
Send_Flag:
        DS 2

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   80 int Send_Flag_Consecution = 0;
Send_Flag_Consecution:
        DS 2
//   81 #ifdef ZG_Coord
//   82 INT16U SrcSaddr = 0xffff;//·¢ËÍÊý¾ÝµØÖ·
//   83 #else

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   84 INT16U SrcSaddr = 0x0000;//·¢ËÍÊý¾ÝµØÖ·
SrcSaddr:
        DS 2
//   85 #endif
//   86 
//   87 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   88 void ClearScreenLcd(void)
ClearScreenLcd:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ClearScreenLcd
//   89 {
        FUNCALL ClearScreenLcd, ClearScreen
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   90   ClearScreen();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        CFI EndBlock cfiBlock0
//   91 #ifdef	ZG_Coord
//   92   Print(0,4,"-----COORD-----",1);
//   93 #endif	
//   94 #ifdef	ZG_Router
//   95   Print(0,0,"-----ROUTER-----",1);
//   96 #endif
//   97 #ifdef	ZG_ENDDEVICE
//   98   Print(0,4,"---ENDDEVICE----",1);
//   99 #endif
//  100 }
        REQUIRE ?Subroutine25
        ; // Fall through to label ?Subroutine25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock1
//  101 //*********************************************************************************
//  102 //º¯ÊýÃû:INT8U  DrawMenu(INT8U MenuItem[][16] , INT8U MenuNo)
//  103 //¹¦ÄÜ:²Ëµ¥ÏÔÊ¾
//  104 //ÊäÈë£ºÎÞ
//  105 //Êä³ö£ºÎÞ
//  106 //*********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  107 INT8U  DrawMenu(INT8U MenuItem[][17] , INT8U MenuNo,uint8 key)
DrawMenu:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function DrawMenu
//  108 {
        FUNCALL DrawMenu, ClearScreen
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL DrawMenu, Print
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL DrawMenu, Print
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL DrawMenu, Print
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL DrawMenu, Print
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	?V0 + 0,R1
        MOV	A,R4
        MOV	R7,A
//  109 	INT8U ii;
//  110         INT8U sel;
//  111 	ClearScreenLcd();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  112         if(HAL_KEY_UP == key)
        MOV	A,#0x1
        XRL	A,R7
        JNZ	??DrawMenu_0
//  113 	{
//  114 		if(NowItem > 0) NowItem -= 1;
        MOV	DPTR,#NowItem
        MOVX	A,@DPTR
        JZ	??DrawMenu_1
??DrawMenu_2:
        DEC	A
        MOVX	@DPTR,A
        SJMP	??DrawMenu_3
//  115 		else if(FirstItem > 0) FirstItem -= 1;
??DrawMenu_1:
        MOV	DPTR,#FirstItem
        MOVX	A,@DPTR
        JZ	??DrawMenu_3
        SJMP	??DrawMenu_2
//  116 	}
//  117 	if(HAL_KEY_DOWN == key)
??DrawMenu_0:
        MOV	A,#0x10
        XRL	A,R7
        JNZ	??DrawMenu_4
//  118 	{
//  119 		if(MenuNo > 2)
        MOV	A,?V0 + 0
        CLR	C
        SUBB	A,#0x3
        MOV	DPTR,#NowItem
        MOVX	A,@DPTR
        JC	??DrawMenu_5
//  120 		{
//  121 			if(NowItem < 2) 	NowItem += 1;
        CLR	C
        SUBB	A,#0x2
        JNC	??DrawMenu_6
??DrawMenu_7:
        MOVX	A,@DPTR
        INC	A
        MOVX	@DPTR,A
        SJMP	??DrawMenu_8
//  122 			else if((FirstItem + 3) < MenuNo) 	FirstItem += 1;
??DrawMenu_6:
        MOV	DPTR,#FirstItem
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	A,#0x3
        ADD	A,R0
        INC	R0
        INC	R0
        INC	R0
        CLR	A
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R0
        SUBB	A,?V0 + 0
        MOV	A,R1
        SUBB	A,#0x0
        CLR	C
        XRL	A,PSW
        RLC	A
        JNC	??DrawMenu_8
        SJMP	??DrawMenu_7
//  123 		}
//  124 		else
//  125 		{
//  126 			if(NowItem < 1) 	NowItem += 1;	
??DrawMenu_5:
        JNZ	??DrawMenu_9
        MOV	A,#0x1
        MOVX	@DPTR,A
//  127 		}
//  128 	}
//  129 	if(HAL_KEY_ENTER == key)
//  130 	{
//  131 		sel = FirstItem + NowItem;
//  132 		
//  133 	}
//  134 	if(HAL_KEY_CANCEL == key)
//  135 	{
//  136 		sel = 0xff;
//  137 	}
//  138 		if(MenuNo > 2)
//  139 		{
//  140 			for(ii = 0 ; ii < 3 ; ii++)
//  141 			{
//  142 				if(NowItem != ii)
//  143 				{				
//  144 					Print((ii*2+2),0,MenuItem[FirstItem + ii],1);
//  145 				}
//  146 				else
//  147 				{	
//  148 					Print((ii*2+2),0,MenuItem[FirstItem + ii],0);				
//  149 				}
//  150 			}
//  151 		}
//  152 		else
//  153 		{
//  154 			for(ii = 0 ; ii < MenuNo ; ii++)
??DrawMenu_9:
        MOV	R7,#0x0
        SJMP	??DrawMenu_10
??DrawMenu_4:
        MOV	A,#0x20
        XRL	A,R7
        JNZ	??DrawMenu_11
        MOV	DPTR,#NowItem
        MOVX	A,@DPTR
        MOV	DPTR,#FirstItem
        MOV	R2,A
        MOVX	A,@DPTR
        ADD	A,R2
        MOV	R6,A
        SJMP	??DrawMenu_3
??DrawMenu_11:
        MOV	A,#0x4
        XRL	A,R7
        JNZ	??DrawMenu_3
        MOV	R6,#-0x1
??DrawMenu_3:
        MOV	A,?V0 + 0
        CLR	C
        SUBB	A,#0x3
        JC	??DrawMenu_9
??DrawMenu_8:
        MOV	R7,#0x0
        SJMP	??DrawMenu_12
??DrawMenu_13:
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x0
??DrawMenu_14:
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	DPTR,#FirstItem
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	?V0 + 0,R7
        MOV	A,?V0 + 0
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        INC	R7
        MOV	A,R7
        CLR	C
        SUBB	A,#0x3
        JNC	??DrawMenu_15
??DrawMenu_12:
        MOV	DPTR,#NowItem
        MOVX	A,@DPTR
        XRL	A,R7
        JZ	??DrawMenu_13
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        SJMP	??DrawMenu_14
//  155 			{
//  156 				if(NowItem != ii)
//  157 				{				
//  158 					Print((ii*2+2),0,MenuItem[FirstItem + ii],1);
//  159 				}
//  160 				else
//  161 				{	
//  162 					Print((ii*2+2),0,MenuItem[FirstItem + ii],0);				
??DrawMenu_16:
        ; Setup parameters for call to function Print
        MOV	?V0 + 2,#0x0
??DrawMenu_17:
        MOV	?V0 + 3,#0x0
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	DPTR,#FirstItem
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	?V0 + 2,R7
        MOV	A,?V0 + 2
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  163 				}
        INC	R7
??DrawMenu_10:
        MOV	A,R7
        CLR	C
        SUBB	A,?V0 + 0
        JNC	??DrawMenu_15
        MOV	DPTR,#NowItem
        MOVX	A,@DPTR
        XRL	A,R7
        JZ	??DrawMenu_16
        ; Setup parameters for call to function Print
        MOV	?V0 + 2,#0x1
        SJMP	??DrawMenu_17
//  164 			}
//  165 		}
//  166 		
//  167         return sel;
??DrawMenu_15:
        MOV	A,R6
        MOV	R1,A
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  168 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        ADD	A,R0
        MOV	R0,A
        CLR	A
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R0
        MOV	B,#0x11
        MUL	AB
        MOV	R0,A
        MOV	R2,B
        MOV	B,#0x11
        MOV	A,R1
        MUL	AB
        ADD	A,R2
        MOV	R1,A
        MOV	A,?V0 + 4
        ADD	A,R0
        MOV	R4,A
        MOV	A,?V0 + 5
        ADDC	A,R1
        MOV	R5,A
        MOV	R2,#0x0
        MOV	A,R7
        CLR	C
        RLC	A
        ADD	A,#0x2
        MOV	R1,A
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  169 //*********************************************************************************
//  170 //º¯ÊýÃû:void MenuMenuDisp( void )
//  171 //¹¦ÄÜ:Ö÷²Ëµ¥ÏÔÊ¾
//  172 //ÊäÈë£ºÎÞ
//  173 //Êä³ö£ºÎÞ
//  174 //*********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  175 void MenuMenuDisp( uint8 key )
MenuMenuDisp:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function MenuMenuDisp
//  176 {
        FUNCALL MenuMenuDisp, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL MenuMenuDisp, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL MenuMenuDisp, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL MenuMenuDisp, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL MenuMenuDisp, DrawMenu
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL MenuMenuDisp, halWait
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL MenuMenuDisp, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  177     INT8U sel;
//  178     strcpy((char*)MenuItem[0] ,"1:ZigBee Test   ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "1:ZigBee Test   ">` & 0xff)
        MOV	R5,#((`?<Constant "1:ZigBee Test   ">` >> 8) & 0xff)
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(strcpy & 0xffff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  179     strcpy((char*)MenuItem[1] ,"2:Uart Test     ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "2:Uart Test     ">` & 0xff)
        MOV	R5,#((`?<Constant "2:Uart Test     ">` >> 8) & 0xff)
        MOV	R2,#((MenuItem + 17) & 0xff)
        MOV	R3,#(((MenuItem + 17) >> 8) & 0xff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  180 #ifndef ZG_Coord
//  181     strcpy((char*)MenuItem[2] ,"3:Sensor Test   ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "3:Sensor Test   ">` & 0xff)
        MOV	R5,#((`?<Constant "3:Sensor Test   ">` >> 8) & 0xff)
        MOV	R2,#((MenuItem + 34) & 0xff)
        MOV	R3,#(((MenuItem + 34) >> 8) & 0xff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  182     strcpy((char*)MenuItem[3] ,"4:About         ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "4:About         ">` & 0xff)
        MOV	R5,#((`?<Constant "4:About         ">` >> 8) & 0xff)
        MOV	R2,#((MenuItem + 51) & 0xff)
        MOV	R3,#(((MenuItem + 51) >> 8) & 0xff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  183     sel = DrawMenu(MenuItem , 4,key);
        ; Setup parameters for call to function DrawMenu
        MOV	A,R6
        MOV	R4,A
        MOV	R1,#0x4
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(DrawMenu & 0xffff)
        MOV	A,#((DrawMenu >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R6,A
//  184 #else
//  185     strcpy((char*)MenuItem[2] ,"3:About         ");
//  186     sel = DrawMenu(MenuItem , 3,key);
//  187 #endif
//  188 
//  189 
//  190     halWait(5);
        ; Setup parameters for call to function halWait
        MOV	R1,#0x5
        MOV	DPTR,#(halWait & 0xffff)
        MOV	A,#((halWait >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  191     switch(sel)
        MOV	A,R6
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for MenuMenuDisp>_0`:
        DB        255
        DB        4
        DW        ??MenuMenuDisp_0
        DW        ??MenuMenuDisp_1
        DW        ??MenuMenuDisp_2
        DW        ??MenuMenuDisp_3
        DW        ??MenuMenuDisp_4
        DW        ??MenuMenuDisp_5
//  192     {
//  193       case 0:
//  194       {
//  195         Menu_option = Zigbee_Menu_2;
??MenuMenuDisp_2:
        MOV	DPTR,#Menu_option
        MOV	A,#0x1
        SJMP	??MenuMenuDisp_6
//  196         Menu_all(0);
//  197         //Zigbee_Network(key);
//  198       }break;
//  199       case 1:
//  200       {
//  201         Menu_option = Uart_Menu_2;
??MenuMenuDisp_3:
        MOV	DPTR,#Menu_option
        MOV	A,#0x2
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  202         FirstItem = 0;
        MOV	DPTR,#FirstItem
??MenuMenuDisp_7:
        LCALL	?Subroutine28 & 0xFFFF
//  203         NowItem = 0;
??CrossCallReturnLabel_69:
        SJMP	??MenuMenuDisp_8
//  204         Menu_all(0);
//  205 			//stop_watch_main();
//  206       }break;
//  207 #ifndef ZG_Coord
//  208       case 2:
//  209       {
//  210 
//  211 	Menu_option = Sensor_Menu_2;
??MenuMenuDisp_4:
        MOV	DPTR,#Menu_option
        MOV	A,#0x3
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        SJMP	??MenuMenuDisp_7
//  212 
//  213         NowItem = 0;
//  214         Menu_all(0);
//  215       }break;
//  216       case 3:
//  217       {
//  218 	Menu_option = Aboat_Menu_2;
??MenuMenuDisp_5:
        MOV	DPTR,#Menu_option
        MOV	A,#0x6
??MenuMenuDisp_6:
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
??MenuMenuDisp_8:
        MOVX	@DPTR,A
//  219         Menu_all(0);			//clockmodes_main();
//  220       }break;
//  221 #else
//  222       case 2:
//  223       {
//  224 	Menu_option = Aboat_Menu_2;
//  225         Menu_all(0);			//clockmodes_main();
//  226       }break;
//  227 #endif
//  228       case 0xFF:
//  229       {
//  230         Menu_all(0);
??MenuMenuDisp_1:
        ; Setup parameters for call to function Menu_all
        MOV	R1,#0x0
        MOV	DPTR,#(Menu_all & 0xffff)
        MOV	A,#((Menu_all >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  231       }break;
//  232       default:
//  233       break;
//  234     }
//  235 }
??MenuMenuDisp_0:
        LJMP	?Subroutine30 & 0xFFFF
        CFI EndBlock cfiBlock6
//  236 
//  237 //*********************************************************************************
//  238 //º¯ÊýÃû:void Menu_all(uint8 key)
//  239 //¹¦ÄÜ:²Ëµ¥Ñ¡Ôñ
//  240 //ÊäÈë£ºÎÞ
//  241 //Êä³ö£ºÎÞ
//  242 //*********************************************************************************
//  243 
//  244 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  245 void Menu_all(uint8 key)
Menu_all:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function Menu_all
//  246 {
        FUNCALL Menu_all, MenuMenuDisp
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Zigbee_Network
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Aboat_Driver
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Send_Option
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Send_Test
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Send_Broadcast
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, PingpongTxTest
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, SelectTxAddr
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, SingleTxTest
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Uart_Menu
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Uart_Send
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Uart_RX
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Uart_Pingpong
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, ReadBattery_menu
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Sensor_Menu
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL Menu_all, Temp_menu
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  247   if(Menu_option == Main_Menu_1)
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        JNZ	??Menu_all_0
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_0:
        JNZ	??Menu_all_1
//  248   {
//  249     MenuMenuDisp(key);
        ; Setup parameters for call to function MenuMenuDisp
        MOV	DPTR,#(MenuMenuDisp & 0xffff)
        MOV	A,#((MenuMenuDisp >> 16) & 0xff)
        LJMP	??Menu_all_2 & 0xFFFF
//  250   }
//  251   else if(Menu_option == Zigbee_Menu_2)
??Menu_all_1:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??Menu_all_3
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_3:
        JNZ	??Menu_all_4
//  252   {
//  253     Zigbee_Network(key);
        ; Setup parameters for call to function Zigbee_Network
        MOV	DPTR,#(Zigbee_Network & 0xffff)
        MOV	A,#((Zigbee_Network >> 16) & 0xff)
        LJMP	??Menu_all_2 & 0xFFFF
//  254   }
//  255   else if(Menu_option == Aboat_Menu_2)
??Menu_all_4:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x6
        JNZ	??Menu_all_5
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_5:
        JNZ	??Menu_all_6
//  256   {
//  257     Aboat_Driver(key);
        ; Setup parameters for call to function Aboat_Driver
        MOV	DPTR,#(Aboat_Driver & 0xffff)
        MOV	A,#((Aboat_Driver >> 16) & 0xff)
        LJMP	??Menu_all_2 & 0xFFFF
//  258   }
//  259   else if(Menu_option == Send_Menu_3)
??Menu_all_6:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x7
        JNZ	??Menu_all_7
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_7:
        JNZ	??Menu_all_8
//  260   {
//  261     Send_Option(key);
        ; Setup parameters for call to function Send_Option
        MOV	DPTR,#(Send_Option & 0xffff)
        MOV	A,#((Send_Option >> 16) & 0xff)
        LJMP	??Menu_all_2 & 0xFFFF
//  262   }
//  263   else if((Menu_option == Single_Send_Menu_4)||(Menu_option == Continuous_Send_Menu_4))
??Menu_all_8:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x8
        JNZ	??Menu_all_9
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_9:
        JZ	??Menu_all_10
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x9
        JNZ	??Menu_all_11
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_11:
        JNZ	??Menu_all_12
//  264   {
//  265     Send_Test(key);
??Menu_all_10:
        ; Setup parameters for call to function Send_Test
        MOV	DPTR,#(Send_Test & 0xffff)
        MOV	A,#((Send_Test >> 16) & 0xff)
        LJMP	??Menu_all_2 & 0xFFFF
//  266   }
//  267   else if(Menu_option == Send_Broadcast_Menu_5)
??Menu_all_12:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0xa
        JNZ	??Menu_all_13
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_13:
        JNZ	??Menu_all_14
//  268   {
//  269     Send_Broadcast(key);
        ; Setup parameters for call to function Send_Broadcast
        MOV	DPTR,#(Send_Broadcast & 0xffff)
        MOV	A,#((Send_Broadcast >> 16) & 0xff)
        LJMP	??Menu_all_2 & 0xFFFF
//  270   }
//  271   else if(Menu_option == Pingpong_Test_Menu_5)
??Menu_all_14:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x11
        JNZ	??Menu_all_15
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_15:
        JNZ	??Menu_all_16
//  272   {
//  273     PingpongTxTest(key);
        ; Setup parameters for call to function PingpongTxTest
        MOV	DPTR,#(PingpongTxTest & 0xffff)
        MOV	A,#((PingpongTxTest >> 16) & 0xff)
        LJMP	??Menu_all_2 & 0xFFFF
//  274   }
//  275   else if(Menu_option == Nod_Menu_3)
??Menu_all_16:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0xb
        JNZ	??Menu_all_17
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_17:
        JNZ	??Menu_all_18
//  276   {
//  277     SelectTxAddr(key);
        ; Setup parameters for call to function SelectTxAddr
        MOV	DPTR,#(SelectTxAddr & 0xffff)
        MOV	A,#((SelectTxAddr >> 16) & 0xff)
        LJMP	??Menu_all_2 & 0xFFFF
//  278   }
//  279   else if(Menu_option == Send_Short_Addr_Menu_5)
??Menu_all_18:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0xd
        JNZ	??Menu_all_19
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_19:
        JNZ	??Menu_all_20
//  280   {
//  281     SingleTxTest(key);
        ; Setup parameters for call to function SingleTxTest
        MOV	DPTR,#(SingleTxTest & 0xffff)
        MOV	A,#((SingleTxTest >> 16) & 0xff)
        LJMP	??Menu_all_2 & 0xFFFF
//  282   }
//  283   else if(Menu_option == Uart_Menu_2)
??Menu_all_20:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x2
        JNZ	??Menu_all_21
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_21:
        JNZ	??Menu_all_22
//  284   {
//  285     Uart_Menu(key);
        ; Setup parameters for call to function Uart_Menu
        MOV	DPTR,#(Uart_Menu & 0xffff)
        MOV	A,#((Uart_Menu >> 16) & 0xff)
        SJMP	??Menu_all_2
//  286   }
//  287   else if(Menu_option == Uart_TX_Menu_3)
??Menu_all_22:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0xe
        JNZ	??Menu_all_23
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_23:
        JNZ	??Menu_all_24
//  288   {
//  289     Uart_Send(key);
        ; Setup parameters for call to function Uart_Send
        MOV	DPTR,#(Uart_Send & 0xffff)
        MOV	A,#((Uart_Send >> 16) & 0xff)
        SJMP	??Menu_all_2
//  290   }
//  291   else if(Menu_option == Uart_RX_Menu_3)
??Menu_all_24:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0xf
        JNZ	??Menu_all_25
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_25:
        JNZ	??Menu_all_26
//  292   {
//  293     Uart_RX(key);
        ; Setup parameters for call to function Uart_RX
        MOV	DPTR,#(Uart_RX & 0xffff)
        MOV	A,#((Uart_RX >> 16) & 0xff)
        SJMP	??Menu_all_2
//  294   }
//  295   else if(Menu_option == Uart_PP_Menu_3)
??Menu_all_26:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x10
        JNZ	??Menu_all_27
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_27:
        JNZ	??Menu_all_28
//  296   {
//  297     Uart_Pingpong(key);
        ; Setup parameters for call to function Uart_Pingpong
        MOV	DPTR,#(Uart_Pingpong & 0xffff)
        MOV	A,#((Uart_Pingpong >> 16) & 0xff)
        SJMP	??Menu_all_2
//  298   }
//  299 #ifndef ZG_Coord
//  300   else if(Menu_option == Sensor_ReadBattery_Menu_3)
??Menu_all_28:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x12
        JNZ	??Menu_all_29
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_29:
        JNZ	??Menu_all_30
//  301   {
//  302     ReadBattery_menu(key);
        ; Setup parameters for call to function ReadBattery_menu
        MOV	DPTR,#(ReadBattery_menu & 0xffff)
        MOV	A,#((ReadBattery_menu >> 16) & 0xff)
        SJMP	??Menu_all_2
//  303   }
//  304   else if(Menu_option == Sensor_Menu_2)
??Menu_all_30:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x3
        JNZ	??Menu_all_31
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_31:
        JNZ	??Menu_all_32
//  305   {
//  306     Sensor_Menu(key);
        ; Setup parameters for call to function Sensor_Menu
        MOV	DPTR,#(Sensor_Menu & 0xffff)
        MOV	A,#((Sensor_Menu >> 16) & 0xff)
        SJMP	??Menu_all_2
//  307   }
//  308   else if(Menu_option == Sensor_Temp_Menu_3)
??Menu_all_32:
        MOV	DPTR,#Menu_option
        MOVX	A,@DPTR
        XRL	A,#0x13
        JNZ	??Menu_all_33
        INC	DPTR
        MOVX	A,@DPTR
??Menu_all_33:
        JNZ	??Menu_all_34
//  309   {
//  310     Temp_menu(key);
        ; Setup parameters for call to function Temp_menu
        MOV	DPTR,#(Temp_menu & 0xffff)
        MOV	A,#((Temp_menu >> 16) & 0xff)
??Menu_all_2:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  311   }
//  312 #endif
//  313 }
??Menu_all_34:
        LJMP	?Subroutine25 & 0xFFFF
        CFI EndBlock cfiBlock7
//  314 //*********************************************************************************
//  315 //º¯ÊýÃû:void Zigbee_Network(INT8U key)
//  316 //¹¦ÄÜ:ZIGBEE²Ëµ¥
//  317 //ÊäÈë£ºÎÞ
//  318 //Êä³ö£ºÎÞ
//  319 //*********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  320 void Zigbee_Network(INT8U key)
Zigbee_Network:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function Zigbee_Network
//  321 {
        FUNCALL Zigbee_Network, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Zigbee_Network, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Zigbee_Network, DrawMenu
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Zigbee_Network, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Zigbee_Network, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Zigbee_Network, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  322   INT8U sel;
//  323    strcpy((char*)MenuItem[0] ,"1:Send Test     ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "1:Send Test     ">` & 0xff)
        MOV	R5,#((`?<Constant "1:Send Test     ">` >> 8) & 0xff)
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(strcpy & 0xffff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  324     strcpy((char*)MenuItem[1] ,"2:Network nod   ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "2:Network nod   ">` & 0xff)
        MOV	R5,#((`?<Constant "2:Network nod   ">` >> 8) & 0xff)
        MOV	R2,#((MenuItem + 17) & 0xff)
        MOV	R3,#(((MenuItem + 17) >> 8) & 0xff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  325     sel = DrawMenu(MenuItem ,2,key);
//  326       switch(sel)
        ; Setup parameters for call to function DrawMenu
        MOV	A,R6
        MOV	R4,A
        MOV	R1,#0x2
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(DrawMenu & 0xffff)
        MOV	A,#((DrawMenu >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for Zigbee_Network>_0`:
        DB        255
        DB        2
        DW        ??Zigbee_Network_0
        DW        ??Zigbee_Network_1
        DW        ??Zigbee_Network_2
        DW        ??Zigbee_Network_3
//  327       {
//  328         case 0:
//  329           Menu_option = Send_Menu_3;
??Zigbee_Network_2:
        MOV	DPTR,#Menu_option
        MOV	A,#0x7
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        SJMP	??CrossCallReturnLabel_70
//  330           Menu_all(0);
//  331           //SelectTxAddr(key);//Ñ¡ÔñµØÖ·
//  332         break;
//  333         case 1:
//  334           Menu_option = Nod_Menu_3;
??Zigbee_Network_3:
        MOV	DPTR,#Menu_option
        MOV	A,#0xb
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        SJMP	??CrossCallReturnLabel_23
//  335 
//  336           NowItem = 0;
//  337           Menu_all(0);
//  338         break;
//  339         case 0xff:
//  340           Menu_option = Main_Menu_1;
??Zigbee_Network_1:
        LCALL	?Subroutine11 & 0xFFFF
//  341           FirstItem = 0;
??CrossCallReturnLabel_23:
        LCALL	?Subroutine28 & 0xFFFF
//  342           NowItem = 0;
??CrossCallReturnLabel_70:
        LCALL	?Subroutine27 & 0xFFFF
//  343           Menu_all(0);
??CrossCallReturnLabel_62:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  344           break;
//  345       }
//  346 }
??Zigbee_Network_0:
        LJMP	?Subroutine30 & 0xFFFF
        CFI EndBlock cfiBlock8
//  347 //*********************************************************************************
//  348 //º¯ÊýÃû:void Send_Option(uint8 key)
//  349 //¹¦ÄÜ:·¢ËÍ²Ëµ¥Ñ¡Ïî
//  350 //ÊäÈë£ºÎÞ
//  351 //Êä³ö£ºÎÞ
//  352 //*********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  353 void Send_Option(uint8 key)
Send_Option:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function Send_Option
//  354 {
        FUNCALL Send_Option, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Option, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Option, DrawMenu
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Option, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Option, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Option, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  355   INT8U sel;
//  356   strcpy((char*)MenuItem[0] ,"1:Single Send   ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "1:Single Send   ">` & 0xff)
        MOV	R5,#((`?<Constant "1:Single Send   ">` >> 8) & 0xff)
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(strcpy & 0xffff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  357   strcpy((char*)MenuItem[1] ,"2:Continuous    ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "2:Continuous    ">` & 0xff)
        MOV	R5,#((`?<Constant "2:Continuous    ">` >> 8) & 0xff)
        MOV	R2,#((MenuItem + 17) & 0xff)
        MOV	R3,#(((MenuItem + 17) >> 8) & 0xff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  358   sel = DrawMenu(MenuItem ,2,key);
//  359   switch(sel)
        ; Setup parameters for call to function DrawMenu
        MOV	A,R6
        MOV	R4,A
        MOV	R1,#0x2
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(DrawMenu & 0xffff)
        MOV	A,#((DrawMenu >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for Send_Option>_0`:
        DB        255
        DB        2
        DW        ??Send_Option_0
        DW        ??Send_Option_1
        DW        ??Send_Option_2
        DW        ??Send_Option_3
//  360   {
//  361     case 0:
//  362       Send_Flag = Send_Flag_Single;
??Send_Option_2:
        MOV	DPTR,#Send_Flag
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        LCALL	?Subroutine28 & 0xFFFF
//  363       NowItem = 0;
??CrossCallReturnLabel_71:
        LCALL	?Subroutine29 & 0xFFFF
//  364       Menu_option = Single_Send_Menu_4;
??CrossCallReturnLabel_77:
        MOV	A,#0x8
??Send_Option_4:
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        SJMP	??CrossCallReturnLabel_7
//  365       Menu_all(0);
//  366      break;
//  367     case 1:
//  368       Send_Flag = Send_Flag_Continuous;
??Send_Option_3:
        MOV	DPTR,#Send_Flag
        MOV	A,#0x1
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        LCALL	?Subroutine28 & 0xFFFF
//  369       NowItem = 0;
??CrossCallReturnLabel_72:
        LCALL	?Subroutine29 & 0xFFFF
//  370       Menu_option = Continuous_Send_Menu_4;
??CrossCallReturnLabel_78:
        MOV	A,#0x9
        SJMP	??Send_Option_4
//  371       Menu_all(0);
//  372     break;
//  373     case 0xff:
//  374       Menu_option = Zigbee_Menu_2;
??Send_Option_1:
        MOV	DPTR,#Menu_option
        MOV	A,#0x1
        LCALL	?Subroutine5 & 0xFFFF
//  375       FirstItem = 0;
//  376       NowItem = 0;
??CrossCallReturnLabel_7:
        LCALL	?Subroutine27 & 0xFFFF
//  377       Menu_all(0);
??CrossCallReturnLabel_63:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  378     break;
//  379   }
//  380 }
??Send_Option_0:
        SJMP	?Subroutine30
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_7
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_51
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_9
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_8
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_10
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_54
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_57
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_55
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_53
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_56
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_52
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOVX	@DPTR,A
        MOV	DPTR,#NowItem
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
//  381 //*********************************************************************************
//  382 //º¯ÊýÃû:void Send_Test(INT8U key)
//  383 //¹¦ÄÜ:·¢ËÍ²âÊÔ²Ëµ¥
//  384 //ÊäÈë£ºÎÞ
//  385 //Êä³ö£ºÎÞ
//  386 //*********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  387 void Send_Test(INT8U key)
Send_Test:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function Send_Test
//  388 {
        FUNCALL Send_Test, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Test, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Test, DrawMenu
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Test, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Test, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Test, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Send_Test, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  389   INT8U sel;
//  390    strcpy((char*)MenuItem[0] ,"1:Short Addr    ");                 //¶ÌµØÖ·£¨ÍøÂçµØÖ·£©·¢ËÍ
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "1:Short Addr    ">` & 0xff)
        MOV	R5,#((`?<Constant "1:Short Addr    ">` >> 8) & 0xff)
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(strcpy & 0xffff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  391    strcpy((char*)MenuItem[1] ,"2:Broadcast Send");                 //¹ã²¥·¢ËÍ
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "2:Broadcast Send">` & 0xff)
        MOV	R5,#((`?<Constant "2:Broadcast Send">` >> 8) & 0xff)
        MOV	R2,#((MenuItem + 17) & 0xff)
        MOV	R3,#(((MenuItem + 17) >> 8) & 0xff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  392 #ifdef ZG_Coord
//  393    strcpy((char*)MenuItem[2] ,"3:PingPong  Send");                 //Æ¹ÅÒ²âÊÔ
//  394    sel = DrawMenu(MenuItem ,3,key);
//  395 #else
//  396    sel = DrawMenu(MenuItem ,2,key);
//  397 #endif
//  398       switch(sel)
        ; Setup parameters for call to function DrawMenu
        MOV	A,R6
        MOV	R4,A
        MOV	R1,#0x2
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(DrawMenu & 0xffff)
        MOV	A,#((DrawMenu >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for Send_Test>_0`:
        DB        255
        DB        3
        DW        ??Send_Test_0
        DW        ??Send_Test_1
        DW        ??Send_Test_2
        DW        ??Send_Test_3
        DW        ??Send_Test_4
//  399       {
//  400         case 0:
//  401           Menu_option = Send_Short_Addr_Menu_5;
??Send_Test_2:
        MOV	DPTR,#Menu_option
        MOV	A,#0xd
??Send_Test_5:
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        SJMP	??CrossCallReturnLabel_8
//  402           Menu_all(0);
//  403         break;
//  404         case 1:
//  405           Menu_option = Send_Broadcast_Menu_5;
??Send_Test_3:
        MOV	DPTR,#Menu_option
        MOV	A,#0xa
        SJMP	??Send_Test_5
//  406           Menu_all(0);
//  407         break;
//  408         case 2:
//  409           Menu_option = Pingpong_Test_Menu_5;
??Send_Test_4:
        MOV	DPTR,#Menu_option
        MOV	A,#0x11
        SJMP	??Send_Test_5
//  410           Menu_all(0);
//  411         break;
//  412         case 0xff:
//  413           Menu_option = Send_Menu_3;
??Send_Test_1:
        MOV	DPTR,#Menu_option
        MOV	A,#0x7
        LCALL	?Subroutine5 & 0xFFFF
//  414           FirstItem = 0;
//  415           NowItem = 0;
??CrossCallReturnLabel_8:
        LCALL	?Subroutine27 & 0xFFFF
//  416           Menu_all(0);
??CrossCallReturnLabel_64:
        LCALL	?BCALL               ; Banked call to: DPTR()
        CFI EndBlock cfiBlock28
//  417           break;
//  418       }
//  419 }
??Send_Test_0:
        REQUIRE ?Subroutine30
        ; // Fall through to label ?Subroutine30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_67:
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_51
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_7
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_9
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_10
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_54
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_57
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_55
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_53
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_56
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_52
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOVX	@DPTR,A
        MOV	DPTR,#FirstItem
        LJMP	?Subroutine28 & 0xFFFF
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46
//  420 //*********************************************************************************
//  421 //º¯ÊýÃû:void Send_Broadcast(uint8 key)
//  422 //¹¦ÄÜ:¹ã²¥·½Ê½·¢ËÍ
//  423 //ÊäÈë£ºÎÞ
//  424 //Êä³ö£ºÎÞ
//  425 //*********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  426 void Send_Broadcast(uint8 key)
Send_Broadcast:
        CFI Block cfiBlock47 Using cfiCommon0
        CFI Function Send_Broadcast
//  427 {
        FUNCALL Send_Broadcast, SendData
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL Send_Broadcast, ClearScreen
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL Send_Broadcast, Print
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL Send_Broadcast, Menu_all
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  428   if(Send_Flag == Send_Flag_Single)
        MOV	DPTR,#Send_Flag
        MOVX	A,@DPTR
        JNZ	??Send_Broadcast_0
        INC	DPTR
        MOVX	A,@DPTR
??Send_Broadcast_0:
        JNZ	??Send_Broadcast_1
//  429   {
//  430     SendData("hello", Send_Mode_Broadcast, 5);
        ; Setup parameters for call to function SendData
        MOV	R1,#0x5
        MOV	R4,#-0x1
        MOV	R5,#-0x1
        MOV	R2,#(`?<Constant "hello">` & 0xff)
        MOV	R3,#((`?<Constant "hello">` >> 8) & 0xff)
        MOV	DPTR,#(SendData & 0xffff)
        MOV	A,#((SendData >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  431     Menu_option = Single_Send_Menu_4;
        MOV	DPTR,#Menu_option
        MOV	A,#0x8
        LCALL	?Subroutine5 & 0xFFFF
//  432     FirstItem = 0;
//  433     NowItem = 0;
??CrossCallReturnLabel_9:
        SJMP	??Send_Broadcast_2
//  434 
//  435   }
//  436   else if(Send_Flag == Send_Flag_Continuous)
??Send_Broadcast_1:
        MOV	DPTR,#Send_Flag
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??Send_Broadcast_3
        INC	DPTR
        MOVX	A,@DPTR
??Send_Broadcast_3:
        JNZ	??Send_Broadcast_4
//  437   {
//  438     ClearScreenLcd();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  439     //Rectangle(0,2,127,7);
//  440     Print(3,3,"Consecution Tx",1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#(`?<Constant "Consecution Tx">` & 0xff)
        MOV	R5,#((`?<Constant "Consecution Tx">` >> 8) & 0xff)
        MOV	R2,#0x3
        MOV	R1,#0x3
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  441     Send_Flag_Consecution = Broadcast_Continuous;
        MOV	DPTR,#Send_Flag_Consecution
        MOV	A,#0xa
        LCALL	?Subroutine5 & 0xFFFF
//  442     FirstItem = 0;
//  443     NowItem = 0;
??CrossCallReturnLabel_10:
        LCALL	?Subroutine29 & 0xFFFF
//  444     Menu_option = Send_Broadcast_Menu_5;
??CrossCallReturnLabel_79:
        MOV	A,#0xa
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
??Send_Broadcast_2:
        MOVX	@DPTR,A
//  445   }
//  446   if(key == HAL_KEY_CANCEL)
??Send_Broadcast_4:
        MOV	A,#0x4
        XRL	A,R6
        JNZ	??Send_Broadcast_5
//  447   {
//  448     Menu_option = Single_Send_Menu_4;
        MOV	DPTR,#Menu_option
        MOV	A,#0x8
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  449     Send_Flag_Consecution = 0;
        MOV	DPTR,#Send_Flag_Consecution
        MOVX	@DPTR,A
        INC	DPTR
        LCALL	??Subroutine2_2 & 0xFFFF
//  450     FirstItem = 0;
//  451     NowItem = 0;
//  452     Menu_all(0);
??CrossCallReturnLabel_56:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  453   }
//  454 }
??Send_Broadcast_5:
        LJMP	??Subroutine31_1 & 0xFFFF
        CFI EndBlock cfiBlock47
//  455 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  456 void Aboat_Driver(uint8 key)
Aboat_Driver:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI Function Aboat_Driver
//  457 {
        FUNCALL Aboat_Driver, ClearScreen
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL Aboat_Driver, Print
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL Aboat_Driver, Print
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL Aboat_Driver, Print
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL Aboat_Driver, Short_menu
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL Aboat_Driver, Print
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL Aboat_Driver, IEEE_menu
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL Aboat_Driver, Print
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL Aboat_Driver, Menu_all
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  458   ClearScreen();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  459   Print(0,0,"Name:",1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#(`?<Constant "Name:">` & 0xff)
        MOV	R5,#((`?<Constant "Name:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x0
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  460   Print(4,0,"IEEE Add:(Hex)",1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#(`?<Constant "IEEE Add:(Hex)">` & 0xff)
        MOV	R5,#((`?<Constant "IEEE Add:(Hex)">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x4
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  461   Print(2,0,"Short Add:",1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#(`?<Constant "Short Add:">` & 0xff)
        MOV	R5,#((`?<Constant "Short Add:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x2
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  462     Short_menu();
        ; Setup parameters for call to function Short_menu
        MOV	DPTR,#(Short_menu & 0xffff)
        MOV	A,#((Short_menu >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  463   Print(2,80,Short_Add,1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#(Short_Add & 0xff)
        MOV	R5,#((Short_Add >> 8) & 0xff)
        MOV	R2,#0x50
        MOV	R1,#0x2
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  464   IEEE_menu();
        ; Setup parameters for call to function IEEE_menu
        MOV	DPTR,#(IEEE_menu & 0xffff)
        MOV	A,#((IEEE_menu >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  465   Print(6,0,disp_ieee,1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#(disp_ieee & 0xff)
        MOV	R5,#((disp_ieee >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x6
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  466 #ifdef ZG_Coord
//  467   Print(0,40,"Coord",1);
//  468 #endif
//  469 #ifdef ZG_Router
//  470   Print(0,40,"Router",1);
//  471 #endif
//  472 #ifdef ZG_ENDDEVICE
//  473   Print(0,40,"END",1);
//  474 #endif
//  475   if(key == HAL_KEY_CANCEL)
        MOV	A,#0x4
        XRL	A,R6
        JNZ	??Aboat_Driver_0
//  476   {
//  477     Menu_option = Main_Menu_1;
        MOV	DPTR,#Menu_option
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        LCALL	??Subroutine2_2 & 0xFFFF
//  478     FirstItem = 0;
//  479     NowItem = 0;
//  480     Menu_all(0);
??CrossCallReturnLabel_57:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  481   }
//  482 }
??Aboat_Driver_0:
        LJMP	??Subroutine31_1 & 0xFFFF
        CFI EndBlock cfiBlock48
//  483 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  484 void IEEE_menu(void)
IEEE_menu:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI Function IEEE_menu
//  485 {
        FUNCALL IEEE_menu, NLME_GetExtAddr
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL IEEE_menu, Ten_to_16
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL IEEE_menu, Ten_to_16
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 24
        MOV	A,#-0x18
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  486   int j;
//  487   INT8U TEMP[16],ieee[8],*ABC = NLME_GetExtAddr() ;
        ; Setup parameters for call to function NLME_GetExtAddr
        MOV	DPTR,#(NLME_GetExtAddr & 0xffff)
        MOV	A,#((NLME_GetExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,?V0 + 0
        MOV	R1,?V0 + 1
//  488   for(j=0;j<8;j++)
        MOV	R6,#0x0
        MOV	R7,#0x0
//  489   {
//  490     ieee[j] = *ABC++;
??IEEE_menu_0:
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_43:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOV	R0,DPL
        MOV	R1,DPH
//  491   }
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_36:
        SUBB	A,#0x8
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_48:
        JC	??IEEE_menu_0
//  492 for(j=0;j<8;j++)
        MOV	R6,#0x0
        MOV	R7,#0x0
//  493   {
//  494     TEMP[2*j]= ieee[j]%16;
??IEEE_menu_1:
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_28:
        ANL	A,#0xf
        MOV	R1,A
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	A,R2
        CLR	C
        RLC	A
        MOV	R2,A
        MOV	A,R3
        RLC	A
        MOV	R3,A
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	A,DPL
        ADD	A,R2
        MOV	?V0 + 0,A
        MOV	A,DPH
        ADDC	A,R3
        MOV	?V0 + 1,A
        MOV	A,R1
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	@DPTR,A
//  495     TEMP[2*j] = Ten_to_16(TEMP[2*j]);
        ; Setup parameters for call to function Ten_to_16
        MOV	DPTR,#(Ten_to_16 & 0xffff)
        MOV	A,#((Ten_to_16 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine7 & 0xFFFF
//  496   }
??CrossCallReturnLabel_45:
        JC	??IEEE_menu_1
//  497 for(j=0;j<8;j++)
        MOV	R6,#0x0
        MOV	R7,#0x0
//  498   {
//  499     TEMP[2*j+1]= ieee[j] / 16;
??IEEE_menu_2:
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_29:
        SWAP	A
        ANL	A,#0xf
        MOV	R2,A
        MOV	A,R6
        MOV	R0,A
        MOV	A,R7
        MOV	R1,A
        MOV	A,R0
        CLR	C
        RLC	A
        MOV	R0,A
        MOV	A,R1
        RLC	A
        MOV	R1,A
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	A,DPL
        ADD	A,R0
        MOV	DPL,A
        MOV	A,DPH
        ADDC	A,R1
        MOV	DPH,A
        INC	DPTR
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	A,R2
        MOVX	@DPTR,A
//  500     TEMP[2*j+1] = Ten_to_16(TEMP[2*j+1]);
        ; Setup parameters for call to function Ten_to_16
        MOV	R1,A
        MOV	DPTR,#(Ten_to_16 & 0xffff)
        MOV	A,#((Ten_to_16 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine7 & 0xFFFF
//  501   }
??CrossCallReturnLabel_46:
        JC	??IEEE_menu_2
//  502 
//  503   for(j=15;j>=0;j--)
        MOV	R6,#0xf
        MOV	R7,#0x0
//  504   {
//  505     disp_ieee[15-j] = TEMP[j] ;
??IEEE_menu_3:
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_30:
        PUSH	A
        CFI CFA_SP SP+-1
        CLR	C
        CLR	A
        SUBB	A,R6
        MOV	R0,A
        CLR	A
        SUBB	A,R7
        MOV	R1,A
        MOV	A,R0
        ADD	A,#((disp_ieee + 15) & 0xff)
        MOV	DPL,A
        MOV	A,R1
        ADDC	A,#(((disp_ieee + 15) >> 8) & 0xff)
        MOV	DPH,A
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  506   }
        MOV	A,R6
        ADD	A,#-0x1
        DEC	R6
        MOV	A,R7
        ADDC	A,#-0x1
        MOV	R7,A
        CLR	C
        MOV	A,R6
        SUBB	A,#0x0
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_49:
        JNC	??IEEE_menu_3
//  507   disp_ieee[16] = '\0';
        CLR	A
        MOV	DPTR,#(disp_ieee + 16)
        MOVX	@DPTR,A
//  508 }
        MOV	A,#0x18
        LJMP	??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        MOV	A,R7
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53
        REQUIRE ?Subroutine26
        ; // Fall through to label ?Subroutine26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        SUBB	A,#0x0
        MOV	C,0xD0 /* PSW */.2
        XRL	A,PSW
        RLC	A
        RET
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOV	A,R1
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	@DPTR,A
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_41:
        SUBB	A,#0x8
        MOV	A,R7
        SJMP	?Subroutine26
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
//  509 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  510 INT8U Ten_to_16(INT8U Source_Data)
Ten_to_16:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function Ten_to_16
//  511 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV	A,R1
        MOV	R2,A
//  512   INT8U Destination_Data;
//  513   if(Source_Data == 10)
        MOV	A,#0xa
        XRL	A,R2
        JNZ	??Ten_to_16_0
//  514     Destination_Data = 'A';
        MOV	R1,#0x41
        SJMP	??Ten_to_16_1
//  515   if(Source_Data == 11)
??Ten_to_16_0:
        MOV	A,#0xb
        XRL	A,R2
        JNZ	??Ten_to_16_2
//  516     Destination_Data = 'B';
        MOV	R1,#0x42
        SJMP	??Ten_to_16_1
//  517   if(Source_Data == 12)
??Ten_to_16_2:
        MOV	A,#0xc
        XRL	A,R2
        JNZ	??Ten_to_16_3
//  518     Destination_Data = 'C';
        MOV	R1,#0x43
        SJMP	??Ten_to_16_1
//  519   if(Source_Data == 13)
??Ten_to_16_3:
        MOV	A,#0xd
        XRL	A,R2
        JNZ	??Ten_to_16_4
//  520     Destination_Data = 'D';
        MOV	R1,#0x44
        SJMP	??Ten_to_16_1
//  521   if(Source_Data == 14)
??Ten_to_16_4:
        MOV	A,#0xe
        XRL	A,R2
        JNZ	??Ten_to_16_5
//  522     Destination_Data = 'E';
        MOV	R1,#0x45
        SJMP	??Ten_to_16_1
//  523   if(Source_Data == 15)
??Ten_to_16_5:
        MOV	A,#0xf
        XRL	A,R2
        JNZ	??Ten_to_16_6
//  524     Destination_Data = 'F';
        MOV	R1,#0x46
        SJMP	??Ten_to_16_1
//  525   if((Source_Data>=0) &&(Source_Data<=9))
??Ten_to_16_6:
        MOV	A,R2
        CLR	C
        SUBB	A,#0xa
        JNC	??Ten_to_16_1
//  526     Destination_Data = Source_Data + 48;
        MOV	A,#0x30
        ADD	A,R2
        MOV	R1,A
//  527   return Destination_Data;
??Ten_to_16_1:
        LJMP	?BRET
        CFI EndBlock cfiBlock64
//  528 }
//  529 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  530 void Short_menu(void)
Short_menu:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function Short_menu
//  531 {
        FUNCALL Short_menu, NLME_GetShortAddr
        LOCFRAME XSTACK, 17, STACK
        ARGFRAME XSTACK, 17, STACK
        FUNCALL Short_menu, Ten_to_16
        LOCFRAME XSTACK, 17, STACK
        ARGFRAME XSTACK, 17, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 7
        MOV	A,#-0x7
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  532   uint16 Short;
//  533   int j ;
//  534   INT8U TEMP[7];
//  535   Short = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        MOV	DPTR,#(NLME_GetShortAddr & 0xffff)
        MOV	A,#((NLME_GetShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
//  536   TEMP[2] = Short / 16 / 16 / 16;
        MOV	A,#0xc
        MOV	R0,#?V0 + 0
        LCALL	?US_SHR
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
//  537   TEMP[3] = Short / 16 / 16 % 16;
        MOV	A,R3
        ANL	A,#0xf
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  538   TEMP[4] = Short / 16 % 16;
        MOV	A,R2
        SWAP	A
        ANL	A,#0xf
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  539   TEMP[5] = Short % 16;
        MOV	A,R2
        ANL	A,#0xf
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  540   for(j=2;j<6;j++)
        MOV	R6,#0x2
        MOV	R7,#0x0
//  541   {
//  542     Short_Add[j] = Ten_to_16(TEMP[j]);
??Short_menu_0:
        ; Setup parameters for call to function Ten_to_16
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV	R1,A
        MOV	DPTR,#(Ten_to_16 & 0xffff)
        MOV	A,#((Ten_to_16 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R6
        ADD	A,#(Short_Add & 0xff)
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#((Short_Add >> 8) & 0xff)
        MOV	DPH,A
        MOV	A,R1
        MOVX	@DPTR,A
//  543   }
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_37:
        SUBB	A,#0x6
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_50:
        JC	??Short_menu_0
//  544   Short_Add[0] = '0';
        MOV	A,#0x30
        MOV	DPTR,#Short_Add
        MOVX	@DPTR,A
//  545   Short_Add[1] = 'x';
        MOV	A,#0x78
        MOV	DPTR,#(Short_Add + 1)
        MOVX	@DPTR,A
//  546   Short_Add[6] = '\0';
        CLR	A
        MOV	DPTR,#(Short_Add + 6)
        MOVX	@DPTR,A
//  547 }
        MOV	A,#0x7
        SJMP	??Subroutine31_0
        CFI EndBlock cfiBlock65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x6
??Subroutine31_0:
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
??Subroutine31_1:
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_42:
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_37
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_36
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_45
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOV	A,R6
        ADD	A,#0x1
        INC	R6
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R7,A
        CLR	C
        MOV	A,R6
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 34)
??Subroutine15_0:
        LCALL	?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_44:
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78
        CFI EndBlock cfiCond79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond80 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_31
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_28
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+-1
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_29
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        MOV	A,DPL
        ADD	A,R6
        MOV	DPL,A
        MOV	A,DPH
        ADDC	A,R7
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85
//  548 
//  549 //*********************************************************************************
//  550 //º¯ÊýÃû:void SelectTxAddr(INT8U key)
//  551 //¹¦ÄÜ:²é¿´ROUTERµÄ¸öÊý
//  552 //ÊäÈë£º°´¼üÖµ
//  553 //Êä³ö£ºÎÞ
//  554 //*********************************************************************************

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  555 int Short_Addr_number;
Short_Addr_number:
        DS 2

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  556 void SelectTxAddr(INT8U key)
SelectTxAddr:
        CFI Block cfiBlock86 Using cfiCommon0
        CFI Function SelectTxAddr
//  557 {
        FUNCALL SelectTxAddr, ClearScreen
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL SelectTxAddr, strcpy
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL SelectTxAddr, Print
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL SelectTxAddr, memcpy
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL SelectTxAddr, memcpy
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL SelectTxAddr, DrawMenu
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL SelectTxAddr, Menu_all
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL SelectTxAddr, Menu_all
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV	A,#-0x14
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV	?V0 + 1,R1
//  558 	INT8U arr[20];
//  559 	INT8U i, sel;
//  560 	
//  561 	ClearScreenLcd();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  562 	if((JoinNode.RouterCount == 0) && (JoinNode.RfdCount == 0))
        MOV	DPTR,#(JoinNode + 1)
        MOVX	A,@DPTR
        JNZ	??SelectTxAddr_0
        MOV	DPTR,#JoinNode
        MOVX	A,@DPTR
        JNZ	??SelectTxAddr_0
//  563 	{
//  564 		//Rectangle(0,2,127,5);
//  565 		strcpy((char*)arr, "NO JOIN NODE");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "NO JOIN NODE">` & 0xff)
        MOV	R5,#((`?<Constant "NO JOIN NODE">` >> 8) & 0xff)
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(strcpy & 0xffff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  566 		Print(3,3,arr,1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 2,#0x1
        MOV	?V0 + 3,#0x0
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x3
        MOV	R1,#0x3
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        LJMP	??SelectTxAddr_1 & 0xFFFF
//  567 	}
//  568 	else
//  569 	{
//  570 		for(i=0; i<JoinNode.RouterCount; i++)
??SelectTxAddr_0:
        MOV	?V0 + 0,#0x0
        SJMP	??CrossCallReturnLabel_5
//  571 		{
//  572 			MenuItem[i][0] = i+'1';
??SelectTxAddr_2:
        LCALL	?Subroutine8 & 0xFFFF
//  573 			MenuItem[i][1] = '.';
//  574 			MenuItem[i][2] = 'R';
//  575 			MenuItem[i][3] = 'o';
??CrossCallReturnLabel_17:
        MOV	A,#0x6f
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
//  576 			MenuItem[i][4] = 'u';
        MOV	A,#0x75
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
//  577 			memcpy(&MenuItem[i][5], &JoinNode.RouterAddr[i][0], 8);
        ; Setup parameters for call to function memcpy
        MOV	?V0 + 2,#0x8
        MOV	?V0 + 3,#0x0
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	A,R2
        MOV	B,#0xa
        MUL	AB
        ADD	A,#((JoinNode + 202) & 0xff)
        MOV	R4,A
        MOV	A,B
        ADDC	A,#(((JoinNode + 202) >> 8) & 0xff)
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  578                         MenuItem[i][13] = ' ';
        LCALL	?Subroutine3 & 0xFFFF
//  579 			MenuItem[i][14] = ' ';
//  580 			MenuItem[i][15] = ' ';
//  581 			MenuItem[i][16] = '\0';
//  582 		}
??CrossCallReturnLabel_5:
        MOV	DPTR,#(JoinNode + 1)
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,?V0 + 0
        CLR	C
        SUBB	A,R2
        JC	??SelectTxAddr_2
//  583 		for(i=JoinNode.RouterCount; i<(JoinNode.RouterCount+JoinNode.RfdCount); i++)
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        SJMP	??CrossCallReturnLabel_6
//  584 		{
//  585 			MenuItem[i][0] = i+'1';
??SelectTxAddr_3:
        LCALL	?Subroutine8 & 0xFFFF
//  586 			MenuItem[i][1] = '.';
//  587 			MenuItem[i][2] = 'R';
//  588 			MenuItem[i][3] = 'f';
??CrossCallReturnLabel_18:
        MOV	A,#0x66
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
//  589 			MenuItem[i][4] = 'd';	
        MOV	A,#0x64
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
//  590 			memcpy(&MenuItem[i][5], &JoinNode.RfdAddr[i-JoinNode.RouterCount][0], 8);
        ; Setup parameters for call to function memcpy
        MOV	?V0 + 2,#0x8
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	DPTR,#(JoinNode + 1)
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	A,R2
        CLR	C
        SUBB	A,R0
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_32:
        ADD	A,#((JoinNode + 2) & 0xff)
        MOV	R4,A
        MOV	A,R1
        ADDC	A,#(((JoinNode + 2) >> 8) & 0xff)
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  591 			MenuItem[i][13] = ' ';
        LCALL	?Subroutine3 & 0xFFFF
//  592 			MenuItem[i][14] = ' ';
//  593 			MenuItem[i][15] = ' ';
//  594 			MenuItem[i][16] = '\0';
//  595 		}
??CrossCallReturnLabel_6:
        MOV	?V0 + 2,?V0 + 0
        MOV	?V0 + 3,#0x0
        MOV	DPTR,#(JoinNode + 1)
        LCALL	?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV	A,?V0 + 2
        SUBB	A,R0
        CLR	A
        SUBB	A,R1
        CLR	C
        XRL	A,PSW
        RLC	A
        JC	??SelectTxAddr_3
//  596 			
//  597 		sel = DrawMenu(MenuItem , JoinNode.RouterCount+JoinNode.RfdCount,key);
        ; Setup parameters for call to function DrawMenu
        MOV	R4,?V0 + 1
        MOVX	A,@DPTR
        MOV	DPTR,#(JoinNode + 1)
        MOV	R2,A
        MOVX	A,@DPTR
        ADD	A,R2
        MOV	R1,A
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(DrawMenu & 0xffff)
        MOV	A,#((DrawMenu >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R4,A
//  598                 if((sel == 0xff))
        MOV	A,#-0x1
        XRL	A,R4
        JNZ	??SelectTxAddr_4
//  599 		{
//  600 			NowItem = 0;
        LCALL	?Subroutine4 & 0xFFFF
//  601 			FirstItem = 0;
//  602                         Menu_option = Zigbee_Menu_2;
//  603                         Menu_all(0);
??CrossCallReturnLabel_58:
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??SelectTxAddr_1
//  604 		}
//  605 		else if(sel < JoinNode.RouterCount)
??SelectTxAddr_4:
        MOV	DPTR,#(JoinNode + 1)
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,R1
        CLR	C
        SUBB	A,R2
        JNC	??SelectTxAddr_5
//  606 		{
//  607 			SrcSaddr = JoinNode.RouterAddr[sel][8];
//  608 			SrcSaddr <<= 8;
//  609 			SrcSaddr += JoinNode.RouterAddr[sel][9];
        MOV	DPL,R4
        MOV	A,DPL
        MOV	B,#0xa
        MUL	AB
        ADD	A,#(JoinNode & 0xff)
        MOV	R0,A
        MOV	A,B
        ADDC	A,#((JoinNode >> 8) & 0xff)
        MOV	R1,A
        MOV	A,R0
        ADD	A,#-0x2e
        MOV	DPL,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	A,R0
        ADD	A,#-0x2d
        SJMP	??SelectTxAddr_6
//  610 		}
//  611 		else if(sel < (JoinNode.RouterCount+JoinNode.RfdCount))
??SelectTxAddr_5:
        LCALL	?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV	A,R4
        SUBB	A,R0
        CLR	A
        SUBB	A,R1
        CLR	C
        XRL	A,PSW
        RLC	A
        JNC	??SelectTxAddr_1
        MOV	DPL,R4
        MOV	A,DPL
        CLR	C
        SUBB	A,R2
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_33:
        ADD	A,#(JoinNode & 0xff)
        MOV	R0,A
        MOV	A,R1
        ADDC	A,#((JoinNode >> 8) & 0xff)
        MOV	R1,A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	A,R0
        ADD	A,#0xb
??SelectTxAddr_6:
        MOV	DPL,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	DPH,A
        MOVX	A,@DPTR
        ADD	A,#0x0
        MOV	R0,A
        CLR	A
        ADDC	A,R3
        MOV	R1,A
        MOV	DPTR,#SrcSaddr
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
//  612 		{
//  613 			SrcSaddr = JoinNode.RfdAddr[sel-JoinNode.RouterCount][8];
//  614 			SrcSaddr <<= 8;
//  615 			SrcSaddr += JoinNode.RfdAddr[sel-JoinNode.RouterCount][9];
//  616    		}
//  617         }
//  618         if(key == HAL_KEY_CANCEL)
??SelectTxAddr_1:
        MOV	A,#0x4
        XRL	A,?V0 + 1
        JNZ	??SelectTxAddr_7
//  619         {
//  620           NowItem = 0;
        LCALL	?Subroutine4 & 0xFFFF
//  621           FirstItem = 0;
//  622           Menu_option = Zigbee_Menu_2;
//  623           Menu_all(0);
??CrossCallReturnLabel_59:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  624         }
//  625 }
??SelectTxAddr_7:
        MOV	A,#0x14
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        MOV	R5,A
        MOV	A,R6
        ADD	A,#0x5
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(memcpy & 0xffff)
        MOV	A,#((memcpy >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        MOV	R0,A
        CLR	A
        SUBB	A,#0x0
        MOV	R1,A
        MOV	A,R0
        MOV	B,#0xa
        MUL	AB
        MOV	R0,A
        MOV	R2,B
        MOV	B,#0xa
        MOV	A,R1
        MUL	AB
        ADD	A,R2
        MOV	R1,A
        MOV	A,R0
        RET
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        MOV	DPL,?V0 + 0
        MOV	R2,DPL
        MOV	A,R2
        MOV	B,#0x11
        MUL	AB
        ADD	A,#(MenuItem & 0xff)
        MOV	R6,A
        MOV	A,B
        ADDC	A,#((MenuItem >> 8) & 0xff)
        MOV	R7,A
        MOV	A,#0x31
        ADD	A,?V0 + 0
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
        MOV	A,#0x2e
        INC	DPTR
        MOVX	@DPTR,A
        MOV	A,#0x52
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        MOV	A,R6
        ADD	A,#0xd
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_38:
        ADD	A,#0xe
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_39:
        ADD	A,#0xf
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_40:
        ADD	A,#0x10
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        CLR	A
        MOVX	@DPTR,A
        INC	?V0 + 0
        RET
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond99 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_6
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_5
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_5
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_6
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_6
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        MOV	A,#0x20
        MOVX	@DPTR,A
        MOV	A,R6
        RET
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	DPTR,#JoinNode
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R0,A
        CLR	A
        ADDC	A,#0x0
        MOV	R1,A
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108
//  626 //*********************************************************************************
//  627 //º¯ÊýÃû:void SingleTxTest(uint8 key)
//  628 //¹¦ÄÜ:µ¥´Î·¢ËÍº¯Êý
//  629 //ÊäÈë£ºÎÞ
//  630 //Êä³ö£ºÎÞ
//  631 //*********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  632 void SingleTxTest(uint8 key)
SingleTxTest:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI Function SingleTxTest
//  633 {
        FUNCALL SingleTxTest, strcpy
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL SingleTxTest, ClearScreen
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL SingleTxTest, Print
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SingleTxTest, Print
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SingleTxTest, SendData
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL SingleTxTest, halWait
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL SingleTxTest, Menu_all
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  634   RfTx.TXDATA.HeadCom[0] = 'S';         //µ¥´Î
        MOV	A,#0x53
        MOV	DPTR,#RfTx
        MOVX	@DPTR,A
//  635   RfTx.TXDATA.HeadCom[1] = 'I';
        MOV	A,#0x49
        MOV	DPTR,#(RfTx + 1)
        MOVX	@DPTR,A
//  636   RfTx.TXDATA.HeadCom[2] = 'N';
        MOV	A,#0x4e
        MOV	DPTR,#(RfTx + 2)
        MOVX	@DPTR,A
//  637 
//  638   strcpy((char*)RfTx.TXDATA.DataBuf, "3w.c51rf.com");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "3w.c51rf.com">` & 0xff)
        MOV	R5,#((`?<Constant "3w.c51rf.com">` >> 8) & 0xff)
        MOV	R2,#((RfTx + 13) & 0xff)
        MOV	R3,#(((RfTx + 13) >> 8) & 0xff)
        MOV	DPTR,#(strcpy & 0xffff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  639   ClearScreenLcd();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  640   Print(3,0,"Send Data:",10);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0xa
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#(`?<Constant "Send Data:">` & 0xff)
        MOV	R5,#((`?<Constant "Send Data:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x3
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  641   Print(5,0,RfTx.TXDATA.DataBuf,12);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0xc
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#((RfTx + 13) & 0xff)
        MOV	R5,#(((RfTx + 13) >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x5
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  642   if(Send_Flag == Send_Flag_Single)
        MOV	DPTR,#Send_Flag
        MOVX	A,@DPTR
        JNZ	??SingleTxTest_0
        INC	DPTR
        MOVX	A,@DPTR
??SingleTxTest_0:
        JNZ	??SingleTxTest_1
//  643   {
//  644     SendData(RfTx.TxBuf, SrcSaddr, 29);
        ; Setup parameters for call to function SendData
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  645     for(int i=0;i<5;i++)
        MOV	R6,#0x5
//  646     halWait(200);
??SingleTxTest_2:
        ; Setup parameters for call to function halWait
        MOV	R1,#-0x38
        MOV	DPTR,#(halWait & 0xffff)
        MOV	A,#((halWait >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        DEC	R6
        MOV	A,R6
        JNZ	??SingleTxTest_2
//  647     NowItem = 0;
??SingleTxTest_3:
        CLR	A
        LCALL	?Subroutine10 & 0xFFFF
//  648     FirstItem = 0;
//  649     Menu_option = Single_Send_Menu_4;
??CrossCallReturnLabel_21:
        LCALL	??Subroutine4_0 & 0xFFFF
//  650     Menu_all(0);
??CrossCallReturnLabel_60:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  651   }
//  652   else if(Send_Flag == Send_Flag_Continuous)
//  653   {
//  654     Send_Flag_Consecution = Short_Send_Continuous;
//  655     if(key == HAL_KEY_CANCEL)
//  656     {
//  657       Send_Flag_Consecution = 0;
//  658       NowItem = 0;
//  659       FirstItem = 0;
//  660       Menu_option = Single_Send_Menu_4;
//  661       Menu_all(0);
//  662     }
//  663   }
//  664 
//  665 }
??SingleTxTest_4:
        LJMP	??Subroutine31_1 & 0xFFFF
??SingleTxTest_1:
        MOV	DPTR,#Send_Flag
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??SingleTxTest_5
        INC	DPTR
        MOVX	A,@DPTR
??SingleTxTest_5:
        JNZ	??SingleTxTest_4
        MOV	DPTR,#Send_Flag_Consecution
        MOV	A,#0xb
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        JNZ	??SingleTxTest_4
        MOV	DPTR,#Send_Flag_Consecution
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
        SJMP	??SingleTxTest_3
        CFI EndBlock cfiBlock109

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker112 Using cfiCommon1
        CFI (cfiPicker112) NoFunction
        CFI (cfiPicker112) Picker
        MOV	R1,#0x1d
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 18)
??Subroutine0_0:
        MOV	DPTR,#SrcSaddr
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	R2,#(RfTx & 0xff)
        MOV	R3,#((RfTx >> 8) & 0xff)
        MOV	DPTR,#(SendData & 0xffff)
        MOV	A,#((SendData >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiPicker112
        CFI EndBlock cfiCond113
//  666 
//  667 //*********************************************************************************
//  668 //º¯ÊýÃû:void PingpongTxTest(uint8 key)
//  669 //¹¦ÄÜ:Pingpong·¢ËÍº¯Êý
//  670 //ÊäÈë£ºÎÞ
//  671 //Êä³ö£ºÎÞ
//  672 //*********************************************************************************

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  673 int flag = 0;
flag:
        DS 2
//  674 extern int Send_Data;

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  675 void PingpongTxTest(uint8 key)
PingpongTxTest:
        CFI Block cfiBlock114 Using cfiCommon0
        CFI Function PingpongTxTest
//  676 {
        FUNCALL PingpongTxTest, ClearScreen
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL PingpongTxTest, Print
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL PingpongTxTest, Print
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL PingpongTxTest, strcpy
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL PingpongTxTest, Print
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL PingpongTxTest, SendData
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL PingpongTxTest, sprintf
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL PingpongTxTest, SendData
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL PingpongTxTest, Ten_to_16
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL PingpongTxTest, Print
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL PingpongTxTest, Print
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL PingpongTxTest, Print
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL PingpongTxTest, Menu_all
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0xb
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 7
        MOV	A,#-0x7
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	?V0 + 2,R1
//  677   uint8 S_Addr[7];
//  678   ClearScreenLcd();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  679   Print(4,0,"S_Data:",10);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0xa
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R4,#(`?<Constant "S_Data:">` & 0xff)
        MOV	R5,#((`?<Constant "S_Data:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x4
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  680   Print(6,0,"R_Data:",10);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R4,#(`?<Constant "R_Data:">` & 0xff)
        MOV	R5,#((`?<Constant "R_Data:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x6
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  681 
//  682   if(Send_Flag == Send_Flag_Single)
        MOV	DPTR,#Send_Flag
        MOVX	A,@DPTR
        JNZ	??PingpongTxTest_0
        INC	DPTR
        MOVX	A,@DPTR
??PingpongTxTest_0:
        JNZ	??PingpongTxTest_1
//  683   {
//  684     RfTx.TXDATA.HeadCom[0] = 'S';         //µ¥´Î
        MOV	A,#0x53
        LCALL	?Subroutine9 & 0xFFFF
//  685     RfTx.TXDATA.HeadCom[1] = 'P';         //Æ¹ÅÒ·½Ê½
//  686     RfTx.TXDATA.HeadCom[2] = 'N';
//  687     strcpy((char*)RfTx.TXDATA.DataBuf, "c51rf.com");
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "c51rf.com">` & 0xff)
        MOV	R5,#((`?<Constant "c51rf.com">` >> 8) & 0xff)
        MOV	R2,#((RfTx + 13) & 0xff)
        MOV	R3,#(((RfTx + 13) >> 8) & 0xff)
        MOV	DPTR,#(strcpy & 0xffff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  688     Print(4,56,RfTx.TXDATA.DataBuf,9);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x9
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R4,#((RfTx + 13) & 0xff)
        MOV	R5,#(((RfTx + 13) >> 8) & 0xff)
        MOV	R2,#0x38
        MOV	R1,#0x4
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  689     if(flag == 0)
        MOV	DPTR,#flag
        MOVX	A,@DPTR
        JNZ	??PingpongTxTest_2
        INC	DPTR
        MOVX	A,@DPTR
??PingpongTxTest_2:
        JNZ	??PingpongTxTest_3
//  690     SendData(RfTx.TxBuf, SrcSaddr, 26);
        ; Setup parameters for call to function SendData
        MOV	R1,#0x1a
        LCALL	??Subroutine0_0 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  691     flag++;
??PingpongTxTest_3:
        MOV	DPTR,#flag
        MOVX	A,@DPTR
        ADD	A,#0x1
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOVX	@DPTR,A
//  692     if(key != 0)
        MOV	A,?V0 + 2
        JNZ	$+5
        LJMP	??PingpongTxTest_4 & 0xFFFF
//  693     {
//  694       flag = 0;
        MOV	DPTR,#flag
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
        LJMP	??PingpongTxTest_5 & 0xFFFF
//  695       Send_Flag_Consecution = 0;
//  696       NowItem = 0;
//  697       FirstItem = 0;
//  698       Menu_option = Single_Send_Menu_4;
//  699       Menu_all(0);
//  700     }
//  701   }
//  702   else if(Send_Flag == Send_Flag_Continuous)
??PingpongTxTest_1:
        MOV	DPTR,#Send_Flag
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??PingpongTxTest_6
        INC	DPTR
        MOVX	A,@DPTR
??PingpongTxTest_6:
        JZ	$+5
        LJMP	??PingpongTxTest_4 & 0xFFFF
//  703   {
//  704     RfTx.TXDATA.HeadCom[0] = 'C';         //Á¬Ðø
        MOV	A,#0x43
        LCALL	?Subroutine9 & 0xFFFF
//  705     RfTx.TXDATA.HeadCom[1] = 'P';         //Æ¹ÅÒ·½Ê½
//  706     RfTx.TXDATA.HeadCom[2] = 'N';
//  707     Send_Flag_Consecution = Pingpong_Send_Continuous;
??CrossCallReturnLabel_20:
        MOV	DPTR,#Send_Flag_Consecution
        MOV	A,#0xc
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  708     Send_Data = 0;
        MOV	DPTR,#Send_Data
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  709     sprintf(RfTx.TXDATA.DataBuf,(char *)"%d",Send_Data);
        ; Setup parameters for call to function sprintf
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R4,#(`?<Constant "%d">` & 0xff)
        MOV	R5,#((`?<Constant "%d">` >> 8) & 0xff)
        MOV	R2,#((RfTx + 13) & 0xff)
        MOV	R3,#(((RfTx + 13) >> 8) & 0xff)
        MOV	DPTR,#(sprintf & 0xffff)
        MOV	A,#((sprintf >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  710     SendData(RfTx.TxBuf, SrcSaddr, 29);
        ; Setup parameters for call to function SendData
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  711     S_Addr[0] = '0';
        MOV	A,#0x30
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//  712     S_Addr[1] = 'x';
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x78
        MOVX	@DPTR,A
//  713     S_Addr[6] = '\0';
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
//  714     S_Addr[2] = SrcSaddr /16/16/16;
        MOV	DPTR,#SrcSaddr
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        MOV	A,#0xc
        MOV	R0,#?V0 + 0
        LCALL	?US_SHR
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
//  715     S_Addr[3] = SrcSaddr /16/16%16;
        MOV	DPTR,#(SrcSaddr + 1)
        MOVX	A,@DPTR
        ANL	A,#0xf
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  716     S_Addr[4] = SrcSaddr /16%16;
        MOV	DPTR,#SrcSaddr
        MOVX	A,@DPTR
        SWAP	A
        ANL	A,#0xf
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  717     S_Addr[5] = SrcSaddr %16;
        MOV	DPTR,#SrcSaddr
        MOVX	A,@DPTR
        ANL	A,#0xf
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  718     for(int j=2;j<6;j++)
        MOV	?V0 + 0,#0x2
//  719     {
//  720       S_Addr[j] = Ten_to_16(S_Addr[j]);
??PingpongTxTest_7:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,DPL
        ADD	A,?V0 + 0
        MOV	R6,A
        MOV	A,DPH
        ADDC	A,?V0 + 1
        MOV	R7,A
        ; Setup parameters for call to function Ten_to_16
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(Ten_to_16 & 0xffff)
        MOV	A,#((Ten_to_16 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
//  721     }
        MOV	A,?V0 + 0
        ADD	A,#0x1
        MOV	?V0 + 0,A
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	?V0 + 1,A
        CLR	C
        MOV	A,?V0 + 0
        SUBB	A,#0x6
        MOV	A,?V0 + 1
        LCALL	?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_47:
        JC	??PingpongTxTest_7
//  722     Print(2,0,"Short add:",1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R4,#(`?<Constant "Short add:">` & 0xff)
        MOV	R5,#((`?<Constant "Short add:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x2
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  723     Print(2,80,S_Addr,1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x50
        MOV	R1,#0x2
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  724     Print(4,56,RfTx.TXDATA.DataBuf,1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R4,#((RfTx + 13) & 0xff)
        MOV	R5,#(((RfTx + 13) >> 8) & 0xff)
        MOV	R2,#0x38
        MOV	R1,#0x4
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  725     if(key == HAL_KEY_CANCEL)
        MOV	A,#0x4
        XRL	A,?V0 + 2
        JNZ	??PingpongTxTest_4
//  726     {
//  727       Send_Flag_Consecution = 0;
??PingpongTxTest_5:
        MOV	DPTR,#Send_Flag_Consecution
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  728       NowItem = 0;
        LCALL	?Subroutine10 & 0xFFFF
//  729       FirstItem = 0;
//  730       Menu_option = Single_Send_Menu_4;
??CrossCallReturnLabel_22:
        LCALL	??Subroutine4_0 & 0xFFFF
//  731       Menu_all(0);
??CrossCallReturnLabel_61:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  732     }
//  733   }
//  734 
//  735 }
??PingpongTxTest_4:
        MOV	A,#0x7
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	R7,#0x3
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        LCALL	?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV	A,#0x8
        RET
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOV	DPTR,#RfTx
        MOVX	@DPTR,A
        MOV	A,#0x50
        MOV	DPTR,#(RfTx + 1)
        MOVX	@DPTR,A
        MOV	A,#0x4e
        MOV	DPTR,#(RfTx + 2)
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120
//  736 #ifndef ZG_Coord
//  737 //********************************************************************************
//  738 //º¯ÊýÃû£ºvoid Sensor_Menu(INT8U key)
//  739 //¹¦ÄÜ£º´«¸ÐÆ÷²âÊÔ²Ëµ¥
//  740 //ÊäÈë£ºKEY
//  741 //Êä³ö£ºnull
//  742 //********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  743 void Sensor_Menu(INT8U key)
Sensor_Menu:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI Function Sensor_Menu
//  744 {
        FUNCALL Sensor_Menu, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Sensor_Menu, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Sensor_Menu, DrawMenu
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Sensor_Menu, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Sensor_Menu, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Sensor_Menu, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Sensor_Menu, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  745   INT8U sel;
//  746   strcpy((char*)MenuItem[0] ,"1:Power Check   ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "1:Power Check   ">` & 0xff)
        MOV	R5,#((`?<Constant "1:Power Check   ">` >> 8) & 0xff)
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(strcpy & 0xffff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  747   strcpy((char*)MenuItem[1] ,"2:Temp Check    ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "2:Temp Check    ">` & 0xff)
        MOV	R5,#((`?<Constant "2:Temp Check    ">` >> 8) & 0xff)
        MOV	R2,#((MenuItem + 17) & 0xff)
        MOV	R3,#(((MenuItem + 17) >> 8) & 0xff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  748   //strcpy((char*)MenuItem[2] ,"3:GuangM  Check ");
//  749   //strcpy((char*)MenuItem[3] ,"3:Pot  Check    ");
//  750   sel = DrawMenu(MenuItem ,2,key);
//  751   switch(sel)
        ; Setup parameters for call to function DrawMenu
        MOV	A,R6
        MOV	R4,A
        MOV	R1,#0x2
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(DrawMenu & 0xffff)
        MOV	A,#((DrawMenu >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for Sensor_Menu>_0`:
        DB        255
        DB        4
        DW        ??Sensor_Menu_0
        DW        ??Sensor_Menu_1
        DW        ??Sensor_Menu_2
        DW        ??Sensor_Menu_3
        DW        ??Sensor_Menu_4
        DW        ??Sensor_Menu_4
//  752   {
//  753     case 0:
//  754       Menu_option = Sensor_ReadBattery_Menu_3;
??Sensor_Menu_2:
        MOV	DPTR,#Menu_option
        MOV	A,#0x12
??Sensor_Menu_5:
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        SJMP	??CrossCallReturnLabel_73
//  755       Menu_all(0);
//  756     break;
//  757     case 1:
//  758       Menu_option = Sensor_Temp_Menu_3;
??Sensor_Menu_3:
        MOV	DPTR,#Menu_option
        MOV	A,#0x13
        SJMP	??Sensor_Menu_5
//  759       Menu_all(0);
//  760     break;
//  761     case 2:
//  762       Menu_option = Sensor_ReadBattery_Menu_3;
??Sensor_Menu_4:
        MOV	DPTR,#Menu_option
        MOV	A,#0x12
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        SJMP	??CrossCallReturnLabel_24
//  763       NowItem = 0;
//  764       Menu_all(0);
//  765     break;
//  766     case 3:
//  767       Menu_option = Sensor_ReadBattery_Menu_3;
//  768       NowItem = 0;
//  769       Menu_all(0);
//  770     break;
//  771     case 0xff:
//  772       Menu_option = Main_Menu_1;
??Sensor_Menu_1:
        LCALL	?Subroutine11 & 0xFFFF
//  773       FirstItem = 0;
??CrossCallReturnLabel_24:
        LCALL	?Subroutine28 & 0xFFFF
//  774       NowItem = 0;
??CrossCallReturnLabel_73:
        LCALL	?Subroutine27 & 0xFFFF
//  775       Menu_all(0);
??CrossCallReturnLabel_65:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  776     break;
//  777   }
//  778 }
??Sensor_Menu_0:
        LJMP	?Subroutine30 & 0xFFFF
        CFI EndBlock cfiBlock121

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond122 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker125 Using cfiCommon1
        CFI (cfiPicker125) NoFunction
        CFI (cfiPicker125) Picker
        MOV	DPTR,#Menu_option
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
        MOV	DPTR,#FirstItem
        RET
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiPicker125
//  779 #endif
//  780 //********************************************************************************
//  781 //º¯ÊýÃû£ºvoid Uart_Menu(INT8U key)
//  782 //¹¦ÄÜ£º´®¿Ú²âÊÔ²Ëµ¥
//  783 //ÊäÈë£ºKEY
//  784 //Êä³ö£ºnull
//  785 //********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  786 void Uart_Menu(INT8U key)
Uart_Menu:
        CFI Block cfiBlock126 Using cfiCommon0
        CFI Function Uart_Menu
//  787 {
        FUNCALL Uart_Menu, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Uart_Menu, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Uart_Menu, strcpy
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Uart_Menu, DrawMenu
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Uart_Menu, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Uart_Menu, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Uart_Menu, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL Uart_Menu, Menu_all
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  788   INT8U sel;
//  789   strcpy((char*)MenuItem[0] ,"1:Tx Test       ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "1:Tx Test       ">` & 0xff)
        MOV	R5,#((`?<Constant "1:Tx Test       ">` >> 8) & 0xff)
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(strcpy & 0xffff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  790   strcpy((char*)MenuItem[1] ,"2:Rx Test       ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "2:Rx Test       ">` & 0xff)
        MOV	R5,#((`?<Constant "2:Rx Test       ">` >> 8) & 0xff)
        MOV	R2,#((MenuItem + 17) & 0xff)
        MOV	R3,#(((MenuItem + 17) >> 8) & 0xff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  791   strcpy((char*)MenuItem[2] ,"3:Pingpong Test ");
        ; Setup parameters for call to function strcpy
        MOV	R4,#(`?<Constant "3:Pingpong Test ">` & 0xff)
        MOV	R5,#((`?<Constant "3:Pingpong Test ">` >> 8) & 0xff)
        MOV	R2,#((MenuItem + 34) & 0xff)
        MOV	R3,#(((MenuItem + 34) >> 8) & 0xff)
        MOV	A,#((strcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  792   sel = DrawMenu(MenuItem ,3,key);
//  793   switch(sel)
        ; Setup parameters for call to function DrawMenu
        MOV	A,R6
        MOV	R4,A
        MOV	R1,#0x3
        MOV	R2,#(MenuItem & 0xff)
        MOV	R3,#((MenuItem >> 8) & 0xff)
        MOV	DPTR,#(DrawMenu & 0xffff)
        MOV	A,#((DrawMenu >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for Uart_Menu>_0`:
        DB        255
        DB        3
        DW        ??Uart_Menu_0
        DW        ??Uart_Menu_1
        DW        ??Uart_Menu_2
        DW        ??Uart_Menu_3
        DW        ??Uart_Menu_4
//  794   {
//  795     case 0:
//  796       Menu_option = Uart_TX_Menu_3;
??Uart_Menu_2:
        MOV	DPTR,#Menu_option
        MOV	A,#0xe
??Uart_Menu_5:
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        SJMP	??CrossCallReturnLabel_74
//  797       Menu_all(0);
//  798     break;
//  799     case 1:
//  800       Menu_option = Uart_RX_Menu_3;
??Uart_Menu_3:
        MOV	DPTR,#Menu_option
        MOV	A,#0xf
        SJMP	??Uart_Menu_5
//  801       Menu_all(0);
//  802     break;
//  803     case 2:
//  804       Menu_option = Uart_PP_Menu_3;
??Uart_Menu_4:
        MOV	DPTR,#Menu_option
        MOV	A,#0x10
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        SJMP	??CrossCallReturnLabel_25
//  805       NowItem = 0;
//  806       Menu_all(0);
//  807     break;
//  808     case 0xff:
//  809       Menu_option = Main_Menu_1;
??Uart_Menu_1:
        LCALL	?Subroutine11 & 0xFFFF
//  810       FirstItem = 0;
??CrossCallReturnLabel_25:
        LCALL	?Subroutine28 & 0xFFFF
//  811       NowItem = 0;
??CrossCallReturnLabel_74:
        LCALL	?Subroutine27 & 0xFFFF
//  812       Menu_all(0);
??CrossCallReturnLabel_66:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  813     break;
//  814   }
//  815 }
??Uart_Menu_0:
        LJMP	?Subroutine30 & 0xFFFF
        CFI EndBlock cfiBlock126

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker129 Using cfiCommon1
        CFI (cfiPicker129) NoFunction
        CFI (cfiPicker129) Picker
        CLR	A
        LCALL	?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV	A,#0x1
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 10)
??Subroutine4_0:
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiPicker129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        REQUIRE ?Subroutine27
        ; // Fall through to label ?Subroutine27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond132 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker148 Using cfiCommon1
        CFI (cfiPicker148) NoFunction
        CFI (cfiPicker148) Picker
        MOVX	@DPTR,A
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        ; Setup parameters for call to function Menu_all
        MOV	R1,A
        MOV	DPTR,#(Menu_all & 0xffff)
        MOV	A,#((Menu_all >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiPicker148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond149 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_59
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_22
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_21
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker153 Using cfiCommon1
        CFI (cfiPicker153) NoFunction
        CFI (cfiPicker153) Picker
        MOV	DPTR,#NowItem
        MOVX	@DPTR,A
        MOV	DPTR,#FirstItem
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiPicker153
        REQUIRE ?Subroutine29
        ; // Fall through to label ?Subroutine29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond154 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_22
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_58
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_59
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_21
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker165 Using cfiCommon1
        CFI (cfiPicker165) NoFunction
        CFI (cfiPicker165) Picker
        MOVX	@DPTR,A
        MOV	DPTR,#Menu_option
        RET
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiPicker165
//  816 //********************************************************************************
//  817 //º¯ÊýÃû£ºvoid Uart_Send(INT8U key)
//  818 //¹¦ÄÜ£º´®¿Ú·¢ËÍ²âÊÔ
//  819 //ÊäÈë£ºKEY
//  820 //Êä³ö£ºnull
//  821 //********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  822 void Uart_Send(INT8U key)
Uart_Send:
        CFI Block cfiBlock166 Using cfiCommon0
        CFI Function Uart_Send
//  823 {
        FUNCALL Uart_Send, ClearScreen
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Send, Uart_Baud_rate
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Send, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_Send, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_Send, sprintf
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_Send, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_Send, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_Send, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Send, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Send, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Send, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Send, Menu_all
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Send, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV	A,#-0x6
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	A,R1
        MOV	R6,A
//  824   uint8 Baud_rate[6];
//  825   ClearScreenLcd();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  826   Uart_Baud_rate(Baud_rate_38400);
        ; Setup parameters for call to function Uart_Baud_rate
        MOV	R2,#-0x80
        MOV	R3,#0x1
        MOV	DPTR,#(Uart_Baud_rate & 0xffff)
        MOV	A,#((Uart_Baud_rate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  827   Print(2,8,"Uart send test",1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "Uart send test">` & 0xff)
        MOV	R5,#((`?<Constant "Uart send test">` >> 8) & 0xff)
        MOV	R2,#0x8
        MOV	R1,#0x2
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  828   Print(4,0,"Baud rate:",1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "Baud rate:">` & 0xff)
        MOV	R5,#((`?<Constant "Baud rate:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x4
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  829   sprintf(Baud_rate,(char *)"%d00",Baud_rate_38400);
        ; Setup parameters for call to function sprintf
        MOV	?V0 + 0,#-0x80
        MOV	?V0 + 1,#0x1
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "%d00">` & 0xff)
        MOV	R5,#((`?<Constant "%d00">` >> 8) & 0xff)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(sprintf & 0xffff)
        MOV	A,#((sprintf >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  830   Print(4,80,Baud_rate,1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x50
        MOV	R1,#0x4
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  831   Print(6,0,"Data:hello word!",1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "Data:hello word!">` & 0xff)
        MOV	R5,#((`?<Constant "Data:hello word!">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x6
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  832   UartTX_Send_String("ChengDu WXL Communication Technology C0.,LTD\n",45);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0x2d
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "ChengDu WXL Communica...">` & 0xff)
        MOV	R3,#((`?<Constant "ChengDu WXL Communica...">` >> 8) & 0xff)
        MOV	DPTR,#(UartTX_Send_String & 0xffff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  833   UartTX_Send_String("Uart send test\n",15);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0xf
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "Uart send test\\n">` & 0xff)
        MOV	R3,#((`?<Constant "Uart send test\\n">` >> 8) & 0xff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  834   UartTX_Send_String("Baud rate:38400\n",16);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0x10
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "Baud rate:38400\\n">` & 0xff)
        MOV	R3,#((`?<Constant "Baud rate:38400\\n">` >> 8) & 0xff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  835   Menu_option = Uart_TX_Menu_3;
        MOV	DPTR,#Menu_option
        MOV	A,#0xe
        LCALL	?Subroutine6 & 0xFFFF
//  836   if(key == HAL_KEY_CANCEL)
??CrossCallReturnLabel_12:
        JNZ	??Uart_Send_0
//  837   {
//  838     UartTX_Send_String("Exit\n",5);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0x5
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "Exit\\n">` & 0xff)
        MOV	R3,#((`?<Constant "Exit\\n">` >> 8) & 0xff)
        MOV	DPTR,#(UartTX_Send_String & 0xffff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  839     Menu_option = Uart_Menu_2;
        LCALL	??Subroutine2_0 & 0xFFFF
//  840     FirstItem = 0;
//  841     NowItem = 0;
//  842     Menu_all(0);
??CrossCallReturnLabel_53:
        SJMP	??Uart_Send_1
//  843   }
//  844   else if(key == HAL_KEY_ENTER)
??Uart_Send_0:
        MOV	A,#0x20
        XRL	A,R6
        JNZ	??Uart_Send_2
//  845   {
//  846     UartTX_Send_String("hello word!\n",12);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0xc
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "hello word!\\n">` & 0xff)
        MOV	R3,#((`?<Constant "hello word!\\n">` >> 8) & 0xff)
        MOV	DPTR,#(UartTX_Send_String & 0xffff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
??Uart_Send_1:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  847   }
//  848 }
??Uart_Send_2:
        LJMP	?Subroutine31 & 0xFFFF
        CFI EndBlock cfiBlock166
//  849 //********************************************************************************
//  850 //º¯ÊýÃû£ºvoid Uart_RX(INT8U key);
//  851 //¹¦ÄÜ£º´®¿Ú½ÓÊÕ²âÊÔ
//  852 //ÊäÈë£ºKEY
//  853 //Êä³ö£ºnull
//  854 //********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  855 void Uart_RX(INT8U key)
Uart_RX:
        CFI Block cfiBlock167 Using cfiCommon0
        CFI Function Uart_RX
//  856 {
        FUNCALL Uart_RX, ClearScreen
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_RX, Uart_Baud_rate
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_RX, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_RX, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_RX, sprintf
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_RX, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_RX, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_RX, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_RX, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_RX, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_RX, Menu_all
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV	A,#-0x6
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	A,R1
        MOV	R6,A
//  857 
//  858   uint8 Baud_rate[6];
//  859   ClearScreenLcd();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  860   Uart_Baud_rate(Baud_rate_38400);
        ; Setup parameters for call to function Uart_Baud_rate
        MOV	R2,#-0x80
        MOV	R3,#0x1
        MOV	DPTR,#(Uart_Baud_rate & 0xffff)
        MOV	A,#((Uart_Baud_rate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  861   Print(2,16,"Uart Rx test",1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "Uart Rx test">` & 0xff)
        MOV	R5,#((`?<Constant "Uart Rx test">` >> 8) & 0xff)
        MOV	R2,#0x10
        MOV	R1,#0x2
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  862   Print(4,0,"Baud rate:",1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "Baud rate:">` & 0xff)
        MOV	R5,#((`?<Constant "Baud rate:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x4
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  863   sprintf(Baud_rate,(char *)"%d00",Baud_rate_38400);
        ; Setup parameters for call to function sprintf
        MOV	?V0 + 0,#-0x80
        MOV	?V0 + 1,#0x1
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "%d00">` & 0xff)
        MOV	R5,#((`?<Constant "%d00">` >> 8) & 0xff)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(sprintf & 0xffff)
        MOV	A,#((sprintf >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  864   Print(4,80,Baud_rate,1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x50
        MOV	R1,#0x4
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  865   Print(6,0,"Data:",1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "Data:">` & 0xff)
        MOV	R5,#((`?<Constant "Data:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x6
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  866   UartTX_Send_String("ChengDu WXL Communication Technology C0.,LTD\n",45);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0x2d
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "ChengDu WXL Communica...">` & 0xff)
        MOV	R3,#((`?<Constant "ChengDu WXL Communica...">` >> 8) & 0xff)
        MOV	DPTR,#(UartTX_Send_String & 0xffff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  867   UartTX_Send_String("Uart RX test\n",13);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0xd
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "Uart RX test\\n">` & 0xff)
        MOV	R3,#((`?<Constant "Uart RX test\\n">` >> 8) & 0xff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  868   UartTX_Send_String("Baud rate:38400\n",16);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0x10
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "Baud rate:38400\\n">` & 0xff)
        MOV	R3,#((`?<Constant "Baud rate:38400\\n">` >> 8) & 0xff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  869   Uart_Rx_Flag = Open;
        MOV	DPTR,#Uart_Rx_Flag
        MOV	A,#0x1
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        LCALL	?Subroutine29 & 0xFFFF
//  870   Menu_option = Uart_RX_Menu_3;
??CrossCallReturnLabel_80:
        MOV	A,#0xf
        LCALL	?Subroutine6 & 0xFFFF
//  871   if(key == HAL_KEY_CANCEL)
??CrossCallReturnLabel_13:
        JNZ	??Uart_RX_0
//  872   {
//  873     Uart_Rx_Flag = Close;
        MOV	DPTR,#Uart_Rx_Flag
        LCALL	?Subroutine2 & 0xFFFF
//  874     Menu_option = Uart_Menu_2;
//  875     FirstItem = 0;
//  876     NowItem = 0;
//  877     Menu_all(0);
??CrossCallReturnLabel_51:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  878   }
//  879 }
??Uart_RX_0:
        LJMP	?Subroutine31 & 0xFFFF
        CFI EndBlock cfiBlock167
//  880 //********************************************************************************
//  881 //º¯ÊýÃû£ºvoid Uart_Pingpong(INT8U key);
//  882 //¹¦ÄÜ£º´®¿ÚÊÕ·¢²âÊÔ
//  883 //ÊäÈë£ºKEY
//  884 //Êä³ö£ºnull
//  885 //********************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  886 void Uart_Pingpong(INT8U key)
Uart_Pingpong:
        CFI Block cfiBlock168 Using cfiCommon0
        CFI Function Uart_Pingpong
//  887 {
        FUNCALL Uart_Pingpong, ClearScreen
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Pingpong, Uart_Baud_rate
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Pingpong, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_Pingpong, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_Pingpong, sprintf
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_Pingpong, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_Pingpong, Print
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL Uart_Pingpong, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Pingpong, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Pingpong, UartTX_Send_String
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Uart_Pingpong, Menu_all
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV	A,#-0x6
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	A,R1
        MOV	R6,A
//  888   uint8 Baud_rate[6];
//  889   ClearScreenLcd();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  890   Uart_Baud_rate(Baud_rate_38400);
        ; Setup parameters for call to function Uart_Baud_rate
        MOV	R2,#-0x80
        MOV	R3,#0x1
        MOV	DPTR,#(Uart_Baud_rate & 0xffff)
        MOV	A,#((Uart_Baud_rate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  891   Print(2,16,"Uart PP test",1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "Uart PP test">` & 0xff)
        MOV	R5,#((`?<Constant "Uart PP test">` >> 8) & 0xff)
        MOV	R2,#0x10
        MOV	R1,#0x2
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  892   Print(4,0,"Baud rate:",1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "Baud rate:">` & 0xff)
        MOV	R5,#((`?<Constant "Baud rate:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x4
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  893   sprintf(Baud_rate,(char *)"%d00",Baud_rate_38400);
        ; Setup parameters for call to function sprintf
        MOV	?V0 + 0,#-0x80
        MOV	?V0 + 1,#0x1
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "%d00">` & 0xff)
        MOV	R5,#((`?<Constant "%d00">` >> 8) & 0xff)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(sprintf & 0xffff)
        MOV	A,#((sprintf >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  894   Print(4,80,Baud_rate,1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x50
        MOV	R1,#0x4
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  895   Print(6,0,"Data:",1);
        ; Setup parameters for call to function Print
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#(`?<Constant "Data:">` & 0xff)
        MOV	R5,#((`?<Constant "Data:">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x6
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  896   UartTX_Send_String("ChengDu WXL Communication Technology C0.,LTD\n",45);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0x2d
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "ChengDu WXL Communica...">` & 0xff)
        MOV	R3,#((`?<Constant "ChengDu WXL Communica...">` >> 8) & 0xff)
        MOV	DPTR,#(UartTX_Send_String & 0xffff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  897   UartTX_Send_String("Uart Pingpong test\n",19);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0x13
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "Uart Pingpong test\\n">` & 0xff)
        MOV	R3,#((`?<Constant "Uart Pingpong test\\n">` >> 8) & 0xff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  898   UartTX_Send_String("Baud rate:38400\n",16);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0x10
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "Baud rate:38400\\n">` & 0xff)
        MOV	R3,#((`?<Constant "Baud rate:38400\\n">` >> 8) & 0xff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  899   Uart_PP_Flag = Open;
        MOV	DPTR,#Uart_PP_Flag
        MOV	A,#0x1
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        LCALL	?Subroutine29 & 0xFFFF
//  900   Menu_option = Uart_PP_Menu_3;
??CrossCallReturnLabel_81:
        MOV	A,#0x10
        LCALL	?Subroutine6 & 0xFFFF
//  901   if(key == HAL_KEY_CANCEL)
??CrossCallReturnLabel_14:
        JNZ	??Uart_Pingpong_0
//  902   {
//  903     Uart_PP_Flag = Close;
        MOV	DPTR,#Uart_PP_Flag
        LCALL	?Subroutine2 & 0xFFFF
//  904     Menu_option = Uart_Menu_2;
//  905     FirstItem = 0;
//  906     NowItem = 0;
//  907     Menu_all(0);
??CrossCallReturnLabel_52:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  908   }
//  909 }
??Uart_Pingpong_0:
        LJMP	?Subroutine31 & 0xFFFF
        CFI EndBlock cfiBlock168
//  910 
//  911 
//  912 #ifndef ZG_Coord
//  913 extern int Sensor_Flag;
//  914 //****************************************************************************
//  915 //º¯ÊýÃû£ºuint16 ReadBattery_menu(INT8U key)
//  916 //¹¦  ÄÜ£º¶ÁµçÔ´µçÑ¹
//  917 //Êä  Èë£ºkey
//  918 //Êä  ³ö£º
//  919 //****************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond169 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker171 Using cfiCommon1
        CFI (cfiPicker171) NoFunction
        CFI (cfiPicker171) Picker
        MOV	DPTR,#Sensor_Flag
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        LJMP	?Subroutine29 & 0xFFFF
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiPicker171

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond172 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker178 Using cfiCommon1
        CFI (cfiPicker178) NoFunction
        CFI (cfiPicker178) Picker
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
        MOV	A,#0x4
        XRL	A,R6
        RET
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiPicker178

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  920 void ReadBattery_menu(INT8U key)
ReadBattery_menu:
        CFI Block cfiBlock179 Using cfiCommon0
        CFI Function ReadBattery_menu
//  921 {
        FUNCALL ReadBattery_menu, ClearScreen
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ReadBattery_menu, Print
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ReadBattery_menu, Menu_all
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  922   ClearScreenLcd();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  923   Print(2,0,"Power value",1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#(`?<Constant "Power value">` & 0xff)
        MOV	R5,#((`?<Constant "Power value">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x2
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  924   Sensor_Flag = Sensor_ReadBattery;
        MOV	DPTR,#Sensor_Flag
        MOV	A,#0x1
        LCALL	?Subroutine6 & 0xFFFF
//  925   if(key == HAL_KEY_CANCEL)
??CrossCallReturnLabel_15:
        JNZ	??ReadBattery_menu_0
//  926   {
//  927     Sensor_Flag = 0;
        LCALL	?Subroutine12 & 0xFFFF
//  928     Menu_option = Sensor_Menu_2;
??CrossCallReturnLabel_75:
        MOV	A,#0x3
        LCALL	??Subroutine2_1 & 0xFFFF
//  929     FirstItem = 0;
//  930     NowItem = 0;
//  931     Menu_all(0);
??CrossCallReturnLabel_54:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  932   }
//  933 
//  934 }
??ReadBattery_menu_0:
        LJMP	??Subroutine31_1 & 0xFFFF
        CFI EndBlock cfiBlock179
//  935 
//  936 //****************************************************************************
//  937 //º¯ÊýÃû£ºuint16 Temp_menu(INT8U key)
//  938 //¹¦  ÄÜ£º¶ÁÆ¬ÄÚÎÂ¶È²Ëµ¥
//  939 //Êä  Èë£ºkey
//  940 //Êä  ³ö£º
//  941 //****************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  942 void Temp_menu(INT8U key)
Temp_menu:
        CFI Block cfiBlock180 Using cfiCommon0
        CFI Function Temp_menu
//  943 {
        FUNCALL Temp_menu, ClearScreen
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL Temp_menu, Print
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL Temp_menu, Menu_all
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  944   ClearScreenLcd();
        ; Setup parameters for call to function ClearScreen
        MOV	DPTR,#(ClearScreen & 0xffff)
        MOV	A,#((ClearScreen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  945   Print(2,0,"Temp value",1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#(`?<Constant "Temp value">` & 0xff)
        MOV	R5,#((`?<Constant "Temp value">` >> 8) & 0xff)
        MOV	R2,#0x0
        MOV	R1,#0x2
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  946   Sensor_Flag = Sensor_Temp;
        MOV	DPTR,#Sensor_Flag
        MOV	A,#0x2
        LCALL	?Subroutine6 & 0xFFFF
//  947   if(key == HAL_KEY_CANCEL)
??CrossCallReturnLabel_16:
        JNZ	??Temp_menu_0
//  948   {
//  949     Sensor_Flag = 0;
        LCALL	?Subroutine12 & 0xFFFF
//  950     Menu_option = Sensor_Menu_2;
??CrossCallReturnLabel_76:
        MOV	A,#0x3
        LCALL	??Subroutine2_1 & 0xFFFF
//  951     FirstItem = 0;
//  952     NowItem = 0;
//  953     Menu_all(0);
??CrossCallReturnLabel_55:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  954   }
//  955 
//  956 }
??Temp_menu_0:
        LJMP	??Subroutine31_1 & 0xFFFF
        CFI EndBlock cfiBlock180

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond181 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker183 Using cfiCommon1
        CFI (cfiPicker183) NoFunction
        CFI (cfiPicker183) Picker
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 16)
??Subroutine2_0:
        MOV	DPTR,#Menu_option
        MOV	A,#0x2
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 10)
??Subroutine2_1:
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 10)
??Subroutine2_2:
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_68:
        LJMP	?Subroutine27 & 0xFFFF
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiPicker183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
//  957 //****************************************************************************
//  958 //º¯ÊýÃû£ºuint16 Read_Temp(void)
//  959 //¹¦  ÄÜ£º¶ÁµçÔ´µçÑ¹
//  960 //Êä  Èë£ºkey
//  961 //Êä  ³ö£º
//  962 //****************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  963 uint16 Read_Temp(void)
Read_Temp:
        CFI Block cfiBlock189 Using cfiCommon0
        CFI Function Read_Temp
//  964 {
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  965   uint16 value;
//  966   ADCIF = 0;//Çå³ýADC±êÖ¾
        CLR	0x88.5
//  967   ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_512 | HAL_ADC_CHN_TEMP);        //²ÉÓÃÄÚ²¿»ù×¼£¬12Î»ADC£¬ÎÂ¶ÈÍ¨µÀ
        MOV	0xb6,#0x3e
//  968   while ( !ADCIF );//µÈµ½×ª»¯Íê³É
??Read_Temp_0:
        MOV	C,0x88.5
        JNC	??Read_Temp_0
//  969   value = ADCL;
        MOV	R2,0xba
        MOV	DPL,R2
        MOV	R0,DPL
//  970   value |= ((uint16) ADCH) << 8;      //È¡ADCÖµ
        MOV	A,0xbb
        MOV	R2,A
        CLR	A
        XCH	A,R2
        MOV	R1,A
//  971   /*
//  972    * ´Ó0µ½0x8000±íÊ¾0µ½1.25V
//  973    * 0¡æ = 0.763 V = 20002
//  974    * ÎÂ¶ÈÏµÊý = 0.0024 V/C = 62.9 /C
//  975    * ÉÏÃæµÄ²ÎÊý¶¼ÊÇµäÐÍÖµÐèÒªÐ£×¼Çë²Î¼ûÊý¾ÝÊÖ²á
//  976    */
//  977 #define VOLTAGE_AT_TEMP_ZERO      20002   // 0.763 V
//  978 #define TEMP_COEFFICIENT          63.9    // 0.0024 V/C
//  979 
//  980   // ×îµÍÎÂ¶ÈÏÞÖÆ
//  981   if ( value < VOLTAGE_AT_TEMP_ZERO )
        CLR	C
        MOV	A,R0
        SUBB	A,#0x22
        MOV	A,R1
        SUBB	A,#0x4e
        JNC	??Read_Temp_1
//  982     value = VOLTAGE_AT_TEMP_ZERO;
        MOV	R0,#0x22
        MOV	R1,#0x4e
//  983 
//  984   value = value - VOLTAGE_AT_TEMP_ZERO;
??Read_Temp_1:
        MOV	A,R0
        ADD	A,#-0x22
        MOV	R0,A
        MOV	A,R1
        ADDC	A,#-0x4f
        MOV	R1,A
//  985 
//  986   //×î¸ßÎÂ¶ÈÏÞÖÆ
//  987   if ( value > TEMP_COEFFICIENT * 99 )
        CLR	C
        MOV	A,R0
        SUBB	A,#-0x49
        MOV	A,R1
        SUBB	A,#0x18
        JC	??Read_Temp_2
//  988     value = TEMP_COEFFICIENT * 99;
        MOV	R0,#-0x4a
        MOV	R1,#0x18
//  989 
//  990   return ( (uint8)(value/TEMP_COEFFICIENT) );
??Read_Temp_2:
        MOV	?V0 + 0,R0
        MOV	?V0 + 1,R1
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R2
        MOV	R0,#?V0 + 0
        LCALL	?UL_TO_FLT
        MOV	DPTR,#__Constant_427f999a
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	R0,#?V0 + 0
        MOV	R1,#?V0 + 4
        LCALL	?FLT_DIV
        MOV	R0,#?V0 + 0
        LCALL	?FLT_TO_L
        MOV	R2,?V0 + 0
        MOV	R3,#0x0
        CFI EndBlock cfiBlock189
        REQUIRE ?Subroutine32
        ; // Fall through to label ?Subroutine32
//  991 
//  992 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiBlock190 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock190
//  993 
//  994 
//  995 
//  996 //****************************************************************************
//  997 //º¯ÊýÃû£ºuint16 ReadBattery(void)
//  998 //¹¦  ÄÜ£º¶ÁµçÔ´µçÑ¹
//  999 //Êä  Èë£ºkey
// 1000 //Êä  ³ö£º
// 1001 //****************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1002 uint16 ReadBattery(void)
ReadBattery:
        CFI Block cfiBlock191 Using cfiCommon0
        CFI Function ReadBattery
// 1003 {
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 1004    uint16 value;
// 1005 
// 1006   ADCIF = 0;    //Çå³ýADCÖÐ¶Ï±êÖ¾
        CLR	0x88.5
// 1007 
// 1008   ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_128 | HAL_ADC_CHN_VDD3);          //Ñ¡ÔñÄÚ²¿»ù×¼£¬ÓÃ10Î»ADC£¬¼ì²âµçÔ´µçÑ¹
        MOV	0xb6,#0x1f
// 1009 
// 1010   /*µÈ´ý×ª»»Íê³É*/
// 1011   while ( !ADCIF );
??ReadBattery_0:
        MOV	C,0x88.5
        JNC	??ReadBattery_0
// 1012 
// 1013   //·µ»Ø½á¹û
// 1014   value = ADCL;
        MOV	R2,0xba
        MOV	DPL,R2
        MOV	?V0 + 0,DPL
// 1015   value |= ((uint16) ADCH) << 8;
        MOV	A,0xbb
        MOV	?V0 + 1,A
// 1016 
// 1017   /*
// 1018    * Õâ¸öÖµÊÇ²âÁ¿µçÔ´µçÑ¹Öµ
// 1019    * 1.25V 0±íÊ¾0V£¬32767±íÊ¾1.25V
// 1020    * voltage = (value*3*1.25)/32767 volts
// 1021    * Ôö¼Ó10±¶µçÔ´µçÑ¹£¬ÒÔ±íÊ¾ÓÐÐ¡Ê÷Î»Ôö¼Ó¾«¶È
// 1022    */
// 1023 
// 1024   value = value >> 6;   // divide first by 2^6
// 1025   value = value * 37.5;
// 1026   value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
// 1027 
// 1028   return value;
        MOV	A,#0x6
        MOV	R0,#?V0 + 0
        LCALL	?US_SHR
        MOV	?V0 + 2,A
        MOV	?V0 + 3,A
        MOV	R0,#?V0 + 0
        LCALL	?UL_TO_FLT
        MOV	DPTR,#__Constant_42160000
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	R0,#?V0 + 0
        MOV	R1,#?V0 + 4
        LCALL	?FLT_MUL
        MOV	R0,#?V0 + 0
        LCALL	?FLT_TO_L
        MOV	A,#0x9
        MOV	R0,#?V0 + 0
        LCALL	?US_SHR
        MOV	R2,?V0 + 0
        MOV	R3,A
        SJMP	?Subroutine32
        CFI EndBlock cfiBlock191
// 1029 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "3:Pingpong Test "`:
        DB "3:Pingpong Test "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Uart send test">>`:
        DB "Uart send test"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Baud rate:">>`:
        DB "Baud rate:"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "%d00">>`:
        DB "%d00"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Data:hello word!"`:
        DB "Data:hello word!"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ChengDu WXL Commu`:
        DB "ChengDu WXL Communication Technology C0.,LTD\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "IEEE Add:(Hex)">>`:
        DB "IEEE Add:(Hex)"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Uart send test\\n"`:
        DB "Uart send test\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Baud rate:38400\\n`:
        DB "Baud rate:38400\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Exit\\n">>`:
        DB "Exit\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Uart Rx test">>`:
        DB "Uart Rx test"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Data:">>`:
        DB "Data:"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Uart RX test\\n">>`:
        DB "Uart RX test\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Uart PP test">>`:
        DB "Uart PP test"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Uart Pingpong tes`:
        DB "Uart Pingpong test\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Power value">>`:
        DB "Power value"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Temp value">>`:
        DB "Temp value"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "1:ZigBee Test   "`:
        DB "1:ZigBee Test   "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "2:Uart Test     "`:
        DB "2:Uart Test     "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "3:Sensor Test   "`:
        DB "3:Sensor Test   "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "4:About         "`:
        DB "4:About         "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "1:Send Test     "`:
        DB "1:Send Test     "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "2:Network nod   "`:
        DB "2:Network nod   "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "1:Single Send   "`:
        DB "1:Single Send   "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "2:Continuous    "`:
        DB "2:Continuous    "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "1:Short Addr    "`:
        DB "1:Short Addr    "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "2:Broadcast Send"`:
        DB "2:Broadcast Send"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "hello">>`:
        DB "hello"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Consecution Tx">>`:
        DB "Consecution Tx"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Name:">>`:
        DB "Name:"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "hello word!\\n">>`:
        DB "hello word!\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Short Add:">>`:
        DB "Short Add:"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "NO JOIN NODE">>`:
        DB "NO JOIN NODE"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "3w.c51rf.com">>`:
        DB "3w.c51rf.com"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Send Data:">>`:
        DB "Send Data:"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "S_Data:">>`:
        DB "S_Data:"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "R_Data:">>`:
        DB "R_Data:"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "c51rf.com">>`:
        DB "c51rf.com"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "%d">>`:
        DB "%d"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Short add:">>`:
        DB "Short add:"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "1:Power Check   "`:
        DB "1:Power Check   "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "2:Temp Check    "`:
        DB "2:Temp Check    "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "1:Tx Test       "`:
        DB "1:Tx Test       "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "2:Rx Test       "`:
        DB "2:Rx Test       "

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for TopDisp>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Menu_option>`:
        DW 6

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_427f999a>`:
        DD 427F999AH

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_42160000>`:
        DD 42160000H

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DS 1

        END
// 1030 
// 1031 #endif
// 
// 4 780 bytes in segment BANKED_CODE
//     4 bytes in segment SFR_AN
//   631 bytes in segment XDATA_I
//   631 bytes in segment XDATA_ID
//   261 bytes in segment XDATA_Z
// 
// 5 403 bytes of CODE  memory (+ 8 bytes shared)
//     0 bytes of DATA  memory (+ 4 bytes shared)
//   884 bytes of XDATA memory (+ 8 bytes shared)
//
//Errors: none
//Warnings: 7
