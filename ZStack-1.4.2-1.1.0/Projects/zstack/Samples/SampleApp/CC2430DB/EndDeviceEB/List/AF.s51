//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:52:29 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\stack\af\AF.c                                 /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wE /
//                          ndev.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS  /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          MT_TASK -D ZG_ENDDEVICE -lC                      /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\ -lA           /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\EndDeviceEB\Obj\ -e          /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\stack\af\AF.c"                               /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\AF.s51         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME AF

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?G_EQ
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??afBuildMSGIncoming,021203H
        ARGFRAME XSTACK, 32, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        FUNCTION ??afFindEndPointDescList,0203H
        ARGFRAME XSTACK, 25, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC AF_DataRequest
        FUNCTION AF_DataRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC afCopyAddress
        FUNCTION afCopyAddress,0203H
        ARGFRAME XSTACK, 21, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDataConfirm
        FUNCTION afDataConfirm,021203H
        ARGFRAME XSTACK, 43, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afDataReqMTU
        FUNCTION afDataReqMTU,021203H
        ARGFRAME XSTACK, 43, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afEndPoints
        FUNCTION afEndPoints,0203H
        LOCFRAME ISTACK, 3, STACK
        PUBLIC afFindEndPointDesc
        FUNCTION afFindEndPointDesc,021203H
        ARGFRAME XSTACK, 25, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afFindSimpleDesc
        FUNCTION afFindSimpleDesc,021203H
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afGetMatch
        FUNCTION afGetMatch,021203H
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afGetReflector
        FUNCTION afGetReflector,021203H
        ARGFRAME XSTACK, 43, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afIncomingData
        FUNCTION afIncomingData,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC afInit
        FUNCTION afInit,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afNumEndPoints
        FUNCTION afNumEndPoints,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afRegister
        FUNCTION afRegister,021203H
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afRegisterExtended
        FUNCTION afRegisterExtended,021203H
        ARGFRAME XSTACK, 14, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afSetMatch
        FUNCTION afSetMatch,021203H
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afSetReflector
        FUNCTION afSetReflector,021203H
        LOCFRAME XSTACK, 10, STACK
        PUBLIC epList
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME XSTACK, 21, STACK
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME XSTACK, 21, STACK
        EXTERN NLME_GetProtocolVersion
        FUNCTION NLME_GetProtocolVersion,0202H
        ARGFRAME XSTACK, 25, STACK
        EXTERN aps_FindGroupForEndpoint
        FUNCTION aps_FindGroupForEndpoint,0202H
        ARGFRAME XSTACK, 25, STACK
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME XSTACK, 43, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 24, STACK
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME XSTACK, 43, STACK
        EXTERN APSDE_DataReq
        FUNCTION APSDE_DataReq,0202H
        ARGFRAME XSTACK, 43, STACK
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME XSTACK, 43, STACK
        EXTERN APSDE_DataReqMTU
        FUNCTION APSDE_DataReqMTU,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN apsfSendFragmented

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\af\AF.c
//    1 /*********************************************************************
//    2   Filename:       AF.c
//    3   Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
//    4   Revision:       $Revision: 14296 $
//    5 
//    6   Description:    General Operational Framework
//    7                   - Device Description helper functions
//    8 
//    9   Notes:
//   10 
//   11   If supporting KVP, then afRegister() ties endpoint to KVP only in V2.
//   12   If KVP in V2,
//   13 
//   14   Copyright (c) 2006 by Texas Instruments, Inc.
//   15   All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   16   derivative works, modify, distribute, perform, display or sell this
//   17   software and/or its documentation for any purpose is prohibited
//   18   without the express written consent of Texas Instruments, Inc.
//   19 *********************************************************************/
//   20 
//   21 /*********************************************************************
//   22  * INCLUDES
//   23  */
//   24 
//   25 #include "OSAL.h"
//   26 #include "AF.h"
//   27 #include "nwk_globals.h"
//   28 #include "nwk_util.h"
//   29 #include "aps_groups.h"
//   30 #include "ZDProfile.h"
//   31 #include "aps_frag.h"
//   32 
//   33 #if ( AF_FLOAT_SUPPORT )
//   34   #include "math.h"
//   35 #endif
//   36 
//   37 #if defined ( MT_AF_CB_FUNC )
//   38   #include "MT_AF.h"
//   39 #endif
//   40 
//   41 /*********************************************************************
//   42  * MACROS
//   43  */
//   44 
//   45 /*********************************************************************
//   46  * @fn      afSend
//   47  *
//   48  * @brief   Helper macro for V1 API to invoke V2 API.
//   49  *
//   50  * input parameters
//   51  *
//   52  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//   53  * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
//   54  * @param   cID - A valid cluster ID as specified by the Profile.
//   55  * @param   len - Number of bytes of data pointed to by next param.
//   56  * @param  *buf - A pointer to the data bytes to send.
//   57  * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
//   58  * @param  *transID - A pointer to a byte which can be modified and which will
//   59  *                    be used as the transaction sequence number of the msg.
//   60  *
//   61  * output parameters
//   62  *
//   63  * @param  *transID - Incremented by one if the return value is success.
//   64  *
//   65  * @return  afStatus_t - See previous definition of afStatus_... types.
//   66  */
//   67 #if ( AF_V1_SUPPORT )
//   68 #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \ 
//   69         afDataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \ 
//   70                           (cID), (len), (buf), (transID), (options), (radius) )
//   71 #else
//   72 #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \ 
//   73         AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \ 
//   74                           (cID), (len), (buf), (transID), (options), (radius) )
//   75 #endif
//   76 
//   77 /*********************************************************************
//   78  * CONSTANTS
//   79  */
//   80 
//   81 /*********************************************************************
//   82  * TYPEDEFS
//   83  */
//   84 
//   85 #if ( AF_KVP_SUPPORT )
//   86 typedef struct
//   87 {
//   88   uint16 clusterID;
//   89   byte transCount;
//   90   byte options;
//   91   byte srcEP;
//   92   afAddrType_t dstAddr;	
//   93   uint16 msgLen;
//   94   byte *msg;
//   95 } afMultiHdr_t;
//   96 #endif
//   97 
//   98 /*********************************************************************
//   99  * GLOBAL VARIABLES
//  100  */
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  102 epList_t *epList;
epList:
        DS 2
//  103 
//  104 /*********************************************************************
//  105  * EXTERNAL VARIABLES
//  106  */
//  107 
//  108 /*********************************************************************
//  109  * EXTERNAL FUNCTIONS
//  110  */
//  111 
//  112 /*********************************************************************
//  113  * LOCAL VARIABLES
//  114  */
//  115 
//  116 /*********************************************************************
//  117  * LOCAL FUNCTIONS
//  118  */
//  119 
//  120 #if ( AF_KVP_SUPPORT )
//  121 static void afBuildKVPIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  122                 zAddrType_t *SrcAddress, uint8 LinkQuality, byte SecurityUse );
//  123 #endif
//  124 
//  125 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  126                 zAddrType_t *SrcAddress, uint8 LinkQuality, byte SecurityUse,
//  127                 uint32 timestamp );
//  128 
//  129 #if ( AF_KVP_SUPPORT )
//  130 static afMultiHdr_t *multiInit( afAddrType_t *dstAddr,
//  131                      byte srcEndPoint, uint16 clusterID, byte FrameType,
//  132                      byte txOptions, bool DiscoverRoute, byte RadiusCounter );
//  133 
//  134 static bool multiAppend( afMultiHdr_t *hdr, byte bufLen, byte *buf,
//  135        byte CommandType, byte AttribDataType, uint16 AttribId, byte ErrorCode );
//  136 
//  137 static afStatus_t multiSend( afMultiHdr_t *hdr, byte *seqNum, byte radius );
//  138 #endif
//  139 
//  140 #if ( AF_V1_SUPPORT )
//  141 static afStatus_t afDataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
//  142                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  143                            uint8 options, uint8 radius );
//  144 #endif
//  145 
//  146 static epList_t *afFindEndPointDescList( byte EndPoint );
//  147 
//  148 static pDescCB afGetDescCB( endPointDesc_t *epDesc );
//  149 
//  150 /*********************************************************************
//  151  * NETWORK LAYER CALLBACKS
//  152  */
//  153 
//  154 /*********************************************************************
//  155  * PUBLIC FUNCTIONS
//  156  */
//  157 
//  158 /*********************************************************************
//  159  * @fn      afInit
//  160  *
//  161  * @brief   Initialization function for the AF.
//  162  *
//  163  * @param   none
//  164  *
//  165  * @return  none
//  166  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  167 void afInit( void )
afInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function afInit
//  168 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  169   // Start with no endpoint defined
//  170   epList = NULL;
        MOV	DPTR,#epList
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  171 }
        LJMP	?Subroutine30 & 0xFFFF
        CFI EndBlock cfiBlock0
//  172 
//  173 /*********************************************************************
//  174  * @fn      afRegisterExtended
//  175  *
//  176  * @brief   Register an Application's EndPoint description.
//  177  *
//  178  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  179  * @param   descFn - pointer to descriptor callback function
//  180  *
//  181  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  182  *
//  183  * @return  Pointer to epList_t on success, NULL otherwise.
//  184  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  185 epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
afRegisterExtended:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function afRegisterExtended
//  186 {
        FUNCALL afRegisterExtended, osal_mem_alloc
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 2,A
//  187   epList_t *ep;
//  188   epList_t *epSearch;
//  189 
//  190   ep = osal_mem_alloc( sizeof ( epList_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV	R2,#0xa
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  191   if ( ep )
        MOV	A,R2
        JNZ	??afRegisterExtended_0
        MOV	A,R3
??afRegisterExtended_0:
        JZ	??afRegisterExtended_1
//  192   {
//  193     // Fill in the new list entry
//  194     ep->epDesc = epDesc;
        MOV	DPL,R2
        MOV	DPH,R3
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R7
        LCALL	?Subroutine2 & 0xFFFF
//  195     #if !defined ( REFLECTOR )
//  196     ep->reflectorAddr = NWK_PAN_COORD_ADDR;
??CrossCallReturnLabel_2:
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  197     #else
//  198     ep->reflectorAddr = INVALID_NODE_ADDR;
//  199     #endif
//  200     // Default to allow Match Descriptor.
//  201     ep->flags = eEP_AllowMatch;
        MOV	A,#0x1
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine1 & 0xFFFF
//  202 #if ( AF_KVP_SUPPORT )
//  203     ep->flags |= ((epDesc->endPoint == ZDO_EP) ? 0 : eEP_UsesKVP);
//  204 #endif
//  205     ep->pfnDescCB = descFn;
??CrossCallReturnLabel_101:
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 1
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 2
        LCALL	?Subroutine1 & 0xFFFF
//  206     ep->nextDesc = NULL;
??CrossCallReturnLabel_102:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  207 
//  208     // Does a list exist?
//  209     if ( epList == NULL )
        MOV	DPTR,#epList
        MOVX	A,@DPTR
        JNZ	??afRegisterExtended_2
        INC	DPTR
        MOVX	A,@DPTR
??afRegisterExtended_2:
        MOV	DPTR,#epList
        JZ	??afRegisterExtended_3
//  210       epList = ep;  // Make this the first entry
//  211     else
//  212     {
//  213       // Look for the end of the list
//  214       epSearch = epList;
//  215       while( epSearch->nextDesc != NULL )
//  216         epSearch = epSearch->nextDesc;
??afRegisterExtended_4:
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_54:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JNZ	??afRegisterExtended_5
        INC	DPTR
        MOVX	A,@DPTR
??afRegisterExtended_5:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        JNZ	??afRegisterExtended_4
//  217 
//  218       // Add new entry to end of list
//  219       epSearch->nextDesc = ep;
??afRegisterExtended_3:
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        CFI EndBlock cfiBlock1
//  220     }
//  221   }
//  222 
//  223   return ep;
??afRegisterExtended_1:
        REQUIRE ?Subroutine31
        ; // Fall through to label ?Subroutine31
//  224 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_102
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOVX	@DPTR,A
        MOV	DPL,R2
        MOV	DPH,R3
        LJMP	?Subroutine32 & 0xFFFF
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  225 
//  226 /*********************************************************************
//  227  * @fn      afRegister
//  228  *
//  229  * @brief   Register an Application's EndPoint description.
//  230  *
//  231  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  232  *
//  233  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  234  *
//  235  * @return  afStatus_SUCCESS - Registered
//  236  *          afStatus_MEM_FAIL - not enough memory to add descriptor
//  237  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  238 afStatus_t afRegister( endPointDesc_t *epDesc )
afRegister:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function afRegister
//  239 {
        FUNCALL afRegister, afRegisterExtended
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xb
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  240   epList_t *ep = afRegisterExtended( epDesc, NULL );
//  241 
//  242   return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
        ; Setup parameters for call to function afRegisterExtended
        MOV	?V0 + 0,#0x0
        MOV	?V0 + 1,#0x0
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	DPTR,#(afRegisterExtended & 0xffff)
        MOV	A,#((afRegisterExtended >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R2
        JNZ	??afRegister_0
        MOV	A,R3
??afRegister_0:
        JNZ	??afRegister_1
        MOV	R1,#-0x7f
        SJMP	??afRegister_2
??afRegister_1:
        MOV	R1,#0x0
??afRegister_2:
        MOV	R7,#0x3
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  243 }
//  244 
//  245 #if ( AF_KVP_SUPPORT )
//  246 /*********************************************************************
//  247  * @fn      afRegisterFlags
//  248  *
//  249  * @brief   Register an Application's EndPoint description.
//  250  *
//  251  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  252  *
//  253  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  254  *
//  255  * @return  afStatus_SUCCESS - Registered
//  256  *          afStatus_MEM_FAIL - not enough memory to add descriptor
//  257  */
//  258 afStatus_t afRegisterFlags( endPointDesc_t *epDesc, eEP_Flags flags )
//  259 {
//  260   epList_t *ep = afRegisterExtended( epDesc, NULL );
//  261 
//  262   if ( ep != NULL )
//  263   {
//  264     ep->flags = flags;
//  265     return afStatus_SUCCESS;
//  266   }
//  267   else
//  268   {
//  269     return afStatus_MEM_FAIL;
//  270   }
//  271 }
//  272 #endif
//  273 
//  274 /*********************************************************************
//  275  * @fn          afDataConfirm
//  276  *
//  277  * @brief       This function will generate the Data Confirm back to
//  278  *              the application.
//  279  *
//  280  * @param       endPoint - confirm end point
//  281  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  282  * @param       status - status of APSDE_DATA_REQUEST
//  283  *
//  284  * @return      none
//  285  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  286 void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
afDataConfirm:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function afDataConfirm
//  287 {
        FUNCALL afDataConfirm, afFindEndPointDesc
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL afDataConfirm, osal_msg_allocate
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL afDataConfirm, osal_msg_send
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	?V0 + 0,R1
        MOV	?V0 + 1,R3
//  288   endPointDesc_t *epDesc;
//  289   afDataConfirm_t *msgPtr;
//  290 
//  291   // Find the endpoint description
//  292   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV	DPTR,#(afFindEndPointDesc & 0xffff)
        MOV	A,#((afFindEndPointDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R6,?V0 + 2
        MOV	R7,?V0 + 3
//  293   if ( epDesc == NULL )
        MOV	A,R6
        JNZ	??afDataConfirm_0
        MOV	A,R7
??afDataConfirm_0:
        JZ	??afDataConfirm_1
//  294     return;
//  295 
//  296   // Determine the incoming command type
//  297   msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	R2,#0x4
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  298   if ( msgPtr )
        MOV	A,R2
        JNZ	??afDataConfirm_2
        MOV	A,R3
??afDataConfirm_2:
        JZ	??afDataConfirm_1
//  299   {
//  300     // Build the Data Confirm message
//  301     msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
        MOV	A,#-0x3
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
//  302     msgPtr->hdr.status = status;
        INC	DPTR
        MOV	A,?V0 + 1
        LCALL	?Subroutine2 & 0xFFFF
//  303     msgPtr->endpoint = endPoint;
??CrossCallReturnLabel_3:
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
//  304 #if ( AF_V1_SUPPORT )
//  305     msgPtr->transID = transID;
//  306 #elif ( AF_KVP_SUPPORT )
//  307     {
//  308       epList_t *pList = afFindEndPointDescList( endPoint );
//  309       if ( pList )
//  310       {
//  311         if ( pList->flags & eEP_UsesKVP )
//  312         {
//  313           msgPtr->transID = transID;
//  314         }
//  315       }
//  316     }
//  317 #else
//  318     (void)transID;
//  319 #endif
//  320 
//  321     // send message through task message
//  322     osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL	?BCALL               ; Banked call to: DPTR()
??afDataConfirm_1:
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//  323   }
//  324 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOVX	@DPTR,A
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
//  325 
//  326 /*********************************************************************
//  327  * @fn          afIncomingData
//  328  *
//  329  * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
//  330  *
//  331  * @param       aff  - pointer to APS frame format
//  332  * @param       SrcAddress  - Source address
//  333  * @param       LinkQuality - incoming message's link quality
//  334  * @param       SecurityUse - Security enable/disable
//  335  *
//  336  * @return      none
//  337  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  338 void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress,
afIncomingData:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function afIncomingData
//  339                      uint8 LinkQuality, byte SecurityUse, uint32 timestamp )
//  340 {
        FUNCALL afIncomingData, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL afIncomingData, ??afFindEndPointDescList
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL afIncomingData, osal_mem_free
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL afIncomingData, ??afBuildMSGIncoming
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL afIncomingData, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV	A,#-0x9
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	A,#0x7
        LCALL	?XSTACK_DISP0_8
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOV	A,R1
        MOVX	@DPTR,A
        MOV	A,#0x1a
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
//  341   endPointDesc_t *epDesc = NULL;
//  342   uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOV	A,#-0x1
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  343   epList_t *pList;
//  344   uint8 grpEp;
//  345 
//  346   if ( (NLME_GetProtocolVersion() != ZB_PROT_V1_0)
//  347       && ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JZ	??afIncomingData_0
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_34:
        JNZ	??afIncomingData_0
//  348   {
//  349     // Find the first endpoint for this group
//  350     grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV	R1,#-0x2
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R7,A
//  351     if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
        MOV	A,#-0x2
        XRL	A,R7
        JNZ	$+5
        LJMP	??afIncomingData_1 & 0xFFFF
//  352       return;   // No endpoint found
//  353 
//  354     epDesc = afFindEndPointDesc( grpEp );
??afIncomingData_2:
        ; Setup parameters for call to function afFindEndPointDesc
        MOV	A,R7
        MOV	R1,A
        MOV	DPTR,#(afFindEndPointDesc & 0xffff)
        MOV	A,#((afFindEndPointDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
//  355     if ( epDesc == NULL )
        MOV	A,R2
        JNZ	??afIncomingData_3
        MOV	A,R3
??afIncomingData_3:
        JNZ	$+5
        LJMP	??afIncomingData_1 & 0xFFFF
//  356       return;   // Endpoint descriptor not found
//  357 
//  358     pList = afFindEndPointDescList( epDesc->endPoint );
??afIncomingData_4:
        ; Setup parameters for call to function afFindEndPointDescList
        MOV	DPL,?V0 + 6
        MOV	DPH,?V0 + 7
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(??afFindEndPointDescList & 0xffff)
        MOV	A,#((??afFindEndPointDescList >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        SJMP	??afIncomingData_5
//  359   }
//  360   else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_0:
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_41:
        JNZ	??afIncomingData_6
//  361   {
//  362     // Set the list
//  363     if ( (pList = epList) )
        MOV	DPTR,#epList
        LCALL	??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??afIncomingData_7
        INC	DPTR
        MOVX	A,@DPTR
??afIncomingData_7:
        JNZ	$+5
        LJMP	??afIncomingData_1 & 0xFFFF
//  364     {
//  365       epDesc = pList->epDesc;
??afIncomingData_8:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV	?V0 + 6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
        SJMP	??afIncomingData_5
//  366     }
//  367   }
//  368   else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
??afIncomingData_6:
        ; Setup parameters for call to function afFindEndPointDesc
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(afFindEndPointDesc & 0xffff)
        MOV	A,#((afFindEndPointDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	R0,?V0 + 4
        MOV	R1,?V0 + 5
        MOV	?V0 + 6,R0
        MOV	?V0 + 7,R1
        MOV	A,R0
        JNZ	??afIncomingData_9
        MOV	A,R1
??afIncomingData_9:
        JNZ	??afIncomingData_4
//  369   {
//  370     pList = afFindEndPointDescList( epDesc->endPoint );
//  371   }
//  372 
//  373   while ( epDesc )
??afIncomingData_5:
        MOV	A,?V0 + 6
        JNZ	??afIncomingData_10
        MOV	A,?V0 + 7
??afIncomingData_10:
        JNZ	$+5
        LJMP	??afIncomingData_1 & 0xFFFF
//  374   {
//  375     if ( pList->pfnDescCB )
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV	DPL,?V0 + 6
        MOV	DPH,?V0 + 7
        JZ	??afIncomingData_11
//  376     {
//  377       uint16 *pID = (uint16 *)(pList->pfnDescCB(
//  378                                  AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
        ; Setup parameters for indirect call
        MOVX	A,@DPTR
        MOV	R0,#0x2
        MOV	R4,A
        MOV	A,R0
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R1,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPL,R1
        MOV	DPH,R2
        XCH	A,R4
        MOV	R2,A
        MOV	A,R4
        XCH	A,R0
        MOV	R1,A
        MOV	A,R0
        LCALL	?BCALL               ; Banked call to: DPTR()
//  379       if ( pID )
        MOV	A,R2
        JNZ	??afIncomingData_12
        MOV	A,R3
??afIncomingData_12:
        JZ	??CrossCallReturnLabel_8
//  380       {
//  381         epProfileID = *pID;
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
//  382         osal_mem_free( pID );
??CrossCallReturnLabel_5:
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??CrossCallReturnLabel_8
//  383       }
//  384     }
//  385     else if ( epDesc->simpleDesc )
??afIncomingData_11:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JNZ	??afIncomingData_13
        INC	DPTR
        MOVX	A,@DPTR
??afIncomingData_13:
        JZ	??CrossCallReturnLabel_8
//  386     {
//  387       epProfileID = epDesc->simpleDesc->AppProfId;
        MOV	DPL,?V0 + 6
        MOV	DPH,?V0 + 7
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
//  388     }
//  389 
//  390     if ( (aff->ProfileID == epProfileID) ||
//  391          ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
??CrossCallReturnLabel_8:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??afIncomingData_14
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??afIncomingData_14:
        JZ	??afIncomingData_15
        MOV	DPL,?V0 + 6
        MOV	DPH,?V0 + 7
        MOVX	A,@DPTR
        JNZ	??afIncomingData_16
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_44:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JNZ	??afIncomingData_17
        INC	DPTR
        MOVX	A,@DPTR
??afIncomingData_17:
        JNZ	??afIncomingData_16
//  392     {
//  393 #if ( AF_KVP_SUPPORT )
//  394       if ( (FRAMETYPE_KVP == HI_UINT8(aff->asdu[0])) &&
//  395            (pList->flags & eEP_UsesKVP) )
//  396       {
//  397         afBuildKVPIncoming( aff, epDesc, SrcAddress, LinkQuality, SecurityUse );
//  398       }
//  399       else
//  400 #endif
//  401       {
//  402         afBuildMSGIncoming( aff, epDesc, SrcAddress, LinkQuality, SecurityUse, timestamp );
??afIncomingData_15:
        ; Setup parameters for call to function afBuildMSGIncoming
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 29)
        MOV	A,#0x1d
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 30)
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV	A,#0xd
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        MOV	A,#0x7
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV	DPTR,#(??afBuildMSGIncoming & 0xffff)
        MOV	A,#((??afBuildMSGIncoming >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x7
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  403       }
//  404     }
//  405 
//  406     if ( (NLME_GetProtocolVersion() != ZB_PROT_V1_0)
//  407       && ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
??afIncomingData_16:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JZ	??afIncomingData_18
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_35:
        JNZ	??afIncomingData_18
//  408     {
//  409       // Find the next endpoint for this group
//  410       grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV	A,R7
        MOV	R1,A
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R7,A
//  411       if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
        MOV	A,#-0x2
        XRL	A,R7
        JZ	$+5
        LJMP	??afIncomingData_2 & 0xFFFF
        SJMP	??afIncomingData_1
//  412         return;   // No endpoint found
//  413 
//  414       epDesc = afFindEndPointDesc( grpEp );
//  415       if ( epDesc == NULL )
//  416         return;   // Endpoint descriptor not found
//  417 
//  418       pList = afFindEndPointDescList( epDesc->endPoint );
//  419     }
//  420     else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_18:
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_42:
        JNZ	??afIncomingData_1
//  421     {
//  422       pList = pList->nextDesc;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
//  423       if ( pList )
??CrossCallReturnLabel_9:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??afIncomingData_19
        INC	DPTR
        MOVX	A,@DPTR
??afIncomingData_19:
        JZ	$+5
        LJMP	??afIncomingData_8 & 0xFFFF
??afIncomingData_1:
        MOV	A,#0x9
        CFI EndBlock cfiBlock12
        REQUIRE ?Subroutine33
        ; // Fall through to label ?Subroutine33
//  424         epDesc = pList->epDesc;
//  425       else
//  426         epDesc = NULL;
//  427     }
//  428     else
//  429       epDesc = NULL;
//  430   }
//  431 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL	?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_106:
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_18
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_19
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_43
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        LCALL	?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_93:
        LJMP	?Subroutine32 & 0xFFFF
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_88:
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_80:
        ANL	A,#0xc
        XRL	A,#0xc
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#(aps_FindGroupForEndpoint & 0xffff)
        MOV	A,#((aps_FindGroupForEndpoint >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        LCALL	?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_105:
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_82:
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33
//  432 
//  433 #if ( AF_KVP_SUPPORT )
//  434 /*********************************************************************
//  435  * @fn          afBuildKVPIncoming
//  436  *
//  437  * @brief       Build the message for the app
//  438  *
//  439  * @param
//  440  *
//  441  * @return
//  442  */
//  443 static void afBuildKVPIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  444                  zAddrType_t *SrcAddress, uint8 LinkQuality, byte SecurityUse )
//  445 {
//  446   afIncomingKVPPacket_t *KVPpkt = (afIncomingKVPPacket_t *)osal_mem_alloc(
//  447                            sizeof( afIncomingKVPPacket_t ) );
//  448   byte *asdu = aff->asdu;
//  449   const byte total = LO_UINT8( *asdu++ );
//  450   byte count;
//  451 
//  452   if ( KVPpkt == NULL )
//  453   {
//  454     return;
//  455   }
//  456 
//  457   KVPpkt->hdr.event = ((total > 1) ? AF_INCOMING_GRP_KVP_CMD :
//  458                                      AF_INCOMING_KVP_CMD );
//  459   KVPpkt->clusterId = aff->ClusterID;
//  460   afCopyAddress( &(KVPpkt->srcAddr), SrcAddress );
//  461   KVPpkt->srcAddr.endPoint = aff->SrcEndPoint;
//  462   KVPpkt->endPoint = epDesc->endPoint;
//  463   KVPpkt->wasBroadcast = aff->wasBroadcast;
//  464   KVPpkt->LinkQuality = LinkQuality;
//  465   KVPpkt->SecurityUse = SecurityUse;
//  466   KVPpkt->totalTrans = total;
//  467   KVPpkt->cmd.TransSeqNumber = *asdu++;
//  468 
//  469   for ( count = 1; count <= total; count++ )
//  470   {
//  471     afIncomingKVPPacket_t *msgKVPpkt;
//  472 
//  473     KVPpkt->cmd.CommandType = LO_UINT8(*asdu);
//  474     KVPpkt->cmd.AttribDataType = HI_UINT8(*asdu++);
//  475     KVPpkt->cmd.AttribId = BUILD_UINT16( asdu[0], asdu[1] );
//  476     asdu += 2;
//  477 
//  478     /* ErrorCode */
//  479     if ((KVPpkt->cmd.CommandType == CMDTYPE_GET_RESP) ||
//  480         (KVPpkt->cmd.CommandType == CMDTYPE_SET_RESP) ||
//  481         (KVPpkt->cmd.CommandType == CMDTYPE_EVENT_RESP))
//  482     {
//  483       KVPpkt->cmd.ErrorCode = *asdu++;
//  484     }
//  485     else
//  486     {
//  487       KVPpkt->cmd.ErrorCode = ERRORCODE_SUCCESS;
//  488     }
//  489 
//  490     /* DataLength */
//  491     if ( (KVPpkt->cmd.CommandType == CMDTYPE_GET_ACK) ||
//  492          (KVPpkt->cmd.CommandType == CMDTYPE_SET_RESP) ||
//  493          (KVPpkt->cmd.CommandType == CMDTYPE_EVENT_RESP ) )
//  494     {
//  495       KVPpkt->cmd.DataLength = 0;
//  496     }
//  497     else if ((KVPpkt->cmd.AttribDataType == DATATYPE_CHAR_STR) ||
//  498              (KVPpkt->cmd.AttribDataType == DATATYPE_OCTET_STR))
//  499     {
//  500       KVPpkt->cmd.DataLength = *asdu++;
//  501     }
//  502     else
//  503     {
//  504       KVPpkt->cmd.DataLength = GetDataTypeLength( (byte)KVPpkt->cmd.AttribDataType );
//  505     }
//  506 
//  507     msgKVPpkt = (afIncomingKVPPacket_t *)osal_msg_allocate( (short)
//  508                  (sizeof( afIncomingKVPPacket_t ) + KVPpkt->cmd.DataLength) );
//  509 
//  510     if ( msgKVPpkt == NULL )
//  511     {
//  512       // Maybe not enought for an octet string, but next might be no data,
//  513       // so don't return here, just continue to look at the rest.
//  514       asdu += KVPpkt->cmd.DataLength;
//  515       continue;
//  516     }
//  517 
//  518     osal_memcpy( msgKVPpkt, KVPpkt, sizeof( afIncomingKVPPacket_t ) );
//  519 
//  520     msgKVPpkt->count = count;
//  521 
//  522     if ( msgKVPpkt->cmd.DataLength )
//  523     {
//  524       msgKVPpkt->cmd.Data = (byte *)(msgKVPpkt + 1);
//  525       osal_memcpy( msgKVPpkt->cmd.Data, asdu, msgKVPpkt->cmd.DataLength );
//  526       asdu += msgKVPpkt->cmd.DataLength;
//  527     }
//  528     else
//  529     {
//  530       msgKVPpkt->cmd.Data = NULL;
//  531     }
//  532 
//  533 #if defined ( MT_AF_CB_FUNC )
//  534     // If MT has subscribed for this callback, don't send as a message.
//  535     if ( _afCallbackSub & CB_ID_AF_DATA_IND )
//  536     {
//  537       af_MTCB_IncomingData( (void *)msgKVPpkt );
//  538       // Release the memory.
//  539       osal_msg_deallocate( (void *)msgKVPpkt );
//  540     }
//  541     else
//  542 #endif
//  543     {
//  544       osal_msg_send( *(epDesc->task_id), (uint8*)msgKVPpkt );
//  545     }
//  546   }
//  547 
//  548   osal_mem_free( KVPpkt );
//  549 }
//  550 #endif
//  551 
//  552 /*********************************************************************
//  553  * @fn          afBuildMSGIncoming
//  554  *
//  555  * @brief       Build the message for the app
//  556  *
//  557  * @param
//  558  *
//  559  * @return      pointer to next in data buffer
//  560  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  561 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
??afBuildMSGIncoming:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function ??afBuildMSGIncoming
//  562                  zAddrType_t *SrcAddress, uint8 LinkQuality, byte SecurityUse,
//  563                  uint32 timestamp )
//  564 {
        FUNCALL ??afBuildMSGIncoming, osal_msg_allocate
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL ??afBuildMSGIncoming, afCopyAddress
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL ??afBuildMSGIncoming, osal_memcpy
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ??afBuildMSGIncoming, osal_msg_send
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV	A,#-0x5
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
//  565   afIncomingMSGPacket_t *MSGpkt;
//  566 #if ( AF_V1_SUPPORT )
//  567   const byte proVer = NLME_GetProtocolVersion();
//  568   const byte len = sizeof( afIncomingMSGPacket_t ) +
//  569               ((proVer == ZB_PROT_V1_0) ? aff->asdu[2] : aff->asduLength);
//  570   byte *asdu = aff->asdu + ((proVer == ZB_PROT_V1_0) ? 1 : 0);
//  571 #else
//  572   const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
//  573   byte *asdu = aff->asdu;
        MOV	A,R2
        ADD	A,#0xc
        MOV	DPL,A
        MOV	A,R3
        LCALL	??Subroutine21_1 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL	??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
//  574 #endif
//  575   MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function osal_msg_allocate
        MOV	A,R2
        ADD	A,#0xe
        MOV	DPL,A
        MOV	A,R3
        LCALL	??Subroutine21_1 & 0xFFFF
??CrossCallReturnLabel_69:
        MOVX	A,@DPTR
        ADD	A,#0x17
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	R6,?V0 + 4
        MOV	R7,?V0 + 5
//  576 
//  577   if ( MSGpkt == NULL )
        MOV	A,R6
        JNZ	??afBuildMSGIncoming_1
        MOV	A,R7
??afBuildMSGIncoming_1:
        JNZ	$+5
        LJMP	??afBuildMSGIncoming_2 & 0xFFFF
//  578   {
//  579     return;
//  580   }
//  581 
//  582   MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
        MOV	A,#0x1a
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine22 & 0xFFFF
//  583   MSGpkt->groupId = aff->GroupID;
??CrossCallReturnLabel_99:
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        LCALL	?Subroutine0 & 0xFFFF
//  584   MSGpkt->clusterId = aff->ClusterID;
??CrossCallReturnLabel_0:
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_51:
        INC	DPTR
        INC	DPTR
        LCALL	??Subroutine4_0 & 0xFFFF
//  585   afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function afCopyAddress
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV	A,R6
        ADD	A,#0x6
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(afCopyAddress & 0xffff)
        MOV	A,#((afCopyAddress >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  586   MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
        MOV	DPL,?V0 + 6
        MOV	DPH,?V0 + 7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_103:
        MOVX	@DPTR,A
//  587   MSGpkt->endPoint = epDesc->endPoint;
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_104:
        INC	DPTR
        LCALL	?Subroutine0 & 0xFFFF
//  588   MSGpkt->wasBroadcast = aff->wasBroadcast;
??CrossCallReturnLabel_1:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,R6
        ADD	A,#0xb
        LCALL	??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_70:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  589   MSGpkt->LinkQuality = LinkQuality;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,R6
        ADD	A,#0xc
        LCALL	??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_71:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  590   MSGpkt->SecurityUse = SecurityUse;
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,R6
        ADD	A,#0xd
        LCALL	??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_72:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  591   MSGpkt->timestamp = timestamp;
        MOV	A,R6
        ADD	A,#0xe
        LCALL	??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
//  592 
//  593 #if ( AF_V1_SUPPORT )
//  594   if ( proVer == ZB_PROT_V1_0 )
//  595   {
//  596     MSGpkt->cmd.TransSeqNumber = *asdu++;
//  597     MSGpkt->cmd.DataLength = *asdu++;
//  598   }
//  599   else
//  600 #endif
//  601   {
//  602     MSGpkt->cmd.TransSeqNumber = 0;
        MOV	A,R6
        ADD	A,#0x12
        LCALL	??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_74:
        CLR	A
        MOVX	@DPTR,A
        MOV	A,?V0 + 6
        ADD	A,#0xe
        MOV	DPL,A
        MOV	A,?V0 + 7
        LCALL	??Subroutine21_1 & 0xFFFF
??CrossCallReturnLabel_75:
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_76:
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  603     MSGpkt->cmd.DataLength = aff->asduLength;
//  604   }
//  605 
//  606   if ( MSGpkt->cmd.DataLength )
        MOV	A,R0
        JNZ	??afBuildMSGIncoming_3
        CLR	A
??afBuildMSGIncoming_3:
        JZ	??afBuildMSGIncoming_4
//  607   {
//  608     MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
        MOV	A,R6
        ADD	A,#0x15
        MOV	R0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R0
        MOV	R2,A
        MOV	A,R1
        MOV	R3,A
        MOV	A,R6
        ADD	A,#0x17
        INC	R0
        INC	R0
        MOV	A,R7
        ADDC	A,#0x0
        LCALL	?Subroutine4 & 0xFFFF
//  609     osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function osal_memcpy
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 24)
        LCALL	?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        SJMP	??afBuildMSGIncoming_5
//  610   }
//  611   else
//  612   {
//  613     MSGpkt->cmd.Data = NULL;
??afBuildMSGIncoming_4:
        MOV	A,R6
        ADD	A,#0x15
        LCALL	??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_78:
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  614   }
//  615 
//  616 #if defined ( MT_AF_CB_FUNC )
//  617   // If MT has subscribed for this callback, don't send as a message.
//  618   if ( _afCallbackSub & CB_ID_AF_DATA_IND )
//  619   {
//  620     af_MTCB_IncomingData( (void *)MSGpkt );
//  621     // Release the memory.
//  622     osal_msg_deallocate( (void *)MSGpkt );
//  623   }
//  624   else
//  625 #endif
//  626   {
//  627     // Send message through task message.
//  628     osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
??afBuildMSGIncoming_5:
        ; Setup parameters for call to function osal_msg_send
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  629   }
//  630 }
??afBuildMSGIncoming_2:
        MOV	A,#0x5
        LJMP	?Subroutine33 & 0xFFFF
        CFI EndBlock cfiBlock34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOV	A,R6
        ADD	A,#0x13
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+-1
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+-1
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+-1
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 21)
??Subroutine21_0:
        MOV	DPL,A
        MOV	A,R7
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 21)
??Subroutine21_1:
        ADDC	A,#0x0
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        LCALL	??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_104
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOVX	A,@DPTR
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
        REQUIRE ?Subroutine32
        ; // Fall through to label ?Subroutine32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_44
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_18
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_19
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        INC	DPTR
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_1
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_0
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 21)
??Subroutine32_0:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond65 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        INC	DPTR
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV	R1,A
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_100:
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_99
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_0
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_1
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOVX	@DPTR,A
        MOV	DPL,?V0 + 6
        MOV	DPH,?V0 + 7
        SJMP	??Subroutine32_0
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74
//  631 
//  632 #if ( AF_KVP_SUPPORT )
//  633 /*********************************************************************
//  634  * @fn      multiInit
//  635  *
//  636  * @brief   Initialize a multi header.
//  637  *
//  638  * @param   none
//  639  *
//  640  * @return  Pointer to the new memory allocated for the afMultiHdr_t structure.
//  641  */
//  642 static afMultiHdr_t *multiInit( afAddrType_t *dstAddr,
//  643                      byte srcEndPoint, uint16 clusterID, byte FrameType,
//  644                      byte txOptions, bool DiscoverRoute, byte RadiusCounter )
//  645 {
//  646   afMultiHdr_t *hdr = (afMultiHdr_t *)osal_mem_alloc( sizeof( afMultiHdr_t ) );
//  647 
//  648   if ( hdr == NULL )
//  649   {
//  650     return NULL;
//  651   }
//  652 
//  653   hdr->clusterID = clusterID;
//  654   hdr->transCount = 0;
//  655   hdr->options = txOptions & AF_ACK_REQUEST;
//  656   hdr->options |= (DiscoverRoute) ? AF_DISCV_ROUTE : 0;
//  657   hdr->srcEP = srcEndPoint;
//  658   hdr->dstAddr.endPoint = dstAddr->endPoint;
//  659   hdr->dstAddr.addrMode = dstAddr->addrMode;
//  660   hdr->dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
//  661   hdr->msgLen = 0;
//  662   hdr->msg = NULL;
//  663 
//  664   return hdr;
//  665 }
//  666 
//  667 /*********************************************************************
//  668  * @fn      multiAppend
//  669  *
//  670  * @brief   Concatenate a new KVP message too a mulit-KVP message.
//  671  *
//  672  * @param   none
//  673  *
//  674  * @return  TRUE for success, FALSE otherwise.
//  675  */
//  676 static bool multiAppend( afMultiHdr_t *hdr, byte bufLen, byte *buf,
//  677        byte CommandType, byte AttribDataType, uint16 AttribId, byte ErrorCode )
//  678 {
//  679   byte len = (byte)hdr->msgLen;
//  680   byte *msg = osal_mem_alloc( (short)(AF_HDR_KVP_MAX_LEN + bufLen + len) );
//  681 
//  682   if ( msg == NULL )
//  683   {
//  684     return FALSE;
//  685   }
//  686 
//  687   if ( hdr->msg == NULL )  // Need to make space for FrameType/Count & SeqNum.
//  688   {
//  689     len += 5;
//  690     hdr->msg = msg;
//  691     msg += 2;
//  692   }
//  693   else                     // Need to copy existing buffer over.
//  694   {
//  695     len += 3;
//  696     osal_memcpy( msg, hdr->msg, hdr->msgLen );
//  697     osal_mem_free( hdr->msg );
//  698     hdr->msg = msg;
//  699     msg += hdr->msgLen;
//  700   }
//  701 
//  702   *msg++ = BUILD_UINT8( AttribDataType, CommandType );
//  703   *msg++ = LO_UINT16( AttribId);
//  704   *msg++ = HI_UINT16( AttribId );
//  705 
//  706   if ((CommandType == CMDTYPE_GET_RESP) ||
//  707       (CommandType == CMDTYPE_SET_RESP) ||
//  708       (CommandType == CMDTYPE_EVENT_RESP) )
//  709   {
//  710     *msg++ = ErrorCode;
//  711     len++;
//  712   }
//  713 
//  714   if ( (CommandType == CMDTYPE_GET_ACK) ||
//  715        (CommandType == CMDTYPE_SET_RESP) ||
//  716        (CommandType == CMDTYPE_EVENT_RESP ) )
//  717   {
//  718     bufLen = 0;
//  719   }
//  720   else if ((AttribDataType == DATATYPE_CHAR_STR) ||
//  721            (AttribDataType == DATATYPE_OCTET_STR))
//  722   {
//  723     *msg++ = bufLen;
//  724     len++;
//  725   }
//  726 
//  727   if ( buf && bufLen )
//  728   {
//  729     osal_memcpy( msg, buf, bufLen );
//  730     len += bufLen;
//  731   }
//  732 
//  733   hdr->msgLen = len;
//  734   hdr->transCount++;
//  735 
//  736   return TRUE;
//  737 }
//  738 
//  739 /*********************************************************************
//  740  * @fn      multiSend
//  741  *
//  742  * @brief   Send whatever has been buffered to send multi.
//  743  *
//  744  * @param   none
//  745  *
//  746  * @return  afStatus_t
//  747  */
//  748 static afStatus_t multiSend( afMultiHdr_t *hdr, byte *seqNum, byte radius )
//  749 {
//  750   afStatus_t stat;
//  751 
//  752   if ( hdr == NULL )
//  753   {
//  754     return afStatus_MEM_FAIL;
//  755   }
//  756 
//  757   hdr->msg[0] = BUILD_UINT8( FRAMETYPE_KVP, hdr->transCount );
//  758   hdr->msg[1] = *seqNum;
//  759 
//  760   stat = afSend( &hdr->dstAddr, hdr->srcEP, hdr->clusterID,
//  761                   hdr->msgLen, hdr->msg, seqNum, hdr->options, radius );
//  762 
//  763   osal_mem_free( hdr->msg );
//  764   osal_mem_free( hdr );
//  765 
//  766   return stat;
//  767 }
//  768 
//  769 /*********************************************************************
//  770  * @fn      afAddOrSendMessage
//  771  *
//  772  * @brief   Fills in the cmd format structure and sends the out-going message.
//  773  *
//  774  * input parameters
//  775  *
//  776  * @param  *dstAddr         - Full ZB destination address: Nwk Addr + End Point.
//  777  * @param   srcEndPoint     - Origination (i.e. respond to or ack to) End Point.
//  778  * @param   clusterID       - A valid cluster ID as specified by the Profile
//  779  *          (e.g. see CLUSTERID_... defs in HomeControlLighting.h).
//  780  * @param   AddOrSend       - A valid afAddOrSend_t type.
//  781  * @param   FrameType       - A valid frame type (see prev def of FRAMETYPE_...)
//  782  * @param  *TransSeqNumber  - A pointer to a byte which can be modified and
//  783  *          which will be used as the transaction sequence number of the msg.
//  784  * @param   CommandType     -
//  785  *          KVP Frame Type  : A valid command type (see prev def of CMDTYPE_...)
//  786  *          MSG Frame Type  : Set to 0.
//  787  * @param   AttribDataType  -
//  788  *          KVP Frame Type  : A valid data type (see prev def of DATATYPE_...)
//  789  *          MSG Frame Type  : Set to 0.
//  790  * @param   AttribId        -
//  791  *          KVP Frame Type  : A valid Attribute ID as specified by the Profile.
//  792  *            (e.g. see OnOffSRC_OnOff in HomeControlLighting.h).
//  793  *          MSG Frame Type  : Set to 0.
//  794  * @param   ErrorCode       -
//  795  *          KVP Frame Type  : A valid error code (see prev def of ERRORCODE_...)
//  796  *          Note: Set to 0 unless the CommandType is one of the CMDTYPE_..._ACK.
//  797  *          MSG Frame Type  : Set to 0.
//  798  * @param   DataLength      - Number of bytes of data pointed to by next param.
//  799  *          KVP Frame Type  : This must match value expected for the
//  800  *          AttributeDataType specified above or the send will fail.
//  801  *          MSG Frame Type  : No restriction or checks.
//  802  * @param  *Data            - A pointer to the data bytes to send.
//  803  * @param   txOptions       - A valid bit mask (see prev def of APS_TX_OPTIONS_)
//  804  * @param   DiscoverRoute   - Normally set to FALSE. Perhaps set to TRUE after
//  805  *          receiving an AF_DATA_CONFIRM_CMD with status other than ZSuccess.
//  806  * @param   RadiusCounter   - Normally set to AF_DEFAULT_RADIUS.
//  807  *
//  808  * output parameters
//  809  *
//  810  * @param  *TransSeqNumber  - Incremented by one if the return value is success.
//  811  *
//  812  * @return  afStatus_t      - See previous definition of afStatus_... types.
//  813  */
//  814 afStatus_t afAddOrSendMessage(
//  815     afAddrType_t *dstAddr, byte srcEndPoint, cId_t clusterID,
//  816     afAddOrSend_t AddOrSend, byte FrameType, byte *TransSeqNumber,
//  817     byte CommandType, byte AttribDataType, uint16 AttribId, byte ErrorCode,
//  818     byte DataLength, byte *Data,
//  819     byte txOptions, byte DiscoverRoute, byte RadiusCounter )
//  820 {
//  821   static afMultiHdr_t *hdr;
//  822   afStatus_t stat = afStatus_FAILED;
//  823 
//  824   if ( FrameType == FRAMETYPE_MSG )
//  825   {
//  826     if ( AddOrSend != SEND_MESSAGE )
//  827     {
//  828       return afStatus_INVALID_PARAMETER;
//  829     }
//  830 
//  831     return afFillAndSendMessage( dstAddr, srcEndPoint, clusterID,
//  832       1, FrameType, TransSeqNumber, NULL, NULL, NULL, NULL,
//  833       DataLength, Data, txOptions, DiscoverRoute, RadiusCounter );
//  834   }
//  835 
//  836   if ( FrameType != FRAMETYPE_KVP )
//  837   {
//  838     return afStatus_INVALID_PARAMETER;
//  839   }
//  840 
//  841   // Cannot mix Cluster ID's in aggregation packet.
//  842   if ( (hdr != NULL) && (hdr->clusterID != clusterID) )
//  843   {
//  844     multiSend( hdr, TransSeqNumber, RadiusCounter );
//  845     hdr = NULL;
//  846   }
//  847 
//  848   if ( hdr == NULL )
//  849   {
//  850     hdr = multiInit( dstAddr, srcEndPoint, clusterID, FrameType,
//  851                      txOptions, DiscoverRoute, RadiusCounter );
//  852     if ( hdr == NULL )
//  853     {
//  854       return afStatus_MEM_FAIL;
//  855     }
//  856   }
//  857 
//  858   if ( FALSE == multiAppend( hdr, (byte)DataLength, Data,
//  859                            CommandType, AttribDataType, AttribId, ErrorCode ) )
//  860   {
//  861     if ( hdr->msg != NULL )
//  862     {
//  863       multiSend( hdr, TransSeqNumber, RadiusCounter );
//  864     }
//  865     else
//  866     {
//  867       osal_mem_free( hdr );
//  868     }
//  869     hdr = NULL;
//  870     return afStatus_MEM_FAIL;
//  871   }
//  872 
//  873   // Only supporting up to 16 concatenated messages.
//  874   if ( (AddOrSend == SEND_MESSAGE) || (hdr->transCount >= 16) )
//  875   {
//  876     stat = multiSend( hdr, TransSeqNumber, RadiusCounter );
//  877     hdr = NULL;
//  878   }
//  879   else
//  880   {
//  881     stat = afStatus_SUCCESS;
//  882     (*TransSeqNumber)++;
//  883   }
//  884 
//  885   return stat;
//  886 }
//  887 #endif
//  888 
//  889 #if ( AF_V1_SUPPORT || AF_KVP_SUPPORT )
//  890 /*********************************************************************
//  891  * @fn      afFillAndSendMessage
//  892  *
//  893  * @brief   Fills in the cmd format structure and sends the out-going message.
//  894  *
//  895  * input parameters
//  896  *
//  897  * @param  *dstAddr         - Full ZB destination address: Nwk Addr + End Point.
//  898  * @param   srcEndPoint     - Origination (i.e. respond to or ack to) End Point.
//  899  * @param   clusterID       - A valid cluster ID as specified by the Profile.
//  900  * @param   TransCount      - Set to 1.
//  901  * @param   FrameType       - A valid frame type (see prev def of FRAMETYPE_...)
//  902  * @param  *TransSeqNumber  - A pointer to a byte which can be modified and
//  903  *          which will be used as the transaction sequence number of the msg.
//  904  * @param   CommandType     -
//  905  *          KVP Frame Type  : A valid command type (see prev def of CMDTYPE_...)
//  906  *          MSG Frame Type  : Set to 0.
//  907  * @param   AttribDataType  -
//  908  *          KVP Frame Type  : A valid data type (see prev def of DATATYPE_...)
//  909  *          MSG Frame Type  : Set to 0.
//  910  * @param   AttribId        -
//  911  *          KVP Frame Type  : A valid Attribute ID as specified by the Profile.
//  912  *            (e.g. see OnOffSRC_OnOff in HomeControlLighting.h).
//  913  *          MSG Frame Type  : Set to 0.
//  914  * @param   ErrorCode       -
//  915  *          KVP Frame Type  : A valid error code (see prev def of ERRORCODE_...)
//  916  *          Note: Set to 0 unless the CommandType is one of the CMDTYPE_..._ACK.
//  917  *          MSG Frame Type  : Set to 0.
//  918  * @param   DataLength      - Number of bytes of data pointed to by next param.
//  919  *          KVP Frame Type  : This must match value expected for the
//  920  *          AttributeDataType specified above or the send will fail.
//  921  *          MSG Frame Type  : No restriction or checks.
//  922  * @param  *Data            - A pointer to the data bytes to send.
//  923  * @param   txOptions       - A valid bit mask (see prev def of APS_TX_OPTIONS_)
//  924  * @param   DiscoverRoute   - Normally set to FALSE. Perhaps set to TRUE after
//  925  *          receiving an AF_DATA_CONFIRM_CMD with status other than ZSuccess.
//  926  * @param   RadiusCounter   - Normally set to AF_DEFAULT_RADIUS.
//  927  *
//  928  * output parameters
//  929  *
//  930  * @param  *TransSeqNumber  - Incremented by one if the return value is success.
//  931  *
//  932  * @return  afStatus_t      - See previous definition of afStatus_... types.
//  933  */
//  934 afStatus_t afFillAndSendMessage (
//  935   afAddrType_t *dstAddr, byte srcEndPoint, cId_t clusterID,
//  936   byte TransCount, byte FrameType, byte *TransSeqNumber,
//  937   byte CommandType, byte AttribDataType, uint16 AttribId, byte ErrorCode,
//  938   byte DataLength, byte *Data,
//  939   byte txOptions, byte DiscoverRoute, byte RadiusCounter )
//  940 {
//  941   const byte proVer = NLME_GetProtocolVersion();
//  942   afStatus_t stat = afStatus_FAILED;
//  943   byte *buf = Data;
//  944 
//  945 #if ( AF_KVP_SUPPORT )
//  946   if ( FrameType == FRAMETYPE_KVP )
//  947   {
//  948     return afAddOrSendMessage( dstAddr, srcEndPoint, clusterID,
//  949       SEND_MESSAGE, FrameType, TransSeqNumber,
//  950       CommandType, AttribDataType, AttribId, ErrorCode,
//  951       DataLength, Data, txOptions, DiscoverRoute, RadiusCounter );
//  952   }
//  953 #endif
//  954 
//  955   if ( FrameType != FRAMETYPE_MSG )
//  956   {
//  957     return afStatus_INVALID_PARAMETER;
//  958   }
//  959 
//  960   if ( TransCount != 1 )
//  961   {
//  962     return afStatus_INVALID_PARAMETER;
//  963   }
//  964 
//  965   if ( proVer == ZB_PROT_V1_0 )
//  966   {
//  967     buf = osal_mem_alloc( (short)(DataLength+3) );
//  968     if ( buf == NULL )
//  969     {
//  970       return afStatus_MEM_FAIL;
//  971     }
//  972 
//  973     buf[0] = BUILD_UINT8( FRAMETYPE_MSG, 1 );
//  974     buf[1] = *TransSeqNumber;
//  975     buf[2] = (byte)DataLength;
//  976 
//  977     // Copy the data portion of the packet.
//  978     if ( Data && DataLength )
//  979     {
//  980       osal_memcpy( buf+3, Data, DataLength );
//  981       DataLength += 3;
//  982     }
//  983     else
//  984     {
//  985       DataLength = 3;
//  986     }
//  987   }
//  988 
//  989   stat = afSend( dstAddr, srcEndPoint, clusterID,
//  990                  DataLength, buf, TransSeqNumber, txOptions, RadiusCounter );
//  991 
//  992   if ( proVer == ZB_PROT_V1_0 )
//  993   {
//  994     osal_mem_free( buf );
//  995   }
//  996 
//  997   return stat;
//  998 }
//  999 #endif
// 1000 
// 1001 /*********************************************************************
// 1002  * @fn      AF_DataRequest
// 1003  *
// 1004  * @brief   Common functionality for invoking APSDE_DataReq() for both
// 1005  *          KVP-Send/SendMulti and MSG-Send.
// 1006  *
// 1007  * input parameters
// 1008  *
// 1009  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
// 1010  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
// 1011  * @param   cID - A valid cluster ID as specified by the Profile.
// 1012  * @param   len - Number of bytes of data pointed to by next param.
// 1013  * @param  *buf - A pointer to the data bytes to send.
// 1014  * @param  *transID - A pointer to a byte which can be modified and which will
// 1015  *                    be used as the transaction sequence number of the msg.
// 1016  * @param   options - Valid bit mask of Tx options.
// 1017  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
// 1018  *
// 1019  * output parameters
// 1020  *
// 1021  * @param  *transID - Incremented by one if the return value is success.
// 1022  *
// 1023  * @return  afStatus_t - See previous definition of afStatus_... types.
// 1024  */
// 1025 #if ( AF_V1_SUPPORT )
// 1026 static afStatus_t afDataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
// 1027                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
// 1028                            uint8 options, uint8 radius )
// 1029 #else

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1030 afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequest:
        CFI Block cfiBlock75 Using cfiCommon0
        CFI Function AF_DataRequest
// 1031                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
// 1032                            uint8 options, uint8 radius )
// 1033 #endif
// 1034 {
        FUNCALL AF_DataRequest, afGetReflector
        LOCFRAME XSTACK, 43, STACK
        ARGFRAME XSTACK, 43, STACK
        FUNCALL AF_DataRequest, NLME_IsAddressBroadcast
        LOCFRAME XSTACK, 43, STACK
        ARGFRAME XSTACK, 43, STACK
        FUNCALL AF_DataRequest, osal_mem_free
        LOCFRAME XSTACK, 43, STACK
        ARGFRAME XSTACK, 43, STACK
        FUNCALL AF_DataRequest, afDataReqMTU
        LOCFRAME XSTACK, 43, STACK
        ARGFRAME XSTACK, 43, STACK
        FUNCALL AF_DataRequest, APSDE_DataReq
        LOCFRAME XSTACK, 43, STACK
        ARGFRAME XSTACK, 43, STACK
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME XSTACK, 43, STACK
        ARGFRAME XSTACK, 43, STACK
        FUNCALL AF_DataRequest, afDataConfirm
        LOCFRAME XSTACK, 43, STACK
        ARGFRAME XSTACK, 43, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 28
        MOV	A,#-0x1c
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	?V0 + 2,R4
        MOV	?V0 + 3,R5
        MOV	A,R1
        MOV	R7,A
        MOV	A,#0x33
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 6,A
// 1035   pDescCB pfnDescCB;
// 1036   ZStatus_t stat;
// 1037   APSDE_DataReq_t req;
// 1038   afDataReqMTU_t mtu;
// 1039 
// 1040 
// 1041   if ( srcEP == NULL )
        MOV	A,R4
        JNZ	??AF_DataRequest_0
        MOV	A,R5
??AF_DataRequest_0:
        JNZ	??AF_DataRequest_1
// 1042   {
// 1043     return afStatus_INVALID_PARAMETER;
??AF_DataRequest_2:
        MOV	R1,#-0x7e
        LJMP	??AF_DataRequest_3 & 0xFFFF
// 1044   }
// 1045 
// 1046   // Enforce consistent values on the destination address / address mode.
// 1047   if ( dstAddr->addrMode == afAddrNotPresent )
??AF_DataRequest_1:
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JNZ	??AF_DataRequest_4
// 1048   {
// 1049     dstAddr->endPoint = ZDO_EP;
        CLR	A
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
// 1050     req.dstAddr.addr.shortAddr = afGetReflector( srcEP->endPoint );
        ; Setup parameters for call to function afGetReflector
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(afGetReflector & 0xffff)
        MOV	A,#((afGetReflector >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
??AF_DataRequest_5:
        MOVX	@DPTR,A
        SJMP	??AF_DataRequest_6
// 1051   }
// 1052   else // Handle types: afAddr16Bit
// 1053   {    //               afAddrBroadcast
// 1054        //               afAddrGroup
// 1055     req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
??AF_DataRequest_4:
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        LCALL	?Subroutine2 & 0xFFFF
// 1056 
// 1057     if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
// 1058          ( dstAddr->addrMode == afAddrBroadcast )    )
??CrossCallReturnLabel_4:
        MOVX	A,@DPTR
        XRL	A,#0x2
        JZ	??AF_DataRequest_7
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xf
        JNZ	??AF_DataRequest_8
// 1059     {
// 1060       // Check for valid broadcast values
// 1061       if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
??AF_DataRequest_7:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV	DPTR,#(NLME_IsAddressBroadcast & 0xffff)
        MOV	A,#((NLME_IsAddressBroadcast >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JZ	??AF_DataRequest_9
// 1062       {
// 1063         // Force mode to broadcast
// 1064         dstAddr->addrMode = afAddrBroadcast;
        MOV	A,#0xf
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        SJMP	??AF_DataRequest_5
// 1065       }
// 1066       else
// 1067       {
// 1068         // Address is not a valid broadcast type
// 1069         if ( dstAddr->addrMode == afAddrBroadcast )
??AF_DataRequest_9:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xf
        JNZ	??AF_DataRequest_6
        SJMP	??AF_DataRequest_2
// 1070         {
// 1071           return afStatus_INVALID_PARAMETER;
// 1072         }
// 1073       }
// 1074     }
// 1075     else if ( dstAddr->addrMode != afAddrGroup )
??AF_DataRequest_8:
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0x1
        JZ	$+5
        LJMP	??AF_DataRequest_2 & 0xFFFF
// 1076     {
// 1077       return afStatus_INVALID_PARAMETER;
// 1078     }
// 1079   }
// 1080   req.dstAddr.addrMode = dstAddr->addrMode;
??AF_DataRequest_6:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 1081   req.profileID = ZDO_PROFILE_ID;
        MOV	A,#0xf
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
// 1082 
// 1083   if ( (pfnDescCB = afGetDescCB( srcEP )) )
        MOV	DPTR,#epList
        SJMP	??AF_DataRequest_10
??AF_DataRequest_11:
        INC	DPTR
        INC	DPTR
        INC	DPTR
??AF_DataRequest_10:
        LCALL	??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV	A,R0
        JNZ	??AF_DataRequest_12
        MOV	A,R1
??AF_DataRequest_12:
        JZ	??AF_DataRequest_13
        MOV	DPL,R0
        MOV	DPH,R1
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV	A,?V0 + 2
        XRL	A,R2
        JNZ	??AF_DataRequest_14
        MOV	A,?V0 + 3
        XRL	A,R3
??AF_DataRequest_14:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        JNZ	??AF_DataRequest_11
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_48:
        JZ	??AF_DataRequest_13
// 1084   {
// 1085     uint16 *pID = (uint16 *)(pfnDescCB(
// 1086                                  AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
        ; Setup parameters for indirect call
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOVX	A,@DPTR
        MOV	R2,A
        INC	R1
        INC	R1
        MOV	DPL,R4
        MOV	DPH,R5
        MOV	A,R6
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1087     if ( pID )
        MOV	A,R2
        JNZ	??AF_DataRequest_15
        MOV	A,R3
??AF_DataRequest_15:
        JZ	??CrossCallReturnLabel_13
// 1088     {
// 1089       req.profileID = *pID;
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV	A,#0xf
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
// 1090       osal_mem_free( pID );
??CrossCallReturnLabel_6:
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??CrossCallReturnLabel_13
// 1091     }
// 1092   }
// 1093   else if ( srcEP->simpleDesc )
??AF_DataRequest_13:
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JNZ	??AF_DataRequest_16
        INC	DPTR
        MOVX	A,@DPTR
??AF_DataRequest_16:
        JZ	??CrossCallReturnLabel_13
// 1094   {
// 1095     req.profileID = srcEP->simpleDesc->AppProfId;
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV	A,#0xf
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
// 1096   }
// 1097 
// 1098   req.txOptions = 0;
??CrossCallReturnLabel_13:
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
// 1099 
// 1100   if ( ( options & AF_ACK_REQUEST              ) &&
// 1101        ( req.dstAddr.addrMode != AddrBroadcast ) &&
// 1102        ( req.dstAddr.addrMode != AddrGroup     )    )
        MOV	A,R7
        MOV	C,0xE0 /* A   */.4
        JNC	??AF_DataRequest_17
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xf
        JZ	??AF_DataRequest_17
        MOVX	A,@DPTR
        XRL	A,#0x1
        JZ	??AF_DataRequest_17
// 1103   {
// 1104     req.txOptions |=  APS_TX_OPTIONS_ACK;
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x4
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
// 1105   }
// 1106 
// 1107   if ( options & AF_SKIP_ROUTING )
??AF_DataRequest_17:
        MOV	A,R7
        MOV	C,0xE0 /* A   */.7
        JNC	??AF_DataRequest_18
// 1108   {
// 1109     req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ORL	A,#0x10
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        MOVX	@DPTR,A
// 1110   }
// 1111 
// 1112   if ( options & AF_EN_SECURITY )
??AF_DataRequest_18:
        MOV	A,R7
        MOV	C,0xE0 /* A   */.6
        JNC	??AF_DataRequest_19
// 1113   {
// 1114     req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ORL	A,#0x1
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        MOVX	@DPTR,A
// 1115     mtu.aps.secure = TRUE;
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x1
        SJMP	??AF_DataRequest_20
// 1116   }
// 1117   else
// 1118   {
// 1119     mtu.aps.secure = FALSE;
??AF_DataRequest_19:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        CLR	A
??AF_DataRequest_20:
        MOVX	@DPTR,A
// 1120   }
// 1121 
// 1122   mtu.kvp = FALSE;
        CLR	A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
// 1123 
// 1124   req.transID       = *transID;
        MOV	A,#0x31
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_37:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 1125   req.srcEP         = srcEP->endPoint;
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 1126   req.dstEP         = dstAddr->endPoint;
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 1127   req.clusterID     = cID;
        MOV	A,#0x2b
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV	A,#0xd
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
// 1128   req.asduLen       = len;
??CrossCallReturnLabel_14:
        MOV	A,#0x2d
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV	A,#0x11
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
// 1129   req.asdu          = buf;
??CrossCallReturnLabel_15:
        MOV	A,#0x2f
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV	A,#0x13
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
// 1130   req.discoverRoute = (uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
??CrossCallReturnLabel_16:
        MOV	A,R7
        MOV	C,0xE0 /* A   */.5
        JNC	??AF_DataRequest_21
        SETB	B.0
        SJMP	??AF_DataRequest_22
??AF_DataRequest_21:
        CLR	B.0
??AF_DataRequest_22:
        MOV	C,B.0
        CLR	A
        MOV	0xE0 /* A   */.0,C
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 1131   req.radiusCounter = radius;
        MOV	A,#0x19
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 6
        MOVX	@DPTR,A
// 1132 
// 1133   if (len > afDataReqMTU( &mtu ) )
        ; Setup parameters for call to function afDataReqMTU
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(afDataReqMTU & 0xffff)
        MOV	A,#((afDataReqMTU >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R2,A
        MOV	A,#0x2d
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_65:
        CLR	C
        MOV	A,R2
        SUBB	A,R0
        CLR	A
        SUBB	A,R1
        JNC	??AF_DataRequest_23
// 1134   {
// 1135     if (apsfSendFragmented)
        MOV	DPTR,#apsfSendFragmented
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_53:
        JZ	??AF_DataRequest_24
// 1136     {
// 1137       req.txOptions |= AF_FRAGMENTED | APS_TX_OPTIONS_ACK;
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ORL	A,#0x5
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        MOVX	@DPTR,A
// 1138       stat = (*apsfSendFragmented)( &req );
        ; Setup parameters for indirect call
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#apsfSendFragmented
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_97:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPL,R4
        MOV	DPH,R5
        SJMP	??AF_DataRequest_25
// 1139     }
// 1140     else
// 1141     {
// 1142       stat = afStatus_INVALID_PARAMETER;
??AF_DataRequest_24:
        MOV	R6,#-0x7e
        SJMP	??AF_DataRequest_26
// 1143     }
// 1144   } 
// 1145   else
// 1146   {
// 1147     stat = APSDE_DataReq( &req );
??AF_DataRequest_23:
        ; Setup parameters for call to function APSDE_DataReq
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(APSDE_DataReq & 0xffff)
        MOV	A,#((APSDE_DataReq >> 16) & 0xff)
??AF_DataRequest_25:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R6,A
// 1148   }
// 1149 
// 1150   /*
// 1151    * If this is an EndPoint-to-EndPoint message on the same device, it will not
// 1152    * get added to the NWK databufs. So it will not go OTA and it will not get
// 1153    * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
// 1154    * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
// 1155    * message with the first in line TransSeqNumber, even on a multi message.
// 1156    */
// 1157   if ( (req.dstAddr.addrMode == Addr16Bit) &&
// 1158        (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
??AF_DataRequest_26:
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0x2
        JNZ	??AF_DataRequest_27
        ; Setup parameters for call to function NLME_GetShortAddr
        MOV	DPTR,#(NLME_GetShortAddr & 0xffff)
        MOV	A,#((NLME_GetShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,?V0 + 0
        MOV	R1,?V0 + 1
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??AF_DataRequest_28
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??AF_DataRequest_28:
        JNZ	??AF_DataRequest_27
// 1159   {
// 1160     afDataConfirm( srcEP->endPoint, *transID, stat );
        ; Setup parameters for call to function afDataConfirm
        MOV	A,R6
        MOV	R3,A
        MOV	A,#0x31
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV	R2,A
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(afDataConfirm & 0xffff)
        MOV	A,#((afDataConfirm >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1161   }
// 1162 
// 1163   if ( stat == afStatus_SUCCESS )
??AF_DataRequest_27:
        MOV	A,R6
        JNZ	??AF_DataRequest_29
// 1164   {
// 1165     (*transID)++;
        MOV	A,#0x31
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_39:
        INC	A
        MOVX	@DPTR,A
// 1166   }
// 1167 
// 1168   return (afStatus_t)stat;
??AF_DataRequest_29:
        MOV	A,R6
        MOV	R1,A
??AF_DataRequest_3:
        MOV	A,#0x1c
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R7,#0x7
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock75
// 1169 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_97
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_53
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_48
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_49
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        MOV	DPL,R2
        MOV	DPH,R3
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond94) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond94) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond94) CFA_SP SP+-5
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 43)
??Subroutine20_0:
        LCALL	??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_86:
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond97 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        LCALL	?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV	A,R4
        ORL	A,R5
        ORL	A,R6
        RET
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond104) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond104) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond104) CFA_SP SP+-5
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_81:
        RET
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_40
        CFI (cfiCond107) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond107) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond107) CFA_SP SP+-5
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_38
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_31
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_36
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_30
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_35
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_34
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_37
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        LCALL	?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_92:
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL	?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_83:
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond119 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_19
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_18
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_33
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        INC	DPTR
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_55
        CFI (cfiCond124) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond124) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond124) CFA_SP SP+-5
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_56
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_51
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_62
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_65
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_59
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_61
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_67
        CFI (cfiCond131) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond131) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond131) CFA_SP SP+-5
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_64
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_66
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_63
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_50
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_54
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_57
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_60
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_58
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 21)
??Subroutine25_0:
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        RET
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond140 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker142 Using cfiCommon1
        CFI (cfiPicker142) NoFunction
        CFI (cfiPicker142) Picker
        MOV	R1,A
        MOV	DPL,R2
        MOV	DPH,R3
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 21)
??Subroutine4_0:
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiPicker142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker154 Using cfiCommon1
        CFI (cfiPicker154) NoFunction
        CFI (cfiPicker154) Picker
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function osal_mem_free
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiPicker154
// 1170 
// 1171 /*********************************************************************
// 1172  * @fn      afFindEndPointDescList
// 1173  *
// 1174  * @brief   Find the endpoint description entry from the endpoint
// 1175  *          number.
// 1176  *
// 1177  * @param   EndPoint - Application Endpoint to look for
// 1178  *
// 1179  * @return  the address to the endpoint/interface description entry
// 1180  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1181 static epList_t *afFindEndPointDescList( byte EndPoint )
??afFindEndPointDescList:
        CFI Block cfiBlock155 Using cfiCommon0
        CFI Function ??afFindEndPointDescList
// 1182 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1183   epList_t *epSearch;
// 1184 
// 1185   // Start at the beginning
// 1186   epSearch = epList;
        MOV	DPTR,#epList
        SJMP	??afFindEndPointDescList_1
// 1187 
// 1188   // Look through the list until the end
// 1189   while ( epSearch )
// 1190   {
// 1191     // Is there a match?
// 1192     if ( epSearch->epDesc->endPoint == EndPoint )
// 1193     {
// 1194       return ( epSearch );
// 1195     }
// 1196     else
// 1197       epSearch = epSearch->nextDesc;  // Next entry
??afFindEndPointDescList_2:
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
??afFindEndPointDescList_1:
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV	A,R2
        JNZ	??afFindEndPointDescList_3
        MOV	A,R3
??afFindEndPointDescList_3:
        JZ	??afFindEndPointDescList_4
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_40:
        XRL	A,R1
        JNZ	??afFindEndPointDescList_2
        SJMP	??afFindEndPointDescList_5
// 1198   }
// 1199 
// 1200   return ( (epList_t *)NULL );
??afFindEndPointDescList_4:
        MOV	R2,#0x0
        MOV	R3,#0x0
??afFindEndPointDescList_5:
        LJMP	?Subroutine30 & 0xFFFF
        CFI EndBlock cfiBlock155
// 1201 }
// 1202 
// 1203 /*********************************************************************
// 1204  * @fn      afFindEndPointDesc
// 1205  *
// 1206  * @brief   Find the endpoint description entry from the endpoint
// 1207  *          number.
// 1208  *
// 1209  * @param   EndPoint - Application Endpoint to look for
// 1210  *
// 1211  * @return  the address to the endpoint/interface description entry
// 1212  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1213 endPointDesc_t *afFindEndPointDesc( byte EndPoint )
afFindEndPointDesc:
        CFI Block cfiBlock156 Using cfiCommon0
        CFI Function afFindEndPointDesc
// 1214 {
        FUNCALL afFindEndPointDesc, ??afFindEndPointDescList
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1215   epList_t *epSearch;
// 1216 
// 1217   // Look for the endpoint
// 1218   epSearch = afFindEndPointDescList( EndPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV	DPTR,#(??afFindEndPointDescList & 0xffff)
        MOV	A,#((??afFindEndPointDescList >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,R2
        MOV	DPH,R3
// 1219 
// 1220   if ( epSearch )
        MOV	A,DPL
        JNZ	??afFindEndPointDesc_0
        MOV	A,DPH
??afFindEndPointDesc_0:
        JZ	??afFindEndPointDesc_1
// 1221     return ( epSearch->epDesc );
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_27:
        SJMP	??afFindEndPointDesc_2
// 1222   else
// 1223     return ( (endPointDesc_t *)NULL );
??afFindEndPointDesc_1:
        MOV	R2,#0x0
        MOV	R3,#0x0
??afFindEndPointDesc_2:
        LJMP	?Subroutine34 & 0xFFFF
        CFI EndBlock cfiBlock156
// 1224 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond157 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker159 Using cfiCommon1
        CFI (cfiPicker159) NoFunction
        CFI (cfiPicker159) Picker
        MOV	DPL,R2
        MOV	DPH,R3
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond160) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond160) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond160) CFA_SP SP+-5
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond161) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond161) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond161) CFA_SP SP+-5
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 10)
??Subroutine7_0:
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        RET
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiPicker159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
// 1225 
// 1226 /*********************************************************************
// 1227  * @fn      afFindSimpleDesc
// 1228  *
// 1229  * @brief   Find the Simple Descriptor from the endpoint number.
// 1230  *
// 1231  * @param   EP - Application Endpoint to look for.
// 1232  *
// 1233  * @return  Non-zero to indicate that the descriptor memory must be freed.
// 1234  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1235 byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
afFindSimpleDesc:
        CFI Block cfiBlock166 Using cfiCommon0
        CFI Function afFindSimpleDesc
// 1236 {
        FUNCALL afFindSimpleDesc, ??afFindEndPointDescList
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	A,R1
        MOV	R7,A
// 1237   epList_t *epItem = afFindEndPointDescList( EP );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV	DPTR,#(??afFindEndPointDescList & 0xffff)
        MOV	A,#((??afFindEndPointDescList >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
// 1238   byte rtrn = FALSE;
        MOV	?V0 + 4,#0x0
// 1239 
// 1240   if ( epItem )
        MOV	A,R2
        JNZ	??afFindSimpleDesc_0
        MOV	A,R3
??afFindSimpleDesc_0:
        JZ	??afFindSimpleDesc_1
// 1241   {
// 1242     if ( epItem->pfnDescCB )
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_49:
        JZ	??afFindSimpleDesc_2
// 1243     {
// 1244       *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
        ; Setup parameters for indirect call
        MOV	A,R7
        MOV	R2,A
        INC	R1
        MOV	DPL,?V0 + 0
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPL,R4
        MOV	DPH,R5
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
// 1245       rtrn = TRUE;
        MOV	?V0 + 4,#0x1
        SJMP	??afFindSimpleDesc_3
// 1246     }
// 1247     else
// 1248     {
// 1249       *ppDesc = epItem->epDesc->simpleDesc;
??afFindSimpleDesc_2:
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_47:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        SJMP	??afFindSimpleDesc_4
// 1250     }
// 1251   }
// 1252   else
// 1253   {
// 1254     *ppDesc = NULL;
??afFindSimpleDesc_1:
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
??afFindSimpleDesc_4:
        MOVX	@DPTR,A
// 1255   }
// 1256 
// 1257   return rtrn;
??afFindSimpleDesc_3:
        MOV	R1,?V0 + 4
        LJMP	?Subroutine31 & 0xFFFF
        CFI EndBlock cfiBlock166
// 1258 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond167 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker169 Using cfiCommon1
        CFI (cfiPicker169) NoFunction
        CFI (cfiPicker169) Picker
        LCALL	?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV	R1,#0x0
        MOV	A,R4
        ORL	A,R5
        ORL	A,R6
        RET
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiPicker169

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond170 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_52
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_53
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_48
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiPicker174 Using cfiCommon1
        CFI (cfiPicker174) NoFunction
        CFI (cfiPicker174) Picker
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_98:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        RET
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiPicker174

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond175 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker178 Using cfiCommon1
        CFI (cfiPicker178) NoFunction
        CFI (cfiPicker178) Picker
        LCALL	?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_89:
        RET
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiPicker178

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond179 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_41
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_32
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_42
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_47
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_33
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_46
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker186 Using cfiCommon1
        CFI (cfiPicker186) NoFunction
        CFI (cfiPicker186) Picker
        LCALL	?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_94:
        RET
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiPicker186

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond187 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_47
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_33
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_18
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_40
        CFI (cfiCond191) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond191) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond191) CFA_SP SP+-5
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_36
        CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond192) CFA_SP SP+0
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_30
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_35
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_34
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond196 Using cfiCommon0
        CFI (cfiCond196) NoFunction
        CFI (cfiCond196) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_32
        CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond196) CFA_SP SP+0
        CFI (cfiCond196) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_37
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_46
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_39
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_19
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_43
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_45
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_38
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_41
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_31
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_44
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker207 Using cfiCommon1
        CFI (cfiPicker207) NoFunction
        CFI (cfiPicker207) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        RET
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiPicker207
// 1259 
// 1260 /*********************************************************************
// 1261  * @fn      afGetDescCB
// 1262  *
// 1263  * @brief   Get the Descriptor callback function.
// 1264  *
// 1265  * @param   epDesc - pointer to the endpoint descriptor
// 1266  *
// 1267  * @return  function pointer or NULL
// 1268  */
// 1269 static pDescCB afGetDescCB( endPointDesc_t *epDesc )
// 1270 {
// 1271   epList_t *epSearch;
// 1272 
// 1273   // Start at the beginning
// 1274   epSearch = epList;
// 1275 
// 1276   // Look through the list until the end
// 1277   while ( epSearch )
// 1278   {
// 1279     // Is there a match?
// 1280     if ( epSearch->epDesc == epDesc )
// 1281     {
// 1282       return ( epSearch->pfnDescCB );
// 1283     }
// 1284     else
// 1285       epSearch = epSearch->nextDesc;  // Next entry
// 1286   }
// 1287 
// 1288   return ( (pDescCB)NULL );
// 1289 }
// 1290 
// 1291 /*********************************************************************
// 1292  * @fn      afGetReflector
// 1293  *
// 1294  * @brief   Get the Reflector's address for an endpoint.
// 1295  *
// 1296  * @param   EndPoint - Application Endpoint to look for
// 1297  *
// 1298  * @return  shortAddr of the reflector for the endpoint
// 1299  *              0xFFFF if not found.
// 1300  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1301 uint16 afGetReflector( byte EndPoint )
afGetReflector:
        CFI Block cfiBlock208 Using cfiCommon0
        CFI Function afGetReflector
// 1302 {
        FUNCALL afGetReflector, ??afFindEndPointDescList
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1303   epList_t *epSearch;
// 1304 
// 1305   // Look for the endpoint
// 1306   epSearch = afFindEndPointDescList( EndPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV	DPTR,#(??afFindEndPointDescList & 0xffff)
        MOV	A,#((??afFindEndPointDescList >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,R2
        MOV	DPH,R3
// 1307 
// 1308   if ( epSearch )
        MOV	A,DPL
        JNZ	??afGetReflector_0
        MOV	A,DPH
??afGetReflector_0:
        JZ	??afGetReflector_1
// 1309   {
// 1310     //-------------------------------------------------------------------------
// 1311     #if !defined ( REFLECTOR )
// 1312     //-------------------------------------------------------------------------
// 1313     return ( epSearch->reflectorAddr );
        INC	DPTR
        INC	DPTR
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_28:
        SJMP	??afGetReflector_2
// 1314     //-------------------------------------------------------------------------
// 1315     #else
// 1316     //-------------------------------------------------------------------------
// 1317     if ( epSearch->reflectorAddr == INVALID_NODE_ADDR )
// 1318     {
// 1319       return ( NLME_GetShortAddr() );
// 1320     }
// 1321     else
// 1322     {
// 1323       return ( epSearch->reflectorAddr );
// 1324     }
// 1325     //-------------------------------------------------------------------------
// 1326     #endif
// 1327     //-------------------------------------------------------------------------
// 1328   }
// 1329   else
// 1330   {
// 1331     return ( INVALID_NODE_ADDR );
??afGetReflector_1:
        MOV	R2,#-0x2
        MOV	R3,#-0x1
??afGetReflector_2:
        SJMP	?Subroutine34
        CFI EndBlock cfiBlock208
// 1332   }
// 1333 }
// 1334 
// 1335 /*********************************************************************
// 1336  * @fn      afSetReflector
// 1337  *
// 1338  * @brief   Set the reflector address for the endpoint.
// 1339  *
// 1340  * @param   EndPoint - Application Endpoint to look for
// 1341  * @param   reflectorAddr - new address
// 1342  *
// 1343  * @return  TRUE if success, FALSE if endpoint not fount
// 1344  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1345 uint8 afSetReflector( byte EndPoint, uint16 reflectorAddr )
afSetReflector:
        CFI Block cfiBlock209 Using cfiCommon0
        CFI Function afSetReflector
// 1346 {
        FUNCALL afSetReflector, ??afFindEndPointDescList
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
// 1347   epList_t *epSearch;
// 1348 
// 1349   // Look for the endpoint
// 1350   epSearch = afFindEndPointDescList( EndPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV	DPTR,#(??afFindEndPointDescList & 0xffff)
        MOV	A,#((??afFindEndPointDescList >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,R2
        MOV	DPH,R3
// 1351 
// 1352   if ( epSearch )
        MOV	A,DPL
        JNZ	??afSetReflector_0
        MOV	A,DPH
??afSetReflector_0:
        JZ	??afSetReflector_1
// 1353   {
// 1354     epSearch->reflectorAddr = reflectorAddr;
        INC	DPTR
        INC	DPTR
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R7
        MOVX	@DPTR,A
// 1355     return ( TRUE );
        MOV	R1,#0x1
        SJMP	??afSetReflector_2
// 1356   }
// 1357   else
// 1358     return ( FALSE );
??afSetReflector_1:
        MOV	R1,#0x0
        CFI EndBlock cfiBlock209
??afSetReflector_2:
        REQUIRE ?Subroutine34
        ; // Fall through to label ?Subroutine34
// 1359 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiBlock210 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock210
// 1360 
// 1361 /*********************************************************************
// 1362  * @fn      afDataReqMTU
// 1363  *
// 1364  * @brief   Get the Data Request MTU(Max Transport Unit).
// 1365  *
// 1366  * @param   fields - afDataReqMTU_t
// 1367  *
// 1368  * @return  uint8(MTU)
// 1369  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1370 uint8 afDataReqMTU( afDataReqMTU_t* fields )
afDataReqMTU:
        CFI Block cfiBlock211 Using cfiCommon0
        CFI Function afDataReqMTU
// 1371 {
        FUNCALL afDataReqMTU, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL afDataReqMTU, APSDE_DataReqMTU
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
// 1372   uint8 len;
// 1373   uint8 hdr;
// 1374   uint8 version;
// 1375 
// 1376   if ( fields->kvp == TRUE )
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??afDataReqMTU_0
// 1377   {
// 1378     hdr = AF_HDR_KVP_MAX_LEN;
        MOV	?V0 + 0,#0x8
        SJMP	??afDataReqMTU_1
// 1379   }
// 1380   else
// 1381   {
// 1382     version = NLME_GetProtocolVersion();
// 1383 
// 1384     if ( version == ZB_PROT_V1_0 )
??afDataReqMTU_0:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JNZ	??afDataReqMTU_2
// 1385     {
// 1386       hdr = AF_HDR_V1_0_MAX_LEN;
        MOV	?V0 + 0,#0x3
        SJMP	??afDataReqMTU_1
// 1387     }
// 1388     else
// 1389     {
// 1390       hdr = AF_HDR_V1_1_MAX_LEN;
??afDataReqMTU_2:
        MOV	?V0 + 0,#0x0
// 1391     }
// 1392   }
// 1393 
// 1394   len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
??afDataReqMTU_1:
        ; Setup parameters for call to function APSDE_DataReqMTU
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(APSDE_DataReqMTU & 0xffff)
        MOV	A,#((APSDE_DataReqMTU >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        CLR	C
        SUBB	A,?V0 + 0
        MOV	R1,A
        CFI EndBlock cfiBlock211
// 1395 
// 1396   return len;
        REQUIRE ?Subroutine35
        ; // Fall through to label ?Subroutine35
// 1397 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiBlock212 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock212
// 1398 
// 1399 /*********************************************************************
// 1400  * @fn      afGetMatch
// 1401  *
// 1402  * @brief   Set the allow response flag.
// 1403  *
// 1404  * @param   ep - Application Endpoint to look for
// 1405  * @param   action - true - allow response, false - no response
// 1406  *
// 1407  * @return  TRUE allow responses, FALSE no response
// 1408  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1409 uint8 afGetMatch( uint8 ep )
afGetMatch:
        CFI Block cfiBlock213 Using cfiCommon0
        CFI Function afGetMatch
// 1410 {
        FUNCALL afGetMatch, ??afFindEndPointDescList
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1411   epList_t *epSearch;
// 1412 
// 1413   // Look for the endpoint
// 1414   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV	DPTR,#(??afFindEndPointDescList & 0xffff)
        MOV	A,#((??afFindEndPointDescList >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,R2
        MOV	DPH,R3
// 1415 
// 1416   if ( epSearch )
        MOV	A,DPL
        JNZ	??afGetMatch_0
        MOV	A,DPH
??afGetMatch_0:
        JZ	??afGetMatch_1
// 1417   {
// 1418     if ( epSearch->flags & eEP_AllowMatch )
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.0
        JNC	??afGetMatch_1
// 1419       return ( TRUE );
        MOV	R1,#0x1
        SJMP	??afGetMatch_2
// 1420     else
// 1421       return ( FALSE );
??afGetMatch_1:
        MOV	R1,#0x0
??afGetMatch_2:
        SJMP	?Subroutine34
        CFI EndBlock cfiBlock213
// 1422   }
// 1423   else
// 1424     return ( FALSE );
// 1425 }
// 1426 
// 1427 /*********************************************************************
// 1428  * @fn      afSetMatch
// 1429  *
// 1430  * @brief   Set the allow response flag.
// 1431  *
// 1432  * @param   ep - Application Endpoint to look for
// 1433  * @param   action - true - allow response, false - no response
// 1434  *
// 1435  * @return  TRUE if success, FALSE if endpoint not found
// 1436  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1437 uint8 afSetMatch( uint8 ep, uint8 action )
afSetMatch:
        CFI Block cfiBlock214 Using cfiCommon0
        CFI Function afSetMatch
// 1438 {
        FUNCALL afSetMatch, ??afFindEndPointDescList
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
// 1439   epList_t *epSearch;
// 1440 
// 1441   // Look for the endpoint
// 1442   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        MOV	DPTR,#(??afFindEndPointDescList & 0xffff)
        MOV	A,#((??afFindEndPointDescList >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,R2
        MOV	DPH,R3
// 1443 
// 1444   if ( epSearch )
        MOV	A,DPL
        JNZ	??afSetMatch_0
        MOV	A,DPH
??afSetMatch_0:
        JZ	??afSetMatch_1
// 1445   {
// 1446     if ( action )
        MOV	A,R6
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        JZ	??afSetMatch_2
// 1447     {
// 1448       epSearch->flags |= eEP_AllowMatch;
        MOVX	A,@DPTR
        SETB	0xE0 /* A   */.0
        SJMP	??afSetMatch_3
// 1449     }
// 1450     else
// 1451     {
// 1452       epSearch->flags &= ~eEP_AllowMatch;
??afSetMatch_2:
        MOVX	A,@DPTR
        CLR	0xE0 /* A   */.0
??afSetMatch_3:
        MOVX	@DPTR,A
// 1453     }
// 1454     return ( TRUE );
        MOV	R1,#0x1
        SJMP	??afSetMatch_4
// 1455   }
// 1456   else
// 1457     return ( FALSE );
??afSetMatch_1:
        MOV	R1,#0x0
??afSetMatch_4:
        LJMP	?Subroutine34 & 0xFFFF
        CFI EndBlock cfiBlock214
// 1458 }
// 1459 
// 1460 /*********************************************************************
// 1461  * @fn      afNumEndPoints
// 1462  *
// 1463  * @brief   Returns the number of endpoints defined (including 0)
// 1464  *
// 1465  * @param   none
// 1466  *
// 1467  * @return  number of endpoints
// 1468  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1469 byte afNumEndPoints( void )
afNumEndPoints:
        CFI Block cfiBlock215 Using cfiCommon0
        CFI Function afNumEndPoints
// 1470 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1471   epList_t *epSearch;
// 1472   byte endpoints;
// 1473 
// 1474   // Start at the beginning
// 1475   epSearch = epList;
        MOV	DPTR,#epList
        LCALL	?Subroutine19 & 0xFFFF
// 1476   endpoints = 0;
??CrossCallReturnLabel_55:
        MOV	R1,#0x0
        SJMP	??afNumEndPoints_0
// 1477 
// 1478   while ( epSearch )
// 1479   {
// 1480     endpoints++;
??afNumEndPoints_1:
        INC	R1
// 1481     epSearch = epSearch->nextDesc;
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV	DPL,R2
        MOV	DPH,R3
// 1482   }
??afNumEndPoints_0:
        MOV	A,DPL
        JNZ	??afNumEndPoints_2
        MOV	A,DPH
??afNumEndPoints_2:
        JNZ	??afNumEndPoints_1
        CFI EndBlock cfiBlock215
// 1483 
// 1484   return ( endpoints );
        REQUIRE ?Subroutine30
        ; // Fall through to label ?Subroutine30
// 1485 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiBlock216 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock216

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond217 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker219 Using cfiCommon1
        CFI (cfiPicker219) NoFunction
        CFI (cfiPicker219) Picker
        LCALL	??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV	DPL,R0
        MOV	DPH,R1
        RET
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiPicker219
// 1486 
// 1487 /*********************************************************************
// 1488  * @fn      afEndPoints
// 1489  *
// 1490  * @brief   Fills in the passed in buffer with the endpoint (numbers).
// 1491  *          Use afNumEndPoints to find out how big a buffer to supply.
// 1492  *
// 1493  * @param   epBuf - pointer to mem used
// 1494  *
// 1495  * @return  void
// 1496  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1497 void afEndPoints( byte *epBuf, byte skipZDO )
afEndPoints:
        CFI Block cfiBlock220 Using cfiCommon0
        CFI Function afEndPoints
// 1498 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV	A,R1
        MOV	R4,A
// 1499   epList_t *epSearch;
// 1500   byte endPoint;
// 1501 
// 1502   // Start at the beginning
// 1503   epSearch = epList;
        MOV	DPTR,#epList
        SJMP	??afEndPoints_0
// 1504 
// 1505   while ( epSearch )
// 1506   {
// 1507     endPoint = epSearch->epDesc->endPoint;
??afEndPoints_1:
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        MOV	R5,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R5
        MOVX	A,@DPTR
        MOV	R5,A
// 1508 
// 1509     if ( !skipZDO || endPoint != 0 )
        MOV	A,R4
        JZ	??afEndPoints_2
        MOV	A,R5
        JZ	??afEndPoints_3
// 1510       *epBuf++ = endPoint;
??afEndPoints_2:
        MOV	A,R5
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
// 1511 
// 1512     epSearch = epSearch->nextDesc;
??afEndPoints_3:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
??afEndPoints_0:
        LCALL	??Subroutine20_0 & 0xFFFF
// 1513   }
??CrossCallReturnLabel_67:
        MOV	A,R0
        JNZ	??afEndPoints_4
        MOV	A,R1
??afEndPoints_4:
        JNZ	??afEndPoints_1
// 1514 }
        SJMP	?Subroutine30
        CFI EndBlock cfiBlock220
// 1515 
// 1516 /*********************************************************************
// 1517  * Semi-Precision fuctions
// 1518  */
// 1519 
// 1520 #if ( AF_FLOAT_SUPPORT )
// 1521 /*********************************************************************
// 1522  * @fn      afCnvtSP_uint16
// 1523  *
// 1524  * @brief   Converts uint16 to semi-precision structure format
// 1525  *
// 1526  * @param   sp - semi-precision structure format
// 1527  *
// 1528  * @return  16 bit value for semiprecision.
// 1529  */
// 1530 uint16 afCnvtSP_uint16( afSemiPrecision_t sp )
// 1531 {
// 1532   return ( ((sp.sign & 0x0001) << 15)
// 1533               | ((sp.exponent & 0x001F) << 10)
// 1534               | (sp.mantissa & 0x03FF) );
// 1535 }
// 1536 
// 1537 /*********************************************************************
// 1538  * @fn      afCnvtuint16_SP
// 1539  *
// 1540  * @brief   Converts uint16 to semi-precision structure format
// 1541  *
// 1542  * @param   rawSP - Raw representation of SemiPrecision
// 1543  *
// 1544  * @return  SemiPrecision conversion.
// 1545  */
// 1546 afSemiPrecision_t afCnvtuint16_SP( uint16 rawSP )
// 1547 {
// 1548   afSemiPrecision_t sp = {0,0,0};
// 1549 
// 1550   sp.sign = ((rawSP >> 15) & 0x0001);
// 1551   sp.exponent = ((rawSP >> 10) & 0x001F);
// 1552   sp.mantissa = (rawSP & 0x03FF);
// 1553   return ( sp );
// 1554 }
// 1555 
// 1556 /*********************************************************************
// 1557  * @fn      afCnvtFloat_SP
// 1558  *
// 1559  * @brief   Converts float to semi-precision structure format
// 1560  *
// 1561  * @param   f - float value to convert from
// 1562  *
// 1563  * NOTE: This function will convert to the closest possible
// 1564  *       representation in a 16 bit format.  Meaning that
// 1565  *       the number may not be exact.  For example, 10.7 will
// 1566  *       convert to 10.69531, because .7 is a repeating binary
// 1567  *       number.  The mantissa for afSemiPrecision_t is 10 bits
// 1568  *       and .69531 is the 10 bit representative of .7.
// 1569  *
// 1570  * @return  SemiPrecision conversion.
// 1571  */
// 1572 afSemiPrecision_t afCnvtFloat_SP( float f )
// 1573 {
// 1574   afSemiPrecision_t sp = {0,0,0};
// 1575   unsigned long mantissa;
// 1576   unsigned int oldexp;
// 1577   int tempexp;
// 1578   float calcMant;
// 1579   unsigned long *uf;
// 1580 
// 1581   if ( f < 0 )
// 1582   {
// 1583     sp.sign = 1;
// 1584     f = f * -1;
// 1585   }
// 1586   else
// 1587     sp.sign = 0;
// 1588 
// 1589   if ( f == 0 )
// 1590   {
// 1591     sp.exponent = (unsigned int)0;
// 1592     sp.mantissa = (unsigned int)0;
// 1593   }
// 1594   else
// 1595   {
// 1596     uf = (void*)&f;
// 1597 
// 1598     mantissa = *uf & 0x7fffff;
// 1599     oldexp = (unsigned int)((*uf >> 23) & 0xff);
// 1600     tempexp = oldexp - 127;
// 1601 
// 1602     calcMant = (float)((float)(mantissa) / (float)(0x800000));
// 1603     mantissa = (unsigned long)(calcMant * 1024);
// 1604 
// 1605     sp.exponent = (unsigned int)(tempexp + 15);
// 1606     sp.mantissa = (unsigned int)(mantissa);
// 1607   }
// 1608 
// 1609   return ( sp );
// 1610 }
// 1611 
// 1612 /*********************************************************************
// 1613  * @fn      afCnvtSP_Float
// 1614  *
// 1615  * @brief   Converts semi-precision structure format to float
// 1616  *
// 1617  * @param   sp - afSemiPrecision format to convert from
// 1618  *
// 1619  * @return  float
// 1620  */
// 1621 float afCnvtSP_Float( afSemiPrecision_t sp )
// 1622 {
// 1623   float a, b, c;
// 1624 
// 1625   if ( sp.exponent == 0 && sp.mantissa == 0 )
// 1626   {
// 1627     a = 0;
// 1628     b = 0;
// 1629   }
// 1630   else
// 1631   {
// 1632     a = (float)((float)1 + (float)((float)(sp.mantissa)/1024));
// 1633 
// 1634 #if defined( __MWERKS__ )
// 1635     b = powf( 2.0, (float)((float)sp.exponent - 15.0) );
// 1636 #else
// 1637     b = (float)pow( 2.0, sp.exponent - 15 );
// 1638 #endif
// 1639   }
// 1640 
// 1641   if ( sp.sign )
// 1642     c = a * b * -1;
// 1643   else
// 1644     c = a * b;
// 1645 
// 1646   return ( c );
// 1647 }
// 1648 #endif
// 1649 
// 1650 #if ( AF_KVP_SUPPORT )
// 1651 /*********************************************************************
// 1652  * @fn      GetDataTypeLength
// 1653  *
// 1654  * @brief   Return the length of the datatype in length
// 1655  *
// 1656  * @param   DataType
// 1657  *
// 1658  * @return  byte
// 1659  */
// 1660 byte GetDataTypeLength( byte DataType )
// 1661 {
// 1662   switch (DataType)
// 1663   {
// 1664     case DATATYPE_INT8:
// 1665     case DATATYPE_UINT8:
// 1666       return 1;
// 1667 
// 1668     case DATATYPE_INT16:
// 1669     case DATATYPE_UINT16:
// 1670     case DATATYPE_SEMIPREC:
// 1671       return 2;
// 1672 
// 1673     case DATATYPE_ABS_TIME:
// 1674     case DATATYPE_REL_TIME:
// 1675       return 4;
// 1676 
// 1677     default:
// 1678       return 0;
// 1679   }
// 1680 }
// 1681 #endif
// 1682 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1683 void afCopyAddress ( afAddrType_t *afAddr, zAddrType_t *zAddr )
afCopyAddress:
        CFI Block cfiBlock221 Using cfiCommon0
        CFI Function afCopyAddress
// 1684 {
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1685   afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
// 1686   afAddr->addr.shortAddr = zAddr->addr.shortAddr;
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        LCALL	?Subroutine4 & 0xFFFF
// 1687 }
??CrossCallReturnLabel_17:
        LJMP	?Subroutine35 & 0xFFFF
        CFI EndBlock cfiBlock221

        END
// 1688 
// 1689 /*********************************************************************
// 1690 *********************************************************************/
// 1691 
// 
// 2 842 bytes in segment BANKED_CODE
//     2 bytes in segment XDATA_Z
// 
// 2 842 bytes of CODE  memory
//     2 bytes of XDATA memory
//
//Errors: none
//Warnings: none
