##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   17/Oct/2013  21:52:34 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\Source\SampleApp.c                          #
#    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wEnde #
#                          v.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR                #
#                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS   #
#                          "-DCONST=const __code" -DGENERIC=__generic) -f    #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConfig. #
#                          cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800     #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\Source\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mt\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2430EB\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\osal\mcu #
#                          \ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC #
#                          2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\osal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ #
#                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects #
#                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. #
#                          \Components\stack\af\ -I                          #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\stack\nw #
#                          k\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C #
#                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2430DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ #
#                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\zmac\f8w #
#                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                       #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          mac\high_level\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf03\ -I                #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\low_ #
#                          level\srf03\single_chip\ -D CC2430EB -D           #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           #
#                          ZG_ENDDEVICE -lC E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\EndDeviceEB\List\ #
#                           -lA E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\EndDeviceEB\List\             #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\EndDeviceEB\Obj\ -e             #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\Source\SampleApp.c                          #
#    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\EndDeviceEB\List\SampleApp.lst     #
#    Object file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\EndDeviceEB\Obj\SampleApp.r51      #
#                                                                            #
#                                                                            #
##############################################################################

E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /*********************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2007-05-31 15:56:04 -0700 (Thu, 31 May 2007) $
      4            Revision:       $Revision: 14490 $
      5          
      6            Description:
      7          				  - Sample Application (no Profile).
      8          				
      9                    This application isn't intended to do anything useful,
     10                    it is intended to be a simple example of an application's
     11                    structure.
     12          
     13                    This application sends it's messages either as broadcast or
     14                    broadcast filtered group messages.  The other (more normal)
     15                    message addressing is unicast.  Most of the other
     16                    sample applications are written to support the unicast
     17                    message model.
     18          
     19                    Key control:
     20                      SW1:  Sends a flash command to all devices in Group 1.
     21                      SW2:  Adds/Removes (toggles) this device in and out
     22                            of Group 1.  This will enable and disable the
     23                            reception of the flash command.
     24          
     25            Notes:
     26          
     27            Copyright (c) 2007 by Texas Instruments, Inc.
     28            All Rights Reserved.  Permission to use, reproduce, copy, prepare
     29            derivative works, modify, distribute, perform, display or sell this
     30            software and/or its documentation for any purpose is prohibited
     31            without the express written consent of Texas Instruments, Inc.
     32          *********************************************************************/
     33          
     34          /*********************************************************************
     35           * INCLUDES
     36           */
     37          #include "OSAL.h"
     38          #include "ZGlobals.h"
     39          #include "AF.h"
     40          #include "aps_groups.h"
     41          #include "ZDApp.h"
     42          
     43          #include "SampleApp.h"
     44          #include "SampleAppHw.h"
     45          
     46          #include "OnBoard.h"

   \                                 In segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     47          #include "stdio.h"
     48          
     49          #include "NLMEDE.h"
     50          #include "string.h"
     51          /* HAL */
     52          #include "lcd128_64.h"

  typedef unsigned short      UINT16;
                              ^
"E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Components\hal\include\hal.h",33  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed short        INT16;
                              ^
"E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Components\hal\include\hal.h",39  Warning[Pe301]: 
          typedef name has already been declared (with same type)
     53          #include "hal_led.h"
     54          #include "hal_key.h"
     55          
     56          #include "Menu.h"
     57          #include "hal.h"
     58          #include "wxl_uart.h"
     59          

   \                                 In segment XDATA_I, align 1, keep-with-next
     60          INT8U LanguageSel = 1;
   \                     LanguageSel:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for LanguageSel>`
   \   000001                REQUIRE __INIT_XDATA_I
     61          //uint8 16 = 16;   //×¢Òâ»º³åÇøµÄ³¤¶È×îºÃµ÷³É4µÄ±¶Êý
     62          //uint8 29 = 16 + 13;
     63          //01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19
     64          /*********************************************************************
     65           * MACROS
     66           */
     67          
     68          /*********************************************************************
     69           * CONSTANTS
     70           */
     71          
     72          /*********************************************************************
     73           * TYPEDEFS
     74           */
     75          
     76          /*********************************************************************
     77           * GLOBAL VARIABLES
     78           */
     79          
     80          //-----------------------------------------------------------------------------------------
     81          //±äÁ¿¶¨Òå
     82          //-----------------------------------------------------------------------------------------
     83          union h{
     84            uint8 RxBuf[33];                             //ÐÞ¸Ä»º³å£¡
     85            struct RFRXBUF
     86            {
     87              uint8 HeadCom[3]; //ÃüÁîÍ·
     88              uint8 Laddr[8];   //ÎïÀíµØÖ·
     89              uint8 Saddr[2];   //ÍøÂçµØÖ·
     90              uint8 DataBuf[20];  //Êý¾Ý»º³åÇø       //ÐÞ¸Ä»º³å£¡   ×¢ÒâÒ»¶¨ÒªÐÞ¸ÄÕâ¸öµØ·½ÈÃ½ÓÊÕºÍ·¢ËÍµÄ»º³å¸ü´óÐ©£¡£¡
     91            }RXDATA;

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     92          }RfRx;//ÎÞÏß½ÓÊÕ»º³åÇø
   \                     RfRx:
   \   000000                DS 33
     93          
     94          union j{
     95            uint8 TxBuf[33];                             //ÐÞ¸Ä»º³å£¡
     96            struct RFTXBUF
     97            {
     98              uint8 HeadCom[3]; //ÃüÁîÍ·
     99              uint8 Laddr[8];
    100              uint16 Saddr;
    101              uint8 DataBuf[20];  //Êý¾Ý»º³åÇø       //ÐÞ¸Ä»º³å£¡  ×¢ÒâÒ»¶¨ÒªÐÞ¸ÄÕâ¸öµØ·½ÈÃ½ÓÊÕºÍ·¢ËÍµÄ»º³å¸ü´óÐ©£¡£¡
    102            }TXDATA;

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    103          }RfTx;//ÎÞÏß·¢ËÍ»º³åÇø
   \                     RfTx:
   \   000000                DS 33
    104          
    105          // Õâ¸öÁÐ±íÁÐ³öÁËÓ¦ÓÃ³ÌÐòÌØÊâµÄ Cluster IDs.

   \                                 In segment XDATA_I, align 1, keep-with-next
    106          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for SampleApp_ClusterList>`
   \   000004                REQUIRE __INIT_XDATA_I
    107          {
    108            SAMPLEAPP_PERIODIC_CLUSTERID,
    109            SAMPLEAPP_FLASH_CLUSTERID
    110          };
    111          

   \                                 In segment XDATA_I, align 1, keep-with-next
    112          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for SampleApp_SimpleDesc>`
   \   00000C                REQUIRE __INIT_XDATA_I
    113          {
    114            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    115            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    116            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    117            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    118            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    119            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    120            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    121            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    122            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    123          };
    124          
    125          struct join
    126          {
    127            uint8 RfdCount;		//RFD¼ÆÊýÆ÷
    128            uint8 RouterCount;	//Â·ÓÉÆ÷¼ÆÊýÆ÷
    129            uint8 RfdAddr[20][10];	//´æ´¢RFD½ÚµãµØÖ·ÓÃ£¬¸ßÁ½Î»ÎªÍøÂçµØÖ·£¬µÍ8Î»ÎªÎïÀíµØÖ·
    130            uint8 RouterAddr[20][10];//´æ´¢RFD½ÚµãµØÖ·ÓÃ£¬¸ßÁ½Î»ÎªÍøÂçµØÖ·£¬µÍ8Î»ÎªÎïÀíµØÖ·

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    131          }JoinNode;
   \                     JoinNode:
   \   000000                DS 402
    132          
    133          // This is the Endpoint/Interface description.  It is defined here, but
    134          // filled-in in SampleApp_Init().  Another way to go would be to fill
    135          // in the structure here and make it a "const" (in code space).  The
    136          // way it's defined in this sample app it is define in RAM.
    137          
    138          endPointDesc_t SampleApp_epDesc;
    139          
    140          /*********************************************************************
    141           * EXTERNAL VARIABLES
    142           */
    143          
    144          /*********************************************************************
    145           * EXTERNAL FUNCTIONS
    146           */
    147          
    148          /*********************************************************************
    149           * LOCAL VARIABLES
    150           */
    151          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    152          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
    153                                    // This variable will be received when
    154                                    // SampleApp_Init() is called.
    155          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    156          uint8 Menu_Key;
   \                     Menu_Key:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    157          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    158          uint8 SampleApp_TransID;  // ÕâÊÇ¸öÎ¨Ò»µÄÏûÏ¢ID(counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
    159          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    160          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 4

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    161          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 4
    162          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    163          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
    164          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    165          NLME_LeaveCnf_t* Remove;
   \                     Remove:
   \   000000                DS 2
    166          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    167          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    168          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    169          uint8 state2 = 0;
   \                     state2:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    170          uint8 arr[20];
   \                     arr:
   \   000000                DS 20
    171          
    172          /*********************************************************************
    173           * LOCAL FUNCTIONS
    174           */
    175          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    176          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    177          void SampleApp_SendPeriodicMessage( void );
    178          void SampleApp_SendFlashMessage( uint16 flashTime );
    179          uint8 SendData(uint8 *buf, uint16 addr, uint8 Leng);
    180          uint16 get_short_addr(void);
    181          
    182          /*********************************************************************
    183           * NETWORK LAYER CALLBACKS
    184           */
    185          
    186          /*********************************************************************
    187           * PUBLIC FUNCTIONS
    188           */
    189          
    190          /*********************************************************************
    191           * @fn      SampleApp_Init
    192           *
    193           * @brief   Ó¦ÓÃ³õÊ¼»¯º¯Êý°üÀ¨ÁËÓ²¼þ³õÊ¼»¯¡¢Æ½Ì¨³õÊ¼»¯¡¢¹¦ºÄ³õÊ¼»¯µÈ
    194           *
    195           * @param   task_id - ²Ù×÷ÏµÍ³·ÖÅäµÄÈÎÎñID£¬Õâ¸öIDÓÃÀ´·¢ËÍÐÅÏ¢ºÍÉèÖÃÊ±¼ä
    196           *
    197           * @return  none
    198           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    199          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    200          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    201            SampleApp_TaskID = task_id;
   \   000005   E9           MOV     A,R1
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    202            SampleApp_NwkState = DEV_INIT;
   \   00000A   7401         MOV     A,#0x1
   \   00000C   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000F   F0           MOVX    @DPTR,A
    203            SampleApp_TransID = 0;
   \   000010   E4           CLR     A
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   F0           MOVX    @DPTR,A
    204          
    205            // Device hardware initialization can be added here or in main() (Zmain.c).
    206            // If the hardware is application specific - add it here.
    207            // If the hardware is other parts of the device add it in main().
    208          
    209           #if defined ( SOFT_START )
    210            // The "Demo" target is setup to have SOFT_START and HOLD_AUTO_START
    211            // SOFT_START is a compile option that allows the device to start
    212            //  as a coordinator if one isn't found.
    213            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    214            // together - if they are - we will start up a coordinator. Otherwise,
    215            // the device will start as a router.
    216          	//Ñ¡ÔñZigbeeÉè±¸Ð­µ÷Õß
    217          	#ifdef ZG_Coord
    218          		zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    219          	#endif
    220          	//Ñ¡ÔñZigbeeÉè±¸ÎªÂ·ÓÉÆ÷
    221          	#ifdef ZG_Router
    222          		zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    223          	#endif
    224          	//Ñ¡ÔñZigbeeÉè±¸ÎªÖÕ¶Ë½Úµã
    225          	#ifdef ZG_ENDDEVICE
    226          		zgDeviceLogicalType = ZG_DEVICETYPE_ENDDEVICE;
    227          	#endif
    228          #endif //SOFT_START
    229          
    230          #if defined ( HOLD_AUTO_START )
    231            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    232            //  from starting the device and wait for the application to
    233            //  start the device.
    234            ZDOInitDevice(0);
    235          #endif
    236          
    237            // ÉèÖÃÍ¨Ñ¶µÄÄ¿µÄµØÖ·
    238            // ¹ã²¥ËùÓÐ½Úµã
    239          /*  SampleApp_All_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    240            SampleApp_All_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    241            SampleApp_All_DstAddr.addr.shortAddr = 0xFFFF;
    242          */
    243            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000015   740F         MOV     A,#0xf
   \   000017   90....       MOV     DPTR,#(SampleApp_Periodic_DstAddr + 2)
   \   00001A   F0           MOVX    @DPTR,A
    244            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00001B   7414         MOV     A,#0x14
   \   00001D   90....       MOV     DPTR,#(SampleApp_Periodic_DstAddr + 3)
   \   000020   F0           MOVX    @DPTR,A
    245            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000024   74FF         MOV     A,#-0x1
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
    246          
    247            //ÅäÖÃÎªµ¥²¥µÄ·¢ËÍ·½Ê½
    248          /*  SampleApp_Single_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    249            SampleApp_Single_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
    250          */
    251          
    252          
    253            // Setup for the flash command's destination address - Group 1
    254            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000029   7401         MOV     A,#0x1
   \   00002B   90....       MOV     DPTR,#(SampleApp_Flash_DstAddr + 2)
   \   00002E   F0           MOVX    @DPTR,A
    255            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002F   7414         MOV     A,#0x14
   \   000031   90....       MOV     DPTR,#(SampleApp_Flash_DstAddr + 3)
   \   000034   F0           MOVX    @DPTR,A
    256            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000035   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000038   7401         MOV     A,#0x1
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
    257          
    258            // Ìî³äÖÕ¶ËÀàÐÍ
    259            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003E   7414         MOV     A,#0x14
   \   000040   90....       MOV     DPTR,#SampleApp_epDesc
   \   000043   F0           MOVX    @DPTR,A
    260            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000044   90....       MOV     DPTR,#(SampleApp_epDesc + 1)
   \   000047   74..         MOV     A,#(SampleApp_TaskID & 0xff)
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   74..         MOV     A,#((SampleApp_TaskID >> 8) & 0xff)
   \   00004D   F0           MOVX    @DPTR,A
    261            SampleApp_epDesc.simpleDesc
    262                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004E   90....       MOV     DPTR,#(SampleApp_epDesc + 3)
   \   000051   74..         MOV     A,#(SampleApp_SimpleDesc & 0xff)
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   74..         MOV     A,#((SampleApp_SimpleDesc >> 8) & 0xff)
   \   000057   F0           MOVX    @DPTR,A
    263            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000058   E4           CLR     A
   \   000059   90....       MOV     DPTR,#(SampleApp_epDesc + 5)
   \   00005C   F0           MOVX    @DPTR,A
    264          
    265            // Register the endpoint description with the AF
    266            afRegister( &SampleApp_epDesc );
   \   00005D                ; Setup parameters for call to function afRegister
   \   00005D   7A..         MOV     R2,#(SampleApp_epDesc & 0xff)
   \   00005F   7B..         MOV     R3,#((SampleApp_epDesc >> 8) & 0xff)
   \   000061   90....       MOV     DPTR,#(afRegister & 0xffff)
   \   000064   74..         MOV     A,#((afRegister >> 16) & 0xff)
   \   000066   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    267          
    268            // Register for all key events - This app will handle all key events
    269            RegisterForKeys( SampleApp_TaskID );
   \   000069                ; Setup parameters for call to function RegisterForKeys
   \   000069   90....       MOV     DPTR,#SampleApp_TaskID
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   90....       MOV     DPTR,#(RegisterForKeys & 0xffff)
   \   000071   74..         MOV     A,#((RegisterForKeys >> 16) & 0xff)
   \   000073   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    270          
    271            // By default, all devices start out in Group 1
    272            SampleApp_Group.ID = 0x0001;
   \   000076   90....       MOV     DPTR,#SampleApp_Group
   \   000079   7401         MOV     A,#0x1
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
    273            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00007F                ; Setup parameters for call to function osal_memcpy
   \   00007F   75....       MOV     ?V0 + 0,#(`?<Constant "Group 1">` & 0xff)
   \   000082   75....       MOV     ?V0 + 1,#((`?<Constant "Group 1">` >> 8) & 0xff)
   \   000085   F5..         MOV     ?V0 + 2,A
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008C   7C07         MOV     R4,#0x7
   \   00008E   7D00         MOV     R5,#0x0
   \   000090   7A..         MOV     R2,#((SampleApp_Group + 2) & 0xff)
   \   000092   7B..         MOV     R3,#(((SampleApp_Group + 2) >> 8) & 0xff)
   \   000094   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   000097   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   000099   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00009C   7403         MOV     A,#0x3
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    274            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A1                ; Setup parameters for call to function aps_AddGroup
   \   0000A1   7A..         MOV     R2,#(SampleApp_Group & 0xff)
   \   0000A3   7B..         MOV     R3,#((SampleApp_Group >> 8) & 0xff)
   \   0000A5   7914         MOV     R1,#0x14
   \   0000A7   90....       MOV     DPTR,#(aps_AddGroup & 0xffff)
   \   0000AA   74..         MOV     A,#((aps_AddGroup >> 16) & 0xff)
   \   0000AC   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    275          
    276            //³õÊ¼»¯´®¿Ú
    277            initUARTtest();
   \   0000AF                ; Setup parameters for call to function initUARTtest
   \   0000AF   90....       MOV     DPTR,#(initUARTtest & 0xffff)
   \   0000B2   74..         MOV     A,#((initUARTtest >> 16) & 0xff)
   \   0000B4   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    278          }
   \   0000B7   7F03         MOV     R7,#0x3
   \   0000B9   02....       LJMP    ?BANKED_LEAVE_XDATA
    279          
    280          /*********************************************************************
    281           * @fn      SampleApp_ProcessEvent
    282           *
    283           * @brief   Generic Application Task event processor.  This function
    284           *          is called to process all events for the task.  Events
    285           *          include timers, messages and any other user defined events.
    286           *
    287           * @param   task_id  - ²Ù×÷ÏµÍ³·ÖÅäµÄÈÎÎñID.
    288           * @param   events -   ÊÂ¼þ´¦Àí
    289           *
    290           * @return  none
    291           */
    292          extern void halWait(BYTE wait);
    293          extern int Send_Flag;

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    294          int Send_Data=0;
   \                     Send_Data:
   \   000000                DS 2
    295          extern INT16U SrcSaddr;//·¢ËÍÊý¾ÝµØÖ·
    296          extern int Send_Flag_Consecution;
    297          void Frist_Data(void);

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    298          int Pingpong_Data = 0;
   \                     Pingpong_Data:
   \   000000                DS 2

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    299          int Pingpong_Flag = 0;
   \                     Pingpong_Flag:
   \   000000                DS 2

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    300          int Sensor_Flag = 0;
   \                     Sensor_Flag:
   \   000000                DS 2

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    301          int count = 0;
   \                     count:
   \   000000                DS 2
    302          extern uint16 ReadBattery(void);
    303          extern uint16 Read_Temp(void);
    304          extern uint8 ReadVoltage0(int portnumber);

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    305          uint16 Power_value;
   \                     Power_value:
   \   000000                DS 2

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    306          uint16 Temp_value;
   \                     Temp_value:
   \   000000                DS 2

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    307          uint8 Volt_value;
   \                     Volt_value:
   \   000000                DS 1
    308          

   \                                 In segment XDATA_I, align 1, keep-with-next
    309          uint8 rxBuf[16]={0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x68,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x16};//Í¬²½Ö¸Áî
   \                     rxBuf:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for rxBuf>`
   \   000010                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    310          uint8 outputnum = 0;
   \                     outputnum:
   \   000000                DS 1
    311          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    312          unsigned char status;
   \                     status:
   \   000000                DS 1
    313          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    314          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    315          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    316            afIncomingMSGPacket_t *MSGpkt;
    317            //uint8 buffer[4];
    318            //uint8 buf[5];
    319          
    320            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??SampleApp_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??SampleApp_ProcessEvent_0:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??SampleApp_ProcessEvent_1 & 0xFFFF
    321            {
    322              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   805B         SJMP    ??SampleApp_ProcessEvent_2
    323              while ( MSGpkt )
    324              {
    325                switch ( MSGpkt->hdr.event )
    326                {
    327                  // °´¼üÊÂ¼þ
    328                  case KEY_CHANGE:
    329                  //SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    330                  //MenuMenuDisp(((keyChange_t *)MSGpkt)->keys);
    331                  //ÆÁ±Î²Ëµ¥Ä¿Â¼
    332                  Menu_all(((keyChange_t *)MSGpkt)->keys);
    333                  break;
    334          
    335                  // ÊÕµ½ÐÅÏ¢ÊÂ¼þ£¨½ÓÊÕµ½ÉäÆµÐÅÏ¢£¬²¢½«Æä×ªµ½CC2430´®¿ÚÊä³ö£©
    336                  case AF_INCOMING_MSG_CMD:
    337                    SampleApp_MessageMSGCB( MSGpkt );
    338                    MSGpkt->hdr.event ^= AF_INCOMING_MSG_CMD;
    339                    break;
    340          
    341                  //Éè±¸¼ÓÈëÍøÂç
    342                  case ZDO_STATE_CHANGE:
    343                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_3:
   \   000018   85..82       MOV     DPL,?V0 + 0
   \   00001B   85..83       MOV     DPH,?V0 + 1
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   90....       MOV     DPTR,#SampleApp_NwkState
   \   000023   F0           MOVX    @DPTR,A
    344                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    345                        || (SampleApp_NwkState == DEV_ROUTER)
    346                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000024   6409         XRL     A,#0x9
   \   000026   600A         JZ      ??SampleApp_ProcessEvent_4
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6407         XRL     A,#0x7
   \   00002B   6005         JZ      ??SampleApp_ProcessEvent_4
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6406         XRL     A,#0x6
   \   000030   7035         JNZ     ??SampleApp_ProcessEvent_5
    347                    {
    348                      // ÔÚÒ»¸ö·¶Î§ÄÚ·¢ËÍÒ»¸öÐÅÏ¢
    349                      Frist_Data();
   \                     ??SampleApp_ProcessEvent_4:
   \   000032                ; Setup parameters for call to function Frist_Data
   \   000032   90....       MOV     DPTR,#(Frist_Data & 0xffff)
   \   000035   74..         MOV     A,#((Frist_Data >> 16) & 0xff)
   \   000037   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    350                      state2=10;
   \   00003A   740A         MOV     A,#0xa
   \   00003C   90....       MOV     DPTR,#state2
   \   00003F   F0           MOVX    @DPTR,A
    351                      for(int i=0;i<10;i++)
   \   000040   F5..         MOV     ?V0 + 2,A
    352                      halWait(200);
   \                     ??SampleApp_ProcessEvent_6:
   \   000042                ; Setup parameters for call to function halWait
   \   000042   79C8         MOV     R1,#-0x38
   \   000044   90....       MOV     DPTR,#(halWait & 0xffff)
   \   000047   74..         MOV     A,#((halWait >> 16) & 0xff)
   \   000049   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004C   15..         DEC     ?V0 + 2
   \   00004E   E5..         MOV     A,?V0 + 2
   \   000050   70F0         JNZ     ??SampleApp_ProcessEvent_6
    353                      osal_start_timerEx( SampleApp_TaskID,
    354                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    355                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000052                ; Setup parameters for call to function osal_start_timerEx
   \   000052   7CD0         MOV     R4,#-0x30
   \   000054   7D07         MOV     R5,#0x7
   \   000056   7A01         MOV     R2,#0x1
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   90....       MOV     DPTR,#(osal_start_timerEx & 0xffff)
   \   000062   74..         MOV     A,#((osal_start_timerEx >> 16) & 0xff)
   \                     ??SampleApp_ProcessEvent_7:
   \   000064   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    356                    }
    357                    else
    358                    {
    359                      // Éè±¸²»ÔÚÍøÂçÖÐ
    360                    }
    361                    break;
    362          
    363                  default:
    364                    break;
    365                }
    366          
    367                // ÊÍ·Å´æ´¢Æ÷
    368                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_5:
   \   000067                ; Setup parameters for call to function osal_msg_deallocate
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   90....       MOV     DPTR,#(osal_msg_deallocate & 0xffff)
   \   00006E   74..         MOV     A,#((osal_msg_deallocate >> 16) & 0xff)
   \   000070   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    369          
    370                // Next - if one is available
    371                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000073                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_2:
   \   000073   90....       MOV     DPTR,#SampleApp_TaskID
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   90....       MOV     DPTR,#(osal_msg_receive & 0xffff)
   \   00007B   74..         MOV     A,#((osal_msg_receive >> 16) & 0xff)
   \   00007D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000080   8A..         MOV     ?V0 + 0,R2
   \   000082   8B..         MOV     ?V0 + 1,R3
   \   000084   E5..         MOV     A,?V0 + 0
   \   000086   7002         JNZ     ??SampleApp_ProcessEvent_8
   \   000088   E5..         MOV     A,?V0 + 1
   \                     ??SampleApp_ProcessEvent_8:
   \   00008A   6041         JZ      ??SampleApp_ProcessEvent_9
   \   00008C   85..82       MOV     DPL,?V0 + 0
   \   00008F   85..83       MOV     DPH,?V0 + 1
   \   000092   E0           MOVX    A,@DPTR
   \   000093   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for SampleApp_ProcessEvent>_0`:
   \   000096   00           DB        0
   \   000097   03           DB        3
   \   000098   1A           DB        26
   \   000099   ....         DW        ??SampleApp_ProcessEvent_10
   \   00009B   C0           DB        192
   \   00009C   ....         DW        ??SampleApp_ProcessEvent_11
   \   00009E   D1           DB        209
   \   00009F   ....         DW        ??SampleApp_ProcessEvent_3
   \   0000A1   ....         DW        ??SampleApp_ProcessEvent_5
   \                     ??SampleApp_ProcessEvent_11:
   \   0000A3                ; Setup parameters for call to function Menu_all
   \   0000A3   85..82       MOV     DPL,?V0 + 0
   \   0000A6   85..83       MOV     DPH,?V0 + 1
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F9           MOV     R1,A
   \   0000AE   90....       MOV     DPTR,#(Menu_all & 0xffff)
   \   0000B1   74..         MOV     A,#((Menu_all >> 16) & 0xff)
   \   0000B3   80AF         SJMP    ??SampleApp_ProcessEvent_7
   \                     ??SampleApp_ProcessEvent_10:
   \   0000B5                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   0000B5   AA..         MOV     R2,?V0 + 0
   \   0000B7   AB..         MOV     R3,?V0 + 1
   \   0000B9   90....       MOV     DPTR,#(SampleApp_MessageMSGCB & 0xffff)
   \   0000BC   74..         MOV     A,#((SampleApp_MessageMSGCB >> 16) & 0xff)
   \   0000BE   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000C1   85..82       MOV     DPL,?V0 + 0
   \   0000C4   85..83       MOV     DPH,?V0 + 1
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   641A         XRL     A,#0x1a
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   809A         SJMP    ??SampleApp_ProcessEvent_5
    372              }
    373          
    374              // ·µ»ØÎ´´¦ÀíÊÂ¼þ
    375              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_9:
   \   0000CD   EE           MOV     A,R6
   \   0000CE   FA           MOV     R2,A
   \   0000CF   7480         MOV     A,#-0x80
   \   0000D1   6F           XRL     A,R7
   \                     ??SampleApp_ProcessEvent_12:
   \   0000D2   FB           MOV     R3,A
   \   0000D3   8025         SJMP    ??SampleApp_ProcessEvent_13
    376            }
    377          
    378          
    379            // ·¢ËÍÒ»¸öÐÅÏ¢ - Õâ¸öÊÂ¼þÊ±²úÉúÒ»¸öÊ±¼ä
    380            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_1:
   \   0000D5   EE           MOV     A,R6
   \   0000D6   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D8   501C         JNC     ??SampleApp_ProcessEvent_14
    381            {
    382              #if(defined(ZG_Coord))//µ±ÎªSinkÊ±£¬ÖÜÆÚÐÔ·¢ËÍÍ¬²½Ö¸Áî
    383                 SendData(rxBuf, 0xFFFF, 16);//¹ã²¥·¢ËÍ
    384          
    385                 //²âÊÔ³ÌÐò£º´®¿Ú×Ô·¢×ÔÊÕ
    386           /*      outputnum = 0;
    387                 while(outputnum<16)
    388                 {
    389                   //½ÓÊÕPCÊý¾Ý
    390                   RfRx.RXDATA.DataBuf[outputnum] = UartRX_Receive_Char();
    391                   outputnum = outputnum + 1;
    392                  }
    393                 URX0IF = 0;//Çå¿Õ´®¿Ú½ÓÊÕ»º´æ
    394                  //½«ARM·µ»ØÐÅÏ¢·¢ËÍÖÁPC
    395                  UartTX_Send_String(RfRx.RXDATA.DataBuf,16);
    396          */
    397              #endif
    398          
    399              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    400                                 2000);
   \   0000DA                ; Setup parameters for call to function osal_start_timerEx
   \   0000DA   7CD0         MOV     R4,#-0x30
   \   0000DC   7D07         MOV     R5,#0x7
   \   0000DE   7A01         MOV     R2,#0x1
   \   0000E0   7B00         MOV     R3,#0x0
   \   0000E2   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F9           MOV     R1,A
   \   0000E7   90....       MOV     DPTR,#(osal_start_timerEx & 0xffff)
   \   0000EA   74..         MOV     A,#((osal_start_timerEx >> 16) & 0xff)
   \   0000EC   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    401              // return unprocessed events
    402              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000EF   7401         MOV     A,#0x1
   \   0000F1   6E           XRL     A,R6
   \   0000F2   FA           MOV     R2,A
   \   0000F3   EF           MOV     A,R7
   \   0000F4   80DC         SJMP    ??SampleApp_ProcessEvent_12
    403            }
    404          
    405            // ·ÅÆúÎ´ÖªÊÂ¼þ
    406            return 0;
   \                     ??SampleApp_ProcessEvent_14:
   \   0000F6   7A00         MOV     R2,#0x0
   \   0000F8   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_13:
   \   0000FA   7F04         MOV     R7,#0x4
   \   0000FC   02....       LJMP    ?BANKED_LEAVE_XDATA
    407          }
    408          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    409          uint16 get_short_addr(void)
   \                     get_short_addr:
    410          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    411            uint16 Short_addr;
    412            Short_addr = RfRx.RXDATA.Saddr[0];
    413            Short_addr <<= 8;
    414            Short_addr = RfRx.RXDATA.Saddr[1];
    415            return Short_addr;
   \   000005   90....       MOV     DPTR,#(RfRx + 12)
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FA           MOV     R2,A
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C                REQUIRE ?Subroutine0
   \   00000C                ; // Fall through to label ?Subroutine0
    416          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    417          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    418          void Frist_Data(void)
   \                     Frist_Data:
    419          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    420          
    421          #ifdef ZG_Coord
    422                      HalLedBlink( HAL_LED_4, 2, 50, (1000 / 4) );
    423                      ClearScreen();
    424                      Print(3,0,"Found network OK",1);
    425                      halWait(200);
    426                      RfTx.TXDATA.HeadCom[0] = 'l';
    427                      RfTx.TXDATA.HeadCom[1] = 'o';
    428                      RfTx.TXDATA.HeadCom[2] = 'k';
    429                      SendData(RfTx.TxBuf, Send_Mode_Broadcast, 20);            //ÐÞ¸Ä»º³å£¡£¡
    430          #endif
    431          #ifdef ZG_Router //Â·ÓÉÆ÷
    432                      uint8 *ieeeAddr;
    433                      HalLedBlink( HAL_LED_4, 4, 50, (1000 / 4) );
    434                      ClearScreen();
    435                      Print(3,0,"Join network OK",1);
    436                      Print(0,0,"-----ROUTER-----",1);						
    437                      RfTx.TXDATA.HeadCom[0] = 'J';
    438                      RfTx.TXDATA.HeadCom[1] = 'O';
    439                      RfTx.TXDATA.HeadCom[2] = 'N';
    440          				
    441                      ieeeAddr = NLME_GetExtAddr();
    442                      memcpy(RfTx.TXDATA.Laddr,ieeeAddr,8);
    443                      RfTx.TXDATA.Saddr = NLME_GetShortAddr();
    444                      RfTx.TXDATA.DataBuf[0] = 'R';
    445                      RfTx.TXDATA.DataBuf[1] = 'O';
    446                      RfTx.TXDATA.DataBuf[2] = 'U';
    447                      SendData(RfTx.TxBuf, 0x0000, 33);                         //ÐÞ¸Ä»º³å£¡£¡
    448          #endif
    449          #ifdef ZG_ENDDEVICE //ÖÕ¶ËÉè±¸
    450                      uint8 *ieeeAddr;
    451                      HalLedBlink( HAL_LED_4, 3, 50, (1000 / 4) );
   \   000005                ; Setup parameters for call to function HalLedBlink
   \   000005   7CFA         MOV     R4,#-0x6
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7B32         MOV     R3,#0x32
   \   00000B   7A03         MOV     R2,#0x3
   \   00000D   7908         MOV     R1,#0x8
   \   00000F   90....       MOV     DPTR,#(HalLedBlink & 0xffff)
   \   000012   74..         MOV     A,#((HalLedBlink >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    452          
    453                      //ClearScreen();
    454                      //Print(3,0,"Join network OK",1);
    455                      //Print(0,4,"---ENDDEVICE----",1);
    456          			
    457                      RfTx.TXDATA.HeadCom[0] = 'J';
   \   000017   744A         MOV     A,#0x4a
   \   000019   90....       MOV     DPTR,#RfTx
   \   00001C   F0           MOVX    @DPTR,A
    458                      RfTx.TXDATA.HeadCom[1] = 'O';
   \   00001D   744F         MOV     A,#0x4f
   \   00001F   90....       MOV     DPTR,#(RfTx + 1)
   \   000022   F0           MOVX    @DPTR,A
    459                      RfTx.TXDATA.HeadCom[2] = 'N';
   \   000023   744E         MOV     A,#0x4e
   \   000025   90....       MOV     DPTR,#(RfTx + 2)
   \   000028   F0           MOVX    @DPTR,A
    460          						
    461                      ieeeAddr = NLME_GetExtAddr();
    462                      memcpy(RfTx.TXDATA.Laddr,ieeeAddr,8);
   \   000029                ; Setup parameters for call to function memcpy
   \   000029   75..08       MOV     ?V0 + 0,#0x8
   \   00002C   75..00       MOV     ?V0 + 1,#0x0
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034                ; Setup parameters for call to function NLME_GetExtAddr
   \   000034   90....       MOV     DPTR,#(NLME_GetExtAddr & 0xffff)
   \   000037   74..         MOV     A,#((NLME_GetExtAddr >> 16) & 0xff)
   \   000039   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003C   EA           MOV     A,R2
   \   00003D   FC           MOV     R4,A
   \   00003E   EB           MOV     A,R3
   \   00003F   FD           MOV     R5,A
   \   000040   7A..         MOV     R2,#((RfTx + 3) & 0xff)
   \   000042   7B..         MOV     R3,#(((RfTx + 3) >> 8) & 0xff)
   \   000044   90....       MOV     DPTR,#(memcpy & 0xffff)
   \   000047   74..         MOV     A,#((memcpy >> 16) & 0xff)
   \   000049   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
    463                      RfTx.TXDATA.Saddr = NLME_GetShortAddr();
   \   000051                ; Setup parameters for call to function NLME_GetShortAddr
   \   000051   90....       MOV     DPTR,#(NLME_GetShortAddr & 0xffff)
   \   000054   74..         MOV     A,#((NLME_GetShortAddr >> 16) & 0xff)
   \   000056   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000059   90....       MOV     DPTR,#(RfTx + 11)
   \   00005C   EA           MOV     A,R2
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   EB           MOV     A,R3
   \   000060   F0           MOVX    @DPTR,A
    464          
    465                      RfTx.TXDATA.DataBuf[0] = 'R';
   \   000061   7452         MOV     A,#0x52
   \   000063   90....       MOV     DPTR,#(RfTx + 13)
   \   000066   F0           MOVX    @DPTR,A
    466                      RfTx.TXDATA.DataBuf[1] = 'F';
   \   000067   7446         MOV     A,#0x46
   \   000069   90....       MOV     DPTR,#(RfTx + 14)
   \   00006C   F0           MOVX    @DPTR,A
    467                      RfTx.TXDATA.DataBuf[2] = 'D';
   \   00006D   7444         MOV     A,#0x44
   \   00006F   90....       MOV     DPTR,#(RfTx + 15)
   \   000072   F0           MOVX    @DPTR,A
    468                      SendData(RfTx.TxBuf, 0x0000, 33);                        //ÐÞ¸Ä»º³å£¡£¡
   \   000073                ; Setup parameters for call to function SendData
   \   000073   7921         MOV     R1,#0x21
   \   000075   7C00         MOV     R4,#0x0
   \   000077   7D00         MOV     R5,#0x0
   \   000079   7A..         MOV     R2,#(RfTx & 0xff)
   \   00007B   7B..         MOV     R3,#((RfTx >> 8) & 0xff)
   \   00007D   90....       MOV     DPTR,#(SendData & 0xffff)
   \   000080   74..         MOV     A,#((SendData >> 16) & 0xff)
   \   000082   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    469          #endif
    470          }
   \   000085   02....       LJMP    ??Subroutine1_0 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine1_0:
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    471          
    472          /*********************************************************************
    473           * Event Generation Functions
    474           */
    475          /*********************************************************************
    476           * @fn      SampleApp_HandleKeys
    477           *
    478           * @brief   ÊÖ±úºÍ°´¼üµÄÇý¶¯³ÌÐò
    479           *
    480           * @param   shift -  if ÊÇ shift/alt±íÊ¾Îªtrue
    481           * @param   keys - Î»É¨Ãè°´¼üÊÂ¼þ. Valid entries:
    482           *                 HAL_KEY_SW_2
    483           *                 HAL_KEY_SW_1
    484           *
    485           * @return  none
    486           */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    487          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    488          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    489          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    490               //MenuMenuDisp(keys);
    491          }
   \   000000   02....       LJMP    ?BRET
    492          
    493          /*********************************************************************
    494           * LOCAL FUNCTIONS
    495           */
    496          
    497          /*********************************************************************
    498           * @fn      SampleApp_MessageMSGCB
    499           *
    500           * @brief   »ØÊÕÊý¾Ý´¦ÀíÆ÷.  Õâ¸öº¯ÊýÓÃÀ´´¦ÀíÊäÈëµÄÊý¾Ý£¬Êý¾Ý¿ÉÄÜÀ´×ÔÓÚÆäËûÉè±¸.
    501           *          ËùÒÔ½¨Á¢ÔÚ²»Í¬´®IDÖ®ÉÏ£¬Íê³É²»Í¬µÄ×÷ÓÃ.
    502           *
    503           * @param   none
    504           *
    505           * @return  none
    506           */
    507          extern void ClearScreenLcd(void);
    508          //uint8 23 = 16 + 7;  µØÖ·Î»×î¸ßÓÐ3Î»
    509          //uint8 UartStrSub[5];

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    510          uint8 UartStr[27];//ÐÞ¸Ä»º³å£¡£¡
   \                     UartStr:
   \   000000                DS 27
    511          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    512          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    513          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    514            ///HalLedBlink( HAL_LED_4, 1, 50, (1000 / 4) );
    515            P1DIR |= 0x02;
   \   000009   43FE02       ORL     0xfe,#0x2
    516            P1_1 = 0;
   \   00000C   C291         CLR     0x90.1
    517            halWait(200);
   \   00000E                ; Setup parameters for call to function halWait
   \   00000E   79C8         MOV     R1,#-0x38
   \   000010   90....       MOV     DPTR,#(halWait & 0xffff)
   \   000013   74..         MOV     A,#((halWait >> 16) & 0xff)
   \   000015   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    518            P1_1 = 1;
   \   000018   D291         SETB    0x90.1
    519          #ifdef	ZG_Coord
    520          	uint8 i, j;
    521                  uint8 HaveFlag;
    522          	memcpy(RfRx.RxBuf,pkt->cmd.Data,33);                   //ÐÞ¸Ä»º³å£¡£¡
    523          	if((RfRx.RXDATA.HeadCom[0] == 'J') && (RfRx.RXDATA.HeadCom[1] == 'O') && (RfRx.RXDATA.HeadCom[2] == 'N'))//ÓÐÐÂ½Úµã¼ÓÈëÍøÂç
    524          	{
    525          		if((RfRx.RXDATA.DataBuf[0] == 'R') && (RfRx.RXDATA.DataBuf[1] == 'F') && (RfRx.RXDATA.DataBuf[2] == 'D'))//RFD½Úµã
    526          		{
    527          			for(i=0; i<8; i++)
    528          			{
    529          				JoinNode.RfdAddr[JoinNode.RfdCount][i] = RfRx.RXDATA.Laddr[i];
    530          			}
    531          			for(i=0; i<2; i++)
    532          			{
    533          				JoinNode.RfdAddr[JoinNode.RfdCount][8+i] = RfRx.RXDATA.Saddr[1-i];
    534          			}
    535          				
    536          			for(j=0; j<JoinNode.RfdCount; j++)//ÅÐ¶ÏÓÐÎÞÖØ¸´¼ÓÈëµÄ½Úµã
    537          			{
    538          				HaveFlag = 1;
    539          				for(i=0; i<8; i++)
    540          				{
    541          					if(JoinNode.RfdAddr[JoinNode.RfdCount][i] != JoinNode.RfdAddr[j][i])
    542          					{
    543          						HaveFlag = 0;
    544          						break;//²»ÊÇ
    545          					}
    546          				}
    547          				if(HaveFlag == 0)continue;
    548          				JoinNode.RfdCount--;//ÊÇ
    549          				JoinNode.RfdAddr[j][8] = RfRx.RXDATA.Saddr[1];
    550          				JoinNode.RfdAddr[j][9] = RfRx.RXDATA.Saddr[0];	//ÐÞ¸ÄËüµÄÍøÂçµØÖ·
    551          				break;
    552          			}
    553          			JoinNode.RfdCount++;
    554          		}
    555          		else if((RfRx.RXDATA.DataBuf[0] == 'R') && (RfRx.RXDATA.DataBuf[1] == 'O') && (RfRx.RXDATA.DataBuf[2] == 'U'))//Â·ÓÉ½Úµã
    556          		{
    557          			for(i=0; i<8; i++)
    558          			{
    559          				JoinNode.RouterAddr[JoinNode.RouterCount][i] = RfRx.RXDATA.Laddr[i];
    560          			}
    561          			for(i=0; i<2; i++)
    562          			{
    563          				JoinNode.RouterAddr[JoinNode.RouterCount][8+i] = RfRx.RXDATA.Saddr[1-i];
    564          			}
    565          				
    566          			for(j=0; j<JoinNode.RouterCount; j++)//ÅÐ¶ÏÓÐÎÞÖØ¸´¼ÓÈëµÄ½Úµã
    567          			{
    568          				HaveFlag = 1;
    569          				for(i=0; i<8; i++)
    570          				{
    571          					if(JoinNode.RouterAddr[JoinNode.RouterCount][i] != JoinNode.RouterAddr[j][i])
    572          					{
    573          						HaveFlag = 0;
    574          						break;//²»ÊÇ
    575          					}
    576          				}
    577          				if(HaveFlag == 0)continue;
    578          				JoinNode.RouterCount--;//ÊÇ
    579          				JoinNode.RouterAddr[j][8] = RfRx.RXDATA.Saddr[1];
    580          				JoinNode.RouterAddr[j][9] = RfRx.RXDATA.Saddr[0];	//ÐÞ¸ÄËüµÄÍøÂçµØÖ·
    581          				break;
    582          			}
    583          			JoinNode.RouterCount++;
    584                          }
    585                          UartTX_Send_String(RfRx.RxBuf,20);                                     //ÐÞ¸Ä»º³å£¡£¡(UartStr,27)
    586          	}
    587              else
    588             {
    589                  if (RfRx.RXDATA.HeadCom[0] == 'D')
    590                  {
    591                      if (RfRx.RXDATA.HeadCom[1] == 'R')
    592                      {
    593                        sprintf(UartStr,(char *)"%c%c%c%c%c%c%s",RfRx.RXDATA.HeadCom[1],RfRx.RXDATA.Laddr[0],RfRx.RXDATA.Laddr[1],RfRx.RXDATA.Laddr[2],RfRx.RXDATA.Saddr[0],RfRx.RXDATA.Saddr[1],RfRx.RXDATA.DataBuf);
    594                      }
    595                      else if (RfRx.RXDATA.HeadCom[1] == 'E')
    596                      {
    597                        sprintf(UartStr,(char *)"%c%c%c%c%c%c%s",RfRx.RXDATA.HeadCom[2],RfRx.RXDATA.Laddr[0],RfRx.RXDATA.Laddr[1],RfRx.RXDATA.Laddr[2],RfRx.RXDATA.Saddr[0],RfRx.RXDATA.Saddr[1],RfRx.RXDATA.DataBuf);
    598                      }
    599                  }
    600                  UartStr[26] = '\n';//ÐÞ¸Ä»º³å£¡£¡
    601                  UartTX_Send_String(RfRx.RxBuf,20);                                     //ÐÞ¸Ä»º³å£¡£¡(UartStr,27)
    602              }
    603          #endif
    604          #if (defined(ZG_Router) || defined(ZG_ENDDEVICE))
    605          /*
    606              SendData(RfRx.RxBuf, 0x0000, 16);//·¢ËÍÖÁSink
    607              memcpy(RfRx.RxBuf,pkt->cmd.Data,20);                                          //ÐÞ¸Ä»º³å£¡£¡
    608              if((RfRx.RXDATA.HeadCom[0] == 'l')&&(RfRx.RXDATA.HeadCom[1] == 'o')&&(RfRx.RXDATA.HeadCom[2] == 'k'))
    609              {
    610                  halWait(200);
    611                  Frist_Data();
    612              }
    613          
    614              //ÖÕ¶Ë½ÓÊÕµ½ÉäÆµÐÅÏ¢×ª·¢ÖÁARM
    615              UartTX_Send_String(RfRx.RxBuf,16);
    616              //¶ÁÈ¡ARM·µ»ØÐÅÏ¢£¬"16"ÎªÖÕÖ¹·û
    617              //uint8 temp = 1;
    618              //uint8 counter = 0;
    619              outputnum = 0;
    620              while((outputnum < 20) && (RfRx.RXDATA.DataBuf[outputnum-1] != 0x16))
    621              {
    622                  RfRx.RXDATA.DataBuf[outputnum] = UartRX_Receive_Char();
    623                  outputnum = outputnum + 1;
    624              }
    625              URX0IF = 0;//Çå¿Õ´®¿Ú½ÓÊÕ»º´æ
    626              //½«ARM·µ»ØÐÅÏ¢·¢ËÍÖÁSink
    627              SendData(RfRx.RxBuf, 0x0000, 33);//·¢ËÍÖÁSink
    628          */
    629          
    630              //²âÊÔ³ÌÐò-2£º½Úµã×Ô·¢×ÔÊÕ
    631              memcpy(RfRx.RxBuf,pkt->cmd.Data,pkt->cmd.DataLength);
   \   00001A                ; Setup parameters for call to function memcpy
   \   00001A   EE           MOV     A,R6
   \   00001B   2413         ADD     A,#0x13
   \   00001D   F582         MOV     DPL,A
   \   00001F   EF           MOV     A,R7
   \   000020   3400         ADDC    A,#0x0
   \   000022   F583         MOV     DPH,A
   \   000024   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000027   EE           MOV     A,R6
   \   000028   2415         ADD     A,#0x15
   \   00002A   F582         MOV     DPL,A
   \   00002C   EF           MOV     A,R7
   \   00002D   3400         ADDC    A,#0x0
   \   00002F   F583         MOV     DPH,A
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FC           MOV     R4,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FD           MOV     R5,A
   \   000036   7A..         MOV     R2,#(RfRx & 0xff)
   \   000038   7B..         MOV     R3,#((RfRx >> 8) & 0xff)
   \   00003A   90....       MOV     DPTR,#(memcpy & 0xffff)
   \   00003D   74..         MOV     A,#((memcpy >> 16) & 0xff)
   \   00003F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
    632              SendData(RfRx.RxBuf, 0x0000, 16);//·¢ËÍÖÁSink
   \   000047                ; Setup parameters for call to function SendData
   \   000047   7910         MOV     R1,#0x10
   \   000049   7C00         MOV     R4,#0x0
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   7A..         MOV     R2,#(RfRx & 0xff)
   \   00004F   7B..         MOV     R3,#((RfRx >> 8) & 0xff)
   \   000051   90....       MOV     DPTR,#(SendData & 0xffff)
   \   000054   74..         MOV     A,#((SendData >> 16) & 0xff)
   \   000056   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    633          
    634              UartTX_Send_String(RfRx.RxBuf,16);
                                        ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"
   \   000059                ; Setup parameters for call to function UartTX_Send_String
   \   000059   7C10         MOV     R4,#0x10
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7A..         MOV     R2,#(RfRx & 0xff)
   \   00005F   7B..         MOV     R3,#((RfRx >> 8) & 0xff)
   \   000061   90....       MOV     DPTR,#(UartTX_Send_String & 0xffff)
   \   000064   74..         MOV     A,#((UartTX_Send_String >> 16) & 0xff)
   \   000066   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    635              outputnum = 0;
   \   000069   E4           CLR     A
   \   00006A   90....       MOV     DPTR,#outputnum
   \   00006D   F0           MOVX    @DPTR,A
   \                     ??SampleApp_MessageMSGCB_0:
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   24..         ADD     A,#((RfRx + 12) & 0xff)
   \   000071   F582         MOV     DPL,A
   \   000073   E4           CLR     A
   \   000074   34..         ADDC    A,#(((RfRx + 12) >> 8) & 0xff)
   \   000076   F583         MOV     DPH,A
   \   000078   E0           MOVX    A,@DPTR
   \   000079   6416         XRL     A,#0x16
   \   00007B   6022         JZ      ??SampleApp_MessageMSGCB_1
    636              while((outputnum < 20) && (RfRx.RXDATA.DataBuf[outputnum-1] != 0x16))
    637              {
    638                  RfRx.RXDATA.DataBuf[outputnum] = UartRX_Receive_Char();
   \   00007D                ; Setup parameters for call to function UartRX_Receive_Char
   \   00007D   90....       MOV     DPTR,#(UartRX_Receive_Char & 0xffff)
   \   000080   74..         MOV     A,#((UartRX_Receive_Char >> 16) & 0xff)
   \   000082   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000085   90....       MOV     DPTR,#outputnum
   \   000088   E0           MOVX    A,@DPTR
   \   000089   24..         ADD     A,#((RfRx + 13) & 0xff)
   \   00008B   F582         MOV     DPL,A
   \   00008D   E4           CLR     A
   \   00008E   34..         ADDC    A,#(((RfRx + 13) >> 8) & 0xff)
   \   000090   F583         MOV     DPH,A
   \   000092   E9           MOV     A,R1
   \   000093   F0           MOVX    @DPTR,A
    639                  outputnum = outputnum + 1;
   \   000094   90....       MOV     DPTR,#outputnum
   \   000097   E0           MOVX    A,@DPTR
   \   000098   04           INC     A
   \   000099   F0           MOVX    @DPTR,A
    640              }
   \   00009A   C3           CLR     C
   \   00009B   9414         SUBB    A,#0x14
   \   00009D   40CF         JC      ??SampleApp_MessageMSGCB_0
    641              URX0IF = 0;//Çå¿Õ´®¿Ú½ÓÊÕ»º´æ
   \                     ??SampleApp_MessageMSGCB_1:
   \   00009F   C28B         CLR     0x88.3
    642              //½«ARM·µ»ØÐÅÏ¢·¢ËÍÖÁSink
    643              SendData(RfRx.RXDATA.DataBuf, 0x0000, 20);//·¢ËÍÖÁSink
   \   0000A1                ; Setup parameters for call to function SendData
   \   0000A1   7914         MOV     R1,#0x14
   \   0000A3   7C00         MOV     R4,#0x0
   \   0000A5   7D00         MOV     R5,#0x0
   \   0000A7   7A..         MOV     R2,#((RfRx + 13) & 0xff)
   \   0000A9   7B..         MOV     R3,#(((RfRx + 13) >> 8) & 0xff)
   \   0000AB   90....       MOV     DPTR,#(SendData & 0xffff)
   \   0000AE   74..         MOV     A,#((SendData >> 16) & 0xff)
   \   0000B0   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    644          #endif	
    645          
    646          }
   \   0000B3   02....       LJMP    ?Subroutine0 & 0xFFFF
    647          
    648          /*********************************************************************
    649           * @fn      SampleApp_SendPeriodicMessage
    650           *
    651           * @brief   ·¢ËÍÒ»¸öÖÜÆÚÊý¾Ý
    652           *
    653           * @param   none
    654           *
    655           * @return  none
    656           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    657          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    658          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    659            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    660                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    661                                 1,
    662                                 (uint8*)&SampleAppPeriodicCounter,
    663                                 &SampleApp_TransID,
    664                                 AF_DISCV_ROUTE,
    665                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..0A       MOV     ?V0 + 0,#0xa
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000010   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#(SampleAppPeriodicCounter & 0xff)
   \   00001B   75....       MOV     ?V0 + 1,#((SampleAppPeriodicCounter >> 8) & 0xff)
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000037   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000039   7A..         MOV     R2,#(SampleApp_Periodic_DstAddr & 0xff)
   \   00003B   7B..         MOV     R3,#((SampleApp_Periodic_DstAddr >> 8) & 0xff)
   \   00003D   90....       MOV     DPTR,#(AF_DataRequest & 0xffff)
   \   000040   74..         MOV     A,#((AF_DataRequest >> 16) & 0xff)
   \   000042   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000045   7409         MOV     A,#0x9
   \   000047   02....       LJMP    ?Subroutine1 & 0xFFFF
    666            {
    667            }
    668            else
    669            {
    670              // Error occurred in request to send.
    671            }
    672          }
    673          
    674          /*********************************************************************
    675           * @fn      SampleApp_SendFlashMessage
    676           *
    677           * @brief   ·¢ËÍÒ»×éÉÁË¸£¨Ð¡µÆÉÁË¸µÄÖÜÆÚ£©Êý¾Ý.
    678           *
    679           * @param   flashTime - ºÁÃë
    680           *
    681           * @return  none
    682           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    683          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    684          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    685            uint8 buffer[3];
    686            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    687            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    688            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    689          
    690            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    691                                 SAMPLEAPP_FLASH_CLUSTERID,
    692                                 3,
    693                                 buffer,
    694                                 &SampleApp_TransID,
    695                                 AF_DISCV_ROUTE,
    696                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..0A       MOV     ?V0 + 0,#0xa
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000034   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000063   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000065   7A..         MOV     R2,#(SampleApp_Flash_DstAddr & 0xff)
   \   000067   7B..         MOV     R3,#((SampleApp_Flash_DstAddr >> 8) & 0xff)
   \   000069   90....       MOV     DPTR,#(AF_DataRequest & 0xffff)
   \   00006C   74..         MOV     A,#((AF_DataRequest >> 16) & 0xff)
   \   00006E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000071   7409         MOV     A,#0x9
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
    697            {
    698            }
    699            else
    700            {
    701              // Error occurred in request to send.
    702            }
    703          }
   \   000076   7403         MOV     A,#0x3
   \   000078   80..         SJMP    ?Subroutine1
    704          
    705          //**********************************************************************
    706          //**ÒÔ¶ÌµØÖ··½Ê½·¢ËÍÊý¾Ý
    707          //buf ::·¢ËÍµÄÊý¾Ý
    708          //addr::Ä¿µÄµØÖ·
    709          //Leng::Êý¾Ý³¤¶È
    710          //********************************************************************

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    711          uint8 SendData(uint8 *buf, uint16 addr, uint8 Leng)
   \                     SendData:
    712          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    713          	afAddrType_t SendDataAddr;
    714          	
    715          	SendDataAddr.addrMode = (afAddrMode_t)Addr16Bit;         //¶ÌµØÖ··¢ËÍ
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    716          	SendDataAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7414         MOV     A,#0x14
   \   000019   F0           MOVX    @DPTR,A
    717          	SendDataAddr.addr.shortAddr = addr;
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   EC           MOV     A,R4
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   ED           MOV     A,R5
   \   000024   F0           MOVX    @DPTR,A
    718                  if ( AF_DataRequest( &SendDataAddr, //·¢ËÍµÄµØÖ·ºÍÄ£Ê½
    719                                 &SampleApp_epDesc,   //ÖÕ¶Ë£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©
    720                                 2,//·¢ËÍ´®ID
    721                                 Leng,
    722                                 buf,
    723                                 &SampleApp_TransID,  //ÐÅÏ¢ID£¨²Ù×÷ÏµÍ³²ÎÊý£©
    724                                 AF_DISCV_ROUTE,
    725                               //  AF_ACK_REQUEST,
    726                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000025                ; Setup parameters for call to function AF_DataRequest
   \   000025   75..0A       MOV     ?V0 + 0,#0xa
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   75....       MOV     ?V0 + 0,#(SampleApp_TransID & 0xff)
   \   000030   75....       MOV     ?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   8A..         MOV     ?V0 + 0,R2
   \   00003A   8B..         MOV     ?V0 + 1,R3
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   89..         MOV     ?V0 + 0,R1
   \   000043   75..00       MOV     ?V0 + 1,#0x0
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..02       MOV     ?V0 + 0,#0x2
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   7920         MOV     R1,#0x20
   \   000055   7C..         MOV     R4,#(SampleApp_epDesc & 0xff)
   \   000057   7D..         MOV     R5,#((SampleApp_epDesc >> 8) & 0xff)
   \   000059   7409         MOV     A,#0x9
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   90....       MOV     DPTR,#(AF_DataRequest & 0xffff)
   \   000065   74..         MOV     A,#((AF_DataRequest >> 16) & 0xff)
   \   000067   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00006A   7409         MOV     A,#0x9
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   E9           MOV     A,R1
   \   000070   7004         JNZ     ??SendData_0
    727          	{
    728          		return 1;
   \   000072   7901         MOV     R1,#0x1
   \   000074   8002         SJMP    ??SendData_1
    729          	}
    730          	else
    731          	{
    732          		return 0;// Error occurred in request to send.
   \                     ??SendData_0:
   \   000076   7900         MOV     R1,#0x0
   \                     ??SendData_1:
   \   000078   7404         MOV     A,#0x4
   \   00007A                REQUIRE ?Subroutine1
   \   00007A                ; // Fall through to label ?Subroutine1
    733          	}
    734          }

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Group 1">>`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for LanguageSel>`:
   \   000000   01           DB 1

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SampleApp_ClusterList>`:
   \   000000   01000200     DW 1, 2

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for SampleApp_SimpleDesc>`:
   \   000000   14           DB 20
   \   000001   080F0100     DW 3848, 1
   \   000005   0002         DB 0, 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for rxBuf>`:
   \   000000   68000000     DB 104, 0, 0, 0, 0, 0, 0, 104, 255, 255, 255, 255, 255, 255, 255, 22
   \            00000068
   \            FFFFFFFF
   \            FFFFFF16

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Group 1">`:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for <Constant "Group 1">>`
   \   000008                REQUIRE __INIT_XDATA_I

   \                                 In segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
    735          
    736          
    737          //**********************************************************************
    738          //**ÒÔÀ©Õ¹£¨³¤£©µØÖ··½Ê½·¢ËÍÊý¾Ý
    739          //buf ::·¢ËÍµÄÊý¾Ý
    740          //addr::Ä¿µÄµØÖ·
    741          //Leng::Êý¾Ý³¤¶È
    742          /********************************************************************
    743          uint8 SendData(uint8 *buf, uint16 *addr, uint8 Leng)
    744          {
    745          	afAddrType_t SendDataAddr;
    746          	
    747          	SendDataAddr.addrMode = (afAddrMode_t)Addr64Bit;         //³¤µØÖ··¢ËÍ
    748          	SendDataAddr.endPoint = SAMPLEAPP_ENDPOINT;
    749          	SendDataAddr.addr.shortAddr = addr;
    750                  if ( AF_DataRequest( &SendDataAddr, //·¢ËÍµÄµØÖ·ºÍÄ£Ê½
    751                                 &SampleApp_epDesc,   //ÖÕ¶Ë£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©
    752                                 2,//·¢ËÍ´®ID
    753                                 Leng,
    754                                 buf,
    755                                 &SampleApp_TransID,  //ÐÅÏ¢ID£¨²Ù×÷ÏµÍ³²ÎÊý£©
    756                                 AF_DISCV_ROUTE,
    757                               //  AF_ACK_REQUEST,
    758                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    759          	{
    760          		return 1;
    761          	}
    762          	else
    763          	{
    764          		return 0;// Error occurred in request to send.
    765          	}
    766          }
    767          
    768          ********************************************************************
    769          *********************************************************************/
    770          
    771          
    772          //Graduation Test Gao Lao Zhuang Tested Wadnd Wanted Helld

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     Frist_Data                        0      0     24
       -> HalLedBlink                  0      0     20
       -> NLME_GetExtAddr              0      0     24
       -> memcpy                       0      0     24
       -> NLME_GetShortAddr            0      0     20
       -> SendData                     0      0     20
     SampleApp_HandleKeys              0      0      0
     SampleApp_Init                    0      0     14
       -> afRegister                   0      0     22
       -> RegisterForKeys              0      0     22
       -> osal_memcpy                  0      0     28
       -> aps_AddGroup                 0      0     22
       -> initUARTtest                 0      0     22
     SampleApp_MessageMSGCB            1      0     23
       -> halWait                      0      0     18
       -> memcpy                       0      0     22
       -> SendData                     0      0     18
       -> UartTX_Send_String           0      0     18
       -> UartRX_Receive_Char          0      0     18
       -> SendData                     0      0     18
     SampleApp_ProcessEvent            0      0     12
       -> osal_msg_receive             0      0     24
       -> Frist_Data                   0      0     24
       -> halWait                      0      0     24
       -> osal_start_timerEx           0      0     24
       -> osal_msg_deallocate          0      0     24
       -> osal_msg_receive             0      0     24
       -> Menu_all                     0      0     24
       -> SampleApp_MessageMSGCB       0      0     24
       -> osal_start_timerEx           0      0     24
     SampleApp_SendFlashMessage        1      0     22
       -> AF_DataRequest               0      0     44
     SampleApp_SendPeriodicMessage     0      0     19
       -> AF_DataRequest               0      0     38
     SendData                          1      0     33
       -> AF_DataRequest               0      0     46
     get_short_addr                    0      0      9


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     P1DIR                             1
     LanguageSel                       1
     RfRx                             33
     RfTx                             33
     SampleApp_ClusterList             4
     SampleApp_SimpleDesc             12
     JoinNode                        402
     SampleApp_TaskID                  1
     Menu_Key                          1
     SampleApp_NwkState                1
     SampleApp_TransID                 1
     SampleApp_Periodic_DstAddr        4
     SampleApp_Flash_DstAddr           4
     SampleApp_Group                  18
     Remove                            2
     SampleAppPeriodicCounter          1
     SampleAppFlashCounter             1
     state2                            1
     arr                              20
     SampleApp_Init                  188
     Send_Data                         2
     Pingpong_Data                     2
     Pingpong_Flag                     2
     Sensor_Flag                       2
     count                             2
     Power_value                       2
     Temp_value                        2
     Volt_value                        1
     rxBuf                            16
     outputnum                         1
     status                            1
     SampleApp_ProcessEvent          255
     get_short_addr                   12
     ?Subroutine0                      5
     Frist_Data                      136
     ?Subroutine1                      8
     SampleApp_epDesc                  6
     SampleApp_HandleKeys              3
     UartStr                          27
     SampleApp_MessageMSGCB          182
     SampleApp_SendPeriodicMessage    74
     SampleApp_SendFlashMessage      122
     SendData                        122
     ?<Initializer for <Constant "Group 1">>
                                       8
     ?<Initializer for LanguageSel>    1
     ?<Initializer for SampleApp_ClusterList>
                                       4
     ?<Initializer for SampleApp_SimpleDesc>
                                      12
     ?<Initializer for rxBuf>         16
     ?<Constant "Group 1">             8
     _A_TCON                           1
     _A_P1                             1

 
 1 107 bytes in segment BANKED_CODE
     3 bytes in segment SFR_AN
    41 bytes in segment XDATA_I
    41 bytes in segment XDATA_ID
   573 bytes in segment XDATA_Z
 
 1 148 bytes of CODE  memory
     0 bytes of DATA  memory (+ 3 bytes shared)
   614 bytes of XDATA memory

Errors: none
Warnings: 3
