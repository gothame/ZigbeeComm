//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:52:36 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\stack\zdo\ZDObject.c                          /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wE /
//                          ndev.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS  /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          MT_TASK -D ZG_ENDDEVICE -lC                      /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\ -lA           /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\EndDeviceEB\Obj\ -e          /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\stack\zdo\ZDObject.c"                        /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\ZDObject.s51   /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ZDObject

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?G_EQ
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??ZDO_CreateAlignedUINT16List,021203H
        ARGFRAME XSTACK, 30, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_AnyClusterMatches
        FUNCTION ZDO_AnyClusterMatches,0203H
        ARGFRAME XSTACK, 32, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_EndDeviceTimeoutCB
        FUNCTION ZDO_EndDeviceTimeoutCB,0203H
        PUBLIC ZDO_Init
        FUNCTION ZDO_Init,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_ProcessActiveEPReq
        FUNCTION ZDO_ProcessActiveEPReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDO_ProcessBindUnbindRsp
        FUNCTION ZDO_ProcessBindUnbindRsp,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_ProcessEPListRsp
        FUNCTION ZDO_ProcessEPListRsp,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ProcessMatchDescReq
        FUNCTION ZDO_ProcessMatchDescReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDO_ProcessNodeDescReq
        FUNCTION ZDO_ProcessNodeDescReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ProcessPowerDescReq
        FUNCTION ZDO_ProcessPowerDescReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ProcessSimpleDescReq
        FUNCTION ZDO_ProcessSimpleDescReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDO_StartDevice
        FUNCTION ZDO_StartDevice,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBWEAK __Constant_0
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN NLME_DeviceJoiningInit
        FUNCTION NLME_DeviceJoiningInit,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN NLME_NetworkDiscoveryRequest
        FUNCTION NLME_NetworkDiscoveryRequest,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN nwk_ScanJoiningOrphan
        FUNCTION nwk_ScanJoiningOrphan,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN NLME_OrphanJoinRequest
        FUNCTION NLME_OrphanJoinRequest,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDSecMgrConfig
        FUNCTION ZDSecMgrConfig,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN osal_start_timer
        FUNCTION osal_start_timer,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME XSTACK, 30, STACK
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME XSTACK, 30, STACK
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN NLME_GetProtocolVersion
        FUNCTION NLME_GetProtocolVersion,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN ZDP_NodeDescMsg
        FUNCTION ZDP_NodeDescMsg,0202H
        ARGFRAME XSTACK, 15, STACK
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN ZDP_PowerDescMsg
        FUNCTION ZDP_PowerDescMsg,0202H
        ARGFRAME XSTACK, 15, STACK
        EXTERN afFindSimpleDesc
        FUNCTION afFindSimpleDesc,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN ZDP_SimpleDescMsg
        FUNCTION ZDP_SimpleDescMsg,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME XSTACK, 30, STACK
        EXTERN afNumEndPoints
        FUNCTION afNumEndPoints,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN afEndPoints
        FUNCTION afEndPoints,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN ZDP_EPRsp
        FUNCTION ZDP_EPRsp,0202H
        ARGFRAME XSTACK, 37, STACK
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME XSTACK, 30, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 33, STACK
        EXTERN ZDApp_MatchDescRspCB
        FUNCTION ZDApp_MatchDescRspCB,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN ZDApp_EndDeviceBindRsp
        FUNCTION ZDApp_EndDeviceBindRsp,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN ZDAppNwkAddr
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_Config_Power_Descriptor
        EXTERN devState
        EXTERN epList
        EXTERN zgDefaultChannelList
        EXTERN zgDefaultStartingScanDuration

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\zdo\ZDObject.c
//    1 /*********************************************************************
//    2     Filename:       ZDObject.c
//    3     Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
//    4     Revision:       $Revision: 14296 $
//    5 
//    6     Description:
//    7 
//    8       This Zigbee Device Object.
//    9 
//   10     Notes:
//   11 
//   12     Copyright (c) 2006 by Texas Instruments, Inc.
//   13     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   14     derivative works, modify, distribute, perform, display or sell this
//   15     software and/or its documentation for any purpose is prohibited
//   16     without the express written consent of Texas Instruments, Inc.
//   17 *********************************************************************/
//   18 
//   19 /*********************************************************************
//   20  * INCLUDES
//   21  */
//   22 #include "ZComdef.h"
//   23 #include "OSAL.h"
//   24 #include "OSAL_Nv.h"
//   25 #include "rtg.h"
//   26 #include "NLMEDE.h"
//   27 #include "nwk_globals.h"
//   28 #include "APS.h"
//   29 #include "APSMEDE.h"
//   30 #include "AssocList.h"
//   31 #include "BindingTable.h"
//   32 #include "AddrMgr.h"
//   33 #include "AF.h"
//   34 #include "ZDObject.h"
//   35 #include "ZDProfile.h"
//   36 #include "ZDConfig.h"
//   37 #include "ZDCache.h"
//   38 #include "ZDSecMgr.h"
//   39 #include "ZDApp.h"
//   40 #include "nwk_util.h"   // NLME_IsAddressBroadcast()
//   41 #include "ZGlobals.h"
//   42 
//   43 #if defined( LCD_SUPPORTED )
//   44   #include "OnBoard.h"
//   45 #endif
//   46 
//   47 /* HAL */
//   48 #include "hal_lcd.h"
//   49 
//   50 /*********************************************************************
//   51  * MACROS
//   52  */
//   53 
//   54 /*********************************************************************
//   55  * CONSTANTS
//   56  */
//   57 // NLME Stub Implementations
//   58 #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
//   59 
//   60 // Status fields used by ZDO_ProcessMgmtRtgReq
//   61 #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
//   62 #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
//   63 #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
//   64 #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
//   65 
//   66 /*********************************************************************
//   67  * TYPEDEFS
//   68  */
//   69 #if defined ( REFLECTOR )
//   70 typedef struct
//   71 {
//   72   byte SrcTransSeq;
//   73   zAddrType_t SrcAddr;
//   74   uint16 LocalCoordinator;
//   75   byte epIntf;
//   76   uint16 ProfileID;
//   77   byte numInClusters;
//   78   uint16 *inClusters;
//   79   byte numOutClusters;
//   80   uint16 *outClusters;
//   81   byte SecurityUse;
//   82   byte status;
//   83 } ZDO_EDBind_t;
//   84 #endif // defined ( REFLECTOR )
//   85 
//   86 #if defined ( ZDO_COORDINATOR )
//   87 enum
//   88 {
//   89   ZDMATCH_INIT,           // Initialized
//   90   ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
//   91   ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
//   92 };
//   93 
//   94 enum
//   95 {
//   96   ZDMATCH_REASON_START,
//   97   ZDMATCH_REASON_TIMEOUT,
//   98   ZDMATCH_REASON_UNBIND_RSP,
//   99   ZDMATCH_REASON_BIND_RSP
//  100 };
//  101 
//  102 enum
//  103 {
//  104   ZDMATCH_SENDING_NOT,
//  105   ZDMATCH_SENDING_UNBIND,
//  106   ZDMATCH_SENDING_BIND
//  107 };
//  108 
//  109 typedef struct
//  110 {
//  111   ZDEndDeviceBind_t ed1;
//  112   ZDEndDeviceBind_t ed2;
//  113   uint8  state;            // One of the above states
//  114   uint8  sending;         // 0 - not sent, 1 - unbind, 2 bind - expecting response
//  115   uint8  transSeq;
//  116   uint8  ed1numMatched;
//  117   uint16 *ed1Matched;
//  118   uint8  ed2numMatched;
//  119   uint16 *ed2Matched;
//  120 } ZDMatchEndDeviceBind_t;
//  121 #endif
//  122 
//  123 /*********************************************************************
//  124  * GLOBAL VARIABLES
//  125  */
//  126 
//  127 /*********************************************************************
//  128  * EXTERNAL VARIABLES
//  129  */
//  130 
//  131 /*********************************************************************
//  132  * EXTERNAL FUNCTIONS
//  133  */
//  134 
//  135 /*********************************************************************
//  136  * LOCAL VARIABLES
//  137  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  138 static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
??ZDOBuildBuf:
        DS 52
//  139 
//  140 #if defined ( REFLECTOR )
//  141 static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
//  142 #endif
//  143 
//  144 #if defined ( MANAGED_SCAN )
//  145   uint32 managedScanNextChannel = 0;
//  146   uint32 managedScanChannelMask = 0;
//  147   uint8  managedScanTimesPerChannel = 0;
//  148 #endif
//  149 
//  150 #if defined ( ZDO_COORDINATOR )
//  151   ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
//  152 #endif
//  153 
//  154 /*********************************************************************
//  155  * LOCAL FUNCTIONS
//  156  */
//  157 static void ZDODeviceSetup( void );
//  158 static uint16 *ZDO_CreateAlignedUINT16List(uint8 num, uint8 *buf);
//  159 #if defined ( MANAGED_SCAN )
//  160   static void ZDOManagedScan_Next( void );
//  161 #endif
//  162 #if defined ( REFLECTOR )
//  163   static void ZDO_RemoveEndDeviceBind( void );
//  164   static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
//  165 #endif
//  166 #if defined ( REFLECTOR ) || defined( ZDO_COORDINATOR )
//  167   static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
//  168                                 byte numList2, uint16 *list2, uint16 *pMatches );
//  169 #endif
//  170 #if defined ( ZDO_COORDINATOR )
//  171   static void ZDO_RemoveMatchMemory( void );
//  172   static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
//  173   static uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq );
//  174   static void ZDO_EndDeviceBindMatchTimeoutCB( void );
//  175 #endif
//  176 
//  177 /*********************************************************************
//  178  * @fn          ZDO_Init
//  179  *
//  180  * @brief       ZDObject and ZDProfile initialization.
//  181  *
//  182  * @param       none
//  183  *
//  184  * @return      none
//  185  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  186 void ZDO_Init( void )
ZDO_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDO_Init
//  187 {
        FUNCALL ZDO_Init, NLME_DeviceJoiningInit
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_Init, ZDSecMgrInit
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  188   // Initialize ZD items
//  189   #if defined ( REFLECTOR )
//  190   ZDO_EDBind = NULL;
//  191   #endif
//  192 
//  193   // Setup the device - type of device to create.
//  194   ZDODeviceSetup();
        ; Setup parameters for call to function NLME_DeviceJoiningInit
        MOV	DPTR,#(NLME_DeviceJoiningInit & 0xffff)
        MOV	A,#((NLME_DeviceJoiningInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  195 
//  196   // Initialize ZigBee Device Security Manager
//  197   ZDSecMgrInit();
        ; Setup parameters for call to function ZDSecMgrInit
        MOV	DPTR,#(ZDSecMgrInit & 0xffff)
        MOV	A,#((ZDSecMgrInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        CFI EndBlock cfiBlock0
//  198 }
        REQUIRE ?Subroutine21
        ; // Fall through to label ?Subroutine21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock1
//  199 
//  200 #if defined ( MANAGED_SCAN )
//  201 /*********************************************************************
//  202  * @fn      ZDOManagedScan_Next()
//  203  *
//  204  * @brief   Setup a managed scan.
//  205  *
//  206  * @param   none
//  207  *
//  208  * @return  none
//  209  */
//  210 static void ZDOManagedScan_Next( void )
//  211 {
//  212   // Is it the first time
//  213   if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
//  214   {
//  215     // Setup the defaults
//  216     managedScanNextChannel  = 1;
//  217 
//  218     while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
//  219       managedScanNextChannel <<= 1;
//  220 
//  221     managedScanChannelMask = managedScanNextChannel;
//  222     managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
//  223   }
//  224   else
//  225   {
//  226     // Do we need to go to the next channel
//  227     if ( managedScanTimesPerChannel == 0 )
//  228     {
//  229       // Find next active channel
//  230       managedScanChannelMask  = managedScanNextChannel;
//  231       managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
//  232     }
//  233     else
//  234     {
//  235       managedScanTimesPerChannel--;
//  236 
//  237       if ( managedScanTimesPerChannel == 0 )
//  238       {
//  239         managedScanNextChannel  <<= 1;
//  240         while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
//  241           managedScanNextChannel <<= 1;
//  242 
//  243         if ( managedScanNextChannel == 0 )
//  244           zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
//  245       }
//  246     }
//  247   }
//  248 }
//  249 #endif // MANAGED_SCAN
//  250 
//  251 /*********************************************************************
//  252  * @fn      ZDODeviceSetup()
//  253  *
//  254  * @brief   Call set functions depending on the type of device compiled.
//  255  *
//  256  * @param   none
//  257  *
//  258  * @return  none
//  259  */
//  260 static void ZDODeviceSetup( void )
//  261 {
//  262 #if defined( ZDO_COORDINATOR )
//  263   NLME_CoordinatorInit();
//  264 #endif
//  265 
//  266 #if defined ( REFLECTOR )
//  267   #if defined ( ZDO_COORDINATOR )
//  268     APS_ReflectorInit( APS_REFLECTOR_PUBLIC );
//  269   #else
//  270     APS_ReflectorInit( APS_REFLECTOR_PRIVATE );
//  271   #endif
//  272 #endif
//  273 
//  274 #if !defined( ZDO_COORDINATOR ) || defined( SOFT_START )
//  275   NLME_DeviceJoiningInit();
//  276 #endif
//  277 }
//  278 
//  279 /*********************************************************************
//  280  * @fn          ZDO_StartDevice
//  281  *
//  282  * @brief       This function starts a device in a network.
//  283  *
//  284  * @param       logicalType     - Device type to start
//  285  *              startMode       - indicates mode of device startup
//  286  *              beaconOrder     - indicates time betwen beacons
//  287  *              superframeOrder - indicates length of active superframe
//  288  *
//  289  * @return      none
//  290  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  291 void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
ZDO_StartDevice:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZDO_StartDevice
//  292 {
        FUNCALL ZDO_StartDevice, NLME_NetworkDiscoveryRequest
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDO_StartDevice, nwk_ScanJoiningOrphan
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDO_StartDevice, NLME_OrphanJoinRequest
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDO_StartDevice, ZDSecMgrConfig
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDO_StartDevice, osal_start_timer
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 11
        MOV	A,#-0xb
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
//  293   ZStatus_t ret;
//  294 
//  295   ret = ZUnsupportedMode;
        MOV	R6,#0x12
//  296 
//  297 #if defined(ZDO_COORDINATOR)
//  298   if ( logicalType == NODETYPE_COORDINATOR )
//  299   {
//  300     if ( startMode == MODE_HARD )
//  301     {
//  302       devState = DEV_COORD_STARTING;
//  303       ret = NLME_NetworkFormationRequest( zgConfigPANID, zgDefaultChannelList,
//  304                                           zgDefaultStartingScanDuration, beaconOrder,
//  305                                           superframeOrder, false );
//  306     }
//  307     else if ( startMode == MODE_RESUME )
//  308     {
//  309       // Just start the coordinator
//  310       devState = DEV_COORD_STARTING;
//  311       ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
//  312     }
//  313     else
//  314     {
//  315 #if defined( LCD_SUPPORTED )
//  316       HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
//  317 #endif
//  318     }
//  319   }
//  320 #endif  // !ZDO_COORDINATOR
//  321 
//  322 #if !defined ( ZDO_COORDINATOR ) || defined( SOFT_START )
//  323   if ( logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE )
        MOV	A,#0x1
        XRL	A,R1
        JZ	??ZDO_StartDevice_0
        MOV	A,#0x2
        XRL	A,R1
        JZ	$+5
        LJMP	??ZDO_StartDevice_1 & 0xFFFF
//  324   {
//  325     if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
??ZDO_StartDevice_0:
        MOV	A,R2
        JZ	??ZDO_StartDevice_2
        MOV	A,#0x3
        XRL	A,R2
        JNZ	??ZDO_StartDevice_3
//  326     {
//  327       devState = DEV_NWK_DISC;
??ZDO_StartDevice_2:
        MOV	A,#0x2
        LCALL	?Subroutine1 & 0xFFFF
//  328 
//  329   #if defined( MANAGED_SCAN )
//  330       ZDOManagedScan_Next();
//  331       ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
//  332   #else
//  333       ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
??CrossCallReturnLabel_2:
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(NLME_NetworkDiscoveryRequest & 0xffff)
        MOV	A,#((NLME_NetworkDiscoveryRequest >> 16) & 0xff)
        SJMP	??ZDO_StartDevice_4
//  334   #endif
//  335     }
//  336     else if ( startMode == MODE_RESUME )
??ZDO_StartDevice_3:
        MOV	A,#0x1
        XRL	A,R2
        JNZ	??ZDO_StartDevice_1
//  337     {
//  338       if ( logicalType == NODETYPE_ROUTER )
        MOV	A,#0x1
        XRL	A,R1
        JNZ	??ZDO_StartDevice_5
//  339       {
//  340         ZMacScanCnf_t scanCnf;
//  341         devState = DEV_NWK_ORPHAN;
        MOV	A,#0xa
        MOV	DPTR,#devState
        MOVX	@DPTR,A
//  342 
//  343         /* if router and nvram is available, fake successful orphan scan */
//  344         scanCnf.hdr.Status = ZSUCCESS;
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
//  345         scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x3
        MOVX	@DPTR,A
//  346         scanCnf.UnscannedChannels = 0;
        MOV	DPTR,#__Constant_0
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
//  347         scanCnf.ResultListSize = 0;
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
//  348         nwk_ScanJoiningOrphan(&scanCnf);
        ; Setup parameters for call to function nwk_ScanJoiningOrphan
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(nwk_ScanJoiningOrphan & 0xffff)
        MOV	A,#((nwk_ScanJoiningOrphan >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  349 
//  350         ret = ZSuccess;
        MOV	R6,#0x0
        SJMP	??ZDO_StartDevice_1
//  351       }
//  352       else
//  353       {
//  354         devState = DEV_NWK_ORPHAN;
??ZDO_StartDevice_5:
        MOV	A,#0xa
        LCALL	?Subroutine1 & 0xFFFF
//  355         ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
//  356                                       zgDefaultStartingScanDuration );
??CrossCallReturnLabel_3:
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(NLME_OrphanJoinRequest & 0xffff)
        MOV	A,#((NLME_OrphanJoinRequest >> 16) & 0xff)
??ZDO_StartDevice_4:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R6,A
//  357       }
//  358     }
//  359     else
//  360     {
//  361 #if defined( LCD_SUPPORTED )
//  362       HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
//  363 #endif
//  364     }
//  365   }
//  366 #endif  //!ZDO COORDINATOR || SOFT_START
//  367 
//  368   // configure the Security Manager for type of device
//  369   ZDSecMgrConfig();
??ZDO_StartDevice_1:
        ; Setup parameters for call to function ZDSecMgrConfig
        MOV	DPTR,#(ZDSecMgrConfig & 0xffff)
        MOV	A,#((ZDSecMgrConfig >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  370 
//  371   if ( ret != ZSuccess )
        MOV	A,R6
        JZ	??ZDO_StartDevice_6
//  372     osal_start_timer( ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
        ; Setup parameters for call to function osal_start_timer
        MOV	R4,#-0x18
        MOV	R5,#0x3
        MOV	R2,#0x1
        MOV	R3,#0x0
        MOV	DPTR,#(osal_start_timer & 0xffff)
        MOV	A,#((osal_start_timer >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  373 }
??ZDO_StartDevice_6:
        MOV	A,#0xb
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP	?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV	DPTR,#devState
        MOVX	@DPTR,A
        ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
        ; Setup parameters for call to function NLME_OrphanJoinRequest
        MOV	DPTR,#zgDefaultStartingScanDuration
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#zgDefaultChannelList
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  374 
//  375 /*********************************************************************
//  376  * @fn      ZDO_UpdateNwkStatus()
//  377  *
//  378  * @brief
//  379  *
//  380  *   This function will send an update message to each registered
//  381  *   application endpoint/interface about a network status change.
//  382  *
//  383  * @param   none
//  384  *
//  385  * @return  none
//  386  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  387 void ZDO_UpdateNwkStatus( devStates_t state )
ZDO_UpdateNwkStatus:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ZDO_UpdateNwkStatus
//  388 {
        FUNCALL ZDO_UpdateNwkStatus, NLME_GetShortAddr
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_UpdateNwkStatus, NLME_GetExtAddr
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_UpdateNwkStatus, osal_msg_allocate
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_UpdateNwkStatus, osal_msg_send
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	?V0 + 0,R1
//  389   // Endpoint/Interface descriptor list.
//  390   epList_t *epDesc = epList;
        MOV	DPTR,#epList
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
//  391   byte bufLen = sizeof(osal_event_hdr_t);
//  392   osal_event_hdr_t *msgPtr;
//  393 
//  394   ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        MOV	DPTR,#(NLME_GetShortAddr & 0xffff)
        MOV	A,#((NLME_GetShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#ZDAppNwkAddr
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  395   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        MOV	DPTR,#(NLME_GetExtAddr & 0xffff)
        MOV	A,#((NLME_GetExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??ZDO_UpdateNwkStatus_0
//  396 
//  397   while ( epDesc )
//  398   {
//  399     if ( epDesc->epDesc->endPoint != ZDO_EP )
??ZDO_UpdateNwkStatus_1:
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_25:
        JZ	??ZDO_UpdateNwkStatus_2
//  400     {
//  401       msgPtr = (osal_event_hdr_t *)osal_msg_allocate( bufLen );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	R2,#0x2
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  402       if ( msgPtr )
        MOV	A,R2
        JNZ	??ZDO_UpdateNwkStatus_3
        MOV	A,R3
??ZDO_UpdateNwkStatus_3:
        JZ	??ZDO_UpdateNwkStatus_2
//  403       {
//  404         msgPtr->event = ZDO_STATE_CHANGE; // Command ID
        MOV	A,#-0x2f
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
//  405         msgPtr->status = (byte)state;
        INC	DPTR
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
//  406 
//  407         osal_msg_send( *(epDesc->epDesc->task_id), (byte *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  408       }
//  409     }
//  410     epDesc = epDesc->nextDesc;
??ZDO_UpdateNwkStatus_2:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
//  411   }
??ZDO_UpdateNwkStatus_0:
        MOV	A,R6
        JNZ	??ZDO_UpdateNwkStatus_4
        MOV	A,R7
??ZDO_UpdateNwkStatus_4:
        JNZ	??ZDO_UpdateNwkStatus_1
//  412 }
        LJMP	?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock6
//  413 
//  414 #if defined ( REFLECTOR )
//  415 /*********************************************************************
//  416  * @fn          ZDO_RemoveEndDeviceBind
//  417  *
//  418  * @brief       Remove the end device bind
//  419  *
//  420  * @param  none
//  421  *
//  422  * @return      none
//  423  */
//  424 static void ZDO_RemoveEndDeviceBind( void )
//  425 {
//  426   if ( ZDO_EDBind )
//  427   {
//  428     // Free the RAM
//  429     if ( ZDO_EDBind->inClusters )
//  430       osal_mem_free( ZDO_EDBind->inClusters );
//  431     if ( ZDO_EDBind->outClusters )
//  432       osal_mem_free( ZDO_EDBind->outClusters );
//  433     osal_mem_free( ZDO_EDBind );
//  434     ZDO_EDBind = NULL;
//  435   }
//  436 }
//  437 #endif // REFLECTOR
//  438 
//  439 #if defined ( REFLECTOR )
//  440 /*********************************************************************
//  441  * @fn          ZDO_RemoveEndDeviceBind
//  442  *
//  443  * @brief       Remove the end device bind
//  444  *
//  445  * @param  none
//  446  *
//  447  * @return      none
//  448  */
//  449 static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
//  450 {
//  451   ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
//  452 
//  453 #if defined( LCD_SUPPORTED )
//  454   HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
//  455   if ( Status == ZDP_SUCCESS )
//  456     HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
//  457   else
//  458     HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
//  459 #endif
//  460 
//  461 }
//  462 #endif // REFLECTOR
//  463 
//  464 #if defined ( REFLECTOR ) || defined ( ZDO_COORDINATOR )
//  465 /*********************************************************************
//  466  * @fn          ZDO_CompareClusterLists
//  467  *
//  468  * @brief       Compare one list to another list
//  469  *
//  470  * @param       numList1 - number of items in list 1
//  471  * @param       list1 - first list of cluster IDs
//  472  * @param       numList2 - number of items in list 2
//  473  * @param       list2 - second list of cluster IDs
//  474  * @param       pMatches - buffer to put matches
//  475  *
//  476  * @return      number of matches
//  477  */
//  478 static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
//  479                           byte numList2, uint16 *list2, uint16 *pMatches )
//  480 {
//  481   byte x, y;
//  482   uint16 z;
//  483   byte numMatches = 0;
//  484 
//  485   // Check the first in against the seconds out
//  486   for ( x = 0; x < numList1; x++ )
//  487   {
//  488     for ( y = 0; y < numList2; y++ )
//  489     {
//  490       z = list2[y];
//  491       if ( list1[x] == z )
//  492         pMatches[numMatches++] = z;
//  493     }
//  494   }
//  495 
//  496   return ( numMatches );
//  497 }
//  498 #endif // REFLECTOR || ZDO_COORDINATOR
//  499 
//  500 #if defined ( REFLECTOR )
//  501 /*********************************************************************
//  502  * @fn          ZDO_DoEndDeviceBind
//  503  *
//  504  * @brief       Process the End Device Bind Req from ZDApp
//  505  *
//  506  * @param  bindReq  - Bind Request Information
//  507  * @param  SecurityUse - Security enable/disable
//  508  *
//  509  * @return      none
//  510  */
//  511 void ZDO_DoEndDeviceBind( ZDEndDeviceBind_t *bindReq )
//  512 {
//  513   uint8 numMatches;
//  514   uint8 Status;
//  515   BindingEntry_t *pBind;
//  516   AddrMgrEntry_t addrEntry;
//  517   zAddrType_t SrcAddr;
//  518 
//  519   SrcAddr.addrMode = Addr16Bit;
//  520   SrcAddr.addr.shortAddr = bindReq->srcAddr;
//  521 
//  522   // Ask for IEEE address
//  523   if ( (bindReq->srcAddr != ZDAppNwkAddr.addr.shortAddr) )
//  524   {
//  525     addrEntry.user = ADDRMGR_USER_BINDING;
//  526     addrEntry.nwkAddr = bindReq->srcAddr;
//  527     Status = AddrMgrEntryLookupNwk( &addrEntry );
//  528     if ( Status == TRUE)
//  529     {
//  530       // Add a reference to entry
//  531       AddrMgrEntryAddRef( &addrEntry );
//  532     }
//  533     else
//  534     {
//  535       // If we have the extended address
//  536       if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
//  537       {
//  538         osal_cpyExtAddr( addrEntry.extAddr, bindReq->ieeeAddr );
//  539       }
//  540 
//  541       // Not in address manager?
//  542       AddrMgrEntryUpdate( &addrEntry );   // Add it
//  543     }
//  544 
//  545     if ( AddrMgrExtAddrValid( addrEntry.extAddr ) == FALSE )
//  546     {
//  547       ZDP_IEEEAddrReq( bindReq->srcAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, false );
//  548     }
//  549   }
//  550 
//  551   if ( ZDO_EDBind )   // End Device Bind in progress
//  552   {
//  553     Status = ZDP_NO_MATCH;
//  554 
//  555     if ( bindReq->profileID == ZDO_EDBind->ProfileID )
//  556     {
//  557       // Check the first in against the seconds out
//  558       numMatches = ZDO_CompareClusterLists(
//  559                   ZDO_EDBind->numOutClusters, ZDO_EDBind->outClusters,
//  560                   bindReq->numInClusters, bindReq->inClusters, ZDOBuildBuf );
//  561 
//  562       if ( numMatches )
//  563       {
//  564         // if existing bind exists, remove it
//  565         pBind = bindFindExisting( &(ZDO_EDBind->SrcAddr), ZDO_EDBind->epIntf,
//  566                       &SrcAddr, bindReq->endpoint );
//  567         if ( pBind )
//  568         {
//  569           bindRemoveEntry( pBind );
//  570           Status = ZDP_SUCCESS;
//  571         }
//  572         // else add new binding table entry
//  573         else if ( bindAddEntry( &(ZDO_EDBind->SrcAddr), ZDO_EDBind->epIntf,
//  574                       &SrcAddr, bindReq->endpoint, numMatches, ZDOBuildBuf ) )
//  575           Status = ZDP_SUCCESS;
//  576         else
//  577           Status = ZDP_TABLE_FULL;
//  578       }
//  579 
//  580       // Check the second in against the first out
//  581       numMatches = ZDO_CompareClusterLists( bindReq->numOutClusters, bindReq->outClusters,
//  582                       ZDO_EDBind->numInClusters, ZDO_EDBind->inClusters,
//  583                       ZDOBuildBuf );
//  584 
//  585       if ( numMatches )
//  586       {
//  587         // if existing bind exists, remove it
//  588         pBind = bindFindExisting( &SrcAddr, bindReq->endpoint, &(ZDO_EDBind->SrcAddr),
//  589                       ZDO_EDBind->epIntf );
//  590         if ( pBind )
//  591         {
//  592           bindRemoveEntry( pBind );
//  593           Status = ZDP_SUCCESS;
//  594         }
//  595         // else add new binding table entry
//  596         else if ( bindAddEntry( &SrcAddr, bindReq->endpoint, &(ZDO_EDBind->SrcAddr),
//  597                       ZDO_EDBind->epIntf, numMatches, ZDOBuildBuf ) )
//  598           Status = ZDP_SUCCESS;
//  599         else
//  600           Status = ZDP_TABLE_FULL;
//  601       }
//  602     }
//  603 
//  604     if ( Status == ZDP_SUCCESS )
//  605     {
//  606       // We've found a match, so we don't have to wait for the timeout
//  607       APS_SetEndDeviceBindTimeout( 10, ZDO_EndDeviceTimeoutCB );  // psuedo stop end device timeout
//  608 
//  609         // Notify to save info into NV
//  610       osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
//  611     }
//  612 
//  613     ZDO_EDBind->status = Status;
//  614 
//  615     // Send the response message to the device sending this message
//  616     ZDO_SendEDBindRsp( bindReq->TransSeq, &SrcAddr, Status, bindReq->SecurityUse );
//  617   }
//  618   else  // Start a new End Device Bind
//  619   {
//  620     // Copy the info
//  621     ZDO_EDBind = osal_mem_alloc( sizeof( ZDO_EDBind_t ) );
//  622     if ( ZDO_EDBind )
//  623     {
//  624       osal_memcpy( &(ZDO_EDBind->SrcAddr), &SrcAddr, sizeof( zAddrType_t ) );
//  625       ZDO_EDBind->LocalCoordinator = bindReq->localCoordinator;
//  626       ZDO_EDBind->epIntf = bindReq->endpoint;
//  627       ZDO_EDBind->ProfileID = bindReq->profileID;
//  628       ZDO_EDBind->SrcTransSeq = bindReq->TransSeq;
//  629 
//  630       ZDO_EDBind->numInClusters = bindReq->numInClusters;
//  631       if ( bindReq->numInClusters )
//  632       {
//  633         ZDO_EDBind->inClusters = osal_mem_alloc( (short)(bindReq->numInClusters * sizeof(uint16)) );
//  634         if ( ZDO_EDBind->inClusters )
//  635         {
//  636           osal_memcpy( ZDO_EDBind->inClusters, bindReq->inClusters, (bindReq->numInClusters * sizeof( uint16 )) );
//  637         }
//  638         else
//  639         {
//  640           // Force no clusters
//  641           ZDO_EDBind->numInClusters = 0;
//  642         }
//  643       }
//  644       else
//  645         ZDO_EDBind->inClusters = NULL;
//  646 
//  647       ZDO_EDBind->numOutClusters = bindReq->numOutClusters;
//  648       if ( bindReq->numOutClusters )
//  649       {
//  650         ZDO_EDBind->outClusters = osal_mem_alloc( (short)(bindReq->numOutClusters*sizeof(uint16)) );
//  651         if ( ZDO_EDBind->outClusters )
//  652         {
//  653           osal_memcpy( ZDO_EDBind->outClusters, bindReq->outClusters, (bindReq->numOutClusters * sizeof( uint16 )) );
//  654         }
//  655         else
//  656         {
//  657           ZDO_EDBind->numOutClusters = 0;
//  658         }
//  659       }
//  660       else
//  661         ZDO_EDBind->outClusters = NULL;
//  662 
//  663       ZDO_EDBind->SecurityUse = bindReq->SecurityUse;
//  664       ZDO_EDBind->status = ZDP_TIMEOUT;
//  665 
//  666       // Setup the timer
//  667       APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceTimeoutCB );
//  668     }
//  669   }
//  670 }
//  671 #endif // REFLECTOR
//  672 
//  673 /*********************************************************************
//  674  * Utility functions
//  675  */
//  676 
//  677 /*********************************************************************
//  678  * @fn          ZDO_CreateAlignedUINT16List
//  679  *
//  680  * @brief       Creates a list of cluster IDs that is guaranteed to be aligned.
//  681  *              according to the needs of the target. If thre device is running
//  682  *              Protocol version 1.0 the incoming buffer will have only a single
//  683  *              byte for the cluster ID.
//  684  *
//  685  *              Depends on the malloc taking care of alignment.
//  686  *
//  687  *              When cluster ID went to 16 bits alignment for cluster IDs became
//  688  *              an issue.
//  689  *
//  690  * @param       num  - number of entries in list
//  691  * @param       buf  - pointer to list
//  692  *
//  693  * @return      pointer to aligned list. Null if can't allocate memory.
//  694  *              Caller's responsibility to free memory.
//  695  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  696 static uint16 *ZDO_CreateAlignedUINT16List(uint8 num, uint8 *buf)
??ZDO_CreateAlignedUINT16List:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ??ZDO_CreateAlignedUINT16List
//  697 {
        FUNCALL ??ZDO_CreateAlignedUINT16List, osal_mem_alloc
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??ZDO_CreateAlignedUINT16List, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	?V0 + 2,R1
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  698   uint16 *ptr;
//  699 
//  700   if ((ptr=osal_mem_alloc((short)(num*sizeof(uint16)))))  {
        ; Setup parameters for call to function osal_mem_alloc
        MOV	A,R1
        CLR	C
        RLC	A
        MOV	R2,A
        CLR	A
        RLC	A
        MOV	R3,A
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	A,R2
        JNZ	??ZDO_CreateAlignedUINT16List_1
        MOV	A,R3
??ZDO_CreateAlignedUINT16List_1:
        JZ	??ZDO_CreateAlignedUINT16List_2
//  701     uint8 i, ubyte, inc;
//  702 
//  703     inc = (ZB_PROT_V1_1 == NLME_GetProtocolVersion()) ? 2 : 1;
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x2
        JNZ	??ZDO_CreateAlignedUINT16List_3
        MOV	R3,#0x2
        SJMP	??ZDO_CreateAlignedUINT16List_4
??ZDO_CreateAlignedUINT16List_3:
        MOV	R3,#0x1
//  704 
//  705     for (i=0; i<num; ++i)  {
??ZDO_CreateAlignedUINT16List_4:
        MOV	R2,#0x0
        SJMP	??ZDO_CreateAlignedUINT16List_5
//  706       // set upper byte to 0 if we're talking Version 1.0. otherwise
//  707       // the buffer contains 16 bit cluster IDs.
//  708       ubyte  = (2 == inc) ? buf[1] : 0;
??ZDO_CreateAlignedUINT16List_6:
        MOV	?V0 + 3,#0x0
//  709       ptr[i] = BUILD_UINT16(buf[0], ubyte);
??ZDO_CreateAlignedUINT16List_7:
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	R4,A
        CLR	A
        ADD	A,R4
        MOV	A,?V0 + 3
        ADDC	A,#0x0
        MOV	R5,A
        MOV	A,R2
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,?V0 + 0
        ADD	A,R0
        MOV	DPL,A
        MOV	A,?V0 + 1
        ADDC	A,R1
        MOV	DPH,A
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
//  710       buf    += inc;
        MOV	?V0 + 4,R3
        MOV	A,R6
        ADD	A,?V0 + 4
        MOV	R6,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R7,A
        INC	R2
??ZDO_CreateAlignedUINT16List_5:
        MOV	A,R2
        CLR	C
        SUBB	A,?V0 + 2
        JNC	??ZDO_CreateAlignedUINT16List_2
        MOV	A,#0x2
        XRL	A,R3
        JNZ	??ZDO_CreateAlignedUINT16List_6
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
        SJMP	??ZDO_CreateAlignedUINT16List_7
//  711     }
//  712   }
//  713 
//  714   return ptr;
??ZDO_CreateAlignedUINT16List_2:
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        CFI EndBlock cfiBlock7
        REQUIRE ?Subroutine24
        ; // Fall through to label ?Subroutine24
//  715 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
//  716 
//  717 /*********************************************************************
//  718  * @fn          ZDO_CompareByteLists
//  719  *
//  720  * @brief       Compares two lists for matches.
//  721  *
//  722  * @param       ACnt  - number of entries in list A
//  723  * @param       AList  - List A
//  724  * @param       BCnt  - number of entries in list B
//  725  * @param       BList  - List B
//  726  *
//  727  * @return      true if a match is found
//  728  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  729 byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
ZDO_AnyClusterMatches:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ZDO_AnyClusterMatches
//  730 {
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	?V0 + 0,R1
        MOV	?V0 + 1,R4
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
//  731   byte x, y;
//  732 
//  733   for ( x = 0; x < ACnt; x++ )
??CrossCallReturnLabel_32:
        MOV	?V0 + 3,#0x0
        SJMP	??ZDO_AnyClusterMatches_0
??ZDO_AnyClusterMatches_1:
        INC	?V0 + 3
??ZDO_AnyClusterMatches_0:
        MOV	A,?V0 + 3
        CLR	C
        SUBB	A,?V0 + 0
        JNC	??ZDO_AnyClusterMatches_2
//  734   {
//  735     for ( y = 0; y < BCnt; y++ )
        MOV	?V0 + 2,#0x0
        SJMP	??ZDO_AnyClusterMatches_3
??ZDO_AnyClusterMatches_4:
        INC	?V0 + 2
??ZDO_AnyClusterMatches_3:
        MOV	A,?V0 + 2
        CLR	C
        SUBB	A,?V0 + 1
        JNC	??ZDO_AnyClusterMatches_1
//  736     {
//  737       if ( AList[x] == BList[y] )
        MOV	A,?V0 + 3
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	A,R2
        ADD	A,R4
        MOV	DPL,A
        MOV	A,R3
        ADDC	A,R5
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        MOV	A,?V0 + 2
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	A,R0
        ADD	A,R4
        MOV	DPL,A
        MOV	A,R1
        ADDC	A,R5
        MOV	DPH,A
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??ZDO_AnyClusterMatches_5
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R7
??ZDO_AnyClusterMatches_5:
        JNZ	??ZDO_AnyClusterMatches_4
//  738       {
//  739         return true;
        MOV	R1,#0x1
        SJMP	??ZDO_AnyClusterMatches_6
//  740       }
//  741     }
//  742   }
//  743 
//  744   return false;
??ZDO_AnyClusterMatches_2:
        MOV	R1,#0x0
??ZDO_AnyClusterMatches_6:
        SJMP	?Subroutine22
        CFI EndBlock cfiBlock9
//  745 }
//  746 
//  747 /*********************************************************************
//  748  * Callback functions from ZDProfile
//  749  */
//  750 
//  751 /*********************************************************************
//  752  * @fn          ZDO_ProcessNodeDescReq
//  753  *
//  754  * @brief       This function processes and responds to the
//  755  *              Node_Desc_req message.
//  756  *
//  757  * @param       src  - Source address
//  758  * @param       msg - NWKAddrOfInterest
//  759  * @param       sty - Security enable/disable
//  760  *
//  761  * @return      none
//  762  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  763 void ZDO_ProcessNodeDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
ZDO_ProcessNodeDescReq:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ZDO_ProcessNodeDescReq
//  764 {
        FUNCALL ZDO_ProcessNodeDescReq, ZDP_NodeDescMsg
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL ZDO_ProcessNodeDescReq, ZDP_GenericRsp
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine4 & 0xFFFF
//  765   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
//  766   NodeDescriptorFormat_t *desc = NULL;
//  767   byte stat = ZDP_INVALID_REQTYPE;
//  768 
//  769   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
??CrossCallReturnLabel_12:
        JNZ	??ZDO_ProcessNodeDescReq_0
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,?V0 + 1
??ZDO_ProcessNodeDescReq_0:
        JNZ	??ZDO_ProcessNodeDescReq_1
//  770   {
//  771     desc = &ZDO_Config_Node_Descriptor;
//  772   }
//  773 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  774   else if ( CACHE_SERVER )
//  775   {
//  776     desc = (NodeDescriptorFormat_t *)ZDCacheGetDesc( aoi, eNodeDesc, &stat );
//  777   }
//  778 #endif
//  779 
//  780   if ( desc != NULL )
//  781   {
//  782     ZDP_NodeDescMsg( seq, src, aoi, desc, sty );
        ; Setup parameters for call to function ZDP_NodeDescMsg
        MOV	A,R5
        MOV	?V0 + 2,A
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	?V0 + 2,#(ZDO_Config_Node_Descriptor & 0xff)
        MOV	?V0 + 3,#((ZDO_Config_Node_Descriptor >> 8) & 0xff)
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R4,?V0 + 0
        MOV	R5,?V0 + 1
        MOV	DPTR,#(ZDP_NodeDescMsg & 0xffff)
        MOV	A,#((ZDP_NodeDescMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        SJMP	??ZDO_ProcessNodeDescReq_2
//  783   }
//  784   else
//  785   {
//  786     ZDP_GenericRsp( seq, src, stat, aoi, Node_Desc_rsp, sty );
??ZDO_ProcessNodeDescReq_1:
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV	?V0 + 2,#0x2
        MOV	?V0 + 3,#-0x80
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	R4,#-0x80
        MOV	DPTR,#(ZDP_GenericRsp & 0xffff)
        MOV	A,#((ZDP_GenericRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        CFI EndBlock cfiBlock10
//  787   }
//  788 }
??ZDO_ProcessNodeDescReq_2:
        REQUIRE ?Subroutine22
        ; // Fall through to label ?Subroutine22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11
//  789 
//  790 /*********************************************************************
//  791  * @fn          ZDO_ProcessPowerDescReq
//  792  *
//  793  * @brief       This function processes and responds to the
//  794  *              Node_Power_req message.
//  795  *
//  796  * @param       src  - Source address
//  797  * @param       msg - NWKAddrOfInterest
//  798  * @param       sty - Security enable/disable
//  799  *
//  800  * @return      none
//  801  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  802 void ZDO_ProcessPowerDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
ZDO_ProcessPowerDescReq:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ZDO_ProcessPowerDescReq
//  803 {
        FUNCALL ZDO_ProcessPowerDescReq, ZDP_PowerDescMsg
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL ZDO_ProcessPowerDescReq, ZDP_GenericRsp
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine4 & 0xFFFF
//  804   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
//  805   NodePowerDescriptorFormat_t *desc = NULL;
//  806   byte stat = ZDP_INVALID_REQTYPE;
//  807 
//  808   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
??CrossCallReturnLabel_13:
        JNZ	??ZDO_ProcessPowerDescReq_0
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,?V0 + 1
??ZDO_ProcessPowerDescReq_0:
        JNZ	??ZDO_ProcessPowerDescReq_1
//  809   {
//  810     desc = &ZDO_Config_Power_Descriptor;
//  811   }
//  812 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  813   else if ( CACHE_SERVER )
//  814   {
//  815     desc = (NodePowerDescriptorFormat_t *)ZDCacheGetDesc(aoi,ePowerDesc,&stat);
//  816   }
//  817 #endif
//  818 
//  819   if ( desc != NULL )
//  820   {
//  821     ZDP_PowerDescMsg( seq, src, aoi, desc, sty );
        ; Setup parameters for call to function ZDP_PowerDescMsg
        MOV	A,R5
        MOV	?V0 + 2,A
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	?V0 + 2,#(ZDO_Config_Power_Descriptor & 0xff)
        MOV	?V0 + 3,#((ZDO_Config_Power_Descriptor >> 8) & 0xff)
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R4,?V0 + 0
        MOV	R5,?V0 + 1
        MOV	DPTR,#(ZDP_PowerDescMsg & 0xffff)
        MOV	A,#((ZDP_PowerDescMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        SJMP	??ZDO_ProcessPowerDescReq_2
//  822   }
//  823   else
//  824   {
//  825     ZDP_GenericRsp( seq, src, stat, aoi, Power_Desc_rsp, sty );
??ZDO_ProcessPowerDescReq_1:
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV	?V0 + 2,#0x3
        MOV	?V0 + 3,#-0x80
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	R4,#-0x80
        MOV	DPTR,#(ZDP_GenericRsp & 0xffff)
        MOV	A,#((ZDP_GenericRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  826   }
//  827 }
??ZDO_ProcessPowerDescReq_2:
        SJMP	?Subroutine22
        CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        CLR	A
        ADD	A,?V0 + 0
        MOV	A,R7
        ADDC	A,#0x0
        MOV	?V0 + 1,A
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,?V0 + 0
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
//  828 
//  829 /*********************************************************************
//  830  * @fn          ZDO_ProcessSimpleDescReq
//  831  *
//  832  * @brief       This function processes and responds to the
//  833  *              Simple_Desc_req message.
//  834  *
//  835  * @param       src - Source address
//  836  * @param       msg - message data
//  837  * @param       sty - Security enable/disable
//  838  *
//  839  * @return      none
//  840  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  841 void ZDO_ProcessSimpleDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
ZDO_ProcessSimpleDescReq:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function ZDO_ProcessSimpleDescReq
//  842 {
        FUNCALL ZDO_ProcessSimpleDescReq, afFindSimpleDesc
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDO_ProcessSimpleDescReq, ZDP_SimpleDescMsg
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ZDO_ProcessSimpleDescReq, osal_mem_free
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	?V0 + 0,R1
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
//  843   SimpleDescriptionFormat_t *sDesc = NULL;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        LCALL	?Subroutine0 & 0xFFFF
//  844   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
??CrossCallReturnLabel_0:
        MOV	R0,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R1,A
//  845   byte endPoint = msg[2];
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
//  846   byte free = false;
        MOV	?V0 + 5,#0x0
//  847   byte stat = ZDP_SUCCESS;
        MOV	?V0 + 4,#0x0
//  848 
//  849   if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
        JZ	??ZDO_ProcessSimpleDescReq_0
        CLR	C
        SUBB	A,#-0xf
        JC	??ZDO_ProcessSimpleDescReq_1
//  850   {
//  851     stat = ZDP_INVALID_EP;
??ZDO_ProcessSimpleDescReq_0:
        MOV	?V0 + 4,#-0x7e
        SJMP	??ZDO_ProcessSimpleDescReq_2
//  852   }
//  853   else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
??ZDO_ProcessSimpleDescReq_1:
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??ZDO_ProcessSimpleDescReq_3
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??ZDO_ProcessSimpleDescReq_3:
        JNZ	??ZDO_ProcessSimpleDescReq_4
//  854   {
//  855     free = afFindSimpleDesc( &sDesc, endPoint );
        ; Setup parameters for call to function afFindSimpleDesc
        MOV	A,R2
        MOV	R1,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(afFindSimpleDesc & 0xffff)
        MOV	A,#((afFindSimpleDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	?V0 + 5,A
//  856     if ( sDesc == NULL )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessSimpleDescReq_5
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessSimpleDescReq_5:
        JNZ	??ZDO_ProcessSimpleDescReq_2
//  857     {
//  858       stat = ZDP_NOT_ACTIVE;
        MOV	?V0 + 4,#-0x7d
        SJMP	??ZDO_ProcessSimpleDescReq_2
//  859     }
//  860   }
//  861 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  862   else if ( CACHE_SERVER )
//  863   {
//  864     stat = endPoint;
//  865     sDesc = (SimpleDescriptionFormat_t *)ZDCacheGetDesc(aoi, eSimpDesc, &stat);
//  866   }
//  867 #endif
//  868   else
//  869   {
//  870 #if defined ( RTR_NWK )
//  871     stat = ZDP_DEVICE_NOT_FOUND;
//  872 #else
//  873     stat = ZDP_INVALID_REQTYPE;
??ZDO_ProcessSimpleDescReq_4:
        MOV	?V0 + 4,#-0x80
//  874 #endif
//  875   }
//  876 
//  877   ZDP_SimpleDescMsg( seq, src, stat, sDesc, Simple_Desc_rsp, sty );
??ZDO_ProcessSimpleDescReq_2:
        ; Setup parameters for call to function ZDP_SimpleDescMsg
        MOV	?V0 + 2,#0x4
        MOV	?V0 + 3,#-0x80
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R5,?V0 + 1
        MOV	R4,?V0 + 4
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(ZDP_SimpleDescMsg & 0xffff)
        MOV	A,#((ZDP_SimpleDescMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  878 
//  879   if ( free )
        MOV	A,?V0 + 5
        JZ	??ZDO_ProcessSimpleDescReq_6
//  880   {
//  881     osal_mem_free( sDesc );
        ; Setup parameters for call to function osal_mem_free
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  882   }
//  883 }
??ZDO_ProcessSimpleDescReq_6:
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        LJMP	?Subroutine24 & 0xFFFF
        CFI EndBlock cfiBlock16
//  884 
//  885 /*********************************************************************
//  886  * @fn          ZDO_ProcessActiveEPReq
//  887  *
//  888  * @brief       This function processes and responds to the
//  889  *              Active_EP_req message.
//  890  *
//  891  * @param       src  - Source address
//  892  * @param       sty - Security enable/disable
//  893  *
//  894  * @return      none
//  895  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  896 void ZDO_ProcessActiveEPReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
ZDO_ProcessActiveEPReq:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function ZDO_ProcessActiveEPReq
//  897 {
        FUNCALL ZDO_ProcessActiveEPReq, afNumEndPoints
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDO_ProcessActiveEPReq, afEndPoints
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDO_ProcessActiveEPReq, ZDP_EPRsp
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDO_ProcessActiveEPReq, ZDP_GenericRsp
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 0,R1
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
//  898   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        CLR	A
        ADD	A,R2
        MOV	R6,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R7,A
//  899   byte cnt = CACHE_EP_MAX;
//  900   byte stat = ZDP_SUCCESS;
//  901 
//  902   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??ZDO_ProcessActiveEPReq_0
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R7
??ZDO_ProcessActiveEPReq_0:
        JNZ	??ZDO_ProcessActiveEPReq_1
//  903   {
//  904     cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
        ; Setup parameters for call to function afNumEndPoints
        MOV	DPTR,#(afNumEndPoints & 0xffff)
        MOV	A,#((afNumEndPoints >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        DEC	A
        MOV	?V0 + 2,A
//  905     afEndPoints( (uint8 *)ZDOBuildBuf, true );
        ; Setup parameters for call to function afEndPoints
        MOV	R1,#0x1
        MOV	R2,#(??ZDOBuildBuf & 0xff)
        MOV	R3,#((??ZDOBuildBuf >> 8) & 0xff)
        MOV	DPTR,#(afEndPoints & 0xffff)
        MOV	A,#((afEndPoints >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  906   }
//  907 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  908   else if ( CACHE_SERVER )
//  909   {
//  910     cnt = *((byte *)ZDCacheGetDesc(aoi, eActEPDesc, (uint8 *)ZDOBuildBuf));
//  911     // If cnt = 0, err code in 1st byte of buf, otherwise EP list is in the buf.
//  912     if ( cnt == 0 )
//  913     {
//  914       stat = ZDOBuildBuf[0];
//  915     }
//  916   }
//  917 #endif
//  918   else
//  919   {
//  920     stat = ZDP_INVALID_REQTYPE;
//  921   }
//  922 
//  923   if ( cnt != CACHE_EP_MAX )
        MOV	A,#0x4
        XRL	A,?V0 + 2
        JZ	??ZDO_ProcessActiveEPReq_1
//  924   {
//  925     ZDP_ActiveEPRsp( seq, src, stat, aoi, cnt, (uint8 *)ZDOBuildBuf, sty );
        ; Setup parameters for call to function ZDP_EPRsp
        MOV	R0,#?V0 + 1
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	?V0 + 4,#(??ZDOBuildBuf & 0xff)
        MOV	?V0 + 5,#((??ZDOBuildBuf >> 8) & 0xff)
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,?V0 + 2
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 1
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	?V0 + 2,R6
        MOV	?V0 + 3,R7
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 1
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        MOV	R1,?V0 + 0
        MOV	R2,#0x5
        MOV	R3,#-0x80
        MOV	DPTR,#(ZDP_EPRsp & 0xffff)
        MOV	A,#((ZDP_EPRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x7
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        SJMP	??ZDO_ProcessActiveEPReq_2
//  926   }
//  927   else
//  928   {
//  929     ZDP_GenericRsp( seq, src, ZDP_NOT_SUPPORTED, aoi, Active_EP_rsp, sty );
??ZDO_ProcessActiveEPReq_1:
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV	?V0 + 2,#0x5
        MOV	?V0 + 3,#-0x80
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	?V0 + 2,R6
        MOV	?V0 + 3,R7
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R5,?V0 + 1
        MOV	R4,#-0x7c
        MOV	R2,?V0 + 6
        MOV	R3,?V0 + 7
        MOV	R1,?V0 + 0
        MOV	DPTR,#(ZDP_GenericRsp & 0xffff)
        MOV	A,#((ZDP_GenericRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI EndBlock cfiBlock17
//  930   }
//  931 }
??ZDO_ProcessActiveEPReq_2:
        REQUIRE ?Subroutine25
        ; // Fall through to label ?Subroutine25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock18
//  932 
//  933 /*********************************************************************
//  934  * @fn          ZDO_ProcessMatchDescReq
//  935  *
//  936  * @brief       This function processes and responds to the
//  937  *              Match_Desc_req message.
//  938  *
//  939  * @param       src  - Source address
//  940  * @param       msg - input message containing search material
//  941  * @param       sty - Security enable/disable
//  942  *
//  943  * @return      none
//  944  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  945 void ZDO_ProcessMatchDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
ZDO_ProcessMatchDescReq:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function ZDO_ProcessMatchDescReq
//  946 {
        FUNCALL ZDO_ProcessMatchDescReq, ??ZDO_CreateAlignedUINT16List
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, ??ZDO_CreateAlignedUINT16List
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, NLME_IsAddressBroadcast
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, ZDP_EPRsp
        LOCFRAME XSTACK, 37, STACK
        ARGFRAME XSTACK, 37, STACK
        FUNCALL ZDO_ProcessMatchDescReq, NLME_IsAddressBroadcast
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_msg_send
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, ZDO_AnyClusterMatches
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ZDO_ProcessMatchDescReq, ZDO_AnyClusterMatches
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_msg_allocate
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_memcpy
        LOCFRAME XSTACK, 33, STACK
        ARGFRAME XSTACK, 33, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_memcpy
        LOCFRAME XSTACK, 33, STACK
        ARGFRAME XSTACK, 33, STACK
        FUNCALL ZDO_ProcessMatchDescReq, ZDP_EPRsp
        LOCFRAME XSTACK, 37, STACK
        ARGFRAME XSTACK, 37, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 14
        MOV	A,#-0xe
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        MOV	A,R1
        MOVX	@DPTR,A
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  947   byte epCnt = 0;
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        CLR	A
        LCALL	?Subroutine0 & 0xFFFF
//  948   byte numInClusters;
//  949   uint16 *inClusters;
//  950   byte numOutClusters;
//  951   uint16 *outClusters;
//  952   epList_t *epDesc;
//  953   SimpleDescriptionFormat_t *sDesc = NULL;
//  954   uint8 allocated;
//  955 
//  956   // Parse the incoming message
//  957   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
??CrossCallReturnLabel_1:
        MOV	R6,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R7,A
//  958   uint16 profileID = BUILD_UINT16( msg[2], msg[3] );
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        CLR	A
        ADD	A,R2
        MOV	?V0 + 0,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	?V0 + 1,A
//  959   msg += 4;
        MOV	A,R4
        ADD	A,#0x4
        MOV	?V0 + 2,A
        MOV	A,R5
        ADDC	A,#0x0
//  960   numInClusters = *msg++;
        MOV	DPL,?V0 + 2
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
        INC	DPTR
        MOV	?V0 + 2,DPL
        MOV	?V0 + 3,DPH
//  961   inClusters = NULL;
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  962   if (numInClusters)  {
        MOV	A,?V0 + 7
        JZ	??ZDO_ProcessMatchDescReq_0
//  963     if (!(inClusters=ZDO_CreateAlignedUINT16List(numInClusters, msg)))  {
        ; Setup parameters for call to function ZDO_CreateAlignedUINT16List
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	R1,A
        MOV	DPTR,#(??ZDO_CreateAlignedUINT16List & 0xffff)
        MOV	A,#((??ZDO_CreateAlignedUINT16List >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	R0,?V0 + 4
        MOV	R1,?V0 + 5
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV	A,R0
        JNZ	??ZDO_ProcessMatchDescReq_1
        MOV	A,R1
??ZDO_ProcessMatchDescReq_1:
        JZ	??ZDO_ProcessMatchDescReq_2
//  964       // can't allocate memory. drop message
//  965       return;
//  966     }
//  967   }
//  968   msg += numInClusters*sizeof(uint16);
??ZDO_ProcessMatchDescReq_0:
        MOV	A,?V0 + 7
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,?V0 + 2
        ADD	A,R0
        MOV	?V0 + 2,A
        MOV	A,?V0 + 3
        ADDC	A,R1
        MOV	?V0 + 3,A
//  969 
//  970   numOutClusters = *msg++;
        MOV	DPL,?V0 + 2
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//  971   outClusters = NULL;
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        LCALL	?Subroutine2 & 0xFFFF
//  972   if (numOutClusters)  {
??CrossCallReturnLabel_4:
        JZ	??ZDO_ProcessMatchDescReq_3
//  973     if (!(outClusters=ZDO_CreateAlignedUINT16List(numOutClusters, msg)))  {
        ; Setup parameters for call to function ZDO_CreateAlignedUINT16List
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	R1,A
        MOV	DPTR,#(??ZDO_CreateAlignedUINT16List & 0xffff)
        MOV	A,#((??ZDO_CreateAlignedUINT16List >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R0,?V0 + 2
        MOV	R1,?V0 + 3
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV	A,R0
        JNZ	??ZDO_ProcessMatchDescReq_4
        MOV	A,R1
??ZDO_ProcessMatchDescReq_4:
        JNZ	??ZDO_ProcessMatchDescReq_3
//  974       // can't allocate memory. drop message
//  975       if (inClusters) {
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessMatchDescReq_5
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessMatchDescReq_5:
        JZ	??ZDO_ProcessMatchDescReq_2
//  976         osal_mem_free(inClusters);
        ; Setup parameters for call to function osal_mem_free
        MOV	A,#0x6
??ZDO_ProcessMatchDescReq_6:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDO_ProcessMatchDescReq_2:
        MOV	A,#0xe
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        LJMP	?Subroutine25 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 30)
//  977       }
//  978       return;
//  979     }
//  980   }
//  981   msg += numOutClusters*sizeof(uint16);
//  982 
//  983   if ( NWK_BROADCAST_SHORTADDR_DEVALL == aoi )
??ZDO_ProcessMatchDescReq_3:
        MOV	A,#-0x1
        XRL	A,R6
        JNZ	??ZDO_ProcessMatchDescReq_7
        MOV	A,#-0x1
        XRL	A,R7
??ZDO_ProcessMatchDescReq_7:
        JZ	??ZDO_ProcessMatchDescReq_8
//  984   {
//  985 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  986     if ( CACHE_SERVER )
//  987     {
//  988       ZDCacheProcessMatchDescReq( seq, src, numInClusters, inClusters,
//  989                             numOutClusters, outClusters, profileID, aoi, sty );
//  990     }
//  991 #endif
//  992   }
//  993   else if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(NLME_IsAddressBroadcast & 0xffff)
        MOV	A,#((NLME_IsAddressBroadcast >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JNZ	??ZDO_ProcessMatchDescReq_9
//  994   {
//  995     ZDP_MatchDescRsp( seq, src, ZDP_INVALID_REQTYPE,
//  996                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, sty );
??ZDO_ProcessMatchDescReq_10:
        ; Setup parameters for call to function ZDP_EPRsp
        MOV	A,#0x1e
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 31)
        MOV	?V0 + 0,#0x0
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	DPTR,#ZDAppNwkAddr
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV	?V0 + 0,#-0x80
        LJMP	??ZDO_ProcessMatchDescReq_11 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 30)
//  997     if (inClusters)  {
//  998       osal_mem_free(inClusters);
//  999     }
// 1000     if (outClusters)  {
// 1001       osal_mem_free(outClusters);
// 1002     }
// 1003     return;
// 1004   }
// 1005   else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
??ZDO_ProcessMatchDescReq_9:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	A,#((NLME_IsAddressBroadcast >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JNZ	??ZDO_ProcessMatchDescReq_8
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??ZDO_ProcessMatchDescReq_12
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R7
??ZDO_ProcessMatchDescReq_12:
        JNZ	??ZDO_ProcessMatchDescReq_10
// 1006   {
// 1007 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
// 1008     if ( CACHE_SERVER )
// 1009     {
// 1010       ZDCacheProcessMatchDescReq( seq, src, numInClusters, inClusters,
// 1011                             numOutClusters, outClusters, profileID, aoi, sty );
// 1012     }
// 1013 #else
// 1014     ZDP_MatchDescRsp( seq, src, ZDP_INVALID_REQTYPE,
// 1015                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, sty );
// 1016 #endif
// 1017     if (inClusters)  {
// 1018       osal_mem_free(inClusters);
// 1019     }
// 1020     if (outClusters)  {
// 1021       osal_mem_free(outClusters);
// 1022     }
// 1023     return;
// 1024   }
// 1025 
// 1026   // First count the number of endpoints that match.
// 1027   epDesc = epList;
??ZDO_ProcessMatchDescReq_8:
        MOV	DPTR,#epList
        SJMP	??ZDO_ProcessMatchDescReq_13
// 1028   while ( epDesc )
// 1029   {
// 1030     // Don't search endpoint 0 and check if response is allowed
// 1031     if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
// 1032     {
// 1033       if ( epDesc->pfnDescCB )
// 1034       {
// 1035         sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
// 1036         allocated = TRUE;
// 1037       }
// 1038       else
// 1039       {
// 1040         sDesc = epDesc->epDesc->simpleDesc;
// 1041         allocated = FALSE;
// 1042       }
// 1043 
// 1044       if ( sDesc && sDesc->AppProfId == profileID )
// 1045       {
// 1046         uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
// 1047 
// 1048         // If there are no search input/ouput clusters - respond
// 1049         if ( ((numInClusters == 0) && (numOutClusters == 0))
// 1050             // Are there matching input clusters?
// 1051              || (ZDO_AnyClusterMatches( numInClusters, inClusters,
// 1052                   sDesc->AppNumInClusters, sDesc->pAppInClusterList ))
// 1053             // Are there matching output clusters?
// 1054              || (ZDO_AnyClusterMatches( numOutClusters, outClusters,
// 1055                   sDesc->AppNumOutClusters, sDesc->pAppOutClusterList ))     )
// 1056         {         
// 1057           // Notify the endpoint of the match.
// 1058           uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
// 1059           ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
// 1060 
// 1061           if (pRspSent)
// 1062           {
// 1063             pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
// 1064             pRspSent->nwkAddr = src->addr.shortAddr;
// 1065             pRspSent->numInClusters = numInClusters;
// 1066             pRspSent->numOutClusters = numOutClusters;
// 1067 
// 1068             if (numInClusters)
// 1069             {
// 1070               pRspSent->pInClusters = (uint16*) (pRspSent + 1);
// 1071               osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
// 1072             }
// 1073             else 
// 1074             {
// 1075               pRspSent->pInClusters = NULL;
// 1076             }
// 1077              
// 1078             if (numOutClusters)
// 1079             {
// 1080               pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
// 1081               osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
// 1082             }
// 1083             else 
// 1084             {
// 1085               pRspSent->pOutClusters = NULL;
??ZDO_ProcessMatchDescReq_14:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
// 1086             }
// 1087           
// 1088             osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
??ZDO_ProcessMatchDescReq_15:
        ; Setup parameters for call to function osal_msg_send
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1089           }
// 1090 
// 1091           uint8Buf[epCnt++] = sDesc->EndPoint;
??ZDO_ProcessMatchDescReq_16:
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_26:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,#(??ZDOBuildBuf & 0xff)
        MOV	DPL,A
        CLR	A
        ADDC	A,#((??ZDOBuildBuf >> 8) & 0xff)
        MOV	DPH,A
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        INC	A
        MOVX	@DPTR,A
// 1092         }
// 1093       }
// 1094 
// 1095       if ( allocated )
??ZDO_ProcessMatchDescReq_17:
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JZ	??ZDO_ProcessMatchDescReq_18
// 1096         osal_mem_free( sDesc );
        ; Setup parameters for call to function osal_mem_free
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1097     }
// 1098     epDesc = epDesc->nextDesc;
??ZDO_ProcessMatchDescReq_18:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_20:
        INC	DPTR
??ZDO_ProcessMatchDescReq_13:
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessMatchDescReq_19
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessMatchDescReq_19:
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_20 & 0xFFFF
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_23:
        JZ	??ZDO_ProcessMatchDescReq_18
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_28:
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.0
        JNC	??ZDO_ProcessMatchDescReq_18
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_43:
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        MOV	R1,#0x0
        MOV	A,R4
        ORL	A,R5
        ORL	A,R6
        JZ	??ZDO_ProcessMatchDescReq_21
        ; Setup parameters for indirect call
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV	R2,A
        INC	R1
        MOV	A,R1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_21:
        MOVX	A,@DPTR
        MOV	DPL,R4
        MOV	DPH,R5
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x1
        SJMP	??ZDO_ProcessMatchDescReq_22
??ZDO_ProcessMatchDescReq_21:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_36:
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        CLR	A
??ZDO_ProcessMatchDescReq_22:
        MOVX	@DPTR,A
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessMatchDescReq_23
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessMatchDescReq_23:
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_17 & 0xFFFF
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_37:
        MOVX	A,@DPTR
        XRL	A,?V0 + 0
        JNZ	??ZDO_ProcessMatchDescReq_24
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,?V0 + 1
??ZDO_ProcessMatchDescReq_24:
        JZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_17 & 0xFFFF
        MOV	A,?V0 + 7
        JNZ	??ZDO_ProcessMatchDescReq_25
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JZ	??ZDO_ProcessMatchDescReq_26
??ZDO_ProcessMatchDescReq_25:
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_29:
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV	R1,?V0 + 7
        MOV	DPTR,#(ZDO_AnyClusterMatches & 0xffff)
        MOV	A,#((ZDO_AnyClusterMatches >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV	A,R1
        JNZ	??ZDO_ProcessMatchDescReq_26
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_54:
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_55:
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(ZDO_AnyClusterMatches & 0xffff)
        MOV	A,#((ZDO_AnyClusterMatches >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV	A,R1
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_17 & 0xFFFF
??ZDO_ProcessMatchDescReq_26:
        ; Setup parameters for call to function osal_msg_allocate
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        ADD	A,?V0 + 7
        CLR	C
        RLC	A
        ADD	A,#0xa
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R6,?V0 + 2
        MOV	R7,?V0 + 3
        MOV	A,R6
        JNZ	??ZDO_ProcessMatchDescReq_27
        MOV	A,R7
??ZDO_ProcessMatchDescReq_27:
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_16 & 0xFFFF
        MOV	A,#-0x25
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOV	A,?V0 + 7
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
        MOV	A,?V0 + 7
        JZ	??ZDO_ProcessMatchDescReq_28
        MOV	A,R6
        ADD	A,#0x5
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	A,R6
        ADD	A,#0xa
        MOV	R0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R1,A
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function osal_memcpy
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 33)
        MOV	A,?V0 + 7
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        SJMP	??ZDO_ProcessMatchDescReq_29
??ZDO_ProcessMatchDescReq_28:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
??ZDO_ProcessMatchDescReq_29:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_14 & 0xFFFF
        MOV	A,?V0 + 7
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,R6
        ADD	A,R0
        MOV	R0,A
        MOV	A,R7
        ADDC	A,R1
        MOV	R1,A
        MOV	A,#0xa
        ADD	A,R0
        MOV	R2,A
        CLR	A
        ADDC	A,R1
        MOV	R3,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 33)
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        LJMP	??ZDO_ProcessMatchDescReq_15 & 0xFFFF
// 1099   }
// 1100 
// 1101   // Send the message only if at least one match found.
// 1102   if ( epCnt )
??ZDO_ProcessMatchDescReq_20:
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JZ	??ZDO_ProcessMatchDescReq_30
// 1103   {
// 1104     if ( ZSuccess == ZDP_MatchDescRsp( seq, src, ZDP_SUCCESS,
// 1105                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, sty ) )
        ; Setup parameters for call to function ZDP_EPRsp
        MOV	A,#0x1e
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 31)
        MOV	?V0 + 0,#(??ZDOBuildBuf & 0xff)
        MOV	?V0 + 1,#((??ZDOBuildBuf >> 8) & 0xff)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	DPTR,#ZDAppNwkAddr
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV	?V0 + 0,#0x0
??ZDO_ProcessMatchDescReq_11:
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV	A,#0x13
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	R2,#0x6
        MOV	R3,#-0x80
        MOV	DPTR,#(ZDP_EPRsp & 0xffff)
        MOV	A,#((ZDP_EPRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x7
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
// 1106     {
// 1107 #if defined( LCD_SUPPORTED )
// 1108       HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
// 1109 #endif
// 1110     }
// 1111   }
// 1112   else
// 1113   {
// 1114 #if defined( LCD_SUPPORTED )
// 1115     HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
// 1116 #endif
// 1117   }
// 1118   if (inClusters)  {
??ZDO_ProcessMatchDescReq_30:
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessMatchDescReq_31
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessMatchDescReq_31:
        JZ	??ZDO_ProcessMatchDescReq_32
        ; Setup parameters for call to function osal_mem_free
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDO_ProcessMatchDescReq_32:
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessMatchDescReq_33
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessMatchDescReq_33:
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_2 & 0xFFFF
        ; Setup parameters for call to function osal_mem_free
        MOV	A,#0x8
        LJMP	??ZDO_ProcessMatchDescReq_6 & 0xFFFF
        CFI EndBlock cfiBlock19
// 1119     osal_mem_free(inClusters);
// 1120   }
// 1121   if (outClusters)  {
// 1122     osal_mem_free(outClusters);
// 1123   }
// 1124 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_49:
        INC	DPTR
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_15
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_37
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_14
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_36
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_24
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_23
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 30)
??Subroutine18_0:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 5,A
        MOV	?V0 + 6,#0x0
        MOV	R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_42:
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_28
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_29
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_55
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_56:
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_20
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_55
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_43
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_21
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_22
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_28
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_54
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56
        REQUIRE ?Subroutine23
        ; // Fall through to label ?Subroutine23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_55
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_20
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_22
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_28
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_21
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_43
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_29
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_40:
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        LCALL	??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_39:
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_25
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_23
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_15
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_24
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_27
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_26
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 30)
??Subroutine8_0:
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_44:
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85
        CFI EndBlock cfiCond86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_20
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_21
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_57:
        INC	DPTR
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_41:
        INC	DPTR
        SJMP	?Subroutine23
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_19
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_18
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_16
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_17
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker107 Using cfiCommon1
        CFI (cfiPicker107) NoFunction
        CFI (cfiPicker107) Picker
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        RET
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond108 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_47:
        INC	DPTR
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV	R1,A
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond111 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOVX	@DPTR,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        MOVX	@DPTR,A
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        CLR	A
        ADD	A,R2
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123
// 1125 
// 1126 #if defined ( ZDO_COORDINATOR )
// 1127 /*********************************************************************
// 1128  * @fn          ZDO_ProcessEndDeviceBindReq
// 1129  *
// 1130  * @brief       This function processes and responds to the
// 1131  *              End_Device_Bind_req message.
// 1132  *
// 1133  * @param       SrcAddr  - Source address
// 1134  * @param       msg - input message containing search material
// 1135  * @param       SecurityUse - Security enable/disable
// 1136  *
// 1137  * @return      none
// 1138  */
// 1139 void ZDO_ProcessEndDeviceBindReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg,
// 1140                                   byte SecurityUse )
// 1141 {
// 1142   ZDEndDeviceBind_t bindReq;
// 1143   uint8  protoVer;
// 1144 
// 1145   protoVer = NLME_GetProtocolVersion();
// 1146 
// 1147   // Parse the message
// 1148   bindReq.TransSeq = TransSeq;
// 1149   bindReq.srcAddr = SrcAddr->addr.shortAddr;
// 1150   bindReq.SecurityUse = SecurityUse;
// 1151 
// 1152   bindReq.localCoordinator = BUILD_UINT16( msg[0], msg[1] );
// 1153   msg += 2;
// 1154 
// 1155   if ( protoVer != ZB_PROT_V1_0 )
// 1156   {
// 1157     osal_cpyExtAddr( &(bindReq.ieeeAddr), msg );
// 1158     msg += Z_EXTADDR_LEN;
// 1159   }
// 1160 
// 1161   bindReq.endpoint = *msg++;
// 1162   bindReq.profileID = BUILD_UINT16( msg[0], msg[1] );
// 1163   msg += 2;
// 1164 
// 1165   bindReq.numInClusters = *msg++;
// 1166   bindReq.inClusters = NULL;
// 1167   if ( bindReq.numInClusters )
// 1168   {
// 1169     if ( !(bindReq.inClusters = ZDO_CreateAlignedUINT16List( bindReq.numInClusters, msg )) )
// 1170     {
// 1171       // can't allocate memory. drop message
// 1172       return;
// 1173     }
// 1174   }
// 1175   msg += (bindReq.numInClusters * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 )));
// 1176 
// 1177   bindReq.numOutClusters = *msg++;
// 1178   bindReq.outClusters = NULL;
// 1179   if ( bindReq.numOutClusters )
// 1180   {
// 1181     if ( !(bindReq.outClusters=ZDO_CreateAlignedUINT16List( bindReq.numOutClusters, msg )) )
// 1182     {
// 1183       // can't allocate memory. drop message
// 1184       if ( bindReq.inClusters )
// 1185       {
// 1186         osal_mem_free( bindReq.inClusters );
// 1187       }
// 1188       return;
// 1189     }
// 1190   }
// 1191 
// 1192   ZDApp_EndDeviceBindReqCB( &bindReq );
// 1193 
// 1194   if ( bindReq.inClusters )
// 1195   {
// 1196     osal_mem_free( bindReq.inClusters );
// 1197   }
// 1198   if ( bindReq.outClusters )
// 1199   {
// 1200     osal_mem_free( bindReq.outClusters );
// 1201   }
// 1202 }
// 1203 #endif // ZDO_COORDINATOR
// 1204 
// 1205 #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
// 1206 
// 1207 /*********************************************************************
// 1208  * @fn          ZDO_ProcessBindUnbindReq
// 1209  *
// 1210  * @brief       This function processes and responds to the
// 1211  *              Bind_req or Unbind_req message.
// 1212  *
// 1213  * @param       SrcAddr  - Source address
// 1214  * @param       msgClusterID - message cluster ID
// 1215  * @param       msg - input message containing search material
// 1216  * @param       SecurityUse - Security enable/disable
// 1217  *
// 1218  * @return      none
// 1219  */
// 1220 void ZDO_ProcessBindUnbindReq( byte TransSeq, zAddrType_t *SrcAddr, uint16 msgClusterID,
// 1221                               byte *msg, byte SecurityUse )
// 1222 {
// 1223   byte *SrcAddress;
// 1224   byte SrcEpIntf;
// 1225   uint16 ClusterID;
// 1226   zAddrType_t DstAddress;
// 1227   byte DstEpIntf;
// 1228   uint8 protoVer;
// 1229 
// 1230   protoVer = NLME_GetProtocolVersion();
// 1231 
// 1232   SrcAddress = msg;
// 1233   msg += Z_EXTADDR_LEN;
// 1234   SrcEpIntf = *msg++;
// 1235 
// 1236   if ( protoVer != ZB_PROT_V1_0 )
// 1237   {
// 1238     ClusterID = BUILD_UINT16( msg[0], msg[1] );
// 1239     msg += 2;
// 1240   }
// 1241   else
// 1242   {
// 1243     ClusterID = *msg++;
// 1244   }
// 1245 
// 1246   if ( protoVer != ZB_PROT_V1_0 )
// 1247   {
// 1248     DstAddress.addrMode = *msg++;
// 1249     if ( DstAddress.addrMode == Addr64Bit )
// 1250     {
// 1251       osal_cpyExtAddr( DstAddress.addr.extAddr, msg );
// 1252       msg += Z_EXTADDR_LEN;
// 1253       DstEpIntf = *msg;
// 1254     }
// 1255     else
// 1256     {
// 1257       DstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
// 1258       msg += sizeof ( uint16 );
// 1259     }
// 1260   }
// 1261   else
// 1262   {
// 1263     DstAddress.addrMode = Addr64Bit;
// 1264     osal_cpyExtAddr( DstAddress.addr.extAddr, msg );
// 1265     msg += Z_EXTADDR_LEN;
// 1266     DstEpIntf = *msg;
// 1267   }
// 1268 
// 1269 
// 1270   if ( msgClusterID == Bind_req )
// 1271   {
// 1272     ZDApp_BindReqCB( TransSeq, SrcAddr, SrcAddress, SrcEpIntf,
// 1273                     ClusterID, &DstAddress, DstEpIntf, SecurityUse );
// 1274   }
// 1275   else
// 1276   {
// 1277     ZDApp_UnbindReqCB( TransSeq, SrcAddr, SrcAddress, SrcEpIntf,
// 1278                     ClusterID, &DstAddress, DstEpIntf, SecurityUse );
// 1279   }
// 1280 }
// 1281 #endif // REFLECTOR || ZDO_BIND_UNBIND_RESPONSE
// 1282 
// 1283 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1284 /*********************************************************************
// 1285  * @fn      ZDO_ProcessAddrRsp
// 1286  *
// 1287  * @brief   Process an incoming NWK_addr_rsp or IEEE_addr_rsp message and then
// 1288  *          invoke the corresponding CB function.
// 1289  *
// 1290  * @param   src - Source address of the request.
// 1291  * @param   cId - Cluster ID of the request.
// 1292  * @param   msg - Incoming request message.
// 1293  *
// 1294  * @return  none
// 1295  */
// 1296 void ZDO_ProcessAddrRsp( zAddrType_t *src, uint16 cId, byte *msg, byte msgLen )
// 1297 {
// 1298 #if defined ( REFLECTOR )
// 1299   AddrMgrEntry_t addrEntry;
// 1300 #endif
// 1301   uint16 aoi;
// 1302   uint16 *list = NULL;
// 1303   byte idx = 0;
// 1304   byte cnt = 0;
// 1305 
// 1306   byte stat = *msg++;
// 1307   byte *ieee = msg;
// 1308   msg += Z_EXTADDR_LEN;
// 1309   aoi = BUILD_UINT16( msg[0], msg[1] );
// 1310 
// 1311 #if defined ( REFLECTOR )
// 1312   // Add this to the address manager
// 1313   addrEntry.user = ADDRMGR_USER_DEFAULT;
// 1314   addrEntry.nwkAddr = aoi;
// 1315   AddrMgrExtAddrSet( addrEntry.extAddr, ieee );
// 1316   AddrMgrEntryUpdate( &addrEntry );
// 1317 #endif
// 1318 
// 1319   // NumAssocDev field is only present on success.
// 1320   if ( stat == ZDO_SUCCESS )
// 1321   {
// 1322     msg += 2;
// 1323     cnt = ( msgLen > 1 + Z_EXTADDR_LEN + 2 ) ? *msg++ : 0;   // Single req: msgLen = status + IEEEAddr + NWKAddr
// 1324 
// 1325     // StartIndex field is only present if NumAssocDev field is non-zero.
// 1326     if ( cnt != 0 )
// 1327     {
// 1328       idx = *msg++;
// 1329 
// 1330       if ( cnt > idx )
// 1331       {
// 1332         list = osal_mem_alloc( (short)(cnt * sizeof( uint16 )) );
// 1333 
// 1334         if ( list )
// 1335         {
// 1336           uint16 *pList = list;
// 1337           byte n = cnt - idx;
// 1338 
// 1339           while ( n != 0 )
// 1340           {
// 1341             *pList++ = BUILD_UINT16( msg[0], msg[1] );
// 1342             msg += sizeof( uint16 );
// 1343             n--;
// 1344           }
// 1345         }
// 1346       }
// 1347     }
// 1348   }
// 1349 
// 1350 #if defined ( ZDO_NWKADDR_REQUEST )
// 1351   if ( cId == NWK_addr_rsp )
// 1352   {
// 1353     ZDApp_NwkAddrRspCB( src, stat, ieee, aoi, cnt, idx, list );
// 1354   }
// 1355 #endif
// 1356 
// 1357 #if defined ( ZDO_IEEEADDR_REQUEST )
// 1358   if ( cId == IEEE_addr_rsp )
// 1359   {
// 1360     ZDApp_IEEEAddrRspCB( src, stat, ieee, aoi, cnt, idx, list );
// 1361   }
// 1362 #endif
// 1363 
// 1364   if ( list )
// 1365   {
// 1366     osal_mem_free( list );
// 1367   }
// 1368 }
// 1369 #endif // ZDO_NWKADDR_REQUEST ZDO_IEEEADDR_REQUEST
// 1370 
// 1371 #if defined ( ZDO_NODEDESC_REQUEST )
// 1372 /*********************************************************************
// 1373  * @fn          ZDO_ProcessNodeDescRsp
// 1374  *
// 1375  * @brief       This function processes and responds to the
// 1376  *              Node_Desc_rsp message.
// 1377  *
// 1378  * @param       SrcAddr  - Source address
// 1379  * @param       msg - input message containing search material
// 1380  *
// 1381  * @return      none
// 1382  */
// 1383 void ZDO_ProcessNodeDescRsp( zAddrType_t *SrcAddr, byte *msg )
// 1384 {
// 1385   byte proVer = NLME_GetProtocolVersion();
// 1386   NodeDescriptorFormat_t nodeDesc;
// 1387   NodeDescriptorFormat_t *pNodeDesc = NULL;
// 1388   byte Status = *msg++;
// 1389   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
// 1390 
// 1391   if ( Status == ZDP_SUCCESS )
// 1392   {
// 1393     msg += 2;
// 1394     nodeDesc.LogicalType = *msg & 0x07;
// 1395     if ( proVer == ZB_PROT_V1_0 )
// 1396     {
// 1397       nodeDesc.UserDescAvail = 0;
// 1398       nodeDesc.ComplexDescAvail = 0;
// 1399     }
// 1400     else
// 1401     {
// 1402       nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
// 1403       nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
// 1404     }
// 1405     msg++;  // Reserved bits.
// 1406     nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
// 1407     nodeDesc.APSFlags = *msg++ & 0x07;
// 1408     nodeDesc.CapabilityFlags = *msg++;
// 1409     nodeDesc.ManufacturerCode[0] = *msg++;
// 1410     nodeDesc.ManufacturerCode[1] = *msg++;
// 1411     nodeDesc.MaxBufferSize = *msg++;
// 1412     nodeDesc.MaxTransferSize[0] = *msg++;
// 1413     nodeDesc.MaxTransferSize[1] = *msg++;
// 1414     
// 1415     if ( proVer == ZB_PROT_V1_0)
// 1416     {
// 1417       nodeDesc.ServerMask = 0;
// 1418     }
// 1419     else
// 1420     {
// 1421       nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
// 1422     }
// 1423     
// 1424     pNodeDesc = &nodeDesc;
// 1425   }
// 1426 
// 1427   ZDApp_NodeDescRspCB( SrcAddr, Status, aoi, pNodeDesc );
// 1428 }
// 1429 #endif // ZDO_NODEDESC_REQUEST
// 1430 
// 1431 #if defined ( ZDO_POWERDESC_REQUEST )
// 1432 /*********************************************************************
// 1433  * @fn          ZDO_ProcessPowerDescRsp
// 1434  *
// 1435  * @brief       This function processes and responds to the
// 1436  *              Power_Desc_rsp message.
// 1437  *
// 1438  * @param       SrcAddr  - Source address
// 1439  * @param       msg - input message containing search material
// 1440  *
// 1441  * @return      none
// 1442  */
// 1443 void ZDO_ProcessPowerDescRsp( zAddrType_t *SrcAddr, byte *msg )
// 1444 {
// 1445   NodePowerDescriptorFormat_t pwrDesc;
// 1446   NodePowerDescriptorFormat_t *pPwrDesc = NULL;
// 1447   byte Status = *msg++;
// 1448   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
// 1449 
// 1450   if ( Status == ZDP_SUCCESS )
// 1451   {
// 1452     msg += 2;
// 1453     pwrDesc.AvailablePowerSources = *msg >> 4;
// 1454     pwrDesc.PowerMode = *msg++ & 0x0F;
// 1455     pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
// 1456     pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
// 1457     pPwrDesc = &pwrDesc;
// 1458   }
// 1459 
// 1460   ZDApp_PowerDescRspCB( SrcAddr, Status, aoi, pPwrDesc );
// 1461 }
// 1462 #endif // ZDO_POWERDESC_REQUEST
// 1463 
// 1464 #if defined ( ZDO_SIMPLEDESC_REQUEST )
// 1465 /*********************************************************************
// 1466  * @fn          ZDO_ProcessSimpleDescRsp
// 1467  *
// 1468  * @brief       This function processes and responds to the
// 1469  *              Simple_Desc_rsp message.
// 1470  *
// 1471  * @param       SrcAddr  - Source address
// 1472  * @param       msg - input message containing search material
// 1473  *
// 1474  * @return      none
// 1475  */
// 1476 void ZDO_ProcessSimpleDescRsp( zAddrType_t *SrcAddr, byte *msg )
// 1477 {
// 1478   byte epIntf = 0;
// 1479   SimpleDescriptionFormat_t simpleDesc;
// 1480   SimpleDescriptionFormat_t *pSimpleDesc = NULL;
// 1481   byte Status = *msg++;
// 1482   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
// 1483 
// 1484   if ( Status == ZDP_SUCCESS )
// 1485   {
// 1486     msg += 3;
// 1487     epIntf = *msg;
// 1488     pSimpleDesc = &simpleDesc;
// 1489     ZDO_ParseSimpleDescBuf( msg, pSimpleDesc );
// 1490   }
// 1491 
// 1492   ZDApp_SimpleDescRspCB( SrcAddr, Status, aoi, epIntf, pSimpleDesc );
// 1493 }
// 1494 #endif // ZDO_SIMPLEDESC_REQUEST
// 1495 
// 1496 #if defined ( ZDO_ACTIVEEP_REQUEST ) || defined ( ZDO_MATCH_REQUEST )
// 1497 /*********************************************************************
// 1498  * @fn          ZDO_ProcessEPListRsp
// 1499  *
// 1500  * @brief       This function processes and responds to the
// 1501  *              Active_EP_rsp or Match_Desc_rsp message.
// 1502  *
// 1503  * @param       src  - Source address
// 1504  * @param       ClusterID - Active_EP_rsp or Match_Desc_rsp
// 1505  * @param       msg - input message containing search material
// 1506  *
// 1507  * @return      none
// 1508  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1509 void ZDO_ProcessEPListRsp( zAddrType_t *src, uint16 ClusterID, byte *msg )
ZDO_ProcessEPListRsp:
        CFI Block cfiBlock124 Using cfiCommon0
        CFI Function ZDO_ProcessEPListRsp
// 1510 {
        FUNCALL ZDO_ProcessEPListRsp, ZDApp_MatchDescRspCB
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
// 1511   byte Status = *msg++;
??CrossCallReturnLabel_35:
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOV	R0,DPL
        MOV	R1,DPH
// 1512   byte cnt = msg[2];
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
// 1513   byte *list = msg+3;
// 1514 
// 1515   src->addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        MOV	?V0 + 2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        CLR	A
        ADD	A,?V0 + 2
        MOV	R6,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R7,A
        MOV	DPL,R2
        MOV	DPH,R3
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R7
        MOVX	@DPTR,A
// 1516 
// 1517 #if defined ( ZDO_ACTIVEEP_REQUEST )
// 1518   if ( ClusterID == Active_EP_rsp )
// 1519     ZDApp_ActiveEPRspCB( src, Status, cnt, list );
// 1520 #endif
// 1521 
// 1522 #if defined ( ZDO_MATCH_REQUEST )
// 1523   if ( ClusterID == Match_Desc_rsp )
        MOV	A,#0x6
        XRL	A,R4
        JNZ	??ZDO_ProcessEPListRsp_0
        MOV	A,#-0x80
        XRL	A,R5
??ZDO_ProcessEPListRsp_0:
        JNZ	??ZDO_ProcessEPListRsp_1
// 1524     ZDApp_MatchDescRspCB( src, Status, cnt, list );
        ; Setup parameters for call to function ZDApp_MatchDescRspCB
        MOV	A,R0
        ADD	A,#0x3
        MOV	?V0 + 2,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	?V0 + 3,A
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,?V0 + 1
        MOV	R1,?V0 + 0
        MOV	DPTR,#(ZDApp_MatchDescRspCB & 0xffff)
        MOV	A,#((ZDApp_MatchDescRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1525 #endif
// 1526 }
??ZDO_ProcessEPListRsp_1:
        LJMP	?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock124
// 1527 #endif  // ZDO_ACTIVEEP_REQUEST ZDO_MATCH_REQUEST
// 1528 
// 1529 #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
// 1530 /*********************************************************************
// 1531  * @fn          ZDO_ProcessBindUnBindRsp
// 1532  *
// 1533  * @brief       This function processes and responds to the
// 1534  *              End_Device_Bind_rsp message.
// 1535  *
// 1536  * @param       SrcAddr  - Source address
// 1537  * @param       ClusterID - Active_EP_rsp or Match_Desc_rsp
// 1538  * @param       msg - input message containing search material
// 1539  *
// 1540  * @return      none
// 1541  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1542 void ZDO_ProcessBindUnbindRsp( zAddrType_t *SrcAddr, uint16 ClusterID, byte Status, uint8 TransSeq )
ZDO_ProcessBindUnbindRsp:
        CFI Block cfiBlock125 Using cfiCommon0
        CFI Function ZDO_ProcessBindUnbindRsp
// 1543 {
        FUNCALL ZDO_ProcessBindUnbindRsp, ZDApp_EndDeviceBindRsp
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1544 #if defined ( ZDO_COORDINATOR )
// 1545   uint8 used = FALSE;
// 1546 #endif
// 1547 
// 1548 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
// 1549   if ( ClusterID == End_Device_Bind_rsp )
        MOV	A,#0x20
        XRL	A,R4
        JNZ	??ZDO_ProcessBindUnbindRsp_0
        MOV	A,#-0x80
        XRL	A,R5
??ZDO_ProcessBindUnbindRsp_0:
        JNZ	??ZDO_ProcessBindUnbindRsp_1
// 1550     ZDApp_EndDeviceBindRsp( SrcAddr, Status );
        ; Setup parameters for call to function ZDApp_EndDeviceBindRsp
        MOV	DPTR,#(ZDApp_EndDeviceBindRsp & 0xffff)
        MOV	A,#((ZDApp_EndDeviceBindRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1551 #endif
// 1552 
// 1553 #if defined ( ZDO_COORDINATOR )
// 1554   if ( matchED )
// 1555   {
// 1556     used = ZDMatchSendState(
// 1557            (uint8)((ClusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1558            Status, TransSeq );
// 1559   }
// 1560 
// 1561   if ( !used )
// 1562 #endif
// 1563   {
// 1564   #if defined ( ZDO_BIND_UNBIND_REQUEST )
// 1565     if ( ClusterID == Bind_rsp )
// 1566       ZDApp_BindRsp( SrcAddr, Status );
// 1567     else
// 1568       ZDApp_UnbindRsp( SrcAddr, Status );
// 1569   #endif
// 1570   }
// 1571 }
??ZDO_ProcessBindUnbindRsp_1:
        LJMP	?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock125
// 1572 #endif // ZDO_BIND_UNBIND_REQUEST ZDO_ENDDEVICEBIND_REQUEST
// 1573 
// 1574 #if defined ( ZDO_SERVERDISC_REQUEST )
// 1575 /*********************************************************************
// 1576  * @fn          ZDO_ProcessServerDiscRsp
// 1577  *
// 1578  * @brief       Process the Server_Discovery_rsp message.
// 1579  *
// 1580  * @param       srcAddr - Source address.
// 1581  * @param       msg - Byte array containing the Server_Discovery_rsp command frame.
// 1582  * @param       SecurityUse -
// 1583  *
// 1584  * @return      none
// 1585  */
// 1586 void ZDO_ProcessServerDiscRsp(zAddrType_t *srcAddr, byte *msg, byte SecurityUse)
// 1587 {
// 1588   byte status = *msg++;
// 1589   uint16 serverMask = BUILD_UINT16( msg[0], msg[1] );
// 1590 
// 1591   ZDApp_ServerDiscRspCB( srcAddr->addr.shortAddr, status, serverMask,
// 1592                          SecurityUse );
// 1593 }
// 1594 #endif
// 1595 
// 1596 #if defined ( ZDO_SERVERDISC_RESPONSE )
// 1597 /*********************************************************************
// 1598  * @fn          ZDO_ProcessServerDiscReq
// 1599  *
// 1600  * @brief       Process the Server_Discovery_req message.
// 1601  *
// 1602  * @param       transID - Transaction sequence number of request.
// 1603  * @param       srcAddr  - Source address
// 1604  * @param       msg - Byte array containing the Server_Discovery_req command frame.
// 1605  * @param       SecurityUse -
// 1606  *
// 1607  * @return      none
// 1608  */
// 1609 void ZDO_ProcessServerDiscReq( byte transID, zAddrType_t *srcAddr, byte *msg,
// 1610                                byte SecurityUse )
// 1611 {
// 1612   uint16 serverMask = BUILD_UINT16( msg[0], msg[1] );
// 1613   uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
// 1614 
// 1615   if ( matchMask )
// 1616   {
// 1617     ZDP_ServerDiscRsp( transID, srcAddr, ZSUCCESS, ZDAppNwkAddr.addr.shortAddr,
// 1618                        matchMask, SecurityUse );
// 1619   }
// 1620 }
// 1621 #endif
// 1622 
// 1623 /*********************************************************************
// 1624  * Call Back Functions from APS  - API
// 1625  */
// 1626 
// 1627 /*********************************************************************
// 1628  * @fn          ZDO_EndDeviceTimeoutCB
// 1629  *
// 1630  * @brief       This function handles the binding timer for the End
// 1631  *              Device Bind command.
// 1632  *
// 1633  * @param       none
// 1634  *
// 1635  * @return      none
// 1636  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1637 void ZDO_EndDeviceTimeoutCB( void )
ZDO_EndDeviceTimeoutCB:
        CFI Block cfiBlock126 Using cfiCommon0
        CFI Function ZDO_EndDeviceTimeoutCB
// 1638 {
        ; Saved register size: 0
        ; Auto size: 0
// 1639 #if defined ( REFLECTOR )
// 1640   byte stat;
// 1641   if ( ZDO_EDBind )
// 1642   {
// 1643     stat = ZDO_EDBind->status;
// 1644 
// 1645     // Send the response message to the first sent
// 1646     ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
// 1647                         stat, ZDO_EDBind->SecurityUse );
// 1648 
// 1649     ZDO_RemoveEndDeviceBind();
// 1650   }
// 1651 #endif  // REFLECTOR
// 1652 }
        LJMP	?BRET
        CFI EndBlock cfiBlock126

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_0:
        DS 4
        REQUIRE `?<Initializer for __Constant_0>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_0>`:
        DD 0

        END
// 1653 
// 1654 /*********************************************************************
// 1655  * Optional Management Messages
// 1656  */
// 1657 
// 1658 #if defined( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
// 1659 /*********************************************************************
// 1660  * @fn          ZDO_ProcessMgmtLqiReq
// 1661  *
// 1662  * @brief       This function handles parsing the incoming Management
// 1663  *              LQI request and generate the response.
// 1664  *
// 1665  *   Note:      This function will limit the number of items returned
// 1666  *              to ZDO_MAX_LQI_ITEMS items.
// 1667  *
// 1668  * @param       SrcAddr - source of the request
// 1669  * @param       StartIndex - where to start the return list
// 1670  * @param       SecurityUse -
// 1671  *
// 1672  * @return      none
// 1673  */
// 1674 void ZDO_ProcessMgmtLqiReq( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
// 1675 {
// 1676   byte x;
// 1677   byte index;
// 1678   byte numItems;
// 1679   byte maxItems;
// 1680   ZDP_MgmtLqiItem_t* table;
// 1681   ZDP_MgmtLqiItem_t* item;
// 1682   neighborEntry_t    entry;
// 1683   byte aItems;
// 1684   associated_devices_t *aDevice;
// 1685 
// 1686   // Get the number of neighbor items
// 1687   NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
// 1688 
// 1689   // Get the number of associated items
// 1690   aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
// 1691   // Total number of items
// 1692   maxItems += aItems;
// 1693 
// 1694   // Start with the supplied index
// 1695   numItems = maxItems - StartIndex;
// 1696 
// 1697   // limit the size of the list
// 1698   if ( numItems > ZDO_MAX_LQI_ITEMS )
// 1699     numItems = ZDO_MAX_LQI_ITEMS;
// 1700 
// 1701   // Allocate the memory to build the table
// 1702   table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
// 1703             ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
// 1704 
// 1705   if ( table != NULL )
// 1706   {
// 1707     x = 0;
// 1708     item = table;
// 1709     index = StartIndex;
// 1710 
// 1711     // Loop through associated items and build list
// 1712     for ( ; x < numItems; x++ )
// 1713     {
// 1714       if ( index < aItems )
// 1715       {
// 1716         // get next associated device
// 1717         aDevice = AssocFindDevice( index++ );
// 1718 
// 1719         // set basic fields
// 1720         item->panID   = _NIB.nwkPanId;
// 1721         osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
// 1722         item->nwkAddr = aDevice->shortAddr;
// 1723         item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
// 1724         item->depth   = 0xFF;
// 1725         item->lqi     = aDevice->linkInfo.rxCost;
// 1726 
// 1727         osal_memset( item->extAddr, 0x00, Z_EXTADDR_LEN );
// 1728 
// 1729         // use association info to set other fields
// 1730         if ( aDevice->nodeRelation == PARENT )
// 1731         {
// 1732           if (  aDevice->shortAddr == 0 )
// 1733           {
// 1734             item->devType = ZDP_MGMT_DT_COORD;
// 1735           }
// 1736           else
// 1737           {
// 1738             item->devType = ZDP_MGMT_DT_ROUTER;
// 1739           }
// 1740 
// 1741           item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
// 1742           item->relation = ZDP_MGMT_REL_PARENT;
// 1743         }
// 1744         else
// 1745         {
// 1746           if ( aDevice->nodeRelation < CHILD_FFD )
// 1747           {
// 1748             item->devType = ZDP_MGMT_DT_ENDDEV;
// 1749 
// 1750             if ( aDevice->nodeRelation == CHILD_RFD )
// 1751             {
// 1752               item->rxOnIdle = FALSE;
// 1753             }
// 1754             else
// 1755             {
// 1756               item->rxOnIdle = TRUE;
// 1757             }
// 1758           }
// 1759           else
// 1760           {
// 1761             item->devType = ZDP_MGMT_DT_ROUTER;
// 1762 
// 1763             if ( aDevice->nodeRelation == CHILD_FFD )
// 1764             {
// 1765               item->rxOnIdle = FALSE;
// 1766             }
// 1767             else
// 1768             {
// 1769               item->rxOnIdle = TRUE;
// 1770             }
// 1771           }
// 1772 
// 1773           item->relation = ZDP_MGMT_REL_CHILD;
// 1774         }
// 1775 
// 1776         item++;
// 1777       }
// 1778       else
// 1779       {
// 1780         if ( StartIndex <= aItems )
// 1781           // Start with 1st neighbor
// 1782           index = 0;
// 1783         else
// 1784           // Start with >1st neighbor
// 1785           index = StartIndex - aItems;
// 1786         break;
// 1787       }
// 1788     }
// 1789 
// 1790     // Loop through neighbor items and finish list
// 1791     for ( ; x < numItems; x++ )
// 1792     {
// 1793       // Add next neighbor table item
// 1794       NLME_GetRequest( nwkNeighborTable, index++, &entry );
// 1795 
// 1796       // set ZDP_MgmtLqiItem_t fields
// 1797       item->panID    = entry.panId;
// 1798       osal_memset( item->extPanID, 0x00, Z_EXTADDR_LEN);
// 1799       osal_memset( item->extAddr, 0x00, Z_EXTADDR_LEN );
// 1800       item->nwkAddr  = entry.neighborAddress;
// 1801       item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
// 1802       item->relation = ZDP_MGMT_REL_UNKNOWN;
// 1803       item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
// 1804       item->depth    = 0xFF;
// 1805       item->lqi      = entry.linkInfo.rxCost;
// 1806 
// 1807       if ( item->nwkAddr == 0 )
// 1808       {
// 1809         item->devType = ZDP_MGMT_DT_COORD;
// 1810       }
// 1811       else
// 1812       {
// 1813         item->devType = ZDP_MGMT_DT_ROUTER;
// 1814       }
// 1815 
// 1816       item++;
// 1817     }
// 1818 
// 1819     // Send response
// 1820     ZDP_MgmtLqiRsp( TransSeq, SrcAddr, ZSuccess, maxItems,
// 1821                     StartIndex, numItems, table, false );
// 1822 
// 1823     osal_mem_free( table );
// 1824   }
// 1825 }
// 1826 #endif // ZDO_MGMT_LQI_RESPONSE && RTR_NWK
// 1827 
// 1828 #if defined ( ZDO_MGMT_LQI_REQUEST )
// 1829 /*********************************************************************
// 1830  * @fn          ZDO_ProcessMgmtLqiRsp
// 1831  *
// 1832  * @brief       This function handles parsing the incoming Management
// 1833  *              LQI response and then generates a callback to the ZD
// 1834  *              application.
// 1835  *
// 1836  * @param       SrcAddr - source of the request
// 1837  * @param       msg - buffer holding incoming message to parse
// 1838  * @param       SecurityUse -
// 1839  *
// 1840  * @return      none
// 1841  */
// 1842 void ZDO_ProcessMgmtLqiRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 1843 {
// 1844   byte x;
// 1845   byte status;
// 1846   byte startIndex = 0;
// 1847   byte neighborLqiCount = 0;
// 1848   byte neighborLqiEntries = 0;
// 1849   neighborLqiItem_t *list = NULL;
// 1850   byte proVer = NLME_GetProtocolVersion();
// 1851 
// 1852   status = *msg++;
// 1853   if ( status == ZSuccess )
// 1854   {
// 1855     neighborLqiEntries = *msg++;
// 1856     startIndex = *msg++;
// 1857     neighborLqiCount = *msg++;
// 1858 
// 1859     // Allocate a buffer big enough to handle the list.
// 1860     list = (neighborLqiItem_t *)osal_mem_alloc( neighborLqiCount *
// 1861                                         sizeof( neighborLqiItem_t ) );
// 1862     if ( list )
// 1863     {
// 1864       neighborLqiItem_t *pList = list;
// 1865 
// 1866       for ( x = 0; x < neighborLqiCount; x++ )
// 1867       {
// 1868         if ( proVer == ZB_PROT_V1_0 )
// 1869         {
// 1870           pList->PANId = BUILD_UINT16( msg[0], msg[1] );
// 1871           msg += 2;
// 1872         }
// 1873         else
// 1874         {
// 1875           osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
// 1876           msg += Z_EXTADDR_LEN;
// 1877         }
// 1878 
// 1879         msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
// 1880         pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
// 1881         if ( proVer == ZB_PROT_V1_0 )
// 1882           msg += 2 + 1 + 1;          // Skip DeviceType, RxOnIdle, Relationship, PermitJoinging and Depth
// 1883         else
// 1884           msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
// 1885 
// 1886         pList->rxLqi = *msg++;
// 1887         pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
// 1888         pList++;
// 1889       }
// 1890     }
// 1891   }
// 1892 
// 1893   // Call the callback to the application.
// 1894   ZDApp_MgmtLqiRspCB( SrcAddr->addr.shortAddr, status, neighborLqiEntries,
// 1895                       startIndex, neighborLqiCount, list );
// 1896 
// 1897   if ( list )
// 1898   {
// 1899     osal_mem_free( list );
// 1900   }
// 1901 }
// 1902 #endif // ZDO_MGMT_LQI_REQUEST
// 1903 
// 1904 #if defined( ZDO_MGMT_NWKDISC_RESPONSE )
// 1905 /*********************************************************************
// 1906  * @fn          ZDO_ProcessMgmtNwkDiscReq
// 1907  *
// 1908  * @brief       This function handles parsing the incoming Management
// 1909  *              Network Discover request and starts the request.
// 1910  *
// 1911  * @param       SrcAddr - source of the request
// 1912  * @param       msg - pointer to incoming message
// 1913  * @param       SecurityUse -
// 1914  *
// 1915  * @return      none
// 1916  */
// 1917 void ZDO_ProcessMgmtNwkDiscReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 1918 {
// 1919   NLME_ScanFields_t scan;
// 1920   uint8             index;
// 1921 
// 1922   scan.channels = BUILD_UINT32( msg[0], msg[1], msg[2], msg[3] );
// 1923   msg += 4;
// 1924   scan.duration = *msg++;
// 1925   index         = *msg;
// 1926 
// 1927   // Save off the information to be used for the response
// 1928   zdappMgmtNwkDiscReqInProgress          = true;
// 1929   zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
// 1930   zdappMgmtNwkDiscRspAddr.addr.shortAddr = SrcAddr->addr.shortAddr;
// 1931   zdappMgmtNwkDiscStartIndex             = index;
// 1932   zdappMgmtNwkDiscRspTransSeq            = TransSeq;
// 1933 
// 1934   if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
// 1935   {
// 1936     NLME_NwkDiscTerm();
// 1937 
// 1938     // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
// 1939   }
// 1940 }
// 1941 #endif // ZDO_MGMT_NWKDISC_RESPONSE
// 1942 
// 1943 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1944 /*********************************************************************
// 1945  * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
// 1946  *
// 1947  * @brief       This function finishes the processing of the Management
// 1948  *              Network Discover Request and generates the response.
// 1949  *
// 1950  *   Note:      This function will limit the number of items returned
// 1951  *              to ZDO_MAX_NWKDISC_ITEMS items.
// 1952  *
// 1953  * @param       ResultCountSrcAddr - source of the request
// 1954  * @param       msg - pointer to incoming message
// 1955  * @param       SecurityUse -
// 1956  *
// 1957  * @return      none
// 1958  */
// 1959 void ZDO_FinishProcessingMgmtNwkDiscReq( byte ResultCount,
// 1960                                          networkDesc_t *NetworkList )
// 1961 {
// 1962   byte count;
// 1963 
// 1964 #if defined ( RTR_NWK )
// 1965   networkDesc_t *newDesc, *pList = NetworkList;
// 1966 
// 1967   // Look for my PanID.
// 1968   while ( pList )
// 1969   {
// 1970     if ( pList->panId == _NIB.nwkPanId )
// 1971     {
// 1972       break;
// 1973     }
// 1974 
// 1975     if ( !pList->nextDesc )
// 1976     {
// 1977       break;
// 1978     }
// 1979     pList = pList->nextDesc;
// 1980   }
// 1981 
// 1982   // If my Pan not present (query to a star network ZC or an isolated ZR?),
// 1983   // prepend it.
// 1984   if ( !pList || (pList->panId != _NIB.nwkPanId) )
// 1985   {
// 1986     newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
// 1987     if ( newDesc )
// 1988     {
// 1989       byte pJoin;
// 1990 
// 1991       newDesc->panId = _NIB.nwkPanId;
// 1992       newDesc->logicalChannel = _NIB.nwkLogicalChannel;
// 1993       newDesc->beaconOrder = _NIB.beaconOrder;
// 1994       newDesc->superFrameOrder = _NIB.superFrameOrder;
// 1995       newDesc->version = NLME_GetProtocolVersion();
// 1996       newDesc->stackProfile = zgStackProfile;
// 1997       //Extended PanID
// 1998       osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
// 1999 
// 2000       ZMacGetReq( ZMacAssociationPermit, &pJoin );
// 2001       newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
// 2002                                          INVALID_NODE_ADDR);
// 2003 
// 2004       newDesc->nextDesc = NetworkList;
// 2005       NetworkList = newDesc;
// 2006       ResultCount++;
// 2007     }
// 2008   }
// 2009 #endif
// 2010 
// 2011   // Calc the count and apply a max count.
// 2012   if ( zdappMgmtNwkDiscStartIndex > ResultCount )
// 2013   {
// 2014     count = 0;
// 2015   }
// 2016   else
// 2017   {
// 2018     count = ResultCount - zdappMgmtNwkDiscStartIndex;
// 2019     if ( count > ZDO_MAX_NWKDISC_ITEMS )
// 2020     {
// 2021       count = ZDO_MAX_NWKDISC_ITEMS;
// 2022     }
// 2023 
// 2024     // Move the list pointer up to the start index.
// 2025     NetworkList += zdappMgmtNwkDiscStartIndex;
// 2026   }
// 2027 
// 2028   ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
// 2029                      &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
// 2030                       zdappMgmtNwkDiscStartIndex,
// 2031                       count,
// 2032                       NetworkList,
// 2033                       false );
// 2034 
// 2035 #if defined ( RTR_NWK )
// 2036   if ( newDesc )
// 2037   {
// 2038     osal_mem_free( newDesc );
// 2039   }
// 2040 #endif
// 2041 
// 2042   NLME_NwkDiscTerm();
// 2043 }
// 2044 #endif
// 2045 
// 2046 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
// 2047 /*********************************************************************
// 2048  * @fn          ZDO_ProcessMgmNwkDiscRsp
// 2049  *
// 2050  * @brief       This function handles parsing the incoming Management
// 2051  *              Network Discover response and then generates a callback
// 2052  *              to the ZD application.
// 2053  *
// 2054  * @param       SrcAddr - source of the request
// 2055  * @param       msg - buffer holding incoming message to parse
// 2056  * @param       SecurityUse -
// 2057  *
// 2058  * @return      none
// 2059  */
// 2060 void ZDO_ProcessMgmNwkDiscRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2061 {
// 2062   byte x;
// 2063   byte status;
// 2064   byte networkCount = 0;
// 2065   byte startIndex = 0;
// 2066   byte networkListCount = 0;
// 2067   mgmtNwkDiscItem_t *list = NULL;
// 2068 
// 2069   byte proVer = NLME_GetProtocolVersion();
// 2070 
// 2071   status = *msg++;
// 2072   if ( status == ZSuccess )
// 2073   {
// 2074     networkCount = *msg++;
// 2075     startIndex = *msg++;
// 2076     networkListCount = *msg++;
// 2077 
// 2078     // Allocate a buffer big enough to handle the list.
// 2079     list = (mgmtNwkDiscItem_t *)osal_mem_alloc( networkListCount *
// 2080                                         sizeof( mgmtNwkDiscItem_t ) );
// 2081     if ( list )
// 2082     {
// 2083       mgmtNwkDiscItem_t *pList = list;
// 2084       for ( x = 0; x < networkListCount; x++ )
// 2085       {
// 2086         if ( proVer == ZB_PROT_V1_0 )  //Version 1.0
// 2087         {
// 2088           pList->PANId = BUILD_UINT16( msg[0], msg[1] );
// 2089           msg += 2;
// 2090         }
// 2091         else
// 2092         {
// 2093           osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
// 2094           pList->PANId = BUILD_UINT16( msg[0], msg[1] );
// 2095           msg += Z_EXTADDR_LEN;
// 2096 
// 2097         }
// 2098         pList->logicalChannel = *msg++;
// 2099         pList->stackProfile = (*msg) & 0x0F;
// 2100         pList->version = (*msg++ >> 4) & 0x0F;
// 2101         pList->beaconOrder = (*msg) & 0x0F;
// 2102         pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
// 2103         pList->permitJoining = *msg++;
// 2104         pList++;
// 2105       }
// 2106     }
// 2107   }
// 2108 
// 2109   // Call the callback to the application.
// 2110   ZDApp_MgmtNwkDiscRspCB( SrcAddr->addr.shortAddr, status, networkCount,
// 2111                           startIndex, networkListCount, list );
// 2112 
// 2113   if ( list )
// 2114   {
// 2115     osal_mem_free( list );
// 2116   }
// 2117 }
// 2118 #endif // ZDO_MGMT_NWKDISC_REQUEST
// 2119 
// 2120 #if defined ( ZDO_MGMT_RTG_RESPONSE ) && defined ( RTR_NWK )
// 2121 /*********************************************************************
// 2122  * @fn          ZDO_ProcessMgmtRtgReq
// 2123  *
// 2124  * @brief       This function finishes the processing of the Management
// 2125  *              Routing Request and generates the response.
// 2126  *
// 2127  *   Note:      This function will limit the number of items returned
// 2128  *              to ZDO_MAX_RTG_ITEMS items.
// 2129  *
// 2130  * @param       ResultCountSrcAddr - source of the request
// 2131  * @param       msg - pointer to incoming message
// 2132  * @param       SecurityUse -
// 2133  *
// 2134  * @return      none
// 2135  */
// 2136 void ZDO_ProcessMgmtRtgReq( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
// 2137 {
// 2138   byte x;
// 2139   byte maxNumItems;
// 2140   byte numItems;
// 2141   byte *pBuf;
// 2142   rtgItem_t *pList;
// 2143 
// 2144   // Get the number of table items
// 2145   NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
// 2146 
// 2147   numItems = maxNumItems - StartIndex;    // Start at the passed in index
// 2148 
// 2149   // limit the size of the list
// 2150   if ( numItems > ZDO_MAX_RTG_ITEMS )
// 2151     numItems = ZDO_MAX_RTG_ITEMS;
// 2152 
// 2153   // Allocate the memory to build the table
// 2154   pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
// 2155 
// 2156   if ( pBuf )
// 2157   {
// 2158     // Convert buffer to list
// 2159     pList = (rtgItem_t *)pBuf;
// 2160 
// 2161     // Loop through items and build list
// 2162     for ( x = 0; x < numItems; x++ )
// 2163     {
// 2164       NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
// 2165 
// 2166       // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
// 2167       switch( pList->status )
// 2168       {
// 2169         case RT_ACTIVE:
// 2170           pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
// 2171           break;
// 2172 
// 2173         case RT_DISC:
// 2174           pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
// 2175           break;
// 2176 
// 2177         case RT_LINK_FAIL:
// 2178           pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
// 2179 
// 2180         case RT_INIT:
// 2181         case RT_REPAIR:
// 2182         default:
// 2183           pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
// 2184           break;
// 2185       }
// 2186 
// 2187       // Increment pointer to next record
// 2188       pList++;
// 2189     }
// 2190 
// 2191     // Send response
// 2192     ZDP_MgmtRtgRsp( TransSeq, SrcAddr, ZSuccess, maxNumItems, StartIndex, numItems,
// 2193                           (rtgItem_t *)pBuf, false );
// 2194 
// 2195     osal_mem_free( pBuf );
// 2196   }
// 2197 }
// 2198 #endif // defined(ZDO_MGMT_RTG_RESPONSE)  && defined(RTR_NWK)
// 2199 
// 2200 #if defined ( ZDO_MGMT_RTG_REQUEST )
// 2201 /*********************************************************************
// 2202  * @fn          ZDO_ProcessMgmtRtgRsp
// 2203  *
// 2204  * @brief       This function handles parsing the incoming Management
// 2205  *              Routing response and then generates a callback
// 2206  *              to the ZD application.
// 2207  *
// 2208  * @param       SrcAddr - source of the request
// 2209  * @param       msg - buffer holding incoming message to parse
// 2210  * @param       SecurityUse -
// 2211  *
// 2212  * @return      none
// 2213  */
// 2214 void ZDO_ProcessMgmtRtgRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2215 {
// 2216   byte x;
// 2217   byte status;
// 2218   byte rtgCount = 0;
// 2219   byte startIndex = 0;
// 2220   byte rtgListCount = 0;
// 2221   byte *pBuf = NULL;
// 2222   rtgItem_t *pList = NULL;
// 2223 
// 2224   status = *msg++;
// 2225   if ( status == ZSuccess )
// 2226   {
// 2227     rtgCount = *msg++;
// 2228     startIndex = *msg++;
// 2229     rtgListCount = *msg++;
// 2230 
// 2231     // Allocate a buffer big enough to handle the list
// 2232     pBuf = osal_mem_alloc( rtgListCount * sizeof( rtgItem_t ) );
// 2233     if ( pBuf )
// 2234     {
// 2235       pList = (rtgItem_t *)pBuf;
// 2236       for ( x = 0; x < rtgListCount; x++ )
// 2237       {
// 2238         pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
// 2239         msg += 2;
// 2240         pList->status = *msg++;
// 2241         pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
// 2242         msg += 2;
// 2243         pList++;
// 2244       }
// 2245     }
// 2246   }
// 2247 
// 2248   // Call the callback to the application.
// 2249   ZDApp_MgmtRtgRspCB( SrcAddr->addr.shortAddr, status, rtgCount,
// 2250                                  startIndex, rtgListCount, (rtgItem_t *)pBuf );
// 2251 
// 2252   if ( pBuf )
// 2253   {
// 2254     osal_mem_free( pBuf );
// 2255   }
// 2256 }
// 2257 #endif // ZDO_MGMT_RTG_REQUEST
// 2258 
// 2259 #if defined ( ZDO_MGMT_BIND_RESPONSE )
// 2260 /*********************************************************************
// 2261  * @fn          ZDO_ProcessMgmtBindReq
// 2262  *
// 2263  * @brief       This function finishes the processing of the Management
// 2264  *              Bind Request and generates the response.
// 2265  *
// 2266  *   Note:      This function will limit the number of items returned
// 2267  *              to ZDO_MAX_BIND_ITEMS items.
// 2268  *
// 2269  * @param       ResultCountSrcAddr - source of the request
// 2270  * @param       msg - pointer to incoming message
// 2271  * @param       SecurityUse -
// 2272  *
// 2273  * @return      none
// 2274  */
// 2275 void ZDO_ProcessMgmtBindReq( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
// 2276 {
// 2277 #if defined ( REFLECTOR )
// 2278   byte x;
// 2279   uint16 maxNumItems;
// 2280   uint16 numItems;
// 2281   byte *pBuf = NULL;
// 2282   apsBindingItem_t *pList;
// 2283 
// 2284   // Get the number of table items
// 2285   APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
// 2286 
// 2287   if ( maxNumItems > StartIndex )
// 2288     numItems = maxNumItems - StartIndex;    // Start at the passed in index
// 2289   else
// 2290     numItems = 0;
// 2291 
// 2292   // limit the size of the list
// 2293   if ( numItems > ZDO_MAX_BIND_ITEMS )
// 2294     numItems = ZDO_MAX_BIND_ITEMS;
// 2295 
// 2296   // Allocate the memory to build the table
// 2297   if ( numItems )
// 2298     pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems );
// 2299 
// 2300   if ( pBuf )
// 2301   {
// 2302     // Convert buffer to list
// 2303     pList = (apsBindingItem_t *)pBuf;
// 2304 
// 2305     // Loop through items and build list
// 2306     for ( x = 0; x < numItems; x++ )
// 2307     {
// 2308       APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
// 2309       pList++;
// 2310     }
// 2311   }
// 2312 
// 2313   // Send response
// 2314   ZDP_MgmtBindRsp( TransSeq, SrcAddr, ZSuccess, (byte)maxNumItems, StartIndex, (byte)numItems,
// 2315                         (apsBindingItem_t *)pBuf, false );
// 2316 
// 2317   if ( pBuf )
// 2318   {
// 2319     osal_mem_free( pBuf );
// 2320   }
// 2321 #else  // See if app support is needed
// 2322 
// 2323   ZDApp_MgmtBindReqCB( TransSeq, SrcAddr, StartIndex, SecurityUse );
// 2324 
// 2325 #endif
// 2326 }
// 2327 #endif // ZDO_MGMT_BIND_RESPONSE
// 2328 
// 2329 #if defined ( ZDO_MGMT_BIND_REQUEST )
// 2330 /*********************************************************************
// 2331  * @fn          ZDO_ProcessMgmtBindRsp
// 2332  *
// 2333  * @brief       This function handles parsing the incoming Management
// 2334  *              Binding response and then generates a callback
// 2335  *              to the ZD application.
// 2336  *
// 2337  * @param       SrcAddr - source of the request
// 2338  * @param       msg - buffer holding incoming message to parse
// 2339  * @param       SecurityUse -
// 2340  *
// 2341  * @return      none
// 2342  */
// 2343 void ZDO_ProcessMgmtBindRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2344 {
// 2345   byte x;
// 2346   byte status;
// 2347   byte bindingCount = 0;
// 2348   byte startIndex = 0;
// 2349   byte bindingListCount = 0;
// 2350   byte *pBuf = NULL;
// 2351   apsBindingItem_t *pList = NULL;
// 2352 
// 2353   status = *msg++;
// 2354   if ( status == ZSuccess )
// 2355   {
// 2356     bindingCount = *msg++;
// 2357     startIndex = *msg++;
// 2358     bindingListCount = *msg++;
// 2359 
// 2360     // Allocate a buffer big enough to handle the list
// 2361     if ( bindingListCount )
// 2362       pBuf = osal_mem_alloc( (short)(bindingListCount * sizeof( apsBindingItem_t )) );
// 2363     if ( pBuf )
// 2364     {
// 2365       pList = (apsBindingItem_t *)pBuf;
// 2366       for ( x = 0; x < bindingListCount; x++ )
// 2367       {
// 2368         osal_cpyExtAddr( pList->srcAddr, msg );
// 2369         msg += Z_EXTADDR_LEN;
// 2370         pList->srcEP = *msg++;
// 2371 
// 2372         // Get the Cluster ID
// 2373         if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
// 2374         {
// 2375           pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
// 2376           msg += 2;
// 2377           pList->dstAddr.addrMode = *msg++;
// 2378           if ( pList->dstAddr.addrMode == Addr64Bit )
// 2379           {
// 2380             osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
// 2381             msg += Z_EXTADDR_LEN;
// 2382             pList->dstEP = *msg++;
// 2383           }
// 2384           else
// 2385           {
// 2386             pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
// 2387             msg += 2;
// 2388           }
// 2389         }
// 2390         else
// 2391         {
// 2392           pList->clusterID = *msg++;
// 2393 
// 2394           osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
// 2395           msg += Z_EXTADDR_LEN;
// 2396           pList->dstEP = *msg++;
// 2397         }
// 2398 
// 2399         pList++;
// 2400       }
// 2401     }
// 2402   }
// 2403 
// 2404   // Call the callback to the application
// 2405   ZDApp_MgmtBindRspCB( SrcAddr->addr.shortAddr, status, bindingCount,
// 2406                     startIndex, bindingListCount, (apsBindingItem_t *)pBuf );
// 2407 
// 2408   if ( pBuf )
// 2409       osal_mem_free( pBuf );
// 2410 }
// 2411 #endif // ZDO_MGMT_BIND_REQUEST
// 2412 
// 2413 #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && defined ( RTR_NWK )
// 2414 /*********************************************************************
// 2415  * @fn          ZDO_ProcessMgmtDirectJoinReq
// 2416  *
// 2417  * @brief       This function finishes the processing of the Management
// 2418  *              Direct Join Request and generates the response.
// 2419  *
// 2420  * @param       SrcAddr - source of the request
// 2421  * @param       msg - pointer to incoming message
// 2422  * @param       SecurityUse -
// 2423  *
// 2424  * @return      none
// 2425  */
// 2426 void ZDO_ProcessMgmtDirectJoinReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2427 {
// 2428   byte *deviceAddr;
// 2429   byte capInfo;
// 2430   byte stat;
// 2431 
// 2432   // Parse the message
// 2433   deviceAddr = msg;
// 2434   capInfo = msg[Z_EXTADDR_LEN];
// 2435 
// 2436   stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
// 2437 
// 2438   ZDP_MgmtDirectJoinRsp( TransSeq, SrcAddr, stat, false );
// 2439 }
// 2440 #endif // ZDO_MGMT_JOINDIRECT_RESPONSE && RTR_NWK
// 2441 
// 2442 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
// 2443 /*********************************************************************
// 2444  * @fn          ZDO_ProcessMgmtDirectJoinRsp
// 2445  *
// 2446  * @brief       This function handles parsing the incoming Management
// 2447  *              Direct Join response and then generates a callback
// 2448  *              to the ZD application.
// 2449  *
// 2450  * @param       SrcAddr - source of the request
// 2451  * @param       Status - ZSuccess or other for failure
// 2452  * @param       SecurityUse -
// 2453  *
// 2454  * @return      none
// 2455  */
// 2456 void ZDO_ProcessMgmtDirectJoinRsp( zAddrType_t *SrcAddr, byte Status, byte SecurityUse )
// 2457 {
// 2458   // Call the callback to the application
// 2459   ZDApp_MgmtDirectJoinRspCB( SrcAddr->addr.shortAddr, Status, SecurityUse );
// 2460 }
// 2461 #endif // ZDO_MGMT_JOINDIRECT_REQUEST
// 2462 
// 2463 #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
// 2464 /*********************************************************************
// 2465  * @fn          ZDO_ProcessMgmtLeaveReq
// 2466  *
// 2467  * @brief       This function processes a Management Leave Request
// 2468  *              and generates the response.
// 2469  *
// 2470  * @param       SrcAddr - source of the request
// 2471  * @param       msg - pointer to incoming message
// 2472  * @param       SecurityUse -
// 2473  *
// 2474  * @return      none
// 2475  */
// 2476 void ZDO_ProcessMgmtLeaveReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2477 {
// 2478   NLME_LeaveReq_t req;
// 2479   ZStatus_t       status;
// 2480 
// 2481 
// 2482   if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
// 2483        ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
// 2484   {
// 2485     // Remove this device
// 2486     req.extAddr = NULL;
// 2487   }
// 2488   else
// 2489   {
// 2490     // Remove child device
// 2491     req.extAddr = msg;
// 2492   }
// 2493 
// 2494   req.removeChildren = FALSE;
// 2495   req.rejoin         = FALSE;
// 2496   req.silent         = FALSE;
// 2497 
// 2498   status = NLME_LeaveReq( &req );
// 2499 
// 2500   ZDP_MgmtLeaveRsp( TransSeq, SrcAddr, status, FALSE );
// 2501 }
// 2502 #endif // ZDO_MGMT_LEAVE_RESPONSE
// 2503 
// 2504 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
// 2505 /*********************************************************************
// 2506  * @fn          ZDO_ProcessMgmtLeaveRsp
// 2507  *
// 2508  * @brief       This function handles a Management Leave Response
// 2509  *              and generates a callback to the ZD application.
// 2510  *
// 2511  * @param       SrcAddr - source of the request
// 2512  * @param       Status - ZSuccess or other for failure
// 2513  * @param       SecurityUse -
// 2514  *
// 2515  * @return      none
// 2516  */
// 2517 void ZDO_ProcessMgmtLeaveRsp( zAddrType_t *SrcAddr, byte Status, byte SecurityUse )
// 2518 {
// 2519   // Call the callback to the application
// 2520   ZDApp_MgmtLeaveRspCB( SrcAddr->addr.shortAddr, Status, SecurityUse );
// 2521 }
// 2522 #endif // ZDO_MGMT_LEAVE_REQUEST
// 2523 
// 2524 #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE ) && defined( RTR_NWK )
// 2525 /*********************************************************************
// 2526  * @fn          ZDO_ProcessMgmtPermitJoinReq
// 2527  *
// 2528  * @brief       This function processes a Management Permit Join Request
// 2529  *              and generates the response.
// 2530  *
// 2531  * @param       SrcAddr - source of the request
// 2532  * @param       msg - pointer to incoming message
// 2533  * @param       SecurityUse -
// 2534  *
// 2535  * @return      none
// 2536  */
// 2537 void ZDO_ProcessMgmtPermitJoinReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg,
// 2538                                    byte SecurityUse )
// 2539 {
// 2540   uint8 stat;
// 2541   uint8 duration;
// 2542   uint8 tcsig;
// 2543 
// 2544 
// 2545   duration = msg[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
// 2546   tcsig    = msg[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
// 2547 
// 2548   // Set the network layer permit join duration
// 2549   stat = (byte) NLME_PermitJoiningRequest( duration );
// 2550 
// 2551   // Handle the Trust Center Significance
// 2552   if ( tcsig == TRUE )
// 2553   {
// 2554     ZDSecMgrPermitJoining( duration );
// 2555   }
// 2556 
// 2557   // Send a response if unicast
// 2558   if (SrcAddr->addr.shortAddr != NWK_BROADCAST_SHORTADDR)
// 2559   {
// 2560     ZDP_MgmtPermitJoinRsp( TransSeq, SrcAddr, stat, false );
// 2561   }
// 2562 }
// 2563 #endif // ZDO_MGMT_PERMIT_JOIN_RESPONSE && defined( RTR_NWK )
// 2564 
// 2565 /*
// 2566  * This function stub allows the next higher layer to be notified of
// 2567  * a permit joining timeout.
// 2568  */
// 2569 #if defined( RTR_NWK )
// 2570 /*********************************************************************
// 2571  * @fn          ZDO_ProcessMgmtPermitJoinTimeout
// 2572  *
// 2573  * @brief       This function stub allows the next higher layer to be
// 2574  *              notified of a permit joining timeout. Currently, this
// 2575  *              directly bypasses the APS layer.
// 2576  *
// 2577  * @param       none
// 2578  *
// 2579  * @return      none
// 2580  */
// 2581 void ZDO_ProcessMgmtPermitJoinTimeout( void )
// 2582 {
// 2583   #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
// 2584   {
// 2585     // Currently, only the ZDSecMgr needs to be notified
// 2586     ZDSecMgrPermitJoiningTimeout();
// 2587   }
// 2588   #endif
// 2589 }
// 2590 #endif // defined( RTR_NWK )
// 2591 
// 2592 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
// 2593 /*********************************************************************
// 2594  * @fn          ZDO_ProcessMgmtPermitJoinRsp
// 2595  *
// 2596  * @brief       This function handles a Management Permit Join Response
// 2597  *              and generates a callback to the ZD application.
// 2598  *
// 2599  * @param       SrcAddr - source of the request
// 2600  * @param       Status - ZSuccess or other for failure
// 2601  * @param       SecurityUse -
// 2602  *
// 2603  * @return      none
// 2604  */
// 2605 void ZDO_ProcessMgmtPermitJoinRsp( zAddrType_t *SrcAddr, byte Status, byte SecurityUse )
// 2606 {
// 2607   // Call the callback to the application
// 2608   ZDApp_MgmtPermitJoinRspCB( SrcAddr->addr.shortAddr, Status, SecurityUse );
// 2609 }
// 2610 #endif // ZDO_MGMT_PERMIT_JOIN_REQUEST
// 2611 
// 2612 #if defined ( ZDO_USERDESC_REQUEST )
// 2613 /*********************************************************************
// 2614  * @fn          ZDO_ProcessUserDescRsp
// 2615  *
// 2616  * @brief       This function handles parsing the incoming User
// 2617  *              Descriptor Response and then generates a callback
// 2618  *              to the ZD application.
// 2619  *
// 2620  * @param       SrcAddr - source of the request
// 2621  * @param       msg - incoming response message
// 2622  * @param       SecurityUse -
// 2623  *
// 2624  * @return      none
// 2625  */
// 2626 void ZDO_ProcessUserDescRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2627 {
// 2628   ZDApp_UserDescRspCB( SrcAddr->addr.shortAddr,
// 2629                       msg[0],                           // Status
// 2630                       BUILD_UINT16( msg[1], msg[2] ),   // NWKAddrOfInterest
// 2631                       msg[3],                           // Length
// 2632                       &msg[4],                          // User Descriptor
// 2633                       SecurityUse );
// 2634 }
// 2635 #endif // ZDO_USERDESC_REQUEST
// 2636 
// 2637 #if defined ( ZDO_USERDESC_RESPONSE )
// 2638 /*********************************************************************
// 2639  * @fn          ZDO_ProcessUserDescReq
// 2640  *
// 2641  * @brief       This function finishes the processing of the User
// 2642  *              Descriptor Request and generates the response.
// 2643  *
// 2644  * @param       SrcAddr - source of the request
// 2645  * @param       msg - pointer to incoming message
// 2646  * @param       SecurityUse -
// 2647  *
// 2648  * @return      none
// 2649  */
// 2650 void ZDO_ProcessUserDescReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2651 {
// 2652   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
// 2653   UserDescriptorFormat_t userDesc;
// 2654 
// 2655   if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
// 2656              ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
// 2657   {
// 2658     ZDP_UserDescRsp( TransSeq, SrcAddr, aoi, &userDesc, false );
// 2659   }
// 2660   else
// 2661   {
// 2662 #if defined( ZDO_CACHE )
// 2663     (void)aoi;
// 2664 #else
// 2665     ZDP_GenericRsp(
// 2666        TransSeq, SrcAddr, ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, SecurityUse );
// 2667 #endif
// 2668   }
// 2669 }
// 2670 #endif // ZDO_USERDESC_RESPONSE
// 2671 
// 2672 #if defined ( ZDO_USERDESCSET_REQUEST )
// 2673 /*********************************************************************
// 2674  * @fn          ZDO_ProcessUserDescConf
// 2675  *
// 2676  * @brief       This function handles parsing the incoming User
// 2677  *              Descriptor Confirm and then generates a callback
// 2678  *              to the ZD application.
// 2679  *
// 2680  * @param       SrcAddr - source of the request
// 2681  * @param       msg - incoming response message
// 2682  * @param       SecurityUse -
// 2683  *
// 2684  * @return      none
// 2685  */
// 2686 void ZDO_ProcessUserDescConf( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2687 {
// 2688   ZDApp_UserDescConfCB( SrcAddr->addr.shortAddr,
// 2689                         msg[0],                           // Status
// 2690                         SecurityUse );
// 2691 }
// 2692 #endif // ZDO_USERDESCSET_REQUEST
// 2693 
// 2694 
// 2695 #if defined ( ZDO_USERDESCSET_RESPONSE )
// 2696 /*********************************************************************
// 2697  * @fn          ZDO_ProcessUserDescSet
// 2698  *
// 2699  * @brief       This function finishes the processing of the User
// 2700  *              Descriptor Set and generates the response.
// 2701  *
// 2702  * @param       SrcAddr - source of the request
// 2703  * @param       msg - pointer to incoming message
// 2704  * @param       SecurityUse -
// 2705  *
// 2706  * @return      none
// 2707  */
// 2708 void ZDO_ProcessUserDescSet( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2709 {
// 2710   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
// 2711   UserDescriptorFormat_t userDesc;
// 2712   uint8 outMsg[3];
// 2713   uint8 status;
// 2714   uint16 nai;
// 2715 
// 2716   nai = BUILD_UINT16( msg[0], msg[1] );
// 2717 
// 2718   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
// 2719   {
// 2720     if ( NLME_GetProtocolVersion() == ZB_PROT_V1_0 )
// 2721       userDesc.len = AF_MAX_USER_DESCRIPTOR_LEN;
// 2722     else
// 2723     {
// 2724       userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
// 2725       msg ++;  // increment one for the length field
// 2726     }
// 2727     osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
// 2728     osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
// 2729     if ( userDesc.len != 0 )
// 2730     {
// 2731       ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
// 2732     }
// 2733     else
// 2734     {
// 2735       ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
// 2736     }
// 2737 
// 2738     status = ZDP_SUCCESS;
// 2739   }
// 2740   else
// 2741   {
// 2742     status =  ZDP_NOT_SUPPORTED;
// 2743   }
// 2744 
// 2745   outMsg[0] = status;
// 2746   outMsg[1] = LO_UINT16( nai );
// 2747   outMsg[2] = LO_UINT16( nai );
// 2748 
// 2749   ZDP_SendData( &TransSeq, SrcAddr, User_Desc_conf, 3, outMsg, SecurityUse );
// 2750 }
// 2751 #endif // ZDO_USERDESCSET_RESPONSE
// 2752 
// 2753 #if defined ( ZDO_ENDDEVICE_ANNCE ) && defined(RTR_NWK)
// 2754 /*********************************************************************
// 2755  * @fn          ZDO_ProcessEndDeviceAnnce
// 2756  *
// 2757  * @brief       This function processes an end device annouce message.
// 2758  *
// 2759  * @param       SrcAddr - source of the request
// 2760  * @param       msg - pointer to incoming message
// 2761  * @param       SecurityUse -
// 2762  *
// 2763  * @return      none
// 2764  */
// 2765 void ZDO_ProcessEndDeviceAnnce( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2766 {
// 2767   uint16 nwkAddr;
// 2768   associated_devices_t *dev;
// 2769   AddrMgrEntry_t addrEntry;
// 2770   uint8 *ieeeAddr;
// 2771   uint8 capabilities;
// 2772 
// 2773   // Parse incoming message
// 2774   nwkAddr = BUILD_UINT16( msg[0], msg[1] );
// 2775   msg += 2;
// 2776   ieeeAddr = msg;
// 2777   msg += Z_EXTADDR_LEN;
// 2778   if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
// 2779   {
// 2780     capabilities = *msg;
// 2781   }
// 2782   else
// 2783   {
// 2784     capabilities = 0;
// 2785   }
// 2786 
// 2787   addrEntry.user = ADDRMGR_USER_DEFAULT;
// 2788   addrEntry.nwkAddr = nwkAddr;
// 2789   AddrMgrExtAddrSet( addrEntry.extAddr, ieeeAddr );
// 2790   AddrMgrEntryUpdate( &addrEntry );
// 2791 
// 2792   // find device in device list
// 2793   dev = AssocGetWithExt( ieeeAddr );
// 2794   if ( dev != NULL )
// 2795   {
// 2796     // if found and address is different
// 2797     if ( dev->shortAddr != nwkAddr )
// 2798     {
// 2799       // update device list if device is (was) not our child
// 2800       if ( dev->nodeRelation == NEIGHBOR || dev->nodeRelation == OTHER )
// 2801       {
// 2802         dev->shortAddr = nwkAddr;
// 2803       }
// 2804     }
// 2805   }
// 2806 
// 2807   // Application notification
// 2808   ZDApp_EndDeviceAnnounceCB( SrcAddr->addr.shortAddr, nwkAddr, ieeeAddr, capabilities );
// 2809 }
// 2810 #endif // ZDO_ENDDEVICE_ANNCE
// 2811 
// 2812 #if defined( ZDO_SIMPLEDESC_REQUEST ) || ( defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 ) )
// 2813 /*********************************************************************
// 2814  * @fn          ZDO_BuildSimpleDescBuf
// 2815  *
// 2816  * @brief       Build a byte sequence representation of a Simple Descriptor.
// 2817  *
// 2818  * @param       buf  - pointer to a byte array big enough for data.
// 2819  * @param       desc - SimpleDescriptionFormat_t *
// 2820  *
// 2821  * @return      none
// 2822  */
// 2823 void ZDO_BuildSimpleDescBuf( byte *buf, SimpleDescriptionFormat_t *desc )
// 2824 {
// 2825   byte proVer = NLME_GetProtocolVersion();
// 2826   byte cnt;
// 2827   uint16 *ptr;
// 2828 
// 2829   *buf++ = desc->EndPoint;
// 2830   *buf++ = HI_UINT16( desc->AppProfId );
// 2831   *buf++ = LO_UINT16( desc->AppProfId );
// 2832   *buf++ = HI_UINT16( desc->AppDeviceId );
// 2833   *buf++ = LO_UINT16( desc->AppDeviceId );
// 2834 
// 2835   if ( proVer == ZB_PROT_V1_0 )
// 2836   {
// 2837     *buf++ = (byte)((desc->AppDevVer << 4) | (desc->Reserved));
// 2838   }
// 2839   else
// 2840   {
// 2841     *buf++ = (byte)(desc->AppDevVer << 4);
// 2842   }
// 2843 
// 2844   *buf++ = desc->AppNumInClusters;
// 2845   ptr = desc->pAppInClusterList;
// 2846   for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
// 2847   {
// 2848     *buf++ = HI_UINT16( *ptr );
// 2849     *buf++ = LO_UINT16( *ptr );
// 2850   }
// 2851 
// 2852   *buf++ = desc->AppNumOutClusters;
// 2853   ptr = desc->pAppOutClusterList;
// 2854   for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
// 2855   {
// 2856     *buf++ = HI_UINT16( *ptr );
// 2857     *buf++ = LO_UINT16( *ptr );
// 2858   }
// 2859 }
// 2860 
// 2861 /*********************************************************************
// 2862  * @fn          ZDO_ParseSimpleDescBuf
// 2863  *
// 2864  * @brief       Parse a byte sequence representation of a Simple Descriptor.
// 2865  *
// 2866  * @param       buf  - pointer to a byte array representing a Simple Desc.
// 2867  * @param       desc - SimpleDescriptionFormat_t *
// 2868  *
// 2869  *              This routine allocates storage for the cluster IDs because
// 2870  *              they are 16-bit and need to be aligned to be properly processed.
// 2871  *              This routine returns non-zero if an allocation fails.
// 2872  *
// 2873  *              NOTE: This means that the caller or user of the input structure
// 2874  *                    is responsible for freeing the memory
// 2875  *
// 2876  * @return      0: success
// 2877  *              1: failure due to malloc failure.
// 2878  */
// 2879 uint8 ZDO_ParseSimpleDescBuf( byte *buf, SimpleDescriptionFormat_t *desc )
// 2880 {
// 2881   byte proVer = NLME_GetProtocolVersion();
// 2882   uint8 num, i;
// 2883 
// 2884   desc->EndPoint = *buf++;
// 2885   desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
// 2886   buf += 2;
// 2887   desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
// 2888   buf += 2;
// 2889   desc->AppDevVer = *buf >> 4;
// 2890 
// 2891   if ( proVer == ZB_PROT_V1_0 )
// 2892   {
// 2893     desc->Reserved = *buf++ &0x0F;
// 2894   }
// 2895   else
// 2896   {
// 2897     desc->Reserved = 0;
// 2898     buf++;
// 2899   }
// 2900 
// 2901   // move in input cluster list (if any). allocate aligned memory.
// 2902   num = desc->AppNumInClusters = *buf++;
// 2903   if (num)  {
// 2904     if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))  {
// 2905       // malloc failed. we're done.
// 2906       return 1;
// 2907     }
// 2908     for (i=0; i<num; ++i)  {
// 2909       desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
// 2910       buf += 2;
// 2911     }
// 2912   }
// 2913 
// 2914   // move in output cluster list (if any). allocate aligned memory.
// 2915   num = desc->AppNumOutClusters = *buf++;
// 2916   if (num)  {
// 2917     if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))  {
// 2918       // malloc failed. free input cluster list memory if there is any
// 2919       if (desc->pAppInClusterList)  {
// 2920         osal_mem_free(desc->pAppInClusterList);
// 2921       }
// 2922       return 1;
// 2923     }
// 2924     for (i=0; i<num; ++i)  {
// 2925       desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
// 2926       buf += 2;
// 2927     }
// 2928   }
// 2929   return 0;
// 2930 }
// 2931 #endif
// 2932 
// 2933 #if defined ( ZDO_COORDINATOR )
// 2934 /*********************************************************************
// 2935  * @fn      ZDO_MatchEndDeviceBind()
// 2936  *
// 2937  * @brief
// 2938  *
// 2939  *   Called to match end device binding requests
// 2940  *
// 2941  * @param  bindReq  - binding request information
// 2942  * @param  SecurityUse - Security enable/disable
// 2943  *
// 2944  * @return  none
// 2945  */
// 2946 void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
// 2947 {
// 2948   zAddrType_t dstAddr;
// 2949   uint8 sendRsp = FALSE;
// 2950   uint8 status;
// 2951 
// 2952   // Is this the first request?
// 2953   if ( matchED == NULL )
// 2954   {
// 2955     // Create match info structure
// 2956     matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
// 2957     if ( matchED )
// 2958     {
// 2959       // Clear the structure
// 2960       osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
// 2961 
// 2962       // Copy the first request's information
// 2963       if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
// 2964       {
// 2965 
// 2966         status = ZDP_NO_ENTRY;
// 2967         sendRsp = TRUE;
// 2968       }
// 2969     }
// 2970     else
// 2971     {
// 2972       status = ZDP_NO_ENTRY;
// 2973       sendRsp = TRUE;
// 2974     }
// 2975 
// 2976     if ( !sendRsp )
// 2977     {
// 2978       // Set into the correct state
// 2979       matchED->state = ZDMATCH_WAIT_REQ;
// 2980 
// 2981       // Setup the timeout
// 2982       APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
// 2983     }
// 2984   }
// 2985   else
// 2986   {
// 2987       matchED->state = ZDMATCH_SENDING_BINDS;
// 2988 
// 2989       // Copy the 2nd request's information
// 2990       if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
// 2991       {
// 2992         status = ZDP_NO_ENTRY;
// 2993         sendRsp = TRUE;
// 2994       }
// 2995 
// 2996       // Make a source match for ed1
// 2997       matchED->ed1numMatched = ZDO_CompareClusterLists(
// 2998                   matchED->ed1.numOutClusters, matchED->ed1.outClusters,
// 2999                   matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
// 3000       if ( matchED->ed1numMatched )
// 3001       {
// 3002         // Save the match list
// 3003         matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
// 3004         if ( matchED->ed1Matched )
// 3005         {
// 3006           osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
// 3007         }
// 3008         else
// 3009         {
// 3010           // Allocation error, stop
// 3011           status = ZDP_NO_ENTRY;
// 3012           sendRsp = TRUE;
// 3013         }
// 3014       }
// 3015 
// 3016       // Make a source match for ed2
// 3017       matchED->ed2numMatched = ZDO_CompareClusterLists(
// 3018                   matchED->ed2.numOutClusters, matchED->ed2.outClusters,
// 3019                   matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
// 3020       if ( matchED->ed2numMatched )
// 3021       {
// 3022         // Save the match list
// 3023         matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
// 3024         if ( matchED->ed2Matched )
// 3025         {
// 3026           osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
// 3027         }
// 3028         else
// 3029         {
// 3030           // Allocation error, stop
// 3031           status = ZDP_NO_ENTRY;
// 3032           sendRsp = TRUE;
// 3033         }
// 3034       }
// 3035 
// 3036       if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
// 3037       {
// 3038         // Do the first unbind/bind state
// 3039         ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
// 3040       }
// 3041       else
// 3042       {
// 3043         status = ZDP_NO_MATCH;
// 3044         sendRsp = TRUE;
// 3045       }
// 3046   }
// 3047 
// 3048   if ( sendRsp )
// 3049   {
// 3050     // send response to this requester
// 3051     dstAddr.addrMode = Addr16Bit;
// 3052     dstAddr.addr.shortAddr = bindReq->srcAddr;
// 3053     ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
// 3054 
// 3055     if ( matchED->state == ZDMATCH_SENDING_BINDS )
// 3056     {
// 3057       // send response to first requester
// 3058       dstAddr.addrMode = Addr16Bit;
// 3059       dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
// 3060       ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
// 3061     }
// 3062 
// 3063     // Process ended - release memory used
// 3064     ZDO_RemoveMatchMemory();
// 3065   }
// 3066 }
// 3067 
// 3068 static void ZDO_RemoveMatchMemory( void )
// 3069 {
// 3070   if ( matchED )
// 3071   {
// 3072     if ( matchED->ed2Matched )
// 3073       osal_mem_free( matchED->ed2Matched );
// 3074     if ( matchED->ed1Matched )
// 3075       osal_mem_free( matchED->ed1Matched );
// 3076 
// 3077     if ( matchED->ed1.inClusters )
// 3078       osal_mem_free( matchED->ed1.inClusters );
// 3079 
// 3080     if ( matchED->ed1.outClusters )
// 3081       osal_mem_free( matchED->ed1.outClusters );
// 3082 
// 3083     if ( matchED->ed2.inClusters )
// 3084       osal_mem_free( matchED->ed2.inClusters );
// 3085 
// 3086     if ( matchED->ed2.outClusters )
// 3087       osal_mem_free( matchED->ed2.outClusters );
// 3088 
// 3089     osal_mem_free( matchED );
// 3090 
// 3091     matchED = (ZDMatchEndDeviceBind_t *)NULL;
// 3092   }
// 3093 }
// 3094 
// 3095 static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
// 3096 {
// 3097   uint8 allOK = TRUE;
// 3098 
// 3099   // Copy bind information into the match info structure
// 3100   osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
// 3101 
// 3102   // Copy input cluster IDs
// 3103   if ( srcReq->numInClusters )
// 3104   {
// 3105     destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
// 3106     if ( destReq->inClusters )
// 3107     {
// 3108       // Copy the clusters
// 3109       osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
// 3110                       (srcReq->numInClusters * sizeof ( uint16 )) );
// 3111     }
// 3112     else
// 3113       allOK = FALSE;
// 3114   }
// 3115 
// 3116   // Copy output cluster IDs
// 3117   if ( srcReq->numOutClusters )
// 3118   {
// 3119     destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
// 3120     if ( destReq->outClusters )
// 3121     {
// 3122       // Copy the clusters
// 3123       osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
// 3124                       (srcReq->numOutClusters * sizeof ( uint16 )) );
// 3125     }
// 3126     else
// 3127       allOK = FALSE;
// 3128   }
// 3129 
// 3130   if ( !allOK )
// 3131   {
// 3132     if ( destReq->inClusters )
// 3133       osal_mem_free( destReq->inClusters );
// 3134     if ( destReq->outClusters )
// 3135       osal_mem_free( destReq->outClusters );
// 3136   }
// 3137 
// 3138   return ( allOK );
// 3139 }
// 3140 
// 3141 static uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
// 3142 {
// 3143   uint8 *dstIEEEAddr;
// 3144   uint8 dstEP;
// 3145   zAddrType_t dstAddr;
// 3146   zAddrType_t destinationAddr;
// 3147   uint16 msgType;
// 3148   uint16 clusterID;
// 3149   ZDEndDeviceBind_t *ed = NULL;
// 3150   uint8 rspStatus = ZDP_SUCCESS;
// 3151 
// 3152   if ( matchED == NULL )
// 3153     return ( FALSE );
// 3154 
// 3155   // Check sequence number
// 3156   if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
// 3157   {
// 3158     if ( TransSeq != matchED->transSeq )
// 3159       return( FALSE ); // ignore the message
// 3160   }
// 3161 
// 3162   // turn off timer
// 3163   APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
// 3164 
// 3165   if ( reason == ZDMATCH_REASON_TIMEOUT )
// 3166   {
// 3167     rspStatus = ZDP_TIMEOUT;    // The process will stop
// 3168   }
// 3169 
// 3170   if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
// 3171   {
// 3172     matchED->sending = ZDMATCH_SENDING_UNBIND;
// 3173 
// 3174     if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
// 3175     {
// 3176       rspStatus = status;
// 3177     }
// 3178   }
// 3179   else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
// 3180   {
// 3181     if ( status == ZDP_SUCCESS )
// 3182     {
// 3183       matchED->sending = ZDMATCH_SENDING_UNBIND;
// 3184     }
// 3185     else
// 3186     {
// 3187       matchED->sending = ZDMATCH_SENDING_BIND;
// 3188     }
// 3189   }
// 3190 
// 3191   if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
// 3192   {
// 3193     // Move to the next cluster ID
// 3194     if ( matchED->ed1numMatched )
// 3195       matchED->ed1numMatched--;
// 3196     else if ( matchED->ed2numMatched )
// 3197       matchED->ed2numMatched--;
// 3198   }
// 3199 
// 3200   // What message do we send now
// 3201   if ( matchED->ed1numMatched )
// 3202   {
// 3203     ed = &(matchED->ed1);
// 3204     clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
// 3205     dstIEEEAddr = matchED->ed2.ieeeAddr;
// 3206     dstEP = matchED->ed2.endpoint;
// 3207   }
// 3208   else if ( matchED->ed2numMatched )
// 3209   {
// 3210     ed = &(matchED->ed2);
// 3211     clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
// 3212     dstIEEEAddr = matchED->ed1.ieeeAddr;
// 3213     dstEP = matchED->ed1.endpoint;
// 3214   }
// 3215 
// 3216   dstAddr.addrMode = Addr16Bit;
// 3217 
// 3218   // Send the next message
// 3219   if ( rspStatus == ZDP_SUCCESS && ed )
// 3220   {
// 3221     // Send unbind/bind message to source
// 3222     if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
// 3223       msgType = Unbind_req;
// 3224     else
// 3225       msgType = Bind_req;
// 3226 
// 3227     dstAddr.addr.shortAddr = ed->srcAddr;
// 3228 
// 3229     // Save off the transaction sequence number
// 3230     matchED->transSeq = ZDP_TransID;
// 3231 
// 3232     destinationAddr.addrMode = Addr64Bit;
// 3233     osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
// 3234 
// 3235     ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
// 3236         &destinationAddr, dstEP, ed->SecurityUse );
// 3237 
// 3238     // Set timeout for response
// 3239     APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
// 3240   }
// 3241   else
// 3242   {
// 3243     // Send the response messages to requesting devices
// 3244     // send response to first requester
// 3245     dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
// 3246     ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
// 3247 
// 3248     // send response to second requester
// 3249     if ( matchED->state == ZDMATCH_SENDING_BINDS )
// 3250     {
// 3251       dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
// 3252       ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
// 3253     }
// 3254 
// 3255     // Process ended - release memory used
// 3256     ZDO_RemoveMatchMemory();
// 3257   }
// 3258 
// 3259   return ( TRUE );
// 3260 }
// 3261 
// 3262 static void ZDO_EndDeviceBindMatchTimeoutCB( void )
// 3263 {
// 3264   ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
// 3265 }
// 3266 
// 3267 #endif // ZDO_COORDINATOR
// 3268 
// 3269 /*********************************************************************
// 3270 *********************************************************************/
// 3271 
// 3272 
// 
// 2 629 bytes in segment BANKED_CODE
//     4 bytes in segment XDATA_I
//     4 bytes in segment XDATA_ID
//    52 bytes in segment XDATA_Z
// 
// 2 629 bytes of CODE  memory (+ 4 bytes shared)
//    52 bytes of XDATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
