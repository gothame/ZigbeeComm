##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   17/Oct/2013  21:52:36 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\stack\zdo\ZDProfile.c                           #
#    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wEnde #
#                          v.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR                #
#                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS   #
#                          "-DCONST=const __code" -DGENERIC=__generic) -f    #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConfig. #
#                          cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800     #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\Source\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mt\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2430EB\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\osal\mcu #
#                          \ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC #
#                          2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\osal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ #
#                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects #
#                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. #
#                          \Components\stack\af\ -I                          #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\stack\nw #
#                          k\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C #
#                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2430DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ #
#                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\zmac\f8w #
#                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                       #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          mac\high_level\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf03\ -I                #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\low_ #
#                          level\srf03\single_chip\ -D CC2430EB -D           #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           #
#                          ZG_ENDDEVICE -lC E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\EndDeviceEB\List\ #
#                           -lA E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\EndDeviceEB\List\             #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\EndDeviceEB\Obj\ -e             #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\stack\zdo\ZDProfile.c"                         #
#    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\EndDeviceEB\List\ZDProfile.lst     #
#    Object file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\EndDeviceEB\Obj\ZDProfile.r51      #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\zdo\ZDProfile.c
      1          /*********************************************************************
      2              Filename:       ZDProfile.c
      3              Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
      4              Revision:       $Revision: 14296 $
      5          
      6              Description:
      7          
      8                This Zigbee Device Profile.
      9          
     10              Notes:
     11          
     12              Copyright (c) 2006 by Texas Instruments, Inc.
     13              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     14              derivative works, modify, distribute, perform, display or sell this
     15              software and/or its documentation for any purpose is prohibited
     16              without the express written consent of Texas Instruments, Inc.
     17          *********************************************************************/
     18          
     19          /*********************************************************************
     20           * INCLUDES
     21           */
     22          #include "ZComdef.h"
     23          #include "OSAL.h"
     24          #include "AF.h"
     25          #include "NLMEDE.h"
     26          #include "nwk_util.h"
     27          #include "APS.h"
     28          
     29          #include "ZDCache.h"
     30          #include "ZDConfig.h"
     31          #include "ZDProfile.h"
     32          #include "ZDObject.h"
     33          
     34          #if defined( LCD_SUPPORTED )
     35            #include "OnBoard.h"
     36          #endif
     37          
     38          #include "nwk_util.h"
     39          
     40          /*********************************************************************
     41           * MACROS
     42           */
     43          
     44          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     45            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     46            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     47            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     48          }
     49          
     50          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     51            afStatus_t stat;                                    \
     52            ZDP_TmpBuf = (BUF)+1;                               \
     53            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     54            ZDP_TmpBuf = ZDP_Buf+1;                             \
     55            return stat;                                        \
     56          }
     57          
     58          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     59            afStatus_t stat;                                    \
     60            ZDP_TxOptions = (TxO);                              \
     61            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     62            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     63            return stat;                                        \
     64          }
     65          
     66          /*********************************************************************
     67           * CONSTANTS
     68           */
     69          
     70          #define ZDP_BUF_SZ          80
     71          

   \                                 In segment CODE_C, align 1
     72          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
     73          
     74          /*********************************************************************
     75           * TYPEDEFS
     76           */
     77          
     78          /*********************************************************************
     79           * GLOBAL VARIABLES
     80           */
     81          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     82          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
     83          
     84          /*********************************************************************
     85           * EXTERNAL VARIABLES
     86           */
     87          
     88          extern endPointDesc_t ZDApp_epDesc;
     89          
     90          /*********************************************************************
     91           * EXTERNAL FUNCTIONS
     92           */
     93          
     94          /*********************************************************************
     95           * LOCAL FUNCTIONS
     96           */
     97          
     98          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
     99          
    100          /*********************************************************************
    101           * LOCAL VARIABLES
    102           */
    103          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    104          static byte  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ??ZDP_Buf:
   \   000000                DS 80

   \                                 In segment XDATA_I, align 1, keep-with-next
    105          static byte *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ??ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    106          static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ??ZDP_TxOptions:
   \   000000                DS 1
    107          
    108          /*********************************************************************
    109           * @fn          fillAndSend
    110           *
    111           * @brief       Combined to reduce space
    112           *
    113           * @param
    114           * @param
    115           *
    116           * @return      afStatus_t
    117           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    118          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     ??fillAndSend:
    119          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   7413         MOV     A,#0x13
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine30 & 0xFFFF
    120          #if ( AF_V1_SUPPORT )
    121          
    122            byte proVer = NLME_GetProtocolVersion();
    123          #endif
    124            afAddrType_t afAddr;
    125          
    126            ZADDR_TO_AFADDR( addr, afAddr );
   \                     ??CrossCallReturnLabel_63:
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   8C82         MOV     DPL,R4
   \   00001F   8D83         MOV     DPH,R5
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C0E0         PUSH    A
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   8C82         MOV     DPL,R4
   \   000036   8D83         MOV     DPH,R5
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FB           MOV     R3,A
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   EA           MOV     A,R2
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   EB           MOV     A,R3
   \   000047   F0           MOVX    @DPTR,A
    127          
    128          #if ( AF_V1_SUPPORT )
    129            if ( proVer == ZB_PROT_V1_0 )
    130            {
    131              return ( afFillAndSendMessage( &afAddr, ZDP_AF_ENDPOINT, clusterID,
    132                         1, FRAMETYPE_MSG, transSeq,
    133                         NULL, NULL, NULL, NULL, len, ZDP_TmpBuf,
    134                         ZDP_TxOptions, FALSE, AF_DEFAULT_RADIUS ) );
    135            }
    136            else
    137          #endif
    138            {
    139              *(ZDP_TmpBuf-1) = *transSeq;
   \   000048   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   24FF         ADD     A,#-0x1
   \   00004E   F5..         MOV     ?V0 + 4,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   34FF         ADDC    A,#-0x1
   \   000054   F5..         MOV     ?V0 + 5,A
   \   000056   85..82       MOV     DPL,?V0 + 0
   \   000059   85..83       MOV     DPH,?V0 + 1
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   85..82       MOV     DPL,?V0 + 4
   \   000060   85..83       MOV     DPH,?V0 + 5
   \   000063   F0           MOVX    @DPTR,A
    140          
    141              return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    142                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    143                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000064                ; Setup parameters for call to function AF_DataRequest
   \   000064   75..0A       MOV     ?V0 + 6,#0xa
   \   000067   78..         MOV     R0,#?V0 + 6
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   89..         MOV     ?V0 + 0,R1
   \   000078   7401         MOV     A,#0x1
   \   00007A   25..         ADD     A,?V0 + 0
   \   00007C   F5..         MOV     ?V0 + 0,A
   \   00007E   E4           CLR     A
   \   00007F   3400         ADDC    A,#0x0
   \   000081   F5..         MOV     ?V0 + 1,A
   \   000083   78..         MOV     R0,#?V0 + 0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   78..         MOV     R0,#?V0 + 2
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   90....       MOV     DPTR,#??ZDP_TxOptions
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   7C..         MOV     R4,#(ZDApp_epDesc & 0xff)
   \   000094   7D..         MOV     R5,#((ZDApp_epDesc >> 8) & 0xff)
   \   000096   7409         MOV     A,#0x9
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   AA82         MOV     R2,DPL
   \   00009D   AB83         MOV     R3,DPH
   \   00009F   90....       MOV     DPTR,#(AF_DataRequest & 0xffff)
   \   0000A2   74..         MOV     A,#((AF_DataRequest >> 16) & 0xff)
   \   0000A4   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000A7   7409         MOV     A,#0x9
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AC   7404         MOV     A,#0x4
   \   0000AE                REQUIRE ?Subroutine41
   \   0000AE                ; // Fall through to label ?Subroutine41
    144            }
    145          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET
    146          
    147          /*********************************************************************
    148           * @fn          ZDP_SendData
    149           *
    150           * @brief       This builds and send a request message that has
    151           *              NWKAddrOfInterest as its only parameter.
    152           *
    153           * @param       dstAddr - destination address
    154           * @param       cmd - clusterID
    155           * @param       dataLen - number of bytes of data
    156           * @param       data - pointer to the data
    157           * @param       SecurityEnable - Security Options
    158           *
    159           * @return      afStatus_t
    160           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    161          afStatus_t ZDP_SendData( byte *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    162                                  byte len, byte *buf, byte SecurityEnable )
    163          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   740E         MOV     A,#0xe
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 3,A
    164            byte *pBuf = ZDP_TmpBuf;
   \   00001F   12....       LCALL   ?Subroutine18 & 0xFFFF
    165            byte cnt = len;
   \                     ??CrossCallReturnLabel_32:
   \   000022   85....       MOV     ?V0 + 4,?V0 + 2
   \   000025   8010         SJMP    ??ZDP_SendData_0
    166          
    167            while ( cnt-- )
    168            {
    169              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000027   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00002A   AE82         MOV     R6,DPL
   \   00002C   AF83         MOV     R7,DPH
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   A882         MOV     R0,DPL
   \   000035   A983         MOV     R1,DPH
    170            }
   \                     ??ZDP_SendData_0:
   \   000037   85....       MOV     ?V0 + 5,?V0 + 4
   \   00003A   74FF         MOV     A,#-0x1
   \   00003C   25..         ADD     A,?V0 + 5
   \   00003E   F5..         MOV     ?V0 + 4,A
   \   000040   E5..         MOV     A,?V0 + 5
   \   000042   70E3         JNZ     ??ZDP_SendData_1
    171          
    172            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
    173                         (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
   \   000044   E5..         MOV     A,?V0 + 3
   \   000046   6004         JZ      ??ZDP_SendData_2
   \   000048   7840         MOV     R0,#0x40
   \   00004A   8002         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004C   7800         MOV     R0,#0x0
   \                     ??ZDP_SendData_3:
   \   00004E   E8           MOV     A,R0
   \   00004F   440A         ORL     A,#0xa
   \   000051   90....       MOV     DPTR,#??ZDP_TxOptions
   \   000054   F0           MOVX    @DPTR,A
   \   000055                ; Setup parameters for call to function fillAndSend
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   A9..         MOV     R1,?V0 + 2
   \   00005C   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   00005F   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   000061   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   E4           CLR     A
   \   00006A   90....       MOV     DPTR,#??ZDP_TxOptions
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   7F06         MOV     R7,#0x6
   \   000070   02....       LJMP    ?BANKED_LEAVE_XDATA
    174          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   02....       LJMP    ?Subroutine43 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#??ZDP_TmpBuf
   \                     ??Subroutine18_0:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   22           RET
    175          
    176          #if defined ( ZDO_NODEDESC_REQUEST ) || defined ( ZDO_POWERDESC_REQUEST ) ||\
    177              defined ( ZDO_ACTIVEEP_REQUEST ) || defined ( ZDO_COMPLEXDESC_REQUEST ) ||\
    178              defined ( ZDO_USERDESC_REQUEST )
    179          /*********************************************************************
    180           * @fn          ZDP_NWKAddrOfInterestReq
    181           *
    182           * @brief       This builds and send a request message that has
    183           *              NWKAddrOfInterest as its only parameter.
    184           *
    185           * @param       dstAddr - destination address
    186           * @param       nwkAddr - 16 bit address
    187           * @param       SecurityEnable - Security Options
    188           *
    189           * @return      afStatus_t
    190           */
    191          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
    192                                               byte cmd, byte SecurityEnable )
    193          {
    194            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
    195            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    196          
    197            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
    198          }
    199          #endif // ZDO_NODEDESC_REQUEST ZDO_POWERDESC_REQUEST ZDO_ACTIVEEP_REQUEST ZDO_COMPLEXDESC_REQUEST  ZDO_USERDESC_REQUEST
    200          
    201          /*********************************************************************
    202           * Address Requests
    203           */
    204          
    205          #if defined ( ZDO_NWKADDR_REQUEST )
    206          /*********************************************************************
    207           * @fn          ZDP_NwkAddrReq
    208           *
    209           * @brief       This builds and send a NWK_addr_req message.  This
    210           *              function sends a broadcast message looking for a 16
    211           *              bit address with a 64 bit address as bait.
    212           *
    213           * @param       IEEEAddress - looking for this device
    214           * @param       SecurityEnable - Security Options
    215           *
    216           * @return      afStatus_t
    217           */
    218          afStatus_t ZDP_NwkAddrReq( byte *IEEEAddress, byte ReqType,
    219                                     byte StartIndex, byte SecurityEnable )
    220          {
    221            byte *pBuf = ZDP_TmpBuf;
    222            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    223            zAddrType_t dstAddr;
    224          
    225            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
    226            {
    227              dstAddr.addrMode = AddrBroadcast;
    228              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    229            }
    230            else
    231            {
    232              dstAddr.addrMode = Addr16Bit;
    233              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
    234            }
    235          
    236            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
    237          
    238            *pBuf++ = ReqType;
    239            *pBuf++ = StartIndex;
    240          
    241            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
    242          }
    243          #endif
    244          
    245          #if defined ( ZDO_IEEEADDR_REQUEST )
    246          /*********************************************************************
    247           * @fn          ZDP_IEEEAddrReq
    248           *
    249           * @brief       This builds and send a IEEE_addr_req message.  This
    250           *              function sends a unicast message looking for a 64
    251           *              bit IEEE address with a 16 bit address as bait.
    252           *
    253           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    254           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    255           * @param       SecurityEnable - Security Options
    256           *
    257           * @return      afStatus_t
    258           */
    259          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
    260                                      byte StartIndex, byte SecurityEnable )
    261          {
    262            byte *pBuf = ZDP_TmpBuf;
    263            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    264            zAddrType_t dstAddr;
    265          
    266            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    267            dstAddr.addr.shortAddr = shortAddr;
    268          
    269            *pBuf++ = LO_UINT16( shortAddr );
    270            *pBuf++ = HI_UINT16( shortAddr );
    271          
    272            *pBuf++ = ReqType;
    273            *pBuf++ = StartIndex;
    274          
    275            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
    276          }
    277          #endif
    278          
    279          #if defined ( ZDO_MATCH_REQUEST )
    280          /*********************************************************************
    281           * @fn          ZDP_MatchDescReq
    282           *
    283           * @brief       This builds and send a Match_Desc_req message.  This
    284           *              function sends a broadcast or unicast message
    285           *              requesting the list of endpoint/interfaces that
    286           *              match profile ID and cluster IDs.
    287           *
    288           * @param       dstAddr - destination address
    289           * @param       ProfileID - Profile ID
    290           * @param       NumInClusters - number of input clusters
    291           * @param       InClusterList - input cluster ID list
    292           * @param       NumOutClusters - number of output clusters
    293           * @param       OutClusterList - output cluster ID list
    294           * @param       SecurityEnable - Security Options
    295           *
    296           * @return      afStatus_t
    297           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    298          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    299                                          uint16 ProfileID,
    300                                          byte NumInClusters, cId_t *InClusterList,
    301                                          byte NumOutClusters, cId_t *OutClusterList,
    302                                          byte SecurityEnable )
    303          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EC           MOV     A,R4
   \   000016   FE           MOV     R6,A
   \   000017   ED           MOV     A,R5
   \   000018   FF           MOV     R7,A
   \   000019   89..         MOV     ?V0 + 6,R1
   \   00001B   7412         MOV     A,#0x12
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000023   7416         MOV     A,#0x16
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 7,A
   \   00002B   7417         MOV     A,#0x17
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 4,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 5,A
    304            byte *pBuf = ZDP_TmpBuf;
   \   000037   12....       LCALL   ?Subroutine12 & 0xFFFF
    305            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    306            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    307            uint8 protoVer = NLME_GetProtocolVersion();
   \                     ??CrossCallReturnLabel_101:
   \   00003A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003D   E9           MOV     A,R1
   \   00003E   FB           MOV     R3,A
    308          
    309            len += (NumInClusters + NumOutClusters)*((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
   \   00003F   7401         MOV     A,#0x1
   \   000041   6B           XRL     A,R3
   \   000042   6004         JZ      ??ZDP_MatchDescReq_0
   \   000044   7802         MOV     R0,#0x2
   \   000046   8002         SJMP    ??ZDP_MatchDescReq_1
   \                     ??ZDP_MatchDescReq_0:
   \   000048   7801         MOV     R0,#0x1
   \                     ??ZDP_MatchDescReq_1:
   \   00004A   E5..         MOV     A,?V0 + 7
   \   00004C   25..         ADD     A,?V0 + 6
   \   00004E   F5F0         MOV     B,A
   \   000050   E8           MOV     A,R0
   \   000051   A4           MUL     AB
   \   000052   2406         ADD     A,#0x6
   \   000054   FA           MOV     R2,A
    310          
    311            if ( len >= ZDP_BUF_SZ-1 )
   \   000055   C3           CLR     C
   \   000056   944F         SUBB    A,#0x4f
   \   000058   4005         JC      ??ZDP_MatchDescReq_2
    312            {
    313              return afStatus_MEM_FAIL;
   \   00005A   7981         MOV     R1,#-0x7f
   \   00005C   02....       LJMP    ??ZDP_MatchDescReq_3 & 0xFFFF
    314            }
    315          
    316            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_2:
   \   00005F   EE           MOV     A,R6
   \   000060   85..82       MOV     DPL,?V0 + 2
   \   000063   85..83       MOV     DPH,?V0 + 3
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
    317            *pBuf++ = HI_UINT16( nwkAddr );
   \   000068   EF           MOV     A,R7
   \   000069   12....       LCALL   ?Subroutine21 & 0xFFFF
    318          
    319            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
    320            *pBuf++ = HI_UINT16( ProfileID );
    321          
    322            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_41:
   \   00006C   E5..         MOV     A,?V0 + 6
   \   00006E   12....       LCALL   ?Subroutine23 & 0xFFFF
    323            if ( NumInClusters )
   \                     ??CrossCallReturnLabel_45:
   \   000071   6028         JZ      ??ZDP_MatchDescReq_4
    324            {
    325              for (i=0; i<NumInClusters; ++i)  {
   \   000073   7C00         MOV     R4,#0x0
    326                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??ZDP_MatchDescReq_5:
   \   000075   EC           MOV     A,R4
   \   000076   C3           CLR     C
   \   000077   33           RLC     A
   \   000078   F8           MOV     R0,A
   \   000079   E4           CLR     A
   \   00007A   33           RLC     A
   \   00007B   F9           MOV     R1,A
   \   00007C   7414         MOV     A,#0x14
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000084   12....       LCALL   ?Subroutine7 & 0xFFFF
    327                if (protoVer != ZB_PROT_V1_0)  {
   \                     ??CrossCallReturnLabel_17:
   \   000087   600B         JZ      ??CrossCallReturnLabel_21
    328                  *pBuf++ = HI_UINT16( InClusterList[i] );
   \   000089   7414         MOV     A,#0x14
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000091   12....       LCALL   ?Subroutine9 & 0xFFFF
    329                }
    330              }
   \                     ??CrossCallReturnLabel_21:
   \   000094   0C           INC     R4
   \   000095   EC           MOV     A,R4
   \   000096   C3           CLR     C
   \   000097   95..         SUBB    A,?V0 + 6
   \   000099   40DA         JC      ??ZDP_MatchDescReq_5
    331            }
    332          
    333            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_4:
   \   00009B   85..82       MOV     DPL,?V0 + 2
   \   00009E   85..83       MOV     DPH,?V0 + 3
   \   0000A1   E5..         MOV     A,?V0 + 7
   \   0000A3   12....       LCALL   ?Subroutine23 & 0xFFFF
    334            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_46:
   \   0000A6   6028         JZ      ??ZDP_MatchDescReq_6
    335            {
    336              for (i=0; i<NumOutClusters; ++i)  {
   \   0000A8   7C00         MOV     R4,#0x0
    337                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??ZDP_MatchDescReq_7:
   \   0000AA   EC           MOV     A,R4
   \   0000AB   C3           CLR     C
   \   0000AC   33           RLC     A
   \   0000AD   F8           MOV     R0,A
   \   0000AE   E4           CLR     A
   \   0000AF   33           RLC     A
   \   0000B0   F9           MOV     R1,A
   \   0000B1   E5..         MOV     A,?V0 + 4
   \   0000B3   28           ADD     A,R0
   \   0000B4   F582         MOV     DPL,A
   \   0000B6   E5..         MOV     A,?V0 + 5
   \   0000B8   39           ADDC    A,R1
   \   0000B9   12....       LCALL   ?Subroutine7 & 0xFFFF
    338                if (protoVer != ZB_PROT_V1_0)  {
   \                     ??CrossCallReturnLabel_18:
   \   0000BC   600B         JZ      ??CrossCallReturnLabel_22
    339                  *pBuf++ = HI_UINT16( OutClusterList[i] );
   \   0000BE   E5..         MOV     A,?V0 + 4
   \   0000C0   28           ADD     A,R0
   \   0000C1   F582         MOV     DPL,A
   \   0000C3   E5..         MOV     A,?V0 + 5
   \   0000C5   39           ADDC    A,R1
   \   0000C6   12....       LCALL   ?Subroutine9 & 0xFFFF
    340                }
    341              }
   \                     ??CrossCallReturnLabel_22:
   \   0000C9   0C           INC     R4
   \   0000CA   EC           MOV     A,R4
   \   0000CB   C3           CLR     C
   \   0000CC   95..         SUBB    A,?V0 + 7
   \   0000CE   40DA         JC      ??ZDP_MatchDescReq_7
    342            }
    343          
    344            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_6:
   \   0000D0                ; Setup parameters for call to function fillAndSend
   \   0000D0   75..06       MOV     ?V0 + 0,#0x6
   \   0000D3   75..00       MOV     ?V0 + 1,#0x0
   \   0000D6   78..         MOV     R0,#?V0 + 0
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   EA           MOV     A,R2
   \   0000DC   F9           MOV     R1,A
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000E5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_3:
   \   0000ED   7402         MOV     A,#0x2
   \   0000EF   80..         SJMP    ??Subroutine42_0
    345          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   7401         MOV     A,#0x1
   \                     ??Subroutine42_0:
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F08         MOV     R7,#0x8
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FD           MOV     R5,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   8D82         MOV     DPL,R5
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   6B           XRL     A,R3
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V0 + 0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000003   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000006                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000006                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000006   02....       LJMP    ?Subroutine45 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7A..         MOV     R2,#(ZDP_TransID & 0xff)
   \   000007   7B..         MOV     R3,#((ZDP_TransID >> 8) & 0xff)
   \   000009   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   00000C   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   00000E   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F583         MOV     DPH,A
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \                     ??Subroutine37_0:
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   8582..       MOV     ?V0 + 2,DPL
   \   00000C   8583..       MOV     ?V0 + 3,DPH
   \   00000F   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000005   7401         MOV     A,#0x1
   \   000007   22           RET
    346          #endif // ZDO_MATCH_REQUEST
    347          
    348          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    349          /*********************************************************************
    350           * @fn          ZDP_SimpleDescReq
    351           *
    352           * @brief       This builds and send a NWK_Simple_Desc_req
    353           *              message.  This function sends unicast message to the
    354           *              destination device.
    355           *
    356           * @param       dstAddr - destination address
    357           * @param       nwkAddr - 16 bit address
    358           * @param       epIntf - endpoint/interface
    359           * @param       SecurityEnable - Security Options
    360           *
    361           * @return      afStatus_t
    362           */
    363          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
    364                                              byte endPoint, byte SecurityEnable )
    365          
    366          {
    367            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
    368            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    369            ZDP_TmpBuf[2] = endPoint;
    370          
    371            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
    372          }
    373          #endif // ZDO_SIMPLEDESC_REQUEST
    374          
    375          #if defined ( ZDO_USERDESCSET_REQUEST )
    376          /*********************************************************************
    377           * @fn          ZDP_UserDescSet
    378           *
    379           * @brief       This builds and send a User_Desc_set message to set
    380           *              the user descriptor.  This function sends unicast
    381           *              message to the destination device.
    382           *
    383           * @param       dstAddr - destination address
    384           * @param       nwkAddr - 16 bit address
    385           * @param       UserDescriptor - user descriptor
    386           * @param       SecurityEnable - Security Options
    387           *
    388           * @return      afStatus_t
    389           */
    390          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
    391                                    UserDescriptorFormat_t *UserDescriptor,
    392                                    byte SecurityEnable )
    393          {
    394            byte *pBuf = ZDP_TmpBuf;
    395            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    396                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
    397            byte addrLen = 2;
    398          
    399            *pBuf++ = LO_UINT16( nwkAddr );
    400            *pBuf++ = HI_UINT16( nwkAddr );
    401          
    402            if ( NLME_GetProtocolVersion() == ZB_PROT_V1_1 )
    403            {
    404              *pBuf++ = len;
    405              addrLen = 3;
    406            }
    407            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
    408            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
    409          
    410            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
    411          }
    412          #endif // ZDO_USERDESCSET_REQUEST
    413          
    414          #if defined ( ZDO_SERVERDISC_REQUEST )
    415          /*********************************************************************
    416           * @fn          ZDP_ServerDiscReq
    417           *
    418           * @brief       Build and send a Server_Discovery_req request message.
    419           *
    420           * @param       serverMask - 16-bit bit-mask of server services being sought.
    421           * @param       SecurityEnable - Security Options
    422           *
    423           * @return      afStatus_t
    424           */
    425          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
    426          {
    427            byte *pBuf = ZDP_TmpBuf;
    428            zAddrType_t dstAddr;
    429          
    430            dstAddr.addrMode = AddrBroadcast;
    431            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
    432          
    433            *pBuf++ = LO_UINT16( serverMask );
    434            *pBuf = HI_UINT16( serverMask );
    435          
    436            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    437                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
    438          }
    439          #endif
    440          
    441          #if defined ( ZDO_ENDDEVICE_ANNCE_REQUEST ) || defined ( ZDO_ENDDEVICE_ANNCE_GENERATE )
    442          /*********************************************************************
    443           * @fn          ZDP_EndDeviceAnnce
    444           *
    445           * @brief       This builds and send an End_Device_Annce
    446           *              message.  This function sends a broadcast message.
    447           *
    448           * @param       nwkAddr - 16 bit address of the device
    449           * @param       IEEEAddr - 64 bit address of the device
    450           * @param       capabilities - device capabilities.  This field is only
    451           *                 sent for v1.1 networks.
    452           * @param       SecurityEnable - Security Options
    453           *
    454           * @return      afStatus_t
    455           */
    456          afStatus_t ZDP_EndDeviceAnnce( uint16 nwkAddr, byte *IEEEAddr,
    457                                        byte capabilities, byte SecurityEnable )
    458          {
    459            zAddrType_t dstAddr;
    460            uint8 len;
    461          
    462            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    463            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    464          
    465            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
    466            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    467            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
    468            len = 2 + Z_EXTADDR_LEN;
    469          
    470            if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
    471            {
    472              ZDP_TmpBuf[10] = capabilities;
    473              len++;
    474            }
    475          
    476            return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_annce, len );
    477          }
    478          #endif // ZDO_ENDDEVICE_ANNCE_REQUEST
    479          
    480          /*********************************************************************
    481           * Address Responses
    482           */
    483          
    484          /*********************************************************************
    485           * @fn      zdpProcessAddrReq
    486           *
    487           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    488           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    489           *
    490           * @param   seq - Message sequence number of the request.
    491           * @param   src - Source address of the request.
    492           * @param   msg - Incoming request message.
    493           * @param   cId - Cluster ID of the request.
    494           * @param   sty - Security enable/disable options.
    495           *
    496           * @return  none
    497           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    498          static void zdpProcessAddrReq(
   \                     ??zdpProcessAddrReq:
    499                              byte seq, zAddrType_t *src, byte *msg, uint16 cId, byte sty )
    500          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 6,R2
   \   000014   8B..         MOV     ?V0 + 7,R3
   \   000016   7411         MOV     A,#0x11
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 4,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 5,A
    501            byte reqType = msg[(cId == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000022   E5..         MOV     A,?V0 + 4
   \   000024   7002         JNZ     ??zdpProcessAddrReq_1
   \   000026   E5..         MOV     A,?V0 + 5
   \                     ??zdpProcessAddrReq_1:
   \   000028   7004         JNZ     ??zdpProcessAddrReq_2
   \   00002A   7808         MOV     R0,#0x8
   \   00002C   8002         SJMP    ??zdpProcessAddrReq_3
   \                     ??zdpProcessAddrReq_2:
   \   00002E   7802         MOV     R0,#0x2
   \                     ??zdpProcessAddrReq_3:
   \   000030   EC           MOV     A,R4
   \   000031   28           ADD     A,R0
   \   000032   F582         MOV     DPL,A
   \   000034   ED           MOV     A,R5
   \   000035   12....       LCALL   ??Subroutine24_1 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000038   F5..         MOV     ?V0 + 2,A
    502          
    503            uint16 aoi = INVALID_NODE_ADDR;
    504            byte *ieee = NULL;
   \   00003A   75..00       MOV     ?V0 + 0,#0x0
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
    505          
    506            if ( cId == NWK_addr_req )
   \   000040   E5..         MOV     A,?V0 + 4
   \   000042   7002         JNZ     ??zdpProcessAddrReq_4
   \   000044   E5..         MOV     A,?V0 + 5
   \                     ??zdpProcessAddrReq_4:
   \   000046   701E         JNZ     ??zdpProcessAddrReq_5
    507            {
    508              ieee = msg;
   \   000048   8C..         MOV     ?V0 + 0,R4
   \   00004A   8D..         MOV     ?V0 + 1,R5
    509          
    510              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00004C                ; Setup parameters for call to function osal_ExtAddrEqual
   \   00004C   7A..         MOV     R2,#(saveExtAddr & 0xff)
   \   00004E   7B..         MOV     R3,#((saveExtAddr >> 8) & 0xff)
   \   000050   90....       MOV     DPTR,#(osal_ExtAddrEqual & 0xffff)
   \   000053   74..         MOV     A,#((osal_ExtAddrEqual >> 16) & 0xff)
   \   000055   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000058   E9           MOV     A,R1
   \   000059   7003         JNZ     $+5
   \   00005B   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
    511              {
    512                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00005E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000061   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000064   8022         SJMP    ??zdpProcessAddrReq_7
    513              }
    514              /*
    515              else if ( reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP )
    516              {
    517                //ggg - what to do?
    518              }
    519              */
    520          #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
    521              else
    522              {
    523                aoi = ZDCacheGetNwkAddr( msg );
    524              }
    525          #endif
    526            }
    527            else  // if ( cId == IEEE_addr_req )
    528            {
    529              aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??zdpProcessAddrReq_5:
   \   000066   8C82         MOV     DPL,R4
   \   000068   8D83         MOV     DPH,R5
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   E4           CLR     A
   \   000070   2A           ADD     A,R2
   \   000071   FE           MOV     R6,A
   \   000072   E9           MOV     A,R1
   \   000073   3400         ADDC    A,#0x0
   \   000075   FF           MOV     R7,A
    530          
    531              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000076   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   6E           XRL     A,R6
   \   00007B   7003         JNZ     ??zdpProcessAddrReq_8
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_8:
   \   000080   7006         JNZ     ??zdpProcessAddrReq_7
    532              {
    533                ieee = saveExtAddr;
   \   000082   75....       MOV     ?V0 + 0,#(saveExtAddr & 0xff)
   \   000085   75....       MOV     ?V0 + 1,#((saveExtAddr >> 8) & 0xff)
    534              }
    535          #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
    536              else
    537              {
    538                ieee = ZDCacheGetExtAddr( aoi );
    539              }
    540          #endif
    541            }
    542          
    543            if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??zdpProcessAddrReq_7:
   \   000088   74FE         MOV     A,#-0x2
   \   00008A   6E           XRL     A,R6
   \   00008B   7003         JNZ     ??zdpProcessAddrReq_9
   \   00008D   74FF         MOV     A,#-0x1
   \   00008F   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_9:
   \   000090   607E         JZ      ??zdpProcessAddrReq_6
   \   000092   E5..         MOV     A,?V0 + 0
   \   000094   7002         JNZ     ??zdpProcessAddrReq_10
   \   000096   E5..         MOV     A,?V0 + 1
   \                     ??zdpProcessAddrReq_10:
   \   000098   6076         JZ      ??zdpProcessAddrReq_6
    544            {
    545              byte *pBuf = ZDP_TmpBuf;
   \   00009A   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   00009D   12....       LCALL   ?Subroutine17 & 0xFFFF
    546              // Status + IEEE-Addr + Nwk-Addr.
    547              byte len = 1 + Z_EXTADDR_LEN + 2;
    548          
    549              byte stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) ||
    550                        (reqType == ZDP_ADDR_REQTYPE_EXTENDED) ||
    551                    ((reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP) && (cId == NWK_addr_req)) ) ?
    552                ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \                     ??CrossCallReturnLabel_92:
   \   0000A0   E5..         MOV     A,?V0 + 2
   \   0000A2   6014         JZ      ??zdpProcessAddrReq_11
   \   0000A4   7401         MOV     A,#0x1
   \   0000A6   65..         XRL     A,?V0 + 2
   \   0000A8   600E         JZ      ??zdpProcessAddrReq_11
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   65..         XRL     A,?V0 + 2
   \   0000AE   700C         JNZ     ??zdpProcessAddrReq_12
   \   0000B0   E5..         MOV     A,?V0 + 4
   \   0000B2   7002         JNZ     ??zdpProcessAddrReq_13
   \   0000B4   E5..         MOV     A,?V0 + 5
   \                     ??zdpProcessAddrReq_13:
   \   0000B6   7004         JNZ     ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0000B8   7A00         MOV     R2,#0x0
   \   0000BA   8002         SJMP    ??zdpProcessAddrReq_14
   \                     ??zdpProcessAddrReq_12:
   \   0000BC   7A80         MOV     R2,#-0x80
    553          
    554              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_14:
   \   0000BE   EA           MOV     A,R2
   \   0000BF   F0           MOVX    @DPTR,A
    555          
    556              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   0000C0                ; Setup parameters for call to function osal_cpyExtAddr
   \   0000C0   AC..         MOV     R4,?V0 + 0
   \   0000C2   AD..         MOV     R5,?V0 + 1
   \   0000C4   A3           INC     DPTR
   \   0000C5   AA82         MOV     R2,DPL
   \   0000C7   AB83         MOV     R3,DPH
   \   0000C9   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   0000CC   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   0000CE   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000D1   8A82         MOV     DPL,R2
   \   0000D3   8B83         MOV     DPH,R3
    557          
    558              *pBuf++ = LO_UINT16( aoi );
   \   0000D5   EE           MOV     A,R6
   \   0000D6   F0           MOVX    @DPTR,A
    559              *pBuf++ = HI_UINT16( aoi );
   \   0000D7   EF           MOV     A,R7
   \   0000D8   A3           INC     DPTR
   \   0000D9   F0           MOVX    @DPTR,A
    560          
    561          #if defined( RTR_NWK )
    562              if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) &&
    563                   (aoi == ZDAppNwkAddr.addr.shortAddr) )
    564              {
    565                byte cnt = 0;
    566                uint16 *list = AssocMakeList( &cnt );
    567          
    568                // NumAssocDev field is only present on success.
    569                *pBuf++ = cnt;
    570                len++;
    571          
    572                if ( list != NULL )
    573                {
    574                  byte idx =
    575                    msg[(((cId == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    576                  uint16 *pList = list + idx;
    577          
    578                  // StartIndex field is only present if NumAssocDev field is non-zero.
    579                  *pBuf++ = idx;
    580                  len++;
    581          
    582                  if ( cnt > idx )
    583                  {
    584                    cnt -= idx;
    585                    len += (cnt * sizeof( uint16 ));
    586                  }
    587                  else
    588                  {
    589                    cnt = 0;
    590                  }
    591          
    592                  while ( cnt != 0 )
    593                  {
    594                    *pBuf++ = LO_UINT16( *pList );
    595                    *pBuf++ = HI_UINT16( *pList );
    596                    pList++;
    597                    cnt--;
    598                  }
    599          
    600                  osal_mem_free( (byte *)list );
    601                }
    602              }
    603          
    604          #endif
    605          
    606              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   0000DA   7410         MOV     A,#0x10
   \   0000DC   90....       MOV     DPTR,#??ZDP_TxOptions
   \   0000DF   F0           MOVX    @DPTR,A
    607              fillAndSend( &seq, src, (cId_t)(cId | ZDO_RESPONSE_BIT), len );
   \   0000E0                ; Setup parameters for call to function fillAndSend
   \   0000E0   E5..         MOV     A,?V0 + 4
   \   0000E2   F5..         MOV     ?V0 + 0,A
   \   0000E4   7480         MOV     A,#-0x80
   \   0000E6   45..         ORL     A,?V0 + 5
   \   0000E8   F5..         MOV     ?V0 + 1,A
   \   0000EA   78..         MOV     R0,#?V0 + 0
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EF   790B         MOV     R1,#0xb
   \   0000F1   AC..         MOV     R4,?V0 + 6
   \   0000F3   AD..         MOV     R5,?V0 + 7
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   AA82         MOV     R2,DPL
   \   0000FC   AB83         MOV     R3,DPH
   \   0000FE   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   000101   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   000103   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000106   7402         MOV     A,#0x2
   \   000108   12....       LCALL   ?DEALLOC_XSTACK8
    608              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00010B   E4           CLR     A
   \   00010C   90....       MOV     DPTR,#??ZDP_TxOptions
   \   00010F   F0           MOVX    @DPTR,A
    609            }
    610          }
   \                     ??zdpProcessAddrReq_6:
   \   000110   02....       LJMP    ?Subroutine42 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F9           MOV     R1,A
   \                     ??Subroutine44_0:
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \                     ??Subroutine24_0:
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \                     ??Subroutine24_1:
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   02....       LJMP    ?Subroutine44 & 0xFFFF
    611          
    612          /*********************************************************************
    613           * @fn          ZDP_NodeDescMsg
    614           *
    615           * @brief       Builds and sends a Node Descriptor message, unicast to the
    616           *              specified device.
    617           *
    618           * @param       dstAddr - destination address
    619           * @param       nwkAddr - 16 bit network address for device
    620           * @param       pNodeDesc - pointer to the node descriptor
    621           * @param       SecurityEnable - Security Options
    622           *
    623           * @return      afStatus_t
    624           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    625          afStatus_t ZDP_NodeDescMsg( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_NodeDescMsg:
    626                 uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc, byte SecurityEnable )
    627          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 2,R2
   \   000014   8B..         MOV     ?V0 + 3,R3
   \   000016   8C..         MOV     ?V0 + 0,R4
   \   000018   8D..         MOV     ?V0 + 1,R5
   \   00001A   740D         MOV     A,#0xd
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine15 & 0xFFFF
    628            byte proVer = NLME_GetProtocolVersion();
   \                     ??CrossCallReturnLabel_103:
   \   000022   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000025   E9           MOV     A,R1
   \   000026   FA           MOV     R2,A
    629            byte *pBuf = ZDP_TmpBuf;
   \   000027   12....       LCALL   ?Subroutine18 & 0xFFFF
    630            byte len;
    631          
    632            if ( proVer == ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_33:
   \   00002A   7401         MOV     A,#0x1
   \   00002C   6A           XRL     A,R2
   \   00002D   7004         JNZ     ??ZDP_NodeDescMsg_0
    633            {
    634              len = 1 + 2 + 8;  // Status + nwkAddr + Node descriptor
   \   00002F   7C0B         MOV     R4,#0xb
   \   000031   8002         SJMP    ??ZDP_NodeDescMsg_1
    635            }
    636            else
    637            {
    638              len = 1 + 2 + 10;  // Status + nwkAddr + Node descriptor
   \                     ??ZDP_NodeDescMsg_0:
   \   000033   7C0D         MOV     R4,#0xd
    639            }
    640          
    641            *pBuf++ = ZDP_SUCCESS;
   \                     ??ZDP_NodeDescMsg_1:
   \   000035   E4           CLR     A
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   12....       LCALL   ?Subroutine21 & 0xFFFF
    642          
    643            *pBuf++ = LO_UINT16( nwkAddr );
    644            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_42:
   \   00003D   A882         MOV     R0,DPL
   \   00003F   A983         MOV     R1,DPH
    645          
    646            if ( proVer == ZB_PROT_V1_0 )
   \   000041   7401         MOV     A,#0x1
   \   000043   6A           XRL     A,R2
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   7005         JNZ     ??ZDP_NodeDescMsg_2
    647            {
    648              *pBuf++ = (byte)(pNodeDesc->LogicalType & 0x07);
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   5407         ANL     A,#0x7
   \   00004D   8003         SJMP    ??ZDP_NodeDescMsg_3
    649            }
    650            else
    651            {
    652              *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    653                               (pNodeDesc->UserDescAvail << 4) |
    654                               (pNodeDesc->LogicalType & 0x07));
   \                     ??ZDP_NodeDescMsg_2:
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   541F         ANL     A,#0x1f
   \                     ??ZDP_NodeDescMsg_3:
   \   000052   12....       LCALL   ?Subroutine35 & 0xFFFF
    655            }
    656          
    657            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_76:
   \   000055   12....       LCALL   ?Subroutine8 & 0xFFFF
    658            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_19:
   \   000058   12....       LCALL   ?Subroutine8 & 0xFFFF
    659            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_20:
   \   00005B   A3           INC     DPTR
   \   00005C   12....       LCALL   ?Subroutine6 & 0xFFFF
    660            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_15:
   \   00005F   12....       LCALL   ?Subroutine6 & 0xFFFF
    661            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_16:
   \   000062   A3           INC     DPTR
   \   000063   12....       LCALL   ?Subroutine5 & 0xFFFF
    662            *pBuf++ = pNodeDesc->MaxTransferSize[0];
   \                     ??CrossCallReturnLabel_13:
   \   000066   12....       LCALL   ?Subroutine5 & 0xFFFF
    663            *pBuf++ = pNodeDesc->MaxTransferSize[1];
   \                     ??CrossCallReturnLabel_14:
   \   000069   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   08           INC     R0
   \   00006F   A983         MOV     R1,DPH
    664          
    665            if ( proVer != ZB_PROT_V1_0 )
   \   000071   7401         MOV     A,#0x1
   \   000073   6A           XRL     A,R2
   \   000074   6019         JZ      ??ZDP_NodeDescMsg_4
    666            {
    667              *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000076   EE           MOV     A,R6
   \   000077   2408         ADD     A,#0x8
   \   000079   FA           MOV     R2,A
   \   00007A   EF           MOV     A,R7
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   FB           MOV     R3,A
   \   00007E   8A82         MOV     DPL,R2
   \   000080   8B83         MOV     DPH,R3
   \   000082   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000085   F0           MOVX    @DPTR,A
    668              *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \   000086   8A82         MOV     DPL,R2
   \   000088   8B83         MOV     DPH,R3
   \   00008A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00008D   A3           INC     DPTR
   \   00008E   F0           MOVX    @DPTR,A
    669            }
    670          
    671            return fillAndSend( &TransSeq, dstAddr, Node_Desc_rsp, len );
   \                     ??ZDP_NodeDescMsg_4:
   \   00008F                ; Setup parameters for call to function fillAndSend
   \   00008F   75..02       MOV     ?V0 + 0,#0x2
   \   000092   75..80       MOV     ?V0 + 1,#-0x80
   \   000095   78..         MOV     R0,#?V0 + 0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   EC           MOV     A,R4
   \   00009B   F9           MOV     R1,A
   \   00009C   AC..         MOV     R4,?V0 + 2
   \   00009E   AD..         MOV     R5,?V0 + 3
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   AA82         MOV     R2,DPL
   \   0000A7   AB83         MOV     R3,DPH
   \   0000A9   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   0000AC   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   0000AE   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B6   7401         MOV     A,#0x1
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   7F04         MOV     R7,#0x4
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA
    672          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009                REQUIRE ?Subroutine43
   \   000009                ; // Fall through to label ?Subroutine43

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC     DPTR
   \                     ??Subroutine19_0:
   \   000001   E0           MOVX    A,@DPTR
   \   000002   02....       LJMP    ??Subroutine44_0 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000003                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000003                REQUIRE ?Subroutine45
   \   000003                ; // Fall through to label ?Subroutine45
    673          
    674          /*********************************************************************
    675           * @fn          ZDP_PowerDescMsg
    676           *
    677           * @brief       Builds and sends a Power Descriptor message, unicast to the
    678           *              specified device.
    679           *
    680           * @param       dstAddr - destination address
    681           * @param       Status - message status (ZDP_SUCCESS or other)
    682           * @param       nwkAddr - 16 bit network address for device
    683           * @param       pPowerDesc - pointer to the node descriptor
    684           * @param       SecurityEnable - Security Options
    685           *
    686           * @return      afStatus_t
    687           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    688          afStatus_t ZDP_PowerDescMsg( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_PowerDescMsg:
    689            uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc, byte SecurityEnable )
    690          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00001A   E8           MOV     A,R0
   \   00001B   FE           MOV     R6,A
   \   00001C   E9           MOV     A,R1
   \   00001D   FF           MOV     R7,A
    691            byte *pBuf = ZDP_TmpBuf;
   \   00001E   12....       LCALL   ?Subroutine18 & 0xFFFF
    692            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    693          
    694            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_35:
   \   000021   E4           CLR     A
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
    695          
    696            *pBuf++ = LO_UINT16( nwkAddr );
   \   000028   EC           MOV     A,R4
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
    697            *pBuf++ = HI_UINT16( nwkAddr );
   \   00002B   ED           MOV     A,R5
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   A882         MOV     R0,DPL
   \   000030   A983         MOV     R1,DPH
    698          
    699            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    700                              | (pPowerDesc->PowerMode & 0x0F));
   \   000032   12....       LCALL   ?Subroutine14 & 0xFFFF
    701            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    702                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_88:
   \   000035   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000038   A3           INC     DPTR
   \   000039   F0           MOVX    @DPTR,A
    703          
    704            return fillAndSend( &TransSeq, dstAddr, Power_Desc_rsp, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..03       MOV     ?V0 + 0,#0x3
   \   00003D   75..80       MOV     ?V0 + 1,#-0x80
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7905         MOV     R1,#0x5
   \   000047   EA           MOV     A,R2
   \   000048   FC           MOV     R4,A
   \   000049   EB           MOV     A,R3
   \   00004A                REQUIRE ?Subroutine46
   \   00004A                ; // Fall through to label ?Subroutine46
    705          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   FD           MOV     R5,A
   \   000001   7402         MOV     A,#0x2
   \   000003   12....       LCALL   ?XSTACK_DISP0_8
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   00000D   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?DEALLOC_XSTACK8
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001C   7F02         MOV     R7,#0x2
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
    706          
    707          /*********************************************************************
    708           * @fn          ZDP_SimpleDescMsg
    709           *
    710           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    711           *              specified device.
    712           *
    713           * @param       dstAddr - destination address
    714           * @param       Status - message status (ZDP_SUCCESS or other)
    715           * @param       pSimpleDesc - pointer to the node descriptor
    716           * @param       SecurityEnable - Security Options
    717           *
    718           * @return      afStatus_t
    719           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    720          afStatus_t ZDP_SimpleDescMsg( byte TransSeq, zAddrType_t *dstAddr, byte Status,
   \                     ZDP_SimpleDescMsg:
    721                                        SimpleDescriptionFormat_t *pSimpleDesc,
    722                                        cId_t clusterID, byte SecurityEnable )
    723          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 4,R2
   \   000014   8B..         MOV     ?V0 + 5,R3
   \   000016   8C..         MOV     ?V0 + 6,R4
   \   000018   7410         MOV     A,#0x10
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000020   7412         MOV     A,#0x12
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine30 & 0xFFFF
    724            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_64:
   \   000028   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   00002B   12....       LCALL   ?Subroutine15 & 0xFFFF
    725            uint8 i, len;
    726            uint8 protoVer;
    727          
    728            protoVer = NLME_GetProtocolVersion();
   \                     ??CrossCallReturnLabel_104:
   \   00002E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000031   E9           MOV     A,R1
   \   000032   FB           MOV     R3,A
    729          
    730            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \   000033   E5..         MOV     A,?V0 + 6
   \   000035   7043         JNZ     ??ZDP_SimpleDescMsg_0
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   7002         JNZ     ??ZDP_SimpleDescMsg_1
   \   00003B   E5..         MOV     A,?V0 + 1
   \                     ??ZDP_SimpleDescMsg_1:
   \   00003D   603B         JZ      ??ZDP_SimpleDescMsg_0
    731            {
    732              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    733              len = 1 + 2 + 1 + 8;
    734              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters)
    735                      * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
   \   00003F   7401         MOV     A,#0x1
   \   000041   6B           XRL     A,R3
   \   000042   6004         JZ      ??ZDP_SimpleDescMsg_2
   \   000044   7802         MOV     R0,#0x2
   \   000046   8002         SJMP    ??ZDP_SimpleDescMsg_3
   \                     ??ZDP_SimpleDescMsg_2:
   \   000048   7801         MOV     R0,#0x1
   \                     ??ZDP_SimpleDescMsg_3:
   \   00004A   85..82       MOV     DPL,?V0 + 0
   \   00004D   85..83       MOV     DPH,?V0 + 1
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   85..82       MOV     DPL,?V0 + 0
   \   00005D   85..83       MOV     DPH,?V0 + 1
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   FA           MOV     R2,A
   \   000067   E0           MOVX    A,@DPTR
   \   000068   2A           ADD     A,R2
   \   000069   F5F0         MOV     B,A
   \   00006B   E8           MOV     A,R0
   \   00006C   A4           MUL     AB
   \   00006D   240C         ADD     A,#0xc
   \   00006F   FA           MOV     R2,A
    736            }
    737            else
    738            {
    739              len = 2; // Status + desc length
    740            }
    741            if ( len >= ZDP_BUF_SZ-1 )
   \   000070   C3           CLR     C
   \   000071   944F         SUBB    A,#0x4f
   \   000073   4007         JC      ??ZDP_SimpleDescMsg_4
    742            {
    743              return afStatus_MEM_FAIL;
   \   000075   7981         MOV     R1,#-0x7f
   \   000077   02....       LJMP    ??ZDP_SimpleDescMsg_5 & 0xFFFF
    744            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00007A   7A02         MOV     R2,#0x2
    745          
    746            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_4:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   E5..         MOV     A,?V0 + 6
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   AE82         MOV     R6,DPL
   \   000086   AF83         MOV     R7,DPH
    747          
    748            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000088   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00008B   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    749            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_6:
   \   00008E   90....       MOV     DPTR,#(ZDAppNwkAddr + 1)
   \   000091   12....       LCALL   ?Subroutine39 & 0xFFFF
    750          
    751            if ( len > 2 )
   \                     ??CrossCallReturnLabel_83:
   \   000094   EA           MOV     A,R2
   \   000095   C3           CLR     C
   \   000096   9403         SUBB    A,#0x3
   \   000098   5003         JNC     $+5
   \   00009A   02....       LJMP    ??ZDP_SimpleDescMsg_6 & 0xFFFF
    752            {
    753              *pBuf++ = len - 4;   // Simple descriptor length
   \   00009D   74FC         MOV     A,#-0x4
   \   00009F   2A           ADD     A,R2
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   0E           INC     R6
   \   0000A3   0E           INC     R6
   \   0000A4   AF83         MOV     R7,DPH
    754          
    755              *pBuf++ = pSimpleDesc->EndPoint;
   \   0000A6   85..82       MOV     DPL,?V0 + 0
   \   0000A9   85..83       MOV     DPH,?V0 + 1
   \   0000AC   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    756              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_7:
   \   0000AF   85..82       MOV     DPL,?V0 + 0
   \   0000B2   85..83       MOV     DPH,?V0 + 1
   \   0000B5   A3           INC     DPTR
   \   0000B6   A882         MOV     R0,DPL
   \   0000B8   A983         MOV     R1,DPH
   \   0000BA   12....       LCALL   ?Subroutine2 & 0xFFFF
    757              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
    758              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_4:
   \   0000BD   E5..         MOV     A,?V0 + 0
   \   0000BF   2403         ADD     A,#0x3
   \   0000C1   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000C4   12....       LCALL   ?Subroutine2 & 0xFFFF
    759              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
    760          
    761              if ( protoVer == ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_5:
   \   0000C7   7401         MOV     A,#0x1
   \   0000C9   6B           XRL     A,R3
   \   0000CA   85..82       MOV     DPL,?V0 + 0
   \   0000CD   85..83       MOV     DPH,?V0 + 1
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   7011         JNZ     ??ZDP_SimpleDescMsg_7
    762              {
    763                *pBuf++ = (byte)((pSimpleDesc->AppDevVer << 4) | (pSimpleDesc->Reserved));
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FC           MOV     R4,A
   \   0000D9   C4           SWAP    A
   \   0000DA   540F         ANL     A,#0xf
   \   0000DC   C0E0         PUSH    A
   \   0000DE   EC           MOV     A,R4
   \   0000DF   C4           SWAP    A
   \   0000E0   54F0         ANL     A,#0xf0
   \   0000E2   FC           MOV     R4,A
   \   0000E3   D0E0         POP     A
   \   0000E5   4C           ORL     A,R4
   \   0000E6   8004         SJMP    ??ZDP_SimpleDescMsg_8
    764              }
    765              else
    766              {
    767                *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C4           SWAP    A
   \   0000EA   54F0         ANL     A,#0xf0
   \                     ??ZDP_SimpleDescMsg_8:
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   0E           INC     R6
   \   0000F3   AF83         MOV     R7,DPH
    768              }
    769          
    770              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000F5   E5..         MOV     A,?V0 + 0
   \   0000F7   2406         ADD     A,#0x6
   \   0000F9   08           INC     R0
   \   0000FA   08           INC     R0
   \   0000FB   08           INC     R0
   \   0000FC   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000FF   12....       LCALL   ??Subroutine3_0 & 0xFFFF
    771              if ( pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_8:
   \   000102   8882         MOV     DPL,R0
   \   000104   8983         MOV     DPH,R1
   \   000106   E0           MOVX    A,@DPTR
   \   000107   6033         JZ      ??ZDP_SimpleDescMsg_9
    772              {
    773                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   000109   7C00         MOV     R4,#0x0
   \   00010B   801C         SJMP    ??ZDP_SimpleDescMsg_10
    774                {
    775                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_11:
   \   00010D   EC           MOV     A,R4
   \   00010E   C3           CLR     C
   \   00010F   33           RLC     A
   \   000110   F8           MOV     R0,A
   \   000111   E4           CLR     A
   \   000112   33           RLC     A
   \   000113   F9           MOV     R1,A
   \   000114   85..82       MOV     DPL,?V0 + 0
   \   000117   85..83       MOV     DPH,?V0 + 1
   \   00011A   12....       LCALL   ?Subroutine4 & 0xFFFF
    776                  if ( protoVer != ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_11:
   \   00011D   6009         JZ      ??CrossCallReturnLabel_9
    777                  {
    778                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   00011F   85..82       MOV     DPL,?V0 + 0
   \   000122   85..83       MOV     DPH,?V0 + 1
   \   000125   12....       LCALL   ?Subroutine3 & 0xFFFF
    779                }
    780              }
   \                     ??CrossCallReturnLabel_9:
   \   000128   0C           INC     R4
   \                     ??ZDP_SimpleDescMsg_10:
   \   000129   85..82       MOV     DPL,?V0 + 0
   \   00012C   85..83       MOV     DPH,?V0 + 1
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   FD           MOV     R5,A
   \   000137   EC           MOV     A,R4
   \   000138   C3           CLR     C
   \   000139   9D           SUBB    A,R5
   \   00013A   40D1         JC      ??ZDP_SimpleDescMsg_11
    781              }
    782              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_9:
   \   00013C   E5..         MOV     A,?V0 + 0
   \   00013E   2409         ADD     A,#0x9
   \   000140   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000143   12....       LCALL   ?Subroutine31 & 0xFFFF
    783              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_66:
   \   000146   8882         MOV     DPL,R0
   \   000148   8983         MOV     DPH,R1
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   603E         JZ      ??ZDP_SimpleDescMsg_12
    784              {
    785                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   00014D   7C00         MOV     R4,#0x0
   \                     ??ZDP_SimpleDescMsg_13:
   \   00014F   85..82       MOV     DPL,?V0 + 0
   \   000152   85..83       MOV     DPH,?V0 + 1
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   FD           MOV     R5,A
   \   000160   EC           MOV     A,R4
   \   000161   C3           CLR     C
   \   000162   9D           SUBB    A,R5
   \   000163   5026         JNC     ??ZDP_SimpleDescMsg_12
    786                {
    787                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000165   EC           MOV     A,R4
   \   000166   C3           CLR     C
   \   000167   33           RLC     A
   \   000168   F8           MOV     R0,A
   \   000169   E4           CLR     A
   \   00016A   33           RLC     A
   \   00016B   F9           MOV     R1,A
   \   00016C   85..82       MOV     DPL,?V0 + 0
   \   00016F   85..83       MOV     DPH,?V0 + 1
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   12....       LCALL   ?Subroutine4 & 0xFFFF
    788                  if ( protoVer != ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_12:
   \   000178   600C         JZ      ??CrossCallReturnLabel_10
    789                  {
    790                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   00017A   85..82       MOV     DPL,?V0 + 0
   \   00017D   85..83       MOV     DPH,?V0 + 1
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   12....       LCALL   ?Subroutine3 & 0xFFFF
    791                }
    792              }
   \                     ??CrossCallReturnLabel_10:
   \   000186   0C           INC     R4
   \   000187   80C6         SJMP    ??ZDP_SimpleDescMsg_13
    793            }
    794            }
    795            else
    796            {
    797              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_6:
   \   000189   E4           CLR     A
   \   00018A   F0           MOVX    @DPTR,A
    798            }
    799          
    800            return fillAndSend( &TransSeq, dstAddr, clusterID, len );
   \                     ??ZDP_SimpleDescMsg_12:
   \   00018B                ; Setup parameters for call to function fillAndSend
   \   00018B   78..         MOV     R0,#?V0 + 2
   \   00018D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000190   EA           MOV     A,R2
   \   000191   F9           MOV     R1,A
   \   000192   AC..         MOV     R4,?V0 + 4
   \   000194   AD..         MOV     R5,?V0 + 5
   \   000196   7402         MOV     A,#0x2
   \   000198   12....       LCALL   ?XSTACK_DISP0_8
   \   00019B   AA82         MOV     R2,DPL
   \   00019D   AB83         MOV     R3,DPH
   \   00019F   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   0001A2   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   0001A4   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001A7   7402         MOV     A,#0x2
   \   0001A9   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_5:
   \   0001AC   7401         MOV     A,#0x1
   \   0001AE   02....       LJMP    ?Subroutine41 & 0xFFFF
    801          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F8           MOV     R0,A
   \                     ??Subroutine25_0:
   \   000001   E5..         MOV     A,?V0 + 1
   \   000003   3400         ADDC    A,#0x0
   \   000005                REQUIRE ?Subroutine44
   \   000005                ; // Fall through to label ?Subroutine44

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000006   7401         MOV     A,#0x1
   \   000008   6B           XRL     A,R3
   \   000009   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   A3           INC     DPTR
   \                     ??Subroutine3_0:
   \   000004   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   0E           INC     R6
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET
    802          
    803          /*********************************************************************
    804           * @fn          ZDP_EPRsp
    805           *
    806           * @brief       This builds and send an endpoint list. Used in
    807           *              Active_EP_rsp and Match_Desc_Rsp
    808           *              message.  This function sends unicast message to the
    809           *              requesting device.
    810           *
    811           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    812           * @param       dstAddr - destination address
    813           * @param       Status - message status (ZDP_SUCCESS or other)
    814           * @param       nwkAddr - Device's short address that this response describes
    815           * @param       Count - number of endpoint/interfaces in list
    816           * @param       pEPIntfList - Array of Endpoint/Interfaces
    817           * @param       SecurityEnable - Security Options
    818           *
    819           * @return      afStatus_t
    820           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    821          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    822                                  byte Status, uint16 nwkAddr, byte Count,
    823                                  byte *pEPList,
    824                                  byte SecurityEnable )
    825          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   8C..         MOV     ?V0 + 6,R4
   \   000018   8D..         MOV     ?V0 + 7,R5
   \   00001A   7411         MOV     A,#0x11
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FD           MOV     R5,A
   \   000021   7412         MOV     A,#0x12
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000029   7414         MOV     A,#0x14
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FC           MOV     R4,A
   \   000030   7415         MOV     A,#0x15
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine10 & 0xFFFF
    826            byte *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_23:
   \   000038   FB           MOV     R3,A
    827            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \   000039   75..04       MOV     ?V0 + 3,#0x4
    828            byte txOptions;
    829          
    830            if ( MsgType == Match_Desc_rsp )
   \   00003C   7406         MOV     A,#0x6
   \   00003E   6E           XRL     A,R6
   \   00003F   7003         JNZ     ??ZDP_EPRsp_0
   \   000041   7480         MOV     A,#-0x80
   \   000043   6F           XRL     A,R7
   \                     ??ZDP_EPRsp_0:
   \   000044   7005         JNZ     ??ZDP_EPRsp_1
    831              txOptions = AF_MSG_ACK_REQUEST;
   \   000046   75..10       MOV     ?V0 + 4,#0x10
   \   000049   8003         SJMP    ??ZDP_EPRsp_2
    832            else
    833              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00004B   75..00       MOV     ?V0 + 4,#0x0
    834          
    835              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   00004E   ED           MOV     A,R5
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
    836            *pBuf++ = LO_UINT16( nwkAddr );
   \   000055   E8           MOV     A,R0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
    837            *pBuf++ = HI_UINT16( nwkAddr );
   \   000058   E9           MOV     A,R1
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   AA82         MOV     R2,DPL
   \   00005D   AB83         MOV     R3,DPH
    838          
    839            *pBuf++ = Count;   // Endpoint/Interface count
   \   00005F   EC           MOV     A,R4
   \   000060   F0           MOVX    @DPTR,A
    840          
    841            if ( Count )
   \   000061   6024         JZ      ??ZDP_EPRsp_3
    842            {
    843              len += Count;
   \   000063   7404         MOV     A,#0x4
   \   000065   2C           ADD     A,R4
   \   000066   F5..         MOV     ?V0 + 3,A
    844              osal_memcpy( pBuf, pEPList, Count );
   \   000068                ; Setup parameters for call to function osal_memcpy
   \   000068   75..00       MOV     ?V0 + 2,#0x0
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000070   7D00         MOV     R5,#0x0
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   A3           INC     DPTR
   \   000077   0A           INC     R2
   \   000078   AB83         MOV     R3,DPH
   \   00007A   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   00007D   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   00007F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
    845            }
    846          
    847            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000087   E5..         MOV     A,?V0 + 4
   \   000089   90....       MOV     DPTR,#??ZDP_TxOptions
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D                ; Setup parameters for call to function fillAndSend
   \   00008D   8E..         MOV     ?V0 + 0,R6
   \   00008F   8F..         MOV     ?V0 + 1,R7
   \   000091   78..         MOV     R0,#?V0 + 0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   A9..         MOV     R1,?V0 + 3
   \   000098   AC..         MOV     R4,?V0 + 6
   \   00009A   AD..         MOV     R5,?V0 + 7
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   AA82         MOV     R2,DPL
   \   0000A3   AB83         MOV     R3,DPH
   \   0000A5   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   0000A8   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   0000AA   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000AD   7402         MOV     A,#0x2
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B2   E4           CLR     A
   \   0000B3   90....       MOV     DPTR,#??ZDP_TxOptions
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   02....       LJMP    ?Subroutine42 & 0xFFFF
    848          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FA           MOV     R2,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET
    849          
    850          #if defined ( ZDO_USERDESC_RESPONSE )
    851          /*********************************************************************
    852           * @fn          ZDP_UserDescRsp
    853           *
    854           * @brief       Build and send the User Decriptor Response.
    855           *
    856           *
    857           * @param       dstAddr - destination address
    858           * @param       nwkAddrOfInterest -
    859           * @param       userDesc -
    860           * @param       SecurityEnable - Security Options
    861           *
    862           * @return      ZStatus_t
    863           */
    864          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
    865                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    866                          byte SecurityEnable )
    867          {
    868            byte *pBuf = ZDP_TmpBuf;
    869            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    870          
    871            len += userDesc->len;
    872          
    873            *pBuf++ = ZSUCCESS;
    874          
    875            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
    876            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
    877          
    878            *pBuf++ = userDesc->len;
    879            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
    880          
    881            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
    882          }
    883          #endif // ZDO_USERDESC_RESPONSE
    884          
    885          #if defined ( ZDO_SERVERDISC_RESPONSE )
    886          /*********************************************************************
    887           * @fn          ZDP_ServerDiscRsp
    888           *
    889           * @brief       Build and send the Server_Discovery_rsp response.
    890           *
    891           * @param       transID - Transaction sequence number of request.
    892           * @param       dstAddr - Network Destination Address.
    893           * @param       status - Status of response to request.
    894           * @param       aoi - Network Address of Interest of request.
    895           * @param       serverMask - Bit map of service(s) being sought.
    896           * @param       SecurityEnable - Security Options
    897           *
    898           * @return      ZStatus_t
    899           */
    900          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
    901                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    902          {
    903            const byte len = 1  + 2;  // status + aoi + mask.
    904            byte *pBuf = ZDP_TmpBuf;
    905          
    906            *pBuf++ = status;
    907          
    908            *pBuf++ = LO_UINT16( serverMask );
    909            *pBuf++ = HI_UINT16( serverMask );
    910          
    911            return (ZStatus_t)fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
    912          }
    913          #endif // ZDO_USERDESC_RESPONSE
    914          
    915          /*********************************************************************
    916           * @fn          ZDP_GenericRsp
    917           *
    918           * @brief       Sends a response message with only the parameter status
    919           *              byte and the addr of interest for data.
    920           *              This function sends unicast message to the
    921           *              requesting device.
    922           *
    923           * @param       dstAddr - destination address
    924           * @param       status  - generic status for response
    925           * @param       aoi     - address of interest
    926           * @param       dstAddr - destination address
    927           * @param       rspId   - response cluster ID
    928           * @param       SecurityEnable - Security Options
    929           *
    930           * @return      afStatus_t
    931           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    932          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
    933                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
    934          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   740B         MOV     A,#0xb
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00001E   740D         MOV     A,#0xd
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine10 & 0xFFFF
    935            uint8 len;
    936          
    937            ZDP_TmpBuf[0] = status;
   \                     ??CrossCallReturnLabel_24:
   \   000026   F583         MOV     DPH,A
   \   000028   8A82         MOV     DPL,R2
   \   00002A   EC           MOV     A,R4
   \   00002B   F0           MOVX    @DPTR,A
    938            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   00002C   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F583         MOV     DPH,A
   \   000035   8A82         MOV     DPL,R2
   \   000037   A3           INC     DPTR
   \   000038   E8           MOV     A,R0
   \   000039   F0           MOVX    @DPTR,A
    939            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   00003A   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00003D   E9           MOV     A,R1
   \   00003E   F0           MOVX    @DPTR,A
    940          
    941            if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
   \   00003F                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00003F   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000042   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000044   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000047   E9           MOV     A,R1
   \   000048   6401         XRL     A,#0x1
   \   00004A   600A         JZ      ??ZDP_GenericRsp_0
    942            {
    943              // Length byte
    944              ZDP_TmpBuf[3] = 0;
   \   00004C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00004F   A3           INC     DPTR
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
    945              len = 4;
   \   000052   7904         MOV     R1,#0x4
   \   000054   8002         SJMP    ??ZDP_GenericRsp_1
    946            }
    947            else
    948            {
    949              len = 3;
   \                     ??ZDP_GenericRsp_0:
   \   000056   7903         MOV     R1,#0x3
    950            }
    951          
    952          
    953            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \                     ??ZDP_GenericRsp_1:
   \   000058                ; Setup parameters for call to function fillAndSend
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   EE           MOV     A,R6
   \   00005E   FC           MOV     R4,A
   \   00005F   EF           MOV     A,R7
   \   000060   02....       LJMP    ?Subroutine46 & 0xFFFF
    954          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET
    955          
    956          /*********************************************************************
    957           * Binding
    958           */
    959          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    960          /*********************************************************************
    961           * @fn          ZDP_EndDeviceBindReq
    962           *
    963           * @brief       This builds and sends a End_Device_Bind_req message.
    964           *              This function sends a unicast message.
    965           *
    966           * @param       dstAddr - destination address
    967           * @param       LocalCoordinator - short address of local coordinator
    968           * @param       epIntf - Endpoint/Interface of Simple Desc
    969           * @param       ProfileID - Profile ID
    970           *
    971           *   The Input cluster list is the opposite of what you would think.
    972           *   This is the output cluster list of this device
    973           * @param       NumInClusters - number of input clusters
    974           * @param       InClusterList - input cluster ID list
    975           *
    976           *   The Output cluster list is the opposite of what you would think.
    977           *   This is the input cluster list of this device
    978           * @param       NumOutClusters - number of output clusters
    979           * @param       OutClusterList - output cluster ID list
    980           *
    981           * @param       SecurityEnable - Security Options
    982           *
    983           * @return      afStatus_t
    984           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    985          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
    986                                           uint16 LocalCoordinator,
    987                                           byte endPoint,
    988                                           uint16 ProfileID,
    989                                           byte NumInClusters, cId_t *InClusterList,
    990                                           byte NumOutClusters, cId_t *OutClusterList,
    991                                           byte SecurityEnable )
    992          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8C..         MOV     ?V0 + 0,R4
   \   00001E   8D..         MOV     ?V0 + 1,R5
   \   000020   7413         MOV     A,#0x13
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000028   7415         MOV     A,#0x15
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 7,A
   \   000030   7418         MOV     A,#0x18
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 6,A
    993            uint8 *pBuf = ZDP_TmpBuf;
   \   000038   12....       LCALL   ?Subroutine12 & 0xFFFF
    994            uint8 i, len;
    995            uint8 *ieeeAddr;
    996            uint8 protoVer = NLME_GetProtocolVersion();
   \                     ??CrossCallReturnLabel_102:
   \   00003B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003E   E9           MOV     A,R1
   \   00003F   F5..         MOV     ?V0 + 5,A
    997          
    998            if ( protoVer != ZB_PROT_V1_0 )
   \   000041   7401         MOV     A,#0x1
   \   000043   65..         XRL     A,?V0 + 5
   \   000045   6007         JZ      ??ZDP_EndDeviceBindReq_0
    999            {
   1000              // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1001              len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   \   000047   75..0F       MOV     ?V0 + 4,#0xf
   \   00004A   7802         MOV     R0,#0x2
   \   00004C   8005         SJMP    ??ZDP_EndDeviceBindReq_1
   1002            }
   1003            else
   1004            {
   1005              // LocalCoordinator + ep + ProfileID +  NumInClusters + NumOutClusters.
   1006              len = 2 + 1 + 2 + 1 + 1;
   \                     ??ZDP_EndDeviceBindReq_0:
   \   00004E   75..07       MOV     ?V0 + 4,#0x7
   \   000051   7801         MOV     R0,#0x1
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000053   E5..         MOV     A,?V0 + 6
   \   000055   25..         ADD     A,?V0 + 7
   \   000057   F5F0         MOV     B,A
   \   000059   E8           MOV     A,R0
   \   00005A   A4           MUL     AB
   \   00005B   25..         ADD     A,?V0 + 4
   \   00005D   F5..         MOV     ?V0 + 4,A
   1007            }
   1008          
   1009            len += (NumInClusters + NumOutClusters) * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
   1010            if ( len >= ZDP_BUF_SZ-1 )
   \   00005F   C3           CLR     C
   \   000060   944F         SUBB    A,#0x4f
   \   000062   4005         JC      ??ZDP_EndDeviceBindReq_2
   1011            {
   1012              return afStatus_MEM_FAIL;
   \   000064   7981         MOV     R1,#-0x7f
   \   000066   02....       LJMP    ??ZDP_EndDeviceBindReq_3 & 0xFFFF
   1013            }
   1014          
   1015            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000069   85..82       MOV     DPL,?V0 + 2
   \   00006C   85..83       MOV     DPH,?V0 + 3
   \   00006F   E5..         MOV     A,?V0 + 0
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   1016            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000073   E5..         MOV     A,?V0 + 1
   \   000075   12....       LCALL   ?Subroutine23 & 0xFFFF
   1017          
   1018            if ( protoVer != ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_47:
   \   000078   7401         MOV     A,#0x1
   \   00007A   65..         XRL     A,?V0 + 5
   \   00007C   601C         JZ      ??ZDP_EndDeviceBindReq_4
   1019            {
   1020              ieeeAddr = NLME_GetExtAddr();
   1021              pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   00007E                ; Setup parameters for call to function osal_cpyExtAddr
   \   00007E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00007E   90....       MOV     DPTR,#(NLME_GetExtAddr & 0xffff)
   \   000081   74..         MOV     A,#((NLME_GetExtAddr >> 16) & 0xff)
   \   000083   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000086   EA           MOV     A,R2
   \   000087   FC           MOV     R4,A
   \   000088   EB           MOV     A,R3
   \   000089   FD           MOV     R5,A
   \   00008A   AA..         MOV     R2,?V0 + 2
   \   00008C   AB..         MOV     R3,?V0 + 3
   \   00008E   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   000091   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   000093   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000096   8A..         MOV     ?V0 + 2,R2
   \   000098   8B..         MOV     ?V0 + 3,R3
   1022            }
   1023          
   1024            *pBuf++ = endPoint;
   \                     ??ZDP_EndDeviceBindReq_4:
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   85..82       MOV     DPL,?V0 + 2
   \   0000A4   85..83       MOV     DPH,?V0 + 3
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   A3           INC     DPTR
   1025          
   1026            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   0000A9   EE           MOV     A,R6
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   1027            *pBuf++ = HI_UINT16( ProfileID );
   \   0000AC   EF           MOV     A,R7
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   1028          
   1029            *pBuf++ = NumInClusters; // Input cluster list
   \   0000AF   E5..         MOV     A,?V0 + 7
   \   0000B1   12....       LCALL   ?Subroutine22 & 0xFFFF
   1030            for ( i = 0; i < NumInClusters; ++i )
   \                     ??CrossCallReturnLabel_43:
   \   0000B4   801A         SJMP    ??ZDP_EndDeviceBindReq_5
   1031            {
   1032              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000B6   EA           MOV     A,R2
   \   0000B7   C3           CLR     C
   \   0000B8   33           RLC     A
   \   0000B9   F8           MOV     R0,A
   \   0000BA   E4           CLR     A
   \   0000BB   33           RLC     A
   \   0000BC   F9           MOV     R1,A
   \   0000BD   7416         MOV     A,#0x16
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ?Subroutine0 & 0xFFFF
   1033              if (protoVer != ZB_PROT_V1_0)  {
   \                     ??CrossCallReturnLabel_0:
   \   0000C5   6008         JZ      ??CrossCallReturnLabel_2
   1034                *pBuf++ = HI_UINT16(InClusterList[i]);
   \   0000C7   7416         MOV     A,#0x16
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ?Subroutine1 & 0xFFFF
   1035              }
   1036            }
   \                     ??CrossCallReturnLabel_2:
   \   0000CF   0A           INC     R2
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000D0   EA           MOV     A,R2
   \   0000D1   C3           CLR     C
   \   0000D2   95..         SUBB    A,?V0 + 7
   \   0000D4   40E0         JC      ??ZDP_EndDeviceBindReq_6
   1037          
   1038            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000D6   85..82       MOV     DPL,?V0 + 2
   \   0000D9   85..83       MOV     DPH,?V0 + 3
   \   0000DC   E5..         MOV     A,?V0 + 6
   \   0000DE   12....       LCALL   ?Subroutine22 & 0xFFFF
   1039            for ( i = 0; i < NumOutClusters; ++i )
   \                     ??CrossCallReturnLabel_44:
   \   0000E1   801A         SJMP    ??ZDP_EndDeviceBindReq_7
   1040            {
   1041              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000E3   EA           MOV     A,R2
   \   0000E4   C3           CLR     C
   \   0000E5   33           RLC     A
   \   0000E6   F8           MOV     R0,A
   \   0000E7   E4           CLR     A
   \   0000E8   33           RLC     A
   \   0000E9   F9           MOV     R1,A
   \   0000EA   7419         MOV     A,#0x19
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL   ?Subroutine0 & 0xFFFF
   1042              if (protoVer != ZB_PROT_V1_0)  {
   \                     ??CrossCallReturnLabel_1:
   \   0000F2   6008         JZ      ??CrossCallReturnLabel_3
   1043                *pBuf++ = HI_UINT16(OutClusterList[i]);
   \   0000F4   7419         MOV     A,#0x19
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL   ?Subroutine1 & 0xFFFF
   1044              }
   1045            }
   \                     ??CrossCallReturnLabel_3:
   \   0000FC   0A           INC     R2
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0000FD   EA           MOV     A,R2
   \   0000FE   C3           CLR     C
   \   0000FF   95..         SUBB    A,?V0 + 6
   \   000101   40E0         JC      ??ZDP_EndDeviceBindReq_8
   1046          
   1047            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   000103                ; Setup parameters for call to function fillAndSend
   \   000103   75..20       MOV     ?V0 + 0,#0x20
   \   000106   75..00       MOV     ?V0 + 1,#0x0
   \   000109   78..         MOV     R0,#?V0 + 0
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010E   A9..         MOV     R1,?V0 + 4
   \   000110   7403         MOV     A,#0x3
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000118   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00011B   7402         MOV     A,#0x2
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000120   7403         MOV     A,#0x3
   \   000122   02....       LJMP    ??Subroutine42_0 & 0xFFFF
   1048          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   7A00         MOV     R2,#0x0
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000006   65..         XRL     A,?V0 + 5
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FB           MOV     R3,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   8B82         MOV     DPL,R3
   \   000008   22           RET
   1049          #endif // ZDO_ENDDEVICEBIND_REQUEST
   1050          
   1051          #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
   1052          /*********************************************************************
   1053           * @fn          ZDP_BindUnbindReq
   1054           *
   1055           * @brief       This builds and send a Bind_req or Unbind_req message
   1056           *              Depending on the ClusterID. This function
   1057           *              sends a unicast message to the local coordinator.
   1058           *
   1059           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1060           * @param       dstAddr - destination address of the message
   1061           * @param       SourceAddr - source 64 bit address of the binding
   1062           * @param       SrcEPIntf - Source endpoint/interface
   1063           * @param       ClusterID - Binding cluster ID
   1064           * @param       DestinationAddr - destination 64 bit addr of binding
   1065           * @param       DstEPIntf - destination endpoint/interface
   1066           * @param       SecurityEnable - Security Options
   1067           *
   1068           * @return      afStatus_t
   1069           */
   1070          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   1071                                        byte *SourceAddr, byte SrcEndPoint,
   1072                                        cId_t ClusterID,
   1073                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1074                                        byte SecurityEnable )
   1075          {
   1076            uint8 *pBuf = ZDP_TmpBuf;
   1077            uint8  protoVer;
   1078            byte len;
   1079          
   1080            protoVer = NLME_GetProtocolVersion();
   1081          
   1082            if ( protoVer == ZB_PROT_V1_0 )
   1083            {
   1084              // SourceAddr + SrcEPIntf + ClusterID +  DestinationAddr + DstEPIntf.
   1085              len = Z_EXTADDR_LEN + 1 + sizeof( uint8 ) + Z_EXTADDR_LEN + 1;
   1086            }
   1087            else
   1088            {
   1089              // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1090              len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   1091              if ( destinationAddr->addrMode == Addr64Bit )
   1092                len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   1093              else if ( destinationAddr->addrMode == AddrGroup )
   1094                len += sizeof ( uint16 );
   1095            }
   1096          
   1097            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   1098            *pBuf++ = SrcEndPoint;
   1099          
   1100            *pBuf++ = LO_UINT16( ClusterID );
   1101            if ( protoVer != ZB_PROT_V1_0 )
   1102            {
   1103              *pBuf++ = HI_UINT16( ClusterID );
   1104          
   1105              *pBuf++ = destinationAddr->addrMode;
   1106              if ( destinationAddr->addrMode == Addr64Bit )
   1107              {
   1108                pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1109                *pBuf = DstEndPoint;
   1110              }
   1111              else if ( destinationAddr->addrMode == AddrGroup )
   1112              {
   1113                *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   1114                *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   1115              }
   1116            }
   1117            else
   1118            {
   1119              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1120              *pBuf = DstEndPoint;
   1121            }
   1122          
   1123            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   1124          }
   1125          #endif // ZDO_BIND_UNBIND_REQUEST
   1126          
   1127          /*********************************************************************
   1128           * Network Management
   1129           */
   1130          
   1131          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
   1132          /*********************************************************************
   1133           * @fn          ZDP_MgmtNwkDiscReq
   1134           *
   1135           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1136           *              function sends a unicast message.
   1137           *
   1138           * @param       dstAddr - destination address of the message
   1139           * @param       ScanChannels - 32 bit address bit map
   1140           * @param       StartIndex - Starting index within the reporting network
   1141           *                           list
   1142           * @param       SecurityEnable - Security Options
   1143           *
   1144           * @return      afStatus_t
   1145           */
   1146          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   1147                                         uint32 ScanChannels,
   1148                                         byte ScanDuration,
   1149                                         byte StartIndex,
   1150                                         byte SecurityEnable )
   1151          {
   1152            byte *pBuf = ZDP_TmpBuf;
   1153            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1154          
   1155            *pBuf++ = BREAK_UINT32( ScanChannels, 0 );
   1156            *pBuf++ = BREAK_UINT32( ScanChannels, 1 );
   1157            *pBuf++ = BREAK_UINT32( ScanChannels, 2 );
   1158            *pBuf++ = BREAK_UINT32( ScanChannels, 3 );
   1159          
   1160            *pBuf++ = ScanDuration;
   1161            *pBuf = StartIndex;
   1162          
   1163            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   1164          }
   1165          #endif // ZDO_MGMT_NWKDISC_REQUEST
   1166          
   1167          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
   1168          /*********************************************************************
   1169           * @fn          ZDP_MgmtDirectJoinReq
   1170           *
   1171           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1172           *              function sends a unicast message.
   1173           *
   1174           * @param       dstAddr - destination address of the message
   1175           * @param       deviceAddr - 64 bit IEEE Address
   1176           * @param       SecurityEnable - Security Options
   1177           *
   1178           * @return      afStatus_t
   1179           */
   1180          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   1181                                         byte *deviceAddr,
   1182                                         byte capInfo,
   1183                                         byte SecurityEnable )
   1184          {
   1185            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   1186            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   1187          
   1188            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   1189          }
   1190          #endif // ZDO_MGMT_JOINDIRECT_REQUEST
   1191          
   1192          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
   1193          /*********************************************************************
   1194           * @fn          ZDP_MgmtPermitJoinReq
   1195           *
   1196           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1197           *
   1198           * @param       dstAddr - destination address of the message
   1199           * @param       duration - Permit duration
   1200           * @param       TcSignificance - Trust Center Significance
   1201           *
   1202           * @return      afStatus_t
   1203           */
   1204          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   1205                                            byte TcSignificance, byte SecurityEnable )
   1206          {
   1207            // Build buffer
   1208            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   1209            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   1210          
   1211            // Send the message
   1212            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1213                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   1214          }
   1215          #endif // ZDO_MGMT_PERMIT_JOIN_REQUEST
   1216          
   1217          /*********************************************************************
   1218           * Network Management Responses
   1219           */
   1220          
   1221          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1222          /*********************************************************************
   1223           * @fn          ZDP_MgmtNwkDiscRsp
   1224           *
   1225           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1226           *              function sends a unicast message.
   1227           *
   1228           * @param       dstAddr - destination address of the message
   1229           * @param       Status - message status (ZDP_SUCCESS or other)
   1230           * @param       NetworkCount - Total number of networks found
   1231           * @param       StartIndex - Starting index within the reporting network
   1232           *                           list
   1233           * @param       NetworkListCount - number of network lists included
   1234           *                                 in this message
   1235           * @param       NetworkList - List of network descriptors
   1236           * @param       SecurityEnable - Security Options
   1237           *
   1238           * @return      afStatus_t
   1239           */
   1240          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   1241                                      byte Status,
   1242                                      byte NetworkCount,
   1243                                      byte StartIndex,
   1244                                      byte NetworkListCount,
   1245                                      networkDesc_t *NetworkList,
   1246                                      byte SecurityEnable )
   1247          {
   1248            byte *buf;
   1249            byte *pBuf;
   1250            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1251            byte idx;
   1252          
   1253            byte proVer = NLME_GetProtocolVersion();
   1254          
   1255            if ( proVer == ZB_PROT_V1_0 )
   1256            {
   1257              len += ((NetworkListCount - StartIndex) * ( ZDP_NETWORK_DISCRIPTOR_SIZE - 2 ));  // Four half bytes
   1258            }
   1259            else //Include the extended PanID
   1260            {
   1261              len += ((NetworkListCount - StartIndex) * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   1262            }
   1263          
   1264            buf = osal_mem_alloc( len+1 );
   1265            if ( buf == NULL )
   1266            {
   1267              return afStatus_MEM_FAIL;
   1268            }
   1269          
   1270            pBuf = buf+1;
   1271          
   1272            *pBuf++ = Status;
   1273            *pBuf++ = NetworkCount;
   1274            *pBuf++ = StartIndex;
   1275            *pBuf++ = NetworkListCount;
   1276          
   1277            for ( idx = StartIndex; idx < (NetworkListCount - StartIndex); idx++ )
   1278            {
   1279              if ( proVer == ZB_PROT_V1_0 )
   1280              {
   1281                *pBuf++  = LO_UINT16( NetworkList->panId );            // PANID
   1282                *pBuf++  = HI_UINT16( NetworkList->panId );
   1283              }
   1284              else
   1285              {
   1286                osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1287                pBuf += Z_EXTADDR_LEN;
   1288              }
   1289          
   1290              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1291              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1292              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1293              *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
   1294              *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
   1295          
   1296              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1297              {
   1298                *pBuf++ = TRUE;                         // Permit Joining
   1299              }
   1300              else
   1301              {
   1302                *pBuf++ = FALSE;
   1303              }
   1304          
   1305              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   1306            }
   1307          
   1308            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   1309          }
   1310          #endif // ZDO_MGMT_NWKDISC_RESPONSE
   1311          
   1312          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
   1313          /*********************************************************************
   1314           * @fn          ZDP_MgmtLqiRsp
   1315           *
   1316           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1317           *              function sends a unicast message.
   1318           *
   1319           * @param       dstAddr - destination address of the message
   1320           * @param       Status - message status (ZDP_SUCCESS or other)
   1321           * @param       NeighborLqiEntries - Total number of entries found
   1322           * @param       StartIndex - Starting index within the reporting list
   1323           * @param       NeighborLqiCount - number of lists included
   1324           *                                 in this message
   1325           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1326           *                is the list to be sent, not the entire list
   1327           * @param       SecurityEnable - true if secure
   1328           *
   1329           * @return      ZStatus_t
   1330           */
   1331          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   1332                                    byte Status,
   1333                                    byte NeighborLqiEntries,
   1334                                    byte StartIndex,
   1335                                    byte NeighborLqiCount,
   1336                                    ZDP_MgmtLqiItem_t* NeighborList,
   1337                                    byte SecurityEnable )
   1338          {
   1339            ZDP_MgmtLqiItem_t* list = NeighborList;
   1340            byte *buf, *pBuf;
   1341            byte len, x;
   1342            byte proVer = NLME_GetProtocolVersion();
   1343          
   1344            if ( ZSuccess != Status )
   1345            {
   1346              ZDP_TmpBuf[0] = Status;
   1347              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1348            }
   1349          
   1350            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1351            //  neighbor LQI data.
   1352            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * (( proVer == ZB_PROT_V1_0 ) ? ZDP_MGMTLQI_SIZE : ZDP_MGMTLQI_EXTENDED_SIZE));
   1353          
   1354            buf = osal_mem_alloc( len+1 );
   1355            if ( buf == NULL )
   1356            {
   1357              return afStatus_MEM_FAIL;
   1358            }
   1359          
   1360            pBuf = buf+1;
   1361          
   1362            *pBuf++ = Status;
   1363            *pBuf++ = NeighborLqiEntries;
   1364            *pBuf++ = StartIndex;
   1365            *pBuf++ = NeighborLqiCount;
   1366          
   1367            for ( x = 0; x < NeighborLqiCount; x++ )
   1368            {
   1369              if ( proVer == ZB_PROT_V1_0 )
   1370              {
   1371                *pBuf++  = LO_UINT16( list->panID );            // PANID
   1372                *pBuf++  = HI_UINT16( list->panID );
   1373              }
   1374              else
   1375              {
   1376                osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   1377                pBuf += Z_EXTADDR_LEN;
   1378              }
   1379          
   1380              // EXTADDR
   1381              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   1382          
   1383              // NWKADDR
   1384              *pBuf++ = LO_UINT16( list->nwkAddr );
   1385              *pBuf++ = HI_UINT16( list->nwkAddr );
   1386          
   1387              // DEVICETYPE
   1388              *pBuf = list->devType;
   1389          
   1390              // RXONIDLE
   1391              *pBuf |= (uint8)(list->rxOnIdle << 2);
   1392          
   1393              if ( proVer == ZB_PROT_V1_0 )
   1394              {
   1395                // RELATIONSHIP
   1396                *pBuf |= (uint8)(list->relation << 3);
   1397          
   1398                // PERMITJOINING
   1399                *pBuf++ |= (uint8)(list->permit << 5);
   1400          
   1401                // DEPTH
   1402                *pBuf++ = list->depth;
   1403              }
   1404          
   1405              else
   1406              {
   1407                // RELATIONSHIP
   1408                *pBuf++ |= (uint8)(list->relation << 4);
   1409          
   1410                // PERMITJOINING
   1411                *pBuf++ = (uint8)(list->permit);
   1412          
   1413                // DEPTH
   1414                *pBuf++ = list->depth;
   1415              }
   1416          
   1417              // LQI
   1418              *pBuf++ = list->lqi;
   1419          
   1420              list++; // next list entry
   1421            }
   1422          
   1423            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   1424          }
   1425          #endif // ZDO_MGMT_LQI_RESPONSE && RTR_NWK
   1426          
   1427          #if defined ( ZDO_MGMT_RTG_RESPONSE )
   1428          /*********************************************************************
   1429           * @fn          ZDP_MgmtRtgRsp
   1430           *
   1431           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1432           *              function sends a unicast message.
   1433           *
   1434           * @param       dstAddr - destination address of the message
   1435           * @param       Status - message status (ZDP_SUCCESS or other)
   1436           * @param       RoutingTableEntries - Total number of entries
   1437           * @param       StartIndex - Starting index within the reporting list
   1438           * @param       RoutingTableListCount - number of entries included
   1439           *                                      in this message
   1440           * @param       RoutingTableList - List of Routing Table entries
   1441           * @param       SecurityEnable - true to enable security for this message
   1442           *
   1443           * @return      ZStatus_t
   1444           */
   1445          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   1446                                      byte Status,
   1447                                      byte RoutingTableEntries,
   1448                                      byte StartIndex,
   1449                                      byte RoutingListCount,
   1450                                      rtgItem_t *RoutingTableList,
   1451                                      byte SecurityEnable )
   1452          {
   1453            byte *buf;
   1454            byte *pBuf;
   1455            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1456            byte len = 1 + 1 + 1 + 1;
   1457            byte x;
   1458          
   1459            // Add an array for Routing List data
   1460            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   1461          
   1462            buf = osal_mem_alloc( (short)(len+1) );
   1463            if ( buf == NULL )
   1464            {
   1465              return afStatus_MEM_FAIL;
   1466            }
   1467          
   1468            pBuf = buf+1;
   1469          
   1470            *pBuf++ = Status;
   1471            *pBuf++ = RoutingTableEntries;
   1472            *pBuf++ = StartIndex;
   1473            *pBuf++ = RoutingListCount;
   1474          
   1475            for ( x = 0; x < RoutingListCount; x++ )
   1476            {
   1477              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   1478              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   1479              *pBuf++ = RoutingTableList->status;
   1480              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   1481              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   1482              RoutingTableList++;    // Move to next list entry
   1483            }
   1484          
   1485            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   1486          }
   1487          #endif // ZDO_MGMT_RTG_RESPONSE
   1488          
   1489          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
   1490          /*********************************************************************
   1491           * @fn          ZDP_MgmtBindRsp
   1492           *
   1493           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1494           *              function sends a unicast message.
   1495           *
   1496           * @param       dstAddr - destination address of the message
   1497           * @param       Status - message status (ZDP_SUCCESS or other)
   1498           * @param       BindingTableEntries - Total number of entries
   1499           * @param       StartIndex - Starting index within the reporting list
   1500           * @param       BindingTableListCount - number of entries included
   1501           *                                 in this message
   1502           * @param       BindingTableList - List of Binding Table entries
   1503           * @param       SecurityEnable - Security Options
   1504           *
   1505           * @return      ZStatus_t
   1506           */
   1507          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   1508                                      byte Status,
   1509                                      byte BindingTableEntries,
   1510                                      byte StartIndex,
   1511                                      byte BindingTableListCount,
   1512                                      apsBindingItem_t *BindingTableList,
   1513                                      byte SecurityEnable )
   1514          {
   1515            uint8 *buf;
   1516            uint8 *pBuf;
   1517            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1518            uint8 len;    // Actual length varies due to different addrMode
   1519            uint8 x;
   1520            uint8 protoVer;
   1521            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1522            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1523          
   1524            protoVer = NLME_GetProtocolVersion();
   1525          
   1526            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1527            maxLen = 1 + 1 + 1 + 1;
   1528            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1529            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   1530          
   1531            if ( buf == NULL )
   1532            {
   1533              return afStatus_MEM_FAIL;
   1534            }
   1535          
   1536            pBuf = buf+1;
   1537          
   1538            *pBuf++ = Status;
   1539            *pBuf++ = BindingTableEntries;
   1540            *pBuf++ = StartIndex;
   1541            *pBuf++ = BindingTableListCount;
   1542          
   1543            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1544            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1545            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1546            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1547          
   1548            len = 1 + 1 + 1 + 1;
   1549            for ( x = 0; x < BindingTableListCount; x++ )
   1550            {
   1551              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1552              *pBuf++ = BindingTableList->srcEP;
   1553          
   1554              // Cluster ID
   1555              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1556          
   1557              if ( protoVer != ZB_PROT_V1_0 )
   1558              {
   1559                *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1560              }
   1561          
   1562              if ( protoVer == ZB_PROT_V1_0 )
   1563              {
   1564                len += ZDP_BINDINGENTRY_SIZE;
   1565                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1566                *pBuf++ = BindingTableList->dstEP;
   1567              }
   1568              else
   1569              {
   1570                *pBuf++ = BindingTableList->dstAddr.addrMode;
   1571                if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1572                {
   1573                  len += extZdpBindEntrySize;
   1574                  pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1575                 *pBuf++ = BindingTableList->dstEP;
   1576                }
   1577                else
   1578                {
   1579                  len += shortZdpBindEntrySize;
   1580                  *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1581                  *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1582                }
   1583              }
   1584              BindingTableList++;    // Move to next list entry
   1585            }
   1586          
   1587            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   1588          }
   1589          #endif // ZDO_MGMT_BIND_RESPONSE && REFLECTOR
   1590          
   1591          /*********************************************************************
   1592           * Callbacks from the APS layer
   1593           */
   1594          
   1595          /*********************************************************************
   1596           * @fn          ZDP_IncomingData
   1597           *
   1598           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1599           *              from the APS sub-layer to the ZDO.
   1600           *
   1601           * @param       pData - Incoming Message
   1602           *
   1603           * @return      none
   1604           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1605          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1606          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1607            byte proVer = NLME_GetProtocolVersion();
   \   00000E                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00000E   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000011   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000013   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000016   E9           MOV     A,R1
   \   000017   FC           MOV     R4,A
   1608            zAddrType_t addr;
   1609            zAddrType_t *srcAddr;
   1610            byte wasBroadcast;
   1611            cId_t clusterID;
   1612            byte asduLen;
   1613            byte *asdu;
   1614            byte SecurityUse;
   1615            byte TransSeq;
   1616          
   1617            addr.addrMode = Addr16Bit;
   \   000018   7408         MOV     A,#0x8
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   7402         MOV     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
   1618            addr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   E8           MOV     A,R0
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E9           MOV     A,R1
   \   000037   F0           MOVX    @DPTR,A
   1619            srcAddr = &addr;
   1620            wasBroadcast = pData->wasBroadcast;
   \   000038   EE           MOV     A,R6
   \   000039   240B         ADD     A,#0xb
   \   00003B   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00003E   F5..         MOV     ?V0 + 2,A
   1621            clusterID = pData->clusterId;
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FB           MOV     R3,A
   1622            SecurityUse = pData->SecurityUse;
   \   00004D   EE           MOV     A,R6
   \   00004E   240D         ADD     A,#0xd
   \   000050   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000053   F5..         MOV     ?V0 + 4,A
   1623          
   1624            if ( proVer == ZB_PROT_V1_0 )
   \   000055   7401         MOV     A,#0x1
   \   000057   6C           XRL     A,R4
   \   000058   701B         JNZ     ??ZDP_IncomingData_0
   1625            {
   1626            asduLen = pData->cmd.DataLength;
   \   00005A   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00005D   F5..         MOV     ?V0 + 3,A
   1627            asdu = pData->cmd.Data;
   \   00005F   EE           MOV     A,R6
   \   000060   2415         ADD     A,#0x15
   \   000062   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000065   FC           MOV     R4,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FD           MOV     R5,A
   1628            TransSeq = pData->cmd.TransSeqNumber;
   \   000069   EE           MOV     A,R6
   \   00006A   2412         ADD     A,#0x12
   \   00006C   F582         MOV     DPL,A
   \   00006E   EF           MOV     A,R7
   \   00006F   3400         ADDC    A,#0x0
   \   000071   F583         MOV     DPH,A
   \   000073   801C         SJMP    ??ZDP_IncomingData_1
   1629            }
   1630            else
   1631            {
   1632              asduLen = pData->cmd.DataLength-1;
   \                     ??ZDP_IncomingData_0:
   \   000075   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000078   14           DEC     A
   \   000079   F5..         MOV     ?V0 + 3,A
   1633              asdu = pData->cmd.Data+1;
   \   00007B   EE           MOV     A,R6
   \   00007C   2415         ADD     A,#0x15
   \   00007E   F582         MOV     DPL,A
   \   000080   EF           MOV     A,R7
   \   000081   3400         ADDC    A,#0x0
   \   000083   F583         MOV     DPH,A
   \   000085   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000088   A3           INC     DPTR
   \   000089   AC82         MOV     R4,DPL
   \   00008B   AD83         MOV     R5,DPH
   1634              TransSeq = pData->cmd.Data[0];
   \   00008D   8882         MOV     DPL,R0
   \   00008F   8983         MOV     DPH,R1
   \                     ??ZDP_IncomingData_1:
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   1635            }
   1636          
   1637            switch ( clusterID )
   \   000093   8A..         MOV     ?V0 + 0,R2
   \   000095   8B..         MOV     ?V0 + 1,R3
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDP_IncomingData>_0`:
   \   00009C   0200         DW        2
   \   00009E   0000         DW        0
   \   0000A0   0100         DW        1
   \   0000A2   ....         DW        ??ZDP_IncomingData_2
   \   0000A4   0580         DW        32773
   \   0000A6   0680         DW        32774
   \   0000A8   ....         DW        ??ZDP_IncomingData_3
   \   0000AA   0600         DW        6
   \   0000AC   0200         DW        2
   \   0000AE   ....         DW        ??ZDP_IncomingData_4
   \   0000B0   0300         DW        3
   \   0000B2   ....         DW        ??ZDP_IncomingData_5
   \   0000B4   0400         DW        4
   \   0000B6   ....         DW        ??ZDP_IncomingData_6
   \   0000B8   0500         DW        5
   \   0000BA   ....         DW        ??ZDP_IncomingData_7
   \   0000BC   0600         DW        6
   \   0000BE   ....         DW        ??ZDP_IncomingData_8
   \   0000C0   2080         DW        32800
   \   0000C2   ....         DW        ??ZDP_IncomingData_9
   \   0000C4   ....         DW        ??ZDP_IncomingData_10
   1638            {
   1639              // Response messages for our requests
   1640          
   1641          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1642              case NWK_addr_rsp:
   1643              case IEEE_addr_rsp:
   1644                ZDO_ProcessAddrRsp( srcAddr, clusterID, asdu, asduLen);
   1645                break;
   1646          #endif
   1647          
   1648          #if defined ( ZDO_NODEDESC_REQUEST )
   1649              case Node_Desc_rsp:
   1650                ZDO_ProcessNodeDescRsp( srcAddr, asdu );
   1651                break;
   1652          #endif
   1653          
   1654          #if defined ( ZDO_POWERDESC_REQUEST )
   1655              case Power_Desc_rsp:
   1656                ZDO_ProcessPowerDescRsp( srcAddr, asdu );
   1657                break;
   1658          #endif
   1659          
   1660          #if defined ( ZDO_SIMPLEDESC_REQUEST )
   1661              case Simple_Desc_rsp:
   1662                ZDO_ProcessSimpleDescRsp( srcAddr, asdu );
   1663                break;
   1664          #endif
   1665          
   1666          #if defined ( ZDO_MATCH_REQUEST ) || defined ( ZDO_ACTIVEEP_REQUEST )
   1667              case Match_Desc_rsp:
   1668              case Active_EP_rsp:
   1669                ZDO_ProcessEPListRsp( srcAddr, clusterID, asdu );
   \                     ??ZDP_IncomingData_3:
   \   0000C6                ; Setup parameters for call to function ZDO_ProcessEPListRsp
   \   0000C6   8C..         MOV     ?V0 + 0,R4
   \   0000C8   8D..         MOV     ?V0 + 1,R5
   \   0000CA   78..         MOV     R0,#?V0 + 0
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CF   EA           MOV     A,R2
   \   0000D0   FC           MOV     R4,A
   \   0000D1   EB           MOV     A,R3
   \   0000D2   FD           MOV     R5,A
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   AA82         MOV     R2,DPL
   \   0000DA   AB83         MOV     R3,DPH
   \   0000DC   90....       MOV     DPTR,#(ZDO_ProcessEPListRsp & 0xffff)
   \   0000DF   74..         MOV     A,#((ZDO_ProcessEPListRsp >> 16) & 0xff)
   \   0000E1   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000E4   7402         MOV     A,#0x2
   \   0000E6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E9   02....       LJMP    ??ZDP_IncomingData_11 & 0xFFFF
   1670                break;
   1671          #endif
   1672          
   1673          #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
   1674            #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
   1675              case Bind_rsp:
   1676              case Unbind_rsp:
   1677            #endif
   1678            #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST )
   1679              case End_Device_Bind_rsp:
   1680            #endif
   1681                ZDO_ProcessBindUnbindRsp( srcAddr, clusterID, *asdu, TransSeq );
   \                     ??ZDP_IncomingData_9:
   \   0000EC                ; Setup parameters for call to function ZDO_ProcessBindUnbindRsp
   \   0000EC   E9           MOV     A,R1
   \   0000ED   F5..         MOV     ?V0 + 0,A
   \   0000EF   78..         MOV     R0,#?V0 + 0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F4   8C82         MOV     DPL,R4
   \   0000F6   8D83         MOV     DPH,R5
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F9           MOV     R1,A
   \   0000FA   EA           MOV     A,R2
   \   0000FB   FC           MOV     R4,A
   \   0000FC   EB           MOV     A,R3
   \   0000FD   FD           MOV     R5,A
   \   0000FE   7401         MOV     A,#0x1
   \   000100   12....       LCALL   ?XSTACK_DISP0_8
   \   000103   AA82         MOV     R2,DPL
   \   000105   AB83         MOV     R3,DPH
   \   000107   90....       MOV     DPTR,#(ZDO_ProcessBindUnbindRsp & 0xffff)
   \   00010A   74..         MOV     A,#((ZDO_ProcessBindUnbindRsp >> 16) & 0xff)
   \                     ??ZDP_IncomingData_12:
   \   00010C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00010F   7401         MOV     A,#0x1
   \   000111   12....       LCALL   ?DEALLOC_XSTACK8
   \   000114   02....       LJMP    ??ZDP_IncomingData_11 & 0xFFFF
   1682                break;
   1683          #endif
   1684          
   1685          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
   1686              case Mgmt_NWK_Disc_rsp:
   1687                ZDO_ProcessMgmNwkDiscRsp( srcAddr, asdu, SecurityUse );
   1688                break;
   1689          #endif
   1690          
   1691          #if defined ( ZDO_MGMT_LQI_REQUEST )
   1692              case Mgmt_Lqi_rsp:
   1693                ZDO_ProcessMgmtLqiRsp( srcAddr, asdu, SecurityUse );
   1694                break;
   1695          #endif
   1696          
   1697          #if defined ( ZDO_MGMT_RTG_REQUEST )
   1698              case Mgmt_Rtg_rsp:
   1699                ZDO_ProcessMgmtRtgRsp( srcAddr, asdu, SecurityUse );
   1700                break;
   1701          #endif
   1702          
   1703          #if defined ( ZDO_MGMT_BIND_REQUEST )
   1704              case Mgmt_Bind_rsp:
   1705                ZDO_ProcessMgmtBindRsp( srcAddr, asdu, SecurityUse );
   1706                break;
   1707          #endif
   1708          
   1709          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
   1710              case Mgmt_Direct_Join_rsp:
   1711                ZDO_ProcessMgmtDirectJoinRsp( srcAddr, *asdu, SecurityUse );
   1712                break;
   1713          #endif
   1714          
   1715          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
   1716              case Mgmt_Leave_rsp:
   1717                ZDO_ProcessMgmtLeaveRsp( srcAddr, *asdu, SecurityUse );
   1718                break;
   1719          #endif
   1720          
   1721          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
   1722              case Mgmt_Permit_Join_rsp:
   1723                ZDO_ProcessMgmtPermitJoinRsp( srcAddr, *asdu, SecurityUse );
   1724                break;
   1725          #endif
   1726          
   1727          #if defined ( ZDO_USERDESC_REQUEST )
   1728              case User_Desc_rsp:
   1729                ZDO_ProcessUserDescRsp( srcAddr, asdu, SecurityUse );
   1730                break;
   1731          #endif
   1732          
   1733          #if defined ( ZDO_SERVERDISC_REQUEST )
   1734              case Server_Discovery_rsp:
   1735                ZDO_ProcessServerDiscRsp( srcAddr, asdu, SecurityUse );
   1736                break;
   1737          #endif
   1738          
   1739          #if defined( ZDO_CACHE )
   1740              case Discovery_Cache_rsp:
   1741              case Discovery_store_rsp:
   1742              case Remove_node_cache_rsp:
   1743              case Find_node_cache_rsp:
   1744              case Node_Desc_store_rsp:
   1745              case Power_Desc_store_rsp:
   1746              case Active_EP_store_rsp:
   1747              case Simple_Desc_store_rsp:
   1748              case Mgmt_Cache_rsp:
   1749          #if ( CACHE_DEV_MAX == 0 )
   1750                ZDCacheProcessRsp( srcAddr, asdu, asduLen, clusterID, TransSeq );
   1751          #endif
   1752                break;
   1753          #endif
   1754          
   1755              // Request messages
   1756              case NWK_addr_req:
   1757              case IEEE_addr_req:
   1758                zdpProcessAddrReq( TransSeq, srcAddr, asdu, clusterID, SecurityUse );
   \                     ??ZDP_IncomingData_2:
   \   000117                ; Setup parameters for call to function zdpProcessAddrReq
   \   000117   E5..         MOV     A,?V0 + 4
   \   000119   F5..         MOV     ?V0 + 0,A
   \   00011B   78..         MOV     R0,#?V0 + 0
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000120   8A..         MOV     ?V0 + 0,R2
   \   000122   78..         MOV     R0,#?V0 + 0
   \   000124   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000127   7403         MOV     A,#0x3
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   AA82         MOV     R2,DPL
   \   00012E   AB83         MOV     R3,DPH
   \   000130   90....       MOV     DPTR,#(??zdpProcessAddrReq & 0xffff)
   \   000133   74..         MOV     A,#((??zdpProcessAddrReq >> 16) & 0xff)
   \   000135   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000138   7403         MOV     A,#0x3
   \   00013A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013D   02....       LJMP    ??ZDP_IncomingData_11 & 0xFFFF
   1759                break;
   1760          
   1761              case Node_Desc_req:
   1762                ZDO_ProcessNodeDescReq( TransSeq, srcAddr, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_4:
   \   000140                ; Setup parameters for call to function ZDO_ProcessNodeDescReq
   \   000140   E5..         MOV     A,?V0 + 4
   \   000142   F5..         MOV     ?V0 + 0,A
   \   000144   78..         MOV     R0,#?V0 + 0
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000149   7401         MOV     A,#0x1
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   AA82         MOV     R2,DPL
   \   000150   AB83         MOV     R3,DPH
   \   000152   90....       MOV     DPTR,#(ZDO_ProcessNodeDescReq & 0xffff)
   \   000155   74..         MOV     A,#((ZDO_ProcessNodeDescReq >> 16) & 0xff)
   \   000157   80B3         SJMP    ??ZDP_IncomingData_12
   1763                break;
   1764          
   1765              case Power_Desc_req:
   1766                ZDO_ProcessPowerDescReq( TransSeq, srcAddr, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_5:
   \   000159                ; Setup parameters for call to function ZDO_ProcessPowerDescReq
   \   000159   E5..         MOV     A,?V0 + 4
   \   00015B   F5..         MOV     ?V0 + 0,A
   \   00015D   78..         MOV     R0,#?V0 + 0
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000162   7401         MOV     A,#0x1
   \   000164   12....       LCALL   ?XSTACK_DISP0_8
   \   000167   AA82         MOV     R2,DPL
   \   000169   AB83         MOV     R3,DPH
   \   00016B   90....       MOV     DPTR,#(ZDO_ProcessPowerDescReq & 0xffff)
   \   00016E   74..         MOV     A,#((ZDO_ProcessPowerDescReq >> 16) & 0xff)
   \                     ??ZDP_IncomingData_13:
   \   000170   809A         SJMP    ??ZDP_IncomingData_12
   1767                break;
   1768          
   1769              case Simple_Desc_req:
   1770                ZDO_ProcessSimpleDescReq( TransSeq, srcAddr, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_6:
   \   000172                ; Setup parameters for call to function ZDO_ProcessSimpleDescReq
   \   000172   E5..         MOV     A,?V0 + 4
   \   000174   F5..         MOV     ?V0 + 0,A
   \   000176   78..         MOV     R0,#?V0 + 0
   \   000178   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017B   7401         MOV     A,#0x1
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   AA82         MOV     R2,DPL
   \   000182   AB83         MOV     R3,DPH
   \   000184   90....       MOV     DPTR,#(ZDO_ProcessSimpleDescReq & 0xffff)
   \   000187   74..         MOV     A,#((ZDO_ProcessSimpleDescReq >> 16) & 0xff)
   \   000189   8081         SJMP    ??ZDP_IncomingData_12
   1771                break;
   1772          
   1773              case Active_EP_req:
   1774                ZDO_ProcessActiveEPReq( TransSeq, srcAddr, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_7:
   \   00018B                ; Setup parameters for call to function ZDO_ProcessActiveEPReq
   \   00018B   E5..         MOV     A,?V0 + 4
   \   00018D   F5..         MOV     ?V0 + 0,A
   \   00018F   78..         MOV     R0,#?V0 + 0
   \   000191   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000194   7401         MOV     A,#0x1
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   AA82         MOV     R2,DPL
   \   00019B   AB83         MOV     R3,DPH
   \   00019D   90....       MOV     DPTR,#(ZDO_ProcessActiveEPReq & 0xffff)
   \   0001A0   74..         MOV     A,#((ZDO_ProcessActiveEPReq >> 16) & 0xff)
   \   0001A2   80CC         SJMP    ??ZDP_IncomingData_13
   1775                break;
   1776          
   1777              case Match_Desc_req:
   1778                ZDO_ProcessMatchDescReq( TransSeq, srcAddr, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_8:
   \   0001A4                ; Setup parameters for call to function ZDO_ProcessMatchDescReq
   \   0001A4   E5..         MOV     A,?V0 + 4
   \   0001A6   F5..         MOV     ?V0 + 0,A
   \   0001A8   78..         MOV     R0,#?V0 + 0
   \   0001AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AD   7401         MOV     A,#0x1
   \   0001AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B2   AA82         MOV     R2,DPL
   \   0001B4   AB83         MOV     R3,DPH
   \   0001B6   90....       MOV     DPTR,#(ZDO_ProcessMatchDescReq & 0xffff)
   \   0001B9   74..         MOV     A,#((ZDO_ProcessMatchDescReq >> 16) & 0xff)
   \   0001BB   02....       LJMP    ??ZDP_IncomingData_12 & 0xFFFF
   1779                break;
   1780          
   1781          #if defined ( ZDO_COORDINATOR )
   1782              case End_Device_Bind_req:
   1783                ZDO_ProcessEndDeviceBindReq( TransSeq, srcAddr, asdu, SecurityUse );
   1784                break;
   1785          #endif
   1786          
   1787          #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
   1788              case Bind_req:
   1789              case Unbind_req:
   1790                ZDO_ProcessBindUnbindReq( TransSeq, srcAddr, clusterID, asdu, SecurityUse );
   1791                break;
   1792          #endif
   1793          
   1794          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1795              case Mgmt_NWK_Disc_req:
   1796                ZDO_ProcessMgmtNwkDiscReq( TransSeq, srcAddr, asdu, SecurityUse );
   1797                break;
   1798          #endif
   1799          
   1800          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
   1801              case Mgmt_Lqi_req:
   1802                ZDO_ProcessMgmtLqiReq( TransSeq, srcAddr, *asdu, SecurityUse );
   1803                break;
   1804          #endif
   1805          
   1806          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && defined ( RTR_NWK )
   1807              case Mgmt_Rtg_req:
   1808                ZDO_ProcessMgmtRtgReq( TransSeq, srcAddr, *asdu, SecurityUse );
   1809                break;
   1810          #endif
   1811          
   1812          #if defined ( ZDO_MGMT_BIND_RESPONSE )
   1813              case Mgmt_Bind_req:
   1814                ZDO_ProcessMgmtBindReq( TransSeq, srcAddr, *asdu, SecurityUse );
   1815                break;
   1816          #endif
   1817          
   1818          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && defined ( RTR_NWK )
   1819              case Mgmt_Direct_Join_req:
   1820                ZDO_ProcessMgmtDirectJoinReq( TransSeq, srcAddr, asdu, SecurityUse );
   1821                break;
   1822          #endif
   1823          
   1824          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
   1825              case Mgmt_Leave_req:
   1826                ZDO_ProcessMgmtLeaveReq( TransSeq, srcAddr, asdu, SecurityUse );
   1827                break;
   1828          #endif
   1829          
   1830          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && defined ( RTR_NWK )
   1831              case Mgmt_Permit_Join_req:
   1832                ZDO_ProcessMgmtPermitJoinReq( TransSeq, srcAddr, asdu, SecurityUse );
   1833                break;
   1834          #endif
   1835          
   1836          #if defined ( ZDO_USERDESC_RESPONSE )
   1837              case User_Desc_req:
   1838                ZDO_ProcessUserDescReq( TransSeq, srcAddr, asdu, SecurityUse );
   1839                break;
   1840          #endif
   1841          
   1842          #if defined ( ZDO_USERDESCSET_RESPONSE )
   1843              case User_Desc_set:
   1844                ZDO_ProcessUserDescSet( TransSeq, srcAddr, asdu, SecurityUse );
   1845                break;
   1846          #endif
   1847          
   1848          #if defined ( ZDO_SERVERDISC_RESPONSE )
   1849              case Server_Discovery_req:
   1850                ZDO_ProcessServerDiscReq( TransSeq, srcAddr, asdu, SecurityUse );
   1851                break;
   1852          #endif
   1853          
   1854          #if defined ( ZDO_ENDDEVICE_ANNCE ) && defined ( RTR_NWK )
   1855              case End_Device_annce:
   1856                ZDO_ProcessEndDeviceAnnce( TransSeq, srcAddr, asdu, SecurityUse );
   1857                break;
   1858          #endif
   1859          
   1860          #if defined( ZDO_CACHE )
   1861              case Discovery_Cache_req:
   1862              case Discovery_store_req:
   1863              case Remove_node_cache_req:
   1864              case Find_node_cache_req:
   1865              case Node_Desc_store_req:
   1866              case Power_Desc_store_req:
   1867              case Active_EP_store_req:
   1868              case Simple_Desc_store_req:
   1869              case Mgmt_Cache_req:
   1870          #if ( CACHE_DEV_MAX > 0 )
   1871                ZDCacheProcessReq(srcAddr,asdu,asduLen,clusterID,TransSeq,SecurityUse);
   1872          #endif
   1873                break;
   1874          #endif
   1875          
   1876              case Complex_Desc_req:
   1877              case Complex_Desc_rsp:
   1878              default:
   1879                ZDApp_InMsgCB( TransSeq, srcAddr, wasBroadcast,
   1880                               clusterID, asduLen, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_10:
   \   0001BE                ; Setup parameters for call to function ZDApp_InMsgCB
   \   0001BE   E5..         MOV     A,?V0 + 4
   \   0001C0   F5..         MOV     ?V0 + 0,A
   \   0001C2   78..         MOV     R0,#?V0 + 0
   \   0001C4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C7   8C..         MOV     ?V0 + 0,R4
   \   0001C9   8D..         MOV     ?V0 + 1,R5
   \   0001CB   78..         MOV     R0,#?V0 + 0
   \   0001CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D0   8A..         MOV     ?V0 + 0,R2
   \   0001D2   8B..         MOV     ?V0 + 1,R3
   \   0001D4   78..         MOV     R0,#?V0 + 0
   \   0001D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D9   AD..         MOV     R5,?V0 + 3
   \   0001DB   AC..         MOV     R4,?V0 + 2
   \   0001DD   7405         MOV     A,#0x5
   \   0001DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E2   AA82         MOV     R2,DPL
   \   0001E4   AB83         MOV     R3,DPH
   \   0001E6   90....       MOV     DPTR,#(ZDApp_InMsgCB & 0xffff)
   \   0001E9   74..         MOV     A,#((ZDApp_InMsgCB >> 16) & 0xff)
   \   0001EB   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001EE   7405         MOV     A,#0x5
   \   0001F0   12....       LCALL   ?DEALLOC_XSTACK8
   1881                break;
   1882            }
   1883          }
   \                     ??ZDP_IncomingData_11:
   \   0001F3   7409         MOV     A,#0x9
   \   0001F5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F8   7F05         MOV     R7,#0x5
   \   0001FA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ??ZDP_Buf + 1H
   1884          
   1885          /*********************************************************************
   1886          *********************************************************************/
   1887          

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     ZDP_EPRsp                         1      0     27
       -> osal_memcpy                  0      0     40
       -> fillAndSend                  0      0     38
     ZDP_EndDeviceBindReq              1      0     30
       -> NLME_GetProtocolVersion      0      0     38
       -> NLME_GetExtAddr              0      0     38
       -> osal_cpyExtAddr              0      0     38
       -> fillAndSend                  0      0     42
     ZDP_GenericRsp                    1      0     17
       -> NLME_GetProtocolVersion      0      0     22
       -> fillAndSend                  0      0     26
     ZDP_IncomingData                  1      0     27
       -> NLME_GetProtocolVersion      0      0     44
       -> ZDO_ProcessEPListRsp         0      0     48
       -> ZDO_ProcessBindUnbindRsp     0      0     46
       -> zdpProcessAddrReq            0      0     50
       -> ZDO_ProcessNodeDescReq       0      0     46
       -> ZDO_ProcessPowerDescReq      0      0     46
       -> ZDO_ProcessSimpleDescReq     0      0     46
       -> ZDO_ProcessActiveEPReq       0      0     46
       -> ZDO_ProcessMatchDescReq      0      0     46
       -> ZDApp_InMsgCB                0      0     54
     ZDP_MatchDescReq                  1      0     28
       -> NLME_GetProtocolVersion      0      0     36
       -> fillAndSend                  0      0     40
     ZDP_NodeDescMsg                   1      0     18
       -> NLME_GetProtocolVersion      0      0     26
       -> fillAndSend                  0      0     30
     ZDP_PowerDescMsg                  1      0     16
       -> fillAndSend                  0      0     26
     ZDP_SendData                      1      0     21
       -> fillAndSend                  0      0     32
     ZDP_SimpleDescMsg                 2      0     22
       -> NLME_GetProtocolVersion      0      0     32
       -> fillAndSend                  0      0     36
     fillAndSend                       1      0     49
       -> AF_DataRequest               0      0     56
     zdpProcessAddrReq                 1      0     44
       -> osal_ExtAddrEqual            0      0     34
       -> osal_cpyExtAddr              0      0     34
       -> fillAndSend                  0      0     38


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     ZDP_AF_ENDPOINT                  1
     ZDP_TransID                      1
     ZDP_Buf                         80
     ZDP_TmpBuf                       2
     ZDP_TxOptions                    1
     fillAndSend                    174
     ?Subroutine41                    8
     ?Subroutine30                    8
     ZDP_SendData                   115
     ?Subroutine13                    8
     ?Subroutine43                    6
     ?Subroutine14                   13
     ?Subroutine33                    6
     ?Subroutine18                    9
     ZDP_MatchDescReq               241
     ?Subroutine42                   10
     ?Subroutine20                    4
     ?Subroutine40                    9
     ?Subroutine9                     4
     ?Subroutine7                     5
     ?Subroutine21                   11
     ?Subroutine45                    6
     ?Subroutine23                    4
     ?Subroutine36                    4
     ?Subroutine12                    9
     ?Subroutine11                   15
     ?Subroutine29                    7
     ?Subroutine37                   16
     ?Subroutine27                    8
     zdpProcessAddrReq              275
     ?Subroutine44                    6
     ?Subroutine24                   12
     ?Subroutine17                    7
     ZDP_NodeDescMsg                192
     ?Subroutine8                     6
     ?Subroutine35                    4
     ?Subroutine38                    9
     ?Subroutine6                     4
     ?Subroutine26                    8
     ?Subroutine5                     6
     ?Subroutine19                    5
     ?Subroutine15                    3
     ZDP_PowerDescMsg                74
     ?Subroutine46                   33
     ZDP_SimpleDescMsg              433
     ?Subroutine25                    5
     ?Subroutine4                    10
     ?Subroutine31                    8
     ?Subroutine39                    8
     ?Subroutine3                     8
     ?Subroutine32                   13
     ?Subroutine2                    12
     ?Subroutine28                    7
     ZDP_EPRsp                      186
     ?Subroutine10                   15
     ZDP_GenericRsp                  99
     ?Subroutine16                   14
     ZDP_EndDeviceBindReq           293
     ?Subroutine22                    6
     ?Subroutine1                     7
     ?Subroutine0                     9
     ?Subroutine34                    9
     ZDP_IncomingData               509
     ?<Initializer for ZDP_TmpBuf>    2

 
 2 995 bytes in segment BANKED_CODE
     1 byte  in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    82 bytes in segment XDATA_Z
 
 2 998 bytes of CODE  memory
    84 bytes of XDATA memory

Errors: none
Warnings: none
