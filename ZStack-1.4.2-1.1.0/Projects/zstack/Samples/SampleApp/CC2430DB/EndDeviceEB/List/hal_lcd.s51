//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:52:38 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC24 /
//                          30EB\hal_lcd.c                                   /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wE /
//                          ndev.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS  /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          MT_TASK -D ZG_ENDDEVICE -lC                      /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\ -lA           /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\EndDeviceEB\Obj\ -e          /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC24 /
//                          30EB\hal_lcd.c                                   /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\hal_lcd.s51    /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME hal_lcd

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I

        PUBLIC ClearScreen
        FUNCTION ClearScreen,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ContrastValue
        PUBLIC HalLcdInit
        FUNCTION HalLcdInit,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC InitDisplay
        FUNCTION InitDisplay,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBWEAK P2DIR
        PUBLIC Print
        FUNCTION Print,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC Print6
        FUNCTION Print6,021203H
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Print8
        FUNCTION Print8,021203H
        ARGFRAME XSTACK, 26, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC PrintCh8
        FUNCTION PrintCh8,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Printn8
        FUNCTION Printn8,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC SetContrast
        FUNCTION SetContrast,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SetRamAddr
        FUNCTION SetRamAddr,021203H
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Write595
        FUNCTION Write595,0203H
        ARGFRAME XSTACK, 9, STACK
        PUBLIC WriteLCD
        FUNCTION WriteLCD,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBWEAK __Constant_a
        PUBLIC contrastctrl
        FUNCTION contrastctrl,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC delay1
        FUNCTION delay1,0203H
        ARGFRAME XSTACK, 9, STACK
        PUBLIC delay_us
        FUNCTION delay_us,0203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN Font8X8
        EXTERN FontSystem6x8

// E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC2430EB\hal_lcd.c
//    1 #include "LCD128_64.h"

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DS 1
//    2 #include "Font.h"
//    3 
//    4 
//    5 /****************************************************
//    6 * B) Command Table per device *
//    7 ****************************************************/
//    8 #define 	DisplayOff 	0xAE
//    9 #define 	DisplayOn 	0xAF
//   10 #define 	DisplayStart 	0x40
//   11 #define 	PageAddr 	0xB0
//   12 #define 	ColAddrHi 	0x10
//   13 #define 	ColAddrLo 	0x00
//   14 #define 	SegRemapOff 	0xA0
//   15 #define 	SegRemapOn 	0xA1
//   16 #define 	NormalDisp 	0xA6
//   17 #define 	ReverseDisp 	0xA7
//   18 #define 	ExitEntireD 	0xA4
//   19 #define 	EntEntireD 	0xA5
//   20 #define 	EnterRMW 	0xE0
//   21 #define 	ExitRMW 	0xEE
//   22 #define 	SWRest 		0xE2
//   23 #define 	ComRemapOff 	0xC0
//   24 #define 	ComRemapOn 	0xC8
//   25 #define 	PwrCtrlReg 	0x28
//   26 #define 	OPampBuffer 	0x01
//   27 #define 	IntReg 		0x02
//   28 #define 	IntVolBstr 	0x04
//   29 #define 	IntRegRatio 	0x20
//   30 #define 	ContCtrlReg 	0x81
//   31 #define 	CmdMuxRatio 	0x48
//   32 #define 	CmdBiasRatio 	0x50
//   33 #define 	DispOffset 	0x44
//   34 #define 	IconModeOn 	0xA3
//   35 #define 	IconModeOff 	0xA2
//   36 #define 	NlineInver 	0x4C
//   37 #define 	DCDCconver 	0x64
//   38 #define 	PowersavStandby 0xA8
//   39 #define 	PowersavSleep 	0xA9
//   40 #define 	PowersavOff 	0xE1
//   41 #define 	InterOsc 	0xAB
//   42 #define 	Device SSD1821 			/* device under demo */
//   43 #define 	ColNo 		132 		/* number of Column/Seg on LCD glass*/
//   44 #define 	RowNo 		64		/* number of Row/Com/Mux */
//   45 #define 	PS 		1 		/* fixed to Parallel mode */
//   46 #define 	PageNo 		10 		/* Total no of RAM pages */
//   47 #define 	IconPage 	10 		/* Icon Page number */
//   48 #define 	All0 		6 		/* 3 for all 0, 4 for all 1 */
//   49 #define 	All1 		4
//   50 #define 	iIntRegValue 	1 		/*Internal Regulator Resistor Ratio Value */
//   51 #define 	iContCtrlRegValue 16 		/* Contrast Control Register Value */
//   52 #define 	iIntRegValuea 	20 		/*Internal Regulator Resistor Ratio Value */
//   53 #define 	iContCtrlRegValuea 16 		/* Contrast Control Register Value */
//   54 #define 	iIntRegValueb 	1 		/*Internal Regulator Resistor Ratio Value */
//   55 #define 	iContCtrlRegValueb 16 		/* Contrast Control Register Value */
//   56 #define 	MSGNo 		16
//   57 #define 	MSGLength 	22
//   58 #define 	SSLNameNo 	4
//   59 #define 	DevicePg 	0 		//RAM page for showing device name
//   60 #define 	FeaturePg 	1 		//RAM page for showing feature
//   61 #define 	GRAPHICNo 	13
//   62 #define 	xlogo 		38
//   63 #define 	ylogo 		5
//   64 #define 	xsolomon 	91
//   65 #define 	ysolomon 	2
//   66 #define 	xsystech 	81
//   67 #define 	ysystech 	2
//   68 #define 	xlimited 	70
//   69 #define 	ylimited 	2
//   70 #define 	xcc 		16
//   71 #define 	ycc 		2
//   72 #define 	xpageq 		128
//   73 #define 	ypageq 		4
//   74 #define 	horizonal 	0
//   75 #define 	d_time 		60
//   76 ////////////////////////////////////////////////////////////////////////////////////////////
//   77 
//   78 void Print8(INT16U y,INT16U x, INT8U ch[],INT16U yn);
//   79 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   80 INT8U ContrastValue =90;
ContrastValue:
        DS 1
        REQUIRE `?<Initializer for ContrastValue>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_a:
        DS 4
        REQUIRE `?<Initializer for __Constant_a>`
        REQUIRE __INIT_XDATA_I
//   81 void WriteLCD(INT8U fs, INT8U da);
//   82 void Write595(INT8U dat);
//   83 void delay_us(INT16U s);
//   84 void delay1(INT8U jj);
//   85 void contrastctrl(INT8U start, INT8U stop);
//   86 void HalLcdInit(void);
//   87 void PrintCh8(INT16U y,INT16U x, INT8U ch,INT16U yn);
//   88 
//   89 
//   90 
//   91 
//   92 
//   93 
//   94 
//   95 
//   96 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   97 void delay1(INT8U jj)
delay1:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function delay1
//   98 {
        ; Saved register size: 0
        ; Auto size: 0
//   99 	INT8U i;
//  100 	for(i=0; i<jj; i++);
        MOV	R2,#0x0
        SJMP	??delay1_0
??delay1_1:
        INC	R2
??delay1_0:
        MOV	A,R2
        CLR	C
        SUBB	A,R1
        JC	??delay1_1
//  101 }
        LJMP	?BRET
        CFI EndBlock cfiBlock0
//  102 
//  103 
//  104 
//  105 
//  106 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  107 void delay_us(INT16U s)
delay_us:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function delay_us
//  108 {
        ; Saved register size: 0
        ; Auto size: 0
//  109 	INT16U i;
//  110 	for(i=0; i<s; i++);
        MOV	R0,#0x0
        MOV	R1,#0x0
        SJMP	??delay_us_0
??delay_us_1:
        MOV	A,R0
        ADD	A,#0x1
        INC	R0
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R1,A
??delay_us_0:
        CLR	C
        MOV	A,R0
        SUBB	A,R2
        MOV	A,R1
        SUBB	A,R3
        JC	??delay_us_1
//  111 	for(i=0; i<s; i++);
        MOV	R0,#0x0
        MOV	R1,#0x0
        SJMP	??delay_us_2
??delay_us_3:
        MOV	A,R0
        ADD	A,#0x1
        INC	R0
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R1,A
??delay_us_2:
        CLR	C
        MOV	A,R0
        SUBB	A,R2
        MOV	A,R1
        SUBB	A,R3
        JC	??delay_us_3
//  112 }
        LJMP	?BRET
        CFI EndBlock cfiBlock1
//  113 
//  114 
//  115 //******************************************************************************
//  116 //º¯ÊýÃû£ºvoid Write595(INT8U dat)
//  117 //ÊäÈë£ºÊý¾Ý
//  118 //Êä³ö£ºÎÞ
//  119 //¹¦ÄÜÃèÊö£º595Ð´Êý¾Ý£¬Ò»´ÎÐ´Èë8Î»
//  120 //******************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  121 void Write595(INT8U dat)
Write595:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Write595
//  122 {
        ; Saved register size: 0
        ; Auto size: 0
//  123 	
//  124 	INT8U ii;		
//  125 			
//  126 	for(ii = 0 ; ii < 8; ii++)
        MOV	R2,#0x8
//  127 	{
//  128 		if(dat & 0x80) 	LCD_595_DAT = 1;
??Write595_0:
        MOV	A,R1
        MOV	C,0xE0 /* A   */.7
        JNC	??Write595_1
        SETB	0xa0.0
        SJMP	??Write595_2
//  129 		else		LCD_595_DAT = 0;
??Write595_1:
        CLR	0xa0.0
//  130 		
//  131 		dat <<= 1;
??Write595_2:
        CLR	C
        RLC	A
        MOV	R1,A
//  132 		LCD_595_CK = 1;	
        SETB	0x90.5
//  133 		LCD_595_CK = 0;
        CLR	0x90.5
//  134 	}
        DEC	R2
        MOV	A,R2
        JNZ	??Write595_0
//  135 	LCD_595_LD = 1;
        SETB	0x90.3
//  136 	LCD_595_LD = 0;
        CLR	0x90.3
//  137 }
        LJMP	?BRET
        CFI EndBlock cfiBlock2
//  138 
//  139 
//  140 
//  141 
//  142 //*****************************************************************************
//  143 //*****************************************************************************
//  144 //º¯ÊýÃû£ºvoid delay(unsigned int n)
//  145 //¹¦ÄÜÃèÊö£ºÆÕÍ¨Í¢Ê±º¯Êý
//  146 //*****************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  147 void WriteLCD(INT8U fs, INT8U da)
WriteLCD:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function WriteLCD
//  148 {
        FUNCALL WriteLCD, delay1
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL WriteLCD, Write595
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL WriteLCD, delay1
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
        MOV	A,R2
        MOV	R7,A
//  149 	delay1(0);
        ; Setup parameters for call to function delay1
        MOV	R1,#0x0
        MOV	DPTR,#(delay1 & 0xffff)
        MOV	A,#((delay1 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  150 	LCD_CS1 = 0;
        CLR	0x90.4
//  151 	LCD_RW = 0;			//Ð´²Ù×÷
        CLR	0x80.1
//  152 	//delay1(0);	
//  153 
//  154 	if(fs){
        MOV	A,R6
        JZ	??WriteLCD_0
//  155 		LCD_RS = 1;	
        SETB	0x90.7
        SJMP	??WriteLCD_1
//  156 	}
//  157 	else{
//  158 		LCD_RS = 0;
??WriteLCD_0:
        CLR	0x90.7
//  159 	}
//  160        // delay1(0);
//  161 
//  162         Write595(da);
??WriteLCD_1:
        ; Setup parameters for call to function Write595
        MOV	A,R7
        MOV	R1,A
        MOV	DPTR,#(Write595 & 0xffff)
        MOV	A,#((Write595 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  163 	LCD_E = 1;// = 1;
        SETB	0x90.6
//  164         delay1(0);
        ; Setup parameters for call to function delay1
        MOV	R1,#0x0
        MOV	DPTR,#(delay1 & 0xffff)
        MOV	A,#((delay1 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  165 	LCD_E = 0;// = 0;					
        CLR	0x90.6
//  166 	//delay1(0);
//  167 	LCD_CS1 = 1;
        SETB	0x90.4
//  168 }
        SJMP	??Subroutine10_0
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        ANL	A,R6
        MOV	R2,A
        MOV	R1,#0x0
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
??Subroutine10_0:
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  169 /*
//  170 
//  171 INT8U ReadLCD(INT8U fs)
//  172 {
//  173 	INT8U temp = 0;
//  174 	LCD_CS1 = 0;
//  175 	NOP;
//  176 	NOP;
//  177 	NOP;
//  178 	NOP;
//  179 	do{						
//  180 		LCD_RW = 1;
//  181 		LCD_RS = 0;
//  182 		LCD_E = 1;
//  183 		NOP;
//  184 		NOP;							
//  185 		temp = P1 & 0x80;			
//  186 		LCD_E = 0;			
//  187 
//  188 	}while(temp != 0);	
//  189 
//  190 	if(fs){
//  191 		LCD_RS = 1;	
//  192 	}
//  193 	else{
//  194 		LCD_RS = 0;
//  195 	}
//  196 	
//  197 	LCD_E = 1;
//  198 	NOP;	
//  199 	NOP;
//  200 	NOP;
//  201 	NOP;	
//  202 	temp = P1;	
//  203 	LCD_E = 0;	
//  204 	LCD_CS1 = 1;
//  205 	return(temp);
//  206 }
//  207 
//  208 
//  209 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  210 void SetRamAddr(INT8U x ,INT8U y)
SetRamAddr:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function SetRamAddr
//  211 {
        FUNCALL SetRamAddr, WriteLCD
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL SetRamAddr, WriteLCD
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL SetRamAddr, WriteLCD
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
//  212 	INT8U temp;
//  213 	
//  214 	temp = 0x0f & x;
//  215 	WriteLCD(COMMAND , PageAddr|temp);
        ; Setup parameters for call to function WriteLCD
        MOV	A,#0xf
        ANL	A,R1
        ORL	A,#0xb0
        MOV	R2,A
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  216 
//  217 	temp = 0x0f & (y >> 4);
//  218 	WriteLCD(COMMAND , ColAddrHi|temp);
        ; Setup parameters for call to function WriteLCD
        MOV	A,R6
        SWAP	A
        ANL	A,#0xf
        ORL	A,#0x10
        MOV	R2,A
        MOV	R1,#0x0
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  219 	temp = 0x0f & y;
//  220 	WriteLCD(COMMAND , ColAddrLo|temp);
        ; Setup parameters for call to function WriteLCD
        MOV	A,#0xf
        SJMP	?Subroutine10
        CFI EndBlock cfiBlock5
//  221 }
//  222 
//  223 
//  224 /*******************************************************************************
//  225 //º¯ÊýÃû£ºvoid SetContrast(INT8U Gain, INT8U Step)
//  226 //¹¦ÄÜ£ºlcd¶Ô±È¶ÈÉè¶¨
//  227 //ÊäÈë£ºPage-Ò³£¬Col-ÁÐ
//  228 //Êä³ö£ºÎÞ
//  229 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  230 void SetContrast(INT8U Gain, INT8U Step)
SetContrast:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function SetContrast
//  231 {
        FUNCALL SetContrast, WriteLCD
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL SetContrast, WriteLCD
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL SetContrast, WriteLCD
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
//  232 	WriteLCD(COMMAND , IntRegRatio | (0x0f & Gain)); 	//Éè¶¨ÄÚ²¿µç×è
        ; Setup parameters for call to function WriteLCD
        MOV	A,#0xf
        ANL	A,R1
        ORL	A,#0x20
        MOV	R2,A
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  233 	WriteLCD(COMMAND , ContCtrlReg); 			//Éè¶¨ÄÚ²¿¶Ô±È¿ØÖÆÆ÷
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x7f
        MOV	R1,#0x0
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  234 	WriteLCD(COMMAND , 0x3f & Step);
        ; Setup parameters for call to function WriteLCD
        MOV	A,#0x3f
        SJMP	?Subroutine10
        CFI EndBlock cfiBlock6
//  235 }
//  236 
//  237 
//  238 
//  239 /*******************************************************************************
//  240 //º¯ÊýÃû£ºvoid InitDisplay(void)
//  241 //¹¦ÄÜ£ºlcdÉè¶¨ÎªÕý³£ÏÔÊ¾×´Ì¬
//  242 //ÊäÈë£ºÎÞ
//  243 //Êä³ö£ºÎÞ
//  244 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  245 void InitDisplay(void)
InitDisplay:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function InitDisplay
//  246 {
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL InitDisplay, SetContrast
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL InitDisplay, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  247 	WriteLCD(COMMAND , DisplayOff);			//¹ØÏÔÊ¾
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x52
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  248 	WriteLCD(COMMAND , SegRemapOn);    			//ks0713/ssd1815
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x5f
        MOV	R1,#0x0
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  249 	WriteLCD(COMMAND , ComRemapOn);    			//ssd1815
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x38
        MOV	R1,#0x0
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  250 	SetContrast(iIntRegValue, iContCtrlRegValue); 	//Éè¶¨È±Ê¡¶Ô±È¶È
        ; Setup parameters for call to function SetContrast
        MOV	R2,#0x10
        MOV	R1,#0x1
        MOV	DPTR,#(SetContrast & 0xffff)
        MOV	A,#((SetContrast >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  251 	WriteLCD(COMMAND , PwrCtrlReg | IntVolBstr | IntReg | OPampBuffer); //turn on booster, regulator & divider
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#0x2f
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  252 	WriteLCD(COMMAND , DisplayOn);				//¿ªÏÔÊ¾
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x51
        MOV	R1,#0x0
        MOV	A,#((WriteLCD >> 16) & 0xff)
        CFI EndBlock cfiBlock7
        REQUIRE ?Subroutine9
        ; // Fall through to label ?Subroutine9
//  253 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL	?BCALL               ; Banked call to: DPTR()
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock8
//  254 
//  255 
//  256 /*******************************************************************************
//  257 //º¯ÊýÃû£ºvoid contrastctrl(INT8U start,stop)
//  258 //¹¦ÄÜ£ºlcd¶Ô±È¶Èµ÷Õû
//  259 //ÊäÈë£ºÎÞ
//  260 //Êä³ö£ºÎÞ
//  261 ********************************************************************************/
//  262 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  263 void contrastctrl(INT8U start, INT8U stop)
contrastctrl:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function contrastctrl
//  264 {
        FUNCALL contrastctrl, SetContrast
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL contrastctrl, delay_us
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL contrastctrl, SetContrast
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL contrastctrl, delay_us
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R2
        MOV	R7,A
//  265 	INT8U i;
//  266 	if (start < stop)
        MOV	A,R1
        CLR	C
        SUBB	A,R7
        MOV	A,R1
        MOV	R6,A
        JNC	??contrastctrl_0
//  267 	{
//  268 		for (i=start; i<stop; i+=1)
??contrastctrl_1:
        MOV	A,R6
        CLR	C
        SUBB	A,R7
        JNC	??contrastctrl_2
//  269 		{
//  270 			SetContrast(iIntRegValue, i); //slowly turn on display
        ; Setup parameters for call to function SetContrast
        MOV	A,R6
        MOV	R2,A
        MOV	R1,#0x1
        MOV	DPTR,#(SetContrast & 0xffff)
        MOV	A,#((SetContrast >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  271 			delay_us(80);
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x50
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  272 		}
        INC	R6
        SJMP	??contrastctrl_1
//  273 	}
//  274 	else
//  275 	{
//  276 		for (i=start; i>stop; i-=1)
//  277 		{
//  278 			SetContrast(iIntRegValue, i); //slowly turn off display
??contrastctrl_3:
        ; Setup parameters for call to function SetContrast
        MOV	A,R6
        MOV	R2,A
        MOV	R1,#0x1
        MOV	DPTR,#(SetContrast & 0xffff)
        MOV	A,#((SetContrast >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  279 			delay_us(120);
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x78
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  280 		}
        DEC	R6
??contrastctrl_0:
        MOV	A,R7
        CLR	C
        SUBB	A,R6
        JC	??contrastctrl_3
//  281 	}
//  282 }
??contrastctrl_2:
        LJMP	??Subroutine10_0 & 0xFFFF
        CFI EndBlock cfiBlock9
//  283 
//  284 
//  285 
//  286 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  287 void ClearScreen(void)
ClearScreen:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ClearScreen
//  288 {
        FUNCALL ClearScreen, SetRamAddr
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ClearScreen, WriteLCD
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  289  	INT8U x,y;
//  290 	for(x = 0;x < 8 ;x++){
        MOV	R7,#0x0
//  291           SetRamAddr(x , 0);
??ClearScreen_0:
        ; Setup parameters for call to function SetRamAddr
        MOV	R2,#0x0
        MOV	A,R7
        MOV	R1,A
        MOV	DPTR,#(SetRamAddr & 0xffff)
        MOV	A,#((SetRamAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  292 	  	for(y = 0 ; y < 128 ; y++){	  		
        MOV	R6,#-0x80
//  293 	  					
//  294 			WriteLCD(DATA , 0x00);
??ClearScreen_1:
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#0x0
        MOV	R1,#0x1
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  295 		}		
        DEC	R6
        MOV	A,R6
        JNZ	??ClearScreen_1
//  296 	}
        INC	R7
        MOV	A,R7
        CLR	C
        SUBB	A,#0x8
        JC	??ClearScreen_0
//  297 }
        LJMP	??Subroutine10_0 & 0xFFFF
        CFI EndBlock cfiBlock10
//  298 
//  299 
//  300 
//  301 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  302 void HalLcdInit(void)
HalLcdInit:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function HalLcdInit
//  303 {	
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, WriteLCD
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, delay_us
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL HalLcdInit, SetContrast
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  304 
//  305         P1DIR |= 0xFC;
        ORL	0xfe,#0xfc
        MOV	A,0xfe
//  306         P2DIR |= 0x01;
        ORL	0xff,#0x1
//  307         P0DIR |= 0x02;
        ORL	0xfd,#0x2
//  308         P1_2 = 0;
        CLR	0x90.2
//  309 	delay_us(100);	
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  310 	WriteLCD(COMMAND , 0xE2);//¸´Î»
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x1e
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  311 
//  312 	delay_us(100);
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  313 	WriteLCD(COMMAND , 0xA3);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x5d
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  314 
//  315 	delay_us(100);	
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  316 	WriteLCD(COMMAND , 0xA0);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x60
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  317 	
//  318 	delay_us(100);
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  319 	WriteLCD(COMMAND , 0xC8);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x38
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  320 
//  321 	delay_us(100);	
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  322 	WriteLCD(COMMAND , 0x24);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#0x24
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  323 	
//  324 	delay_us(100);
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  325 	WriteLCD(COMMAND , 0x81);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x7f
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  326 
//  327 	delay_us(100);	
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  328 	WriteLCD(COMMAND , 0x14);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#0x14
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  329 	
//  330 	delay_us(100);
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  331 	WriteLCD(COMMAND , 0x2F);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#0x2f
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  332 
//  333 	delay_us(100);	
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  334 	WriteLCD(COMMAND , 0x40);//´ÓµÚÒ»ÁÐ¿ªÊ¼ÏÔÊ¾
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#0x40
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  335 	
//  336 	delay_us(100);
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  337 	WriteLCD(COMMAND , 0xB0);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x50
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  338 
//  339 	delay_us(100);	
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  340 	WriteLCD(COMMAND , 0x10);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#0x10
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  341 	
//  342 	delay_us(100);
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  343 	WriteLCD(COMMAND , 0x00);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#0x0
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  344 
//  345 	delay_us(100);	
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  346 	WriteLCD(COMMAND , 0xAF);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x51
        MOV	R1,#0x0
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  347 
//  348 	WriteLCD(COMMAND , 0x81);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#-0x7f
        MOV	R1,#0x0
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  349 	WriteLCD(COMMAND , 0x1b);
        ; Setup parameters for call to function WriteLCD
        MOV	R2,#0x1b
        MOV	R1,#0x0
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  350         delay_us(100);	
        ; Setup parameters for call to function delay_us
        MOV	R2,#0x64
        MOV	R3,#0x0
        MOV	DPTR,#(delay_us & 0xffff)
        MOV	A,#((delay_us >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  351         SetContrast(iIntRegValuea,ContrastValue);
        ; Setup parameters for call to function SetContrast
        MOV	DPTR,#ContrastValue
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	R1,#0x14
        MOV	DPTR,#(SetContrast & 0xffff)
        MOV	A,#((SetContrast >> 16) & 0xff)
        LJMP	?Subroutine9 & 0xFFFF
        CFI EndBlock cfiBlock11
//  352 	//ClearScreen();
//  353 }
//  354 
//  355 
//  356 
//  357 /*******************************************************************************
//  358 //º¯ÊýÃû£ºvoid Print6(INT8U xx, INT8U yy, INT8U ch1[], INT8U yn)
//  359 //¹¦ÄÜ£ºÏÔÊ¾6*8×Ö·û´®
//  360 //ÊäÈë£ºxx ,yy ×ø±ê,ch1´ýÏÔÊ¾µÄ×Ö·û´®,ynÊÇ·ñ·´ºÚ
//  361 //Êä³ö£ºÎÞ
//  362 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  363 void Print6(INT8U xx, INT8U yy, INT8U ch1[], INT8U yn)		
Print6:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Print6
//  364 {
        FUNCALL Print6, WriteLCD
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Print6, SetRamAddr
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL Print6, WriteLCD
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 2,R1
        MOV	?V0 + 0,R2
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
        MOV	?V0 + 3,R3
//  365 	INT8U ii = 0;
//  366 	INT8U bb = 0;
        MOV	?V0 + 1,#0x0
//  367 	unsigned int index = 0 ;	
        SJMP	??Print6_0
//  368 			
//  369 	while(ch1[bb] != '\0')
//  370 	{
//  371                 index = (unsigned int)(ch1[bb] - 0x20);
//  372 		index = (unsigned int)index*6;		
//  373 		for(ii=0;ii<6;ii++)
//  374 		{
//  375 			SetRamAddr(xx , yy);
//  376 			if(yn == 0)
//  377 			{
//  378 				WriteLCD(DATA, ~FontSystem6x8[index]);
//  379 				
//  380 			}
//  381 			else
//  382 			{
//  383 				WriteLCD(DATA, FontSystem6x8[index]);
??Print6_1:
        ; Setup parameters for call to function WriteLCD
        LCALL	?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV	R2,A
        MOV	R1,#0x1
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  384 			}		
//  385 			index += 1;
        MOV	A,R6
        ADD	A,#0x1
        INC	R6
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R7,A
//  386 			yy += 1;
        INC	?V0 + 0
        DEC	?V0 + 4
        MOV	A,?V0 + 4
        JNZ	??Print6_2
//  387 		}		
//  388 		bb += 1;
        INC	?V0 + 1
??Print6_0:
        MOV	?V0 + 4,?V0 + 1
        MOV	A,?V0 + 6
        ADD	A,?V0 + 4
        MOV	DPL,A
        MOV	A,?V0 + 7
        ADDC	A,#0x0
        MOV	DPH,A
        MOVX	A,@DPTR
        JZ	??Print6_3
        MOV	R0,A
        MOV	A,#-0x20
        ADD	A,R0
        MOV	R6,A
        MOV	A,#-0x1
        ADDC	A,#0x0
        MOV	R7,A
        MOV	A,R6
        MOV	B,#0x6
        MUL	AB
        MOV	R6,A
        MOV	R2,B
        MOV	B,#0x6
        MOV	A,R7
        MUL	AB
        ADD	A,R2
        MOV	R7,A
        MOV	?V0 + 4,#0x6
??Print6_2:
        ; Setup parameters for call to function SetRamAddr
        MOV	R2,?V0 + 0
        MOV	R1,?V0 + 2
        MOV	DPTR,#(SetRamAddr & 0xffff)
        MOV	A,#((SetRamAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,?V0 + 3
        JNZ	??Print6_1
        ; Setup parameters for call to function WriteLCD
        LCALL	?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_20:
        CPL	A
        SJMP	??CrossCallReturnLabel_19
        CFI EndBlock cfiBlock12
//  389 	}
//  390 }
??Print6_3:
        REQUIRE ?Subroutine11
        ; // Fall through to label ?Subroutine11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOV	A,R6
        ADD	A,#(FontSystem6x8 & 0xff)
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#((FontSystem6x8 >> 8) & 0xff)
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
        REQUIRE ?Subroutine12
        ; // Fall through to label ?Subroutine12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_10
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_9
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_15
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_16
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_11
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_13
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_14
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_12
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV	DPH,A
        CLR	A
        MOVC	A,@A+DPTR
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
//  391 
//  392 
//  393 //*******************************************************************************
//  394 //º¯ÊýÃû£ºvoid Printn8(INT8U xx ,INT8U yy , INT32U no,INT8U yn,INT8U le)
//  395 //¹¦ÄÜ£ºÏÔÊ¾8*8Ò»¸öÎÞ·ûºÅÊý¾Ý
//  396 //ÊäÈë£ºxx , yyÆÁÄ»µ±ÖÐÎ»ÖÃ,no´ýÏÔÊ¾Êý¾Ý yn=0Õý³£ÏÔÊ¾ yn=1·´ºÚÏÔÊ¾  leÓÐÐ§Î»
//  397 //Êä³ö£ºÎÞ
//  398 //*******************************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  399 void Printn8(INT8U xx ,INT8U yy , INT32U no,INT8U yn,INT8U le)
Printn8:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function Printn8
//  400 {
        FUNCALL Printn8, Print8
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 6
        MOV	A,#-0x6
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	A,R1
        MOV	R6,A
        MOV	A,R2
        MOV	R5,A
//  401 	INT8U ch2[6];
//  402 	INT8U ii;
//  403 
//  404 	for(ii = 1 ; ii <= le ;){
        MOV	R2,#0x1
        SJMP	??Printn8_0
//  405 		ch2[le - ii] = no % 10 + 0x30;
??Printn8_1:
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	DPTR,#__Constant_a
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?UL_DIV_MOD
        MOV	A,?V0 + 0
        ADD	A,#0x30
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	?V0 + 0,R2
        MOV	A,R4
        CLR	C
        SUBB	A,?V0 + 0
        MOV	R0,A
        CLR	A
        SUBB	A,#0x0
        MOV	R1,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,DPL
        ADD	A,R0
        MOV	DPL,A
        MOV	A,DPH
        ADDC	A,R1
        MOV	DPH,A
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  406 		no /= 10;
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	DPTR,#__Constant_a
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?UL_DIV_MOD
        MOV	?V0 + 0,?V0 + 4
        MOV	?V0 + 1,?V0 + 5
        MOV	?V0 + 2,?V0 + 6
        MOV	?V0 + 3,?V0 + 7
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
//  407 		ii += 1;
        INC	R2
//  408 	}
??Printn8_0:
        MOV	A,R4
        CLR	C
        SUBB	A,R2
        JNC	??Printn8_1
//  409 	ch2[le] = '\0';
        MOV	?V0 + 0,R4
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,DPL
        ADD	A,?V0 + 0
        MOV	DPL,A
        MOV	A,DPH
        ADDC	A,#0x0
        MOV	DPH,A
        CLR	A
        MOVX	@DPTR,A
//  410 	Print8(xx ,yy ,ch2 ,yn);
        ; Setup parameters for call to function Print8
        MOV	?V0 + 0,R3
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	A,R5
        MOV	R4,A
        MOV	R5,#0x0
        MOV	A,R6
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(Print8 & 0xffff)
        MOV	A,#((Print8 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  411 }
        MOV	A,#0x6
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        LJMP	?Subroutine11 & 0xFFFF
        CFI EndBlock cfiBlock28
//  412 
//  413 /*******************************************************************************
//  414 //º¯ÊýÃû£ºvoid Print8(INT16U y,INT16U x, INT8U ch,INT16U yn)
//  415 //¹¦ÄÜ£ºÏÔÊ¾8*8×Ö·û
//  416 //ÊäÈë£ºxx ,yy ×ø±ê,ch´ýÏÔÊ¾µÄ×Ö·û,ynÊÇ·ñ·´ºÚ
//  417 //Êä³ö£ºÎÞ
//  418 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  419 void PrintCh8(INT16U y,INT16U x, INT8U ch,INT16U yn)
PrintCh8:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function PrintCh8
//  420 {
        FUNCALL PrintCh8, SetRamAddr
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL PrintCh8, SetRamAddr
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL PrintCh8, WriteLCD
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	?V0 + 0,R4
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
//  421 	INT8U wm;
//  422 	INT16U adder;
//  423 	
//  424 	adder = (ch - 0x20) * 16;
        MOV	?V0 + 2,R1
        MOV	A,#-0x20
        ADD	A,?V0 + 2
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL	?S_SHL
        MOV	?V0 + 2,?V0 + 4
        MOV	?V0 + 3,?V0 + 5
//  425 	for(wm = 0;wm < 8;wm++)
        MOV	?V0 + 4,#0x8
//  426 	{
//  427 		SetRamAddr(y , x);
??PrintCh8_0:
        ; Setup parameters for call to function SetRamAddr
        MOV	R2,?V0 + 0
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(SetRamAddr & 0xffff)
        MOV	A,#((SetRamAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  428 		if(yn == 0)
        MOV	A,?V0 + 6
        JNZ	??PrintCh8_1
        MOV	A,?V0 + 7
??PrintCh8_1:
        JNZ	??PrintCh8_2
//  429 		{
//  430 			WriteLCD(DATA, ~Font8X8[adder]);
        ; Setup parameters for call to function WriteLCD
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        SJMP	??CrossCallReturnLabel_13
//  431 		}
//  432 		else
//  433 		{
//  434 			WriteLCD(DATA, Font8X8[adder]);
??PrintCh8_2:
        ; Setup parameters for call to function WriteLCD
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV	R2,A
        MOV	R1,#0x1
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  435 		}
//  436 		adder += 1;
        LCALL	?Subroutine0 & 0xFFFF
//  437 		x += 1;
//  438 	}
??CrossCallReturnLabel_0:
        JNZ	??PrintCh8_0
//  439 	y += 1;
        INC	R6
//  440 	x -= 8;
        MOV	A,?V0 + 0
        ADD	A,#-0x8
        MOV	?V0 + 0,A
//  441 	for(wm = 0;wm < 8;wm++)
        MOV	?V0 + 4,#0x8
//  442 	{
//  443 		SetRamAddr(y , x);
??PrintCh8_3:
        ; Setup parameters for call to function SetRamAddr
        MOV	R2,?V0 + 0
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(SetRamAddr & 0xffff)
        MOV	A,#((SetRamAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  444 		if(yn == 0)
        MOV	A,?V0 + 6
        JNZ	??PrintCh8_4
        MOV	A,?V0 + 7
??PrintCh8_4:
        JNZ	??PrintCh8_5
//  445 		{
//  446 				WriteLCD(DATA, ~Font8X8[adder]);
        ; Setup parameters for call to function WriteLCD
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        SJMP	??CrossCallReturnLabel_14
//  447 		}
//  448 		else
//  449 		{
//  450 			WriteLCD(DATA, Font8X8[adder]);	
??PrintCh8_5:
        ; Setup parameters for call to function WriteLCD
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV	R2,A
        MOV	R1,#0x1
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  451 		}
//  452 		adder += 1;
        LCALL	?Subroutine0 & 0xFFFF
//  453 		x += 1;
//  454 	}
??CrossCallReturnLabel_1:
        JNZ	??PrintCh8_3
//  455 }
        LJMP	?Subroutine11 & 0xFFFF
        CFI EndBlock cfiBlock29
//  456 
//  457 
//  458 /*******************************************************************************
//  459 //º¯ÊýÃû£ºvoid Print8(INT16U y,INT16U x, INT8U ch[],INT16U yn)
//  460 //¹¦ÄÜ£ºÏÔÊ¾8*8×Ö·û´®
//  461 //ÊäÈë£ºxx ,yy ×ø±ê,ch1´ýÏÔÊ¾µÄ×Ö·û´®,ynÊÇ·ñ·´ºÚ
//  462 //Êä³ö£ºÎÞ
//  463 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  464 void Print8(INT16U y,INT16U x, INT8U ch[],INT16U yn)
Print8:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function Print8
//  465 {
        FUNCALL Print8, WriteLCD
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL Print8, SetRamAddr
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL Print8, WriteLCD
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL Print8, WriteLCD
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL Print8, SetRamAddr
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL Print8, WriteLCD
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	?V0 + 0,R4
//  466 	INT8U wm ,ii = 0;
        MOV	?V0 + 6,#0x0
        SJMP	??Print8_0
//  467 	INT16U adder;
//  468 
//  469 	while(ch[ii] != '\0')
//  470 	{
//  471 		adder = (ch[ii] - 0x20) * 16;
//  472 
//  473 		for(wm = 0;wm < 8;wm++)
//  474 		{
//  475 			SetRamAddr(y , x);
//  476 			if(yn == 0)
//  477 			{
//  478 				WriteLCD(DATA, ~Font8X8[adder]);
//  479 			}
//  480 			else
//  481 			{
//  482 				WriteLCD(DATA, Font8X8[adder]);
//  483 			}
//  484 			adder += 1;
//  485 			x += 1;
//  486 		}
//  487 		y += 1;
//  488 		x -= 8;
//  489 		for(wm = 0;wm < 8;wm++)
//  490 		{
//  491 			SetRamAddr(y , x);
//  492 			if(yn == 0)
//  493 			{
//  494 				WriteLCD(DATA, ~Font8X8[adder]);
//  495 			}
//  496 			else
//  497 			{
//  498 				WriteLCD(DATA, Font8X8[adder]);	
??Print8_1:
        ; Setup parameters for call to function WriteLCD
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV	R2,A
        MOV	R1,#0x1
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  499 			}
//  500 			adder += 1;
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ	$+5
        LJMP	??Print8_2 & 0xFFFF
//  501 			x += 1;
//  502 		}
//  503 		ii += 1;
        INC	?V0 + 6
//  504 		y -= 1;
        DEC	R6
??Print8_0:
        MOV	R0,?V0 + 6
        MOV	A,#0xf
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R2,A
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        JNZ	$+5
        LJMP	??Print8_3 & 0xFFFF
        MOV	A,#0xf
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,R0
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV	R0,A
        MOV	A,#-0x20
        ADD	A,R0
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL	?S_SHL
        MOV	?V0 + 2,?V0 + 4
        MOV	?V0 + 3,?V0 + 5
        MOV	?V0 + 4,#0x8
??Print8_4:
        ; Setup parameters for call to function SetRamAddr
        MOV	R2,?V0 + 0
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(SetRamAddr & 0xffff)
        MOV	A,#((SetRamAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x11
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??Print8_5
        INC	DPTR
        MOVX	A,@DPTR
??Print8_5:
        JNZ	??Print8_6
        ; Setup parameters for call to function WriteLCD
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        SJMP	??CrossCallReturnLabel_16
??Print8_6:
        ; Setup parameters for call to function WriteLCD
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV	R2,A
        MOV	R1,#0x1
        MOV	DPTR,#(WriteLCD & 0xffff)
        MOV	A,#((WriteLCD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_17:
        ADD	A,#0x1
        MOV	?V0 + 0,A
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	?V0 + 1,A
        DEC	?V0 + 4
        MOV	A,?V0 + 4
        JNZ	??Print8_4
        MOV	A,R6
        ADD	A,#0x1
        INC	R6
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R7,A
        MOV	A,?V0 + 0
        ADD	A,#-0x8
        MOV	?V0 + 0,A
        MOV	A,?V0 + 1
        ADDC	A,#-0x1
        MOV	?V0 + 1,A
        MOV	?V0 + 4,#0x8
??Print8_2:
        ; Setup parameters for call to function SetRamAddr
        MOV	R2,?V0 + 0
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(SetRamAddr & 0xffff)
        MOV	A,#((SetRamAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x11
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??Print8_7
        INC	DPTR
        MOVX	A,@DPTR
??Print8_7:
        JZ	$+5
        LJMP	??Print8_1 & 0xFFFF
        ; Setup parameters for call to function WriteLCD
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        LJMP	??CrossCallReturnLabel_15 & 0xFFFF
        CFI EndBlock cfiBlock30
//  505 	}
//  506 
//  507 }
??Print8_3:
        REQUIRE ?Subroutine13
        ; // Fall through to label ?Subroutine13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x7
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_22:
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_11
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_13
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_10
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_9
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_15
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_14
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_12
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOV	A,?V0 + 2
        ADD	A,#(Font8X8 & 0xff)
        MOV	DPL,A
        MOV	A,?V0 + 3
        ADDC	A,#((Font8X8 >> 8) & 0xff)
        LJMP	?Subroutine12 & 0xFFFF
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_21:
        CPL	A
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	DPL,R2
        MOV	DPH,A
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        MOV	?V0 + 4,A
        MOV	A,#-0x1
        ADDC	A,#0x0
        MOV	?V0 + 5,A
        MOV	A,#0x4
        MOV	R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_18:
        INC	A
        MOV	?V0 + 0,A
        DEC	?V0 + 4
        MOV	A,?V0 + 4
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_2
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_0
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_1
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOV	A,?V0 + 2
        ADD	A,#0x1
        MOV	?V0 + 2,A
        MOV	A,?V0 + 3
        ADDC	A,#0x0
        MOV	?V0 + 3,A
        MOV	A,?V0 + 0
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65
//  508 
//  509 
//  510 /*******************************************************************************
//  511 //º¯ÊýÃû£ºvoid Print16(INT16U y,INT16U x,INT8U ch[],INT16U yn)
//  512 //¹¦ÄÜ£ºÔÚÆÁÄ»ÉÏÏÔÊ¾ºº×Ö
//  513 //ÊäÈë£ºx ,y ×ø±ê,ch[]´ýÏÔÊ¾µÄºº×Ö,ynÊÇ·ñ·´ºÚ
//  514 //Êä³ö£ºÎÞ
//  515 ********************************************************************************
//  516 void Print16(INT16U y,INT16U x,INT8U ch[],INT16U yn)
//  517 {
//  518 	INT8U wm ,ii = 0;
//  519 	INT16U adder;
//  520 
//  521 	wm = 0;
//  522 	adder = 1;
//  523 	while(FontNew8X16_Index[wm] > 128)
//  524 	{
//  525 		if(FontNew8X16_Index[wm] == ch[ii])
//  526 		{
//  527 			if(FontNew8X16_Index[wm + 1] == ch[ii + 1])
//  528 			{
//  529 				adder = wm * 14;
//  530 				break;
//  531 			}
//  532 		}
//  533 		wm += 2;				//ÕÒµ½ºº×ÖÔÚË÷ÒýÖÐµÄÎ»ÖÃ
//  534 	}
//  535 	SetRamAddr(y , x);
//  536 
//  537 	if(adder != 1)					//ÕÒµ½ºº×Ö£¬ÏÔÊ¾³öÀ´	
//  538 	{
//  539 		
//  540 		for(wm = 0;wm < 14;wm++)
//  541 		{
//  542 			SetRamAddr(y , x);
//  543 			if(yn == 0)
//  544 			{
//  545 				WriteLCD(DATA, ~FontNew16X16[adder]);
//  546 			}
//  547 			else
//  548 			{
//  549 				WriteLCD(DATA, FontNew16X16[adder]);
//  550 			}
//  551 			adder += 1;
//  552 			x += 1;
//  553 		}
//  554                 for(wm = 0;wm < 2;wm++)
//  555 		{
//  556 			SetRamAddr(y , x);
//  557 			if(yn == 0)
//  558 			{
//  559 				WriteLCD(DATA, 0xff);
//  560 			}
//  561 			else
//  562 			{
//  563 				WriteLCD(DATA, 0x00);
//  564 			}
//  565 			x += 1;
//  566 		}
//  567 		y += 1;
//  568 		x -=16;
//  569 
//  570 		for(wm = 0;wm < 14;wm++)
//  571 		{
//  572 			SetRamAddr(y , x);
//  573 			if(yn == 0)
//  574 			{
//  575 				WriteLCD(DATA, ~FontNew16X16[adder]);
//  576 			}
//  577 			else
//  578 			{
//  579 				WriteLCD(DATA, FontNew16X16[adder]);
//  580 			}
//  581 			adder += 1;
//  582 			x += 1;
//  583 		}
//  584                 for(wm = 0;wm < 2;wm++)
//  585 		{
//  586 			SetRamAddr(y , x);
//  587 			if(yn == 0)
//  588 			{
//  589 				WriteLCD(DATA, 0xff);
//  590 			}
//  591 			else
//  592 			{
//  593 				WriteLCD(DATA, 0x00);
//  594 			}
//  595 			x += 1;
//  596 		}
//  597 
//  598 
//  599 	}
//  600 	else						//ÕÒ²»µ½×ÖÏÔÊ¾¿Õ¸ñ			
//  601 	{
//  602 		ii += 1;
//  603 
//  604 		for(wm = 0;wm < 16;wm++)
//  605 		{
//  606 			SetRamAddr(y , x);
//  607 			if(yn == 0)
//  608 			{
//  609 				WriteLCD(DATA, 0xff);
//  610 			}
//  611 			else
//  612 			{
//  613 				WriteLCD(DATA, 0x00);
//  614 			}
//  615 			x += 1;
//  616 		}
//  617 		y += 1;
//  618 		x -= 16;
//  619 		for(wm = 0;wm < 16;wm++)
//  620 		{
//  621 			SetRamAddr(y , x);
//  622 			if(yn == 0)
//  623 			{
//  624 				WriteLCD(DATA, 0xff);
//  625 			}
//  626 			else
//  627 			{
//  628 				WriteLCD(DATA, 0x00);
//  629 			}
//  630 			x += 1;
//  631 		}
//  632 	}
//  633 }*/
//  634 
//  635 
//  636 /*******************************************************************************
//  637 //º¯ÊýÃû£ºvoid Print(INT8U y, INT8U x, INT8U ch[], INT16U yn)
//  638 //¹¦ÄÜ£ºÊµÏÖºº×Ö¼°×ÖÄ¸»ìºÏÏÔÊ¾
//  639 //ÊäÈë£ºx ,y ×ø±ê,ch[]´ýÏÔÊ¾µÄºº×Ö»ò×ÖÄ¸,ynÊÇ·ñ·´ºÚ
//  640 //Êä³ö£ºÎÞ
//  641 ********************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  642 void Print(INT8U y, INT8U x, INT8U ch[], INT16U yn)
Print:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI Function Print
//  643 {
        FUNCALL Print, Print8
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 3
        MOV	A,#-0x3
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	?V0 + 6,R1
        MOV	?V0 + 0,R2
        MOV	?V0 + 4,R4
        MOV	?V0 + 5,R5
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
//  644 	INT8U ch2[3];
//  645 	INT8U ii;
//  646         ii = 0;
        MOV	?V0 + 1,#0x0
        SJMP	??Print_0
//  647 	while(ch[ii] != '\0')
//  648 	{
//  649 		if(ch[ii] > 128)
//  650 		{
//  651 			ch2[0] = ch[ii];
??Print_1:
        MOV	A,?V0 + 4
        ADD	A,?V0 + 2
        MOV	R0,A
        MOV	A,?V0 + 5
        ADDC	A,#0x0
        MOV	R1,A
        LCALL	?Subroutine4 & 0xFFFF
//  652 	 		ch2[1] = ch[ii + 1];
??CrossCallReturnLabel_7:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  653 			ch2[2] = '\0';			//ºº×ÖÎªÁ½¸ö×Ö½Ú
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
//  654 			//Print16(y , x , ch2 , yn);	//ÏÔÊ¾ºº×Ö
//  655 			x += 16;
        MOV	A,#0x10
        ADD	A,?V0 + 0
        MOV	?V0 + 0,A
//  656 			ii += 2;
        INC	?V0 + 1
??Print_2:
        INC	?V0 + 1
//  657 		}
??Print_0:
        MOV	?V0 + 2,?V0 + 1
        MOV	A,?V0 + 4
        ADD	A,?V0 + 2
        MOV	DPL,A
        MOV	A,?V0 + 5
        ADDC	A,#0x0
        MOV	DPH,A
        MOVX	A,@DPTR
        JZ	??Print_3
        CLR	C
        SUBB	A,#-0x7f
        JNC	??Print_1
//  658 		else
//  659 		{
//  660 			ch2[0] = ch[ii];	
        LCALL	?Subroutine4 & 0xFFFF
//  661 			ch2[1] = '\0';			//×ÖÄ¸Õ¼Ò»¸ö×Ö½Ú
??CrossCallReturnLabel_8:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
//  662 			Print8(y , x , ch2 , yn);	//ÏÔÊ¾×ÖÄ¸
        ; Setup parameters for call to function Print8
        MOV	?V0 + 2,R6
        MOV	?V0 + 3,R7
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	?V0 + 2,DPL
        MOV	?V0 + 3,DPH
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	R4,?V0 + 0
        MOV	R5,#0x0
        MOV	R2,?V0 + 6
        MOV	R3,#0x0
        MOV	DPTR,#(Print8 & 0xffff)
        MOV	A,#((Print8 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  663 			x += 8;
        MOV	A,#0x8
        ADD	A,?V0 + 0
        MOV	?V0 + 0,A
//  664 			ii += 1;
        SJMP	??Print_2
//  665 		}
//  666 	}
//  667 }
??Print_3:
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        LJMP	?Subroutine13 & 0xFFFF
        CFI EndBlock cfiBlock66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        MOVX	A,@DPTR
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ContrastValue>`:
        DB 90

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_a>`:
        DD 10

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DS 1

        END
//  668 
// 
// 1 766 bytes in segment BANKED_CODE
//     6 bytes in segment SFR_AN
//     5 bytes in segment XDATA_I
//     5 bytes in segment XDATA_ID
// 
// 1 767 bytes of CODE  memory (+ 4 bytes shared)
//     0 bytes of DATA  memory (+ 6 bytes shared)
//     1 byte  of XDATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
