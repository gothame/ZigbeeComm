//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:52:40 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC24 /
//                          30EB\hal_uart.c                                  /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wE /
//                          ndev.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS  /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          MT_TASK -D ZG_ENDDEVICE -lC                      /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\ -lA           /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\EndDeviceEB\Obj\ -e          /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC24 /
//                          30EB\hal_uart.c                                  /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\hal_uart.s51   /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME hal_uart

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?G_EQ
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN __INIT_XDATA_Z

        FUNCTION ??pollDMA,021203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBWEAK ADCCFG
        PUBWEAK DMAARM
        PUBWEAK DMAIRQ
        PUBWEAK DMAREQ
        PUBLIC HalUARTClose
        FUNCTION HalUARTClose,0203H
        PUBLIC HalUARTInit
        FUNCTION HalUARTInit,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalUARTOpen
        FUNCTION HalUARTOpen,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC HalUARTPoll
        FUNCTION HalUARTPoll,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC HalUARTRead
        FUNCTION HalUARTRead,0203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC HalUARTWrite
        FUNCTION HalUARTWrite,0203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0203H
        LOCFRAME ISTACK, 3, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK P2DIR
        PUBWEAK PERCFG
        PUBWEAK ST0
        PUBWEAK U0BAUD
        PUBWEAK U0CSR
        PUBWEAK U0DBUF
        PUBWEAK U0GCR
        PUBWEAK U0UCR
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME XSTACK, 15, STACK
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME XSTACK, 15, STACK
        EXTERN dmaCh1234

// E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Components\hal\target\CC2430EB\hal_uart.c
//    1 /******************************************************************************
//    2     Filename:       _hal_uart.c
//    3     Revised:        $Date: 2007-03-26 11:53:55 -0700 (Mon, 26 Mar 2007) $
//    4     Revision:       $Revision: 13853 $
//    5 
//    6     Description: This file contains the interface to the H/W UART driver.
//    7 
//    8     Copyright (c) 2007 by Texas Instruments, Inc.
//    9     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   10     derivative works, modify, distribute, perform, display or sell this
//   11     software and/or its documentation for any purpose is prohibited
//   12     without the express written consent of Texas Instruments, Inc.
//   13 ******************************************************************************/
//   14 
//   15 /*********************************************************************
//   16  * INCLUDES
//   17  */
//   18 
//   19 #include "hal_types.h"
//   20 #include "hal_assert.h"
//   21 #include "hal_board.h"

        ASEGN SFR_AN:DATA:NOROOT,086H
// unsigned char volatile __sfr U0CSR
U0CSR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,095H
// unsigned char volatile __sfr ST0
ST0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c1H
// unsigned char volatile __sfr U0DBUF
U0DBUF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c2H
// unsigned char volatile __sfr U0BAUD
U0BAUD:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c4H
// unsigned char volatile __sfr U0UCR
U0UCR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c5H
// unsigned char volatile __sfr U0GCR
U0GCR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d1H
// unsigned char volatile __sfr DMAIRQ
DMAIRQ:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d6H
// unsigned char volatile __sfr DMAARM
DMAARM:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d7H
// unsigned char volatile __sfr DMAREQ
DMAREQ:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DS 1
//   22 #include "hal_defs.h"
//   23 #if defined( HAL_UART_DMA ) && HAL_UART_DMA
//   24   #include "hal_dma.h"
//   25 #endif
//   26 #include "hal_mcu.h"
//   27 #include "hal_uart.h"
//   28 #include "osal.h"
//   29 
//   30 /*********************************************************************
//   31  * MACROS
//   32  */
//   33 
//   34 #if !defined ( HAL_UART_DEBUG )
//   35   #define HAL_UART_DEBUG  FALSE
//   36 #endif
//   37 
//   38 #if !defined ( HAL_UART_CLOSE )
//   39   #define HAL_UART_CLOSE  FALSE
//   40 #endif
//   41 
//   42 #if !defined ( HAL_UART_BIG_TX_BUF )
//   43   #define HAL_UART_BIG_TX_BUF  FALSE
//   44 #endif
//   45 
//   46 /*
//   47  *  The MAC_ASSERT macro is for use during debugging.
//   48  *  The given expression must evaluate as "true" or else fatal error occurs.
//   49  *  At that point, the call stack feature of the debugger can pinpoint where
//   50  *  the problem occurred.
//   51  *
//   52  *  To disable this feature and save code size, the project should define
//   53  *  HAL_UART_DEBUG to FALSE.
//   54  */
//   55 #if ( HAL_UART_DEBUG )
//   56   #define HAL_UART_ASSERT( expr)        HAL_ASSERT( expr )
//   57 #else
//   58   #define HAL_UART_ASSERT( expr )
//   59 #endif
//   60 
//   61 #define P2DIR_PRIPO               0xC0
//   62 #if HAL_UART_0_ENABLE
//   63   #define HAL_UART_PRIPO          0x00
//   64 #else
//   65   #define HAL_UART_PRIPO          0x40
//   66 #endif
//   67 
//   68 #define HAL_UART_0_PERCFG_BIT     0x01  // ½«´®¿Ú0¶¨ÒåÔÚP0¿ÚÉÏ
//   69 #define HAL_UART_0_P0_RX_TX       0x0c  // ÍâÎ§I/OÑ¡ÔñTXÎªP0_3,RXÎªP0_2.
//   70 #define HAL_UART_0_P0_RTS         0x10  // Ñ¡ÔñRTSÒý½ÅP0_4.
//   71 #define HAL_UART_0_P0_CTS         0x20  // Ñ¡ÔñCTSÒý½ÅP0_5.
//   72 
//   73 #define HAL_UART_1_PERCFG_BIT     0x02  // USART1 on P1, so set this bit.
//   74 #define HAL_UART_1_P1_RTS         0x10  // Peripheral I/O Select for RTS.
//   75 #define HAL_UART_1_P1_CTS         0x20  // Peripheral I/O Select for CTS.
//   76 #define HAL_UART_1_P1_RX_TX       0xC0  // Peripheral I/O Select for Rx/Tx.
//   77 
//   78 #define TX_AVAIL( cfg ) \ 
//   79   ((cfg->txTail == cfg->txHead) ? (cfg->txMax-1) : \ 
//   80   ((cfg->txTail >  cfg->txHead) ? (cfg->txTail - cfg->txHead - 1) : \ 
//   81                      (cfg->txMax - cfg->txHead + cfg->txTail)))
//   82 
//   83 #define RX0_FLOW_ON  ( P0 &= ~HAL_UART_0_P0_CTS )
//   84 #define RX0_FLOW_OFF ( P0 |= HAL_UART_0_P0_CTS )
//   85 #define RX1_FLOW_ON  ( P1 &= ~HAL_UART_1_P1_CTS)
//   86 #define RX1_FLOW_OFF ( P1 |= HAL_UART_1_P1_CTS )
//   87 
//   88 #define RX_STOP_FLOW( cfg ) { \ 
//   89   if ( !(cfg->flag & UART_CFG_U1F) ) \ 
//   90   { \ 
//   91     RX0_FLOW_OFF; \ 
//   92   } \ 
//   93   else \ 
//   94   { \ 
//   95     RX1_FLOW_OFF; \ 
//   96   } \ 
//   97   if ( cfg->flag & UART_CFG_DMA ) \ 
//   98   { \ 
//   99     cfg->rxTick = DMA_RX_DLY; \ 
//  100   } \ 
//  101   cfg->flag |= UART_CFG_RXF; \ 
//  102 }
//  103 
//  104 #define RX_STRT_FLOW( cfg ) { \ 
//  105   if ( !(cfg->flag & UART_CFG_U1F) ) \ 
//  106   { \ 
//  107     RX0_FLOW_ON; \ 
//  108   } \ 
//  109   else \ 
//  110   { \ 
//  111     RX1_FLOW_ON; \ 
//  112   } \ 
//  113   cfg->flag &= ~UART_CFG_RXF; \ 
//  114 }
//  115 
//  116 #define UART_RX_AVAIL( cfg ) \ 
//  117   ( (cfg->rxHead >= cfg->rxTail) ? (cfg->rxHead - cfg->rxTail) : \ 
//  118                                    (cfg->rxMax - cfg->rxTail + cfg->rxHead +1 ) )
//  119 
//  120 /* Need to leave enough of the Rx buffer free to handle the incoming bytes
//  121  * after asserting flow control, but before the transmitter has obeyed it.
//  122  * At the max expected baud rate of 115.2k, 16 bytes will only take ~1.3 msecs,
//  123  * but at the min expected baud rate of 38.4k, they could take ~4.2 msecs.
//  124  * SAFE_RX_MIN and DMA_RX_DLY must both be consistent according to
//  125  * the min & max expected baud rate.
//  126  */
//  127 #if !defined( SAFE_RX_MIN )
//  128   #define SAFE_RX_MIN  48  // bytes - max expected per poll @ 115.2k
//  129   // 16 bytes @ 38.4 kBaud -> 4.16 msecs -> 138 32-kHz ticks.
//  130   #define DMA_RX_DLY  140
//  131   //  2 bytes @ 38.4 kBaud -> 0.52 msecs ->  17 32-kHz ticks.
//  132   #define DMA_TX_DLY   20
//  133 #endif
//  134 
//  135 // The timeout tick is at 32-kHz, so multiply msecs by 33.
//  136 #define RX_MSECS_TO_TICKS  33
//  137 
//  138 // The timeout only supports 1 byte.
//  139 #if !defined( HAL_UART_RX_IDLE )
//  140   #define HAL_UART_RX_IDLE  (6 * RX_MSECS_TO_TICKS)
//  141 #endif
//  142 
//  143 // Only supporting 1 of the 2 USART modules to be driven by DMA at a time.
//  144 #if HAL_UART_DMA == 1
//  145   #define DMATRIG_RX  HAL_DMA_TRIG_URX0
//  146   #define DMATRIG_TX  HAL_DMA_TRIG_UTX0
//  147   #define DMA_UDBUF   HAL_DMA_U0DBUF
//  148   #define DMA_PAD     U0BAUD
//  149 #elif HAL_UART_DMA == 2
//  150   #define DMATRIG_RX  HAL_DMA_TRIG_URX1
//  151   #define DMATRIG_TX  HAL_DMA_TRIG_UTX1
//  152   #define DMA_UDBUF   HAL_DMA_U1DBUF
//  153   #define DMA_PAD     U1BAUD
//  154 #endif
//  155 
//  156 #define DMA_RX( cfg ) { \ 
//  157   volatile uint8 ft2430 = U0DBUF; \ 
//  158   \ 
//  159   halDMADesc_t *ch = HAL_DMA_GET_DESC1234( HAL_DMA_CH_RX ); \ 
//  160   \ 
//  161   HAL_DMA_SET_DEST( ch, cfg->rxBuf ); \ 
//  162   \ 
//  163   HAL_DMA_SET_LEN( ch, cfg->rxMax ); \ 
//  164   \ 
//  165   HAL_DMA_CLEAR_IRQ( HAL_DMA_CH_RX ); \ 
//  166   \ 
//  167   HAL_DMA_ARM_CH( HAL_DMA_CH_RX ); \ 
//  168 }
//  169 
//  170 #define DMA_TX( cfg ) { \ 
//  171   halDMADesc_t *ch = HAL_DMA_GET_DESC1234( HAL_DMA_CH_TX ); \ 
//  172   \ 
//  173   HAL_DMA_SET_SOURCE( ch, (cfg->txBuf + cfg->txTail) ); \ 
//  174   \ 
//  175   HAL_DMA_SET_LEN( ch, cfg->txCnt ); \ 
//  176   \ 
//  177   HAL_DMA_CLEAR_IRQ( HAL_DMA_CH_TX ); \ 
//  178   \ 
//  179   HAL_DMA_ARM_CH( HAL_DMA_CH_TX ); \ 
//  180   \ 
//  181   HAL_DMA_START_CH( HAL_DMA_CH_TX ); \ 
//  182 }
//  183 
//  184 /*********************************************************************
//  185  * TYPEDEFS
//  186  */
//  187 
//  188 typedef struct
//  189 {
//  190   uint8 *rxBuf;
//  191   uint8 rxHead;
//  192   uint8 rxTail;
//  193   uint8 rxMax;
//  194   uint8 rxCnt;
//  195   uint8 rxTick;
//  196   uint8 rxHigh;
//  197 
//  198   uint8 *txBuf;
//  199 #if HAL_UART_BIG_TX_BUF
//  200   uint16 txHead;
//  201   uint16 txTail;
//  202   uint16 txMax;
//  203   uint16 txCnt;
//  204 #else
//  205   uint8 txHead;
//  206   uint8 txTail;
//  207   uint8 txMax;
//  208   uint8 txCnt;
//  209 #endif
//  210   uint8 txTick;
//  211 
//  212   uint8 flag;
//  213 
//  214   halUARTCBack_t rxCB;
//  215 } uartCfg_t;
//  216 
//  217 /*********************************************************************
//  218  * CONSTANTS
//  219  */
//  220 
//  221 // Used by DMA macros to shift 1 to create a mask for DMA registers.
//  222 #define HAL_DMA_CH_TX    3
//  223 #define HAL_DMA_CH_RX    4
//  224 
//  225 #define HAL_DMA_U0DBUF  0xDFC1
//  226 #define HAL_DMA_U1DBUF  0xDFF9
//  227 
//  228 // UxCSR - USART Control and Status Register.
//  229 #define CSR_MODE      0x80
//  230 #define CSR_RE        0x40
//  231 #define CSR_SLAVE     0x20
//  232 #define CSR_FE        0x10
//  233 #define CSR_ERR       0x08
//  234 #define CSR_RX_BYTE   0x04
//  235 #define CSR_TX_BYTE   0x02
//  236 #define CSR_ACTIVE    0x01
//  237 
//  238 // UxUCR - USART UART Control Register.
//  239 #define UCR_FLUSH     0x80
//  240 #define UCR_FLOW      0x40
//  241 #define UCR_D9        0x20
//  242 #define UCR_BIT9      0x10
//  243 #define UCR_PARITY    0x08
//  244 #define UCR_SPB       0x04
//  245 #define UCR_STOP      0x02
//  246 #define UCR_START     0x01
//  247 
//  248 #define UTX0IE        0x04
//  249 #define UTX1IE        0x08
//  250 
//  251 #define UART_CFG_U1F  0x80  // USART1 flag bit.
//  252 #define UART_CFG_DMA  0x40  // Port is using DMA.
//  253 #define UART_CFG_FLW  0x20  // Port is using flow control.
//  254 #define UART_CFG_SP4  0x10
//  255 #define UART_CFG_SP3  0x08
//  256 #define UART_CFG_SP2  0x04
//  257 #define UART_CFG_RXF  0x02  // Rx flow is disabled.
//  258 #define UART_CFG_TXF  0x01  // Tx is in process.
//  259 
//  260 /*********************************************************************
//  261  * GLOBAL VARIABLES
//  262  */
//  263 
//  264 /*********************************************************************
//  265  * GLOBAL FUNCTIONS
//  266  */
//  267 
//  268 /*********************************************************************
//  269  * LOCAL VARIABLES
//  270  */
//  271 
//  272 #if HAL_UART_0_ENABLE

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  273 static uartCfg_t *cfg0;
??cfg0:
        DS 2
//  274 #endif
//  275 #if HAL_UART_1_ENABLE
//  276 static uartCfg_t *cfg1;
//  277 #endif
//  278 
//  279 /*********************************************************************
//  280  * LOCAL FUNCTIONS
//  281  */
//  282 
//  283 #if HAL_UART_DMA
//  284 static void pollDMA( uartCfg_t *cfg );
//  285 #endif
//  286 #if HAL_UART_ISR
//  287 static void pollISR( uartCfg_t *cfg );
//  288 #endif
//  289 
//  290 #if HAL_UART_DMA
//  291 /******************************************************************************
//  292  * @fn      pollDMA
//  293  *
//  294  * @brief   Poll a USART module implemented by DMA.
//  295  *
//  296  * @param   cfg - USART configuration structure.
//  297  *
//  298  * @return  none
//  299  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  300 static void pollDMA( uartCfg_t *cfg )
??pollDMA:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ??pollDMA
//  301 {
        FUNCALL ??pollDMA, osal_memset
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  302   const uint8 cnt = cfg->rxHead;
        MOV	A,R6
        ADD	A,#0x2
        INC	R2
        INC	R2
        LCALL	?Subroutine6 & 0xFFFF
//  303   uint8 *pad = cfg->rxBuf+(cfg->rxHead*2);
??CrossCallReturnLabel_32:
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R1
        SJMP	??pollDMA_1
//  304 
//  305   // Pack the received bytes to the front of the queue.
//  306   while ( (*pad == DMA_PAD) && (cfg->rxHead < cfg->rxMax) )
//  307   {
//  308     cfg->rxBuf[cfg->rxHead++] = *(pad+1);
??pollDMA_2:
        MOV	A,R6
        ADD	A,#0x2
        MOV	R2,A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        ADD	A,?V0 + 0
        MOV	R5,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	DPL,R5
        MOV	DPH,A
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        INC	A
        MOVX	@DPTR,A
//  309     pad += 2;
        MOV	A,R0
        ADD	A,#0x2
        INC	R0
        INC	R0
        MOV	A,R1
        ADDC	A,#0x0
??pollDMA_1:
        MOV	R1,A
//  310   }
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        XRL	A,0xc2
        JNZ	??pollDMA_3
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        POP	A
        CFI CFA_SP SP+0
        CLR	C
        SUBB	A,R2
        JC	??pollDMA_2
//  311 
//  312   if ( !(cfg->flag & UART_CFG_RXF) )
??pollDMA_3:
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV	C,0xE0 /* A   */.1
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        JC	??pollDMA_4
//  313   {
//  314     /* It is necessary to stop Rx flow and wait for H/W-enqueued bytes still
//  315      * incoming to stop before resetting the DMA Rx engine. If DMA Rx is
//  316      * aborted during incoming data, a byte may be lost inside the engine
//  317      * during the 2-step transfer process of read/write.
//  318      */
//  319     if ( cfg->rxHead >= (cfg->rxMax - SAFE_RX_MIN) )
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JC	??pollDMA_5
//  320     {
//  321       RX_STOP_FLOW( cfg );
        LCALL	?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_10:
        JC	??pollDMA_6
        SETB	0x80.5
        SJMP	??pollDMA_7
??pollDMA_6:
        SETB	0x90.5
??pollDMA_7:
        MOV	C,0xE0 /* A   */.6
        JNC	??pollDMA_8
        MOV	A,#-0x74
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
??pollDMA_8:
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        SETB	0xE0 /* A   */.1
        SJMP	??pollDMA_9
//  322     }
//  323     // If anything received, reset the Rx idle timer.
//  324     else if ( cfg->rxHead != cnt )
??pollDMA_5:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R4
        JZ	??pollDMA_10
//  325     {
//  326       cfg->rxTick = HAL_UART_RX_IDLE;
        MOV	A,#-0x3a
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        SJMP	??pollDMA_9
//  327     }
//  328   }
//  329   else if ( !cfg->rxTick && (cfg->rxHead == cfg->rxTail) )
??pollDMA_4:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JNZ	??pollDMA_10
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_54:
        MOVX	A,@DPTR
        XRL	A,R2
        JNZ	??pollDMA_10
//  330   {
//  331     HAL_DMA_ABORT_CH( HAL_DMA_CH_RX );
        MOV	0xd6,#-0x70
//  332     cfg->rxHead = cfg->rxTail = 0;
        LCALL	?Subroutine15 & 0xFFFF
//  333     osal_memset( cfg->rxBuf, ~DMA_PAD, cfg->rxMax*2 );
??CrossCallReturnLabel_52:
        ADD	A,#0x4
        MOV	?V0 + 0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	?V0 + 1,A
        ; Setup parameters for call to function osal_memset
        MOV	DPL,?V0 + 0
        MOV	DPH,A
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  334     DMA_RX( cfg );
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	?Subroutine8 & 0xFFFF
//  335     RX_STRT_FLOW( cfg );
??CrossCallReturnLabel_40:
        LCALL	?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_11:
        JC	??pollDMA_11
        CLR	0x80.5
        SJMP	??pollDMA_12
??pollDMA_11:
        CLR	0x90.5
??pollDMA_12:
        CLR	0xE0 /* A   */.1
??pollDMA_9:
        MOVX	@DPTR,A
//  336   }
//  337 
//  338   if ( HAL_DMA_CHECK_IRQ( HAL_DMA_CH_TX ) )
??pollDMA_10:
        MOV	A,0xd1
        MOV	C,0xE0 /* A   */.3
        JNC	??pollDMA_13
//  339   {
//  340     HAL_DMA_CLEAR_IRQ( HAL_DMA_CH_TX );
        ANL	0xd1,#0xf7
//  341     cfg->flag &= ~UART_CFG_TXF;
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_15:
        CLR	0xE0 /* A   */.0
        MOVX	@DPTR,A
//  342     cfg->txTick = DMA_TX_DLY;
        MOV	A,R6
        ADD	A,#0xe
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV	A,#0x14
        MOVX	@DPTR,A
//  343 
//  344     if ( (cfg->txMax - cfg->txCnt) < cfg->txTail )
        MOV	A,R6
        ADD	A,#0xc
        LCALL	??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV	R0,A
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV	A,R0
        CLR	C
        SUBB	A,R2
        MOV	R0,A
        CLR	A
        SUBB	A,#0x0
        MOV	R1,A
        MOV	A,R6
        ADD	A,#0xb
        LCALL	??Subroutine2_0 & 0xFFFF
??CrossCallReturnLabel_3:
        CLR	C
        MOV	A,R0
        SUBB	A,R2
        MOV	A,R1
        SUBB	A,#0x0
        MOV	C,0xD0 /* PSW */.2
        XRL	A,PSW
        RLC	A
        JNC	??pollDMA_14
//  345     {
//  346       cfg->txTail = 0;  // DMA can only run to the end of the Tx buffer.
        CLR	A
??pollDMA_15:
        MOVX	@DPTR,A
        LJMP	??pollDMA_16 & 0xFFFF
//  347     }
//  348     else
//  349     {
//  350       cfg->txTail += cfg->txCnt;
??pollDMA_14:
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV	A,R6
        ADD	A,#0xb
        LCALL	??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_17:
        ADD	A,R2
        SJMP	??pollDMA_15
//  351     }
//  352   }
//  353   else if ( !(cfg->flag & UART_CFG_TXF) && !cfg->txTick )
??pollDMA_13:
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV	C,0xE0 /* A   */.0
        JNC	$+5
        LJMP	??pollDMA_16 & 0xFFFF
        MOV	A,R6
        ADD	A,#0xe
        LCALL	??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_19:
        JZ	$+5
        LJMP	??pollDMA_16 & 0xFFFF
//  354   {
//  355     if ( cfg->txTail != cfg->txHead )
        MOV	A,R6
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_64:
        XRL	A,R2
        JNZ	$+5
        LJMP	??pollDMA_16 & 0xFFFF
//  356     {
//  357       if ( cfg->txTail < cfg->txHead )
        MOV	A,R6
        ADD	A,#0xb
        LCALL	??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_20:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        POP	A
        CFI CFA_SP SP+0
        CLR	C
        SUBB	A,R2
        MOV	A,R6
        JNC	??pollDMA_17
//  358       {
//  359         cfg->txCnt = cfg->txHead - cfg->txTail;
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_65:
        CLR	C
        SUBB	A,R2
        SJMP	??pollDMA_18
//  360       }
//  361       else  // Can only run DMA engine up to max, then restart at zero.
//  362       {
//  363         cfg->txCnt = cfg->txMax - cfg->txTail + 1;
??pollDMA_17:
        ADD	A,#0xb
        LCALL	??Subroutine2_0 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV	A,R6
        ADD	A,#0xc
        LCALL	??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_21:
        CLR	C
        SUBB	A,R2
        INC	A
??pollDMA_18:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,R6
        ADD	A,#0xd
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_35:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  364       }
//  365 
//  366       cfg->flag |= UART_CFG_TXF;
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_22:
        SETB	0xE0 /* A   */.0
        MOVX	@DPTR,A
//  367       DMA_TX( cfg );
        MOV	A,R6
        ADD	A,#0x8
        MOV	R0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R6
        ADD	A,#0xb
        MOV	R2,A
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        ADD	A,R4
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	DPTR,#(dmaCh1234 + 16)
        MOVX	@DPTR,A
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        ADD	A,R2
        MOV	DPTR,#(dmaCh1234 + 17)
        MOVX	@DPTR,A
        MOV	A,R6
        ADD	A,#0xd
        LCALL	??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV	DPTR,#(dmaCh1234 + 21)
        MOVX	@DPTR,A
        MOV	DPTR,#(dmaCh1234 + 20)
        MOVX	A,@DPTR
        ANL	A,#0xe0
        MOVX	@DPTR,A
        ANL	0xd1,#0xf7
        MOV	0xd6,#0x8
        MOV	0xd7,#0x8
//  368     }
//  369   }
//  370 }
??pollDMA_16:
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine19
        ; // Fall through to label ?Subroutine19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+-1
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV	DPL,A
        MOV	A,R7
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 10)
??Subroutine7_0:
        ADDC	A,#0x0
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
        CFI EndBlock cfiCond8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	R4,A
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV	A,R6
        ADD	A,#0xf
        MOV	DPL,A
        MOV	A,R7
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 10)
??Subroutine4_0:
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV	C,0xE0 /* A   */.7
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14
        CFI EndBlock cfiCond15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV	A,R6
        ADD	A,#0xd
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 11)
??Subroutine2_0:
        MOV	DPL,A
        MOV	A,R7
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV	R2,A
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        ADD	A,#0xb
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_55:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
        REQUIRE ?Subroutine20
        ; // Fall through to label ?Subroutine20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond25) CFA_SP SP+-5
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_64
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32
//  371 #endif
//  372 
//  373 #if HAL_UART_ISR
//  374 /******************************************************************************
//  375  * @fn      pollISR
//  376  *
//  377  * @brief   Poll a USART module implemented by ISR.
//  378  *
//  379  * @param   cfg - USART configuration structure.
//  380  *
//  381  * @return  none
//  382  *****************************************************************************/
//  383 static void pollISR( uartCfg_t *cfg )
//  384 {
//  385   uint8 cnt = UART_RX_AVAIL( cfg );
//  386 
//  387   if ( !(cfg->flag & UART_CFG_RXF) )
//  388   {
//  389     // If anything received, reset the Rx idle timer.
//  390     if ( cfg->rxCnt != cnt )
//  391     {
//  392       cfg->rxTick = HAL_UART_RX_IDLE;
//  393       cfg->rxCnt = cnt;
//  394     }
//  395 
//  396     /* It is necessary to stop Rx flow in advance of a full Rx buffer because
//  397      * bytes can keep coming while sending H/W fifo flushes.
//  398      */
//  399     if ( cfg->rxCnt >= (cfg->rxMax - SAFE_RX_MIN) )
//  400     {
//  401       RX_STOP_FLOW( cfg );
//  402     }
//  403   }
//  404 }
//  405 #endif
//  406 
//  407 /******************************************************************************
//  408  * @fn      HalUARTInit
//  409  *
//  410  * @brief   Initialize the UART
//  411  *
//  412  * @param   none
//  413  *
//  414  * @return  none
//  415  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  416 void HalUARTInit( void )
HalUARTInit:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function HalUARTInit
//  417 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  418 #if HAL_UART_DMA
//  419   halDMADesc_t *ch;
//  420 #endif
//  421 
//  422   // Set P2 priority - USART0 over USART1 if both are defined.
//  423   P2DIR &= ~P2DIR_PRIPO;
        ANL	0xff,#0x3f
        MOV	A,0xff
//  424   P2DIR |= HAL_UART_PRIPO;
        MOV	0xff,0xff
//  425 
//  426 //#if HAL_UART_0_ENABLE
//  427   // Set UART0 I/O location to P0.
//  428   PERCFG &= ~HAL_UART_0_PERCFG_BIT;
        ANL	0xf1,#0xfe
//  429 
//  430   /* Enable Tx and Rx on P0 */
//  431   P0SEL |= HAL_UART_0_P0_RX_TX;
        ORL	0xf3,#0xc
        MOV	A,0xf3
//  432 
//  433   /* Make sure ADC doesnt use this */
//  434   ADCCFG &= ~HAL_UART_0_P0_RX_TX;
        ANL	0xf2,#0xf3
        MOV	A,0xf2
//  435 
//  436   /* Mode is UART Mode */
//  437   U0CSR = CSR_MODE;
        MOV	0x86,#-0x80
//  438 
//  439   /* Flush it */
//  440   U0UCR = UCR_FLUSH;
        MOV	0xc4,#-0x80
//  441 //#endif
//  442 
//  443 #if HAL_UART_1_ENABLE
//  444   // Set UART1 I/O location to P1.
//  445   PERCFG |= HAL_UART_1_PERCFG_BIT;
//  446 
//  447   /* Enable Tx and Rx on P1 */
//  448   P1SEL  |= HAL_UART_1_P1_RX_TX;
//  449 
//  450   /* Make sure ADC doesnt use this */
//  451   ADCCFG &= ~HAL_UART_1_P1_RX_TX;
//  452 
//  453   /* Mode is UART Mode */
//  454   U1CSR = CSR_MODE;
//  455 
//  456   /* Flush it */
//  457   U1UCR = UCR_FLUSH;
//  458 #endif
//  459 
//  460 #if HAL_UART_DMA
//  461   // Setup Tx by DMA.
//  462   ch = HAL_DMA_GET_DESC1234( HAL_DMA_CH_TX );
//  463 
//  464   // The start address of the destination.
//  465   HAL_DMA_SET_DEST( ch, DMA_UDBUF );
        MOV	A,#-0x21
        MOV	DPTR,#(dmaCh1234 + 18)
        MOVX	@DPTR,A
        MOV	A,#-0x3f
        MOV	DPTR,#(dmaCh1234 + 19)
        MOVX	@DPTR,A
//  466 
//  467   // Using the length field to determine how many bytes to transfer.
//  468   HAL_DMA_SET_VLEN( ch, HAL_DMA_VLEN_USE_LEN );
        MOV	DPTR,#(dmaCh1234 + 20)
        MOVX	A,@DPTR
        ANL	A,#0x1f
        MOVX	@DPTR,A
//  469 
//  470   // One byte is transferred each time.
//  471   HAL_DMA_SET_WORD_SIZE( ch, HAL_DMA_WORDSIZE_BYTE );
//  472 
//  473   // The bytes are transferred 1-by-1 on Tx Complete trigger.
//  474   HAL_DMA_SET_TRIG_MODE( ch, HAL_DMA_TMODE_SINGLE );
//  475   HAL_DMA_SET_TRIG_SRC( ch, DMATRIG_TX );
        MOV	A,#0xf
        MOV	DPTR,#(dmaCh1234 + 22)
        MOVX	@DPTR,A
//  476 
//  477   // The source address is decremented by 1 byte after each transfer.
//  478   HAL_DMA_SET_SRC_INC( ch, HAL_DMA_SRCINC_1 );
//  479 
//  480   // The destination address is constant - the Tx Data Buffer.
//  481   HAL_DMA_SET_DST_INC( ch, HAL_DMA_DSTINC_0 );
//  482 
//  483   // The DMA is to be polled and shall not issue an IRQ upon completion.
//  484   HAL_DMA_SET_IRQ( ch, HAL_DMA_IRQMASK_DISABLE );
//  485 
//  486   // Xfer all 8 bits of a byte xfer.
//  487   HAL_DMA_SET_M8( ch, HAL_DMA_M8_USE_8_BITS );
//  488 
//  489   // DMA Tx has shared priority for memory access - every other one.
//  490   HAL_DMA_SET_PRIORITY( ch, HAL_DMA_PRI_HIGH );
        MOV	A,#0x42
        MOV	DPTR,#(dmaCh1234 + 23)
        MOVX	@DPTR,A
//  491 
//  492   // Setup Rx by DMA.
//  493   ch = HAL_DMA_GET_DESC1234( HAL_DMA_CH_RX );
//  494 
//  495   // The start address of the source.
//  496   HAL_DMA_SET_SOURCE( ch, DMA_UDBUF );
        MOV	A,#-0x21
        MOV	DPTR,#(dmaCh1234 + 24)
        MOVX	@DPTR,A
        MOV	A,#-0x3f
        MOV	DPTR,#(dmaCh1234 + 25)
        MOVX	@DPTR,A
//  497 
//  498   // Using the length field to determine how many bytes to transfer.
//  499   HAL_DMA_SET_VLEN( ch, HAL_DMA_VLEN_USE_LEN );
        MOV	DPTR,#(dmaCh1234 + 28)
        MOVX	A,@DPTR
        ANL	A,#0x1f
        MOVX	@DPTR,A
//  500 
//  501   /* The trick is to cfg DMA to xfer 2 bytes for every 1 byte of Rx.
//  502    * The byte after the Rx Data Buffer is the Baud Cfg Register,
//  503    * which always has a known value. So init Rx buffer to inverse of that
//  504    * known value. DMA word xfer will flip the bytes, so every valid Rx byte
//  505    * in the Rx buffer will be preceded by a DMA_PAD char equal to the
//  506    * Baud Cfg Register value.
//  507    */
//  508   HAL_DMA_SET_WORD_SIZE( ch, HAL_DMA_WORDSIZE_WORD );
//  509 
//  510   // The bytes are transferred 1-by-1 on Rx Complete trigger.
//  511   HAL_DMA_SET_TRIG_MODE( ch, HAL_DMA_TMODE_SINGLE );
//  512   HAL_DMA_SET_TRIG_SRC( ch, DMATRIG_RX );
        MOV	A,#-0x72
        MOV	DPTR,#(dmaCh1234 + 30)
        MOVX	@DPTR,A
//  513 
//  514   // The source address is constant - the Rx Data Buffer.
//  515   HAL_DMA_SET_SRC_INC( ch, HAL_DMA_SRCINC_0 );
//  516 
//  517   // The destination address is incremented by 1 word after each transfer.
//  518   HAL_DMA_SET_DST_INC( ch, HAL_DMA_DSTINC_1 );
//  519 
//  520   // The DMA is to be polled and shall not issue an IRQ upon completion.
//  521   HAL_DMA_SET_IRQ( ch, HAL_DMA_IRQMASK_DISABLE );
//  522 
//  523   // Xfer all 8 bits of a byte xfer.
//  524   HAL_DMA_SET_M8( ch, HAL_DMA_M8_USE_8_BITS );
//  525 
//  526   // DMA has highest priority for memory access.
//  527   HAL_DMA_SET_PRIORITY( ch, HAL_DMA_PRI_HIGH );
        MOV	A,#0x12
        MOV	DPTR,#(dmaCh1234 + 31)
        MOVX	@DPTR,A
        CFI EndBlock cfiBlock33
//  528 #endif
//  529 }
        REQUIRE ?Subroutine21
        ; // Fall through to label ?Subroutine21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock34
//  530 
//  531 /******************************************************************************
//  532  * @fn      HalUARTOpen
//  533  *
//  534  * @brief   Open a port according tp the configuration specified by parameter.
//  535  *
//  536  * @param   port   - UART port
//  537  *          config - contains configuration information
//  538  *
//  539  * @return  Status of the function call
//  540  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  541 uint8 HalUARTOpen( uint8 port, halUARTCfg_t *config )
HalUARTOpen:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function HalUARTOpen
//  542 {
        FUNCALL HalUARTOpen, osal_mem_alloc
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL HalUARTOpen, osal_mem_alloc
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL HalUARTOpen, osal_mem_alloc
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL HalUARTOpen, osal_memset
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	?V0 + 2,R1
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
//  543   uartCfg_t **cfgPP = NULL;
        MOV	R6,#0x0
        MOV	R7,#0x0
//  544   uartCfg_t *cfg;
//  545 
//  546 //#if HAL_UART_0_ENABLE
//  547   if ( port == HAL_UART_PORT_0 )
        MOV	A,R1
        JNZ	??HalUARTOpen_0
//  548   {
//  549     cfgPP = &cfg0;
        MOV	R6,#(??cfg0 & 0xff)
        MOV	R7,#((??cfg0 >> 8) & 0xff)
//  550   }
//  551 //#endif
//  552 
//  553 #if HAL_UART_1_ENABLE
//  554   if ( port == HAL_UART_PORT_1 )
//  555   {
//  556     cfgPP = &cfg1;
//  557   }
//  558 #endif
//  559 
//  560   HAL_UART_ASSERT( cfgPP );
//  561 
//  562 #if HAL_UART_CLOSE
//  563   // Protect against user re-opening port before closing it.
//  564   HalUARTClose( port );
//  565 #else
//  566   HAL_UART_ASSERT( *cfgPP == NULL );
//  567 #endif
//  568 
//  569   HAL_UART_ASSERT( (config->baudRate == HAL_UART_BR_38400) ||
//  570                    (config->baudRate == HAL_UART_BR_115200) );
//  571 
//  572   /* Whereas runtime heap alloc can be expected to fail - one-shot system
//  573    * initialization must succeed, so no check for alloc fail.
//  574    */
//  575   *cfgPP = (uartCfg_t *)osal_mem_alloc( sizeof( uartCfg_t ) );
??HalUARTOpen_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV	R2,#0x13
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,R6
        MOV	DPH,R7
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  576   cfg = *cfgPP;
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
//  577   HAL_UART_ASSERT( cfg );
//  578 
//  579   cfg->rxMax = config->rx.maxBufSize;
        MOV	A,?V0 + 0
        ADD	A,#0xa
        MOV	?V0 + 4,A
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	?V0 + 5,A
        MOV	DPL,?V0 + 4
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
//  580 
//  581 #if !HAL_UART_BIG_TX_BUF
//  582   HAL_UART_ASSERT( (config->tx.maxBufSize < 256) );
//  583 #endif
//  584   cfg->txMax = config->tx.maxBufSize;
        MOV	A,R6
        ADD	A,#0xc
        MOV	R0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,?V0 + 0
        ADD	A,#0x12
        MOV	DPL,A
        MOV	A,?V0 + 1
        LCALL	??Subroutine5_1 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	@DPTR,A
//  585   cfg->txBuf = osal_mem_alloc( cfg->txMax+1 );
        ; Setup parameters for call to function osal_mem_alloc
        MOV	R0,A
        MOV	A,#0x1
        ADD	A,R0
        MOV	R2,A
        CLR	A
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  586 
//  587   cfg->rxHead = cfg->rxTail = 0;
        LCALL	?Subroutine15 & 0xFFFF
//  588   cfg->txHead = cfg->txTail = 0;
??CrossCallReturnLabel_53:
        ADD	A,#0xb
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_36:
        CLR	A
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_57:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine14 & 0xFFFF
//  589   cfg->rxHigh = config->rx.maxBufSize - config->flowControlThreshold;
??CrossCallReturnLabel_50:
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R0
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
//  590   cfg->rxCB = config->callBackFunc;
        MOV	A,?V0 + 0
        ADD	A,#0x1b
        MOV	DPL,A
        MOV	A,?V0 + 1
        LCALL	??Subroutine5_1 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV	R1,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	A,R6
        ADD	A,#0x10
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV	A,R1
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  591 
//  592 #if HAL_UART_0_ENABLE
//  593   if ( port == HAL_UART_PORT_0 )
        MOV	A,?V0 + 2
        JZ	$+5
        LJMP	??HalUARTOpen_1 & 0xFFFF
//  594   {
//  595     // Only supporting 38400 or 115200 for code size - other is possible.
//  596     U0BAUD = (config->baudRate == HAL_UART_BR_38400) ? 59 : 216;
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0x6
        JNZ	??HalUARTOpen_2
        MOV	R2,#0x3b
        SJMP	??HalUARTOpen_3
??HalUARTOpen_2:
        MOV	R2,#-0x28
??HalUARTOpen_3:
        MOV	0xc2,R2
//  597     U0GCR = (config->baudRate == HAL_UART_BR_38400) ? 10 : 11;
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0x6
        JNZ	??HalUARTOpen_4
        MOV	R2,#0xa
        SJMP	??HalUARTOpen_5
??HalUARTOpen_4:
        MOV	R2,#0xb
??HalUARTOpen_5:
        MOV	0xc5,R2
//  598 
//  599     U0CSR |= CSR_RE;
        ORL	0x86,#0x40
//  600 
//  601 #if HAL_UART_DMA == 1
//  602     cfg->flag = UART_CFG_DMA;
        MOV	A,R6
        ADD	A,#0xf
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV	A,#0x40
        MOVX	@DPTR,A
//  603     HAL_UART_ASSERT( (config->rx.maxBufSize <= 128) );
//  604     HAL_UART_ASSERT( (config->rx.maxBufSize > SAFE_RX_MIN) );
//  605     cfg->rxBuf = osal_mem_alloc( cfg->rxMax*2 );
        MOV	A,R6
        ADD	A,#0x4
        MOV	?V0 + 2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	?V0 + 3,A
        ; Setup parameters for call to function osal_mem_alloc
        MOV	DPL,?V0 + 2
        MOV	DPH,A
        MOVX	A,@DPTR
        CLR	C
        RLC	A
        MOV	R2,A
        CLR	A
        RLC	A
        MOV	R3,A
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,R6
        MOV	DPH,R7
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  606     osal_memset( cfg->rxBuf, ~DMA_PAD, cfg->rxMax*2 );
        ; Setup parameters for call to function osal_memset
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  607     DMA_RX( cfg );
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        LCALL	?Subroutine8 & 0xFFFF
//  608 #else
//  609     cfg->flag = 0;
//  610     HAL_UART_ASSERT( (config->rx.maxBufSize < 256) );
//  611     cfg->rxBuf = osal_mem_alloc( cfg->rxMax+1 );
//  612     URX0IE = 1;
//  613     IEN2 |= UTX0IE;
//  614 #endif
//  615 
//  616     // 8 bits/char; no parity; 1 stop bit; stop bit hi.
//  617     if ( config->flowControl )
??CrossCallReturnLabel_41:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JZ	??HalUARTOpen_6
//  618     {
//  619       cfg->flag |= UART_CFG_FLW;
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_26:
        SETB	0xE0 /* A   */.5
        MOVX	@DPTR,A
//  620       U0UCR = UCR_FLOW | UCR_STOP;
        MOV	0xc4,#0x42
//  621       // Must rely on H/W for RTS (i.e. Tx stops when receiver negates CTS.)
//  622       P0SEL |= HAL_UART_0_P0_RTS;
        ORL	0xf3,#0x10
//  623       // Cannot use H/W for CTS as DMA does not clear the Rx bytes properly.
//  624       P0DIR |= HAL_UART_0_P0_CTS;
        ORL	0xfd,#0x20
//  625       RX0_FLOW_ON;
        CLR	0x80.5
        SJMP	??HalUARTOpen_1
//  626     }
//  627     else
//  628     {
//  629       U0UCR = UCR_STOP;
??HalUARTOpen_6:
        MOV	0xc4,#0x2
//  630     }
//  631     }
//  632 #endif
//  633 
//  634 #if HAL_UART_1_ENABLE
//  635   if ( port == HAL_UART_PORT_1 )
//  636   {
//  637     // Only supporting 38400 or 115200 for code size - other is possible.
//  638     U1BAUD = (config->baudRate == HAL_UART_BR_38400) ? 59 : 216;
//  639     U1GCR = (config->baudRate == HAL_UART_BR_38400) ? 10 : 11;
//  640 
//  641     U1CSR |= CSR_RE;
//  642 
//  643 #if HAL_UART_DMA == 2
//  644     cfg->flag = (UART_CFG_U1F | UART_CFG_DMA);
//  645     HAL_UART_ASSERT( (config->rx.maxBufSize <= 128) );
//  646     HAL_UART_ASSERT( (config->rx.maxBufSize > SAFE_RX_MIN) );
//  647     cfg->rxBuf = osal_mem_alloc( cfg->rxMax*2 );
//  648     osal_memset( cfg->rxBuf, ~DMA_PAD, cfg->rxMax*2 );
//  649     DMA_RX( cfg );
//  650 #else
//  651     cfg->flag = UART_CFG_U1F;
//  652     HAL_UART_ASSERT( (config->rx.maxBufSize < 256) );
//  653     cfg->rxBuf = osal_mem_alloc( cfg->rxMax+1 );
//  654     URX1IE = 1;
//  655     IEN2 |= UTX1IE;
//  656 #endif
//  657 
//  658     // 8 bits/char; no parity; 1 stop bit; stop bit hi.
//  659     if ( config->flowControl )
//  660     {
//  661       cfg->flag |= UART_CFG_FLW;
//  662       U1UCR = UCR_FLOW | UCR_STOP;
//  663       // Must rely on H/W for RTS (i.e. Tx stops when receiver negates CTS.)
//  664       P1SEL |= HAL_UART_1_P1_RTS;
//  665       // Cannot use H/W for CTS as DMA does not clear the Rx bytes properly.
//  666       P1DIR |= HAL_UART_1_P1_CTS;
//  667       RX1_FLOW_ON;
//  668     }
//  669     else
//  670     {
//  671       U1UCR = UCR_STOP;
//  672     }
//  673   }
//  674 #endif
//  675 
//  676   return HAL_UART_SUCCESS;
??HalUARTOpen_1:
        MOV	R1,#0x0
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock35
//  677 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        CLR	A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_59:
        INC	DPTR
        MOVX	@DPTR,A
        MOV	A,R6
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOVX	A,@DPTR
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	A,0xc2
        CPL	A
        MOV	R1,A
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOV	A,0xc1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_56:
        MOVX	A,@DPTR
        MOV	DPTR,#(dmaCh1234 + 26)
        MOVX	@DPTR,A
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	DPTR,#(dmaCh1234 + 27)
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_52
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_43
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_53
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        MOVX	@DPTR,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        RET
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOVX	A,@DPTR
        MOV	DPTR,#(dmaCh1234 + 29)
        MOVX	@DPTR,A
        MOV	DPTR,#(dmaCh1234 + 28)
        MOVX	A,@DPTR
        ANL	A,#0xe0
        MOVX	@DPTR,A
        ANL	0xd1,#0xef
        MOV	0xd6,#0x10
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54
//  678 
//  679 /******************************************************************************
//  680  * @fn      HalUARTClose
//  681  *
//  682  * @brief   Close the UART
//  683  *
//  684  * @param   port - UART port
//  685  *
//  686  * @return  none
//  687  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  688 void HalUARTClose( uint8 port )
HalUARTClose:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function HalUARTClose
//  689 {
        ; Saved register size: 0
        ; Auto size: 0
//  690 #if HAL_UART_CLOSE
//  691   uartCfg_t *cfg;
//  692 
//  693 #if HAL_UART_0_ENABLE
//  694   if ( port == HAL_UART_PORT_0 )
//  695   {
//  696     U0CSR &= ~CSR_RE;
//  697 #if HAL_UART_DMA == 1
//  698     HAL_DMA_ABORT_CH( HAL_DMA_CH_RX );
//  699     HAL_DMA_ABORT_CH( HAL_DMA_CH_TX );
//  700 #else
//  701     URX0IE = 0;
//  702 #endif
//  703     cfg = cfg0;
//  704     cfg0 = NULL;
//  705   }
//  706 #endif
//  707 #if HAL_UART_1_ENABLE
//  708   if ( port == HAL_UART_PORT_1 )
//  709   {
//  710     U1CSR &= ~CSR_RE;
//  711 #if HAL_UART_DMA == 2
//  712     HAL_DMA_ABORT_CH( HAL_DMA_CH_RX );
//  713     HAL_DMA_ABORT_CH( HAL_DMA_CH_TX );
//  714 #else
//  715     URX1IE = 0;
//  716 #endif
//  717     cfg = cfg1;
//  718     cfg1 = NULL;
//  719   }
//  720 #endif
//  721 
//  722   if ( cfg )
//  723   {
//  724     if ( cfg->rxBuf )
//  725     {
//  726       osal_mem_free( cfg->rxBuf );
//  727     }
//  728     if ( cfg->txBuf )
//  729     {
//  730       osal_mem_free( cfg->txBuf );
//  731     }
//  732     osal_mem_free( cfg );
//  733   }
//  734 #endif
//  735 }
        LJMP	?BRET
        CFI EndBlock cfiBlock55
//  736 
//  737 /******************************************************************************
//  738  * @fn      HalUARTPoll
//  739  *
//  740  * @brief   Poll the UART.
//  741  *
//  742  * @param   none
//  743  *
//  744  * @return  none
//  745  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  746 void HalUARTPoll( void )
HalUARTPoll:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function HalUARTPoll
//  747 {
        FUNCALL HalUARTPoll, ??pollDMA
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  748 #if ( HAL_UART_0_ENABLE | HAL_UART_1_ENABLE )
//  749   static uint8 tickShdw;
//  750   uartCfg_t *cfg;
//  751   uint8 tick;
//  752 
//  753 #if HAL_UART_0_ENABLE
//  754   if ( cfg0 )
        MOV	DPTR,#??cfg0
        MOVX	A,@DPTR
        JNZ	??HalUARTPoll_0
        INC	DPTR
        MOVX	A,@DPTR
??HalUARTPoll_0:
        JZ	??HalUARTPoll_1
//  755   {
//  756     cfg = cfg0;
        MOV	DPTR,#??cfg0
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
//  757   }
//  758 #endif
//  759 #if HAL_UART_1_ENABLE
//  760   if ( cfg1 )
//  761   {
//  762     cfg = cfg1;
//  763   }
//  764 #endif
//  765 
//  766   // Use the LSB of the sleep timer (ST0 must be read first anyway).
//  767   tick = ST0 - tickShdw;
??HalUARTPoll_1:
        MOV	DPTR,#??tickShdw
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,0x95
        CLR	C
        SUBB	A,R2
        MOV	R2,A
//  768   tickShdw = ST0;
        MOV	A,0x95
        MOVX	@DPTR,A
//  769 
//  770   do
//  771   {
//  772     if ( cfg->txTick > tick )
        MOV	A,?V0 + 0
        ADD	A,#0xe
        MOV	DPL,A
        MOV	A,?V0 + 1
        LCALL	??Subroutine5_1 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV	R3,A
        MOV	A,R2
        CLR	C
        SUBB	A,R3
        JNC	??HalUARTPoll_2
//  773     {
//  774       cfg->txTick -= tick;
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R2
        SJMP	??HalUARTPoll_3
//  775     }
//  776     else
//  777     {
//  778       cfg->txTick = 0;
??HalUARTPoll_2:
        CLR	A
??HalUARTPoll_3:
        LCALL	?Subroutine14 & 0xFFFF
//  779     }
//  780 
//  781     if ( cfg->rxTick > tick )
??CrossCallReturnLabel_51:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	A,R2
        CLR	C
        SUBB	A,R3
        JNC	??HalUARTPoll_4
//  782     {
//  783       cfg->rxTick -= tick;
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R2
        SJMP	??HalUARTPoll_5
//  784     }
//  785     else
//  786     {
//  787       cfg->rxTick = 0;
??HalUARTPoll_4:
        CLR	A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
??HalUARTPoll_5:
        MOVX	@DPTR,A
//  788     }
//  789 
//  790 #if HAL_UART_ISR
//  791 #if HAL_UART_DMA
//  792     if ( cfg->flag & UART_CFG_DMA )
//  793     {
//  794       pollDMA( cfg );
//  795     }
//  796     else
//  797 #endif
//  798       {
//  799       pollISR( cfg );
//  800       }
//  801 #elif HAL_UART_DMA
//  802     pollDMA( cfg );
        ; Setup parameters for call to function pollDMA
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(??pollDMA & 0xffff)
        MOV	A,#((??pollDMA >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  803 #endif
//  804 
//  805     /* The following logic makes continuous callbacks on any eligible flag
//  806      * until the condition corresponding to the flag is rectified.
//  807      * So even if new data is not received, continuous callbacks are made.
//  808      */
//  809       if ( cfg->rxHead != cfg->rxTail )
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R2
        JNZ	$+5
        LJMP	??HalUARTPoll_6 & 0xFFFF
//  810       {
//  811       uint8 evt;
//  812 
//  813       if ( cfg->rxHead >= (cfg->rxMax - SAFE_RX_MIN) )
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        JC	??HalUARTPoll_7
//  814       {
//  815         evt = HAL_UART_RX_FULL;
        MOV	R7,#0x1
        SJMP	??HalUARTPoll_8
//  816       }
//  817       else if ( cfg->rxHigh && (cfg->rxHead >= cfg->rxHigh) )
??HalUARTPoll_7:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JZ	??HalUARTPoll_9
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        POP	A
        CFI CFA_SP SP+0
        CLR	C
        SUBB	A,R2
        JC	??HalUARTPoll_9
//  818       {
//  819         evt = HAL_UART_RX_ABOUT_FULL;
        MOV	R7,#0x2
        SJMP	??HalUARTPoll_8
//  820     }
//  821       else if ( cfg->rxTick == 0 )
??HalUARTPoll_9:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JNZ	??HalUARTPoll_6
//  822     {
//  823         evt = HAL_UART_RX_TIMEOUT;
        MOV	R7,#0x4
??HalUARTPoll_8:
        MOV	A,?V0 + 0
        ADD	A,#0x10
        MOV	DPL,A
        MOV	A,?V0 + 1
        LCALL	??Subroutine3_1 & 0xFFFF
??CrossCallReturnLabel_6:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        MOV	A,R4
        ORL	A,R5
        ORL	A,R6
        JZ	??HalUARTPoll_6
//  824     }
//  825     else
//  826     {
//  827         evt = 0;
//  828     }
//  829 
//  830     if ( evt && cfg->rxCB )
//  831     {
//  832         cfg->rxCB( ((cfg->flag & UART_CFG_U1F)!=0), evt );
        ; Setup parameters for indirect call
        MOV	A,R7
        MOV	R2,A
        MOV	A,?V0 + 0
        ADD	A,#0xf
        MOV	DPL,A
        MOV	A,?V0 + 1
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_12:
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R1,A
        MOV	A,?V0 + 0
        ADD	A,#0x10
        MOV	DPL,A
        MOV	A,?V0 + 1
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_39:
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPL,R4
        MOV	DPH,R5
        LCALL	?BCALL               ; Banked call to: DPTR()
//  833     }
//  834     }
//  835 
//  836 #if HAL_UART_0_ENABLE
//  837     if ( cfg == cfg0 )
//  838     {
//  839 #if HAL_UART_1_ENABLE
//  840       if ( cfg1 )
//  841       {
//  842         cfg = cfg1;
//  843       }
//  844       else
//  845 #endif
//  846         break;
//  847     }
//  848     else
//  849 #endif
//  850       break;
//  851 
//  852   } while ( TRUE );
//  853 #else
//  854   return;
//  855 #endif
//  856 }
??HalUARTPoll_6:
        LJMP	?Subroutine19 & 0xFFFF
        CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOVX	@DPTR,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	A,#-0x30
        ADD	A,R0
        MOV	R0,A
        MOV	A,#-0x1
        ADDC	A,#0x0
        MOV	R1,A
        CLR	C
        MOV	A,R2
        SUBB	A,R0
        CLR	A
        SUBB	A,R1
        MOV	C,0xD0 /* PSW */.2
        XRL	A,PSW
        RLC	A
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
??tickShdw:
        DS 1
//  857 
//  858 /**************************************************************************************************
//  859  * @fn      Hal_UART_RxBufLen()
//  860  *
//  861  * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
//  862  *
//  863  * @param   port - UART port
//  864  *
//  865  * @return  length of current Rx Buffer
//  866  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  867 uint16 Hal_UART_RxBufLen( uint8 port )
Hal_UART_RxBufLen:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI Function Hal_UART_RxBufLen
//  868 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV	A,R1
//  869   uartCfg_t *cfg = NULL;
        MOV	R0,#0x0
        MOV	R1,#0x0
//  870 
//  871 #if HAL_UART_0_ENABLE
//  872   if ( port == HAL_UART_PORT_0 )
        JNZ	??Hal_UART_RxBufLen_0
//  873   {
//  874     cfg = cfg0;
        MOV	DPTR,#??cfg0
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
//  875   }
//  876 #endif
//  877 #if HAL_UART_1_ENABLE
//  878   if ( port == HAL_UART_PORT_1 )
//  879   {
//  880     cfg = cfg1;
//  881   }
//  882 #endif
//  883 
//  884   HAL_UART_ASSERT( cfg );
//  885 
//  886   return UART_RX_AVAIL( cfg );
??Hal_UART_RxBufLen_0:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-6
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        POP	A
        CFI CFA_SP SP+-5
        CLR	C
        SUBB	A,R2
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        JC	??Hal_UART_RxBufLen_1
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV	R0,A
        MOV	A,R2
        CLR	C
        SUBB	A,R0
        MOV	R2,A
        CLR	A
        SUBB	A,#0x0
        SJMP	??Hal_UART_RxBufLen_2
??Hal_UART_RxBufLen_1:
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV	R4,A
        MOV	A,R2
        CLR	C
        SUBB	A,R4
        MOV	R2,A
        CLR	A
        SUBB	A,#0x0
        MOV	R3,A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        ADD	A,R2
        MOV	R0,A
        CLR	A
        ADDC	A,R3
        MOV	R1,A
        MOV	A,#0x1
        ADD	A,R0
        MOV	R2,A
        CLR	A
        ADDC	A,R1
??Hal_UART_RxBufLen_2:
        MOV	R3,A
        LJMP	?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock63
//  887 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond65) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond65) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond65) CFA_SP SP+-5
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,R0
        MOV	DPH,R1
        LJMP	?Subroutine20 & 0xFFFF
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66
//  888 
//  889 /*****************************************************************************
//  890  * @fn      HalUARTRead
//  891  *
//  892  * @brief   Read a buffer from the UART
//  893  *
//  894  * @param   port - USART module designation
//  895  *          buf  - valid data buffer at least 'len' bytes in size
//  896  *          len  - max length number of bytes to copy to 'buf'
//  897  *
//  898  * @return  length of buffer that was read
//  899  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  900 uint16 HalUARTRead( uint8 port, uint8 *buf, uint16 len )
HalUARTRead:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI Function HalUARTRead
//  901 {
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,R1
//  902   uartCfg_t *cfg = NULL;
        MOV	R0,#0x0
        MOV	R1,#0x0
//  903   uint8 cnt = 0;
        MOV	?V0 + 2,R0
//  904 
//  905 #if HAL_UART_0_ENABLE
//  906   if ( port == HAL_UART_PORT_0 )
        JNZ	??HalUARTRead_0
//  907   {
//  908     cfg = cfg0;
        MOV	DPTR,#??cfg0
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        SJMP	??HalUARTRead_0
//  909   }
//  910 #endif
//  911 #if HAL_UART_1_ENABLE
//  912   if ( port == HAL_UART_PORT_1 )
//  913   {
//  914     cfg = cfg1;
//  915   }
//  916 #endif
//  917 
//  918   HAL_UART_ASSERT( cfg );
//  919 
//  920   while ( (cfg->rxTail != cfg->rxHead) && (cnt < len) )
//  921   {
//  922     *buf++ = cfg->rxBuf[cfg->rxTail];
//  923     if ( cfg->rxTail == cfg->rxMax )
//  924     {
//  925       cfg->rxTail = 0;
//  926     }
//  927     else
//  928     {
//  929       cfg->rxTail++;
??HalUARTRead_1:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        INC	A
??HalUARTRead_2:
        MOVX	@DPTR,A
//  930     }
//  931     cnt++;
        INC	?V0 + 2
??HalUARTRead_0:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_48:
        MOVX	A,@DPTR
        XRL	A,R6
        JZ	??HalUARTRead_3
        MOV	?V0 + 0,?V0 + 2
        CLR	C
        MOV	A,?V0 + 0
        SUBB	A,R4
        CLR	A
        SUBB	A,R5
        JNC	??HalUARTRead_3
        MOV	A,R0
        ADD	A,#0x3
        MOV	R6,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R7,A
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        ADD	A,?V0 + 0
        MOV	?V0 + 3,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	DPL,?V0 + 3
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_49:
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??HalUARTRead_1
        CLR	A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        SJMP	??HalUARTRead_2
//  932   }
//  933 
//  934 #if HAL_UART_DMA
//  935   #if HAL_UART_ISR
//  936   if ( cfg->flag & UART_CFG_DMA )
//  937   #endif
//  938   {
//  939     /* If there is no flow control on a DMA-driven UART, the Rx Head & Tail
//  940      * pointers must be reset to zero after every read in order to preserve the
//  941      * full length of the Rx buffer. This implies that every Read must read all
//  942      * of the Rx bytes available, or the pointers will not be reset and the
//  943      * next incoming packet may not fit in the Rx buffer space remaining - thus
//  944      * the end portion of the incoming packet that does not fit would be lost.
//  945      */
//  946     if ( !(cfg->flag & UART_CFG_FLW) )
??HalUARTRead_3:
        MOV	A,R0
        ADD	A,#0xf
        MOV	DPL,A
        MOV	A,R1
        LCALL	??Subroutine5_1 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV	C,0xE0 /* A   */.5
        JC	??HalUARTRead_4
//  947     {
//  948       // This is a trick to trigger the DMA abort and restart logic in pollDMA.
//  949       cfg->flag |= UART_CFG_RXF;
        SETB	0xE0 /* A   */.1
        MOVX	@DPTR,A
//  950     }
//  951   }
//  952 #endif
//  953 
//  954 #if HAL_UART_ISR
//  955   #if HAL_UART_DMA
//  956   if ( !(cfg->flag & UART_CFG_DMA) )
//  957   #endif
//  958   {
//  959     cfg->rxCnt = UART_RX_AVAIL( cfg );
//  960 
//  961     if ( cfg->flag & UART_CFG_RXF )
//  962     {
//  963       if ( cfg->rxCnt < (cfg->rxMax - SAFE_RX_MIN) )
//  964       {
//  965         RX_STRT_FLOW( cfg );
//  966       }
//  967     }
//  968   }
//  969 #endif
//  970 
//  971   return cnt;
??HalUARTRead_4:
        MOV	R2,?V0 + 2
        MOV	R3,#0x0
        CFI EndBlock cfiBlock67
        REQUIRE ?Subroutine22
        ; // Fall through to label ?Subroutine22
//  972 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        MOVX	A,@DPTR
        MOV	R6,A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOV	A,R6
        ADD	A,#0xf
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 11)
??Subroutine5_0:
        MOV	DPL,A
        MOV	A,R7
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 15)
??Subroutine5_1:
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_63:
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_20
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_13
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_14
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_17
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_30
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_15
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_6
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_19
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_23
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_24
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_10
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_9
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_22
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_21
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_31
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_16
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_5
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_11
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_18
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_28
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_7
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_26
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_25
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_12
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_2
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_8
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+-1
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_4
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_29
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_3
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker122 Using cfiCommon1
        CFI (cfiPicker122) NoFunction
        CFI (cfiPicker122) Picker
        ADDC	A,#0x0
        MOV	DPH,A
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiPicker122
//  973 
//  974 /******************************************************************************
//  975  * @fn      HalUARTWrite
//  976  *
//  977  * @brief   Write a buffer to the UART.
//  978  *
//  979  * @param   port    - UART port
//  980  *          pBuffer - pointer to the buffer that will be written, not freed
//  981  *          length  - length of
//  982  *
//  983  * @return  length of the buffer that was sent
//  984  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  985 uint16 HalUARTWrite( uint8 port, uint8 *buf, uint16 len )
HalUARTWrite:
        CFI Block cfiBlock123 Using cfiCommon0
        CFI Function HalUARTWrite
//  986 {
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	?V0 + 0,R1
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	A,R4
        MOV	R2,A
        MOV	A,R5
        MOV	R3,A
//  987   uartCfg_t *cfg = NULL;
        MOV	R0,#0x0
        MOV	R1,#0x0
//  988   uint8 cnt;
//  989 
//  990 #if HAL_UART_0_ENABLE
//  991   if ( port == HAL_UART_PORT_0 )
        MOV	A,?V0 + 0
        JNZ	??HalUARTWrite_0
//  992   {
//  993     cfg = cfg0;
        MOV	DPTR,#??cfg0
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
//  994   }
//  995 #endif
//  996 #if HAL_UART_1_ENABLE
//  997   if ( port == HAL_UART_PORT_1 )
//  998   {
//  999     cfg = cfg1;
// 1000   }
// 1001 #endif
// 1002 
// 1003   HAL_UART_ASSERT( cfg );
// 1004 
// 1005   if ( cfg->txHead == cfg->txTail )
??HalUARTWrite_0:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	A,R0
        ADD	A,#0xb
        MOV	DPL,A
        MOV	A,R1
        LCALL	??Subroutine5_1 & 0xFFFF
??CrossCallReturnLabel_29:
        XRL	A,R4
        JNZ	??HalUARTWrite_1
// 1006   {
// 1007 #if HAL_UART_DMA
// 1008     // When pointers are equal, reset to zero to get max len w/out wrapping.
// 1009     cfg->txHead = cfg->txTail = 0;
        CLR	A
        MOVX	@DPTR,A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV	A,#-0x1
        ADD	A,R4
        DEC	R4
        MOV	A,#-0x1
        ADDC	A,#0x0
        SJMP	??HalUARTWrite_2
// 1010 #endif
// 1011 #if HAL_UART_ISR
// 1012 #if HAL_UART_DMA
// 1013     if ( !(cfg->flag & UART_CFG_DMA) )
// 1014 #endif
// 1015     {
// 1016       cfg->flag &= ~UART_CFG_TXF;
// 1017     }
// 1018 #endif
// 1019   }
// 1020 
// 1021   // Accept "all-or-none" on write request.
// 1022   if ( TX_AVAIL( cfg ) < len )
??HalUARTWrite_1:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,R0
        ADD	A,#0xb
        LCALL	??Subroutine3_0 & 0xFFFF
??CrossCallReturnLabel_8:
        POP	A
        CFI CFA_SP SP+0
        CLR	C
        SUBB	A,R4
        JNC	??HalUARTWrite_3
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV	A,#-0x1
        ADD	A,R4
        DEC	R4
        MOV	A,#-0x1
        SJMP	??HalUARTWrite_4
??HalUARTWrite_3:
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV	A,R0
        ADD	A,#0xb
        MOV	DPL,A
        MOV	A,R1
        LCALL	??Subroutine5_1 & 0xFFFF
??CrossCallReturnLabel_30:
        ADD	A,R4
        MOV	R4,A
        CLR	A
??HalUARTWrite_4:
        ADDC	A,R5
??HalUARTWrite_2:
        MOV	R5,A
        CLR	C
        MOV	A,R4
        SUBB	A,R2
        MOV	A,R5
        SUBB	A,R3
        JNC	??HalUARTWrite_5
// 1023   {
// 1024     return 0;
        MOV	R2,#0x0
        MOV	R3,#0x0
        SJMP	??HalUARTWrite_6
// 1025   }
// 1026 
// 1027   for ( cnt = len; cnt; cnt-- )
??HalUARTWrite_5:
        MOV	A,R2
        MOV	?V0 + 3,A
        SJMP	??HalUARTWrite_7
// 1028   {
// 1029     cfg->txBuf[ cfg->txHead ] = *buf++;
// 1030 
// 1031     if ( cfg->txHead == cfg->txMax )
// 1032     {
// 1033       cfg->txHead = 0;
// 1034     }
// 1035     else
// 1036     {
// 1037       cfg->txHead++;
??HalUARTWrite_8:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        INC	A
??HalUARTWrite_9:
        MOVX	@DPTR,A
// 1038     }
        DEC	?V0 + 3
??HalUARTWrite_7:
        MOV	A,?V0 + 3
        JZ	??HalUARTWrite_6
        MOV	A,R0
        ADD	A,#0xa
        MOV	R4,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R5,A
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        ADD	A,?V0 + 0
        MOV	?V0 + 2,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	DPL,?V0 + 2
        MOV	DPH,A
        POP	A
        CFI CFA_SP SP+0
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV	R6,DPL
        MOV	R7,DPH
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	A,R0
        ADD	A,#0xc
        MOV	DPL,A
        MOV	A,R1
        LCALL	??Subroutine5_1 & 0xFFFF
??CrossCallReturnLabel_31:
        XRL	A,R4
        JNZ	??HalUARTWrite_8
        CLR	A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        SJMP	??HalUARTWrite_9
// 1039   }
// 1040 
// 1041 #if HAL_UART_ISR
// 1042 #if HAL_UART_DMA
// 1043   if ( !(cfg->flag & UART_CFG_DMA) )
// 1044 #endif
// 1045   {
// 1046     if ( !(cfg->flag & UART_CFG_TXF) && len )
// 1047     {
// 1048       cfg->flag |= UART_CFG_TXF;
// 1049       if ( !(cfg->flag & UART_CFG_U1F) )
// 1050       {
// 1051         U0DBUF = cfg->txBuf[cfg->txTail];
// 1052       }
// 1053       else
// 1054       {
// 1055         U1DBUF = cfg->txBuf[cfg->txTail];
// 1056       }
// 1057     }
// 1058   }
// 1059 #endif
// 1060 
// 1061   return len;
??HalUARTWrite_6:
        LJMP	?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock123
// 1062 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker126 Using cfiCommon1
        CFI (cfiPicker126) NoFunction
        CFI (cfiPicker126) Picker
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	A,R4
        CLR	C
        SUBB	A,?V0 + 0
        MOV	R4,A
        CLR	A
        SUBB	A,#0x0
        MOV	R5,A
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiPicker126

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker129 Using cfiCommon1
        CFI (cfiPicker129) NoFunction
        CFI (cfiPicker129) Picker
        MOV	A,R0
        ADD	A,#0xc
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+-1
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 12)
??Subroutine3_0:
        MOV	DPL,A
        MOV	A,R1
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 10)
??Subroutine3_1:
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV	R4,A
        RET
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiPicker129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        END
// 1063 
// 1064 #if HAL_UART_ISR
// 1065 /***************************************************************************************************
// 1066  * @fn      halUart0RxIsr
// 1067  *
// 1068  * @brief   UART0 Receive Interrupt
// 1069  *
// 1070  * @param   None
// 1071  *
// 1072  * @return  None
// 1073  ***************************************************************************************************/
// 1074 #if HAL_UART_0_ENABLE
// 1075 HAL_ISR_FUNCTION( halUart0RxIsr, URX0_VECTOR )
// 1076 {
// 1077   cfg0->rxBuf[cfg0->rxHead] = U0DBUF;
// 1078 
// 1079   if ( cfg0->rxHead == cfg0->rxMax )
// 1080   {
// 1081     cfg0->rxHead = 0;
// 1082   }
// 1083   else
// 1084   {
// 1085     cfg0->rxHead++;
// 1086   }
// 1087 }
// 1088 #endif
// 1089 
// 1090 /***************************************************************************************************
// 1091  * @fn      halUart1RxIsr
// 1092  *
// 1093  * @brief   UART1 Receive Interrupt
// 1094  *
// 1095  * @param   None
// 1096  *
// 1097  * @return  None
// 1098  ***************************************************************************************************/
// 1099 #if HAL_UART_1_ENABLE
// 1100 HAL_ISR_FUNCTION( halUart1RxIsr, URX1_VECTOR )
// 1101 {
// 1102   cfg1->rxBuf[cfg1->rxHead] = U1DBUF;
// 1103 
// 1104   if ( cfg1->rxHead == cfg1->rxMax )
// 1105   {
// 1106     cfg1->rxHead = 0;
// 1107   }
// 1108   else
// 1109   {
// 1110     cfg1->rxHead++;
// 1111   }
// 1112 }
// 1113 #endif
// 1114 
// 1115 /***************************************************************************************************
// 1116  * @fn      halUart0TxIsr
// 1117  *
// 1118  * @brief   UART0 Transmit Interrupt
// 1119  *
// 1120  * @param   None
// 1121  *
// 1122  * @return  None
// 1123  ***************************************************************************************************/
// 1124 #if HAL_UART_0_ENABLE
// 1125 HAL_ISR_FUNCTION( halUart0TxIsr, UTX0_VECTOR )
// 1126 {
// 1127   UTX0IF = 0;
// 1128 
// 1129   if ( cfg0->txTail == cfg0->txMax )
// 1130   {
// 1131     cfg0->txTail = 0;
// 1132   }
// 1133   else
// 1134   {
// 1135     cfg0->txTail++;
// 1136   }
// 1137 
// 1138   if ( cfg0->txTail != cfg0->txHead )
// 1139   {
// 1140     U0DBUF = cfg0->txBuf[cfg0->txTail];
// 1141   }
// 1142 }
// 1143 #endif
// 1144 
// 1145 /***************************************************************************************************
// 1146  * @fn      halUart1TxIsr
// 1147  *
// 1148  * @brief   UART1 Transmit Interrupt
// 1149  *
// 1150  * @param   None
// 1151  *
// 1152  * @return  None
// 1153  ***************************************************************************************************/
// 1154 #if HAL_UART_1_ENABLE
// 1155 HAL_ISR_FUNCTION( halUart1TxIsr, UTX1_VECTOR )
// 1156 {
// 1157   UTX1IF = 0;
// 1158   U1CSR &= ~CSR_TX_BYTE;  // Rev-D does not require, older does.
// 1159 
// 1160   if ( cfg1->txTail == cfg1->txMax )
// 1161   {
// 1162     cfg1->txTail = 0;
// 1163   }
// 1164   else
// 1165   {
// 1166     cfg1->txTail++;
// 1167   }
// 1168 
// 1169   if ( cfg1->txTail != cfg1->txHead )
// 1170   {
// 1171     U1DBUF = cfg1->txBuf[cfg1->txTail];
// 1172   }
// 1173 }
// 1174 #endif
// 1175 #endif
// 1176 
// 1177 /******************************************************************************
// 1178 ******************************************************************************/
// 
// 2 139 bytes in segment BANKED_CODE
//    16 bytes in segment SFR_AN
//     3 bytes in segment XDATA_Z
// 
// 2 139 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 16 bytes shared)
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
