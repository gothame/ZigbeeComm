//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:52:40 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\mac\low_level\srf03\mac_backoff_timer.c       /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wE /
//                          ndev.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS  /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          MT_TASK -D ZG_ENDDEVICE -lC                      /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\ -lA           /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\EndDeviceEB\Obj\ -e          /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\mac\low_level\srf03\mac_backoff_timer.c"     /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\mac_backoff_ti /
//                          mer.s51                                          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME mac_backoff_timer

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SUB
        EXTERN ?L_SUB_FROM_X
        EXTERN ?L_SUB_X
        EXTERN ?SL_GT_X
        EXTERN ?UL_GT
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBWEAK T2CNF
        PUBWEAK T2THD
        PUBWEAK T2TLD
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_0
        PUBWEAK __Constant_c0000
        PUBWEAK __Constant_ffffffff
        PUBLIC macBackoffTimerCancelTrigger
        FUNCTION macBackoffTimerCancelTrigger,021203H
        LOCFRAME XSTACK, 12, STACK
        PUBLIC macBackoffTimerCapture
        FUNCTION macBackoffTimerCapture,021203H
        LOCFRAME XSTACK, 16, STACK
        PUBLIC macBackoffTimerCompareIsr
        FUNCTION macBackoffTimerCompareIsr,021203H
        LOCFRAME XSTACK, 12, STACK
        PUBLIC macBackoffTimerCount
        FUNCTION macBackoffTimerCount,021203H
        LOCFRAME XSTACK, 16, STACK
        PUBLIC macBackoffTimerGetTrigger
        FUNCTION macBackoffTimerGetTrigger,0203H
        LOCFRAME XSTACK, 12, STACK
        PUBLIC macBackoffTimerInit
        FUNCTION macBackoffTimerInit,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC macBackoffTimerRealign
        FUNCTION macBackoffTimerRealign,021203H
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC macBackoffTimerReset
        FUNCTION macBackoffTimerReset,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macBackoffTimerSetCount
        FUNCTION macBackoffTimerSetCount,021203H
        LOCFRAME XSTACK, 16, STACK
        PUBLIC macBackoffTimerSetRollover
        FUNCTION macBackoffTimerSetRollover,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC macBackoffTimerSetTrigger
        FUNCTION macBackoffTimerSetTrigger,021203H
        LOCFRAME XSTACK, 16, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN macMcuOverflowSetCount
        FUNCTION macMcuOverflowSetCount,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN macMcuOrT2PEROF2
        FUNCTION macMcuOrT2PEROF2,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN macMcuAndT2PEROF2
        FUNCTION macMcuAndT2PEROF2,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN macMcuOverflowCount
        FUNCTION macMcuOverflowCount,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN halAssertHandler
        FUNCTION halAssertHandler,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN macMcuOverflowSetCompare
        FUNCTION macMcuOverflowSetCompare,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN macMcuOverflowCapture
        FUNCTION macMcuOverflowCapture,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN macCspForceTxDoneIfPending
        FUNCTION macCspForceTxDoneIfPending,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN macBackoffTimerRolloverCallback
        FUNCTION macBackoffTimerRolloverCallback,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN macBackoffTimerTriggerCallback
        FUNCTION macBackoffTimerTriggerCallback,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN macTxActive

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mac\low_level\srf03\mac_backoff_timer.c
//    1 /**************************************************************************************************
//    2     Filename:
//    3     Revised:        $Date: 2007-03-26 16:18:09 -0700 (Mon, 26 Mar 2007) $
//    4     Revision:       $Revision: 13860 $
//    5 
//    6     Description:
//    7 
//    8     Describe the purpose and contents of the file.
//    9 
//   10     Copyright (c) 2006 by Texas Instruments, Inc.
//   11     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   12     derivative works, modify, distribute, perform, display or sell this
//   13     software and/or its documentation for any purpose is prohibited
//   14     without the express written consent of Texas Instruments, Inc.
//   15 **************************************************************************************************/
//   16 
//   17 
//   18 
//   19 /* ------------------------------------------------------------------------------------------------
//   20  *                                           Includes
//   21  * ------------------------------------------------------------------------------------------------
//   22  */
//   23 
//   24 /* hal */
//   25 #include "hal_types.h"
//   26 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,0a6H
// unsigned char volatile __sfr T2TLD
T2TLD:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a7H
// unsigned char volatile __sfr T2THD
T2THD:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c3H
// unsigned char volatile __sfr T2CNF
T2CNF:
        DS 1
//   27 
//   28 /* high-level specific */
//   29 #include "mac_spec.h"
//   30 
//   31 /* exported low-level */
//   32 #include "mac_low_level.h"
//   33 
//   34 /* low-level specific */
//   35 #include "mac_backoff_timer.h"
//   36 #include "mac_tx.h"
//   37 
//   38 /* target specific */
//   39 #include "mac_radio_defs.h"
//   40 
//   41 /* debug */
//   42 #include "mac_assert.h"
//   43 
//   44 
//   45 /* ------------------------------------------------------------------------------------------------
//   46  *                                            Defines
//   47  * ------------------------------------------------------------------------------------------------
//   48  */
//   49 #define COMPARE_STATE_ROLLOVER_BV                 BV(0)
//   50 #define COMPARE_STATE_TRIGGER_BV                  BV(1)
//   51 #define COMPARE_STATE_ARM_BV                      BV(2)
//   52 
//   53 #define COMPARE_STATE_TRIGGER                     COMPARE_STATE_TRIGGER_BV
//   54 #define COMPARE_STATE_ROLLOVER                    COMPARE_STATE_ROLLOVER_BV
//   55 #define COMPARE_STATE_ROLLOVER_AND_TRIGGER        (COMPARE_STATE_ROLLOVER_BV | COMPARE_STATE_TRIGGER_BV)
//   56 #define COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER    (COMPARE_STATE_ROLLOVER_BV | COMPARE_STATE_ARM_BV)
//   57 
//   58 
//   59 /*
//   60  *  The datasheet mentions a small delay on both receive and transmit side of approximately
//   61  *  two microseconds.  The precise characterization is given below.
//   62  *  (This data is not given in rev 1.03 datasheet)
//   63  */
//   64 #define RX_TX_PROP_DELAY_AVG_USEC         ((MAC_RADIO_RX_TX_PROP_DELAY_MIN_USEC + MAC_RADIO_RX_TX_PROP_DELAY_MAX_USEC) / 2)
//   65 #define RX_TX_PROP_DELAY_AVG_TIMER_TICKS  ((uint16)(MAC_RADIO_TIMER_TICKS_PER_USEC() * RX_TX_PROP_DELAY_AVG_USEC + 0.5))
//   66 
//   67 /*
//   68  *  For slotted receives, the SFD signal is expected to occur on a specifc symbol boundary.
//   69  *  This does *not* correspond to the backoff boundary.  The SFD signal occurs at an
//   70  *  offset from the backoff boundary.  This is done for efficiency of related algorithms.
//   71  *
//   72  *  Once transmit is strobed there is a fixed delay until the SFD signal occurs.  The frame
//   73  *  does not start over-the-air transmit until after an internal radio delay of 12 symbols.
//   74  *  Once transmitting over-the-air, the preamble is sent (8 symbols) followed by the
//   75  *  SFD field (2 symbols). After the SFD field completes, the SFD signal occurs.  This
//   76  *  adds up to a total of 22 symbols from strobe to SFD signal.
//   77  *
//   78  *  Since 22 symbols spans more than a backoff (20 symbols) the modulus operation is used
//   79  *  to find the symbol offset which is 2 symbols.
//   80  *
//   81  *  This math is derived formally via the pre-processor.
//   82  */
//   83 #define SYMBOLS_FROM_STROBE_TO_PREAMBLE   12 /* from datasheet */
//   84 #define SYMBOLS_FROM_PREAMBLE_TO_SFD      (MAC_SPEC_PREAMBLE_FIELD_LENGTH + MAC_SPEC_SFD_FIELD_LENGTH)
//   85 #define SYMBOLS_FROM_STROBE_TO_SFD        (SYMBOLS_FROM_STROBE_TO_PREAMBLE + SYMBOLS_FROM_PREAMBLE_TO_SFD)
//   86 #define SYMBOLS_EXPECTED_AT_SFD           (SYMBOLS_FROM_STROBE_TO_SFD % MAC_A_UNIT_BACKOFF_PERIOD)
//   87 
//   88 /* after all that formal math, make sure the result is as expected */
//   89 #if (SYMBOLS_EXPECTED_AT_SFD != 2)
//   90 #error "ERROR! Internal problem with pre-processor math of slotted alignment."
//   91 #endif
//   92 
//   93 
//   94 /*
//   95  *  The expected SFD signal occurs at the symbol offset *plus* a small internal propagation delay
//   96  *  internal to the radio.  This delay is given as the sum of a receive side delay and a transmit
//   97  *  side delay.  When this delay is subtracted from the internal timer, the internal time base
//   98  *  actually becomes the actual receive time *minus* the transmit delay.  This works out though.
//   99  *  The transmit logic does *not* take into account this delay.  Since the timer is skewed by the
//  100  *  transmit delay already, the transmits go out precisely on time.
//  101  */
//  102 #define TIMER_TICKS_EXPECTED_AT_SFD   ((SYMBOLS_EXPECTED_AT_SFD * MAC_RADIO_TIMER_TICKS_PER_SYMBOL()) \ 
//  103                                           + RX_TX_PROP_DELAY_AVG_TIMER_TICKS)
//  104 
//  105 
//  106 /* ------------------------------------------------------------------------------------------------
//  107  *                                         Local Variables
//  108  * ------------------------------------------------------------------------------------------------
//  109  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  110 static uint32 backoffTimerRollover;
??backoffTimerRollover:
        DS 4

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  111 static uint32 backoffTimerTrigger;
??backoffTimerTrigger:
        DS 4

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  112 static uint8 compareState;
??compareState:
        DS 1
//  113 
//  114 
//  115 /**************************************************************************************************
//  116  * @fn          macBackoffTimerInit
//  117  *
//  118  * @brief       Intializes backoff timer.
//  119  *
//  120  * @param       none
//  121  *
//  122  * @return      none
//  123  **************************************************************************************************
//  124  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 void macBackoffTimerInit(void)
macBackoffTimerInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function macBackoffTimerInit
//  126 {
        FUNCALL macBackoffTimerInit, macMcuOverflowSetCount
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL macBackoffTimerInit, macBackoffTimerSetRollover
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL macBackoffTimerInit, macMcuOrT2PEROF2
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  127   compareState = COMPARE_STATE_ROLLOVER;
        MOV	A,#0x1
        MOV	DPTR,#??compareState
        MOVX	@DPTR,A
//  128   MAC_RADIO_BACKOFF_SET_COUNT(0);
        ; Setup parameters for call to function macMcuOverflowSetCount
        MOV	DPTR,#__Constant_0
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(macMcuOverflowSetCount & 0xffff)
        MOV	A,#((macMcuOverflowSetCount >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  129   macBackoffTimerSetRollover(MAC_BACKOFF_TIMER_DEFAULT_ROLLOVER);
        ; Setup parameters for call to function macBackoffTimerSetRollover
        MOV	DPTR,#__Constant_c0000
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(macBackoffTimerSetRollover & 0xffff)
        MOV	A,#((macBackoffTimerSetRollover >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  130   MAC_RADIO_BACKOFF_COMPARE_CLEAR_INTERRUPT();
        MOV	0xc3,#-0x3d
//  131   MAC_RADIO_BACKOFF_COMPARE_ENABLE_INTERRUPT();
        ; Setup parameters for call to function macMcuOrT2PEROF2
        MOV	R1,#0x20
        MOV	DPTR,#(macMcuOrT2PEROF2 & 0xffff)
        MOV	A,#((macMcuOrT2PEROF2 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  132 }
        LJMP	?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock0
//  133 
//  134 
//  135 /**************************************************************************************************
//  136  * @fn          macBackoffTimerReset
//  137  *
//  138  * @brief       Resets backoff timer.
//  139  *
//  140  * @param       none
//  141  *
//  142  * @return      none
//  143  **************************************************************************************************
//  144  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  145 void macBackoffTimerReset(void)
macBackoffTimerReset:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function macBackoffTimerReset
//  146 {
        FUNCALL macBackoffTimerReset, macMcuAndT2PEROF2
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL macBackoffTimerReset, macBackoffTimerInit
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  147   MAC_RADIO_BACKOFF_COMPARE_DISABLE_INTERRUPT();
        ; Setup parameters for call to function macMcuAndT2PEROF2
        MOV	R1,#-0x21
        MOV	DPTR,#(macMcuAndT2PEROF2 & 0xffff)
        MOV	A,#((macMcuAndT2PEROF2 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  148   macBackoffTimerInit();
        ; Setup parameters for call to function macBackoffTimerInit
        MOV	DPTR,#(macBackoffTimerInit & 0xffff)
        MOV	A,#((macBackoffTimerInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  149 }
        POP	DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP	DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP	?BRET
        CFI EndBlock cfiBlock1
//  150 
//  151 
//  152 /**************************************************************************************************
//  153  * @fn          macBackoffTimerSetRollover
//  154  *
//  155  * @brief       Set rollover count of backoff timer.
//  156  *
//  157  * @param       rolloverBackoff - backoff count where count is reset to zero
//  158  *
//  159  * @return      none
//  160  **************************************************************************************************
//  161  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  162 void macBackoffTimerSetRollover(uint32 rolloverBackoff)
macBackoffTimerSetRollover:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function macBackoffTimerSetRollover
//  163 {
        FUNCALL macBackoffTimerSetRollover, macMcuOverflowCount
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL macBackoffTimerSetRollover, halAssertHandler
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL macBackoffTimerSetRollover, macMcuOverflowSetCompare
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	?V0 + 2,R4
        MOV	?V0 + 3,R5
//  164   halIntState_t  s;
//  165 
//  166   MAC_ASSERT(rolloverBackoff > MAC_RADIO_BACKOFF_COUNT());  /* rollover value must be greater than count */
        ; Setup parameters for call to function macMcuOverflowCount
        MOV	DPTR,#(macMcuOverflowCount & 0xffff)
        MOV	A,#((macMcuOverflowCount >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
        MOV	R0,#?V0 + 0
        MOV	R1,#?V0 + 4
        LCALL	?UL_GT
        JC	??macBackoffTimerSetRollover_0
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  167 
//  168   HAL_ENTER_CRITICAL_SECTION(s);
??macBackoffTimerSetRollover_0:
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R6,A
        CLR	0xa8.7
//  169   backoffTimerRollover = rolloverBackoff;
        MOV	DPTR,#??backoffTimerRollover
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
//  170   MAC_RADIO_BACKOFF_SET_COMPARE(rolloverBackoff);
        ; Setup parameters for call to function macMcuOverflowSetCompare
        LJMP	?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock2
//  171   HAL_EXIT_CRITICAL_SECTION(s);
//  172 }
//  173 
//  174 
//  175 /**************************************************************************************************
//  176  * @fn          macBackoffTimerSetCount
//  177  *
//  178  * @brief       Sets the count of the backoff timer.
//  179  *
//  180  * @param       backoff - new count
//  181  *
//  182  * @return      none
//  183  **************************************************************************************************
//  184  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  185 void macBackoffTimerSetCount(uint32 backoff)
macBackoffTimerSetCount:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function macBackoffTimerSetCount
//  186 {
        FUNCALL macBackoffTimerSetCount, halAssertHandler
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL macBackoffTimerSetCount, halAssertHandler
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL macBackoffTimerSetCount, macMcuOverflowSetCount
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	?V0 + 2,R4
        MOV	?V0 + 3,R5
//  187   halIntState_t  s;
//  188 
//  189   MAC_ASSERT(compareState == COMPARE_STATE_ROLLOVER);   /* trigger cannot be active if changing count */
        MOV	DPTR,#??compareState
        MOVX	A,@DPTR
        XRL	A,#0x1
        JZ	??macBackoffTimerSetCount_0
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  190   MAC_ASSERT(backoff < backoffTimerRollover);  /* count must be less than rollover value */
??macBackoffTimerSetCount_0:
        MOV	DPTR,#??backoffTimerRollover
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?UL_GT
        JC	??macBackoffTimerSetCount_1
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  191 
//  192   HAL_ENTER_CRITICAL_SECTION(s);
??macBackoffTimerSetCount_1:
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R6,A
        CLR	0xa8.7
//  193   MAC_RADIO_BACKOFF_SET_COUNT(backoff);
        ; Setup parameters for call to function macMcuOverflowSetCount
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(macMcuOverflowSetCount & 0xffff)
        MOV	A,#((macMcuOverflowSetCount >> 16) & 0xff)
        SJMP	??Subroutine2_0
        CFI EndBlock cfiBlock3
//  194   HAL_EXIT_CRITICAL_SECTION(s);
//  195 }
//  196 
//  197 
//  198 /**************************************************************************************************
//  199  * @fn          macBackoffTimerCount
//  200  *
//  201  * @brief       Returns the current backoff count.
//  202  *
//  203  * @param       none
//  204  *
//  205  * @return      current backoff count
//  206  **************************************************************************************************
//  207  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  208 uint32 macBackoffTimerCount(void)
macBackoffTimerCount:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function macBackoffTimerCount
//  209 {
        FUNCALL macBackoffTimerCount, macMcuOverflowCount
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  210   halIntState_t  s;
//  211   uint32 backoffCount;
//  212 
//  213   HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R6,A
        CLR	0xa8.7
//  214   backoffCount = MAC_RADIO_BACKOFF_COUNT();
        ; Setup parameters for call to function macMcuOverflowCount
        MOV	DPTR,#(macMcuOverflowCount & 0xffff)
        MOV	A,#((macMcuOverflowCount >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	?V0 + 2,R4
        MOV	?V0 + 3,R5
//  215   HAL_EXIT_CRITICAL_SECTION(s);
        MOV	A,R6
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
//  216   
//  217 #ifdef MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER
//  218   /*
//  219    *  Extra processing is required if the radio has a special hardware overflow
//  220    *  count feature.  Unfortunately this feature does not provide for setting a
//  221    *  rollover value.  This must be done manually.
//  222    *
//  223    *  This means there is a small window in time when reading the hardware count
//  224    *  will be inaccurate.  It's possible it could be one more than the allowable
//  225    *  count.  This happens if the count has just incremented beyond the maximum
//  226    *  and is queried before the ISR has a chance to run and reset the backoff
//  227    *  count back to zero.  (Pure software implementation of backoff count does
//  228    *  not have this problem.)
//  229    *
//  230    *  To solve this, before returning a value for the backoff count, the value
//  231    *  must be tested to see if it is beyond the maximum value.  If so, a rollover
//  232    *  interrupt that will set backoff count to zero is imminent.  In that case,
//  233    *  the correct backoff count of zero is returned.
//  234    */
//  235   if (backoffCount >= backoffTimerRollover)
        MOV	DPTR,#??backoffTimerRollover
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?UL_GT
        JC	??macBackoffTimerCount_0
//  236   {
//  237     return(0);
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	R4,#0x0
        MOV	R5,#0x0
//  238   }
//  239 #endif
//  240   
//  241   return(backoffCount);
??macBackoffTimerCount_0:
        SJMP	??Subroutine2_1
        CFI EndBlock cfiBlock4
//  242 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(macMcuOverflowSetCompare & 0xffff)
        MOV	A,#((macMcuOverflowSetCompare >> 16) & 0xff)
??Subroutine2_0:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R6
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
??Subroutine2_1:
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  243 
//  244 
//  245 /**************************************************************************************************
//  246  * @fn          macBackoffTimerCapture
//  247  *
//  248  * @brief       Returns the most recently captured backoff count
//  249  *
//  250  * @param       none
//  251  *
//  252  * @return      last backoff count that was captured
//  253  **************************************************************************************************
//  254  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  255 uint32 macBackoffTimerCapture(void)
macBackoffTimerCapture:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function macBackoffTimerCapture
//  256 {
        FUNCALL macBackoffTimerCapture, macMcuOverflowCapture
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  257   halIntState_t  s;
//  258   uint32 backoffCapture;
//  259 
//  260   HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R6,A
        CLR	0xa8.7
//  261   backoffCapture = MAC_RADIO_BACKOFF_CAPTURE();
        ; Setup parameters for call to function macMcuOverflowCapture
        MOV	DPTR,#(macMcuOverflowCapture & 0xffff)
        MOV	A,#((macMcuOverflowCapture >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	?V0 + 2,R4
        MOV	?V0 + 3,R5
//  262   HAL_EXIT_CRITICAL_SECTION(s);
        MOV	A,R6
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
//  263 
//  264 #ifdef MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER
//  265   /*
//  266    *  See other instance of this #ifdef for detailed comments.
//  267    *  Those comments apply to the backoff capture value too.
//  268    */
//  269   if (backoffCapture >= backoffTimerRollover)
        MOV	DPTR,#??backoffTimerRollover
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?UL_GT
        JC	??macBackoffTimerCapture_0
//  270   {
//  271     return(0);
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	R4,#0x0
        MOV	R5,#0x0
//  272   }
//  273 #endif
//  274   
//  275   return(backoffCapture);
??macBackoffTimerCapture_0:
        SJMP	??Subroutine2_1
        CFI EndBlock cfiBlock6
//  276 }
//  277 
//  278 
//  279 /**************************************************************************************************
//  280  * @fn          macBackoffTimerGetTrigger
//  281  *
//  282  * @brief       Returns the trigger set for the backoff timer.
//  283  *
//  284  * @param       none
//  285  *
//  286  * @return      backoff count of trigger
//  287  **************************************************************************************************
//  288  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  289 uint32 macBackoffTimerGetTrigger(void)
macBackoffTimerGetTrigger:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function macBackoffTimerGetTrigger
//  290 {
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  291   return(backoffTimerTrigger);
        MOV	DPTR,#??backoffTimerTrigger
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        LJMP	?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock7
//  292 }
//  293 
//  294 
//  295 /**************************************************************************************************
//  296  * @fn          macBackoffTimerSetTrigger
//  297  *
//  298  * @brief       Sets the trigger count for the backoff counter.  A callback is exectuted when
//  299  *              the backoff count reaches the trigger
//  300  *
//  301  * @param       triggerBackoff - backoff count for new trigger
//  302  *
//  303  * @return      none
//  304  **************************************************************************************************
//  305  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  306 void macBackoffTimerSetTrigger(uint32 triggerBackoff)
macBackoffTimerSetTrigger:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function macBackoffTimerSetTrigger
//  307 {
        FUNCALL macBackoffTimerSetTrigger, halAssertHandler
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL macBackoffTimerSetTrigger, macMcuOverflowCount
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL macBackoffTimerSetTrigger, macMcuOverflowSetCompare
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL macBackoffTimerSetTrigger, macMcuOverflowSetCompare
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	?V0 + 2,R4
        MOV	?V0 + 3,R5
//  308   halIntState_t  s;
//  309 
//  310   MAC_ASSERT(triggerBackoff < backoffTimerRollover); /* trigger backoff must be less than rollover backoff */
        MOV	DPTR,#??backoffTimerRollover
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?UL_GT
        JC	??macBackoffTimerSetTrigger_0
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  311 
//  312   HAL_ENTER_CRITICAL_SECTION(s);
??macBackoffTimerSetTrigger_0:
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R6,A
        CLR	0xa8.7
//  313   backoffTimerTrigger = triggerBackoff;
        MOV	DPTR,#??backoffTimerTrigger
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
//  314   if (triggerBackoff > MAC_RADIO_BACKOFF_COUNT())
        ; Setup parameters for call to function macMcuOverflowCount
        MOV	DPTR,#(macMcuOverflowCount & 0xffff)
        MOV	A,#((macMcuOverflowCount >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
        MOV	R0,#?V0 + 0
        MOV	R1,#?V0 + 4
        LCALL	?UL_GT
        JNC	??macBackoffTimerSetTrigger_1
//  315   {
//  316     compareState = COMPARE_STATE_TRIGGER;
        MOV	A,#0x2
        MOV	DPTR,#??compareState
        MOVX	@DPTR,A
//  317     MAC_RADIO_BACKOFF_SET_COMPARE(triggerBackoff);
        ; Setup parameters for call to function macMcuOverflowSetCompare
        SJMP	??macBackoffTimerSetTrigger_2
//  318   }
//  319   else
//  320   {
//  321     if (triggerBackoff == 0)
??macBackoffTimerSetTrigger_1:
        MOV	DPTR,#__Constant_0
        MOV	R0,#?V0 + 0
        LCALL	?L_EQ_X
        JNZ	??macBackoffTimerSetTrigger_3
//  322     {
//  323       compareState = COMPARE_STATE_ROLLOVER_AND_TRIGGER;
        MOV	A,#0x3
        SJMP	??macBackoffTimerSetTrigger_4
//  324     }
//  325     else
//  326     {
//  327       compareState = COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER;
??macBackoffTimerSetTrigger_3:
        MOV	A,#0x5
??macBackoffTimerSetTrigger_4:
        LCALL	??Subroutine0_0 & 0xFFFF
//  328     }
//  329     MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerRollover);
??CrossCallReturnLabel_2:
        LCALL	?L_MOV_X
??macBackoffTimerSetTrigger_2:
        LJMP	?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock8
//  330   }
//  331   HAL_EXIT_CRITICAL_SECTION(s);
//  332 }
//  333 
//  334 
//  335 /**************************************************************************************************
//  336  * @fn          macBackoffTimerCancelTrigger
//  337  *
//  338  * @brief       Cancels the trigger for the backoff counter.
//  339  *
//  340  * @param       none
//  341  *
//  342  * @return      none
//  343  **************************************************************************************************
//  344  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  345 void macBackoffTimerCancelTrigger(void)
macBackoffTimerCancelTrigger:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function macBackoffTimerCancelTrigger
//  346 {
        FUNCALL macBackoffTimerCancelTrigger, macMcuOverflowSetCompare
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  347   halIntState_t  s;
//  348 
//  349   HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R6,A
        CLR	0xa8.7
//  350   compareState = COMPARE_STATE_ROLLOVER;
        LCALL	?Subroutine0 & 0xFFFF
//  351   MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerRollover);
??CrossCallReturnLabel_0:
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(macMcuOverflowSetCompare & 0xffff)
        MOV	A,#((macMcuOverflowSetCompare >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  352   HAL_EXIT_CRITICAL_SECTION(s);
        MOV	A,R6
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
        CFI EndBlock cfiBlock9
//  353 }
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV	A,#0x1
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 16)
??Subroutine0_0:
        MOV	DPTR,#??compareState
        MOVX	@DPTR,A
        ; Setup parameters for call to function macMcuOverflowSetCompare
        ; Setup parameters for call to function macMcuOverflowSetCompare
        ; Setup parameters for call to function macMcuOverflowSetCompare
        MOV	DPTR,#??backoffTimerRollover
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        CFI EndBlock cfiCond14
//  354 
//  355 
//  356 /**************************************************************************************************
//  357  * @fn          macBackoffTimerRealign
//  358  *
//  359  * @brief       
//  360  *
//  361  *  Realignment is accomplished by adjusting the internal time base to align with the expected
//  362  *  reception time of an incoming frame.  The difference between the expected reception time and
//  363  *  the actual reception time is computed and this difference is used to adjust the hardware
//  364  *  timer count and backoff count.
//  365  *
//  366  *  The realignment is based on the SFD signal for the incoming frame.  The timer is aligned
//  367  *  by adjusting it with the difference between the expected SFD time and the actual SFD time.
//  368  *
//  369  * @param       none
//  370  *
//  371  * @return      none
//  372  **************************************************************************************************
//  373  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 int32 macBackoffTimerRealign(macRx_t *pMsg)
macBackoffTimerRealign:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function macBackoffTimerRealign
//  375 {
        FUNCALL macBackoffTimerRealign, macCspForceTxDoneIfPending
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL macBackoffTimerRealign, halAssertHandler
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL macBackoffTimerRealign, macMcuOverflowCount
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL macBackoffTimerRealign, macMcuOverflowSetCount
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV	A,#-0x4
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  376   uint16 timerDelayTicks;
//  377   int32 backoffDelta;
//  378   int32 backoffCount;
//  379 
//  380   MAC_ASSERT_STATEMENT( MAC_RADIO_FORCE_TX_DONE_IF_PENDING(); ); /* force TX to complete if just pending */
        ; Setup parameters for call to function macCspForceTxDoneIfPending
        MOV	DPTR,#(macCspForceTxDoneIfPending & 0xffff)
        MOV	A,#((macCspForceTxDoneIfPending >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  381   MAC_ASSERT(!MAC_TX_IS_PHYSICALLY_ACTIVE()); /* realignment during actual transmit corrupts timing */
        MOV	DPTR,#macTxActive
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.7
        JNC	??macBackoffTimerRealign_0
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  382 
//  383   /*-------------------------------------------------------------------------------
//  384    *  Calculate the delta backoff difference between expected backoff count,
//  385    *  which is zero, and the backoff count of the received frame.
//  386    */
//  387 
//  388   /* since expected receive time is zero, the delta is simply the receive time */
//  389   backoffDelta = pMsg->mac.timestamp;
??macBackoffTimerRealign_0:
        MOV	A,R6
        ADD	A,#0x24
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
//  390 
//  391   /* if the frame was received more than halfway to the rollover count, use a negative delta value */
//  392   if (((uint32) backoffDelta) > (backoffTimerRollover / 2))
        MOV	DPTR,#??backoffTimerRollover
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,#0x1
        MOV	R0,#?V0 + 0
        LCALL	?UL_SHR
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?UL_GT
        JNC	??macBackoffTimerRealign_1
//  393   {
//  394     backoffDelta = backoffDelta - backoffTimerRollover;    /* result will be negative */
        MOV	DPTR,#??backoffTimerRollover
        MOV	R0,#?V0 + 4
        LCALL	?L_SUB_X
//  395   }
//  396 
//  397   /*-------------------------------------------------------------------------------
//  398    *  Calculate the number of timer ticks to delay that will align the internal
//  399    *  time base with the received frame.
//  400    */
//  401 
//  402   /* retrieve the timer count when frame was received */
//  403   timerDelayTicks = pMsg->mac.timestamp2;
??macBackoffTimerRealign_1:
        MOV	A,R6
        ADD	A,#0x28
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
//  404 
//  405   /*
//  406    *  Subtract the expected SFD time from the actual SFD time to find the needed
//  407    *  timer adjustment. If subtracting the offset would result in a negative value,
//  408    *  the tick delay must wrap around.
//  409    */
//  410   if (timerDelayTicks >= TIMER_TICKS_EXPECTED_AT_SFD)
        CLR	C
        MOV	A,R6
        SUBB	A,#0x66
        MOV	A,R7
        SUBB	A,#0x4
        MOV	A,R6
        JC	??macBackoffTimerRealign_2
//  411   {
//  412     /* since delay count is greater than or equal to offset, subtract it directly */
//  413     timerDelayTicks = timerDelayTicks - TIMER_TICKS_EXPECTED_AT_SFD;
        ADD	A,#-0x66
        MOV	R6,A
        MOV	A,R7
        ADDC	A,#-0x5
        MOV	R7,A
        SJMP	??macBackoffTimerRealign_3
//  414   }
//  415   else
//  416   {
//  417     /*
//  418      *  The expected time is greater that actualy time so it cannot be subtracted directly.
//  419      *  The tick count per backoff is added to wrap around within the backoff.
//  420      *  Since a wrap around did happen, the backoff delta is adjusted by one.
//  421      */
//  422     timerDelayTicks = timerDelayTicks - TIMER_TICKS_EXPECTED_AT_SFD + MAC_RADIO_TIMER_TICKS_PER_BACKOFF();
??macBackoffTimerRealign_2:
        ADD	A,#-0x66
        MOV	R6,A
        MOV	A,R7
        ADDC	A,#0x23
        MOV	R7,A
//  423     backoffDelta--;
        MOV	DPTR,#__Constant_ffffffff
        MOV	R0,#?V0 + 4
        LCALL	?L_ADD_X
//  424   }
//  425 
//  426   /*-------------------------------------------------------------------------------
//  427    *  Calculate the new backoff count.
//  428    */
//  429 
//  430   backoffCount = MAC_RADIO_BACKOFF_COUNT() - backoffDelta;
??macBackoffTimerRealign_3:
        ; Setup parameters for call to function macMcuOverflowCount
        MOV	DPTR,#(macMcuOverflowCount & 0xffff)
        MOV	A,#((macMcuOverflowCount >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	?V0 + 2,R4
        MOV	?V0 + 3,R5
        MOV	R0,#?V0 + 0
        MOV	R1,#?V0 + 4
        LCALL	?L_SUB
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
//  431 
//  432   if (backoffCount >= ((int32) backoffTimerRollover))
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        MOV	DPTR,#??backoffTimerRollover
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        MOV	R0,#?V0 + 0
        LCALL	?SL_GT_X
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        JC	??macBackoffTimerRealign_4
//  433   {
//  434     backoffCount -= backoffTimerRollover;
        MOV	R0,#?V0 + 0
        LCALL	?L_SUB_FROM_X
        SJMP	??macBackoffTimerRealign_5
//  435   }
//  436   else if (backoffCount < 0)
??macBackoffTimerRealign_4:
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        MOV	DPTR,#__Constant_0
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        MOV	R0,#?V0 + 0
        LCALL	?SL_GT_X
        JNC	??macBackoffTimerRealign_5
//  437   {
//  438     backoffCount += backoffTimerRollover;
        MOV	DPTR,#??backoffTimerRollover
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R0,#?V0 + 0
        LCALL	?L_ADD_TO_X
//  439   }
//  440 
//  441   MAC_RADIO_TIMER_FORCE_DELAY(timerDelayTicks);
??macBackoffTimerRealign_5:
        MOV	A,R6
        MOV	0xa6,A
        MOV	A,R7
        MOV	0xa7,A
//  442   MAC_RADIO_BACKOFF_SET_COUNT(backoffCount);
        ; Setup parameters for call to function macMcuOverflowSetCount
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(macMcuOverflowSetCount & 0xffff)
        MOV	A,#((macMcuOverflowSetCount >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  443 
//  444   return(backoffDelta);
        MOV	R2,?V0 + 4
        MOV	R3,?V0 + 5
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        LJMP	??Subroutine2_1 & 0xFFFF
        CFI EndBlock cfiBlock15
//  445 }
//  446 
//  447 
//  448 /**************************************************************************************************
//  449  * @fn          macBackoffTimerCompareIsr
//  450  *
//  451  * @brief       Interrupt service routine that fires when the backoff count is equal
//  452  *              to the trigger count.
//  453  *
//  454  * @param       none
//  455  *
//  456  * @return      none
//  457  **************************************************************************************************
//  458  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  459 void macBackoffTimerCompareIsr(void)
macBackoffTimerCompareIsr:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function macBackoffTimerCompareIsr
//  460 {
        FUNCALL macBackoffTimerCompareIsr, macMcuOverflowSetCount
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL macBackoffTimerCompareIsr, macBackoffTimerRolloverCallback
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL macBackoffTimerCompareIsr, macMcuOverflowSetCompare
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL macBackoffTimerCompareIsr, macBackoffTimerTriggerCallback
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL macBackoffTimerCompareIsr, macMcuOverflowSetCompare
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  461   uint8 oldState;
//  462   halIntState_t  s;
//  463 
//  464   HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R6,A
        CLR	0xa8.7
//  465   oldState = compareState;
        MOV	DPTR,#??compareState
        MOVX	A,@DPTR
        MOV	R7,A
//  466 
//  467   /* if compare is a rollover, set count to zero */
//  468   if (oldState & COMPARE_STATE_ROLLOVER_BV)
        MOV	C,0xE0 /* A   */.0
        JNC	??macBackoffTimerCompareIsr_0
//  469   {
//  470     MAC_RADIO_BACKOFF_SET_COUNT(0);
        ; Setup parameters for call to function macMcuOverflowSetCount
        MOV	DPTR,#__Constant_0
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(macMcuOverflowSetCount & 0xffff)
        MOV	A,#((macMcuOverflowSetCount >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  471     macBackoffTimerRolloverCallback();
        ; Setup parameters for call to function macBackoffTimerRolloverCallback
        MOV	DPTR,#(macBackoffTimerRolloverCallback & 0xffff)
        MOV	A,#((macBackoffTimerRolloverCallback >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  472   }
//  473 
//  474   /* if compare is a trigger, reset for rollover and run the trigger callback */
//  475   if (oldState & COMPARE_STATE_TRIGGER_BV)
??macBackoffTimerCompareIsr_0:
        MOV	A,R7
        MOV	C,0xE0 /* A   */.1
        JNC	??macBackoffTimerCompareIsr_1
//  476   {
//  477     compareState = COMPARE_STATE_ROLLOVER;
        LCALL	?Subroutine0 & 0xFFFF
//  478     MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerRollover);
??CrossCallReturnLabel_1:
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(macMcuOverflowSetCompare & 0xffff)
        MOV	A,#((macMcuOverflowSetCompare >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  479     HAL_EXIT_CRITICAL_SECTION(s);
        MOV	A,R6
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
//  480     macBackoffTimerTriggerCallback();
        ; Setup parameters for call to function macBackoffTimerTriggerCallback
        MOV	DPTR,#(macBackoffTimerTriggerCallback & 0xffff)
        MOV	A,#((macBackoffTimerTriggerCallback >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??macBackoffTimerCompareIsr_2
//  481   }
//  482   else if (oldState == COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER)
??macBackoffTimerCompareIsr_1:
        MOV	A,#0x5
        XRL	A,R7
        JNZ	??macBackoffTimerCompareIsr_3
//  483   {
//  484     compareState = COMPARE_STATE_TRIGGER;
        MOV	A,#0x2
        MOV	DPTR,#??compareState
        MOVX	@DPTR,A
//  485     MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerTrigger);
        ; Setup parameters for call to function macMcuOverflowSetCompare
        MOV	DPTR,#??backoffTimerTrigger
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(macMcuOverflowSetCompare & 0xffff)
        MOV	A,#((macMcuOverflowSetCompare >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  486     HAL_EXIT_CRITICAL_SECTION(s);
//  487   }
//  488   else
//  489   {
//  490     HAL_EXIT_CRITICAL_SECTION(s);
??macBackoffTimerCompareIsr_3:
        MOV	A,R6
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
//  491   }
//  492 }
??macBackoffTimerCompareIsr_2:
        LJMP	?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock16

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_0:
        DS 4
        REQUIRE `?<Initializer for __Constant_0>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_0>`:
        DD 0

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_c0000:
        DS 4
        REQUIRE `?<Initializer for __Constant_c0000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_c0000>`:
        DD 786432

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_ffffffff:
        DS 4
        REQUIRE `?<Initializer for __Constant_ffffffff>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_ffffffff>`:
        DD 4294967295

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        END
//  493 
//  494 
//  495 /**************************************************************************************************
//  496 */
// 
// 1 027 bytes in segment BANKED_CODE
//     4 bytes in segment SFR_AN
//    12 bytes in segment XDATA_I
//    12 bytes in segment XDATA_ID
//     9 bytes in segment XDATA_Z
// 
// 1 027 bytes of CODE  memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  4 bytes shared)
//     9 bytes of XDATA memory (+ 12 bytes shared)
//
//Errors: none
//Warnings: none
