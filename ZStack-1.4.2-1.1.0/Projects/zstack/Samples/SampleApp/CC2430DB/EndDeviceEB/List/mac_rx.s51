//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:52:42 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\mac\low_level\srf03\mac_rx.c                  /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wE /
//                          ndev.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS  /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          MT_TASK -D ZG_ENDDEVICE -lC                      /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\ -lA           /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\EndDeviceEB\Obj\ -e          /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\mac\low_level\srf03\mac_rx.c"                /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\mac_rx.s51     /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME mac_rx

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?G_EQ
        EXTERN ?L_MOV_TO_X
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??rxAddrIsr,021603H
        LOCFRAME XSTACK, 29, STACK
        FUNCTION ??rxDiscardFrame,021203H
        ARGFRAME XSTACK, 14, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION ??rxDiscardIsr,021603H
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION ??rxDone,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ??rxFcsIsr,021603H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION ??rxHaltCleanupFinalStep,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ??rxPayloadIsr,021603H
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ??rxPostRxUpdates,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 14, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ??rxPrepPayload,0203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 29, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ??rxStartIsr,021603H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBWEAK RFIF
        PUBWEAK RFST
        PUBWEAK _A_IEN0
        PUBLIC macRxAckTxDoneCallback
        FUNCTION macRxAckTxDoneCallback,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxActive
        PUBLIC macRxFilter
        PUBLIC macRxHaltCleanup
        FUNCTION macRxHaltCleanup,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxInit
        FUNCTION macRxInit,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxOutgoingAckFlag
        PUBLIC macRxPromiscuousMode
        FUNCTION macRxPromiscuousMode,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxRadioPowerUpInit
        FUNCTION macRxRadioPowerUpInit,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxThresholdIsr
        FUNCTION macRxThresholdIsr,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxTxReset
        FUNCTION macRxTxReset,021203H
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN macMcuOrRFIM
        FUNCTION macMcuOrRFIM,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 14, STACK
        EXTERN macRxHardDisable
        FUNCTION macRxHardDisable,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN macMcuAndRFIM
        FUNCTION macMcuAndRFIM,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 14, STACK
        EXTERN macDataRxMemFree
        FUNCTION macDataRxMemFree,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 9, STACK
        EXTERN halAssertHandler
        FUNCTION halAssertHandler,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 29, STACK
        EXTERN macCspForceTxDoneIfPending
        FUNCTION macCspForceTxDoneIfPending,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN macMemReadRxFifo
        FUNCTION macMemReadRxFifo,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 29, STACK
        EXTERN macTxAckReceivedCallback
        FUNCTION macTxAckReceivedCallback,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN macTxAckNotReceivedCallback
        FUNCTION macTxAckNotReceivedCallback,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN macDataRxMemAlloc
        FUNCTION macDataRxMemAlloc,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN macRxCheckPendingCallback
        FUNCTION macRxCheckPendingCallback,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN macMcuWriteRFIF
        FUNCTION macMcuWriteRFIF,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN macMcuOverflowCapture
        FUNCTION macMcuOverflowCapture,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN macMcuTimerCapture
        FUNCTION macMcuTimerCapture,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME XSTACK, 29, STACK
        EXTERN macRxOffRequest
        FUNCTION macRxOffRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 9, STACK
        EXTERN macRadioComputeLQI
        FUNCTION macRadioComputeLQI,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN macRxCompleteCallback
        FUNCTION macRxCompleteCallback,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN macRadioUpdateTxPower
        FUNCTION macRadioUpdateTxPower,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN macTxStartQueuedFrame
        FUNCTION macTxStartQueuedFrame,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN macRxOnFlag
        EXTERN macTxActive

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mac\low_level\srf03\mac_rx.c
//    1 /**************************************************************************************************
//    2     Filename:
//    3     Revised:        $Date: 2007-03-28 18:21:19 -0700 (Wed, 28 Mar 2007) $
//    4     Revision:       $Revision: 13888 $
//    5 
//    6     Description:
//    7 
//    8     Describe the purpose and contents of the file.
//    9 
//   10     Copyright (c) 2006 by Texas Instruments, Inc.
//   11     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   12     derivative works, modify, distribute, perform, display or sell this
//   13     software and/or its documentation for any purpose is prohibited
//   14     without the express written consent of Texas Instruments, Inc.
//   15 **************************************************************************************************/
//   16 
//   17 
//   18 
//   19 /* ------------------------------------------------------------------------------------------------
//   20  *                                          Includes
//   21  * ------------------------------------------------------------------------------------------------
//   22  */
//   23 
//   24 /* hal */
//   25 #include "hal_defs.h"
//   26 #include "hal_types.h"
//   27 
//   28 /* high-level */
//   29 #include "mac_high_level.h"
//   30 #include "mac_spec.h"
//   31 
//   32 /* exported low-level */
//   33 #include "mac_low_level.h"
//   34 
//   35 /* low-level specific */
//   36 #include "mac_rx.h"
//   37 #include "mac_tx.h"
//   38 #include "mac_rx_onoff.h"
//   39 #include "mac_radio.h"
//   40 
//   41 /* target specific */
//   42 #include "mac_radio_defs.h"

        ASEGN SFR_AN:DATA:NOROOT,0e1H
// unsigned char volatile __sfr RFST
RFST:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e9H
// unsigned char volatile __sfr RFIF
RFIF:
        DS 1
//   43 
//   44 /* debug */
//   45 #include "mac_assert.h"
//   46 
//   47 
//   48 /* ------------------------------------------------------------------------------------------------
//   49  *                                            Defines
//   50  * ------------------------------------------------------------------------------------------------
//   51  */
//   52 #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
//   53 
//   54 /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
//   55 #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \ 
//   56                                    MAC_FCF_FIELD_LEN      +  \ 
//   57                                    MAC_SEQ_NUM_FIELD_LEN  +  \ 
//   58                                    MAC_FCS_FIELD_LEN)
//   59 
//   60 /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
//   61 #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
//   62 
//   63 /* addressing mode reserved value */
//   64 #define ADDR_MODE_RESERVERED  1
//   65 
//   66 /* length of command frame identifier */
//   67 #define CMD_FRAME_ID_LEN      1
//   68 
//   69 /* packet size mask is equal to the maximum value */
//   70 #define PHY_PACKET_SIZE_MASK  0x7F
//   71 
//   72 /* value for promiscuous off, must not conflict with other mode variants from separate include files */
//   73 #define PROMISCUOUS_MODE_OFF  0x00
//   74 
//   75 /* bit of proprietary FCS format that indicates if the CRC is OK */
//   76 #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
//   77 
//   78 /* dummy length value for unused entry in lookup table */
//   79 #define DUMMY_LEN   0xBE
//   80 
//   81 /* value for rxThresholdIntState */
//   82 #define RX_THRESHOLD_INT_STATE_INACTIVE   0
//   83 #define RX_THRESHOLD_INT_STATE_ACTIVE     1
//   84 #define RX_THRESHOLD_INT_STATE_RESET      2
//   85 
//   86 
//   87 /* ------------------------------------------------------------------------------------------------
//   88  *                                             Macros
//   89  * ------------------------------------------------------------------------------------------------
//   90  */
//   91 #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
//   92 #define MEM_FREE(x)    macDataRxMemFree((uint8 *)x)
//   93 
//   94 /*
//   95  *  Macro for encoding frame control information into internal flags format.
//   96  *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
//   97  *  format *or* the specification changes, this macro will need to be modified.
//   98  */
//   99 #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
//  100 
//  101 /*
//  102  *  The radio replaces the actual FCS with different information.  This proprietary FCS is
//  103  *  the same length as the original and includes:
//  104  *    1) the RSSI value
//  105  *    2) the average correlation value (used for LQI)
//  106  *    3) a CRC passed bit
//  107  *
//  108  *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
//  109  */
//  110 #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
//  111 #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
//  112 #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
//  113 
//  114 
//  115 /* ------------------------------------------------------------------------------------------------
//  116  *                                       Global Variables
//  117  * ------------------------------------------------------------------------------------------------
//  118  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  119 uint8 macRxActive;
macRxActive:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  120 uint8 macRxFilter;
macRxFilter:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  121 uint8 macRxOutgoingAckFlag;
macRxOutgoingAckFlag:
        DS 1
//  122 
//  123 
//  124 /* ------------------------------------------------------------------------------------------------
//  125  *                                       Local Constants
//  126  * ------------------------------------------------------------------------------------------------
//  127  */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//  128 static const uint8 CODE macRxAddrLen[] =
??macRxAddrLen:
        DB 0, 190, 4, 10
//  129 {
//  130   0,                                                /* no address */
//  131   DUMMY_LEN,                                        /* reserved */
//  132   MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
//  133   MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
//  134 };
//  135 
//  136 
//  137 /* ------------------------------------------------------------------------------------------------
//  138  *                                       Local Prototypes
//  139  * ------------------------------------------------------------------------------------------------
//  140  */
//  141 static void rxHaltCleanupFinalStep(void);
//  142 
//  143 static void rxStartIsr(void);
//  144 static void rxAddrIsr(void);
//  145 static void rxPayloadIsr(void);
//  146 static void rxDiscardIsr(void);
//  147 static void rxFcsIsr(void);
//  148 
//  149 static void rxPrepPayload(void);
//  150 static void rxDiscardFrame(void);
//  151 static void rxDone(void);
//  152 static void rxPostRxUpdates(void);
//  153 
//  154 
//  155 /* ------------------------------------------------------------------------------------------------
//  156  *                                         Local Variables
//  157  * ------------------------------------------------------------------------------------------------
//  158  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  159 static void    (* pFuncRxState)(void);
??pFuncRxState:
        DS 3

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  160 static macRx_t  * pRxBuf;
??pRxBuf:
        DS 2
//  161 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  162 static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
??rxBuf:
        DS 4

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  163 static uint8  rxUnreadLen;
??rxUnreadLen:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  164 static uint8  rxNextLen;
??rxNextLen:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  165 static uint8  rxPayloadLen;
??rxPayloadLen:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  166 static uint8  rxFilter;
??rxFilter:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  167 static uint8  rxPromiscuousMode;
??rxPromiscuousMode:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  168 static uint8  rxIsrActiveFlag;
??rxIsrActiveFlag:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  169 static uint8  rxResetFlag;
??rxResetFlag:
        DS 1
//  170 
//  171 
//  172 /**************************************************************************************************
//  173  * @fn          macRxInit
//  174  *
//  175  * @brief       Initialize receive variable states.
//  176  *
//  177  * @param       none
//  178  *
//  179  * @return      none
//  180  **************************************************************************************************
//  181  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  182 void macRxInit(void)
macRxInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function macRxInit
//  183 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  184   macRxFilter          = RX_FILTER_OFF;
        CLR	A
        MOV	DPTR,#macRxFilter
        MOVX	@DPTR,A
//  185   rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
        MOV	DPTR,#??rxPromiscuousMode
        MOVX	@DPTR,A
//  186   pRxBuf               = NULL; /* required for macRxReset() to function correctly */
        MOV	DPTR,#??pRxBuf
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  187   macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
        MOV	DPTR,#macRxActive
        LCALL	?Subroutine1 & 0xFFFF
//  188   pFuncRxState         = &rxStartIsr;
//  189   macRxOutgoingAckFlag = 0;
??CrossCallReturnLabel_2:
        CLR	A
        MOV	DPTR,#macRxOutgoingAckFlag
        MOVX	@DPTR,A
//  190   rxIsrActiveFlag      = 0;
        MOV	DPTR,#??rxIsrActiveFlag
        MOVX	@DPTR,A
//  191   rxResetFlag          = 0;
        MOV	DPTR,#??rxResetFlag
        MOVX	@DPTR,A
//  192 }
        LJMP	??Subroutine20_0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  193 
//  194 
//  195 /**************************************************************************************************
//  196  * @fn          macRxRadioPowerUpInit
//  197  *
//  198  * @brief       Initialization for after radio first powers up.
//  199  *
//  200  * @param       none
//  201  *
//  202  * @return      none
//  203  **************************************************************************************************
//  204  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  205 void macRxRadioPowerUpInit(void)
macRxRadioPowerUpInit:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function macRxRadioPowerUpInit
//  206 {
        FUNCALL macRxRadioPowerUpInit, macMcuOrRFIM
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  207   /* set threshold at initial value */
//  208   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        MOV	A,#0x5
        MOV	DPTR,#-0x20b1
        MOVX	@DPTR,A
//  209 
//  210   /* clear any accidental threshold interrupt that happened as part of power up sequence */
//  211   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
        MOV	0xe9,#-0x21
//  212 
//  213   /* enable threshold interrupts */
//  214   MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
        ; Setup parameters for call to function macMcuOrRFIM
        MOV	R1,#0x20
        MOV	DPTR,#(macMcuOrRFIM & 0xffff)
        MOV	A,#((macMcuOrRFIM >> 16) & 0xff)
        LJMP	?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock1
//  215 }
//  216 
//  217 
//  218 /**************************************************************************************************
//  219  * @fn          macRxTxReset
//  220  *
//  221  * @brief       Reset the receive state.
//  222  *
//  223  * @param       none
//  224  *
//  225  * @return      none
//  226  **************************************************************************************************
//  227  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  228 void macRxTxReset(void)
macRxTxReset:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function macRxTxReset
//  229 {
        FUNCALL macRxTxReset, macRxHardDisable
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL macRxTxReset, macRxPromiscuousMode
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  230   /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
//  231   macRxHardDisable();
        ; Setup parameters for call to function macRxHardDisable
        MOV	DPTR,#(macRxHardDisable & 0xffff)
        MOV	A,#((macRxHardDisable >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  232 
//  233   /*
//  234    *   Note : transmit does not require any reset logic
//  235    *          beyond what macRxHardDisable() provides.
//  236    */
//  237 
//  238   /* restore deault filter mode to off */
//  239   macRxFilter = RX_FILTER_OFF;
        CLR	A
        MOV	DPTR,#macRxFilter
        MOVX	@DPTR,A
//  240 
//  241   /* return promiscuous mode to default off state */
//  242   macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
        ; Setup parameters for call to function macRxPromiscuousMode
        MOV	R1,A
        MOV	DPTR,#(macRxPromiscuousMode & 0xffff)
        MOV	A,#((macRxPromiscuousMode >> 16) & 0xff)
        SJMP	?Subroutine20
        CFI EndBlock cfiBlock2
//  243 }
//  244 
//  245 
//  246 /**************************************************************************************************
//  247  * @fn          macRxHaltCleanup
//  248  *
//  249  * @brief       Cleanup up the receive logic after receiver is forced off.
//  250  *
//  251  * @param       none
//  252  *
//  253  * @return      none
//  254  **************************************************************************************************
//  255  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  256 void macRxHaltCleanup(void)
macRxHaltCleanup:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function macRxHaltCleanup
//  257 {
        FUNCALL macRxHaltCleanup, ??rxHaltCleanupFinalStep
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  258   rxResetFlag = 1;
        MOV	A,#0x1
        MOV	DPTR,#??rxResetFlag
        MOVX	@DPTR,A
//  259   if (!rxIsrActiveFlag)
        MOV	DPTR,#??rxIsrActiveFlag
        MOVX	A,@DPTR
        JNZ	??macRxHaltCleanup_0
//  260   {
//  261     rxHaltCleanupFinalStep();
        ; Setup parameters for call to function rxHaltCleanupFinalStep
        MOV	DPTR,#(??rxHaltCleanupFinalStep & 0xffff)
        MOV	A,#((??rxHaltCleanupFinalStep >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  262     rxResetFlag = 0;
        CLR	A
        MOV	DPTR,#??rxResetFlag
        MOVX	@DPTR,A
//  263   }
//  264 }
??macRxHaltCleanup_0:
        SJMP	??Subroutine20_0
        CFI EndBlock cfiBlock3
//  265 
//  266 
//  267 /*=================================================================================================
//  268  * @fn          rxHaltCleanupFinalStep
//  269  *
//  270  * @brief       Required cleanup if receiver is halted in the middle of a receive.
//  271  *
//  272  * @param       none
//  273  *
//  274  * @return      none
//  275  *=================================================================================================
//  276  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  277 static void rxHaltCleanupFinalStep(void)
??rxHaltCleanupFinalStep:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ??rxHaltCleanupFinalStep
//  278 {
        FUNCALL ??rxHaltCleanupFinalStep, macMcuAndRFIM
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ??rxHaltCleanupFinalStep, macDataRxMemFree
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ??rxHaltCleanupFinalStep, ??rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  279   /* cancel any upcoming ACK transmit complete callback */
//  280   MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
        ; Setup parameters for call to function macMcuAndRFIM
        MOV	R1,#-0x11
        MOV	DPTR,#(macMcuAndRFIM & 0xffff)
        MOV	A,#((macMcuAndRFIM >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  281 
//  282   /* set start of frame threshold */
//  283   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        MOV	A,#0x5
        MOV	DPTR,#-0x20b1
        MOVX	@DPTR,A
//  284 
//  285   /* flush the receive FIFO */
//  286   MAC_RADIO_FLUSH_RX_FIFO();
        MOV	0xe1,#-0x1a
        MOV	0xe1,#-0x1a
//  287 
//  288   /* clear any receive interrupt that happened to squeak through */
//  289   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
        MOV	0xe9,#-0x21
//  290 
//  291   /* if data buffer has been allocated, free it */
//  292   if (pRxBuf != NULL)
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        JNZ	??rxHaltCleanupFinalStep_1
        INC	DPTR
        MOVX	A,@DPTR
??rxHaltCleanupFinalStep_1:
        JZ	??rxHaltCleanupFinalStep_2
//  293   {
//  294     MEM_FREE((uint8 *) pRxBuf);
        ; Setup parameters for call to function macDataRxMemFree
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#(macDataRxMemFree & 0xffff)
        MOV	A,#((macDataRxMemFree >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  295   }
//  296   pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
??rxHaltCleanupFinalStep_2:
        MOV	DPTR,#??pRxBuf
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        LCALL	?Subroutine1 & 0xFFFF
//  297 
//  298   pFuncRxState = &rxStartIsr;
//  299 
//  300   /* if receive was active, perform the post receive updates */
//  301   if (macRxActive || macRxOutgoingAckFlag)
??CrossCallReturnLabel_3:
        MOV	DPTR,#macRxActive
        MOVX	A,@DPTR
        JNZ	??rxHaltCleanupFinalStep_3
        MOV	DPTR,#macRxOutgoingAckFlag
        MOVX	A,@DPTR
        JZ	??rxHaltCleanupFinalStep_4
//  302   {
//  303     macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxHaltCleanupFinalStep_3:
        CLR	A
        MOV	DPTR,#macRxActive
        MOVX	@DPTR,A
//  304     macRxOutgoingAckFlag = 0;
        MOV	DPTR,#macRxOutgoingAckFlag
        MOVX	@DPTR,A
//  305     
//  306     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        MOV	DPTR,#(??rxPostRxUpdates & 0xffff)
        MOV	A,#((??rxPostRxUpdates >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  307   }
//  308 }
??rxHaltCleanupFinalStep_4:
        SJMP	??Subroutine20_0
        CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL	?BCALL               ; Banked call to: DPTR()
??Subroutine20_0:
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond7) CFA_SP SP+-5
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_36:
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_3
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_0
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_1
        CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond11) CFA_SP SP+-5
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_2
        CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond12) CFA_SP SP+-5
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOVX	@DPTR,A
        MOV	DPTR,#??pFuncRxState
        MOV	A,#(??rxStartIsr & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((??rxStartIsr >> 8) & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((??rxStartIsr >> 16) & 0xff)
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
//  309 
//  310 
//  311 /**************************************************************************************************
//  312  * @fn          macRxThresholdIsr
//  313  *
//  314  * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
//  315  *              It implements a state machine for receiving a packet.
//  316  *
//  317  * @param       none
//  318  *
//  319  * @return      none
//  320  **************************************************************************************************
//  321  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  322 void macRxThresholdIsr(void)
macRxThresholdIsr:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function macRxThresholdIsr
//  323 {
        FUNCALL macRxThresholdIsr, ??rxHaltCleanupFinalStep
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  324   /* if currently reseting, do not execute receive ISR logic */
//  325   if (rxResetFlag)
        MOV	DPTR,#??rxResetFlag
        MOVX	A,@DPTR
        JNZ	??macRxThresholdIsr_0
//  326   {
//  327     return;
//  328   }
//  329   
//  330   /*
//  331    *  Call the function that handles the current receive state.
//  332    *  A flag is set for the duration of the call to indicate
//  333    *  the ISR is executing.  This is necessary for the reset
//  334    *  logic so it does not perform a reset in the middle of
//  335    *  executing the ISR.
//  336    */
//  337   rxIsrActiveFlag = 1;
        MOV	A,#0x1
        MOV	DPTR,#??rxIsrActiveFlag
        MOVX	@DPTR,A
//  338   (*pFuncRxState)();
        ; Setup parameters for indirect call
        MOV	DPTR,#??pFuncRxState
        MOVX	A,@DPTR
        MOV	R1,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPL,R1
        MOV	DPH,R2
        LCALL	?BCALL               ; Banked call to: DPTR()
//  339   rxIsrActiveFlag = 0;
        CLR	A
        MOV	DPTR,#??rxIsrActiveFlag
        MOVX	@DPTR,A
//  340   
//  341   /* if a reset occurred during the ISR, peform cleanup here */
//  342   if (rxResetFlag)
        MOV	DPTR,#??rxResetFlag
        MOVX	A,@DPTR
        JZ	??macRxThresholdIsr_0
//  343   {
//  344     rxHaltCleanupFinalStep();
        ; Setup parameters for call to function rxHaltCleanupFinalStep
        MOV	DPTR,#(??rxHaltCleanupFinalStep & 0xffff)
        MOV	A,#((??rxHaltCleanupFinalStep >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  345     rxResetFlag = 0;
        CLR	A
        MOV	DPTR,#??rxResetFlag
        MOVX	@DPTR,A
??macRxThresholdIsr_0:
        SJMP	??Subroutine20_0
        CFI EndBlock cfiBlock14
//  346   }
//  347 }
//  348 
//  349 
//  350 /*=================================================================================================
//  351  * @fn          rxStartIsr
//  352  *
//  353  * @brief       First ISR state for receiving a packet - compute packet length, allocate
//  354  *              buffer, initialize buffer.  Acknowledgements are handled immediately without
//  355  *              allocating a buffer.
//  356  *
//  357  * @param       none
//  358  *
//  359  * @return      none
//  360  *=================================================================================================
//  361  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  362 static void rxStartIsr(void)
??rxStartIsr:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function ??rxStartIsr
//  363 {
        FUNCALL ??rxStartIsr, halAssertHandler
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, ??rxPostRxUpdates
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macCspForceTxDoneIfPending
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macMcuAndRFIM
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macMemReadRxFifo
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macMemReadRxFifo
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macTxAckReceivedCallback
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macTxAckNotReceivedCallback
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, ??rxDone
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macTxAckNotReceivedCallback
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macDataRxMemAlloc
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macRxCheckPendingCallback
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, ??rxDiscardFrame
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macMcuWriteRFIF
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macMcuOrRFIM
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macMcuOverflowCapture
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, macMcuTimerCapture
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??rxStartIsr, ??rxPrepPayload
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  364   uint8  addrLen;
//  365   uint8  ackWithPending;
//  366   uint8  dstAddrMode;
//  367   uint8  srcAddrMode;
//  368 
//  369   MAC_ASSERT(!macRxActive); /* receive on top of receive */
        MOV	DPTR,#macRxActive
        MOVX	A,@DPTR
        JZ	??rxStartIsr_1
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  370 
//  371   /* indicate rx is active */
//  372   macRxActive = MAC_RX_ACTIVE_STARTED;
??rxStartIsr_1:
        MOV	A,#-0x7f
        MOV	DPTR,#macRxActive
        MOVX	@DPTR,A
//  373 
//  374   /*
//  375    *  For bullet proof functionality, need to see if the receiver was just turned off.
//  376    *  The logic to request turning off the receiver, disables interrupts and then checks
//  377    *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
//  378    *
//  379    *  There is a small hole though.  It's possible to attempt turning off the receiver
//  380    *  in the window from when the receive interrupt fires and the point where macRxActive
//  381    *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
//  382    *  macRxActive has been set.  If the receiver is off at this point, there is nothing
//  383    *  in the RX fifo and the receive is simply aborted.
//  384    *
//  385    *  Also, there are some considerations in case a hard disable just happened.  Usually,
//  386    *  the receiver will just be off at this point after a hard disable.  The check described
//  387    *  above will account for this case too.  However, if a hard disable were immediately
//  388    *  followed by an enable, the receiver would be on.  To catch this case, the receive
//  389    *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
//  390    */
//  391   if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
        MOV	DPTR,#macRxOnFlag
        MOVX	A,@DPTR
        JZ	??rxStartIsr_2
        MOV	DPTR,#-0x209e
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.3
        JC	??rxStartIsr_3
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.2
        JC	??rxStartIsr_3
//  392   {
//  393     /* reset active flag */
//  394     macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxStartIsr_2:
        CLR	A
        MOV	DPTR,#macRxActive
        MOVX	@DPTR,A
//  395 
//  396     /*
//  397      *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
//  398      *  the tiny, tiny window when macRxActive was not zero.
//  399      */
//  400     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        MOV	DPTR,#(??rxPostRxUpdates & 0xffff)
        MOV	A,#((??rxPostRxUpdates >> 16) & 0xff)
??rxStartIsr_4:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  401 
//  402     /* return immediately from here */
//  403     return;
        LJMP	??rxStartIsr_5 & 0xFFFF
//  404   }
//  405       
//  406   /*
//  407    *  If interrupts are held off for too long it's possible the previous "transmit done"
//  408    *  callback is pending.  If this is the case, it needs to be completed before
//  409    *  continuing with the receive logic.
//  410    */
//  411   MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
??rxStartIsr_3:
        ; Setup parameters for call to function macCspForceTxDoneIfPending
        MOV	DPTR,#(macCspForceTxDoneIfPending & 0xffff)
        MOV	A,#((macCspForceTxDoneIfPending >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  412   
//  413   /*
//  414    *  It's possible receive logic is still waiting for confirmation of an ACK that went out
//  415    *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
//  416    *  That callback execute receive cleanup logic that will run at the completion
//  417    *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
//  418    */
//  419   MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
        ; Setup parameters for call to function macMcuAndRFIM
        MOV	R1,#-0x11
        MOV	DPTR,#(macMcuAndRFIM & 0xffff)
        MOV	A,#((macMcuAndRFIM >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  420   macRxOutgoingAckFlag = 0;
        CLR	A
        MOV	DPTR,#macRxOutgoingAckFlag
        MOVX	@DPTR,A
//  421 
//  422   /*
//  423    *  Make a module-local copy of macRxFilter.  This prevents the selected
//  424    *  filter from changing in the middle of a receive.
//  425    */
//  426   rxFilter = macRxFilter;
        MOV	DPTR,#macRxFilter
        MOVX	A,@DPTR
        MOV	DPTR,#??rxFilter
        MOVX	@DPTR,A
//  427 
//  428   /*-------------------------------------------------------------------------------
//  429    *  Read initial frame information from FIFO.
//  430    *
//  431    *   This code is not triggered until the following are in the RX FIFO:
//  432    *     frame length          - one byte containing length of MAC frame (excludes this field)
//  433    *     frame control field   - two bytes defining frame type, addressing fields, control flags
//  434    *     sequence number       - one byte unique sequence identifier
//  435    *     additional two bytes  - these bytes are available in case the received frame is an ACK,
//  436    *                             if so, the frame can be verified and responded to immediately,
//  437    *                             if not an ACK, these bytes will be processed normally
//  438    */
//  439 
//  440   /* read frame length, frame control field, and sequence number from FIFO */
//  441   MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV	R1,#0x4
        MOV	R2,#(??rxBuf & 0xff)
        MOV	R3,#((??rxBuf >> 8) & 0xff)
        MOV	DPTR,#(macMemReadRxFifo & 0xffff)
        MOV	A,#((macMemReadRxFifo >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  442 
//  443   /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
//  444   rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
        MOV	DPTR,#??rxBuf
        MOVX	A,@DPTR
        ANL	A,#0x7f
        ADD	A,#-0x3
        MOV	DPTR,#??rxUnreadLen
        MOVX	@DPTR,A
//  445 
//  446   /*
//  447    *  Workaround for chip bug.  The receive buffer can sometimes be corrupted by hardware.
//  448    *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
//  449    *  the entire receive buffer is flushed.
//  450    *
//  451    *  In the case that this workaround is not needed, an assert is used to make sure the
//  452    *  receive length field is not corrupted.  This is important because a corrupted receive
//  453    *  length field is utterly fatal and, if not caught here, extremely hard to track down.
//  454    */
//  455 #ifdef MAC_RADIO_RXBUFF_CHIP_BUG
//  456   if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
//  457       (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
        CLR	C
        SUBB	A,#0x7d
        JNC	??rxStartIsr_6
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        ANL	A,#0x7
        CLR	C
        SUBB	A,#0x4
        JC	??rxStartIsr_7
//  458   {
//  459     MAC_RADIO_FLUSH_RX_FIFO();
??rxStartIsr_6:
        MOV	0xe1,#-0x1a
        MOV	0xe1,#-0x1a
        SJMP	??rxStartIsr_8
//  460     rxDone();
//  461     return;
//  462   }
//  463 #else
//  464   /* radio supplied a corrupted receive buffer length */
//  465   MAC_ASSERT(rxUnreadLen <= (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN));
//  466 #endif
//  467   
//  468 
//  469 
//  470   /*-------------------------------------------------------------------------------
//  471    *  Process ACKs.
//  472    *
//  473    *  If this frame is an ACK, process it immediately and exit from here.
//  474    *  If this frame is not an ACK and transmit is listening for an ACK, let
//  475    *  the transmit logic know an non-ACK was received so transmit can complete.
//  476    *
//  477    *  In promiscuous mode ACKs are treated like any other frame.
//  478    */
//  479   if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
??rxStartIsr_7:
        MOVX	A,@DPTR
        ANL	A,#0x7
        XRL	A,#0x2
        JNZ	??rxStartIsr_9
        MOV	DPTR,#??rxPromiscuousMode
        MOVX	A,@DPTR
        JNZ	??rxStartIsr_9
//  480   {
//  481     uint8 fcsBuf[MAC_FCF_FIELD_LEN];
//  482     /*
//  483      *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
//  484      *  these two bytes will be the FCS.
//  485      */
//  486 
//  487     /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
//  488     MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV	R1,#0x2
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(macMemReadRxFifo & 0xffff)
        MOV	A,#((macMemReadRxFifo >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  489     
//  490     /* see if transmit is listening for an ACK */
//  491     if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
        MOV	DPTR,#macTxActive
        MOVX	A,@DPTR
        XRL	A,#0x85
        JNZ	??rxStartIsr_8
//  492     {
//  493       /*
//  494        *  An ACK was received so transmit logic needs to know.  If the FCS failed,
//  495        *  the transmit logic still needs to know.  In that case, treat the frame
//  496        *  as a non-ACK to complete the active transmit.
//  497        */
//  498       if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.7
        JNC	??rxStartIsr_10
//  499       {
//  500         /* call transmit logic to indicate ACK was received */
//  501         macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
        ; Setup parameters for call to function macTxAckReceivedCallback
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        ANL	A,#0x10
        MOV	R2,A
        MOV	DPTR,#(??rxBuf + 3)
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(macTxAckReceivedCallback & 0xffff)
        MOV	A,#((macTxAckReceivedCallback >> 16) & 0xff)
        SJMP	??rxStartIsr_11
//  502       }
//  503       else
//  504       {
//  505         macTxAckNotReceivedCallback();
??rxStartIsr_10:
        ; Setup parameters for call to function macTxAckNotReceivedCallback
        MOV	DPTR,#(macTxAckNotReceivedCallback & 0xffff)
        MOV	A,#((macTxAckNotReceivedCallback >> 16) & 0xff)
??rxStartIsr_11:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  506       }
//  507     }
//  508       
//  509     /* receive is done, exit from here */
//  510     rxDone();
??rxStartIsr_8:
        ; Setup parameters for call to function rxDone
        MOV	DPTR,#(??rxDone & 0xffff)
        MOV	A,#((??rxDone >> 16) & 0xff)
        LJMP	??rxStartIsr_4 & 0xFFFF
//  511     return;
//  512   }
//  513   else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
??rxStartIsr_9:
        MOV	DPTR,#macTxActive
        MOVX	A,@DPTR
        XRL	A,#0x85
        JNZ	??rxStartIsr_12
//  514   {
//  515     macTxAckNotReceivedCallback();
        ; Setup parameters for call to function macTxAckNotReceivedCallback
        MOV	DPTR,#(macTxAckNotReceivedCallback & 0xffff)
        MOV	A,#((macTxAckNotReceivedCallback >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  516   }
//  517 
//  518   /*-------------------------------------------------------------------------------
//  519    *  Apply filtering.
//  520    *
//  521    *  For efficiency, see if filtering is even 'on' before processing.  Also test
//  522    *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
//  523    *  do not apply filtering.
//  524    */
//  525   if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
??rxStartIsr_12:
        MOV	DPTR,#??rxFilter
        MOVX	A,@DPTR
        JZ	??rxStartIsr_13
        MOV	DPTR,#??rxPromiscuousMode
        MOVX	A,@DPTR
        JNZ	??rxStartIsr_13
//  526   {
//  527     if (/* filter all frames */
//  528          (rxFilter == RX_FILTER_ALL) ||
//  529 
//  530          /* filter non-beacon frames */
//  531          ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
//  532           (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
//  533 
//  534          /* filter non-command frames */
//  535          ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
//  536           ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
        MOV	DPTR,#??rxFilter
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	$+5
        LJMP	??rxStartIsr_14 & 0xFFFF
        MOVX	A,@DPTR
        XRL	A,#0x2
        JZ	$+5
        LJMP	??rxStartIsr_15 & 0xFFFF
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        ANL	A,#0x7
        JZ	$+5
        LJMP	??rxStartIsr_14 & 0xFFFF
//  537     {
//  538       /* discard rest of frame */
//  539       rxDiscardFrame();
//  540       return;
//  541     }
//  542   }
//  543 
//  544   /*-------------------------------------------------------------------------------
//  545    *  Compute length of addressing fields.  Compute payload length.
//  546    */
//  547 
//  548   /* decode addressing modes */
//  549   dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
??rxStartIsr_13:
        MOV	DPTR,#(??rxBuf + 2)
        MOVX	A,@DPTR
        MOV	R2,A
        RRC	A
        RRC	A
        ANL	A,#0x3f
        ANL	A,#0x3
        MOV	?V0 + 0,A
//  550   srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
        MOV	A,R2
        SWAP	A
        RRC	A
        RRC	A
        ANL	A,#0x3
        MOV	?V0 + 1,A
//  551 
//  552   /*
//  553    *  Workaround for chip bug.  The receive buffer can sometimes be corrupted by hardware.
//  554    *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
//  555    *  the entire receive buffer is flushed.
//  556    */
//  557 #ifdef MAC_RADIO_RXBUFF_CHIP_BUG
//  558   if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
        MOV	A,#0x1
        XRL	A,?V0 + 1
        JNZ	$+5
        LJMP	??rxStartIsr_6 & 0xFFFF
        MOV	A,#0x1
        XRL	A,?V0 + 0
        JNZ	$+5
        LJMP	??rxStartIsr_6 & 0xFFFF
//  559   {
//  560     MAC_RADIO_FLUSH_RX_FIFO();
//  561     rxDone();
//  562     return;
//  563   }
//  564 #endif
//  565 
//  566   /*
//  567    *  Compute the addressing field length.  A lookup table based on addressing
//  568    *  mode is used for efficiency.  If the source address is present and the
//  569    *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
//  570    *  length is adjusted to match the smaller length.
//  571    */
//  572   addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
        MOV	?V0 + 2,?V0 + 1
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_34:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	?V0 + 2,?V0 + 0
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV	R2,A
        POP	A
        CFI CFA_SP SP+0
        ADD	A,R2
        MOV	R6,A
//  573   if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
        MOV	A,?V0 + 1
        JZ	??rxStartIsr_16
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.6
        JNC	??rxStartIsr_16
//  574   {
//  575     addrLen -= MAC_PAN_ID_FIELD_LEN;
        DEC	R6
        DEC	R6
//  576   }
//  577 
//  578   /*
//  579    *  If there are not enough unread bytes to include the computed address
//  580    *  plus FCS field, the frame is corrupted and must be discarded.
//  581    */
//  582   if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
??rxStartIsr_16:
        MOV	DPTR,#??rxUnreadLen
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	?V0 + 2,R6
        MOV	A,#0x2
        ADD	A,?V0 + 2
        MOV	R0,A
        CLR	A
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R2
        SUBB	A,R0
        CLR	A
        SUBB	A,R1
        CLR	C
        XRL	A,PSW
        RLC	A
        JC	??rxStartIsr_14
//  583   {
//  584     /* discard frame and exit */
//  585     rxDiscardFrame();
//  586     return;
//  587   }
//  588 
//  589   /* payload length is equal to unread bytes minus address length, minus the FCS */
//  590   rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R6
        ADD	A,#-0x2
        MOV	DPTR,#??rxPayloadLen
        MOVX	@DPTR,A
//  591 
//  592   /*-------------------------------------------------------------------------------
//  593    *  Allocate memory for the incoming frame.
//  594    */
//  595   pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + rxPayloadLen);
        ; Setup parameters for call to function macDataRxMemAlloc
        MOV	R0,A
        MOV	A,#0x32
        ADD	A,R0
        MOV	R2,A
        CLR	A
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(macDataRxMemAlloc & 0xffff)
        MOV	A,#((macDataRxMemAlloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#??pRxBuf
        LCALL	?Subroutine4 & 0xFFFF
//  596   if (pRxBuf == NULL)
??CrossCallReturnLabel_44:
        JNZ	??rxStartIsr_17
        INC	DPTR
        MOVX	A,@DPTR
??rxStartIsr_17:
        JZ	??rxStartIsr_14
//  597   {
//  598     /* buffer allocation failed, discard the frame and exit*/
//  599     rxDiscardFrame();
//  600     return;
//  601   }
//  602 
//  603   /*-------------------------------------------------------------------------------
//  604    *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
//  605    */
//  606   ackWithPending = 0;
        MOV	R7,#0x0
//  607   if (!rxPromiscuousMode)
        MOV	DPTR,#??rxPromiscuousMode
        MOVX	A,@DPTR
        JNZ	??rxStartIsr_18
//  608   {
//  609     macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        ANL	A,#0x20
        MOV	DPTR,#macRxOutgoingAckFlag
        MOVX	@DPTR,A
//  610   }
//  611 
//  612   /*-------------------------------------------------------------------------------
//  613    *  Process any ACK request.
//  614    */
//  615   if (macRxOutgoingAckFlag)
??rxStartIsr_18:
        MOV	DPTR,#macRxOutgoingAckFlag
        MOVX	A,@DPTR
        JZ	??rxStartIsr_19
//  616   {
//  617     halIntState_t  s;
//  618 
//  619     /*
//  620      *  This critical section ensures that the callback ISR is initiated within time
//  621      *  to guarantee correlation with the strobe.
//  622      */
//  623     HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	?V0 + 2,A
        CLR	0xa8.7
//  624 
//  625     if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND) && macRxCheckPendingCallback())
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        ANL	A,#0x7
        XRL	A,#0x3
        JNZ	??rxStartIsr_20
        ; Setup parameters for call to function macRxCheckPendingCallback
        MOV	DPTR,#(macRxCheckPendingCallback & 0xffff)
        MOV	A,#((macRxCheckPendingCallback >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JZ	??rxStartIsr_20
//  626     {
//  627       MAC_RADIO_TX_ACK_PEND();
        MOV	DPTR,#-0x20ac
        MOVX	A,@DPTR
        SETB	0xE0 /* A   */.1
        MOVX	@DPTR,A
//  628       ackWithPending = MAC_RX_FLAG_ACK_PENDING;
        MOV	R7,#0x4
        SJMP	??rxStartIsr_21
//  629     }
??rxStartIsr_15:
        MOVX	A,@DPTR
        XRL	A,#0x3
        JZ	$+5
        LJMP	??rxStartIsr_13 & 0xFFFF
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        ANL	A,#0x7
        XRL	A,#0x3
        JNZ	$+5
        LJMP	??rxStartIsr_13 & 0xFFFF
??rxStartIsr_14:
        ; Setup parameters for call to function rxDiscardFrame
        MOV	DPTR,#(??rxDiscardFrame & 0xffff)
        MOV	A,#((??rxDiscardFrame >> 16) & 0xff)
        LJMP	??rxStartIsr_4 & 0xFFFF
//  630     else
//  631     {
//  632       /* send ACK */
//  633       MAC_RADIO_TX_ACK();
??rxStartIsr_20:
        MOV	DPTR,#-0x20ac
        MOVX	A,@DPTR
        CLR	0xE0 /* A   */.1
        MOVX	@DPTR,A
//  634     }
//  635 
//  636     /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
//  637     MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
??rxStartIsr_21:
        ; Setup parameters for call to function macMcuWriteRFIF
        MOV	R1,#-0x11
        MOV	DPTR,#(macMcuWriteRFIF & 0xffff)
        MOV	A,#((macMcuWriteRFIF >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        ; Setup parameters for call to function macMcuOrRFIM
        MOV	R1,#0x10
        MOV	DPTR,#(macMcuOrRFIM & 0xffff)
        MOV	A,#((macMcuOrRFIM >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  638     HAL_EXIT_CRITICAL_SECTION(s);
        MOV	A,?V0 + 2
        MOV	C,0xE0 /* A   */.0
        MOV	0xa8.7,C
//  639   }
//  640 
//  641  /*-------------------------------------------------------------------------------
//  642   *  Populate the receive buffer going up to high-level.
//  643   */
//  644 
//  645   /* configure the payload buffer */
//  646   pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
??rxStartIsr_19:
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        MOVX	@DPTR,A
//  647   pRxBuf->msdu.len = rxPayloadLen;
        MOV	DPTR,#??rxPayloadLen
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_22:
        INC	DPTR
        INC	DPTR
        POP	A
        CFI CFA_SP SP+0
        LCALL	??Subroutine4_0 & 0xFFFF
//  648 
//  649   /* set internal values */
//  650   pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
??CrossCallReturnLabel_45:
        ADD	A,#0x1a
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV	A,?V0 + 1
        LCALL	??Subroutine4_0 & 0xFFFF
//  651   pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
??CrossCallReturnLabel_46:
        ADD	A,#0x23
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_24:
        MOVX	@DPTR,A
//  652   pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
        ; Setup parameters for call to function macMcuOverflowCapture
        MOV	DPTR,#(macMcuOverflowCapture & 0xffff)
        MOV	A,#((macMcuOverflowCapture >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	?V0 + 2,R4
        MOV	?V0 + 3,R5
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        ADD	A,#0x24
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
//  653   pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
        ; Setup parameters for call to function macMcuTimerCapture
        MOV	DPTR,#(macMcuTimerCapture & 0xffff)
        MOV	A,#((macMcuTimerCapture >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        ADD	A,#0x28
        LCALL	??Subroutine5_0 & 0xFFFF
//  654   pRxBuf->internal.frameType    = MAC_FRAME_TYPE(&rxBuf[1]);
??CrossCallReturnLabel_8:
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        ANL	A,#0x7
        PUSH	A
        CFI CFA_SP SP+-1
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_20:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  655   pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
        MOV	DPTR,#(??rxBuf + 3)
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        ADD	A,#0x31
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_28:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  656   pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        ANL	A,#0x78
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	DPTR,#(??rxBuf + 2)
        MOVX	A,@DPTR
        SWAP	A
        ANL	A,#0xf
        ANL	A,#0x3
        MOV	R2,A
        POP	A
        CFI CFA_SP SP+0
        ORL	A,R2
        ORL	A,R7
        PUSH	A
        CFI CFA_SP SP+-1
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_21:
        INC	DPTR
        POP	A
        CFI CFA_SP SP+0
        LCALL	??Subroutine4_0 & 0xFFFF
//  657   pRxBuf->sec.securityLevel     = MAC_SEC_LEVEL_NONE;
??CrossCallReturnLabel_47:
        ADD	A,#0xf
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_29:
        CLR	A
        MOVX	@DPTR,A
//  658 
//  659   /*-------------------------------------------------------------------------------
//  660    *  If the processing the addressing fields does not require more bytes from
//  661    *  the FIFO go directly address processing function.  Otherwise, configure
//  662    *  interrupt to jump there once bytes are received.
//  663    */
//  664   if (addrLen == 0)
        MOV	A,R6
        JNZ	??rxStartIsr_22
//  665   {
//  666     /* no addressing fields to read, prepare for payload interrupts */
//  667     pFuncRxState = &rxPayloadIsr;
        LCALL	?Subroutine2 & 0xFFFF
//  668     rxPrepPayload();
??CrossCallReturnLabel_4:
        LJMP	??rxStartIsr_4 & 0xFFFF
//  669   }
//  670   else
//  671   {
//  672     /* need to read and process addressing fields, prepare for address interrupt */
//  673     rxNextLen = addrLen;
??rxStartIsr_22:
        MOV	DPTR,#??rxNextLen
        MOVX	@DPTR,A
//  674     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        DEC	A
        MOV	DPTR,#-0x20b1
        MOVX	@DPTR,A
//  675     pFuncRxState = &rxAddrIsr;
        MOV	DPTR,#??pFuncRxState
        MOV	A,#(??rxAddrIsr & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((??rxAddrIsr >> 8) & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((??rxAddrIsr >> 16) & 0xff)
        MOVX	@DPTR,A
??rxStartIsr_5:
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
//  676   }
//  677 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV	A,?V0 + 2
        ADD	A,#(??macRxAddrLen & 0xff)
        MOV	DPL,A
        CLR	A
        ADDC	A,#((??macRxAddrLen >> 8) & 0xff)
        MOV	DPH,A
        CLR	A
        MOVC	A,@A+DPTR
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+-1
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_39:
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_21
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+-1
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_20
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+-1
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_19
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker26 Using cfiCommon1
        CFI (cfiPicker26) NoFunction
        CFI (cfiPicker26) Picker
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_43:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        ADD	A,#0x2a
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 29)
??Subroutine5_0:
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond33) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond33) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond33) CFA_SP SP+-5
??Subroutine5_1:
        MOV	DPL,R0
        MOV	DPH,R1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
//  678 
//  679 
//  680 /*=================================================================================================
//  681  * @fn          rxAddrIsr
//  682  *
//  683  * @brief       Receive ISR state for decoding address.  Reads and stores the address information
//  684  *              from the incoming packet.
//  685  *
//  686  * @param       none
//  687  *
//  688  * @return      none
//  689  *=================================================================================================
//  690  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  691 static void rxAddrIsr(void)
??rxAddrIsr:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function ??rxAddrIsr
//  692 {
        FUNCALL ??rxAddrIsr, halAssertHandler
        LOCFRAME XSTACK, 29, STACK
        ARGFRAME XSTACK, 29, STACK
        FUNCALL ??rxAddrIsr, macMemReadRxFifo
        LOCFRAME XSTACK, 29, STACK
        ARGFRAME XSTACK, 29, STACK
        FUNCALL ??rxAddrIsr, sAddrExtCpy
        LOCFRAME XSTACK, 29, STACK
        ARGFRAME XSTACK, 29, STACK
        FUNCALL ??rxAddrIsr, sAddrExtCpy
        LOCFRAME XSTACK, 29, STACK
        ARGFRAME XSTACK, 29, STACK
        FUNCALL ??rxAddrIsr, ??rxPrepPayload
        LOCFRAME XSTACK, 29, STACK
        ARGFRAME XSTACK, 29, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 20
        MOV	A,#-0x14
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
//  693   uint8 buf[MAX_ADDR_FIELDS_LEN];
//  694   uint8 dstAddrMode;
//  695   uint8 srcAddrMode;
//  696   uint8  * p;
//  697 
//  698   MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
        MOV	DPTR,#??rxNextLen
        MOVX	A,@DPTR
        JNZ	??rxAddrIsr_1
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  699 
//  700   /*  read out address fields into local buffer in one shot */
//  701   MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
??rxAddrIsr_1:
        ; Setup parameters for call to function macMemReadRxFifo
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  702 
//  703   /* set pointer to buffer with addressing fields */
//  704   p = buf;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
//  705 
//  706   /* destination address */
//  707   dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
        MOV	DPTR,#(??rxBuf + 2)
        MOVX	A,@DPTR
        RRC	A
        RRC	A
        ANL	A,#0x3f
        ANL	A,#0x3
        MOV	R6,A
//  708   if (dstAddrMode != SADDR_MODE_NONE)
        JZ	??rxAddrIsr_2
//  709   {
//  710     pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        ADD	A,#0x2c
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R3,A
        CLR	A
        ADD	A,R4
        MOV	R2,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPL,R0
        MOV	DPH,R1
        LCALL	?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL	?Subroutine5 & 0xFFFF
//  711     p += MAC_PAN_ID_FIELD_LEN;
//  712     if (dstAddrMode == SADDR_MODE_EXT)
??CrossCallReturnLabel_9:
        MOV	A,#0x3
        XRL	A,R6
        JNZ	??rxAddrIsr_3
//  713     {
//  714       sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
        ; Setup parameters for call to function sAddrExtCpy
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        ADD	A,#0x1b
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  715       p += MAC_EXT_ADDR_FIELD_LEN;
        MOV	A,#0xa
        SJMP	??rxAddrIsr_4
//  716     }
//  717     else
//  718     {
//  719       pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
??rxAddrIsr_3:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_52:
        ADD	A,#0x1b
        LCALL	??Subroutine5_0 & 0xFFFF
//  720       p += MAC_SHORT_ADDR_FIELD_LEN;
??CrossCallReturnLabel_10:
        MOV	A,#0x4
??rxAddrIsr_4:
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
//  721     }
//  722   }
//  723 
//  724   /* sources address */
//  725   srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
??rxAddrIsr_2:
        MOV	DPTR,#(??rxBuf + 2)
        MOVX	A,@DPTR
        SWAP	A
        RRC	A
        RRC	A
        ANL	A,#0x3
        MOV	R6,A
//  726   if (srcAddrMode != SADDR_MODE_NONE)
        JZ	??CrossCallReturnLabel_12
//  727   {
//  728     if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV	C,0xE0 /* A   */.6
        JC	??rxAddrIsr_5
//  729     {
//  730       pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL	?Subroutine5 & 0xFFFF
//  731       p += MAC_PAN_ID_FIELD_LEN;
??CrossCallReturnLabel_11:
        MOV	A,R4
        ADD	A,#0x2
        INC	R4
        INC	R4
        MOV	A,R5
        ADDC	A,#0x0
        MOV	R5,A
//  732     }
//  733     if (srcAddrMode == SADDR_MODE_EXT)
??rxAddrIsr_5:
        MOV	A,#0x3
        XRL	A,R6
        JNZ	??rxAddrIsr_6
//  734     {
//  735       sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
        ; Setup parameters for call to function sAddrExtCpy
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        ADD	A,#0x12
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??CrossCallReturnLabel_12
//  736     }
//  737     else
//  738     {
//  739       pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
??rxAddrIsr_6:
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_54:
        ADD	A,#0x12
        LCALL	??Subroutine5_0 & 0xFFFF
//  740     }
//  741   }
//  742 
//  743   /*-------------------------------------------------------------------------------
//  744    *  Prepare for payload interrupts.
//  745    */
//  746   pFuncRxState = &rxPayloadIsr;
??CrossCallReturnLabel_12:
        LCALL	?Subroutine2 & 0xFFFF
//  747   rxPrepPayload();
??CrossCallReturnLabel_5:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  748 }
        MOV	A,#0x14
        LCALL	?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock34
        REQUIRE ?Subroutine22
        ; // Fall through to label ?Subroutine22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(sAddrExtCpy & 0xffff)
        MOV	A,#((sAddrExtCpy >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 29)
??Subroutine6_0:
        MOVX	A,@DPTR
        MOV	R1,A
        CLR	A
        ADD	A,R2
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R3,A
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41
        CFI EndBlock cfiCond42
        REQUIRE ?Subroutine21
        ; // Fall through to label ?Subroutine21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV	DPTR,#??pFuncRxState
        MOV	A,#(??rxPayloadIsr & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((??rxPayloadIsr >> 8) & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((??rxPayloadIsr >> 16) & 0xff)
        MOVX	@DPTR,A
        ; Setup parameters for call to function rxPrepPayload
        ; Setup parameters for call to function rxPrepPayload
        MOV	DPTR,#(??rxPrepPayload & 0xffff)
        MOV	A,#((??rxPrepPayload >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
//  749 
//  750 
//  751 /*=================================================================================================
//  752  * @fn          rxPrepPayload
//  753  *
//  754  * @brief       Common code to prepare for the payload ISR.
//  755  *
//  756  * @param       none
//  757  *
//  758  * @return      none
//  759  *=================================================================================================
//  760  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  761 static void rxPrepPayload(void)
??rxPrepPayload:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function ??rxPrepPayload
//  762 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  763   if (rxPayloadLen == 0)
        MOV	DPTR,#??rxPayloadLen
        MOVX	A,@DPTR
        JNZ	??rxPrepPayload_1
//  764   {
//  765     MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
        MOV	A,#0x1
        MOV	DPTR,#-0x20b1
        MOVX	@DPTR,A
//  766     pFuncRxState = &rxFcsIsr;
        MOV	DPTR,#??pFuncRxState
        MOV	A,#(??rxFcsIsr & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((??rxFcsIsr >> 8) & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((??rxFcsIsr >> 16) & 0xff)
        SJMP	??rxPrepPayload_2
//  767   }
//  768   else
//  769   {
//  770     rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
??rxPrepPayload_1:
        CLR	C
        SUBB	A,#0x10
        JNC	??rxPrepPayload_3
        MOVX	A,@DPTR
        SJMP	??rxPrepPayload_4
??rxPrepPayload_3:
        MOV	A,#0x10
??rxPrepPayload_4:
        MOV	DPTR,#??rxNextLen
        MOVX	@DPTR,A
//  771     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        MOVX	A,@DPTR
        DEC	A
        MOV	DPTR,#-0x20b1
??rxPrepPayload_2:
        MOVX	@DPTR,A
//  772   }
//  773 }
        LJMP	??Subroutine20_0 & 0xFFFF
        CFI EndBlock cfiBlock58
//  774 
//  775 
//  776 /*=================================================================================================
//  777  * @fn          rxPayloadIsr
//  778  *
//  779  * @brief       Receive ISR state for reading out and storing the packet payload.
//  780  *
//  781  * @param       none
//  782  *
//  783  * @return      none
//  784  *=================================================================================================
//  785  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  786 static void rxPayloadIsr(void)
??rxPayloadIsr:
        CFI Block cfiBlock59 Using cfiCommon0
        CFI Function ??rxPayloadIsr
//  787 {
        FUNCALL ??rxPayloadIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ??rxPayloadIsr, ??rxPrepPayload
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  788   MAC_RADIO_READ_RX_FIFO(pRxBuf->msdu.p, rxNextLen);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV	DPTR,#??rxNextLen
        MOVX	A,@DPTR
        MOV	R1,A
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_23:
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#(macMemReadRxFifo & 0xffff)
        MOV	A,#((macMemReadRxFifo >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  789   pRxBuf->msdu.p += rxNextLen;
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        ADD	A,#0x2
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        MOV	DPTR,#??rxNextLen
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        ADD	A,R2
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R3,A
        LCALL	??Subroutine5_1 & 0xFFFF
//  790   rxPayloadLen -= rxNextLen;
??CrossCallReturnLabel_13:
        MOV	DPTR,#??rxNextLen
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPTR,#??rxPayloadLen
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R2
        MOVX	@DPTR,A
//  791 
//  792   rxPrepPayload();
        ; Setup parameters for call to function rxPrepPayload
        MOV	DPTR,#(??rxPrepPayload & 0xffff)
        MOV	A,#((??rxPrepPayload >> 16) & 0xff)
        LJMP	?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock59
//  793 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+-1
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_42:
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond63 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_22
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+-1
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_19
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_18
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_23
        CFI (cfiCond67) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond67) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond67) CFA_SP SP+-5
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_21
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+-1
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69
//  794 
//  795 
//  796 /*=================================================================================================
//  797  * @fn          rxFcsIsr
//  798  *
//  799  * @brief       Receive ISR state for handling the FCS.
//  800  *
//  801  * @param       none
//  802  *
//  803  * @return      none
//  804  *=================================================================================================
//  805  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  806 static void rxFcsIsr(void)
??rxFcsIsr:
        CFI Block cfiBlock70 Using cfiCommon0
        CFI Function ??rxFcsIsr
//  807 {
        FUNCALL ??rxFcsIsr, macMemReadRxFifo
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ??rxFcsIsr, macRxOffRequest
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ??rxFcsIsr, macRadioComputeLQI
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ??rxFcsIsr, macRxCompleteCallback
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ??rxFcsIsr, macMcuAndRFIM
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ??rxFcsIsr, macDataRxMemFree
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ??rxFcsIsr, ??rxDone
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  808   uint8 crcOK;
//  809 
//  810   /* read FCS, rxBuf is now available storage */
//  811   MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
        ; Setup parameters for call to function macMemReadRxFifo
        MOV	R1,#0x2
        MOV	R2,#(??rxBuf & 0xff)
        MOV	R3,#((??rxBuf >> 8) & 0xff)
        MOV	DPTR,#(macMemReadRxFifo & 0xffff)
        MOV	A,#((macMemReadRxFifo >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  812 
//  813   /*
//  814    *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
//  815    *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
//  816    *    1) the RSSI value
//  817    *    2) the average correlation value (used for LQI)
//  818    *    3) a CRC passed bit
//  819    */
//  820 
//  821   /* save the "CRC-is-OK" status */
//  822   crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        ANL	A,#0x80
        MOV	R6,A
//  823 
//  824   /*
//  825    *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
//  826    *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
//  827    *  a special variant of promiscuous mode is active.
//  828    */
//  829   if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
        JNZ	??rxFcsIsr_1
        MOV	DPTR,#??rxPromiscuousMode
        MOVX	A,@DPTR
        XRL	A,#0x2
        JNZ	??rxFcsIsr_2
//  830   {
//  831     int8 rssiDbm;
//  832     uint8 corr;
//  833 
//  834     /*
//  835      *  As power saving optimization, set state variable to indicate physical receive
//  836      *  has completed and then request turning of the receiver.  This means the receiver
//  837      *  can be off (if other conditions permit) during execution of the callback function.
//  838      *
//  839      *  The receiver will be requested to turn off once again at the end of the receive
//  840      *  logic.  There is no harm in doing this.
//  841      */
//  842     macRxActive = MAC_RX_ACTIVE_DONE;
??rxFcsIsr_1:
        MOV	A,#0x2
        MOV	DPTR,#macRxActive
        MOVX	@DPTR,A
//  843     macRxOffRequest();
        ; Setup parameters for call to function macRxOffRequest
        MOV	DPTR,#(macRxOffRequest & 0xffff)
        MOV	A,#((macRxOffRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  844     
//  845     /* decode RSSI and correlation values */
//  846     rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
        MOV	DPTR,#??rxBuf
        MOVX	A,@DPTR
        ADD	A,#-0x2d
        MOV	R7,A
//  847     corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
        MOV	DPTR,#(??rxBuf + 1)
        MOVX	A,@DPTR
        ANL	A,#0x7f
        MOV	?V0 + 0,A
//  848     
//  849     /* record parameters that get passed up to high-level */
//  850     pRxBuf->internal.flags |= crcOK;
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_19:
        ORL	A,R6
        MOVX	@DPTR,A
//  851     pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
        ; Setup parameters for call to function macRadioComputeLQI
        MOV	R2,?V0 + 0
        MOV	A,R7
        MOV	R1,A
        MOV	DPTR,#(macRadioComputeLQI & 0xffff)
        MOV	A,#((macRadioComputeLQI >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        ADD	A,#0x2e
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_30:
        POP	A
        CFI CFA_SP SP+0
        LCALL	??Subroutine4_0 & 0xFFFF
//  852     pRxBuf->mac.rssi = rssiDbm;
??CrossCallReturnLabel_48:
        ADD	A,#0x30
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV	A,R7
        LCALL	??Subroutine4_0 & 0xFFFF
//  853     pRxBuf->mac.correlation = corr;
??CrossCallReturnLabel_49:
        ADD	A,#0x2f
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL	??Subroutine4_0 & 0xFFFF
//  854 
//  855     /* set the MSDU pointer to point at start of data */
//  856     pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
??CrossCallReturnLabel_50:
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL	?Subroutine3 & 0xFFFF
//  857     
//  858     /* finally... execute callback function */
//  859     macRxCompleteCallback(pRxBuf);
??CrossCallReturnLabel_6:
        MOV	DPTR,#(macRxCompleteCallback & 0xffff)
        MOV	A,#((macRxCompleteCallback >> 16) & 0xff)
        SJMP	??rxFcsIsr_3
//  860     pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
//  861   }
//  862   else
//  863   {
//  864     /*
//  865      *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
//  866      *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
//  867      *  slightly more efficient to do so.)
//  868      */
//  869     MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
??rxFcsIsr_2:
        ; Setup parameters for call to function macMcuAndRFIM
        MOV	R1,#-0x11
        MOV	DPTR,#(macMcuAndRFIM & 0xffff)
        MOV	A,#((macMcuAndRFIM >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  870     macRxOutgoingAckFlag = 0;
        CLR	A
        MOV	DPTR,#macRxOutgoingAckFlag
        LCALL	?Subroutine3 & 0xFFFF
//  871 
//  872     /* the CRC failed so the packet must be discarded */
//  873     MEM_FREE((uint8 *) pRxBuf);
??CrossCallReturnLabel_7:
        MOV	DPTR,#(macDataRxMemFree & 0xffff)
        MOV	A,#((macDataRxMemFree >> 16) & 0xff)
??rxFcsIsr_3:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  874     pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
        MOV	DPTR,#??pRxBuf
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  875   }
//  876 
//  877   /* reset threshold level, reset receive state, and complete receive logic */
//  878   MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
        LCALL	?Subroutine0 & 0xFFFF
//  879   pFuncRxState = &rxStartIsr;
//  880   rxDone();
??CrossCallReturnLabel_0:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  881 }
        LJMP	?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+-1
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+-1
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_41:
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_31
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_28
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+-1
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_26
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_29
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_30
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+-1
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_24
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_27
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker86 Using cfiCommon1
        CFI (cfiPicker86) NoFunction
        CFI (cfiPicker86) Picker
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        MOV	DPL,R0
        MOV	DPH,R1
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiPicker86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV	A,?V0 + 0
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_38:
        INC	DPTR
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        ADD	A,#0x32
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R2
        INC	DPTR
        INC	DPTR
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 14)
??Subroutine4_0:
        MOVX	@DPTR,A
        LJMP	?Subroutine21 & 0xFFFF
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond105 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker107 Using cfiCommon1
        CFI (cfiPicker107) NoFunction
        CFI (cfiPicker107) Picker
        MOVX	@DPTR,A
        ; Setup parameters for call to function macRxCompleteCallback
        ; Setup parameters for call to function macDataRxMemFree
        MOV	DPTR,#??pRxBuf
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        RET
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiPicker107
//  882 
//  883 
//  884 /*=================================================================================================
//  885  * @fn          rxDone
//  886  *
//  887  * @brief       Common exit point for receive.
//  888  *
//  889  * @param       none
//  890  *
//  891  * @return      none
//  892  *=================================================================================================
//  893  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  894 static void rxDone(void)
??rxDone:
        CFI Block cfiBlock108 Using cfiCommon0
        CFI Function ??rxDone
//  895 {
        FUNCALL ??rxDone, ??rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  896   /* if the receive FIFO has overflowed, flush it here */
//  897   if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
        MOV	DPTR,#-0x209e
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.2
        JNC	??rxDone_1
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.3
        JC	??rxDone_1
//  898   {
//  899     MAC_RADIO_FLUSH_RX_FIFO();
        MOV	0xe1,#-0x1a
        MOV	0xe1,#-0x1a
//  900   }
//  901 
//  902   /* mark receive as inactive */
//  903   macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
??rxDone_1:
        CLR	A
        MOV	DPTR,#macRxActive
        MOVX	@DPTR,A
//  904 
//  905   /* if there is no outgoing ACK, run the post receive updates */
//  906   if (!macRxOutgoingAckFlag)
        MOV	DPTR,#macRxOutgoingAckFlag
        MOVX	A,@DPTR
        JNZ	??rxDone_2
//  907   {
//  908     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        MOV	DPTR,#(??rxPostRxUpdates & 0xffff)
        MOV	A,#((??rxPostRxUpdates >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  909   }
//  910 }
??rxDone_2:
        LJMP	??Subroutine20_0 & 0xFFFF
        CFI EndBlock cfiBlock108
//  911 
//  912 
//  913 /**************************************************************************************************
//  914  * @fn          macRxAckTxDoneCallback
//  915  *
//  916  * @brief       Function called when the outoing ACK has completed transmitting.
//  917  *
//  918  * @param       none
//  919  *
//  920  * @return      none
//  921  **************************************************************************************************
//  922  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  923 void macRxAckTxDoneCallback(void)
macRxAckTxDoneCallback:
        CFI Block cfiBlock109 Using cfiCommon0
        CFI Function macRxAckTxDoneCallback
//  924 {
        FUNCALL macRxAckTxDoneCallback, ??rxPostRxUpdates
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  925   macRxOutgoingAckFlag = 0;
        CLR	A
        MOV	DPTR,#macRxOutgoingAckFlag
        MOVX	@DPTR,A
//  926 
//  927   /*
//  928    *  With certain interrupt priorities and timing conditions, it is possible this callback
//  929    *  could be executed before the primary receive logic completes.  To prevent this, the
//  930    *  post updates are only executed if receive logic is no longer active.  In the case the
//  931    *  post updates are not executed here, they will execute when the main receive logic
//  932    *  completes.
//  933    */  
//  934   if (!macRxActive)
        MOV	DPTR,#macRxActive
        MOVX	A,@DPTR
        JNZ	??macRxAckTxDoneCallback_0
//  935   {
//  936     rxPostRxUpdates();
        ; Setup parameters for call to function rxPostRxUpdates
        MOV	DPTR,#(??rxPostRxUpdates & 0xffff)
        MOV	A,#((??rxPostRxUpdates >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  937   }
//  938 }
??macRxAckTxDoneCallback_0:
        LJMP	??Subroutine20_0 & 0xFFFF
        CFI EndBlock cfiBlock109
//  939 
//  940 
//  941 /*=================================================================================================
//  942  * @fn          rxPostRxUpdates
//  943  *
//  944  * @brief       Updates that need to be performed once receive is complete.
//  945  *
//  946  *              It is not fatal to execute this function if somehow receive is active.  Under
//  947  *              certain timing/interrupt conditions a new receive may have started before this
//  948  *              function executes.  This should happen very rarely (if it happens at all) and
//  949  *              would cause no problems.
//  950  *
//  951  * @param       none
//  952  *
//  953  * @return      none
//  954  *=================================================================================================
//  955  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  956 static void rxPostRxUpdates(void)
??rxPostRxUpdates:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI Function ??rxPostRxUpdates
//  957 {
        FUNCALL ??rxPostRxUpdates, macRxOffRequest
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ??rxPostRxUpdates, macRadioUpdateTxPower
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ??rxPostRxUpdates, macTxStartQueuedFrame
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  958   /* turn off receiver if permitted */
//  959   macRxOffRequest();
        ; Setup parameters for call to function macRxOffRequest
        MOV	DPTR,#(macRxOffRequest & 0xffff)
        MOV	A,#((macRxOffRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  960   
//  961   /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
//  962   macRadioUpdateTxPower();
        ; Setup parameters for call to function macRadioUpdateTxPower
        MOV	DPTR,#(macRadioUpdateTxPower & 0xffff)
        MOV	A,#((macRadioUpdateTxPower >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  963   
//  964   /* initiate and transmit that was queued during receive */
//  965   macTxStartQueuedFrame();
        ; Setup parameters for call to function macTxStartQueuedFrame
        MOV	DPTR,#(macTxStartQueuedFrame & 0xffff)
        MOV	A,#((macTxStartQueuedFrame >> 16) & 0xff)
        LJMP	?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock110
//  966 }
//  967 
//  968 
//  969 /*=================================================================================================
//  970  * @fn          rxDiscardFrame
//  971  *
//  972  * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
//  973  *
//  974  * @param       none
//  975  *
//  976  * @return      none
//  977  *=================================================================================================
//  978  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  979 static void rxDiscardFrame(void)
??rxDiscardFrame:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function ??rxDiscardFrame
//  980 {
        FUNCALL ??rxDiscardFrame, halAssertHandler
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ??rxDiscardFrame, ??rxDone
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  981   MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
        MOV	DPTR,#??pFuncRxState
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        MOV	R1,#(??rxStartIsr & 0xff)
        MOV	R2,#((??rxStartIsr >> 8) & 0xff)
        MOV	R3,#((??rxStartIsr >> 16) & 0xff)
        LCALL	?G_EQ
        JZ	??rxDiscardFrame_1
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  982 
//  983   if (rxUnreadLen == 0)
??rxDiscardFrame_1:
        MOV	DPTR,#??rxUnreadLen
        MOVX	A,@DPTR
        JNZ	??rxDiscardFrame_2
//  984   {
//  985     rxDone();
        ; Setup parameters for call to function rxDone
        MOV	DPTR,#(??rxDone & 0xffff)
        MOV	A,#((??rxDone >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??rxDiscardFrame_3
//  986   }
//  987   else
//  988   {
//  989     rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
??rxDiscardFrame_2:
        CLR	C
        SUBB	A,#0x10
        JNC	??rxDiscardFrame_4
        MOVX	A,@DPTR
        SJMP	??rxDiscardFrame_5
??rxDiscardFrame_4:
        MOV	A,#0x10
??rxDiscardFrame_5:
        MOV	DPTR,#??rxNextLen
        MOVX	@DPTR,A
//  990     MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        MOVX	A,@DPTR
        DEC	A
        MOV	DPTR,#-0x20b1
        MOVX	@DPTR,A
//  991     pFuncRxState = &rxDiscardIsr;
        MOV	DPTR,#??pFuncRxState
        MOV	A,#(??rxDiscardIsr & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((??rxDiscardIsr >> 8) & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((??rxDiscardIsr >> 16) & 0xff)
        MOVX	@DPTR,A
//  992   }
//  993 }
??rxDiscardFrame_3:
        LJMP	?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock111
//  994 
//  995 
//  996 /*=================================================================================================
//  997  * @fn          rxDiscardIsr
//  998  *
//  999  * @brief       Receive ISR state for discarding a packet.
// 1000  *
// 1001  * @param       none
// 1002  *
// 1003  * @return      none
// 1004  *=================================================================================================
// 1005  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1006 static void rxDiscardIsr(void)
??rxDiscardIsr:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI Function ??rxDiscardIsr
// 1007 {
        FUNCALL ??rxDiscardIsr, macMemReadRxFifo
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ??rxDiscardIsr, ??rxDone
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 16, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 16
        MOV	A,#-0x10
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 1008   uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
// 1009 
// 1010   MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
        ; Setup parameters for call to function macMemReadRxFifo
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1011   rxUnreadLen -= rxNextLen;
        MOV	DPTR,#??rxNextLen
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPTR,#??rxUnreadLen
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R2
        MOVX	@DPTR,A
// 1012 
// 1013   /* read out and discard bytes until all bytes of packet are disposed of */
// 1014   if (rxUnreadLen != 0)
        JZ	??rxDiscardIsr_1
// 1015   {
// 1016     if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
        CLR	C
        SUBB	A,#0x10
        JNC	??rxDiscardIsr_2
// 1017     {
// 1018       rxNextLen = rxUnreadLen;
        MOVX	A,@DPTR
        MOV	DPTR,#??rxNextLen
        MOVX	@DPTR,A
// 1019       MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
        DEC	A
        MOV	DPTR,#-0x20b1
        MOVX	@DPTR,A
        SJMP	??rxDiscardIsr_2
// 1020     }
// 1021   }
// 1022   else
// 1023   {
// 1024     /* reset threshold level, reset receive state, and complete receive logic */
// 1025     MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
??rxDiscardIsr_1:
        LCALL	?Subroutine0 & 0xFFFF
// 1026     pFuncRxState = &rxStartIsr;
// 1027     rxDone();
??CrossCallReturnLabel_1:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1028   }
// 1029 }
??rxDiscardIsr_2:
        MOV	A,#0x10
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        LJMP	??Subroutine20_0 & 0xFFFF
        CFI EndBlock cfiBlock112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond114) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond114) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond114) CFA_SP SP+-5
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOV	DPTR,#??rxNextLen
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(macMemReadRxFifo & 0xffff)
        MOV	A,#((macMemReadRxFifo >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        MOV	A,#0x5
        MOV	DPTR,#-0x20b1
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function rxDone
        ; Setup parameters for call to function rxDone
        MOV	DPTR,#(??rxDone & 0xffff)
        MOV	A,#((??rxDone >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118
// 1030 
// 1031 
// 1032 /**************************************************************************************************
// 1033  * @fn          macRxPromiscuousMode
// 1034  *
// 1035  * @brief       Sets promiscuous mode - enabling or disabling it.
// 1036  *
// 1037  * @param       none
// 1038  *
// 1039  * @return      none
// 1040  **************************************************************************************************
// 1041  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1042 void macRxPromiscuousMode(uint8 mode)
macRxPromiscuousMode:
        CFI Block cfiBlock119 Using cfiCommon0
        CFI Function macRxPromiscuousMode
// 1043 {
        FUNCALL macRxPromiscuousMode, halAssertHandler
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1044   rxPromiscuousMode = mode;
        MOV	A,R1
        MOV	DPTR,#??rxPromiscuousMode
        MOVX	@DPTR,A
// 1045 
// 1046   if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
        JNZ	??macRxPromiscuousMode_0
// 1047   {
// 1048       MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
        MOV	DPTR,#-0x20fe
        MOVX	A,@DPTR
        SETB	0xE0 /* A   */.3
        MOVX	@DPTR,A
        MOV	DPTR,#-0x20fd
        MOVX	A,@DPTR
        SETB	0xE0 /* A   */.4
        SJMP	??macRxPromiscuousMode_1
// 1049   }
// 1050   else
// 1051   {
// 1052     MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
// 1053                (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
??macRxPromiscuousMode_0:
        MOV	A,#0x2
        XRL	A,R1
        JZ	??macRxPromiscuousMode_2
        MOV	A,#0x1
        XRL	A,R1
        JZ	??macRxPromiscuousMode_2
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1054 
// 1055     MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
??macRxPromiscuousMode_2:
        MOV	DPTR,#-0x20fe
        MOVX	A,@DPTR
        CLR	0xE0 /* A   */.3
        MOVX	@DPTR,A
        MOV	DPTR,#-0x20fd
        MOVX	A,@DPTR
        CLR	0xE0 /* A   */.4
??macRxPromiscuousMode_1:
        MOVX	@DPTR,A
// 1056   }
// 1057 }
        LJMP	??Subroutine20_0 & 0xFFFF
        CFI EndBlock cfiBlock119

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        END
// 1058 
// 1059 
// 1060 
// 1061 /**************************************************************************************************
// 1062  *                                  Compile Time Integrity Checks
// 1063  **************************************************************************************************
// 1064  */
// 1065 
// 1066 /* check for changes to the spec that would affect the source code */
// 1067 #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \ 
// 1068      (MAC_FCF_FIELD_LEN           !=  2    )   ||  \ 
// 1069      (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \ 
// 1070      (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \ 
// 1071      (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \ 
// 1072      (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \ 
// 1073      (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \ 
// 1074      (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \ 
// 1075      (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
// 1076 #error "ERROR!  Change to the spec that requires modification of source code."
// 1077 #endif
// 1078 
// 1079 /* check for changes to the internal flags format */
// 1080 #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \ 
// 1081      (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \ 
// 1082      (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \ 
// 1083      (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \ 
// 1084      (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \ 
// 1085      (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
// 1086 #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
// 1087 #endif
// 1088 
// 1089 /* validate CRC OK bit optimization */
// 1090 #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
// 1091 #error "ERROR!  Optimization relies on these bits having the same position."
// 1092 #endif
// 1093 
// 1094 #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
// 1095 #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
// 1096 #endif
// 1097 
// 1098 #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
// 1099 #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
// 1100 #endif
// 1101 
// 1102 
// 1103 /**************************************************************************************************
// 1104 */
// 
// 2 119 bytes in segment BANKED_CODE
//     4 bytes in segment CODE_C
//     3 bytes in segment SFR_AN
//    19 bytes in segment XDATA_Z
// 
// 2 123 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 3 bytes shared)
//    19 bytes of XDATA memory
//
//Errors: none
//Warnings: none
