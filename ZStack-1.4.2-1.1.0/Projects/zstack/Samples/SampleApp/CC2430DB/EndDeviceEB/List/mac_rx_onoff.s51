//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:52:42 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\mac\low_level\srf03\mac_rx_onoff.c            /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wE /
//                          ndev.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS  /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          MT_TASK -D ZG_ENDDEVICE -lC                      /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\ -lA           /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\EndDeviceEB\Obj\ -e          /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\mac\low_level\srf03\mac_rx_onoff.c"          /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\mac_rx_onoff.s /
//                          51                                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME mac_rx_onoff

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN __INIT_XDATA_Z

        PUBWEAK RFIF
        PUBWEAK RFST
        PUBWEAK _A_IEN0
        PUBLIC macRxDisable
        FUNCTION macRxDisable,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC macRxEnable
        FUNCTION macRxEnable,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC macRxEnableFlags
        PUBLIC macRxHardDisable
        FUNCTION macRxHardDisable,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxOff
        FUNCTION macRxOff,0203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxOffRequest
        FUNCTION macRxOffRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC macRxOn
        FUNCTION macRxOn,0203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxOnFlag
        PUBLIC macRxOnOffInit
        FUNCTION macRxOnOffInit,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC macRxOnRequest
        FUNCTION macRxOnRequest,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC macRxSoftEnable
        FUNCTION macRxSoftEnable,021203H
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN halAssertHandler
        FUNCTION halAssertHandler,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN macRxHaltCleanup
        FUNCTION macRxHaltCleanup,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN macRxActive
        EXTERN macRxOutgoingAckFlag
        EXTERN macTxActive

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mac\low_level\srf03\mac_rx_onoff.c
//    1 /**************************************************************************************************
//    2     Filename:
//    3     Revised:        $Date: 2007-03-22 20:35:43 -0700 (Thu, 22 Mar 2007) $
//    4     Revision:       $Revision: 13832 $
//    5 
//    6     Description:
//    7 
//    8     Describe the purpose and contents of the file.
//    9 
//   10     Copyright (c) 2006 by Texas Instruments, Inc.
//   11     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   12     derivative works, modify, distribute, perform, display or sell this
//   13     software and/or its documentation for any purpose is prohibited
//   14     without the express written consent of Texas Instruments, Inc.
//   15 **************************************************************************************************/
//   16 
//   17 
//   18 /* ------------------------------------------------------------------------------------------------
//   19  *                                          Includes
//   20  * ------------------------------------------------------------------------------------------------
//   21  */
//   22 
//   23 /* hal */
//   24 #include "hal_defs.h"
//   25 #include "hal_types.h"
//   26 
//   27 /* exported low-level */
//   28 #include "mac_low_level.h"
//   29 
//   30 /* low-level specific */
//   31 #include "mac_rx_onoff.h"
//   32 #include "mac_rx.h"
//   33 #include "mac_tx.h"
//   34 
//   35 /* target specific */
//   36 #include "mac_radio_defs.h"

        ASEGN SFR_AN:DATA:NOROOT,0e1H
// unsigned char volatile __sfr RFST
RFST:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e9H
// unsigned char volatile __sfr RFIF
RFIF:
        DS 1
//   37 
//   38 /* debug */
//   39 #include "mac_assert.h"
//   40 
//   41 
//   42 /* ------------------------------------------------------------------------------------------------
//   43  *                                         Global Variables
//   44  * ------------------------------------------------------------------------------------------------
//   45  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   46 uint8 macRxOnFlag;
macRxOnFlag:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   47 uint8 macRxEnableFlags;
macRxEnableFlags:
        DS 1
//   48 
//   49 
//   50 /**************************************************************************************************
//   51  * @fn          macRxOnOffInit
//   52  *
//   53  * @brief       Initialize variables for rx on/off module.
//   54  *
//   55  * @param       none
//   56  *
//   57  * @return      none
//   58  **************************************************************************************************
//   59  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   60 void macRxOnOffInit(void)
macRxOnOffInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function macRxOnOffInit
//   61 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   62   macRxEnableFlags = 0;
        CLR	A
        MOV	DPTR,#macRxEnableFlags
        MOVX	@DPTR,A
//   63   macRxOnFlag = 0;
        MOV	DPTR,#macRxOnFlag
        MOVX	@DPTR,A
//   64 }
        SJMP	??Subroutine1_0
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV	0xa8.7,C
??Subroutine1_0:
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock1
//   65 
//   66 
//   67 /**************************************************************************************************
//   68  * @fn          macRxEnable
//   69  *
//   70  * @brief       Set enable flags and then turn on receiver.
//   71  *
//   72  * @param       flags - byte containing rx enable flags to set
//   73  *
//   74  * @return      none
//   75  **************************************************************************************************
//   76  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   77 void macRxEnable(uint8 flags)
macRxEnable:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function macRxEnable
//   78 {
        FUNCALL macRxEnable, halAssertHandler
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL macRxEnable, macRxOn
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//   79   halIntState_t  s;
//   80 
//   81   MAC_ASSERT(flags != 0); /* rx flags not affected */
        JNZ	??macRxEnable_0
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//   82 
//   83   /* set enable flags and then turn on receiver */
//   84   HAL_ENTER_CRITICAL_SECTION(s);
??macRxEnable_0:
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R7,A
        CLR	0xa8.7
//   85   macRxEnableFlags |= flags;
        MOV	DPTR,#macRxEnableFlags
        MOVX	A,@DPTR
        ORL	A,R6
        MOVX	@DPTR,A
//   86   macRxOn();
        ; Setup parameters for call to function macRxOn
        MOV	DPTR,#(macRxOn & 0xffff)
        MOV	A,#((macRxOn >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//   87   HAL_EXIT_CRITICAL_SECTION(s);
        MOV	A,R7
        SJMP	??Subroutine2_0
        CFI EndBlock cfiBlock2
//   88 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,R6
??Subroutine2_0:
        MOV	C,0xE0 /* A   */.0
??Subroutine2_1:
        MOV	0xa8.7,C
??Subroutine2_2:
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//   89 
//   90 
//   91 /**************************************************************************************************
//   92  * @fn          macRxSoftEnable
//   93  *
//   94  * @brief       Set enable flags but don't turn on the receiver.  Useful to leave the receiver
//   95  *              on after a transmit, but without turning it on immediately.
//   96  *
//   97  * @param       flags - byte containing rx enable flags to set
//   98  *
//   99  * @return      none
//  100  **************************************************************************************************
//  101  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  102 void macRxSoftEnable(uint8 flags)
macRxSoftEnable:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function macRxSoftEnable
//  103 {
        FUNCALL macRxSoftEnable, halAssertHandler
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  104   halIntState_t  s;
//  105 
//  106   MAC_ASSERT(flags != 0); /* rx flags not affected */
        JNZ	??macRxSoftEnable_0
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  107 
//  108   /* set the enable flags but do not turn on the receiver */
//  109   HAL_ENTER_CRITICAL_SECTION(s);
??macRxSoftEnable_0:
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        CLR	0xa8.7
//  110   macRxEnableFlags |= flags;
        MOV	DPTR,#macRxEnableFlags
        MOVX	A,@DPTR
        ORL	A,R6
        MOVX	@DPTR,A
//  111   HAL_EXIT_CRITICAL_SECTION(s);
        SJMP	??Subroutine2_1
        CFI EndBlock cfiBlock4
//  112 }
//  113 
//  114 
//  115 /**************************************************************************************************
//  116  * @fn          macRxDisable
//  117  *
//  118  * @brief       Clear indicated rx enable flags.  If all flags are clear, turn off receiver
//  119  *              unless there is an active receive or transmit.
//  120  *
//  121  * @param       flags - byte containg rx enable flags to clear
//  122  *
//  123  * @return      none
//  124  **************************************************************************************************
//  125  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  126 void macRxDisable(uint8 flags)
macRxDisable:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function macRxDisable
//  127 {
        FUNCALL macRxDisable, halAssertHandler
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL macRxDisable, macRxOffRequest
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
//  128   halIntState_t  s;
//  129 
//  130   MAC_ASSERT(flags != 0); /* rx flags not affected */
        JNZ	??macRxDisable_0
        ; Setup parameters for call to function halAssertHandler
        MOV	DPTR,#(halAssertHandler & 0xffff)
        MOV	A,#((halAssertHandler >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  131 
//  132   /* clear the indicated flags */
//  133   HAL_ENTER_CRITICAL_SECTION(s);
??macRxDisable_0:
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        CLR	0xa8.7
//  134   macRxEnableFlags &= ~flags;
        MOV	A,R6
        CPL	A
        MOV	R2,A
        MOV	DPTR,#macRxEnableFlags
        MOVX	A,@DPTR
        ANL	A,R2
        MOVX	@DPTR,A
//  135   HAL_EXIT_CRITICAL_SECTION(s);
        MOV	0xa8.7,C
//  136 
//  137   /* turn off the radio if it is allowed */
//  138   macRxOffRequest();
        ; Setup parameters for call to function macRxOffRequest
        MOV	DPTR,#(macRxOffRequest & 0xffff)
        MOV	A,#((macRxOffRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  139 }
        SJMP	??Subroutine2_2
        CFI EndBlock cfiBlock5
//  140 
//  141 
//  142 /**************************************************************************************************
//  143  * @fn          macRxHardDisable
//  144  *
//  145  * @brief       Clear all enable flags and turn off receiver.
//  146  *
//  147  * @param       none
//  148  *
//  149  * @return      none
//  150  **************************************************************************************************
//  151  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  152 void macRxHardDisable(void)
macRxHardDisable:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function macRxHardDisable
//  153 {
        FUNCALL macRxHardDisable, macRxHaltCleanup
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  154   halIntState_t  s;
//  155 
//  156   HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        CLR	0xa8.7
//  157 
//  158   macRxEnableFlags = 0;
        CLR	A
        MOV	DPTR,#macRxEnableFlags
        MOVX	@DPTR,A
//  159   macRxOnFlag = 0;
        MOV	DPTR,#macRxOnFlag
        LCALL	?Subroutine0 & 0xFFFF
//  160 
//  161   /* force receiver off */
//  162   MAC_RADIO_RXTX_OFF();
//  163   MAC_RADIO_FLUSH_RX_FIFO();
//  164   MAC_DEBUG_TURN_OFF_RX_LED();
//  165 
//  166   HAL_EXIT_CRITICAL_SECTION(s);
??CrossCallReturnLabel_0:
        MOV	0xa8.7,C
//  167 
//  168   /* clean up after being forced off */
//  169   macRxHaltCleanup();
        ; Setup parameters for call to function macRxHaltCleanup
        MOV	DPTR,#(macRxHaltCleanup & 0xffff)
        MOV	A,#((macRxHaltCleanup >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  170 }
        LJMP	??Subroutine1_0 & 0xFFFF
        CFI EndBlock cfiBlock6
//  171 
//  172 
//  173 /**************************************************************************************************
//  174  * @fn          macRxOnRequest
//  175  *
//  176  * @brief       Turn on the receiver if any rx enable flag is set.
//  177  *
//  178  * @param       none
//  179  *
//  180  * @return      none
//  181  **************************************************************************************************
//  182  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  183 void macRxOnRequest(void)
macRxOnRequest:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function macRxOnRequest
//  184 {
        FUNCALL macRxOnRequest, macRxOn
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  185   halIntState_t  s;
//  186 
//  187   HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R6,A
        CLR	0xa8.7
//  188   if (macRxEnableFlags)
        MOV	DPTR,#macRxEnableFlags
        MOVX	A,@DPTR
        JZ	??macRxOnRequest_0
//  189   {
//  190     macRxOn();
        ; Setup parameters for call to function macRxOn
        MOV	DPTR,#(macRxOn & 0xffff)
        MOV	A,#((macRxOn >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  191   }
//  192   HAL_EXIT_CRITICAL_SECTION(s);
??macRxOnRequest_0:
        LJMP	?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock7
//  193 }
//  194 
//  195 
//  196 /**************************************************************************************************
//  197  * @fn          macRxOffRequest
//  198  *
//  199  * @brief       Turn off receiver if permitted.
//  200  *
//  201  * @param       none
//  202  *
//  203  * @return      none
//  204  **************************************************************************************************
//  205  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  206 void macRxOffRequest(void)
macRxOffRequest:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function macRxOffRequest
//  207 {
        FUNCALL macRxOffRequest, macRxOff
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  208   halIntState_t  s;
//  209 
//  210   HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R6,A
        CLR	0xa8.7
//  211   if (!macRxEnableFlags)
        MOV	DPTR,#macRxEnableFlags
        MOVX	A,@DPTR
        JNZ	??macRxOffRequest_0
//  212   {
//  213     if (!MAC_RX_IS_PHYSICALLY_ACTIVE() && !MAC_TX_IS_PHYSICALLY_ACTIVE())
        MOV	DPTR,#macRxActive
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.7
        JC	??macRxOffRequest_0
        MOV	DPTR,#macRxOutgoingAckFlag
        MOVX	A,@DPTR
        JNZ	??macRxOffRequest_0
        MOV	DPTR,#macTxActive
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.7
        JC	??macRxOffRequest_0
//  214     {
//  215       macRxOff();
        ; Setup parameters for call to function macRxOff
        MOV	DPTR,#(macRxOff & 0xffff)
        MOV	A,#((macRxOff >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  216     }
//  217   }
//  218   HAL_EXIT_CRITICAL_SECTION(s);
??macRxOffRequest_0:
        LJMP	?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock8
//  219 }
//  220 
//  221 
//  222 /**************************************************************************************************
//  223  * @fn          macRxOn
//  224  *
//  225  * @brief       Turn on the receiver if it's not already on.
//  226  *
//  227  * @param       none
//  228  *
//  229  * @return      none
//  230  **************************************************************************************************
//  231  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  232 void macRxOn(void)
macRxOn:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function macRxOn
//  233 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  234   halIntState_t  s;
//  235 
//  236   HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        CLR	0xa8.7
//  237   if (!macRxOnFlag)
        MOV	DPTR,#macRxOnFlag
        MOVX	A,@DPTR
        JNZ	??macRxOn_0
//  238   {
//  239     macRxOnFlag = 1;
        MOV	A,#0x1
        MOVX	@DPTR,A
//  240     MAC_RADIO_RX_ON();
        MOV	0xe1,#-0x1e
//  241     MAC_DEBUG_TURN_ON_RX_LED();
//  242   }
//  243   HAL_EXIT_CRITICAL_SECTION(s);
??macRxOn_0:
        LJMP	?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock9
//  244 }
//  245 
//  246 
//  247 /**************************************************************************************************
//  248  * @fn          macRxOff
//  249  *
//  250  * @brief       Turn off the receiver if it's not already off.
//  251  *
//  252  * @param       none
//  253  *
//  254  * @return      none
//  255  **************************************************************************************************
//  256  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  257 void macRxOff(void)
macRxOff:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function macRxOff
//  258 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  259   halIntState_t  s;
//  260 
//  261   HAL_ENTER_CRITICAL_SECTION(s);
        MOV	C,0xa8.7
        CLR	A
        MOV	0xE0 /* A   */.0,C
        CLR	0xa8.7
//  262   if (macRxOnFlag)
        MOV	DPTR,#macRxOnFlag
        MOVX	A,@DPTR
        JZ	??macRxOff_0
//  263   {
//  264     macRxOnFlag = 0;
        CLR	A
        LCALL	?Subroutine0 & 0xFFFF
//  265     MAC_RADIO_RXTX_OFF();
//  266     MAC_DEBUG_TURN_OFF_RX_LED();
//  267     
//  268     /* just in case a receive was about to start, flush the receive FIFO */
//  269     MAC_RADIO_FLUSH_RX_FIFO();
//  270 
//  271     /* clear any receive interrupt that happened to squeak through */
//  272     MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
??CrossCallReturnLabel_1:
        MOV	0xe9,#-0x21
//  273 
//  274   }
//  275   HAL_EXIT_CRITICAL_SECTION(s);
??macRxOff_0:
        LJMP	?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock10
//  276 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond12) CFA_SP SP+-5
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOVX	@DPTR,A
        MOV	0xe1,#-0x1b
        MOV	0xe1,#-0x1a
        MOV	0xe1,#-0x1a
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        END
//  277 
//  278 
//  279 /**************************************************************************************************
//  280 */
// 
// 334 bytes in segment BANKED_CODE
//   3 bytes in segment SFR_AN
//   2 bytes in segment XDATA_Z
// 
// 334 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 3 bytes shared)
//   2 bytes of XDATA memory
//
//Errors: none
//Warnings: none
