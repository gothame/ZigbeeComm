##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   17/Oct/2013  21:52:42 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\mac\low_level\srf03\mac_tx.c                    #
#    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wEnde #
#                          v.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR                #
#                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS   #
#                          "-DCONST=const __code" -DGENERIC=__generic) -f    #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConfig. #
#                          cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800     #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\Source\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I        #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mt\ -I   #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2430EB\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\osal\mcu #
#                          \ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC #
#                          2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\osal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ #
#                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects #
#                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. #
#                          \Components\stack\af\ -I                          #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\stack\nw #
#                          k\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\st #
#                          ack\sec\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C #
#                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2430DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ #
#                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\stack\zdo\ -I                           #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\zmac\f8w #
#                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ #
#                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample #
#                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                       #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC243 #
#                          0´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\..\..\Components\ #
#                          mac\high_level\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ #
#                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ #
#                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf03\ -I                #
#                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\..\..\..\..\..\Components\mac\low_ #
#                          level\srf03\single_chip\ -D CC2430EB -D           #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           #
#                          ZG_ENDDEVICE -lC E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ #
#                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2430DB\EndDeviceEB\List\ #
#                           -lA E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® #
#                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\EndDeviceEB\List\             #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿Ú #
#                          ÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2430DB\EndDeviceEB\Obj\ -e             #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\mac\low_level\srf03\mac_tx.c"                  #
#    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\EndDeviceEB\List\mac_tx.lst        #
#    Object file        =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ· #
#                          ¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Samp #
#                          leApp\CC2430DB\EndDeviceEB\Obj\mac_tx.r51         #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mac\low_level\srf03\mac_tx.c
      1          /**************************************************************************************************
      2              Filename:
      3              Revised:        $Date: 2007-03-26 16:18:09 -0700 (Mon, 26 Mar 2007) $
      4              Revision:       $Revision: 13860 $
      5          
      6              Description:
      7          
      8              Describe the purpose and contents of the file.
      9          
     10              Copyright (c) 2006 by Texas Instruments, Inc.
     11              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     12              derivative works, modify, distribute, perform, display or sell this
     13              software and/or its documentation for any purpose is prohibited
     14              without the express written consent of Texas Instruments, Inc.
     15          **************************************************************************************************/
     16          
     17          
     18          
     19          /* ------------------------------------------------------------------------------------------------
     20           *                                          Includes
     21           * ------------------------------------------------------------------------------------------------
     22           */
     23          
     24          /* hal */
     25          #include "hal_types.h"
     26          #include "hal_defs.h"
     27          #include "hal_mcu.h"

   \                                 In segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1
     28          #include "hal_mac_cfg.h"
     29          
     30          /* high-level */
     31          #include "mac_spec.h"
     32          #include "mac_pib.h"
     33          
     34          /* exported low-level */
     35          #include "mac_low_level.h"
     36          
     37          /* low-level specific */
     38          #include "mac_tx.h"
     39          #include "mac_backoff_timer.h"
     40          #include "mac_rx.h"
     41          #include "mac_rx_onoff.h"
     42          #include "mac_radio.h"
     43          #include "mac_sleep.h"
     44          
     45          /* target specific */
     46          #include "mac_radio_defs.h"
     47          
     48          /* debug */
     49          #include "mac_assert.h"
     50          
     51          
     52          /* ------------------------------------------------------------------------------------------------
     53           *                                            Defines
     54           * ------------------------------------------------------------------------------------------------
     55           */
     56          #define MFR_LEN                   MAC_FCS_FIELD_LEN
     57          #define PREPENDED_BYTE_LEN        1
     58          
     59          
     60          /* ------------------------------------------------------------------------------------------------
     61           *                                         Global Constants
     62           * ------------------------------------------------------------------------------------------------
     63           */
     64          
     65          /*
     66           *  This is the time, in backoffs, required to set up a slotted transmit.
     67           *  It is exported to high level so that code can schedule enough time
     68           *  for slotted transmits.
     69           *
     70           *  A default is provided if a value is not specified.  If the default
     71           *  is not appropriate, a #define should be added within hal_mac_cfg.h.
     72           */
     73          #ifndef HAL_MAC_TX_SLOTTED_DELAY
     74          #define HAL_MAC_TX_SLOTTED_DELAY    3
     75          #endif

   \                                 In segment XDATA_I, align 1, keep-with-next
     76          uint8 const macTxSlottedDelay = HAL_MAC_TX_SLOTTED_DELAY;
   \                     macTxSlottedDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for macTxSlottedDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
     77          
     78          
     79          /* ------------------------------------------------------------------------------------------------
     80           *                                         Global Variables
     81           * ------------------------------------------------------------------------------------------------
     82           */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     83          uint8 macTxActive;
   \                     macTxActive:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     84          uint8 macTxType;
   \                     macTxType:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     85          uint8 macTxBe;
   \                     macTxBe:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     86          uint8 macTxCsmaBackoffDelay;
   \                     macTxCsmaBackoffDelay:
   \   000000                DS 1
     87          
     88          
     89          /* ------------------------------------------------------------------------------------------------
     90           *                                         Local Variables
     91           * ------------------------------------------------------------------------------------------------
     92           */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     93          static uint8 nb;
   \                     ??nb:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     94          static uint8 txSeqn;
   \                     ??txSeqn:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     95          static uint8 txAckReq;
   \                     ??txAckReq:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     96          static uint8 txRetransmitFlag;
   \                     ??txRetransmitFlag:
   \   000000                DS 1
     97          
     98          
     99          /* ------------------------------------------------------------------------------------------------
    100           *                                         Local Prototypes
    101           * ------------------------------------------------------------------------------------------------
    102           */
    103          static void txCsmaPrep(void);
    104          static void txGo(void);
    105          static void txCsmaGo(void);
    106          static void txComplete(uint8 status);
    107          
    108          
    109          /**************************************************************************************************
    110           * @fn          macTxInit
    111           *
    112           * @brief       Initialize variables for tx module.
    113           *
    114           * @param       none
    115           *
    116           * @return      none
    117           **************************************************************************************************
    118           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    119          void macTxInit(void)
   \                     macTxInit:
    120          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    121            macTxActive      = MAC_TX_ACTIVE_NO_ACTIVITY;
   \   000004   02....       LJMP    ?Subroutine3 & 0xFFFF
    122            txRetransmitFlag = 0;
    123          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E4           CLR     A
   \   000001   90....       MOV     DPTR,#macTxActive
   \   000004   F0           MOVX    @DPTR,A
   \   000005   90....       MOV     DPTR,#??txRetransmitFlag
   \   000008   F0           MOVX    @DPTR,A
   \                     ??Subroutine3_0:
   \   000009   D083         POP     DPH
   \   00000B   D082         POP     DPL
   \   00000D   02....       LJMP    ?BRET
    124          
    125          
    126          /**************************************************************************************************
    127           * @fn          macTxHaltCleanup
    128           *
    129           * @brief       -
    130           *
    131           * @param       none
    132           *
    133           * @return      none
    134           **************************************************************************************************
    135           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    136          void macTxHaltCleanup(void)
   \                     macTxHaltCleanup:
    137          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    138            MAC_RADIO_TX_RESET();
   \   000004                ; Setup parameters for call to function macCspTxReset
   \   000004   90....       MOV     DPTR,#(macCspTxReset & 0xffff)
   \   000007   74..         MOV     A,#((macCspTxReset >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    139            macTxInit();
   \   00000C   02....       LJMP    ?Subroutine3 & 0xFFFF
    140          }
    141          
    142          
    143          /**************************************************************************************************
    144           * @fn          macTxFrame
    145           *
    146           * @brief       Transmit the frame pointed to by pMacDataTx with the specified type.
    147           *              NOTE! It is not legal to call this function from interrupt context.
    148           *
    149           * @param       txType - type of transmit
    150           *
    151           * @return      none
    152           **************************************************************************************************
    153           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    154          void macTxFrame(uint8 txType)
   \                     macTxFrame:
    155          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    156            MAC_ASSERT(!macTxActive);            /* transmit on top of transmit */
   \   000007   90....       MOV     DPTR,#macTxActive
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6008         JZ      ??macTxFrame_0
   \   00000D                ; Setup parameters for call to function halAssertHandler
   \   00000D   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000010   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    157          
    158            /* mark transmit as active */
    159            macTxActive = MAC_TX_ACTIVE_INITIALIZE;
   \                     ??macTxFrame_0:
   \   000015   7401         MOV     A,#0x1
   \   000017   90....       MOV     DPTR,#macTxActive
   \   00001A   F0           MOVX    @DPTR,A
    160          
    161            /*
    162             *  The MAC will not enter sleep mode if there is an active transmit.  However, if macSleep() is
    163             *  ever called from interrupt context, it possible to enter sleep state after a transmit is
    164             *  intiated but before macTxActive is set.  To recover from this, the transmit must be aborted
    165             *  and proper notificiation given to high-level.
    166             */
    167            if (macSleepState != MAC_SLEEP_STATE_AWAKE)
   \   00001B   90....       MOV     DPTR,#macSleepState
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   600D         JZ      ??macTxFrame_1
    168            {
    169              /* notify high-level that transmit had to be aborted */
    170              txComplete(MAC_TX_ABORTED);
   \   000021                ; Setup parameters for call to function txComplete
   \   000021   791D         MOV     R1,#0x1d
   \   000023   90....       MOV     DPTR,#(??txComplete & 0xffff)
   \   000026   74..         MOV     A,#((??txComplete >> 16) & 0xff)
   \                     ??macTxFrame_2:
   \   000028   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    171          
    172              /* exit from transmit logic */
    173              return;
   \   00002B   02....       LJMP    ??macTxFrame_3 & 0xFFFF
    174            }
    175            
    176            /* save transmit type */
    177            macTxType = txType;
   \                     ??macTxFrame_1:
   \   00002E   EE           MOV     A,R6
   \   00002F   90....       MOV     DPTR,#macTxType
   \   000032   F0           MOVX    @DPTR,A
    178          
    179            /*-------------------------------------------------------------------------------
    180             *  Prepare for transmit.
    181             */
    182            if (macTxType == MAC_TX_TYPE_SLOTTED)
   \   000033   6402         XRL     A,#0x2
   \   000035   7007         JNZ     ??macTxFrame_4
    183            {
    184              MAC_RADIO_TX_PREP_SLOTTED();
   \   000037                ; Setup parameters for call to function macCspTxPrepSlotted
   \   000037   90....       MOV     DPTR,#(macCspTxPrepSlotted & 0xffff)
   \   00003A   74..         MOV     A,#((macCspTxPrepSlotted >> 16) & 0xff)
   \   00003C   804E         SJMP    ??macTxFrame_5
    185            }
    186            else
    187            {
    188              MAC_ASSERT((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) || (macTxType == MAC_TX_TYPE_UNSLOTTED_CSMA));
   \                     ??macTxFrame_4:
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   600C         JZ      ??macTxFrame_6
   \   000041   6401         XRL     A,#0x1
   \   000043   6008         JZ      ??macTxFrame_6
   \   000045                ; Setup parameters for call to function halAssertHandler
   \   000045   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000048   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   00004A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    189          
    190              nb = 0;
   \                     ??macTxFrame_6:
   \   00004D   E4           CLR     A
   \   00004E   90....       MOV     DPTR,#??nb
   \   000051   F0           MOVX    @DPTR,A
    191              macTxBe = (pMacDataTx->internal.txOptions & MAC_TXOPTION_ALT_BE) ? macPib.altBe : macPib.minBe;
   \   000052   90....       MOV     DPTR,#pMacDataTx
   \   000055   E0           MOVX    A,@DPTR
   \   000056   240E         ADD     A,#0xe
   \   000058   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00005B   A2E6         MOV     C,0xE0 /* A   */.6
   \   00005D   5005         JNC     ??macTxFrame_7
   \   00005F   90....       MOV     DPTR,#(macPib + 58)
   \   000062   8003         SJMP    ??macTxFrame_8
   \                     ??macTxFrame_7:
   \   000064   90....       MOV     DPTR,#(macPib + 28)
   \                     ??macTxFrame_8:
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FA           MOV     R2,A
   \   000069   EA           MOV     A,R2
   \   00006A   90....       MOV     DPTR,#macTxBe
   \   00006D   F0           MOVX    @DPTR,A
    192          
    193              if ((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) && (macPib.battLifeExt))
   \   00006E   90....       MOV     DPTR,#macTxType
   \   000071   E0           MOVX    A,@DPTR
   \   000072   7013         JNZ     ??macTxFrame_9
   \   000074   90....       MOV     DPTR,#(macPib + 3)
   \   000077   E0           MOVX    A,@DPTR
   \   000078   600D         JZ      ??macTxFrame_9
    194              {
    195                macTxBe = MIN(2, macTxBe);
   \   00007A   90....       MOV     DPTR,#macTxBe
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   C3           CLR     C
   \   00007F   9403         SUBB    A,#0x3
   \   000081   4002         JC      ??macTxFrame_10
   \   000083   7A02         MOV     R2,#0x2
   \                     ??macTxFrame_10:
   \   000085   EA           MOV     A,R2
   \   000086   F0           MOVX    @DPTR,A
    196              }
    197          
    198              txCsmaPrep();
   \                     ??macTxFrame_9:
   \   000087                ; Setup parameters for call to function txCsmaPrep
   \   000087   90....       MOV     DPTR,#(??txCsmaPrep & 0xffff)
   \   00008A   74..         MOV     A,#((??txCsmaPrep >> 16) & 0xff)
   \                     ??macTxFrame_5:
   \   00008C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    199            }
    200          
    201            /*-------------------------------------------------------------------------------
    202             *  Load transmit FIFO unless this is a retransmit.  No need to write
    203             *  the FIFO again in that case.
    204             */
    205            if (!txRetransmitFlag)
   \   00008F   90....       MOV     DPTR,#??txRetransmitFlag
   \   000092   E0           MOVX    A,@DPTR
   \   000093   7067         JNZ     ??macTxFrame_11
    206            {
    207              uint8 * p;
    208              uint8   lenMhrMsdu;
    209          
    210              MAC_ASSERT(pMacDataTx != NULL); /* must have data to transmit */
   \   000095   90....       MOV     DPTR,#pMacDataTx
   \   000098   E0           MOVX    A,@DPTR
   \   000099   7002         JNZ     ??macTxFrame_12
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \                     ??macTxFrame_12:
   \   00009D   7008         JNZ     ??macTxFrame_13
   \   00009F                ; Setup parameters for call to function halAssertHandler
   \   00009F   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   0000A2   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   0000A4   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    211          
    212              /* save needed parameters */
    213              txAckReq = MAC_ACK_REQUEST(pMacDataTx->msdu.p);
   \                     ??macTxFrame_13:
   \   0000A7   90....       MOV     DPTR,#pMacDataTx
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   2402         ADD     A,#0x2
   \   0000AD   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000B0   FA           MOV     R2,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F583         MOV     DPH,A
   \   0000B5   8A82         MOV     DPL,R2
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   5420         ANL     A,#0x20
   \   0000BA   90....       MOV     DPTR,#??txAckReq
   \   0000BD   F0           MOVX    @DPTR,A
    214              txSeqn   = MAC_SEQ_NUMBER(pMacDataTx->msdu.p);
   \   0000BE   8882         MOV     DPL,R0
   \   0000C0   8983         MOV     DPH,R1
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F583         MOV     DPH,A
   \   0000C6   8A82         MOV     DPL,R2
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   90....       MOV     DPTR,#??txSeqn
   \   0000CE   F0           MOVX    @DPTR,A
    215          
    216              /* set length of frame (note: use of term msdu is a misnomer, here it's actually mhr + msdu) */
    217              lenMhrMsdu = pMacDataTx->msdu.len;
   \   0000CF   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
    218          
    219              /* calling code guarantees an unused prepended byte  */
    220              p = pMacDataTx->msdu.p - PREPENDED_BYTE_LEN;
   \   0000D4   8882         MOV     DPL,R0
   \   0000D6   8983         MOV     DPH,R1
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   24FF         ADD     A,#-0x1
   \   0000DB   F8           MOV     R0,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   34FF         ADDC    A,#-0x1
   \   0000E0   F9           MOV     R1,A
   \   0000E1   8882         MOV     DPL,R0
   \   0000E3   8983         MOV     DPH,R1
    221          
    222              /* first byte of buffer is length of MPDU */
    223              *p = lenMhrMsdu + MFR_LEN;
   \   0000E5   7402         MOV     A,#0x2
   \   0000E7   2A           ADD     A,R2
   \   0000E8   F0           MOVX    @DPTR,A
    224          
    225              /*
    226               *  Flush the TX FIFO.  This is necessary in case the previous transmit was never
    227               *  actually sent (e.g. CSMA failed without strobing TXON).  If bytes are written to
    228               *  the FIFO but not transmitted, they remain in the FIFO to be transmitted whenever
    229               *  a strobe of TXON does happen.
    230               */
    231              MAC_RADIO_FLUSH_TX_FIFO();
   \   0000E9   75E1E7       MOV     0xe1,#-0x19
    232          
    233              /* write bytes to FIFO, prepended byte is included, MFR is not (it's generated by hardware) */
    234              MAC_RADIO_WRITE_TX_FIFO(p, PREPENDED_BYTE_LEN + lenMhrMsdu);
   \   0000EC                ; Setup parameters for call to function macMemWriteTxFifo
   \   0000EC   7401         MOV     A,#0x1
   \   0000EE   2A           ADD     A,R2
   \   0000EF   F9           MOV     R1,A
   \   0000F0   AA82         MOV     R2,DPL
   \   0000F2   AB83         MOV     R3,DPH
   \   0000F4   90....       MOV     DPTR,#(macMemWriteTxFifo & 0xffff)
   \   0000F7   74..         MOV     A,#((macMemWriteTxFifo >> 16) & 0xff)
   \   0000F9   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    235            }
    236          
    237            /*-------------------------------------------------------------------------------
    238             *  If not receiving, start the transmit.  If receive is active
    239             *  queue up the transmit.
    240             *
    241             *  Critical sections around the state change prevents any sort of race condition
    242             *  with  macTxStartQueuedFrame().  This guarantees function txGo() will only be
    243             *  called once.
    244             */
    245            {
    246              halIntState_t  s;
    247          
    248              HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macTxFrame_11:
   \   0000FC   A2AF         MOV     C,0xa8.7
   \   0000FE   E4           CLR     A
   \   0000FF   92E0         MOV     0xE0 /* A   */.0,C
   \   000101   C2AF         CLR     0xa8.7
    249              if (!macRxActive && !macRxOutgoingAckFlag)
   \   000103   90....       MOV     DPTR,#macRxActive
   \   000106   E0           MOVX    A,@DPTR
   \   000107   7011         JNZ     ??macTxFrame_14
   \   000109   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   700B         JNZ     ??macTxFrame_14
    250              {
    251                macTxActive = MAC_TX_ACTIVE_GO;
   \   00010F   7483         MOV     A,#-0x7d
   \   000111   90....       MOV     DPTR,#macTxActive
   \   000114   12....       LCALL   ?Subroutine2 & 0xFFFF
    252                HAL_EXIT_CRITICAL_SECTION(s);
    253                txGo();
   \                     ??CrossCallReturnLabel_4:
   \   000117   02....       LJMP    ??macTxFrame_2 & 0xFFFF
    254              }
    255              else
    256              {
    257                macTxActive = MAC_TX_ACTIVE_QUEUED;
   \                     ??macTxFrame_14:
   \   00011A   7402         MOV     A,#0x2
   \   00011C   90....       MOV     DPTR,#macTxActive
   \   00011F   F0           MOVX    @DPTR,A
    258                HAL_EXIT_CRITICAL_SECTION(s);
   \   000120   92AF         MOV     0xa8.7,C
   \                     ??macTxFrame_3:
   \   000122   02....       LJMP    ?Subroutine4 & 0xFFFF
    259              }
    260            }
    261          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   92AF         MOV     0xa8.7,C
   \   000003                ; Setup parameters for call to function txGo
   \   000003                ; Setup parameters for call to function txGo
   \   000003   90....       MOV     DPTR,#(??txGo & 0xffff)
   \   000006   74..         MOV     A,#((??txGo >> 16) & 0xff)
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#pMacDataTx
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET
    262          
    263          
    264          /*=================================================================================================
    265           * @fn          txCsmaPrep
    266           *
    267           * @brief       Prepare/initialize for a CSMA transmit.
    268           *
    269           * @param       none
    270           *
    271           * @return      none
    272           *=================================================================================================
    273           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    274          static void txCsmaPrep(void)
   \                     ??txCsmaPrep:
    275          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    276            macTxCsmaBackoffDelay = macRadioRandomByte() & ((1 << macTxBe) - 1);
   \   000005                ; Setup parameters for call to function macRadioRandomByte
   \   000005   90....       MOV     DPTR,#(macRadioRandomByte & 0xffff)
   \   000008   74..         MOV     A,#((macRadioRandomByte >> 16) & 0xff)
   \   00000A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000D   E9           MOV     A,R1
   \   00000E   FA           MOV     R2,A
   \   00000F   75..01       MOV     ?V0 + 0,#0x1
   \   000012   75..00       MOV     ?V0 + 1,#0x0
   \   000015   90....       MOV     DPTR,#macTxBe
   \   000018   E0           MOVX    A,@DPTR
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?S_SHL
   \   00001E   E5..         MOV     A,?V0 + 0
   \   000020   14           DEC     A
   \   000021   5A           ANL     A,R2
   \   000022   90....       MOV     DPTR,#macTxCsmaBackoffDelay
   \   000025   F0           MOVX    @DPTR,A
    277          
    278            if (macTxType == MAC_TX_TYPE_SLOTTED_CSMA)
   \   000026   90....       MOV     DPTR,#macTxType
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   7007         JNZ     ??txCsmaPrep_1
    279            {
    280              MAC_RADIO_TX_PREP_CSMA_SLOTTED();
   \   00002C                ; Setup parameters for call to function macCspTxPrepCsmaSlotted
   \   00002C   90....       MOV     DPTR,#(macCspTxPrepCsmaSlotted & 0xffff)
   \   00002F   74..         MOV     A,#((macCspTxPrepCsmaSlotted >> 16) & 0xff)
   \   000031   8005         SJMP    ??txCsmaPrep_2
    281            }
    282            else
    283            {
    284              MAC_RADIO_TX_PREP_CSMA_UNSLOTTED();
   \                     ??txCsmaPrep_1:
   \   000033                ; Setup parameters for call to function macCspTxPrepCsmaUnslotted
   \   000033   90....       MOV     DPTR,#(macCspTxPrepCsmaUnslotted & 0xffff)
   \   000036   74..         MOV     A,#((macCspTxPrepCsmaUnslotted >> 16) & 0xff)
   \                     ??txCsmaPrep_2:
   \   000038   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    285            }
    286          }
   \   00003B   7F02         MOV     R7,#0x2
   \   00003D   02....       LJMP    ?BANKED_LEAVE_XDATA
    287          
    288          
    289          /*=================================================================================================
    290           * @fn          txGo
    291           *
    292           * @brief       Start a transmit going.
    293           *
    294           * @param       none
    295           *
    296           * @return      none
    297           *=================================================================================================
    298           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    299          static void txGo(void)
   \                     ??txGo:
    300          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    301            /*
    302             *  If execution has reached this point, any transmitted ACK has long since completed.  It is
    303             *  possible though that there is still a pending callback.  If so, it is irrelevant and needs to
    304             *  be canceled at this point.
    305             */
    306            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000004                ; Setup parameters for call to function macMcuAndRFIM
   \   000004   79EF         MOV     R1,#-0x11
   \   000006   90....       MOV     DPTR,#(macMcuAndRFIM & 0xffff)
   \   000009   74..         MOV     A,#((macMcuAndRFIM >> 16) & 0xff)
   \   00000B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    307          
    308            /* based on type of transmit, call the correct "go" functionality */
    309            if (macTxType == MAC_TX_TYPE_SLOTTED)
   \   00000E   90....       MOV     DPTR,#macTxType
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6402         XRL     A,#0x2
   \   000014   7007         JNZ     ??txGo_1
    310            {
    311              MAC_RADIO_TX_GO_SLOTTED();
   \   000016                ; Setup parameters for call to function macCspTxGoSlotted
   \   000016   90....       MOV     DPTR,#(macCspTxGoSlotted & 0xffff)
   \   000019   74..         MOV     A,#((macCspTxGoSlotted >> 16) & 0xff)
   \   00001B   8005         SJMP    ??txGo_2
    312            }
    313            else
    314            {
    315              txCsmaGo();
   \                     ??txGo_1:
   \   00001D                ; Setup parameters for call to function txCsmaGo
   \   00001D   90....       MOV     DPTR,#(??txCsmaGo & 0xffff)
   \   000020   74..         MOV     A,#((??txCsmaGo >> 16) & 0xff)
   \                     ??txGo_2:
   \   000022   80..         SJMP    ?Subroutine5
    316            }
    317          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000003   80..         SJMP    ??Subroutine3_0
    318          
    319          
    320          /*=================================================================================================
    321           * @fn          txCsmaGo
    322           *
    323           * @brief       Start a CSMA transmit going.
    324           *
    325           * @param       none
    326           *
    327           * @return      none
    328           *=================================================================================================
    329           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    330          static void txCsmaGo(void)
   \                     ??txCsmaGo:
    331          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    332            if (macTxType == MAC_TX_TYPE_SLOTTED_CSMA)
   \   000004   90....       MOV     DPTR,#macTxType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   701B         JNZ     ??txCsmaGo_1
    333            {
    334              if (macTxCsmaBackoffDelay >= macDataTxTimeAvailable())
   \   00000A                ; Setup parameters for call to function macDataTxTimeAvailable
   \   00000A   90....       MOV     DPTR,#(macDataTxTimeAvailable & 0xffff)
   \   00000D   74..         MOV     A,#((macDataTxTimeAvailable >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   E9           MOV     A,R1
   \   000013   FA           MOV     R2,A
   \   000014   90....       MOV     DPTR,#macTxCsmaBackoffDelay
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C3           CLR     C
   \   000019   9A           SUBB    A,R2
   \   00001A   4009         JC      ??txCsmaGo_1
    335              {
    336                txComplete(MAC_NO_TIME);
   \   00001C                ; Setup parameters for call to function txComplete
   \   00001C   791C         MOV     R1,#0x1c
   \   00001E   90....       MOV     DPTR,#(??txComplete & 0xffff)
   \   000021   74..         MOV     A,#((??txComplete >> 16) & 0xff)
   \   000023   8005         SJMP    ??txCsmaGo_2
    337                return;
    338              }
    339            }
    340          
    341            MAC_RADIO_TX_GO_CSMA();
   \                     ??txCsmaGo_1:
   \   000025                ; Setup parameters for call to function macCspTxGoCsma
   \   000025   90....       MOV     DPTR,#(macCspTxGoCsma & 0xffff)
   \   000028   74..         MOV     A,#((macCspTxGoCsma >> 16) & 0xff)
   \                     ??txCsmaGo_2:
   \   00002A   80..         SJMP    ?Subroutine5
    342          }
    343          
    344          
    345          /**************************************************************************************************
    346           * @fn          macTxFrameRetransmit
    347           *
    348           * @brief       Retransmit the last frame.
    349           *
    350           * @param       none
    351           *
    352           * @return      none
    353           **************************************************************************************************
    354           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    355          void macTxFrameRetransmit(void)
   \                     macTxFrameRetransmit:
    356          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    357            txRetransmitFlag = 1;
   \   000004   7401         MOV     A,#0x1
   \   000006   90....       MOV     DPTR,#??txRetransmitFlag
   \   000009   F0           MOVX    @DPTR,A
    358            macTxFrame(macTxType);
   \   00000A                ; Setup parameters for call to function macTxFrame
   \   00000A   90....       MOV     DPTR,#macTxType
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   90....       MOV     DPTR,#(macTxFrame & 0xffff)
   \   000012   74..         MOV     A,#((macTxFrame >> 16) & 0xff)
   \   000014                REQUIRE ?Subroutine5
   \   000014                ; // Fall through to label ?Subroutine5
    359          }
    360          
    361          
    362          /**************************************************************************************************
    363           * @fn          macTxStartQueuedFrame
    364           *
    365           * @brief       See if there is a queued frame waiting to transmit.  If so, initiate
    366           *              the transmit now.
    367           *
    368           * @param       none
    369           *
    370           * @return      none
    371           **************************************************************************************************
    372           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    373          void macTxStartQueuedFrame(void)
   \                     macTxStartQueuedFrame:
    374          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    375            halIntState_t  s;
    376          
    377            MAC_ASSERT(!macRxActive && !macRxOutgoingAckFlag); /* queued frames should not transmit in middle of a receive */
   \   000004   90....       MOV     DPTR,#macRxActive
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7006         JNZ     ??macTxStartQueuedFrame_0
   \   00000A   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6008         JZ      ??macTxStartQueuedFrame_1
   \                     ??macTxStartQueuedFrame_0:
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000013   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000015   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    378            
    379            /*
    380             *  Critical sections around the state change prevents any sort of race condition
    381             *  with macTxFrame().  This guarantees function txGo() will only be be called once.
    382             */
    383            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macTxStartQueuedFrame_1:
   \   000018   A2AF         MOV     C,0xa8.7
   \   00001A   E4           CLR     A
   \   00001B   92E0         MOV     0xE0 /* A   */.0,C
   \   00001D   C2AF         CLR     0xa8.7
    384            if (macTxActive == MAC_TX_ACTIVE_QUEUED)
   \   00001F   90....       MOV     DPTR,#macTxActive
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6402         XRL     A,#0x2
   \   000025   700A         JNZ     ??macTxStartQueuedFrame_2
    385            {
    386              macTxActive = MAC_TX_ACTIVE_GO;
   \   000027   7483         MOV     A,#-0x7d
   \   000029   12....       LCALL   ?Subroutine2 & 0xFFFF
    387              HAL_EXIT_CRITICAL_SECTION(s);
    388              txGo();
   \                     ??CrossCallReturnLabel_5:
   \   00002C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002F   8002         SJMP    ??macTxStartQueuedFrame_3
    389            }
    390            else
    391            {
    392              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxStartQueuedFrame_2:
   \   000031   92AF         MOV     0xa8.7,C
    393            }
    394          }
   \                     ??macTxStartQueuedFrame_3:
   \   000033   80..         SJMP    ??Subroutine3_0
    395          
    396          
    397          /**************************************************************************************************
    398           * @fn          macTxChannelBusyCallback
    399           *
    400           * @brief       This callback is executed if a CSMA transmit was attempted but the channel
    401           *              was busy.
    402           *
    403           * @param       none
    404           *
    405           * @return      none
    406           **************************************************************************************************
    407           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    408          void macTxChannelBusyCallback(void)
   \                     macTxChannelBusyCallback:
    409          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    410            MAC_ASSERT((macTxType == MAC_TX_TYPE_SLOTTED_CSMA) || (macTxType == MAC_TX_TYPE_UNSLOTTED_CSMA));
   \   000004   90....       MOV     DPTR,#macTxType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   600C         JZ      ??macTxChannelBusyCallback_0
   \   00000A   6401         XRL     A,#0x1
   \   00000C   6008         JZ      ??macTxChannelBusyCallback_0
   \   00000E                ; Setup parameters for call to function halAssertHandler
   \   00000E   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000011   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000013   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    411          
    412            /*  clear channel assement failed, follow through with CSMA algorithm */
    413            nb++;
   \                     ??macTxChannelBusyCallback_0:
   \   000016   90....       MOV     DPTR,#??nb
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   04           INC     A
   \   00001B   F0           MOVX    @DPTR,A
    414            if (nb > macPib.maxCsmaBackoffs)
   \   00001C   90....       MOV     DPTR,#(macPib + 27)
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C0E0         PUSH    A
   \   000022   90....       MOV     DPTR,#??nb
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   D0E0         POP     A
   \   000029   C3           CLR     C
   \   00002A   9A           SUBB    A,R2
   \   00002B   5009         JNC     ??macTxChannelBusyCallback_1
    415            {
    416              txComplete(MAC_CHANNEL_ACCESS_FAILURE);
   \   00002D                ; Setup parameters for call to function txComplete
   \   00002D   79E1         MOV     R1,#-0x1f
   \   00002F   90....       MOV     DPTR,#(??txComplete & 0xffff)
   \   000032   74..         MOV     A,#((??txComplete >> 16) & 0xff)
   \   000034   8035         SJMP    ??macTxChannelBusyCallback_2
    417            }
    418            else
    419            {
    420              macTxBe = MIN(macTxBe+1, macPib.maxBe);
   \                     ??macTxChannelBusyCallback_1:
   \   000036   90....       MOV     DPTR,#macTxBe
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   7401         MOV     A,#0x1
   \   00003D   28           ADD     A,R0
   \   00003E   08           INC     R0
   \   00003F   E4           CLR     A
   \   000040   3400         ADDC    A,#0x0
   \   000042   F9           MOV     R1,A
   \   000043   90....       MOV     DPTR,#(macPib + 39)
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FA           MOV     R2,A
   \   000048   E8           MOV     A,R0
   \   000049   9A           SUBB    A,R2
   \   00004A   E9           MOV     A,R1
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   C3           CLR     C
   \   00004E   65D0         XRL     A,PSW
   \   000050   33           RLC     A
   \   000051   5006         JNC     ??macTxChannelBusyCallback_3
   \   000053   90....       MOV     DPTR,#macTxBe
   \   000056   E0           MOVX    A,@DPTR
   \   000057   04           INC     A
   \   000058   FA           MOV     R2,A
   \                     ??macTxChannelBusyCallback_3:
   \   000059   EA           MOV     A,R2
   \   00005A   90....       MOV     DPTR,#macTxBe
   \   00005D   F0           MOVX    @DPTR,A
    421              txCsmaPrep();
   \   00005E                ; Setup parameters for call to function txCsmaPrep
   \   00005E   90....       MOV     DPTR,#(??txCsmaPrep & 0xffff)
   \   000061   74..         MOV     A,#((??txCsmaPrep >> 16) & 0xff)
   \   000063   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    422              txCsmaGo();
   \   000066                ; Setup parameters for call to function txCsmaGo
   \   000066   90....       MOV     DPTR,#(??txCsmaGo & 0xffff)
   \   000069   74..         MOV     A,#((??txCsmaGo >> 16) & 0xff)
   \                     ??macTxChannelBusyCallback_2:
   \   00006B   02....       LJMP    ?Subroutine5 & 0xFFFF
    423            }
    424          }
    425          
    426          
    427          /**************************************************************************************************
    428           * @fn          macTxDoneCallback
    429           *
    430           * @brief       This callback is executed when transmit completes.
    431           *
    432           * @param       none
    433           *
    434           * @return      none
    435           **************************************************************************************************
    436           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    437          void macTxDoneCallback(void)
   \                     macTxDoneCallback:
    438          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    439            halIntState_t  s;
    440          
    441            /*
    442             *  There is a small chance this function could be called twice for a single transmit.
    443             *  To prevent logic from executing twice, the state variable macTxActive is used as
    444             *  a gating mechanism to guarantee single time execution.
    445             */
    446            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   92E0         MOV     0xE0 /* A   */.0,C
   \   00000A   FE           MOV     R6,A
   \   00000B   C2AF         CLR     0xa8.7
    447            if (macTxActive == MAC_TX_ACTIVE_GO)
   \   00000D   90....       MOV     DPTR,#macTxActive
   \   000010   E0           MOVX    A,@DPTR
   \   000011   6483         XRL     A,#0x83
   \   000013   702B         JNZ     ??macTxDoneCallback_0
    448            {
    449              /* see if ACK was requested */
    450              if (!txAckReq)
   \   000015   90....       MOV     DPTR,#??txAckReq
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7014         JNZ     ??macTxDoneCallback_1
    451              {
    452                macTxActive = MAC_TX_ACTIVE_DONE;
   \   00001B   7484         MOV     A,#-0x7c
   \   00001D   90....       MOV     DPTR,#macTxActive
   \   000020   F0           MOVX    @DPTR,A
    453                HAL_EXIT_CRITICAL_SECTION(s);
   \   000021   92AF         MOV     0xa8.7,C
    454          
    455                /* ACK was not requested, transmit is complete */
    456                txComplete(MAC_SUCCESS);
   \   000023                ; Setup parameters for call to function txComplete
   \   000023   7900         MOV     R1,#0x0
   \   000025   90....       MOV     DPTR,#(??txComplete & 0xffff)
   \   000028   74..         MOV     A,#((??txComplete >> 16) & 0xff)
   \   00002A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002D   8013         SJMP    ??macTxDoneCallback_2
    457              }
    458              else
    459              {
    460                /*
    461                 *  ACK was requested - must wait to receive it.  A timer is set
    462                 *  to expire after the timeout duration for waiting for an ACK.
    463                 *  If an ACK is received, the function macTxAckReceived() is called.
    464                 *  If an ACK is not received within the timeout period,
    465                 *  the function macTxAckTimeoutCallback() is called.
    466                 */
    467                macTxActive = MAC_TX_ACTIVE_LISTEN_FOR_ACK;
   \                     ??macTxDoneCallback_1:
   \   00002F   7485         MOV     A,#-0x7b
   \   000031   90....       MOV     DPTR,#macTxActive
   \   000034   F0           MOVX    @DPTR,A
    468                MAC_RADIO_TX_REQUEST_ACK_TIMEOUT_CALLBACK();
   \   000035                ; Setup parameters for call to function macCspTxRequestAckTimeoutCallback
   \   000035   90....       MOV     DPTR,#(macCspTxRequestAckTimeoutCallback & 0xffff)
   \   000038   74..         MOV     A,#((macCspTxRequestAckTimeoutCallback >> 16) & 0xff)
   \   00003A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    469                HAL_EXIT_CRITICAL_SECTION(s);
   \   00003D   EE           MOV     A,R6
   \   00003E   A2E0         MOV     C,0xE0 /* A   */.0
    470              }
    471            }
    472            else
    473            {
    474              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxDoneCallback_0:
   \   000040   92AF         MOV     0xa8.7,C
    475            }
    476          }
   \                     ??macTxDoneCallback_2:
   \   000042   80..         SJMP    ?Subroutine4
    477          
    478          
    479          /**************************************************************************************************
    480           * @fn          macTxAckReceivedCallback
    481           *
    482           * @brief       This function is called by the receive logic when an ACK is received and
    483           *              transmit logic is listening for an ACK.
    484           *
    485           * @param       seqn        - sequence number of received ACK
    486           * @param       pendingFlag - set if pending flag of ACK is set, cleared otherwise
    487           *
    488           * @return      none
    489           **************************************************************************************************
    490           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    491          void macTxAckReceivedCallback(uint8 seqn, uint8 pendingFlag)
   \                     macTxAckReceivedCallback:
    492          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    493            halIntState_t  s;
    494          
    495            /* only process if listening for an ACK; critical section prevents race condition problems */
    496            HAL_ENTER_CRITICAL_SECTION(s);
   \   000009   A2AF         MOV     C,0xa8.7
   \   00000B   E4           CLR     A
   \   00000C   92E0         MOV     0xE0 /* A   */.0,C
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   C2AF         CLR     0xa8.7
    497            if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   000012   90....       MOV     DPTR,#macTxActive
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6485         XRL     A,#0x85
   \   000018   702F         JNZ     ??macTxAckReceivedCallback_0
    498            {
    499              macTxActive = MAC_TX_ACTIVE_POST_ACK;
   \   00001A   7486         MOV     A,#-0x7a
   \   00001C   F0           MOVX    @DPTR,A
    500              MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK();
   \   00001D                ; Setup parameters for call to function macCspTxCancelAckTimeoutCallback
   \   00001D   90....       MOV     DPTR,#(macCspTxCancelAckTimeoutCallback & 0xffff)
   \   000020   74..         MOV     A,#((macCspTxCancelAckTimeoutCallback >> 16) & 0xff)
   \   000022   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    501              HAL_EXIT_CRITICAL_SECTION(s);
   \   000025   E5..         MOV     A,?V0 + 0
   \   000027   A2E0         MOV     C,0xE0 /* A   */.0
   \   000029   92AF         MOV     0xa8.7,C
    502          
    503              /* see if the sequence number of received ACK matches sequence number of packet just sent */
    504              if (seqn == txSeqn)
   \   00002B   90....       MOV     DPTR,#??txSeqn
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6E           XRL     A,R6
   \   000030   7013         JNZ     ??macTxAckReceivedCallback_1
    505              {
    506                /*
    507                 *  Sequence numbers match so transmit is successful.  Return appropriate
    508                 *  status based on the pending flag of the received ACK.
    509                 */
    510                if (pendingFlag)
   \   000032   EF           MOV     A,R7
   \   000033   600C         JZ      ??macTxAckReceivedCallback_2
    511                {
    512                  txComplete(MAC_ACK_PENDING);
   \   000035                ; Setup parameters for call to function txComplete
   \   000035   791B         MOV     R1,#0x1b
   \                     ??macTxAckReceivedCallback_3:
   \   000037   90....       MOV     DPTR,#(??txComplete & 0xffff)
   \   00003A   74..         MOV     A,#((??txComplete >> 16) & 0xff)
   \   00003C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003F   800A         SJMP    ??macTxAckReceivedCallback_4
    513                }
    514                else
    515                {
    516                  txComplete(MAC_SUCCESS);
   \                     ??macTxAckReceivedCallback_2:
   \   000041                ; Setup parameters for call to function txComplete
   \   000041   7900         MOV     R1,#0x0
   \   000043   80F2         SJMP    ??macTxAckReceivedCallback_3
    517                }
    518              }
    519              else
    520              {
    521                /* sequence number did not match; per spec, transmit failed at this point */
    522                txComplete(MAC_NO_ACK);
   \                     ??macTxAckReceivedCallback_1:
   \   000045                ; Setup parameters for call to function txComplete
   \   000045   79E9         MOV     R1,#-0x17
   \   000047   80EE         SJMP    ??macTxAckReceivedCallback_3
    523              }
    524            }
    525            else
    526            {
    527              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxAckReceivedCallback_0:
   \   000049   92AF         MOV     0xa8.7,C
    528            }
    529          }
   \                     ??macTxAckReceivedCallback_4:
   \   00004B                REQUIRE ?Subroutine4
   \   00004B                ; // Fall through to label ?Subroutine4
    530          
    531          
    532          /**************************************************************************************************
    533           * @fn          macTxAckNotReceivedCallback
    534           *
    535           * @brief       This function is called by the receive logic when transmit is listening
    536           *              for an ACK but something else is received.  It is also called if the
    537           *              listen-for-ACK timeout is reached.
    538           *
    539           * @brief       
    540           *
    541           * @param       none
    542           *
    543           * @return      none
    544           **************************************************************************************************
    545           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    546          void macTxAckNotReceivedCallback(void)
   \                     macTxAckNotReceivedCallback:
    547          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    548            halIntState_t  s;
    549          
    550            /* only process if listening for an ACK; critical section prevents race condition problems */
    551            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   92E0         MOV     0xE0 /* A   */.0,C
   \   00000A   FE           MOV     R6,A
   \   00000B   C2AF         CLR     0xa8.7
    552            if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   00000D   90....       MOV     DPTR,#macTxActive
   \   000010   E0           MOVX    A,@DPTR
   \   000011   6485         XRL     A,#0x85
   \   000013   701C         JNZ     ??macTxAckNotReceivedCallback_0
    553            {
    554              macTxActive = MAC_TX_ACTIVE_POST_ACK;
   \   000015   7486         MOV     A,#-0x7a
   \   000017   F0           MOVX    @DPTR,A
    555              MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK();
   \   000018                ; Setup parameters for call to function macCspTxCancelAckTimeoutCallback
   \   000018   90....       MOV     DPTR,#(macCspTxCancelAckTimeoutCallback & 0xffff)
   \   00001B   74..         MOV     A,#((macCspTxCancelAckTimeoutCallback >> 16) & 0xff)
   \   00001D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    556              HAL_EXIT_CRITICAL_SECTION(s);
   \   000020   EE           MOV     A,R6
   \   000021   A2E0         MOV     C,0xE0 /* A   */.0
   \   000023   92AF         MOV     0xa8.7,C
    557          
    558              /* a non-ACK was received when expecting an ACK, per spec transmit is over at this point */
    559              txComplete(MAC_NO_ACK);
   \   000025                ; Setup parameters for call to function txComplete
   \   000025   79E9         MOV     R1,#-0x17
   \   000027   90....       MOV     DPTR,#(??txComplete & 0xffff)
   \   00002A   74..         MOV     A,#((??txComplete >> 16) & 0xff)
   \   00002C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002F   8002         SJMP    ??macTxAckNotReceivedCallback_1
    560            }
    561            else
    562            {
    563              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macTxAckNotReceivedCallback_0:
   \   000031   92AF         MOV     0xa8.7,C
    564            }
    565          }
   \                     ??macTxAckNotReceivedCallback_1:
   \   000033   80..         SJMP    ?Subroutine4
    566          
    567          
    568          /*=================================================================================================
    569           * @fn          txComplete
    570           *
    571           * @brief       Transmit has completed.  Perform needed maintenance and return status of
    572           *              the transmit via callback function.
    573           *
    574           * @param       status - status of the transmit that just went out
    575           *
    576           * @return      none
    577           *=================================================================================================
    578           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    579          static void txComplete(uint8 status)
   \                     ??txComplete:
    580          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    581            /* reset the retransmit flag */
    582            txRetransmitFlag = 0;
   \   000007   E4           CLR     A
   \   000008   90....       MOV     DPTR,#??txRetransmitFlag
   \   00000B   F0           MOVX    @DPTR,A
    583          
    584            /* update tx state; turn off receiver if nothing is keeping it on */
    585            macTxActive = MAC_TX_ACTIVE_NO_ACTIVITY;
   \   00000C   90....       MOV     DPTR,#macTxActive
   \   00000F   F0           MOVX    @DPTR,A
    586          
    587            /* turn off receive if allowed */
    588            macRxOffRequest();
   \   000010                ; Setup parameters for call to function macRxOffRequest
   \   000010   90....       MOV     DPTR,#(macRxOffRequest & 0xffff)
   \   000013   74..         MOV     A,#((macRxOffRequest >> 16) & 0xff)
   \   000015   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    589          
    590            /* update transmit power in case there was a change */
    591            macRadioUpdateTxPower();
   \   000018                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000018   90....       MOV     DPTR,#(macRadioUpdateTxPower & 0xffff)
   \   00001B   74..         MOV     A,#((macRadioUpdateTxPower >> 16) & 0xff)
   \   00001D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    592          
    593            /*
    594             *  Channel cannot change during transmit so update it here.  (Channel *can* change during
    595             *  a receive.  The update function resets receive logic and any partially received
    596             *  frame is purged.)
    597             */
    598            macRadioUpdateChannel();
   \   000020                ; Setup parameters for call to function macRadioUpdateChannel
   \   000020   90....       MOV     DPTR,#(macRadioUpdateChannel & 0xffff)
   \   000023   74..         MOV     A,#((macRadioUpdateChannel >> 16) & 0xff)
   \   000025   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    599          
    600            /* return status of transmit via callback function */
    601            macTxCompleteCallback(status);
   \   000028                ; Setup parameters for call to function macTxCompleteCallback
   \   000028   EE           MOV     A,R6
   \   000029   F9           MOV     R1,A
   \   00002A   90....       MOV     DPTR,#(macTxCompleteCallback & 0xffff)
   \   00002D   74..         MOV     A,#((macTxCompleteCallback >> 16) & 0xff)
   \   00002F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    602          }
   \   000032   80..         SJMP    ?Subroutine4
    603          
    604          
    605          /**************************************************************************************************
    606           * @fn          macTxTimestampCallback
    607           *
    608           * @brief       This callback function records the timestamp into the receive data structure.
    609           *              It should be called as soon as possible after there is a valid timestamp.
    610           *
    611           * @param       none
    612           *
    613           * @return      none
    614           **************************************************************************************************
    615           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    616          void macTxTimestampCallback(void)
   \                     macTxTimestampCallback:
    617          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    618            MAC_ASSERT(pMacDataTx != NULL); /* transmit structure must be there */
   \   000005   90....       MOV     DPTR,#pMacDataTx
   \   000008   E0           MOVX    A,@DPTR
   \   000009   7002         JNZ     ??macTxTimestampCallback_0
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \                     ??macTxTimestampCallback_0:
   \   00000D   7008         JNZ     ??macTxTimestampCallback_1
   \   00000F                ; Setup parameters for call to function halAssertHandler
   \   00000F   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000012   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    619          
    620            pMacDataTx->internal.timestamp  = macBackoffTimerCapture();
   \                     ??macTxTimestampCallback_1:
   \   000017                ; Setup parameters for call to function macBackoffTimerCapture
   \   000017   90....       MOV     DPTR,#(macBackoffTimerCapture & 0xffff)
   \   00001A   74..         MOV     A,#((macBackoffTimerCapture >> 16) & 0xff)
   \   00001C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00001F   8A..         MOV     ?V0 + 0,R2
   \   000021   8B..         MOV     ?V0 + 1,R3
   \   000023   8C..         MOV     ?V0 + 2,R4
   \   000025   8D..         MOV     ?V0 + 3,R5
   \   000027   90....       MOV     DPTR,#pMacDataTx
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F583         MOV     DPH,A
   \   000030   8882         MOV     DPL,R0
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?L_MOV_TO_X
    621            pMacDataTx->internal.timestamp2 = MAC_RADIO_TIMER_CAPTURE();
   \   00003C                ; Setup parameters for call to function macMcuTimerCapture
   \   00003C   90....       MOV     DPTR,#(macMcuTimerCapture & 0xffff)
   \   00003F   74..         MOV     A,#((macMcuTimerCapture >> 16) & 0xff)
   \   000041   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000044   8A..         MOV     ?V0 + 0,R2
   \   000046   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E5..         MOV     A,?V0 + 0
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   EB           MOV     A,R3
   \   000053   F0           MOVX    @DPTR,A
    622          }
   \   000054   7F04         MOV     R7,#0x4
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    623          
    624          
    625          /**************************************************************************************************
    626           * @fn          macTxCollisionWithRxCallback
    627           *
    628           * @brief       Function called if transmit strobed on top of a receive.
    629           *
    630           * @param       none
    631           *
    632           * @return      none
    633           **************************************************************************************************
    634           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    635          void macTxCollisionWithRxCallback(void)
   \                     macTxCollisionWithRxCallback:
    636          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    637            macRxHaltCleanup();
   \   000004                ; Setup parameters for call to function macRxHaltCleanup
   \   000004   90....       MOV     DPTR,#(macRxHaltCleanup & 0xffff)
   \   000007   74..         MOV     A,#((macRxHaltCleanup >> 16) & 0xff)
   \   000009   02....       LJMP    ?Subroutine5 & 0xFFFF
    638          }

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for macTxSlottedDelay>`:
   \   000000   03           DB 3

   \                                 In segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
    639          
    640          
    641          
    642          /**************************************************************************************************
    643           *                                  Compile Time Integrity Checks
    644           **************************************************************************************************
    645           */
    646          #if (MAC_TX_ACTIVE_NO_ACTIVITY != 0x00)
    647          #error "ERROR! Zero is reserved value of macTxActive. Allows boolean operations, e.g !macTxActive."
    648          #endif
    649          
    650          /**************************************************************************************************
    651          */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     macTxAckNotReceivedCallback        0      0      9
       -> macCspTxCancelAckTimeoutCallback
                                        0      0     18
       -> txComplete                    0      0     18
     macTxAckReceivedCallback           0      0      9
       -> macCspTxCancelAckTimeoutCallback
                                        0      0     18
       -> txComplete                    0      0     18
       -> txComplete                    0      0     18
       -> txComplete                    0      0     18
     macTxChannelBusyCallback           3      0      0
       -> halAssertHandler              4      0      0
       -> txComplete                    4      0      0
       -> txCsmaPrep                    4      0      0
       -> txCsmaGo                      4      0      0
     macTxCollisionWithRxCallback       2      0      0
       -> macRxHaltCleanup              4      0      0
     macTxDoneCallback                  0      0      9
       -> txComplete                    0      0     18
       -> macCspTxRequestAckTimeoutCallback
                                        0      0     18
     macTxFrame                         3      0      9
       -> halAssertHandler              0      0     18
       -> txComplete                    0      0     18
       -> macCspTxPrepSlotted           0      0     18
       -> halAssertHandler              0      0     18
       -> txCsmaPrep                    0      0     18
       -> halAssertHandler              0      0     18
       -> macMemWriteTxFifo             0      0     18
       -> txGo                          0      0     18
     macTxFrameRetransmit               2      0      0
       -> macTxFrame                    4      0      0
     macTxHaltCleanup                   2      0      0
       -> macCspTxReset                 4      0      0
     macTxInit                          2      0      0
     macTxStartQueuedFrame              2      0      0
       -> halAssertHandler              4      0      0
       -> txGo                          4      0      0
     macTxTimestampCallback             0      0     12
       -> halAssertHandler              0      0     24
       -> macBackoffTimerCapture        0      0     24
       -> macMcuTimerCapture            0      0     24
     txComplete                         2      0     18
       -> macRxOffRequest               0      0     18
       -> macRadioUpdateTxPower         0      0     18
       -> macRadioUpdateChannel         0      0     18
       -> macTxCompleteCallback         0      0     18
     txCsmaGo                           4      0      0
       -> macDataTxTimeAvailable        4      0      0
       -> txComplete                    4      0      0
       -> macCspTxGoCsma                4      0      0
     txCsmaPrep                         2      0     19
       -> macRadioRandomByte            0      0     20
       -> macCspTxPrepCsmaSlotted       0      0     20
       -> macCspTxPrepCsmaUnslotted     0      0     20
     txGo                               4      0      9
       -> macMcuAndRFIM                 4      0      0
       -> macCspTxGoSlotted             4      0      0
       -> txCsmaGo                      4      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     RFST                              1
     macTxSlottedDelay                 1
     macTxActive                       1
     macTxType                         1
     macTxBe                           1
     macTxCsmaBackoffDelay             1
     nb                                1
     txSeqn                            1
     txAckReq                          1
     txRetransmitFlag                  1
     macTxInit                         7
     ?Subroutine3                     16
     macTxHaltCleanup                 15
     macTxFrame                      293
     ?Subroutine1                     12
     ?Subroutine2                      9
     ?Subroutine4                      5
     ?Subroutine0                     16
     txCsmaPrep                       64
     txGo                             36
     ?Subroutine5                      5
     txCsmaGo                         44
     macTxFrameRetransmit             20
     macTxStartQueuedFrame            53
     macTxChannelBusyCallback        110
     macTxDoneCallback                68
     macTxAckReceivedCallback         75
     macTxAckNotReceivedCallback      53
     txComplete                       52
     macTxTimestampCallback           89
     macTxCollisionWithRxCallback     12
     ?<Initializer for macTxSlottedDelay>
                                       1
     _A_IEN0                           1

 
 1 054 bytes in segment BANKED_CODE
     2 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     8 bytes in segment XDATA_Z
 
 1 055 bytes of CODE  memory
     0 bytes of DATA  memory (+ 2 bytes shared)
     9 bytes of XDATA memory

Errors: none
Warnings: none
