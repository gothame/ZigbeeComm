//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  17/Oct/2013  21:52:42 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\stack\nwk\nwk_globals.c                       /
//    Command line       =  -f E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wE /
//                          ndev.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR            /
//                          -DROOT=__near_func -DMAC_OPT_FFD=0 -DBLINK_LEDS  /
//                          "-DCONST=const __code" -DGENERIC=__generic) -f   /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x00000800 /
//                           -DZDAPP_CONFIG_PAN_ID=0xFFFF                    /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430 /
//                          Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\Source\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\    /
//                          -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt /
//                          \ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´ /
//                          ®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sampl /
//                          es\SampleApp\CC2430DB\..\..\..\..\..\Components\ /
//                          hal\include\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ /
//                          ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\hal\target\CC2430EB\ -I               /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\osal\ /
//                          mcu\ccsoc\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì /
//                          ¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zst /
//                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Co /
//                          mponents\osal\include\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \af\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC24 /
//                          30´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sa /
//                          mples\SampleApp\CC2430DB\..\..\..\..\..\Componen /
//                          ts\stack\nwk\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶ /
//                          Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\stack /
//                          \sys\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2 /
//                          430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\stack\zdo\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -I                        /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\zmac\ /
//                           -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´® /
//                          ¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sample /
//                          s\SampleApp\CC2430DB\..\..\..\..\..\Components\s /
//                          ervices\saddr\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ /
//                          ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects /
//                          \zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. /
//                          .\Components\services\sdata\ -I                  /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\i /
//                          nclude\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\C /
//                          C2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack /
//                          \Samples\SampleApp\CC2430DB\..\..\..\..\..\Compo /
//                          nents\mac\high_level\ -I                         /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf03\ -I E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨ /
//                          Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Project /
//                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf03\single_chip\   /
//                          -D CC2430EB -D NWK_AUTO_POLL -D ZTOOL_P1 -D      /
//                          MT_TASK -D ZG_ENDDEVICE -lC                      /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\ -lA           /
//                          E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\               /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ /
//                          ÚÊÕ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples /
//                          \SampleApp\CC2430DB\EndDeviceEB\Obj\ -e          /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\stack\nwk\nwk_globals.c"                     /
//    List file          =  E:\CPESÆ½Ì¨\Ó²¼þÆ½Ì¨\CC2430Í¨Ñ¶Æ½Ì¨\CC2430´®¿ÚÊÕ /
//                          ·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2430DB\EndDeviceEB\List\nwk_globals.s5 /
//                          1                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME nwk_globals

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC NIB_init
        FUNCTION NIB_init,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC apscMaxWindowSize
        PUBLIC defaultKey
        PUBLIC gAPS_INTERFRAME_DELAY
        PUBLIC gAPS_MAX_GROUPS
        PUBLIC gMAX_NEIGHBOR_ENTRIES
        PUBLIC gMAX_RREQ_ENTRIES
        PUBLIC gMAX_RTG_ENTRIES
        PUBLIC gMAX_UNRESERVED_RTG_ENTRIES
        PUBLIC gMIN_TREE_LINK_COST
        PUBLIC gNWK_INDIRECT_CNT_RTG_TMR
        PUBLIC gNWK_INDIRECT_MSG_MAX_ALL
        PUBLIC gNWK_INDIRECT_MSG_MAX_PER
        PUBLIC gNWK_MAX_DATABUFS_CONFIRMED
        PUBLIC gNWK_MAX_DATABUFS_SCHEDULED
        PUBLIC gNWK_MAX_DATABUFS_TOTAL
        PUBLIC gNWK_MAX_DATABUFS_WAITING
        PUBLIC gNWK_MAX_DEVICE_LIST
        PUBLIC neighborTable
        PUBLIC nwk_Status
        FUNCTION nwk_Status,0203H
        PUBLIC nwk_globals_init
        FUNCTION nwk_globals_init,021203H
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        EXTERN AddrMgrInit
        FUNCTION AddrMgrInit,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN osal_cpyExtAddr
        FUNCTION osal_cpyExtAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _NIB
        EXTERN zgBcastDeliveryTime
        EXTERN zgExtendedPANID
        EXTERN zgIndirectMsgTimeout
        EXTERN zgMaxBcastRetires
        EXTERN zgPassiveAckTimeout
        EXTERN zgRouteExpiryTime
        EXTERN zgSecurityLevel

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\nwk\nwk_globals.c
//    1 /*********************************************************************
//    2     Filename:       nwk_globals.c
//    3     Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
//    4     Revision:       $Revision: 14296 $
//    5 
//    6     Description:
//    7 
//    8         User definable Network Parameters.
//    9 
//   10     Notes:
//   11 
//   12     Copyright (c) 2006 by Texas Instruments, Inc.
//   13     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   14     derivative works, modify, distribute, perform, display or sell this
//   15     software and/or its documentation for any purpose is prohibited
//   16     without the express written consent of Texas Instruments, Inc.
//   17 *********************************************************************/
//   18 
//   19 /*********************************************************************
//   20  * INCLUDES
//   21  */
//   22 #include "ZComdef.h"
//   23 #include "OSAL.h"
//   24 #include "AddrMgr.h"
//   25 #include "AssocList.h"
//   26 #include "BindingTable.h"
//   27 #include "nwk_globals.h"
//   28 #include "ssp.h"
//   29 #include "rtg.h"
//   30 #include "ZDConfig.h"
//   31 #include "ZGlobals.h"
//   32 
//   33 #if defined ( LCD_SUPPORTED )
//   34   #include "OnBoard.h"
//   35 #endif
//   36 
//   37 /* HAL */
//   38 #include "hal_lcd.h"
//   39 
//   40 /*********************************************************************
//   41  * MACROS
//   42  */
//   43 
//   44 /*********************************************************************
//   45  * CONSTANTS
//   46  */
//   47 
//   48 // Maximums for the data buffer queue
//   49 #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
//   50 #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
//   51 #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
//   52 #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
//   53 
//   54 // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
//   55 // A known shortcoming is that when a message is enqueued as "hold" for a
//   56 // sleeping device, the timer tick may have counted down to 1, so that msg
//   57 // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
//   58 // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
//   59 // So the hold time will vary within this interval:
//   60 // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
//   61 //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
//   62 #define NWK_INDIRECT_CNT_RTG_TMR    1  //ggg - need hours or days?
//   63 // To hold msg for sleeping end devices for 30 secs:
//   64 // #define CNT_RTG_TIMER            1
//   65 // #define NWK_INDIRECT_MSG_TIMEOUT 30
//   66 // To hold msg for sleeping end devices for 30 mins:
//   67 // #define CNT_RTG_TIMER            60
//   68 // #define NWK_INDIRECT_MSG_TIMEOUT 30
//   69 // To hold msg for sleeping end devices for 30 days:
//   70 // #define CNT_RTG_TIMER            60
//   71 // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
//   72 // Maximum msgs to hold per associated device.
//   73 #define NWK_INDIRECT_MSG_MAX_PER    3
//   74 // Maximum total msgs to hold for all associated devices.
//   75 #define NWK_INDIRECT_MSG_MAX_ALL    \ 
//   76                             (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
//   77 
//   78 
//   79 /*********************************************************************
//   80  * TYPEDEFS
//   81  */
//   82 
//   83 /*********************************************************************
//   84  * NWK GLOBAL VARIABLES
//   85  */
//   86 
//   87 // Variables for MAX list size

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   88 CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
gNWK_MAX_DEVICE_LIST:
        DW 21
//   89 
//   90 // Variables for MAX data buffer levels

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   91 CONST byte gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
gNWK_MAX_DATABUFS_WAITING:
        DB 8

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   92 CONST byte gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
gNWK_MAX_DATABUFS_SCHEDULED:
        DB 5

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   93 CONST byte gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
gNWK_MAX_DATABUFS_CONFIRMED:
        DB 5

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   94 CONST byte gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
gNWK_MAX_DATABUFS_TOTAL:
        DB 12
//   95 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   96 CONST byte gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
gNWK_INDIRECT_CNT_RTG_TMR:
        DB 1

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   97 CONST byte gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
gNWK_INDIRECT_MSG_MAX_PER:
        DB 3

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   98 CONST byte gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
gNWK_INDIRECT_MSG_MAX_ALL:
        DB 9
//   99 
//  100 #if defined ( RTR_NWK )
//  101   // change this if using a different stack profile...
//  102   // Cskip array
//  103   uint16 *Cskip;
//  104 
//  105   #if ( STACK_PROFILE_ID == HOME_CONTROLS )
//  106     byte CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
//  107     byte CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
//  108   #elif ( STACK_PROFILE_ID == GENERIC_STAR )
//  109     byte CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  110     byte CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  111   #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
//  112     byte CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  113     byte CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  114   #endif // STACK_PROFILE_ID
//  115 #endif  // RTR_NWK
//  116 
//  117 
//  118 // Minimum lqi value that is required for association

        RSEG XDATA_I:XDATA:NOROOT(0)
//  119 byte gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
gMIN_TREE_LINK_COST:
        DS 1
        REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
        REQUIRE __INIT_XDATA_I
//  120 
//  121 #if defined(RTR_NWK)
//  122   // Statically defined Associated Device List
//  123   associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
//  124 #endif
//  125 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//  126 CONST byte gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
gMAX_RTG_ENTRIES:
        DB 20

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//  127 CONST byte gMAX_UNRESERVED_RTG_ENTRIES = MAX_UNRESERVED_RTG_ENTRIES;
gMAX_UNRESERVED_RTG_ENTRIES:
        DB 16

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//  128 CONST byte gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
gMAX_RREQ_ENTRIES:
        DB 10
//  129 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//  130 CONST byte gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
gMAX_NEIGHBOR_ENTRIES:
        DB 4
//  131 
//  132  // Table of neighboring nodes (not including child nodes)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  133 neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
neighborTable:
        DS 44
//  134 
//  135 #if defined ( RTR_NWK )
//  136   // Routing table
//  137   rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
//  138 
//  139   // Table of current RREQ packets in the network
//  140   rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
//  141   
//  142   // Table of data broadcast packets currently in circulation.
//  143   bcastEntry_t bcastTable[MAX_BCAST];
//  144   
//  145   // These 2 arrays are to be used as an array of struct { uint8, uint32 }.
//  146   uint8 bcastHoldHandle[MAX_BCAST];
//  147   uint32 bcastHoldAckMask[MAX_BCAST];
//  148   
//  149   CONST byte gMAX_BCAST = MAX_BCAST;
//  150 #endif
//  151 
//  152 /*********************************************************************
//  153  * APS GLOBAL VARIABLES
//  154  */
//  155 
//  156 #if defined ( REFLECTOR )
//  157   // The Maximum number of binding records
//  158   // This number is defined in BindingTable.h - change it there.
//  159   CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
//  160 
//  161   // The Maximum number of cluster IDs in a binding record
//  162   // This number is defined in BindingTable.h - change it there.
//  163   CONST byte gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
//  164 
//  165   CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
//  166 
//  167   // Binding Table
//  168   BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
//  169 #endif
//  170 
//  171 // Maximum number allowed in the groups table.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//  172 CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
gAPS_MAX_GROUPS:
        DB 16
//  173 
//  174 // The size of a tx window when using fragmentation

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//  175 CONST uint8 apscMaxWindowSize = APS_DEFAULT_WINDOW_SIZE;
apscMaxWindowSize:
        DB 5
//  176 
//  177 // The delay between tx packets when using fragmentaition

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//  178 CONST uint16 gAPS_INTERFRAME_DELAY = APS_DEFAULT_INTERFRAME_DELAY;
gAPS_INTERFRAME_DELAY:
        DW 50
//  179 
//  180 
//  181 /*********************************************************************
//  182  * SECURITY GLOBAL VARIABLES
//  183  */
//  184 
//  185 // This is the default pre-configured key,
//  186 // change this to make a unique key
//  187 // SEC_KEY_LEN is defined in ssp.h.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//  188 CONST byte defaultKey[SEC_KEY_LEN] =
defaultKey:
        DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
//  189 {
//  190 #if defined ( APP_TP ) || defined ( APP_TP2 )
//  191   // Key for ZigBee Conformance Testing
//  192   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  193   0x89, 0x67, 0x45, 0x23, 0x01, 0xEF, 0xCD, 0xAB
//  194 #else
//  195   // Key for In-House Testing
//  196   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
//  197   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
//  198 #endif
//  199 };
//  200 
//  201 
//  202 /*********************************************************************
//  203  * STATUS STRINGS
//  204  */
//  205 #if defined ( LCD_SUPPORTED )
//  206   const char PingStr[]         = "Ping Rcvd from";
//  207   const char AssocCnfStr[]     = "Assoc Cnf";
//  208   const char SuccessStr[]      = "Success";
//  209   const char EndDeviceStr[]    = "EndDevice:";
//  210   const char ParentStr[]       = "Parent:";
//  211   const char ZigbeeCoordStr[]  = "ZigBee Coord";
//  212   const char NetworkIDStr[]    = "Network ID:";
//  213   const char RouterStr[]       = "Router:";
//  214   const char OrphanRspStr[]    = "Orphan Response";
//  215   const char SentStr[]         = "Sent";
//  216   const char FailedStr[]       = "Failed";
//  217   const char AssocRspFailStr[] = "Assoc Rsp fail";
//  218   const char AssocIndStr[]     = "Assoc Ind";
//  219   const char AssocCnfFailStr[] = "Assoc Cnf fail";
//  220   const char EnergyLevelStr[]  = "Energy Level";
//  221   const char ScanFailedStr[]   = "Scan Failed";
//  222 #endif
//  223 
//  224 /*********************************************************************
//  225  * @fn       nwk_globals_init()
//  226  *
//  227  * @brief
//  228  *
//  229  *   Initialize nwk layer globals.  These are the system defaults and
//  230  *   should be changed by the user here.  The default definitions are
//  231  *   defined in nwk.h or NLMEDE.h.
//  232  *
//  233  * @param   none
//  234  *
//  235  * @return  none
//  236  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  237 void nwk_globals_init( void )
nwk_globals_init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function nwk_globals_init
//  238 {
        FUNCALL nwk_globals_init, AddrMgrInit
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  239   AddrMgrInit( NWK_MAX_ADDRESSES );
        ; Setup parameters for call to function AddrMgrInit
        MOV	R2,#0x16
        MOV	R3,#0x0
        MOV	DPTR,#(AddrMgrInit & 0xffff)
        MOV	A,#((AddrMgrInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        CFI EndBlock cfiBlock0
//  240 
//  241 #if defined ( RTR_NWK )
//  242   // Initialize the Cskip Table
//  243   Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
//  244   RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
//  245 #endif
//  246 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock1
//  247 
//  248 /*********************************************************************
//  249  * @fn       NIB_init()
//  250  *
//  251  * @brief
//  252  *
//  253  *   Initialize attribute values in NIB
//  254  *
//  255  * @param   none
//  256  *
//  257  * @return  none
//  258  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  259 void NIB_init()
NIB_init:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function NIB_init
//  260 {
        FUNCALL NIB_init, osal_memset
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL NIB_init, osal_cpyExtAddr
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  261 #if defined ( AUTO_SOFT_START )
//  262   byte extAddr[Z_EXTADDR_LEN];
//  263   ZMacGetReq( ZMacExtAddr, extAddr );
//  264   _NIB.SequenceNum = extAddr[0];
//  265 #else
//  266   _NIB.SequenceNum = 1;
        MOV	A,#0x1
        MOV	DPTR,#_NIB
        MOVX	@DPTR,A
//  267 #endif
//  268 
//  269   _NIB.MaxDepth = MAX_NODE_DEPTH;
        MOV	A,#0x5
        MOV	DPTR,#(_NIB + 4)
        MOVX	@DPTR,A
//  270 
//  271 #if ( NWK_MODE == NWK_MODE_MESH )
//  272   _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
        MOV	A,#0xf
        MOV	DPTR,#(_NIB + 40)
        MOVX	@DPTR,A
//  273   _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
        MOV	DPTR,#(_NIB + 41)
        MOVX	@DPTR,A
//  274 #endif
//  275 
//  276    // BROADCAST SETTINGS:
//  277    // *******************
//  278    //   Broadcast Delivery Time
//  279    //     - set to multiples of 100ms 
//  280    //     - should be 500ms more than the retry time
//  281    //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
//  282    //   Passive Ack Timeout
//  283    //     - set to multiples of 100ms 
//  284    _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
        MOV	DPTR,#zgBcastDeliveryTime
        MOVX	A,@DPTR
        MOV	DPTR,#(_NIB + 7)
        MOVX	@DPTR,A
//  285    _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
        MOV	DPTR,#zgPassiveAckTimeout
        MOVX	A,@DPTR
        MOV	DPTR,#(_NIB + 1)
        MOVX	@DPTR,A
//  286    _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
        MOV	DPTR,#zgMaxBcastRetires
        MOVX	A,@DPTR
        MOV	DPTR,#(_NIB + 2)
        MOVX	@DPTR,A
//  287 
//  288    _NIB.ReportConstantCost = 0;
        CLR	A
        MOV	DPTR,#(_NIB + 8)
        MOVX	@DPTR,A
//  289    _NIB.RouteDiscRetries = 0;
        MOV	DPTR,#(_NIB + 9)
        MOVX	@DPTR,A
//  290    _NIB.SecureAllFrames = USE_NWK_SECURITY;
        MOV	DPTR,#(_NIB + 11)
        MOVX	@DPTR,A
//  291    _NIB.SecurityLevel = zgSecurityLevel;
        MOV	DPTR,#zgSecurityLevel
        MOVX	A,@DPTR
        MOV	DPTR,#(_NIB + 12)
        MOVX	@DPTR,A
//  292    _NIB.SymLink = 0;
        CLR	A
        MOV	DPTR,#(_NIB + 13)
        MOVX	@DPTR,A
//  293    _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV	DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX	A,@DPTR
        MOV	DPTR,#(_NIB + 14)
        MOVX	@DPTR,A
//  294 
//  295    _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
        MOV	DPTR,#zgIndirectMsgTimeout
        MOVX	A,@DPTR
        MOV	DPTR,#(_NIB + 15)
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  296 
//  297    _NIB.RouteDiscoveryTime = 5;
        MOV	A,#0x5
        MOV	DPTR,#(_NIB + 18)
        MOVX	@DPTR,A
//  298    _NIB.RouteExpiryTime = zgRouteExpiryTime;
        MOV	DPTR,#zgRouteExpiryTime
        MOVX	A,@DPTR
        MOV	DPTR,#(_NIB + 19)
        MOVX	@DPTR,A
//  299 
//  300    _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV	DPTR,#(_NIB + 20)
        MOV	A,#-0x2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#-0x1
        MOVX	@DPTR,A
//  301    _NIB.nwkLogicalChannel = 0;
        CLR	A
        MOV	DPTR,#(_NIB + 22)
        MOVX	@DPTR,A
//  302    _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
        MOV	DPTR,#(_NIB + 23)
        MOV	A,#-0x2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#-0x1
        MOVX	@DPTR,A
//  303    osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV	R4,#0x8
        MOV	R5,#0x0
        MOV	R1,#0x0
        MOV	R2,#((_NIB + 25) & 0xff)
        MOV	R3,#(((_NIB + 25) >> 8) & 0xff)
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  304    _NIB.nwkPanId = INVALID_NODE_ADDR;
        MOV	DPTR,#(_NIB + 33)
        MOV	A,#-0x2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#-0x1
        MOVX	@DPTR,A
//  305 
//  306    osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	R4,#(zgExtendedPANID & 0xff)
        MOV	R5,#((zgExtendedPANID >> 8) & 0xff)
        MOV	R2,#((_NIB + 53) & 0xff)
        MOV	R3,#(((_NIB + 53) >> 8) & 0xff)
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  307    
//  308    _NIB.nwkKeyLoaded = FALSE;
        CLR	A
        MOV	DPTR,#(_NIB + 61)
        MOVX	@DPTR,A
//  309 }
        LJMP	?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  310 
//  311 /*********************************************************************
//  312  * @fn       nwk_Status()
//  313  *
//  314  * @brief
//  315  *
//  316  *   Status report.
//  317  *
//  318  * @param   statusCode
//  319  * @param   statusValue
//  320  *
//  321  * @return  none
//  322  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  323 void nwk_Status( uint16 statusCode, uint16 statusValue )
nwk_Status:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function nwk_Status
//  324 {
        ; Saved register size: 0
        ; Auto size: 0
//  325 #if defined ( LCD_SUPPORTED )
//  326   switch ( statusCode )
//  327   {
//  328 
//  329 #if defined( RTR_NWK )
//  330     case NWK_STATUS_COORD_ADDR:
//  331       HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
//  332       HalLcdWriteStringValue( (char*)NetworkIDStr, (uint32)statusValue, 16, HAL_LCD_LINE_2 );
//  333       BuzzerControl( BUZZER_BLIP );
//  334       break;
//  335 
//  336     case NWK_STATUS_ROUTER_ADDR:
//  337       HalLcdWriteStringValue( (char*)RouterStr, (uint32)statusValue, 16, HAL_LCD_LINE_1 );
//  338       break;
//  339 
//  340     case NWK_STATUS_ORPHAN_RSP:
//  341       if ( statusValue == ZSuccess )
//  342         HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
//  343       else
//  344         HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
//  345       break;
//  346 
//  347     case NWK_ERROR_ASSOC_RSP:
//  348       HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
//  349       HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
//  350       break;
//  351 #else
//  352     case NWK_STATUS_ED_ADDR:
//  353             HalLcdWriteStringValue( (char*)EndDeviceStr, (uint32)statusValue, 16, HAL_LCD_LINE_1 );
//  354       break;
//  355 #endif
//  356 
//  357     case NWK_STATUS_PARENT_ADDR:
//  358             HalLcdWriteStringValue( (char*)ParentStr, (uint32)statusValue, 16, HAL_LCD_LINE_2 );
//  359       break;
//  360 
//  361     case NWK_STATUS_ASSOC_CNF:
//  362       HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
//  363       break;
//  364 
//  365     case NWK_ERROR_ASSOC_CNF_DENIED:
//  366       HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
//  367       HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
//  368       break;
//  369 
//  370     case NWK_ERROR_ENERGY_SCAN_FAILED:
//  371       HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
//  372       break;
//  373   }
//  374 #endif
//  375 }
        LJMP	?BRET
        CFI EndBlock cfiBlock3

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for gMIN_TREE_LINK_COST>`:
        DB 6

        END
//  376 
//  377 /*********************************************************************
//  378 *********************************************************************/
// 
// 212 bytes in segment BANKED_CODE
//  33 bytes in segment CODE_C
//   1 byte  in segment XDATA_I
//   1 byte  in segment XDATA_ID
//  44 bytes in segment XDATA_Z
// 
// 246 bytes of CODE  memory
//  45 bytes of XDATA memory
//
//Errors: none
//Warnings: none
