//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  24/Jan/2013  14:47:43 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\mt\MTEL.c                                     /
//    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\Tools\CC2430D /
//                          B\f8wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR     /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DRTR_NWK -DBLINK_LEDS "-DCONST=const        /
//                          __code" -DGENERIC=__generic) -f                  /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f /
//                          8wConfig.cfg (-DSECURE=0                         /
//                          -DDEFAULT_CHANLIST=0x00000800                    /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                     /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\ -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\Source\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\  /
//                          -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ /
//                          \ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ /
//                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                      /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \hal\target\CC2430EB\ -I                         /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \osal\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I            /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢× /
//                          ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 /
//                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\sec\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\stack\sys\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \zmac\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ /
//                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Z /
//                          igBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\services\saddr\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \services\sdata\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\high_level\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf03\ -I     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf03\single_chip\ -D CC2430EB    /
//                          -D ZTOOL_P1 -D MT_TASK -lC                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ -lA        /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\            /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\RouterEB\Obj\ -e       /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\mt\MTEL.c"                                   /
//    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\MTEL.s51    /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME MTEL

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC MTProcessAppMsg
        FUNCTION MTProcessAppMsg,021203H
        ARGFRAME XSTACK, 35, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC MTProcessAppRspMsg
        FUNCTION MTProcessAppRspMsg,021203H
        ARGFRAME XSTACK, 14, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MTProcessLedControl
        FUNCTION MTProcessLedControl,021203H
        ARGFRAME XSTACK, 35, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MTVersionString
        PUBLIC MT_BuildAndSendZToolCB
        FUNCTION MT_BuildAndSendZToolCB,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,021203H
        ARGFRAME XSTACK, 37, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC MT_BuildSPIMsg
        FUNCTION MT_BuildSPIMsg,021203H
        ARGFRAME XSTACK, 27, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_IndReset
        FUNCTION MT_IndReset,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC MT_ProcessCommand
        FUNCTION MT_ProcessCommand,0a1203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_ProcessDebugMsg
        FUNCTION MT_ProcessDebugMsg,021203H
        ARGFRAME XSTACK, 14, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC MT_ProcessDebugStr
        FUNCTION MT_ProcessDebugStr,021203H
        ARGFRAME XSTACK, 14, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_ProcessEvent
        FUNCTION MT_ProcessEvent,021203H
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ProcessGetDeviceInfo
        FUNCTION MT_ProcessGetDeviceInfo,021203H
        ARGFRAME XSTACK, 35, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC MT_ProcessGetNV
        FUNCTION MT_ProcessGetNV,021203H
        ARGFRAME XSTACK, 35, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ProcessGetNvInfo
        FUNCTION MT_ProcessGetNvInfo,021203H
        ARGFRAME XSTACK, 35, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC MT_ProcessSerialCommand
        FUNCTION MT_ProcessSerialCommand,0a1203H
        ARGFRAME XSTACK, 14, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC MT_ProcessSetNV
        FUNCTION MT_ProcessSetNV,021203H
        ARGFRAME XSTACK, 35, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_RAMRead
        FUNCTION MT_RAMRead,0203H
        ARGFRAME XSTACK, 35, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC MT_RAMWrite
        FUNCTION MT_RAMWrite,0203H
        ARGFRAME XSTACK, 35, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC MT_Reset
        FUNCTION MT_Reset,080203H
        ARGFRAME XSTACK, 35, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_ReverseBytes
        FUNCTION MT_ReverseBytes,0203H
        ARGFRAME XSTACK, 35, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_SendErrorNotification
        FUNCTION MT_SendErrorNotification,021203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC MT_SendSPIRespMsg
        FUNCTION MT_SendSPIRespMsg,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_SetDebugThreshold
        FUNCTION MT_SetDebugThreshold,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MT_TaskID
        PUBLIC MT_TaskInit
        FUNCTION MT_TaskInit,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_53544159
        PUBLIC debugCompId
        PUBLIC debugThreshold
        PUBLIC longvar
        PUBWEAK mboxMsg
        PUBLIC save_cmd
        PUBLIC temp_glob_ptr1
        PUBLIC temp_glob_ptr2
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN SPIMgr_Init
        FUNCTION SPIMgr_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 21, STACK
        EXTERN SPIMgr_CalcFCS
        FUNCTION SPIMgr_CalcFCS,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME XSTACK, 25, STACK
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME XSTACK, 25, STACK
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME XSTACK, 18, STACK
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME XSTACK, 25, STACK
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME XSTACK, 37, STACK
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME XSTACK, 39, STACK
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME XSTACK, 26, STACK
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME XSTACK, 15, STACK
        EXTERN AssocMakeList
        FUNCTION AssocMakeList,0202H
        ARGFRAME XSTACK, 15, STACK
        EXTERN NLME_GetProtocolVersion
        FUNCTION NLME_GetProtocolVersion,0202H
        ARGFRAME XSTACK, 35, STACK
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME XSTACK, 35, STACK
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME XSTACK, 35, STACK
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME XSTACK, 35, STACK
        EXTERN osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0202H
        ARGFRAME XSTACK, 35, STACK
        EXTERN OnBoard_SendKeys
        FUNCTION OnBoard_SendKeys,0202H
        ARGFRAME XSTACK, 35, STACK
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME XSTACK, 18, STACK
        EXTERN devState

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mt\MTEL.c
//    1 /*********************************************************************
//    2     Filename:       MTEL.c
//    3     Revised:        $Date: 2007-05-16 11:21:09 -0700 (Wed, 16 May 2007) $
//    4     Revision:       $Revision: 14313 $
//    5 
//    6     Description:
//    7 
//    8         MonitorTest Event Loop functions.  Everything in the
//    9         MonitorTest Task (except the serial driver).
//   10 
//   11     Notes:
//   12 
//   13     Copyright (c) 2006 by Texas Instruments, Inc.
//   14     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   15     derivative works, modify, distribute, perform, display or sell this
//   16     software and/or its documentation for any purpose is prohibited
//   17     without the express written consent of Texas Instruments, Inc.
//   18 *********************************************************************/
//   19 
//   20 #if defined( MT_TASK )
//   21 
//   22 /*********************************************************************
//   23  * INCLUDES
//   24  */
//   25 #include "ZComDef.h"
//   26 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DS 1

        ASEGN XDATA_AN:XDATA:NOROOT,0e000H
// mboxMsg_t __xdata mboxMsg
mboxMsg:
        DS 8

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "1.00 (F8W1.4.2)">`:
        DS 16
        REQUIRE `?<Initializer for <Constant "1.00 (F8W1.4.2)">`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "1.10 (F8W1.4.2)">`:
        DS 16
        REQUIRE `?<Initializer for <Constant "1.10 (F8W1.4.2)">`
        REQUIRE __INIT_XDATA_I
//   27 #include "OSAL.h"
//   28 #include "OSAL_Memory.h"
//   29 #include "OSAL_Nv.h"
//   30 #include "MTEL.h"
//   31 #include "DebugTrace.h"
//   32 #include "ZMAC.h"
//   33 
//   34 #if !defined ( NONWK )
//   35   #include "NLMEDE.h"
//   36   #include "nwk_bufs.h"
//   37   #include "ZDObject.h"
//   38   #include "ssp.h"
//   39   #include "nwk_util.h"
//   40 #endif
//   41 
//   42 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   43   #include "MT_MAC.h"
//   44 #endif
//   45 #if defined( MT_NWK_FUNC ) || defined( MT_NWK_CB_FUNC )
//   46   #include "MT_NWK.h"
//   47   #include "nwk.h"
//   48   #include "nwk_bufs.h"
//   49 #endif
//   50 #if defined( MT_AF_FUNC ) || defined( MT_AF_CB_FUNC )
//   51   #include "MT_AF.h"
//   52 #endif
//   53 #if defined( MT_USER_TEST_FUNC )
//   54   #include "AF.h"
//   55 #endif
//   56 #if defined( MT_ZDO_FUNC )
//   57   #include "MT_ZDO.h"
//   58 #endif
//   59 #if defined (MT_SAPI_FUNC)
//   60 	#include "MT_SAPI.h"
//   61 #endif
//   62 #if defined( APP_TP )
//   63  #include "TestProfile.h"
//   64 #endif
//   65 #if defined( APP_TP2 )
//   66  #include "TestProfile2.h"
//   67 #endif
//   68 
//   69 #if defined(APP_TGEN)
//   70   #include "TrafficGenApp.h"
//   71 #endif
//   72 #if defined(APP_DEBUG)
//   73 	#include "DebugApp.h"
//   74 #endif
//   75 #if defined (NWK_TEST)
//   76 	#include "HWTTApp.h"
//   77 #endif
//   78 
//   79 /* HAL */
//   80 #include "hal_uart.h"
//   81 #include "hal_led.h"
//   82 #include "hal_key.h"
//   83 #include "hal_mailbox.h"
//   84 #include "SPIMgr.h"
//   85 
//   86 /*********************************************************************
//   87  * MACROS
//   88  */
//   89 #define MTEL_DEBUG_INFO( nParams, p1, p2, p3 ) DEBUG_INFO( COMPID_MTEL, nParams, p1, p2, p3 )
//   90 
//   91 #if defined( EXTERNAL_RAM )
//   92   #define IS_MEM_VALID( Addr )  \ 
//   93         /* Check for valid internal RAM address. */\ 
//   94     ( ( (((Addr) >= MCU_RAM_BEG) && ((Addr) <= MCU_RAM_END)) ||  \ 
//   95         /* Check for valid external RAM address. */\ 
//   96         (((Addr) >= EXT_RAM_BEG) && ((Addr) <= EXT_RAM_END)) ) ? TRUE : FALSE )
//   97 #else
//   98   #define IS_MEM_VALID( Addr )  \ 
//   99         /* Check for valid internal RAM address. */\ 
//  100     ( ( ((Addr) >= MCU_RAM_BEG) && ((Addr) <= MCU_RAM_END) ) ? TRUE : FALSE )
//  101 #endif
//  102 
//  103 /*********************************************************************
//  104  * CONSTANTS
//  105  */
//  106 
//  107 #ifdef ZPORT
//  108 const char *MTVersionString[] = {"1.00 (F8W1.4.2-ZP)", "1.10 (F8W1.4.2-ZP)"};
//  109 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  110 const char *MTVersionString[] = {"1.00 (F8W1.4.2)", "1.10 (F8W1.4.2)"};
MTVersionString:
        DS 4
        REQUIRE `?<Initializer for MTVersionString>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_3e8:
        DS 4
        REQUIRE `?<Initializer for __Constant_3e8>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_53544159:
        DS 4
        REQUIRE `?<Initializer for __Constant_53544159>`
        REQUIRE __INIT_XDATA_I
//  111 #endif
//  112 
//  113 /*********************************************************************
//  114  * TYPEDEFS
//  115  */
//  116 
//  117 /*********************************************************************
//  118  * GLOBAL VARIABLES
//  119  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  120 byte MT_TaskID;
MT_TaskID:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  121 byte debugThreshold;
debugThreshold:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  122 byte debugCompId;
debugCompId:
        DS 1
//  123 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  124 UINT16 save_cmd;
save_cmd:
        DS 2
//  125 
//  126 //DEBUG

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  127 uint32 longvar;
longvar:
        DS 4

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  128 uint16 *temp_glob_ptr1;
temp_glob_ptr1:
        DS 2

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  129 uint16 *temp_glob_ptr2;
temp_glob_ptr2:
        DS 2
//  130 
//  131 /*********************************************************************
//  132  * EXTERNAL VARIABLES
//  133  */
//  134 
//  135 /*********************************************************************
//  136  * EXTERNAL FUNCTIONS
//  137  */
//  138 extern unsigned int mac_sim_eventLoop( void );
//  139 
//  140 #ifdef MACSIM
//  141   // Used to pass Zignet message
//  142   extern void MACSIM_TranslateMsg( byte *buf, byte bLen );
//  143 #endif
//  144 
//  145 /*********************************************************************
//  146  * LOCAL VARIABLES
//  147  */
//  148 
//  149 /*********************************************************************
//  150  * LOCAL FUNCTIONS
//  151  */
//  152 void MT_MsgQueueInit( void );
//  153 void MT_ProcessCommand( mtOSALSerialData_t *msg );
//  154 void MT_ProcessSerialCommand( byte *msg );
//  155 byte MT_RAMRead( UINT16 addr, byte *pData );
//  156 byte MT_RAMWrite( UINT16 addr , byte val );
//  157 void MT_ProcessDebugMsg( mtDebugMsg_t *pData );
//  158 void MT_ProcessDebugStr( mtDebugStr_t *pData );
//  159 byte MT_SetDebugThreshold( byte comp_id, byte threshold );
//  160 void MT_SendErrorNotification( byte err );
//  161 void MT_ResetMsgQueue( void );
//  162 byte MT_QueueMsg( byte *msg , byte len );
//  163 void MT_ProcessQueue( void );
//  164 void MT_SendSPIRespMsg( byte ret, uint16 cmd_id, byte msgLen, byte respLen);
//  165 void MT_Reset(byte typID);
//  166 byte MT_ProcessSetNV( byte *pData );
//  167 void MT_ProcessGetNV( byte *pData );
//  168 void MT_ProcessGetNvInfo( void );
//  169 void MT_ProcessGetDeviceInfo( void );
//  170 byte MTProcessAppMsg( byte *pData, byte len );
//  171 void MTProcessAppRspMsg( byte *pData, byte len );
//  172 
//  173 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  174 byte MTProcessLedControl( byte *pData );
//  175 #endif
//  176 
//  177 #if defined ( MT_USER_TEST_FUNC )
//  178 void MT_ProcessAppUserCmd( byte *pData );
//  179 #endif
//  180 
//  181 /*********************************************************************
//  182  * @fn      MT_TaskInit
//  183  *
//  184  * @brief
//  185  *
//  186  *   MonitorTest Task Initialization.  This function is put into the
//  187  *   task table.
//  188  *
//  189  * @param   byte task_id - task ID of the MT Task
//  190  *
//  191  * @return  void
//  192  *
//  193  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  194 void MT_TaskInit( byte task_id )
MT_TaskInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_TaskInit
//  195 {
        FUNCALL MT_TaskInit, SPIMgr_Init
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  196   MT_TaskID = task_id;
        MOV	A,R1
        MOV	DPTR,#MT_TaskID
        MOVX	@DPTR,A
//  197 
//  198   debugThreshold = 0;
        CLR	A
        MOV	DPTR,#debugThreshold
        MOVX	@DPTR,A
//  199   debugCompId = 0;
        MOV	DPTR,#debugCompId
        MOVX	@DPTR,A
//  200 
//  201   // Initialize the Serial port
//  202   SPIMgr_Init();
        ; Setup parameters for call to function SPIMgr_Init
        MOV	DPTR,#(SPIMgr_Init & 0xffff)
        MOV	A,#((SPIMgr_Init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  203 
//  204 } /* MT_TaskInit() */
        LJMP	?Subroutine16 & 0xFFFF
        CFI EndBlock cfiBlock0
//  205 
//  206 #ifdef ZTOOL_PORT
//  207 /*********************************************************************
//  208  * @fn      MT_IndReset()
//  209  *
//  210  * @brief   Sends a ZTOOL "reset response" message.
//  211  *
//  212  * @param   None
//  213  *
//  214  * @return  None
//  215  *
//  216  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  217 void MT_IndReset( void )
MT_IndReset:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function MT_IndReset
//  218 {
        FUNCALL MT_IndReset, MT_BuildAndSendZToolResponse
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  219 
//  220   byte rsp = 0;  // Reset type==0 indicates Z-Stack reset
        CLR	A
        LCALL	?Subroutine2 & 0xFFFF
//  221 
//  222   // Send out Reset Response message
//  223   MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + sizeof( rsp )),
//  224                                 (SPI_RESPONSE_BIT | SPI_CMD_SYS_RESET),
//  225                                 sizeof( rsp ), &rsp );
??CrossCallReturnLabel_8:
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	R4,#0x1
        MOV	R2,#0x5
        LJMP	?Subroutine17 & 0xFFFF
        CFI EndBlock cfiBlock1
//  226 }
//  227 #endif
//  228 
//  229 /*********************************************************************
//  230  * @fn      MT_ProcessEvent
//  231  *
//  232  * @brief
//  233  *
//  234  *   MonitorTest Task Event Processor.  This task is put into the
//  235  *   task table.
//  236  *
//  237  * @param   byte task_id - task ID of the MT Task
//  238  * @param   UINT16 events - event(s) for the MT Task
//  239  *
//  240  * @return  void
//  241  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  242 UINT16 MT_ProcessEvent( byte task_id, UINT16 events )
MT_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function MT_ProcessEvent
//  243 {
        FUNCALL MT_ProcessEvent, MT_SendErrorNotification
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL MT_ProcessEvent, MT_ProcessCommand
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL MT_ProcessEvent, osal_msg_receive
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  244   uint8 *msg_ptr;
//  245 
//  246   // Could be multiple events, so switch won't work
//  247 
//  248   if ( events & SYS_EVENT_MSG )
        MOV	A,#-0x80
        ANL	A,R7
        MOV	R1,A
        CLR	A
        JNZ	??MT_ProcessEvent_0
        MOV	A,R1
??MT_ProcessEvent_0:
        JNZ	??MT_ProcessEvent_1
//  249   {
//  250     while ( (msg_ptr = osal_msg_receive( MT_TaskID )) )
//  251     {
//  252       MT_ProcessCommand( (mtOSALSerialData_t *)msg_ptr );
//  253     }
//  254 
//  255     // Return unproccessed events
//  256     return (events ^ SYS_EVENT_MSG);
//  257   }
//  258 
//  259 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  260   if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
        MOV	A,R6
        ANL	A,#0x4
        JZ	??MT_ProcessEvent_2
//  261   {
//  262     // Do sometype of error processing
//  263     MT_SendErrorNotification(RECEIVE_BUFFER_FULL);
        ; Setup parameters for call to function MT_SendErrorNotification
        MOV	R1,#0x2
        MOV	DPTR,#(MT_SendErrorNotification & 0xffff)
        MOV	A,#((MT_SendErrorNotification >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  264 
//  265     // Return unproccessed events
//  266     return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
        MOV	A,#0x4
        XRL	A,R6
        MOV	R2,A
        MOV	A,R7
??MT_ProcessEvent_3:
        MOV	R3,A
        SJMP	??MT_ProcessEvent_4
//  267   }
??MT_ProcessEvent_5:
        ; Setup parameters for call to function MT_ProcessCommand
        MOV	DPTR,#(MT_ProcessCommand & 0xffff)
        MOV	A,#((MT_ProcessCommand >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
??MT_ProcessEvent_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV	DPTR,#MT_TaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_msg_receive & 0xffff)
        MOV	A,#((osal_msg_receive >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        JNZ	??MT_ProcessEvent_6
        MOV	A,R3
??MT_ProcessEvent_6:
        JNZ	??MT_ProcessEvent_5
        MOV	A,R6
        MOV	R2,A
        MOV	A,#-0x80
        XRL	A,R7
        SJMP	??MT_ProcessEvent_3
//  268 #endif
//  269 
//  270   // Discard or make more handlers
//  271   return 0;
??MT_ProcessEvent_2:
        MOV	R2,#0x0
        MOV	R3,#0x0
??MT_ProcessEvent_4:
        LJMP	??Subroutine17_1 & 0xFFFF
        CFI EndBlock cfiBlock2
//  272 
//  273 } /* MT_ProcessEvent() */
//  274 
//  275 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  276 /*********************************************************************
//  277  * @fn      MT_BuildSPIMsg
//  278  *
//  279  * @brief
//  280  *
//  281  *   Format an SPI message.
//  282  *
//  283  * @param   UINT16 cmd - command id
//  284  * @param   byte *msg - pointer to message buffer
//  285  * @param   byte dataLen - length of data field
//  286  * @param   byte *pData - pointer to data field
//  287  *
//  288  * @return  void
//  289  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  290 void MT_BuildSPIMsg( UINT16 cmd, byte *msg, byte dataLen, byte *pData )
MT_BuildSPIMsg:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function MT_BuildSPIMsg
//  291 {
        FUNCALL MT_BuildSPIMsg, osal_memcpy
        LOCFRAME XSTACK, 17, STACK
        ARGFRAME XSTACK, 17, STACK
        FUNCALL MT_BuildSPIMsg, SPIMgr_CalcFCS
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
        MOV	?V0 + 3,R1
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
//  292   byte *msgPtr;
//  293 
//  294   *msg++ = SOP_VALUE;
        MOV	A,#0x2
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
        INC	DPTR
        MOV	R6,DPL
        MOV	R7,DPH
//  295 
//  296   msgPtr = msg;
        MOV	?V0 + 4,R6
        MOV	?V0 + 5,R7
//  297 
//  298   *msg++ = (byte)(HI_UINT16( cmd ));
        MOV	A,R3
        MOVX	@DPTR,A
        INC	DPTR
//  299   *msg++ = (byte)(LO_UINT16( cmd ));
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        INC	R6
        INC	R6
        MOV	R7,DPH
//  300 
//  301   if ( pData )
        MOV	A,?V0 + 0
        JNZ	??MT_BuildSPIMsg_0
        MOV	A,?V0 + 1
??MT_BuildSPIMsg_0:
        JZ	??MT_BuildSPIMsg_1
//  302   {
//  303     *msg++ = dataLen;
        MOV	A,R1
        MOVX	@DPTR,A
//  304 
//  305     msg = osal_memcpy( msg, pData, dataLen );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	A,R1
        MOV	R4,A
        MOV	R5,#0x0
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R6,?V0 + 0
        MOV	R7,?V0 + 1
        SJMP	??MT_BuildSPIMsg_2
//  306   }
//  307   else
//  308     *msg++ = 0;
??MT_BuildSPIMsg_1:
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        INC	R6
        MOV	R7,DPH
//  309 
//  310   *msg = SPIMgr_CalcFCS( msgPtr, (byte)(3 + dataLen) );
??MT_BuildSPIMsg_2:
        ; Setup parameters for call to function SPIMgr_CalcFCS
        MOV	A,#0x3
        ADD	A,?V0 + 3
        MOV	R1,A
        MOV	R2,?V0 + 4
        MOV	R3,?V0 + 5
        MOV	DPTR,#(SPIMgr_CalcFCS & 0xffff)
        MOV	A,#((SPIMgr_CalcFCS >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
//  311 }
        LJMP	??Subroutine18_1 & 0xFFFF
        CFI EndBlock cfiBlock3
//  312 #endif
//  313 
//  314 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  315 /*********************************************************************
//  316  * @fn      MT_BuildAndSendZToolResponse
//  317  *
//  318  * @brief
//  319  *
//  320  *   Build and send a ZTOOL msg
//  321  *
//  322  * @param   byte err
//  323  *
//  324  * @return  void
//  325  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  326 void MT_BuildAndSendZToolResponse( byte msgLen, uint16 cmd,
MT_BuildAndSendZToolResponse:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function MT_BuildAndSendZToolResponse
//  327                                    byte dataLen, byte *pData )
//  328 {
        FUNCALL MT_BuildAndSendZToolResponse, osal_mem_alloc
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL MT_BuildAndSendZToolResponse, MT_BuildSPIMsg
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL MT_BuildAndSendZToolResponse, HalUARTWrite
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL MT_BuildAndSendZToolResponse, osal_mem_free
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 2,R1
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
        MOV	?V0 + 3,R4
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
//  329   byte *msg_ptr;
//  330 
//  331   // Get a message buffer to build response message
//  332   msg_ptr = osal_mem_alloc( msgLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV	A,R1
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	R6,?V0 + 4
        MOV	R7,?V0 + 5
//  333   if ( msg_ptr )
        MOV	A,R6
        JNZ	??MT_BuildAndSendZToolResponse_0
        MOV	A,R7
??MT_BuildAndSendZToolResponse_0:
        JZ	??MT_BuildAndSendZToolResponse_1
//  334   {
//  335 #ifdef SPI_MGR_DEFAULT_PORT
//  336     MT_BuildSPIMsg( cmd, msg_ptr, dataLen, pData );
        ; Setup parameters for call to function MT_BuildSPIMsg
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R1,?V0 + 3
        MOV	A,R6
        MOV	R4,A
        MOV	A,R7
        MOV	R5,A
        MOV	R2,?V0 + 6
        MOV	R3,?V0 + 7
        MOV	DPTR,#(MT_BuildSPIMsg & 0xffff)
        MOV	A,#((MT_BuildSPIMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  337     HalUARTWrite ( SPI_MGR_DEFAULT_PORT, msg_ptr, msgLen );
        ; Setup parameters for call to function HalUARTWrite
        MOV	R4,?V0 + 2
        MOV	R5,#0x0
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	R1,#0x0
        MOV	DPTR,#(HalUARTWrite & 0xffff)
        MOV	A,#((HalUARTWrite >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  338 #endif
//  339     osal_mem_free( msg_ptr );
        ; Setup parameters for call to function osal_mem_free
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  340   }
//  341 }
??MT_BuildAndSendZToolResponse_1:
        SJMP	??Subroutine19_0
        CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
??Subroutine19_0:
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  342 #endif
//  343 
//  344 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  345 /*********************************************************************
//  346  * @fn      MT_BuildAndSendZToolCB
//  347  *
//  348  * @brief
//  349  *
//  350  *   Build and send a ZTOOL Callback msg
//  351  *
//  352  * @param   len - length of data portion of the message
//  353  *
//  354  * @return  void
//  355  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  356 void MT_BuildAndSendZToolCB( uint16 callbackID, byte len, byte *pData )
MT_BuildAndSendZToolCB:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function MT_BuildAndSendZToolCB
//  357 {
        FUNCALL MT_BuildAndSendZToolCB, osal_msg_allocate
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL MT_BuildAndSendZToolCB, osal_memcpy
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL MT_BuildAndSendZToolCB, osal_msg_send
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	?V0 + 0,R1
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
//  358   byte msgLen;
//  359   mtOSALSerialData_t *msgPtr;
//  360   byte *msg;
//  361 
//  362   msgLen = sizeof ( mtOSALSerialData_t ) + SPI_0DATA_MSG_LEN + len;
//  363 
//  364   msgPtr = (mtOSALSerialData_t *)osal_msg_allocate( msgLen );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	A,#0x9
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
//  365   if ( msgPtr )
        MOV	A,R2
        JNZ	??MT_BuildAndSendZToolCB_0
        MOV	A,R3
??MT_BuildAndSendZToolCB_0:
        JZ	??MT_BuildAndSendZToolCB_1
//  366   {
//  367     msgPtr->hdr.event = CB_FUNC;
        MOV	A,#0x4
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
//  368     msgPtr->msg = (uint8 *)(msgPtr+1);
        MOV	A,R2
        ADD	A,#0x2
        MOV	R0,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R2
        ADD	A,#0x4
        MOV	R2,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPL,R0
        MOV	DPH,R1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  369     msg = msgPtr->msg;
//  370 
//  371     //First byte is used as the event type for MT
//  372     *msg++ = SOP_VALUE;
        MOV	A,#0x2
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
        INC	DPTR
//  373     *msg++ = HI_UINT16( callbackID );
        MOV	A,R7
        MOVX	@DPTR,A
        INC	DPTR
//  374     *msg++ = LO_UINT16( callbackID );
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
//  375     *msg++ = len;
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
//  376 
//  377     //Fill up the data bytes
//  378     osal_memcpy( msg, pData, len );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 4,?V0 + 6
        MOV	?V0 + 5,?V0 + 7
        MOV	?V0 + 6,#0x0
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	R4,?V0 + 0
        MOV	R5,#0x0
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	R2
        MOV	R3,DPH
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  379 
//  380     osal_msg_send( MT_TaskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	DPTR,#MT_TaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  381   }
//  382 }
??MT_BuildAndSendZToolCB_1:
        LJMP	??Subroutine19_0 & 0xFFFF
        CFI EndBlock cfiBlock6
//  383 #endif
//  384 
//  385 /*********************************************************************
//  386  * @fn      MT_ProcessCommand
//  387  *
//  388  * @brief
//  389  *
//  390  *   Process Event Messages.
//  391  *
//  392  * @param   byte *msg - pointer to event message
//  393  *
//  394  * @return
//  395  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  396 void MT_ProcessCommand( mtOSALSerialData_t *msg )
MT_ProcessCommand:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function MT_ProcessCommand
//  397 {
        FUNCALL MT_ProcessCommand, MT_ProcessSerialCommand
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL MT_ProcessCommand, MT_ProcessDebugMsg
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL MT_ProcessCommand, MT_ProcessDebugStr
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL MT_ProcessCommand, SPIMgr_CalcFCS
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL MT_ProcessCommand, HalUARTWrite
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL MT_ProcessCommand, MTProcessAppRspMsg
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL MT_ProcessCommand, osal_msg_deallocate
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
//  398   byte deallocate;
//  399 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  400   byte *msg_ptr;
//  401   byte len;
//  402 
//  403   // A little setup for AF, CB_FUNC and MT_SYS_APP_RSP_MSG
//  404   msg_ptr = msg->msg;
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
//  405 #endif // ZTOOL
//  406 
//  407   deallocate = true;
//  408 
//  409   // Use the first byte of the message as the command ID
//  410   switch ( msg->hdr.event )
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        LCALL	?UC_SWITCH_SPARSE
`?<Jumptable for MT_ProcessCommand>_0`:
        DB        0
        DB        5
        DB        1
        DW        ??MT_ProcessCommand_0
        DB        2
        DW        ??MT_ProcessCommand_1
        DB        4
        DW        ??MT_ProcessCommand_2
        DB        6
        DW        ??MT_ProcessCommand_3
        DB        36
        DW        ??MT_ProcessCommand_4
        DW        ??MT_ProcessCommand_5
//  411   {
//  412 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  413     case CMD_SERIAL_MSG:
//  414       MT_ProcessSerialCommand( msg->msg );
??MT_ProcessCommand_0:
        ; Setup parameters for call to function MT_ProcessSerialCommand
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV	DPTR,#(MT_ProcessSerialCommand & 0xffff)
        MOV	A,#((MT_ProcessSerialCommand >> 16) & 0xff)
        SJMP	??MT_ProcessCommand_6
//  415       break;
//  416 
//  417     case CMD_DEBUG_MSG:
//  418       MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
??MT_ProcessCommand_1:
        ; Setup parameters for call to function MT_ProcessDebugMsg
        MOV	DPTR,#(MT_ProcessDebugMsg & 0xffff)
        MOV	A,#((MT_ProcessDebugMsg >> 16) & 0xff)
        SJMP	??MT_ProcessCommand_6
//  419       break;
//  420 
//  421     case CMD_DEBUG_STR:
//  422       MT_ProcessDebugStr( (mtDebugStr_t *)msg );
??MT_ProcessCommand_3:
        ; Setup parameters for call to function MT_ProcessDebugStr
        MOV	DPTR,#(MT_ProcessDebugStr & 0xffff)
        MOV	A,#((MT_ProcessDebugStr >> 16) & 0xff)
        SJMP	??MT_ProcessCommand_6
//  423       break;
//  424 
//  425     case CB_FUNC:
//  426       /*
//  427         Build SPI message here instead of redundantly calling MT_BuildSPIMsg
//  428         because we have copied data already in the allocated message
//  429       */
//  430 
//  431       /* msg_ptr is the beginning of the intended SPI message */
//  432       len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
??MT_ProcessCommand_2:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        ADD	A,#0x5
        MOV	?V0 + 2,A
//  433 
//  434       /*
//  435         FCS goes to the last byte in the message and is calculated over all
//  436         the bytes except FCS and SOP
//  437       */
//  438       msg_ptr[len-1] = SPIMgr_CalcFCS( msg_ptr + 1 , (byte)(len-2) );
        ; Setup parameters for call to function SPIMgr_CalcFCS
        MOV	A,#-0x2
        ADD	A,?V0 + 2
        MOV	R1,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(SPIMgr_CalcFCS & 0xffff)
        MOV	A,#((SPIMgr_CalcFCS >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	?V0 + 4,?V0 + 2
        MOV	A,R6
        ADD	A,?V0 + 4
        MOV	R0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,#-0x1
        ADD	A,R0
        MOV	DPL,A
        MOV	A,#-0x1
        ADDC	A,R1
        MOV	DPH,A
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  439 
//  440 #ifdef SPI_MGR_DEFAULT_PORT
//  441       HalUARTWrite ( SPI_MGR_DEFAULT_PORT, msg_ptr, len );
        ; Setup parameters for call to function HalUARTWrite
        MOV	R4,?V0 + 2
        MOV	R5,#0x0
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	R1,#0x0
        MOV	DPTR,#(HalUARTWrite & 0xffff)
        MOV	A,#((HalUARTWrite >> 16) & 0xff)
        SJMP	??MT_ProcessCommand_6
//  442 #endif
//  443       break;
//  444 
//  445 #if !defined ( NONWK )
//  446     case MT_SYS_APP_RSP_MSG:
//  447       len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
//  448       MTProcessAppRspMsg( msg_ptr, len );
??MT_ProcessCommand_4:
        ; Setup parameters for call to function MTProcessAppRspMsg
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        ADD	A,#0x5
        MOV	R1,A
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(MTProcessAppRspMsg & 0xffff)
        MOV	A,#((MTProcessAppRspMsg >> 16) & 0xff)
??MT_ProcessCommand_6:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  449       break;
//  450 #endif  // NONWK
//  451 #endif  // ZTOOL
//  452 
//  453     default:
//  454       break;
//  455   }
//  456 
//  457   if ( deallocate )
//  458   {
//  459     osal_msg_deallocate( (uint8 *)msg );
??MT_ProcessCommand_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(osal_msg_deallocate & 0xffff)
        MOV	A,#((osal_msg_deallocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  460   }
//  461 }
        LJMP	??Subroutine18_1 & 0xFFFF
        CFI EndBlock cfiBlock7
//  462 
//  463 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  464 /*********************************************************************
//  465  * @fn      MT_ProcessDebugMsg
//  466  *
//  467  * @brief
//  468  *
//  469  *   Build and send a debug message.
//  470  *
//  471  * @param   byte *data - pointer to the data portion of the debug message
//  472  *
//  473  * @return  void
//  474  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  475 void MT_ProcessDebugMsg( mtDebugMsg_t *msg )
MT_ProcessDebugMsg:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function MT_ProcessDebugMsg
//  476 {
        FUNCALL MT_ProcessDebugMsg, osal_msg_allocate
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL MT_ProcessDebugMsg, MT_BuildSPIMsg
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL MT_ProcessDebugMsg, HalUARTWrite
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL MT_ProcessDebugMsg, osal_msg_deallocate
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 11
        MOV	A,#-0xb
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  477   byte *msg_ptr;
//  478   byte dataLen;
//  479   uint8 buf[11];
//  480   uint8 *pBuf;
//  481 
//  482   // Calculate the data length based
//  483   dataLen = 5 + (msg->numParams * sizeof ( uint16 ));
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        CLR	C
        RLC	A
        ADD	A,#0x5
        MOV	?V0 + 0,A
//  484 
//  485   // Get a message buffer to build the debug message
//  486   msg_ptr = osal_msg_allocate( (byte)(SPI_0DATA_MSG_LEN + dataLen + 1) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	A,#0x6
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
//  487   if ( msg_ptr )
        MOV	A,R2
        JNZ	??MT_ProcessDebugMsg_0
        MOV	A,R3
??MT_ProcessDebugMsg_0:
        JNZ	$+5
        LJMP	??MT_ProcessDebugMsg_1 & 0xFFFF
//  488   {
//  489     // Build the message
//  490     pBuf = buf;
//  491     *pBuf++ = msg->compID;
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine3 & 0xFFFF
//  492     *pBuf++ = msg->severity;
??CrossCallReturnLabel_10:
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  493     *pBuf++ = msg->numParams;
        MOV	A,R6
        ADD	A,#0x4
        MOV	R0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R0
        MOV	R2,A
        MOV	A,R1
        MOV	R3,A
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	R0,DPL
        MOV	R1,DPH
//  494 
//  495     if ( msg->numParams >= 1 )
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        JZ	??MT_ProcessDebugMsg_2
//  496     {
//  497       *pBuf++ = HI_UINT16( msg->param1 );
        MOV	A,R6
        ADD	A,#0x5
        MOV	R0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R1,A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
//  498       *pBuf++ = LO_UINT16( msg->param1 );
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R0,DPL
        MOV	R1,DPH
//  499     }
//  500 
//  501     if ( msg->numParams >= 2 )
??MT_ProcessDebugMsg_2:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,#0x2
        JC	??CrossCallReturnLabel_6
//  502     {
//  503       *pBuf++ = HI_UINT16( msg->param2 );
        MOV	A,R6
        ADD	A,#0x7
        INC	R2
        INC	R2
        INC	R2
        LCALL	?Subroutine1 & 0xFFFF
//  504       *pBuf++ = LO_UINT16( msg->param2 );
//  505     }
//  506 
//  507     if ( msg->numParams == 3 )
??CrossCallReturnLabel_6:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0x3
        JNZ	??CrossCallReturnLabel_7
//  508     {
//  509       *pBuf++ = HI_UINT16( msg->param3 );
        MOV	A,R6
        ADD	A,#0x9
        MOV	R2,A
        LCALL	?Subroutine1 & 0xFFFF
//  510       *pBuf++ = LO_UINT16( msg->param3 );
//  511     }
//  512 
//  513     *pBuf++ = HI_UINT16( msg->timestamp );
??CrossCallReturnLabel_7:
        MOV	A,R6
        ADD	A,#0xb
        MOV	R2,A
        LCALL	?Subroutine13 & 0xFFFF
//  514     *pBuf++ = LO_UINT16( msg->timestamp );
??CrossCallReturnLabel_51:
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOVX	@DPTR,A
//  515 
//  516 #ifdef SPI_MGR_DEFAULT_PORT
//  517     MT_BuildSPIMsg( SPI_CMD_DEBUG_MSG, &msg_ptr[1], dataLen, buf );
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        INC	DPTR
        MOV	R6,DPL
        MOV	R7,DPH
        ; Setup parameters for call to function MT_BuildSPIMsg
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	?V0 + 4,DPL
        MOV	?V0 + 5,DPH
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	R1,?V0 + 0
        MOV	A,R6
        MOV	R4,A
        MOV	A,R7
        MOV	R5,A
        MOV	R2,#0x3
        MOV	R3,#0x40
        MOV	DPTR,#(MT_BuildSPIMsg & 0xffff)
        MOV	A,#((MT_BuildSPIMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  518     HalUARTWrite ( SPI_MGR_DEFAULT_PORT, &msg_ptr[1], SPI_0DATA_MSG_LEN + dataLen );
        ; Setup parameters for call to function HalUARTWrite
        MOV	A,#0x5
        ADD	A,?V0 + 0
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  519 #endif
//  520     osal_msg_deallocate( msg_ptr );
        ; Setup parameters for call to function osal_msg_deallocate
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	DPTR,#(osal_msg_deallocate & 0xffff)
        MOV	A,#((osal_msg_deallocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  521   }
//  522 }
??MT_ProcessDebugMsg_1:
        MOV	A,#0xb
        SJMP	??Subroutine18_0
        CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x1
??Subroutine18_0:
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
??Subroutine18_1:
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        ADD	A,?V0 + 0
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_52:
        INC	DPTR
        MOV	R0,DPL
        MOV	R1,DPH
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_58:
        INC	DPTR
        INC	R0
        MOV	R1,DPH
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_7
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_59:
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_6
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_7
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_7
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_51
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker26 Using cfiCommon1
        CFI (cfiPicker26) NoFunction
        CFI (cfiPicker26) Picker
        MOVX	A,@DPTR
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiPicker26
//  523 #endif // ZTOOL
//  524 
//  525 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  526 /*********************************************************************
//  527  * @fn      MT_ProcessDebugStr
//  528  *
//  529  * @brief
//  530  *
//  531  *   Build and send a debug string.
//  532  *
//  533  * @param   byte *dstr - pointer to the data portion of the debug message
//  534  *
//  535  * @return  void
//  536  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  537 void MT_ProcessDebugStr( mtDebugStr_t *dstr )
MT_ProcessDebugStr:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function MT_ProcessDebugStr
//  538 {
        FUNCALL MT_ProcessDebugStr, osal_mem_alloc
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL MT_ProcessDebugStr, MT_BuildSPIMsg
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL MT_ProcessDebugStr, HalUARTWrite
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL MT_ProcessDebugStr, osal_mem_free
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
//  539   byte *msg_ptr;
//  540 
//  541   // Get a message buffer to build the debug message
//  542   msg_ptr = osal_mem_alloc( (byte)(SPI_0DATA_MSG_LEN + dstr->sln) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        ADD	A,#0x5
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R6,?V0 + 2
        MOV	R7,?V0 + 3
//  543   if ( msg_ptr )
        MOV	A,R6
        JNZ	??MT_ProcessDebugStr_0
        MOV	A,R7
??MT_ProcessDebugStr_0:
        JZ	??MT_ProcessDebugStr_1
//  544   {
//  545 #ifdef SPI_MGR_DEFAULT_PORT
//  546     MT_BuildSPIMsg( SPI_RESPONSE_BIT | SPI_SYS_STRING_MSG, msg_ptr, dstr->sln, dstr->pString );
        MOV	A,?V0 + 0
        ADD	A,#0x2
        MOV	?V0 + 2,A
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	?V0 + 3,A
        ; Setup parameters for call to function MT_BuildSPIMsg
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	A,R6
        MOV	R4,A
        MOV	A,R7
        MOV	R5,A
        MOV	R2,#0x15
        MOV	R3,#0x10
        MOV	DPTR,#(MT_BuildSPIMsg & 0xffff)
        MOV	A,#((MT_BuildSPIMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  547     HalUARTWrite ( SPI_MGR_DEFAULT_PORT, msg_ptr, SPI_0DATA_MSG_LEN + dstr->sln );
        ; Setup parameters for call to function HalUARTWrite
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	A,#0x5
        ADD	A,R0
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  548 #endif
//  549     osal_mem_free( msg_ptr );
        ; Setup parameters for call to function osal_mem_free
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        CFI EndBlock cfiBlock27
//  550   }
//  551 }
??MT_ProcessDebugStr_1:
        REQUIRE ?Subroutine20
        ; // Fall through to label ?Subroutine20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOV	R4,A
        CLR	A
        ADDC	A,#0x0
        MOV	R5,A
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	R1,#0x0
        MOV	DPTR,#(HalUARTWrite & 0xffff)
        MOV	A,#((HalUARTWrite >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//  552 #endif // ZTOOL
//  553 
//  554 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  555 /*********************************************************************
//  556  * @fn      MT_ProcessSetNV
//  557  *
//  558  * @brief
//  559  *
//  560  *   The Set NV serial message.
//  561  *
//  562  * @param   byte *msg - pointer to the data
//  563  *
//  564  * @return  ZSuccess if successful
//  565  *
//  566  * @MT SPI_CMD_SYS_SET_NV
//  567  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  568 byte MT_ProcessSetNV( byte *pData )
MT_ProcessSetNV:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function MT_ProcessSetNV
//  569 {
        FUNCALL MT_ProcessSetNV, osal_nv_item_len
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL MT_ProcessSetNV, osal_nv_write
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  570   uint16  attrib;
//  571   uint16  attlen;
//  572 
//  573   attrib = (uint16) *pData++;
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	R6,A
//  574   attlen = osal_nv_item_len( attrib );
//  575 
//  576   return osal_nv_write( attrib, 0, attlen, pData );
        ; Setup parameters for call to function osal_nv_write
        INC	DPTR
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        ; Setup parameters for call to function osal_nv_item_len
        MOV	A,R6
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_len & 0xffff)
        MOV	A,#((osal_nv_item_len >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	A,R6
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_write & 0xffff)
        MOV	A,#((osal_nv_write >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        SJMP	??Subroutine17_0
        CFI EndBlock cfiBlock32
//  577 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R3,#0x10
        MOV	R1,#0x6
        MOV	DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
        MOV	A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,#0x1
??Subroutine17_0:
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
??Subroutine17_1:
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock33
//  578 #endif
//  579 
//  580 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  581 /*********************************************************************
//  582  * @fn      MT_ProcessGetNV
//  583  *
//  584  * @brief
//  585  *
//  586  *   The Get NV serial message.
//  587  *
//  588  * @param   byte *msg - pointer to the data
//  589  *
//  590  * @return  void
//  591  *
//  592  * @MT SPI_CMD_SYS_GET_NV
//  593  *
//  594  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  595 void MT_ProcessGetNV( byte *pData )
MT_ProcessGetNV:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function MT_ProcessGetNV
//  596 {
        FUNCALL MT_ProcessGetNV, osal_nv_item_len
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL MT_ProcessGetNV, osal_mem_alloc
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL MT_ProcessGetNV, osal_memset
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL MT_ProcessGetNV, osal_nv_read
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL MT_ProcessGetNV, MT_BuildAndSendZToolResponse
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL MT_ProcessGetNV, osal_mem_free
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  597   uint16  attrib;
//  598   uint16 attlen;
//  599   uint16 buflen;
//  600   uint8 *buf;
//  601 
//  602   attrib = (uint16)*pData;
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
//  603   attlen = osal_nv_item_len( attrib );
        ; Setup parameters for call to function osal_nv_item_len
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_len & 0xffff)
        MOV	A,#((osal_nv_item_len >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
//  604 
//  605   buflen = attlen + 2;
        MOV	A,#0x2
        ADD	A,?V0 + 2
        MOV	R6,A
        CLR	A
        ADDC	A,?V0 + 3
        MOV	R7,A
//  606   buf = osal_mem_alloc( buflen );
        ; Setup parameters for call to function osal_mem_alloc
        INC	R2
        INC	R2
        MOV	R3,A
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
//  607   if ( buf != NULL )
        MOV	A,R2
        JNZ	??MT_ProcessGetNV_0
        MOV	A,R3
??MT_ProcessGetNV_0:
        JZ	??MT_ProcessGetNV_1
//  608   {
//  609     osal_memset( buf, 0, buflen );
        ; Setup parameters for call to function osal_memset
        MOV	A,R6
        MOV	R4,A
        MOV	A,R7
        MOV	R5,A
        MOV	R1,#0x0
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  610 
//  611     buf[0] = osal_nv_read( attrib, 0, attlen, &buf[2] );
        ; Setup parameters for call to function osal_nv_read
        MOV	A,?V0 + 6
        ADD	A,#0x2
        MOV	?V0 + 4,A
        MOV	A,?V0 + 7
        ADDC	A,#0x0
        MOV	?V0 + 5,A
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,?V0 + 0
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	A,R1
        MOV	DPL,?V0 + 6
        MOV	DPH,?V0 + 7
        MOVX	@DPTR,A
//  612     buf[1] = (uint8)attrib;
        INC	DPTR
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
//  613 
//  614     MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + buflen),
//  615                                   (SPI_RESPONSE_BIT | SPI_CMD_SYS_GET_NV),
//  616                                   buflen, buf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV	R0,#?V0 + 6
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,R6
        MOV	R4,A
        MOV	R2,#0x13
        MOV	R3,#0x10
        ADD	A,#0x5
        MOV	R1,A
        MOV	DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
        MOV	A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  617     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV	R2,?V0 + 6
        MOV	R3,?V0 + 7
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  618   }
//  619 }
??MT_ProcessGetNV_1:
        LJMP	??Subroutine19_0 & 0xFFFF
        CFI EndBlock cfiBlock34
//  620 #endif
//  621 
//  622 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  623 #if !defined ( NONWK )
//  624 /***************************************************************************************************
//  625  * @fn      MT_ProcessGetNvInfo
//  626  *
//  627  * @brief
//  628  *
//  629  *   The Get NV Info serial message.
//  630  *
//  631  * @param   byte *msg - pointer to the data
//  632  *
//  633  * @return  void
//  634  *
//  635  * @MT SPI_CMD_SYS_GET_NV_INFO
//  636  *
//  637  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  638 void MT_ProcessGetNvInfo( void )
MT_ProcessGetNvInfo:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function MT_ProcessGetNvInfo
//  639 {
        FUNCALL MT_ProcessGetNvInfo, osal_mem_alloc
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL MT_ProcessGetNvInfo, osal_memset
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL MT_ProcessGetNvInfo, osal_nv_read
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL MT_ProcessGetNvInfo, MT_ReverseBytes
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL MT_ProcessGetNvInfo, osal_nv_read
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL MT_ProcessGetNvInfo, osal_nv_read
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL MT_ProcessGetNvInfo, osal_nv_read
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL MT_ProcessGetNvInfo, osal_nv_read
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL MT_ProcessGetNvInfo, MT_BuildAndSendZToolResponse
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL MT_ProcessGetNvInfo, osal_mem_free
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 6
        MOV	A,#-0x6
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  640   uint8 len;
//  641   uint8 stat;
//  642   uint8 *buf;
//  643   uint8 *pBuf;
//  644   uint16 tmp16;
//  645   uint32 tmp32;
//  646 
//  647   // Get required length of buffer
//  648   // Status + ExtAddr + ChanList + PanID  + SecLevel + PreCfgKey
//  649   len = 1 + Z_EXTADDR_LEN + 4 + 2 + 1 + SEC_KEY_LEN;
//  650 
//  651   buf = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV	R2,#0x20
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
//  652   if ( buf )
        MOV	A,R2
        JNZ	??MT_ProcessGetNvInfo_0
        MOV	A,R3
??MT_ProcessGetNvInfo_0:
        JNZ	$+5
        LJMP	??MT_ProcessGetNvInfo_1 & 0xFFFF
//  653   {
//  654     // Assume NV not available
//  655     osal_memset( buf, 0xFF, len );
        ; Setup parameters for call to function osal_memset
        MOV	R4,#0x20
        MOV	R5,#0x0
        MOV	R1,#-0x1
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  656 
//  657     // Skip over status
//  658     pBuf = buf + 1;
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        INC	DPTR
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
//  659 
//  660     // Start with 64-bit extended address
//  661     stat = osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
        ; Setup parameters for call to function osal_nv_read
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	?V0 + 4,#0x8
        MOV	?V0 + 5,#0x0
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#0x1
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	A,R1
        MOV	R6,A
//  662     if ( stat ) stat = 0x01;
        JZ	??MT_ProcessGetNvInfo_2
        MOV	R6,#0x1
//  663     MT_ReverseBytes( pBuf, Z_EXTADDR_LEN );
??MT_ProcessGetNvInfo_2:
        ; Setup parameters for call to function MT_ReverseBytes
        MOV	R1,#0x8
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(MT_ReverseBytes & 0xffff)
        MOV	A,#((MT_ReverseBytes >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  664     pBuf += Z_EXTADDR_LEN;
        LCALL	?Subroutine12 & 0xFFFF
//  665 
//  666     // Scan channel list (bit mask)
//  667     if (  osal_nv_read( ZCD_NV_CHANLIST, 0, sizeof( tmp32 ), &tmp32 ) )
??CrossCallReturnLabel_49:
        ; Setup parameters for call to function osal_nv_read
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	?V0 + 4,DPL
        MOV	?V0 + 5,DPH
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	?V0 + 4,#0x4
        MOV	?V0 + 5,#0x0
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7c
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	A,R1
        JZ	??MT_ProcessGetNvInfo_3
//  668       stat |= 0x02;
        MOV	A,R6
        SETB	0xE0 /* A   */.1
        MOV	R6,A
        SJMP	??MT_ProcessGetNvInfo_4
//  669     else
//  670     {
//  671       pBuf[0] = BREAK_UINT32( tmp32, 3 );
??MT_ProcessGetNvInfo_3:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	A,#0x18
        MOV	R0,#?V0 + 4
        LCALL	?UL_SHR
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOV	A,?V0 + 4
        MOVX	@DPTR,A
//  672       pBuf[1] = BREAK_UINT32( tmp32, 2 );
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	A,#0x10
        MOV	R0,#?V0 + 4
        LCALL	?UL_SHR
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        MOV	A,?V0 + 4
        MOVX	@DPTR,A
//  673       pBuf[2] = BREAK_UINT32( tmp32, 1 );
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	A,?V0 + 5
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
//  674       pBuf[3] = BREAK_UINT32( tmp32, 0 );
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_X
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOV	A,?V0 + 4
        MOVX	@DPTR,A
//  675     }
//  676     pBuf += sizeof( tmp32 );
??MT_ProcessGetNvInfo_4:
        MOV	A,?V0 + 0
        ADD	A,#0x4
        MOV	?V0 + 0,A
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	?V0 + 1,A
//  677 
//  678     // ZigBee PanID
//  679     if ( osal_nv_read( ZCD_NV_PANID, 0, sizeof( tmp16 ), &tmp16 ) )
        ; Setup parameters for call to function osal_nv_read
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	?V0 + 4,DPL
        MOV	?V0 + 5,DPH
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	?V0 + 4,#0x2
        MOV	?V0 + 5,#0x0
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7d
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	A,R1
        JZ	??MT_ProcessGetNvInfo_5
//  680       stat |= 0x04;
        MOV	A,R6
        SETB	0xE0 /* A   */.2
        MOV	R6,A
        SJMP	??MT_ProcessGetNvInfo_6
//  681     else
//  682     {
//  683       pBuf[0] = HI_UINT16( tmp16 );
??MT_ProcessGetNvInfo_5:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	?Subroutine4 & 0xFFFF
//  684       pBuf[1] = LO_UINT16( tmp16 );
??CrossCallReturnLabel_12:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        MOVX	@DPTR,A
//  685     }
//  686     pBuf += sizeof( tmp16 );
??MT_ProcessGetNvInfo_6:
        MOV	A,?V0 + 0
        ADD	A,#0x2
        MOV	?V0 + 0,A
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	?V0 + 1,A
//  687 
//  688     // Security level
//  689     if ( osal_nv_read( ZCD_NV_SECURITY_LEVEL, 0, sizeof( uint8 ), pBuf++ ) )
        ; Setup parameters for call to function osal_nv_read
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	?V0 + 4,#0x1
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#0x61
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	A,R1
        JZ	??MT_ProcessGetNvInfo_7
//  690       stat |= 0x08;
        MOV	A,R6
        SETB	0xE0 /* A   */.3
        MOV	R6,A
//  691 
//  692     // Pre-configured security key
//  693     if ( osal_nv_read( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, pBuf ) )
??MT_ProcessGetNvInfo_7:
        ; Setup parameters for call to function osal_nv_read
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	?V0 + 0,#0x10
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#0x62
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	A,R1
        JZ	??MT_ProcessGetNvInfo_8
//  694       stat |= 0x10;
        MOV	A,R6
        SETB	0xE0 /* A   */.4
        MOV	R6,A
//  695 
//  696     // Status bit mask - bit=1 indicates failure
//  697     *buf = stat;
??MT_ProcessGetNvInfo_8:
        MOV	A,R6
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOVX	@DPTR,A
//  698 
//  699     MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + len),
//  700                                   (SPI_RESPONSE_BIT | SPI_CMD_SYS_GET_NV_INFO),
//  701                                   len, buf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	R4,#0x20
        MOV	R2,#0x1f
        MOV	R3,#0x10
        MOV	R1,#0x25
        MOV	DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
        MOV	A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  702 
//  703     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  704   }
//  705 }
??MT_ProcessGetNvInfo_1:
        MOV	A,#0x6
        LJMP	?Subroutine19 & 0xFFFF
        CFI EndBlock cfiBlock35
//  706 #endif  // NONWK
//  707 #endif  // ZTOOL
//  708 
//  709 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  710 #define DEVICE_INFO_RESPONSE_LEN 46
//  711 #define TYPE_COORDINATOR         1
//  712 #define TYPE_ROUTER              2
//  713 #define TYPE_ENDDEVICE           4
//  714 /***************************************************************************************************
//  715  * @fn      MT_ProcessGetDeviceInfo
//  716  *
//  717  * @brief
//  718  *
//  719  *   The Get Device Info serial message.
//  720  *
//  721  * @param   byte *msg - pointer to the data
//  722  *
//  723  * @return  void
//  724  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  725 void MT_ProcessGetDeviceInfo( void )
MT_ProcessGetDeviceInfo:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function MT_ProcessGetDeviceInfo
//  726 {
        FUNCALL MT_ProcessGetDeviceInfo, osal_mem_alloc
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL MT_ProcessGetDeviceInfo, osal_nv_read
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL MT_ProcessGetDeviceInfo, MT_ReverseBytes
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL MT_ProcessGetDeviceInfo, NLME_GetShortAddr
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL MT_ProcessGetDeviceInfo, AssocMakeList
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL MT_ProcessGetDeviceInfo, osal_memset
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL MT_ProcessGetDeviceInfo, osal_mem_free
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL MT_ProcessGetDeviceInfo, MT_BuildAndSendZToolResponse
        LOCFRAME XSTACK, 17, STACK
        ARGFRAME XSTACK, 17, STACK
        FUNCALL MT_ProcessGetDeviceInfo, osal_mem_free
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  727   byte *buf;
//  728   byte *pBuf;
//  729   uint8 deviceType = 0;
//  730   uint16 shortAddr;
//  731   uint16 *assocList;
//  732   byte assocCnt;
//  733   uint16 *puint16;
//  734   byte x;
//  735 
//  736   buf = osal_mem_alloc( DEVICE_INFO_RESPONSE_LEN );
        ; Setup parameters for call to function osal_mem_alloc
        MOV	R2,#0x2e
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
//  737   if ( buf )
        MOV	A,R2
        JNZ	??MT_ProcessGetDeviceInfo_0
        MOV	A,R3
??MT_ProcessGetDeviceInfo_0:
        JNZ	$+5
        LJMP	??MT_ProcessGetDeviceInfo_1 & 0xFFFF
//  738   {
//  739     pBuf = buf;
//  740 
//  741     *pBuf++ = ZSUCCESS;
        CLR	A
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	??Subroutine0_0 & 0xFFFF
//  742 
//  743     osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function osal_nv_read
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	?V0 + 4,#0x8
        MOV	?V0 + 5,#0x0
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#0x1
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  744     // Outgoing extended address needs to be reversed
//  745     MT_ReverseBytes( pBuf, Z_EXTADDR_LEN );
        ; Setup parameters for call to function MT_ReverseBytes
        MOV	R1,#0x8
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(MT_ReverseBytes & 0xffff)
        MOV	A,#((MT_ReverseBytes >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  746     pBuf += Z_EXTADDR_LEN;
        LCALL	?Subroutine12 & 0xFFFF
//  747 
//  748 #if !defined( NONWK )
//  749     shortAddr = NLME_GetShortAddr();
??CrossCallReturnLabel_50:
        ; Setup parameters for call to function NLME_GetShortAddr
        MOV	DPTR,#(NLME_GetShortAddr & 0xffff)
        MOV	A,#((NLME_GetShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  750 #else
//  751     shortAddr = 0;
//  752 #endif
//  753 
//  754     *pBuf++ = HI_UINT16( shortAddr );
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOV	A,R3
        MOVX	@DPTR,A
        INC	DPTR
//  755     *pBuf++ = LO_UINT16( shortAddr );
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
//  756 
//  757     // Return device type
//  758 #if !defined( NONWK )
//  759 #if defined (ZDO_COORDINATOR)
//  760     deviceType |= (uint8) TYPE_COORDINATOR;
//  761   #if defined (SOFT_START)
//  762     deviceType |= (uint8) TYPE_ROUTER;
//  763   #endif
//  764 #endif
//  765 #if defined (RTR_NWK) && !defined (ZDO_COORDINATOR)
//  766     deviceType |= (uint8) TYPE_ROUTER;
//  767 #elif !defined (RTR_NWK)
//  768     deviceType |= (uint8) TYPE_ENDDEVICE;
//  769 #endif
//  770 #endif
//  771     *pBuf++ = (byte) deviceType;
        MOV	A,#0x2
        LCALL	??Subroutine0_0 & 0xFFFF
//  772 
//  773     //Return device state
//  774 #if !defined( NONWK )
//  775     *pBuf++ = (byte)devState;
??CrossCallReturnLabel_1:
        MOV	DPTR,#devState
        LCALL	?Subroutine0 & 0xFFFF
//  776 #else
//  777     *pBuf++ = (byte)0;
//  778 #endif
//  779 
//  780 #if defined(RTR_NWK) && !defined( NONWK )
//  781     assocList = AssocMakeList( &assocCnt );
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function AssocMakeList
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(AssocMakeList & 0xffff)
        MOV	A,#((AssocMakeList >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	R6,?V0 + 4
        MOV	R7,?V0 + 5
//  782 #else
//  783     assocCnt = 0;
//  784     assocList = NULL;
//  785 #endif
//  786 
//  787     *pBuf++ = assocCnt;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine0 & 0xFFFF
//  788 
//  789     // upto 16 devices
//  790     osal_memset( pBuf, 0, (16 * sizeof(uint16)) );
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function osal_memset
        MOV	R4,#0x20
        MOV	R5,#0x0
        MOV	R1,#0x0
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  791     puint16 = assocList;
        MOV	A,R6
        MOV	R0,A
        MOV	A,R7
        MOV	R1,A
//  792     for ( x = 0; x < assocCnt; x++ )
        MOV	R4,#0x0
        SJMP	??MT_ProcessGetDeviceInfo_2
//  793     {
//  794       *pBuf++ = HI_UINT16( *puint16 );
??MT_ProcessGetDeviceInfo_3:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        LCALL	?Subroutine0 & 0xFFFF
//  795       *pBuf++ = LO_UINT16( *puint16 );
??CrossCallReturnLabel_4:
        MOV	DPL,R0
        MOV	DPH,R1
        LCALL	?Subroutine0 & 0xFFFF
//  796       puint16++;
??CrossCallReturnLabel_5:
        MOV	A,R0
        ADD	A,#0x2
        INC	R0
        INC	R0
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R1,A
//  797     }
        INC	R4
??MT_ProcessGetDeviceInfo_2:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,R4
        CLR	C
        SUBB	A,R2
        JC	??MT_ProcessGetDeviceInfo_3
//  798 
//  799     if ( assocList )
        MOV	A,R6
        JNZ	??MT_ProcessGetDeviceInfo_4
        MOV	A,R7
??MT_ProcessGetDeviceInfo_4:
        JZ	??MT_ProcessGetDeviceInfo_5
//  800       osal_mem_free( assocList );
        ; Setup parameters for call to function osal_mem_free
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  801 
//  802     MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + DEVICE_INFO_RESPONSE_LEN),
//  803                                   (SPI_RESPONSE_BIT | SPI_CMD_SYS_GET_DEVICE_INFO),
//  804                                   DEVICE_INFO_RESPONSE_LEN, buf );
??MT_ProcessGetDeviceInfo_5:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	R4,#0x2e
        MOV	R2,#0x14
        MOV	R3,#0x10
        MOV	R1,#0x33
        MOV	DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
        MOV	A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  805 
//  806     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  807   }
//  808 }
??MT_ProcessGetDeviceInfo_1:
        LJMP	?Subroutine18 & 0xFFFF
        CFI EndBlock cfiBlock36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV	A,?V0 + 0
        ADD	A,#0x8
        MOV	?V0 + 0,A
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	?V0 + 1,A
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 15)
??Subroutine0_0:
        MOVX	@DPTR,A
        INC	DPTR
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
//  809 #endif
//  810 
//  811 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  812 /***************************************************************************************************
//  813  * @fn      MT_ProcessSerialCommand
//  814  *
//  815  * @brief
//  816  *
//  817  *   Process Serial Message.
//  818  *
//  819  * @param   byte *msg - pointer to event message
//  820  *
//  821  * @return  void
//  822  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  823 void MT_ProcessSerialCommand( byte *msg )
MT_ProcessSerialCommand:
        CFI Block cfiBlock47 Using cfiCommon0
        CFI Function MT_ProcessSerialCommand
//  824 {
        FUNCALL MT_ProcessSerialCommand, MT_RAMRead
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, MT_RAMWrite
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, MT_Reset
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, osal_strlen
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, MT_BuildAndSendZToolResponse
        LOCFRAME XSTACK, 37, STACK
        ARGFRAME XSTACK, 37, STACK
        FUNCALL MT_ProcessSerialCommand, MT_ReverseBytes
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, ZMacSetReq
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, osal_nv_write
        LOCFRAME XSTACK, 39, STACK
        ARGFRAME XSTACK, 39, STACK
        FUNCALL MT_ProcessSerialCommand, ZMacGetReq
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, MT_ReverseBytes
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, osal_nv_item_len
        LOCFRAME XSTACK, 37, STACK
        ARGFRAME XSTACK, 37, STACK
        FUNCALL MT_ProcessSerialCommand, osal_nv_write
        LOCFRAME XSTACK, 39, STACK
        ARGFRAME XSTACK, 39, STACK
        FUNCALL MT_ProcessSerialCommand, osal_nv_item_len
        LOCFRAME XSTACK, 37, STACK
        ARGFRAME XSTACK, 37, STACK
        FUNCALL MT_ProcessSerialCommand, osal_nv_write
        LOCFRAME XSTACK, 39, STACK
        ARGFRAME XSTACK, 39, STACK
        FUNCALL MT_ProcessSerialCommand, osal_nv_item_len
        LOCFRAME XSTACK, 37, STACK
        ARGFRAME XSTACK, 37, STACK
        FUNCALL MT_ProcessSerialCommand, osal_nv_write
        LOCFRAME XSTACK, 39, STACK
        ARGFRAME XSTACK, 39, STACK
        FUNCALL MT_ProcessSerialCommand, osal_nv_item_len
        LOCFRAME XSTACK, 37, STACK
        ARGFRAME XSTACK, 37, STACK
        FUNCALL MT_ProcessSerialCommand, osal_nv_write
        LOCFRAME XSTACK, 39, STACK
        ARGFRAME XSTACK, 39, STACK
        FUNCALL MT_ProcessSerialCommand, MT_ProcessGetNvInfo
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, MT_ProcessGetDeviceInfo
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, MT_ProcessSetNV
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, MT_ProcessGetNV
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, osal_GetSystemClock
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, OnBoard_SendKeys
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, MTProcessAppMsg
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        FUNCALL MT_ProcessSerialCommand, MTProcessLedControl
        LOCFRAME XSTACK, 35, STACK
        ARGFRAME XSTACK, 35, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV	A,#-0x13
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
//  825   UINT16 cmd;
//  826   UINT16 callbackID;
//  827   byte len;
//  828   byte ret;
//  829   byte *pData;
//  830   uint16 tmp16;
//  831   uint32 tmp32;
//  832   byte extAddr[Z_EXTADDR_LEN];
//  833   byte *retValue;
//  834   byte x = 0;
        MOV	R1,#0x0
//  835 #if !defined ( NONWK )
//  836   uint16 attLen;
//  837 #endif // NONWK
//  838 
//  839   // dig out header info
//  840   cmd = BUILD_UINT16( msg[1], msg[0] );
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	R5,A
        CLR	A
        ADD	A,R6
        MOV	A,R5
        ADDC	A,#0x0
        MOV	R7,A
//  841   save_cmd = cmd;
        MOV	DPTR,#save_cmd
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R7
        MOVX	@DPTR,A
//  842   len = msg[2];
//  843   pData = &msg[3];
        MOV	A,R2
        ADD	A,#0x3
        MOV	R4,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R5,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
//  844 
//  845     // Setup for return;
//  846     len = 0;
        MOV	R4,#0x0
//  847     retValue = &ret;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 1
        MOVX	@DPTR,A
//  848 
//  849     //Process the contents of the message
//  850     switch ( cmd )
        MOV	?V0 + 0,R6
        MOV	?V0 + 1,R7
        MOV	R0,#?V0 + 0
        LCALL	?US_SWITCH_DENSE
`?<Jumptable for MT_ProcessSerialCommand>_0`:
        DW        1
        DB        30
        DW        ??MT_ProcessSerialCommand_0
        DW        ??MT_ProcessSerialCommand_1
        DW        ??MT_ProcessSerialCommand_2
        DW        ??MT_ProcessSerialCommand_3
        DW        ??MT_ProcessSerialCommand_0
        DW        ??MT_ProcessSerialCommand_4
        DW        ??MT_ProcessSerialCommand_5
        DW        ??MT_ProcessSerialCommand_6
        DW        ??MT_ProcessSerialCommand_7
        DW        ??MT_ProcessSerialCommand_0
        DW        ??MT_ProcessSerialCommand_0
        DW        ??MT_ProcessSerialCommand_0
        DW        ??MT_ProcessSerialCommand_0
        DW        ??MT_ProcessSerialCommand_0
        DW        ??MT_ProcessSerialCommand_0
        DW        ??MT_ProcessSerialCommand_0
        DW        ??MT_ProcessSerialCommand_8
        DW        ??MT_ProcessSerialCommand_9
        DW        ??MT_ProcessSerialCommand_10
        DW        ??MT_ProcessSerialCommand_11
        DW        ??MT_ProcessSerialCommand_12
        DW        ??MT_ProcessSerialCommand_0
        DW        ??MT_ProcessSerialCommand_13
        DW        ??MT_ProcessSerialCommand_14
        DW        ??MT_ProcessSerialCommand_15
        DW        ??MT_ProcessSerialCommand_16
        DW        ??MT_ProcessSerialCommand_17
        DW        ??MT_ProcessSerialCommand_18
        DW        ??MT_ProcessSerialCommand_19
        DW        ??MT_ProcessSerialCommand_20
        DW        ??MT_ProcessSerialCommand_21
        DW        ??MT_ProcessSerialCommand_22
//  851     {
//  852 #ifdef MACSIM
//  853       case SPI_CMD_ZIGNET_DATA:
//  854         MACSIM_TranslateMsg( pData, len );
//  855         break;
//  856 #endif
//  857 
//  858       case SPI_CMD_SYS_RAM_READ:
//  859         extAddr[0] = MT_RAMRead( (UINT16)BUILD_UINT16( pData[1], pData[0] ), &extAddr[1] );
??MT_ProcessSerialCommand_1:
        ; Setup parameters for call to function MT_RAMRead
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(MT_RAMRead & 0xffff)
        MOV	A,#((MT_RAMRead >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        MOV	A,R1
        MOVX	@DPTR,A
//  860         len = MT_RAM_READ_RESP_LEN;
        MOV	R4,#0x2
//  861         retValue = extAddr;
??MT_ProcessSerialCommand_23:
        MOV	R0,DPL
        MOV	R1,DPH
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
??MT_ProcessSerialCommand_24:
        MOVX	@DPTR,A
        LJMP	??MT_ProcessSerialCommand_25 & 0xFFFF
//  862         break;
//  863 
//  864       case SPI_CMD_SYS_RAM_WRITE:
//  865         ret = MT_RAMWrite( (UINT16)BUILD_UINT16( pData[1], pData[0] ), pData[2] );
??MT_ProcessSerialCommand_2:
        ; Setup parameters for call to function MT_RAMWrite
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_43:
        MOVX	A,@DPTR
        MOV	R1,A
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV	R4,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	??Subroutine8_1 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV	R3,A
        CLR	A
        ADD	A,R4
        MOV	R2,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(MT_RAMWrite & 0xffff)
        MOV	A,#((MT_RAMWrite >> 16) & 0xff)
??MT_ProcessSerialCommand_26:
        LCALL	?BCALL               ; Banked call to: DPTR()
??MT_ProcessSerialCommand_27:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,R1
        LJMP	??MT_ProcessSerialCommand_28 & 0xFFFF
//  866         len = MT_RAM_WRITE_RESP_LEN;
//  867         break;
//  868 
//  869       case SPI_CMD_SYS_SET_DEBUG_THRESHOLD:
//  870         ret = MT_SetDebugThreshold( pData[0], pData[1] );
??MT_ProcessSerialCommand_3:
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV	R2,A
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV	DPTR,#debugThreshold
        MOVX	@DPTR,A
        MOV	A,R2
        MOV	DPTR,#debugCompId
        MOVX	@DPTR,A
//  871         len = 1;
//  872         break;
//  873 
//  874       case SPI_CMD_TRACE_SUB:
//  875         break;
//  876 
//  877       case SPI_CMD_SYS_RESET:
//  878         MT_Reset( pData[0] );
//  879         break;
//  880 
//  881       case SPI_CMD_SYS_CALLBACK_SUB_CMD:
//  882         // a callback value of 0xFFFF turns on all available callbacks
//  883         callbackID = BUILD_UINT16( pData[1] , pData[0] );
//  884         if ( callbackID == 0xFFFF )
//  885         {
//  886           // What is the action
//  887           if ( pData[2] )
//  888           {
//  889             // Turn on
//  890 #if defined( MT_MAC_CB_FUNC )
//  891             _macCallbackSub = 0xFFFF;
//  892 #endif
//  893 #if defined( MT_NWK_CB_FUNC )
//  894             _nwkCallbackSub = 0xFFFF;
//  895 #endif
//  896 
//  897 #if defined( MT_ZDO_FUNC )
//  898             _zdoCallbackSub = 0xFFFFFFFF;
//  899 #endif
//  900 #if defined( MT_AF_CB_FUNC )
//  901             _afCallbackSub = 0xFFFF;
//  902 #endif
//  903 #if defined( MT_SAPI_CB_FUNC )
//  904             _sapiCallbackSub = 0xFFFF;
//  905 #endif
//  906           }
//  907           else
//  908           {
//  909             // Turn off
//  910 #if defined( MT_MAC_CB_FUNC )
//  911             _macCallbackSub = 0x0000;
//  912 #endif
//  913 #if defined( MT_NWK_CB_FUNC )
//  914             _nwkCallbackSub = 0x0000;
//  915 #endif
//  916 
//  917 #if defined( MT_ZDO_FUNC )
//  918             _zdoCallbackSub = 0x00000000;
//  919 #endif
//  920 #if defined( MT_AF_CB_FUNC )
//  921             _afCallbackSub = 0x0000;
//  922 #endif
//  923 #if defined( MT_SAPI_CB_FUNC )
//  924             _sapiCallbackSub = 0x0000;
//  925 #endif
//  926           }
//  927         }
//  928         else
//  929         {
//  930           //First check which layer callbacks are desired and then set the preference
//  931 
//  932 #if defined( MT_MAC_CB_FUNC )
//  933           //If it is a MAC callback, set the corresponding callback subscription bit
//  934           if (( callbackID & 0xFFF0 ) == SPI_MAC_CB_TYPE )
//  935           {
//  936             //Based on the action field, either enable or disable subscription
//  937             if ( pData[2] )
//  938               _macCallbackSub |=  ( 1 << ( pData[1] & 0x0F ) );
//  939             else
//  940               _macCallbackSub &= ~( 1 << ( pData[1] & 0x0F ) );
//  941           }
//  942 #endif
//  943 
//  944 #if defined( MT_NWK_CB_FUNC )
//  945           //If it is a NWK callback, set the corresponding callback subscription bit
//  946           if (( callbackID & 0xFFF0 ) == SPI_NWK_CB_TYPE )
//  947           {
//  948 
//  949             //Based on the action field, either enable or disable subscription
//  950             if ( pData[2] )
//  951               _nwkCallbackSub |=  ( 1 << ( pData[1] & 0x0F ) ) ;
//  952             else
//  953               _nwkCallbackSub &= ~( 1 << ( pData[1] & 0x0F ) );
//  954           }
//  955 #endif
//  956 
//  957 #if defined( MT_ZDO_FUNC )
//  958           //If it is a APS callback, set the corresponding callback subscription bit
//  959           if ( ((callbackID & 0xFFF0) == SPI_ZDO_CB_TYPE) ||
//  960                ((callbackID & 0xFFF0) == SPI_ZDO_CB2_TYPE) )
//  961           {
//  962             //Based on the action field, either enable or disable subscription
//  963             if ( pData[2] )
//  964               _zdoCallbackSub |=  ( 1L << ( pData[1] & 0x1F ) );
//  965             else
//  966               _zdoCallbackSub &= ~( 1L << ( pData[1] & 0x1F ) );
//  967           }
//  968 #endif
//  969 
//  970 #if defined( MT_AF_CB_FUNC )
//  971           // Set the corresponding callback subscription bit for an AF callback.
//  972           if (( callbackID & 0xFFF0 ) == SPI_AF_CB_TYPE )
//  973           {
//  974             // Based on the action field, either enable or disable subscription.
//  975             if ( pData[2] )
//  976               _afCallbackSub |=  ( 1 << ( pData[1] & 0x0F ) );
//  977             else
//  978               _afCallbackSub &= ~( 1 << ( pData[1] & 0x0F ) );
//  979           }
//  980 #endif
//  981 #if defined( MT_SAPI_CB_FUNC )
//  982           // Set the corresponding callback subscription bit for an SAPI callback.
//  983           if (( callbackID & 0xFFF0 ) == SPI_SAPI_CB_TYPE )
//  984           {
//  985             // Based on the action field, either enable or disable subscription.
//  986             if ( pData[2] )
//  987               _sapiCallbackSub |=  ( 1 << ( pData[1] & 0x0F ) );
//  988             else
//  989               _sapiCallbackSub &= ~( 1 << ( pData[1] & 0x0F ) );
//  990           }
//  991 #endif
//  992         }
//  993         len = 1;
//  994         ret = ZSUCCESS;
//  995         break;
//  996 
//  997       case SPI_CMD_SYS_PING:
//  998         // Get a message buffer to build response message
//  999         // The Ping response now has capabilities included
// 1000 
// 1001         // Build Capabilities
// 1002         tmp16 = MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF |
// 1003               MT_CAP_ZDO | MT_CAP_USER_TEST | MT_CAP_SAPI_FUNC;
// 1004 
// 1005         // Convert to high byte first into temp buffer
// 1006         extAddr[0] = HI_UINT16( tmp16 );
// 1007         extAddr[1] = LO_UINT16( tmp16 );
// 1008         len = sizeof ( tmp16 );
// 1009         retValue = extAddr;
// 1010         break;
// 1011 
// 1012       case SPI_CMD_SYS_VERSION:
// 1013         {
// 1014 #if !defined ( NONWK )
// 1015           uint8 i = NLME_GetProtocolVersion() - 1;
// 1016 #else
// 1017           uint8 i = 1;   // just say '1.1' -- irrelevant if stack isn't there anyway
// 1018 #endif
// 1019 
// 1020           // Get a message buffer to build response message
// 1021           len      = (byte)(osal_strlen( (char *)MTVersionString[i] ));
// 1022           retValue = (byte *)MTVersionString[i];
// 1023         }
// 1024           break;
// 1025 
// 1026       case SPI_CMD_SYS_SET_EXTADDR:
// 1027         // Incoming extended address is reversed
// 1028         MT_ReverseBytes( pData, Z_EXTADDR_LEN );
// 1029 
// 1030         if ( ZMacSetReq( ZMacExtAddr, pData ) == ZMacSuccess )
// 1031           ret = osal_nv_write( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pData );
// 1032         else
// 1033           ret = 1;
// 1034         len = 1;
// 1035         break;
// 1036 
// 1037       case SPI_CMD_SYS_GET_EXTADDR:
// 1038         ZMacGetReq( ZMacExtAddr, extAddr );
// 1039 
// 1040         // Outgoing extended address needs to be reversed
// 1041         MT_ReverseBytes( extAddr, Z_EXTADDR_LEN );
// 1042 
// 1043         len = Z_EXTADDR_LEN;
// 1044         retValue = extAddr;
// 1045         break;
// 1046 
// 1047 #if !defined ( NONWK )
// 1048       case SPI_CMD_SYS_SET_PANID:
// 1049         tmp16 = BUILD_UINT16( pData[1], pData[0] );
// 1050         attLen = osal_nv_item_len( ZCD_NV_PANID );
// 1051         ret = osal_nv_write( ZCD_NV_PANID, 0, attLen, &tmp16 );
// 1052         len = 1;
// 1053         break;
// 1054 
// 1055       case SPI_CMD_SYS_SET_CHANNELS:
// 1056         tmp32 = BUILD_UINT32( pData[3], pData[2], pData[1], pData[0] );
// 1057         attLen = osal_nv_item_len( ZCD_NV_CHANLIST );
// 1058         ret = osal_nv_write( ZCD_NV_CHANLIST, 0, attLen, &tmp32 );
// 1059         len = 1;
// 1060         break;
// 1061 
// 1062       case SPI_CMD_SYS_SET_SECLEVEL:
// 1063         attLen = osal_nv_item_len( ZCD_NV_SECURITY_LEVEL );
// 1064         ret = osal_nv_write( ZCD_NV_SECURITY_LEVEL, 0, attLen, pData );
// 1065         len = 1;
// 1066         break;
// 1067 
// 1068       case SPI_CMD_SYS_SET_PRECFGKEY:
// 1069         attLen = osal_nv_item_len( ZCD_NV_PRECFGKEY );
// 1070         ret = osal_nv_write( ZCD_NV_PRECFGKEY, 0, attLen, pData );
// 1071         len = 1;
// 1072         break;
// 1073 
// 1074       case SPI_CMD_SYS_GET_NV_INFO:
// 1075         MT_ProcessGetNvInfo();
// 1076         break;
// 1077 #endif // NONWK
// 1078 
// 1079       case SPI_CMD_SYS_GET_DEVICE_INFO:
// 1080         MT_ProcessGetDeviceInfo();
// 1081         break;
// 1082 
// 1083       case SPI_CMD_SYS_SET_NV:
// 1084         ret = MT_ProcessSetNV( pData );
// 1085         len = 1;
// 1086         break;
// 1087 
// 1088       case SPI_CMD_SYS_GET_NV:
// 1089         MT_ProcessGetNV( pData );
// 1090         break;
// 1091 
// 1092       case SPI_CMD_SYS_TIME_ALIVE:
// 1093         // Time since last reset (seconds)
// 1094         tmp32 = osal_GetSystemClock() / 1000;
// 1095         // Convert to high byte first into temp buffer
// 1096         extAddr[0] = BREAK_UINT32( tmp32, 3 );
// 1097         extAddr[1] = BREAK_UINT32( tmp32, 2 );
// 1098         extAddr[2] = BREAK_UINT32( tmp32, 1 );
// 1099         extAddr[3] = BREAK_UINT32( tmp32, 0 );
// 1100         len = sizeof ( tmp32 );
// 1101         retValue = extAddr;
// 1102         break;
// 1103 
// 1104       case SPI_CMD_SYS_KEY_EVENT:
// 1105         // Translate between SPI values to device values
// 1106         if ( pData[1] & 0x01 )
// 1107           x |= HAL_KEY_SW_1;
// 1108         if ( pData[1] & 0x02 )
// 1109           x |= HAL_KEY_SW_2;
// 1110         if ( pData[1] & 0x04 )
// 1111           x |= HAL_KEY_SW_3;
// 1112         if ( pData[1] & 0x08 )
// 1113           x |= HAL_KEY_SW_4;
// 1114 #if defined ( HAL_KEY_SW_5 )
// 1115         if ( pData[1] & 0x10 )
// 1116           x |= HAL_KEY_SW_5;
// 1117 #endif
// 1118 #if defined ( HAL_KEY_SW_6 )
// 1119         if ( pData[1] & 0x20 )
// 1120           x |= HAL_KEY_SW_6;
// 1121 #endif
// 1122 #if defined ( HAL_KEY_SW_7 )
// 1123         if ( pData[1] & 0x40 )
// 1124           x |= HAL_KEY_SW_7;
// 1125 #endif
// 1126 #if defined ( HAL_KEY_SW_8 )
// 1127         if ( pData[1] & 0x80 )
// 1128           x |= HAL_KEY_SW_8;
// 1129 #endif
// 1130         ret = OnBoard_SendKeys( x, pData[0]  );
// 1131         len = 1;
// 1132         break;
// 1133 
// 1134       case SPI_CMD_SYS_HEARTBEAT:
// 1135         ret = ZSUCCESS;
??MT_ProcessSerialCommand_14:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        CLR	A
        LJMP	??MT_ProcessSerialCommand_28 & 0xFFFF
??MT_ProcessSerialCommand_4:
        ; Setup parameters for call to function MT_Reset
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV	R1,A
        MOV	DPTR,#(MT_Reset & 0xffff)
        MOV	A,#((MT_Reset >> 16) & 0xff)
??MT_ProcessSerialCommand_29:
        LCALL	?BCALL               ; Banked call to: DPTR()
        LJMP	??MT_ProcessSerialCommand_30 & 0xFFFF
??MT_ProcessSerialCommand_5:
        INC	R4
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        CLR	A
        SJMP	??MT_ProcessSerialCommand_24
??MT_ProcessSerialCommand_6:
        MOV	A,#0x9
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	R4
        INC	R4
??MT_ProcessSerialCommand_31:
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        LJMP	??MT_ProcessSerialCommand_23 & 0xFFFF
??MT_ProcessSerialCommand_7:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        DEC	A
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,R0
        ADD	A,#(MTVersionString & 0xff)
        MOV	?V0 + 0,A
        MOV	A,R1
        ADDC	A,#((MTVersionString >> 8) & 0xff)
        MOV	?V0 + 1,A
        ; Setup parameters for call to function osal_strlen
        MOV	DPL,?V0 + 0
        MOV	DPH,A
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV	DPTR,#(osal_strlen & 0xffff)
        MOV	A,#((osal_strlen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        MOV	R4,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
// 1136         len = 1;
// 1137         break;
// 1138 
// 1139 #if !defined ( NONWK )
// 1140       case SPI_CMD_SYS_APP_MSG:
// 1141         ret = MTProcessAppMsg( pData, msg[2] );
// 1142         len = 0;
// 1143         break;
// 1144 #endif // NONWK
// 1145 
// 1146       case SPI_CMD_SYS_LED_CONTROL:
// 1147 #if (defined HAL_LED) && (HAL_LED == TRUE)
// 1148         ret = MTProcessLedControl( pData );
// 1149         len = 1;
// 1150 #endif
// 1151         break;
// 1152 
// 1153 #ifdef MT_MAC_FUNC
// 1154       case SPI_CMD_MAC_INIT:
// 1155       case SPI_CMD_MAC_ASSOCIATE_REQ:
// 1156       case SPI_CMD_MAC_ASSOCIATE_RSP:
// 1157       case SPI_CMD_MAC_DISASSOCIATE_REQ:
// 1158       case SPI_CMD_MAC_DATA_REQ:
// 1159       case SPI_CMD_MAC_GET_REQ:
// 1160       case SPI_CMD_MAC_SET_REQ:
// 1161       case SPI_CMD_MAC_START_REQ:
// 1162       case SPI_CMD_MAC_SCAN_REQ:
// 1163       case SPI_CMD_MAC_RESET_REQ:
// 1164       case SPI_CMD_MAC_GTS_REQ:
// 1165       case SPI_CMD_MAC_ORPHAN_RSP:
// 1166       case SPI_CMD_MAC_RX_ENABLE_REQ:
// 1167       case SPI_CMD_MAC_SYNC_REQ:
// 1168       case SPI_CMD_MAC_POLL_REQ:
// 1169       case SPI_CMD_MAC_PURGE_REQ:
// 1170         MT_MacCommandProcessing( cmd , len , pData );
// 1171         break;
// 1172 #endif
// 1173 
// 1174 #ifdef MT_NWK_FUNC
// 1175       case SPI_CMD_NWK_INIT:
// 1176       case SPI_CMD_NLDE_DATA_REQ:
// 1177       case SPI_CMD_NLME_INIT_COORD_REQ:
// 1178       case SPI_CMD_NLME_PERMIT_JOINING_REQ:
// 1179       case SPI_CMD_NLME_JOIN_REQ:
// 1180       case SPI_CMD_NLME_LEAVE_REQ:
// 1181       case SPI_CMD_NLME_RESET_REQ:
// 1182       case SPI_CMD_NLME_RX_STATE_REQ:
// 1183       case SPI_CMD_NLME_GET_REQ:
// 1184       case SPI_CMD_NLME_SET_REQ:
// 1185       case SPI_CMD_NLME_NWK_DISC_REQ:
// 1186       case SPI_CMD_NLME_ROUTE_DISC_REQ:
// 1187       case SPI_CMD_NLME_DIRECT_JOIN_REQ:
// 1188       case SPI_CMD_NLME_ORPHAN_JOIN_REQ:
// 1189       case SPI_CMD_NLME_START_ROUTER_REQ:
// 1190         MT_NwkCommandProcessing( cmd , len , pData );
// 1191         break;
// 1192 #endif
// 1193 
// 1194 #ifdef MT_ZDO_FUNC
// 1195       case SPI_CMD_ZDO_AUTO_ENDDEVICEBIND_REQ:
// 1196       case SPI_CMD_ZDO_AUTO_FIND_DESTINATION_REQ:
// 1197       case SPI_CMD_ZDO_NWK_ADDR_REQ:
// 1198       case SPI_CMD_ZDO_IEEE_ADDR_REQ:
// 1199       case SPI_CMD_ZDO_NODE_DESC_REQ:
// 1200       case SPI_CMD_ZDO_POWER_DESC_REQ:
// 1201       case SPI_CMD_ZDO_SIMPLE_DESC_REQ:
// 1202       case SPI_CMD_ZDO_ACTIVE_EPINT_REQ:
// 1203       case SPI_CMD_ZDO_MATCH_DESC_REQ:
// 1204       case SPI_CMD_ZDO_COMPLEX_DESC_REQ:
// 1205       case SPI_CMD_ZDO_USER_DESC_REQ:
// 1206       case SPI_CMD_ZDO_END_DEV_BIND_REQ:
// 1207       case SPI_CMD_ZDO_BIND_REQ:
// 1208       case SPI_CMD_ZDO_UNBIND_REQ:
// 1209       case SPI_CMD_ZDO_MGMT_NWKDISC_REQ:
// 1210       case SPI_CMD_ZDO_MGMT_LQI_REQ:
// 1211       case SPI_CMD_ZDO_MGMT_RTG_REQ:
// 1212       case SPI_CMD_ZDO_MGMT_BIND_REQ:
// 1213       case SPI_CMD_ZDO_MGMT_DIRECT_JOIN_REQ:
// 1214       case SPI_CMD_ZDO_USER_DESC_SET:
// 1215       case SPI_CMD_ZDO_END_DEV_ANNCE:
// 1216       case SPI_CMD_ZDO_MGMT_LEAVE_REQ:
// 1217       case SPI_CMD_ZDO_MGMT_PERMIT_JOIN_REQ:
// 1218       case SPI_CMD_ZDO_SERVERDISC_REQ:
// 1219       case SPI_CMD_ZDO_NETWORK_START_REQ:
// 1220         MT_ZdoCommandProcessing( cmd , len , pData );
// 1221         break;
// 1222 #endif
// 1223 
// 1224 #if defined ( MT_AF_FUNC )
// 1225       case SPI_CMD_AF_INIT:
// 1226       case SPI_CMD_AF_REGISTER:
// 1227       case SPI_CMD_AF_SENDMSG:
// 1228         MT_afCommandProcessing( cmd , len , pData );
// 1229         break;
// 1230 #endif
// 1231 
// 1232 #if defined ( MT_SAPI_FUNC )
// 1233       case SPI_CMD_SAPI_SYS_RESET:
// 1234       case SPI_CMD_SAPI_START_REQ:
// 1235       case SPI_CMD_SAPI_BIND_DEVICE:
// 1236       case SPI_CMD_SAPI_ALLOW_BIND:
// 1237       case SPI_CMD_SAPI_SEND_DATA:
// 1238       case SPI_CMD_SAPI_READ_CFG:
// 1239       case SPI_CMD_SAPI_WRITE_CFG:
// 1240       case SPI_CMD_SAPI_GET_DEV_INFO:
// 1241       case SPI_CMD_SAPI_FIND_DEV:
// 1242       case SPI_CMD_SAPI_PMT_JOIN:
// 1243         ret = MT_sapiCommandProcessing( cmd , len , pData );
// 1244         if ( ret == 0xff )
// 1245           len = 0;
// 1246         else
// 1247           len = 1;
// 1248         break;
// 1249 #endif
// 1250 
// 1251 #if defined ( MT_USER_TEST_FUNC )
// 1252       case SPI_CMD_USER_TEST:
// 1253         MT_ProcessAppUserCmd( pData );
// 1254         break;
// 1255 #endif
// 1256 
// 1257       default:
// 1258         break;
// 1259     }
// 1260 
// 1261     if ( len )
??MT_ProcessSerialCommand_0:
        MOV	A,R4
        JZ	??MT_ProcessSerialCommand_30
// 1262     {
// 1263       MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + len),
// 1264                                     (SPI_RESPONSE_BIT | cmd),
// 1265                                     len, retValue );
??MT_ProcessSerialCommand_25:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV	A,R6
        MOV	R2,A
        MOV	A,#0x10
        ORL	A,R7
        MOV	R3,A
        MOV	A,#0x5
        ADD	A,R4
        MOV	R1,A
        MOV	DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
        MOV	A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
// 1266     }
// 1267   }
??MT_ProcessSerialCommand_30:
        MOV	A,#0x13
        LJMP	?Subroutine19 & 0xFFFF
??MT_ProcessSerialCommand_8:
        ; Setup parameters for call to function MT_ReverseBytes
        MOV	R1,#0x8
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV	DPTR,#(MT_ReverseBytes & 0xffff)
        MOV	A,#((MT_ReverseBytes >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        ; Setup parameters for call to function ZMacSetReq
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV	R1,#-0x1e
        LCALL	ZMacSetReq & 0xFFFF
        MOV	A,R1
        JNZ	??MT_ProcessSerialCommand_32
        ; Setup parameters for call to function osal_nv_write
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV	?V0 + 0,#0x8
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#0x1
??MT_ProcessSerialCommand_33:
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_write & 0xffff)
        MOV	A,#((osal_nv_write >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
        LJMP	??MT_ProcessSerialCommand_27 & 0xFFFF
??MT_ProcessSerialCommand_32:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x1
??MT_ProcessSerialCommand_28:
        MOVX	@DPTR,A
        MOV	R4,#0x1
        SJMP	??MT_ProcessSerialCommand_25
??MT_ProcessSerialCommand_9:
        ; Setup parameters for call to function ZMacGetReq
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	R1,#-0x1e
        LCALL	ZMacGetReq & 0xFFFF
        ; Setup parameters for call to function MT_ReverseBytes
        MOV	R1,#0x8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(MT_ReverseBytes & 0xffff)
        MOV	A,#((MT_ReverseBytes >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	R4,#0x8
        LJMP	??MT_ProcessSerialCommand_31 & 0xFFFF
??MT_ProcessSerialCommand_18:
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV	R0,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,#0x9
        LCALL	?XSTACK_DISP0_8
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        ; Setup parameters for call to function osal_nv_write
        MOV	A,#0x9
        LCALL	?XSTACK_DISP0_8
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        ; Setup parameters for call to function osal_nv_item_len
        MOV	R2,#-0x7d
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_len & 0xffff)
        MOV	A,#((osal_nv_item_len >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7d
        SJMP	??MT_ProcessSerialCommand_33
        CFI CFA_XSP16 add(XSP16, 35)
??MT_ProcessSerialCommand_19:
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_44:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	?V0 + 1,R1
        MOV	?V0 + 2,R1
        MOV	?V0 + 3,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_53:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        MOV	?V0 + 5,R1
        MOV	?V0 + 6,R1
        MOV	?V0 + 7,R1
        MOV	A,#0x8
        MOV	R0,#?V0 + 4
        LCALL	?L_SHL
        MOV	R0,#?V0 + 0
        MOV	R1,#?V0 + 4
        LCALL	?L_ADD
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV	?V0 + 4,A
        MOV	?V0 + 5,R4
        MOV	A,#0x10
        MOV	R0,#?V0 + 4
        LCALL	?L_SHL
        MOV	R0,#?V0 + 0
        MOV	R1,#?V0 + 4
        LCALL	?L_ADD
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV	?V0 + 4,A
        MOV	?V0 + 6,R4
        MOV	A,#0x18
        MOV	R0,#?V0 + 4
        LCALL	?L_SHL
        MOV	R0,#?V0 + 0
        MOV	R1,#?V0 + 4
        LCALL	?L_ADD
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
        ; Setup parameters for call to function osal_nv_write
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        ; Setup parameters for call to function osal_nv_item_len
        MOV	R2,#-0x7c
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_len & 0xffff)
        MOV	A,#((osal_nv_item_len >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7c
??MT_ProcessSerialCommand_34:
        LJMP	??MT_ProcessSerialCommand_33 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 35)
??MT_ProcessSerialCommand_20:
        ; Setup parameters for call to function osal_nv_write
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        ; Setup parameters for call to function osal_nv_item_len
        MOV	R2,#0x61
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_len & 0xffff)
        MOV	A,#((osal_nv_item_len >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#0x61
        LJMP	??MT_ProcessSerialCommand_33 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 35)
??MT_ProcessSerialCommand_21:
        ; Setup parameters for call to function osal_nv_write
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        ; Setup parameters for call to function osal_nv_item_len
        MOV	R2,#0x62
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_len & 0xffff)
        MOV	A,#((osal_nv_item_len >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#0x62
        SJMP	??MT_ProcessSerialCommand_34
        CFI CFA_XSP16 add(XSP16, 35)
??MT_ProcessSerialCommand_22:
        ; Setup parameters for call to function MT_ProcessGetNvInfo
        MOV	DPTR,#(MT_ProcessGetNvInfo & 0xffff)
        MOV	A,#((MT_ProcessGetNvInfo >> 16) & 0xff)
        LJMP	??MT_ProcessSerialCommand_29 & 0xFFFF
??MT_ProcessSerialCommand_12:
        ; Setup parameters for call to function MT_ProcessGetDeviceInfo
        MOV	DPTR,#(MT_ProcessGetDeviceInfo & 0xffff)
        MOV	A,#((MT_ProcessGetDeviceInfo >> 16) & 0xff)
        LJMP	??MT_ProcessSerialCommand_29 & 0xFFFF
??MT_ProcessSerialCommand_10:
        ; Setup parameters for call to function MT_ProcessSetNV
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV	DPTR,#(MT_ProcessSetNV & 0xffff)
        MOV	A,#((MT_ProcessSetNV >> 16) & 0xff)
        LJMP	??MT_ProcessSerialCommand_26 & 0xFFFF
??MT_ProcessSerialCommand_11:
        ; Setup parameters for call to function MT_ProcessGetNV
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV	DPTR,#(MT_ProcessGetNV & 0xffff)
        MOV	A,#((MT_ProcessGetNV >> 16) & 0xff)
        LJMP	??MT_ProcessSerialCommand_29 & 0xFFFF
??MT_ProcessSerialCommand_17:
        ; Setup parameters for call to function osal_GetSystemClock
        MOV	DPTR,#(osal_GetSystemClock & 0xffff)
        MOV	A,#((osal_GetSystemClock >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
        MOV	DPTR,#__Constant_3e8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?UL_DIV_MOD
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 4
        LCALL	?L_MOV_TO_X
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,#0x18
        MOV	R0,#?V0 + 0
        LCALL	?UL_SHR
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,#0x10
        MOV	R0,#?V0 + 0
        LCALL	?UL_SHR
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,?V0 + 1
        MOV	?V0 + 0,A
        MOV	A,#0xd
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        MOV	R4,#0x4
        LJMP	??MT_ProcessSerialCommand_31 & 0xFFFF
??MT_ProcessSerialCommand_13:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV	C,0xE0 /* A   */.0
        JNC	??MT_ProcessSerialCommand_35
        INC	R1
??MT_ProcessSerialCommand_35:
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV	C,0xE0 /* A   */.1
        JNC	??MT_ProcessSerialCommand_36
        MOV	A,R1
        SETB	0xE0 /* A   */.3
        MOV	R1,A
??MT_ProcessSerialCommand_36:
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV	C,0xE0 /* A   */.2
        JNC	??MT_ProcessSerialCommand_37
        MOV	A,R1
        SETB	0xE0 /* A   */.4
        MOV	R1,A
??MT_ProcessSerialCommand_37:
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV	C,0xE0 /* A   */.3
        JNC	??MT_ProcessSerialCommand_38
        MOV	A,R1
        SETB	0xE0 /* A   */.1
        MOV	R1,A
??MT_ProcessSerialCommand_38:
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV	C,0xE0 /* A   */.4
        JNC	??MT_ProcessSerialCommand_39
        MOV	A,R1
        SETB	0xE0 /* A   */.5
        MOV	R1,A
??MT_ProcessSerialCommand_39:
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV	C,0xE0 /* A   */.5
        JNC	??MT_ProcessSerialCommand_40
        MOV	A,R1
        SETB	0xE0 /* A   */.2
        MOV	R1,A
??MT_ProcessSerialCommand_40:
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV	C,0xE0 /* A   */.6
        JNC	??MT_ProcessSerialCommand_41
        MOV	A,R1
        SETB	0xE0 /* A   */.6
        MOV	R1,A
??MT_ProcessSerialCommand_41:
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV	C,0xE0 /* A   */.7
        JNC	??MT_ProcessSerialCommand_42
        MOV	A,R1
        SETB	0xE0 /* A   */.7
        MOV	R1,A
??MT_ProcessSerialCommand_42:
        ; Setup parameters for call to function OnBoard_SendKeys
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	??Subroutine8_1 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV	R2,A
        MOV	DPTR,#(OnBoard_SendKeys & 0xffff)
        MOV	A,#((OnBoard_SendKeys >> 16) & 0xff)
        LJMP	??MT_ProcessSerialCommand_26 & 0xFFFF
??MT_ProcessSerialCommand_15:
        ; Setup parameters for call to function MTProcessAppMsg
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV	DPTR,#(MTProcessAppMsg & 0xffff)
        MOV	A,#((MTProcessAppMsg >> 16) & 0xff)
        LJMP	??MT_ProcessSerialCommand_29 & 0xFFFF
??MT_ProcessSerialCommand_16:
        ; Setup parameters for call to function MTProcessLedControl
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV	DPTR,#(MTProcessLedControl & 0xffff)
        MOV	A,#((MTProcessLedControl >> 16) & 0xff)
        LJMP	??MT_ProcessSerialCommand_26 & 0xFFFF
        CFI EndBlock cfiBlock47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_56:
        INC	DPTR
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_44
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_14
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_43
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R0,A
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_22
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_23
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_21
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_16
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_19
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_27
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_17
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_20
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_25
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_24
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_18
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_26
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 35)
??Subroutine14_0:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        INC	DPTR
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 35)
??Subroutine7_0:
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond79 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_54:
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        MOVX	A,@DPTR
        MOV	R1,A
        CLR	A
        ADD	A,R2
        RET
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81
// 1268 #endif // ZTOOL
// 1269 
// 1270 #if (defined HAL_LED) && (HAL_LED == TRUE)
// 1271 /***************************************************************************************************
// 1272  * @fn      MTProcessLedControl
// 1273  *
// 1274  * @brief
// 1275  *
// 1276  *   Process the LED Control Message
// 1277  *
// 1278  * @param   data - input serial buffer
// 1279  *
// 1280  * @return  status
// 1281  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1282 byte MTProcessLedControl( byte *pData )
MTProcessLedControl:
        CFI Block cfiBlock82 Using cfiCommon0
        CFI Function MTProcessLedControl
// 1283 {
        FUNCALL MTProcessLedControl, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1284   byte iLed;
// 1285   byte Led;
// 1286   byte iMode;
// 1287   byte Mode;
// 1288 
// 1289   iLed = *pData++;
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	R4,A
// 1290   iMode = *pData;
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
// 1291 
// 1292   if ( iLed == 1 )
        MOV	A,#0x1
        XRL	A,R4
        JNZ	??MTProcessLedControl_0
// 1293     Led = HAL_LED_1;
        MOV	R1,#0x1
        SJMP	??MTProcessLedControl_1
// 1294   else if ( iLed == 2 )
??MTProcessLedControl_0:
        MOV	A,#0x2
        XRL	A,R4
        JNZ	??MTProcessLedControl_2
// 1295     Led = HAL_LED_2;
        MOV	R1,#0x2
        SJMP	??MTProcessLedControl_1
// 1296   else if ( iLed == 3 )
??MTProcessLedControl_2:
        MOV	A,#0x3
        XRL	A,R4
        JNZ	??MTProcessLedControl_3
// 1297     Led = HAL_LED_3;
        MOV	R1,#0x4
        SJMP	??MTProcessLedControl_1
// 1298   else if ( iLed == 4 )
??MTProcessLedControl_3:
        MOV	A,#0x4
        XRL	A,R4
        JNZ	??MTProcessLedControl_4
// 1299     Led = HAL_LED_4;
        MOV	R1,#0x8
        SJMP	??MTProcessLedControl_1
// 1300   else if ( iLed == 0xFF )
??MTProcessLedControl_4:
        MOV	A,#-0x1
        XRL	A,R4
        JNZ	??MTProcessLedControl_5
// 1301     Led = HAL_LED_ALL;
        MOV	R1,#0xf
        SJMP	??MTProcessLedControl_1
// 1302   else
// 1303     Led = 0;
??MTProcessLedControl_5:
        MOV	R1,#0x0
// 1304 
// 1305   if ( iMode == 0 )
??MTProcessLedControl_1:
        MOV	A,R2
        JNZ	??MTProcessLedControl_6
// 1306     Mode = HAL_LED_MODE_OFF;
        MOV	R2,#0x0
        SJMP	??MTProcessLedControl_7
// 1307   else if ( iMode == 1 )
??MTProcessLedControl_6:
        MOV	A,#0x1
        XRL	A,R2
        JNZ	??MTProcessLedControl_8
// 1308     Mode = HAL_LED_MODE_ON;
        MOV	R2,#0x1
        SJMP	??MTProcessLedControl_7
// 1309   else if ( iMode == 2 )
??MTProcessLedControl_8:
        MOV	A,#0x2
        XRL	A,R2
        JNZ	??MTProcessLedControl_9
// 1310     Mode = HAL_LED_MODE_BLINK;
        MOV	R2,#0x2
        SJMP	??MTProcessLedControl_7
// 1311   else if ( iMode == 3 )
??MTProcessLedControl_9:
        MOV	A,#0x3
        XRL	A,R2
        JNZ	??MTProcessLedControl_10
// 1312     Mode = HAL_LED_MODE_FLASH;
        MOV	R2,#0x4
        SJMP	??MTProcessLedControl_7
// 1313   else if ( iMode == 4 )
??MTProcessLedControl_10:
        MOV	A,#0x4
        XRL	A,R2
        JNZ	??MTProcessLedControl_11
// 1314     Mode = HAL_LED_MODE_TOGGLE;
        MOV	R2,#0x8
// 1315   else
// 1316     Led = 0;
// 1317 
// 1318   if ( Led != 0 )
??MTProcessLedControl_7:
        MOV	A,R1
        JZ	??MTProcessLedControl_11
// 1319   {
// 1320     HalLedSet (Led, Mode );
        ; Setup parameters for call to function HalLedSet
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1321     return ( ZSuccess );
        MOV	R1,#0x0
        SJMP	??MTProcessLedControl_12
// 1322   }
// 1323   else
// 1324     return ( ZFailure );
??MTProcessLedControl_11:
        MOV	R1,#0x1
??MTProcessLedControl_12:
        LJMP	?Subroutine16 & 0xFFFF
        CFI EndBlock cfiBlock82
// 1325 }
// 1326 #endif // HAL_LED
// 1327 
// 1328 #if !defined ( NONWK )
// 1329 /*********************************************************************
// 1330  * @fn      MTProcessAppMsg
// 1331  *
// 1332  * @brief
// 1333  *
// 1334  *   Process the User App Message
// 1335  *
// 1336  * @param   data - input serial buffer
// 1337  * @param   len - data length
// 1338  *
// 1339  * @return  status
// 1340  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1341 byte MTProcessAppMsg( byte *pData, byte len )
MTProcessAppMsg:
        CFI Block cfiBlock83 Using cfiCommon0
        CFI Function MTProcessAppMsg
// 1342 {
        FUNCALL MTProcessAppMsg, afFindEndPointDesc
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL MTProcessAppMsg, osal_msg_allocate
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL MTProcessAppMsg, osal_memcpy
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL MTProcessAppMsg, osal_msg_send
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	?V0 + 3,R1
// 1343   byte ret = ZFailure;
        MOV	?V0 + 2,#0x1
// 1344   byte endpoint;
// 1345   endPointDesc_t *epDesc;
// 1346   mtSysAppMsg_t *msg;
// 1347 
// 1348   // Get the endpoint and skip past it.
// 1349   endpoint = *pData++;
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        INC	DPTR
        MOV	?V0 + 6,DPL
        MOV	?V0 + 7,DPH
// 1350   len--;
        DEC	?V0 + 3
// 1351 
// 1352   // Look up the endpoint
// 1353   epDesc = afFindEndPointDesc( endpoint );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV	R1,A
        MOV	DPTR,#(afFindEndPointDesc & 0xffff)
        MOV	A,#((afFindEndPointDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        LCALL	?Subroutine4 & 0xFFFF
// 1354 
// 1355   if ( epDesc )
??CrossCallReturnLabel_13:
        JNZ	??MTProcessAppMsg_0
        INC	DPTR
        MOVX	A,@DPTR
??MTProcessAppMsg_0:
        JNZ	$+5
        LJMP	??MTProcessAppMsg_1 & 0xFFFF
// 1356   {
// 1357     // Build and send the message to the APP
// 1358     msg = (mtSysAppMsg_t *)osal_msg_allocate( sizeof( mtSysAppMsg_t ) + len );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	?V0 + 0,?V0 + 3
        MOV	A,#0x6
        ADD	A,?V0 + 0
        MOV	R2,A
        CLR	A
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R6,?V0 + 0
        MOV	R7,?V0 + 1
// 1359     if ( msg )
        MOV	A,R6
        JNZ	??MTProcessAppMsg_2
        MOV	A,R7
??MTProcessAppMsg_2:
        JZ	??MTProcessAppMsg_1
// 1360     {
// 1361       msg->hdr.event = MT_SYS_APP_MSG;
        MOV	A,#0x23
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
// 1362       msg->endpoint = endpoint;
        INC	DPTR
        INC	DPTR
        MOV	A,?V0 + 4
        LCALL	?Subroutine3 & 0xFFFF
// 1363       msg->appDataLen = len;
??CrossCallReturnLabel_11:
        MOV	A,?V0 + 3
        MOVX	@DPTR,A
// 1364       msg->appData = (uint8*)(msg+1);
        MOV	A,R6
        ADD	A,#0x4
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	A,R6
        ADD	A,#0x6
        MOV	R0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R1,A
        MOV	DPL,R2
        MOV	DPH,R3
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
// 1365 
// 1366       osal_memcpy( msg->appData, pData, len );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 0,?V0 + 6
        MOV	?V0 + 1,?V0 + 7
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	R4,?V0 + 3
        MOV	R5,#0x0
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 1367 
// 1368       osal_msg_send( *(epDesc->task_id), (uint8 *)msg );
        ; Setup parameters for call to function osal_msg_send
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL	??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV	R1,A
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1369 
// 1370       ret = ZSuccess;
// 1371     }
// 1372   }
// 1373 
// 1374   return ret;
??MTProcessAppMsg_1:
        MOV	R1,?V0 + 2
        MOV	A,#0x2
        LJMP	?Subroutine19 & 0xFFFF
        CFI EndBlock cfiBlock83
// 1375 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 18)
??Subroutine8_0:
        MOV	R0,A
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 35)
??Subroutine8_1:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 18)
??Subroutine6_0:
        LCALL	??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_55:
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        MOVX	@DPTR,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond107 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        MOVX	@DPTR,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109
// 1376 #endif // NONWK
// 1377 
// 1378 #if defined ( ZTOOL_PORT )
// 1379 /*********************************************************************
// 1380  * @fn      MTProcessAppRspMsg
// 1381  *
// 1382  * @brief
// 1383  *
// 1384  *   Process the User App Response Message
// 1385  *
// 1386  * @param   data - output serial buffer.  The first byte must be the
// 1387  *          endpoint that send this message.
// 1388  * @param   len - data length
// 1389  *
// 1390  * @return  none
// 1391  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1392 void MTProcessAppRspMsg( byte *pData, byte len )
MTProcessAppRspMsg:
        CFI Block cfiBlock110 Using cfiCommon0
        CFI Function MTProcessAppRspMsg
// 1393 {
        FUNCALL MTProcessAppRspMsg, MT_BuildAndSendZToolResponse
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1394   // Send out Reset Response message
// 1395   MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + len),
// 1396                                 (SPI_RESPONSE_BIT | SPI_CMD_SYS_APP_MSG),
// 1397                                 len, pData );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	A,R1
        MOV	R4,A
        MOV	R2,#0x18
        MOV	R3,#0x10
        MOV	A,#0x5
        ADD	A,R1
        MOV	R1,A
        MOV	DPTR,#(MT_BuildAndSendZToolResponse & 0xffff)
        MOV	A,#((MT_BuildAndSendZToolResponse >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LJMP	??Subroutine17_0 & 0xFFFF
        CFI EndBlock cfiBlock110
// 1398 }
// 1399 #endif // ZTOOL_PORT
// 1400 
// 1401 
// 1402 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
// 1403 #if defined ( MT_USER_TEST_FUNC )
// 1404 /*********************************************************************
// 1405  * @fn      MT_ProcessAppUserCmd
// 1406  *
// 1407  * @brief
// 1408  *
// 1409  *   Temp function for testing
// 1410  *
// 1411  * @param   data - received message
// 1412  *
// 1413  * @return  void
// 1414  */
// 1415 void MT_ProcessAppUserCmd( byte *pData) 						
// 1416 {
// 1417   uint16 app_cmd;
// 1418   byte srcEp;
// 1419   uint16 param1;
// 1420   uint16 param2;
// 1421   byte len;
// 1422   uint16 ret;
// 1423 
// 1424   ret = INVALID_TASK;     //should be changed later
// 1425 
// 1426   srcEp = *pData++;
// 1427 
// 1428   app_cmd = BUILD_UINT16( pData[1] , pData[0] );
// 1429   pData = pData + sizeof( uint16 );
// 1430 
// 1431   param1 = BUILD_UINT16( pData[1] , pData[0] );
// 1432   pData = pData + sizeof( uint16 );
// 1433 
// 1434   param2 = BUILD_UINT16( pData[1] , pData[0] );
// 1435 
// 1436   len = SPI_RESP_MSG_LEN_DEFAULT;
// 1437 
// 1438 
// 1439   switch ( app_cmd )
// 1440   {
// 1441 
// 1442 #if defined (APP_TGEN)
// 1443     case TGEN_START:
// 1444       TrafficGenApp_SendCmdMSG( param1, param2, TRAFFICGENAPP_CMD_START );
// 1445       ret = ZSUCCESS;
// 1446       break;
// 1447 
// 1448     case TGEN_STOP:
// 1449       TrafficGenApp_SendCmdMSG( param1, param2, TRAFFICGENAPP_CMD_STOP );
// 1450       ret = ZSUCCESS;
// 1451       break;
// 1452 
// 1453     case TGEN_COUNT:
// 1454       ret = TrafficGenApp_CountPkt( param1, param2 );
// 1455       return;		// so that spi_resp is not sent...
// 1456       //ret = ZSUCCESS;
// 1457       break;				
// 1458 #endif
// 1459 
// 1460 #if defined (NWK_TEST)
// 1461     case HW_TEST:
// 1462       HwApp_Start( HI_UINT16(param1), LO_UINT16(param1), HI_UINT16(param2),
// 1463                     1000, LO_UINT16(param2), 3, 0 );
// 1464       break;
// 1465 
// 1466     case HW_DISPLAY_RESULT:
// 1467       HwApp_TestInfo();
// 1468       break;
// 1469 
// 1470     case HW_SEND_STATUS:
// 1471       HwApp_SendStats();
// 1472       break;
// 1473 #endif
// 1474 
// 1475 #if defined( APP_TP ) || defined ( APP_TP2 )
// 1476   #if defined( APP_TP )
// 1477     case TP_SEND_NODATA:
// 1478       ret = TestProfileApp_SendNoData( srcEp, (byte)param1 );
// 1479       break;
// 1480   #endif // APP_TP
// 1481 			
// 1482     case TP_SEND_BUFFERTEST:
// 1483       ret = TestProfileApp_SendBufferReq( srcEp, (byte)param1 );
// 1484       break;
// 1485 			
// 1486   #if defined( APP_TP )
// 1487     case TP_SEND_UINT8:
// 1488       ret = TestProfileApp_SendUint8( srcEp, (byte)param1 );
// 1489       break;
// 1490 
// 1491     case TP_SEND_INT8:
// 1492       ret = TestProfileApp_SendInt8( srcEp, (byte)param1 );
// 1493       break;
// 1494 
// 1495     case TP_SEND_UINT16:
// 1496       ret = TestProfileApp_SendUint16( srcEp, (byte)param1 );
// 1497       break;
// 1498 
// 1499     case TP_SEND_INT16:
// 1500       ret = TestProfileApp_SendInt16( srcEp, (byte)param1 );
// 1501       break;
// 1502 
// 1503     case TP_SEND_SEMIPREC:
// 1504       ret = TestProfileApp_SendSemiPrec( srcEp, (byte)param1 );
// 1505       break;
// 1506 
// 1507     case TP_SEND_FREEFORM:
// 1508       ret = TestProfileApp_SendFreeFormReq( srcEp, (byte)param1 );
// 1509       break;
// 1510 			
// 1511   #else // APP_TP
// 1512     case TP_SEND_FREEFORM:
// 1513       ret = TestProfileApp_SendFreeFormReq(srcEp, (byte)param1, (byte)param2);
// 1514       break;
// 1515   #endif
// 1516 			
// 1517   #if defined( APP_TP )
// 1518     case TP_SEND_ABS_TIME:
// 1519       ret = TestProfileApp_SendAbsTime( srcEp, (byte)param1 );
// 1520       break;
// 1521 
// 1522     case TP_SEND_REL_TIME:
// 1523       ret = TestProfileApp_SendRelativeTime( srcEp, (byte)param1 );
// 1524       break;
// 1525 
// 1526     case TP_SEND_CHAR_STRING:
// 1527       ret = TestProfileApp_SendCharString( srcEp, (byte)param1 );
// 1528       break;
// 1529 
// 1530     case TP_SEND_OCTET_STRING:
// 1531       ret = TestProfileApp_SendOctetString( srcEp, (byte)param1 );
// 1532       break;		
// 1533   #endif // APP_TP
// 1534 				
// 1535     case TP_SET_DSTADDRESS:			
// 1536       ret = TestProfileApp_SetDestAddress(HI_UINT16(param1), LO_UINT16(param1), param2);
// 1537       break;	
// 1538 
// 1539   #if defined( APP_TP2 )
// 1540     case TP_SEND_BUFFER_GROUP:
// 1541       ret = TestProfileApp_SendBufferGroup( srcEp, (byte)param1 );
// 1542       break;
// 1543   #endif // APP_TP
// 1544 
// 1545     case TP_SEND_BUFFER:
// 1546       ret = TestProfileApp_SendBuffer( srcEp, (byte)param1 );
// 1547       break;
// 1548 				
// 1549   #if defined( APP_TP )
// 1550     case TP_SEND_MULT_KVP_8BIT:
// 1551       TestProfileApp_SendMultiKVP_8bit( srcEp, (byte)param1 );
// 1552       ret = ZSuccess;
// 1553       break;
// 1554 
// 1555     case TP_SEND_MULT_KVP_16BIT:
// 1556       TestProfileApp_SendMultiKVP_16bit( srcEp, (byte)param1 );
// 1557       ret = ZSuccess;
// 1558       break;
// 1559 
// 1560     case TP_SEND_MULT_KVP_TIME:
// 1561       TestProfileApp_SendMultiKVP_Time( srcEp, (byte)param1 );
// 1562       ret = ZSuccess;
// 1563       break;
// 1564 
// 1565     case TP_SEND_MULT_KVP_STRING:
// 1566       TestProfileApp_SendMultiKVP_String( srcEp, (byte)param1 );
// 1567       ret = ZSuccess;
// 1568       break;
// 1569 
// 1570     case TP_SEND_MULTI_KVP_STR_TIME:
// 1571       ret = ZSuccess;
// 1572       TestProfileApp_SendMultiKVP_String_Time( srcEp, (byte)param1 );
// 1573       break;
// 1574   #endif // APP_TP
// 1575 				
// 1576     case TP_SEND_COUNTED_PKTS:
// 1577       TestProfileApp_SendCountedPktsReq(HI_UINT16(param1), LO_UINT16(param1), param2);
// 1578       ret = ZSuccess;
// 1579       break;
// 1580 
// 1581     case TP_SEND_RESET_COUNTER:
// 1582       TestProfileApp_CountedPakts_ResetCounterReq( (byte)param1 );
// 1583       ret = ZSuccess;
// 1584       break;
// 1585 
// 1586     case TP_SEND_GET_COUNTER:
// 1587       TestProfileApp_CountedPakts_GetCounterReq( srcEp, (byte)param1 );
// 1588       ret = ZSuccess;
// 1589       break;
// 1590 				
// 1591     case TP_SET_PERMIT_JOIN:
// 1592   #if defined ( RTR_NWK )
// 1593       NLME_PermitJoiningRequest( (byte)param1 );
// 1594       ret = ZSuccess;
// 1595   #else
// 1596       ret = ZFailure;
// 1597   #endif
// 1598       break;
// 1599 
// 1600   #if defined ( APP_TP2 )
// 1601     case TP_ADD_GROUP:
// 1602       ret = TestProfileApp_SetGroup( srcEp, param1 );
// 1603       break;
// 1604 
// 1605     case TP_REMOVE_GROUP:
// 1606       ret = TestProfileApp_RemoveGroup( srcEp, param1 );
// 1607       break;
// 1608 
// 1609     case TP_SEND_UPDATE_KEY:
// 1610       ret = TestProfileApp_UpdateKey( srcEp, (uint8)param1 );
// 1611       break;
// 1612 
// 1613     case TP_SEND_SWITCH_KEY:
// 1614       ret = TestProfileApp_SwitchKey(  srcEp, (uint8)param1 );
// 1615       break;
// 1616 			
// 1617     case TP_SEND_BUFFERTEST_GROUP:
// 1618       ret = TestProfileApp_SendBufferGroupReq( srcEp, (byte)param1 );
// 1619       break;
// 1620 
// 1621     case TP_SEND_ROUTE_DISC_REQ:
// 1622       ret = TestProfileApp_SendRouteDiscReq( srcEp, param1,
// 1623                                   HI_UINT16( param2 ), LO_UINT16( param2 ) );
// 1624       break;
// 1625 
// 1626     case TP_SEND_ROUTE_DISCOVERY:
// 1627 #if defined ( RTR_NWK )
// 1628       ret = TestProfileApp_SendRouteDiscovery( param1,
// 1629                                   HI_UINT16( param2 ), LO_UINT16( param2 ) );
// 1630 #endif
// 1631       break;
// 1632 
// 1633   #endif // APP_TP2
// 1634 
// 1635 #endif  // APP_TP || APP_TP2
// 1636 
// 1637 #if defined ( OSAL_TOTAL_MEM )
// 1638     case OSAL_MEM_STACK_HIGH_WATER:
// 1639     case OSAL_MEM_HEAP_HIGH_WATER:
// 1640       if ( app_cmd == OSAL_MEM_STACK_HIGH_WATER)
// 1641         param1 = osal_stack_used();
// 1642       else
// 1643         param1 = osal_heap_high_water();
// 1644       pData[0] = HI_UINT16( param1 );
// 1645       pData[1] = LO_UINT16( param1 );
// 1646 
// 1647       // The pData for this response will only send one byte,
// 1648       // so we are going to call it twice.
// 1649       //        MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + sizeof( uint16 )),
// 1650       //                                    (SPI_CMD_USER_TEST | SPI_RESPONSE_BIT),
// 1651       //                                    sizeof( uint16 ), pData );
// 1652       MT_SendSPIRespMsg( pData[0], SPI_CMD_USER_TEST, SPI_RESP_MSG_LEN_DEFAULT, 1);
// 1653       MT_SendSPIRespMsg( pData[1], SPI_CMD_USER_TEST, SPI_RESP_MSG_LEN_DEFAULT, 1);
// 1654       return;
// 1655 #endif
// 1656 
// 1657 #if defined ( APP_DEBUG )
// 1658     case DEBUG_GET:
// 1659       DebugApp_SendQuery( param1 );
// 1660       ret = ZSUCCESS;
// 1661       break;
// 1662 #endif
// 1663 
// 1664 #if defined ( APP_TP2 )
// 1665     case TP_SEND_BCAST_RSP:
// 1666       ret = TestProfileApp_SendBcastRsp( srcEp, (byte)param1 );
// 1667       break;
// 1668 #endif
// 1669 			
// 1670     default:
// 1671       break;
// 1672   }
// 1673 
// 1674   MT_SendSPIRespMsg( ( byte )ret, SPI_CMD_USER_TEST, len, 1);
// 1675 
// 1676 }
// 1677 #endif // MT_USER_TEST_FUNC
// 1678 #endif // ZTOOL
// 1679 
// 1680 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
// 1681 /***************************************************************************************************
// 1682  * @fn      MT_RAMRead
// 1683  *
// 1684  * @brief
// 1685  *
// 1686  *   Process Serial Message.
// 1687  *
// 1688  * @param   UINT16 addr - address to read from
// 1689  * @param   pData - pointer to buffer to put read data
// 1690  *
// 1691  * @return  ZSuccess or ZFailure
// 1692  *
// 1693  * @MT SPI_CMD_SYS_RAM_READ
// 1694  *
// 1695  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1696 byte MT_RAMRead( UINT16 addr, byte *pData  )
MT_RAMRead:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function MT_RAMRead
// 1697 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1698   byte *pAddr;
// 1699 
// 1700   if ( IS_MEM_VALID( addr ) )
        CLR	C
        MOV	A,R2
        SUBB	A,#0x0
        MOV	A,R3
        SUBB	A,#-0x20
        JC	??MT_RAMRead_0
// 1701   {
// 1702     pAddr = (byte *)addr;
// 1703     *pData = *pAddr;
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	@DPTR,A
// 1704     return ( (byte)ZSuccess );
        MOV	R1,#0x0
        SJMP	??MT_RAMRead_1
// 1705   }
// 1706   else
// 1707   {
// 1708     *pData = 0;
??MT_RAMRead_0:
        CLR	A
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	@DPTR,A
// 1709     return ( (byte)ZFailure );
        MOV	R1,#0x1
        CFI EndBlock cfiBlock111
??MT_RAMRead_1:
        REQUIRE ?Subroutine16
        ; // Fall through to label ?Subroutine16
// 1710   }
// 1711 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock112
// 1712 #endif
// 1713 
// 1714 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
// 1715 /***************************************************************************************************
// 1716  * @fn      MT_RAMWrite
// 1717  *
// 1718  * @brief
// 1719  *
// 1720  *   Process Serial Message.
// 1721  *
// 1722  * @param   UINT16 addr - address to write at
// 1723  * @param   byte val  - values to fill in the above address and the next
// 1724  *
// 1725  * @return  ZSuccess or ZFailure
// 1726  *
// 1727  * @MT SPI_CMD_SYS_RAM_WRITE
// 1728  *
// 1729  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1730 byte MT_RAMWrite( UINT16 addr, byte val )
MT_RAMWrite:
        CFI Block cfiBlock113 Using cfiCommon0
        CFI Function MT_RAMWrite
// 1731 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1732   if ( IS_MEM_VALID( addr ) )
        CLR	C
        MOV	A,R2
        SUBB	A,#0x0
        MOV	A,R3
        SUBB	A,#-0x20
        JC	??MT_RAMWrite_0
// 1733   {
// 1734     *((byte*)(addr)) = val;
        MOV	A,R1
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
// 1735     return ( (byte)ZSuccess );
        MOV	R1,#0x0
        SJMP	??MT_RAMWrite_1
// 1736   }
// 1737   else
// 1738     return ( (byte)ZFailure );
??MT_RAMWrite_0:
        MOV	R1,#0x1
??MT_RAMWrite_1:
        SJMP	?Subroutine16
        CFI EndBlock cfiBlock113
// 1739 }
// 1740 #endif
// 1741 
// 1742 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
// 1743 /***************************************************************************************************
// 1744  * @fn      MT_SetDebugThreshold
// 1745  *
// 1746  * @brief
// 1747  *
// 1748  *   Set Debug Threshold for software components.
// 1749  *
// 1750  * @param   comp_id   - software component ID.
// 1751  * @param   threshold - threshold value for reporting debug messages.
// 1752  *
// 1753  * @return  ZSuccess
// 1754  *
// 1755  * @MT SPI_CMD_SYS_SET_DEBUG_THRESHOLD
// 1756  *
// 1757  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1758 byte MT_SetDebugThreshold( byte compID, byte threshold )
MT_SetDebugThreshold:
        CFI Block cfiBlock114 Using cfiCommon0
        CFI Function MT_SetDebugThreshold
// 1759 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1760   // *** RKJ - for now if we get any threshold message, set it on
// 1761   debugThreshold = threshold;
        MOV	A,R2
        MOV	DPTR,#debugThreshold
        MOVX	@DPTR,A
// 1762   debugCompId = compID;
        MOV	A,R1
        MOV	DPTR,#debugCompId
        MOVX	@DPTR,A
// 1763 
// 1764   return ( (byte)ZSuccess );
        MOV	R1,#0x0
        SJMP	?Subroutine16
        CFI EndBlock cfiBlock114
// 1765 }
// 1766 #endif
// 1767 
// 1768 /***************************************************************************************************
// 1769  * @fn      MT_Reset
// 1770  *
// 1771  * @brief
// 1772  *
// 1773  *   Reset/reprogram the device.
// 1774  *
// 1775  * @param   typID: 0=reset, 1=serial bootloader
// 1776  *
// 1777  * @return  void
// 1778  *
// 1779  * @MT SPI_CMD_SYS_RESET
// 1780  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1781 void MT_Reset( byte typID )
MT_Reset:
        CFI Block cfiBlock115 Using cfiCommon0
        CFI Function MT_Reset
// 1782 {
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 1783   if ( typID )
        MOV	A,R1
        CLR	0xa8.7
        JZ	??MT_Reset_0
// 1784   {
// 1785     // Jump to bootloader
// 1786     BootLoader();
        MOV	DPTR,#__Constant_53544159
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	DPTR,#-0x2000
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
        MOV	0xc9,#-0x55
        MOV	0xc9,#0x5b
??MT_Reset_1:
        NOP
        SJMP	??MT_Reset_1
// 1787   }
// 1788   else
// 1789   {
// 1790     // Restart this program
// 1791     SystemReset();
??MT_Reset_0:
        MOV	0xc9,#-0x55
        MOV	0xc9,#0x5b
??MT_Reset_2:
        NOP
        SJMP	??MT_Reset_2
        CFI EndBlock cfiBlock115
// 1792   }
// 1793 }
// 1794 
// 1795 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
// 1796 /***************************************************************************************************
// 1797  * @fn      MT_SendErrorNotification
// 1798  *
// 1799  * @brief
// 1800  *
// 1801  *   Send Error Notofication Message to Test Tool.
// 1802  *
// 1803  * @param   byte err
// 1804  *
// 1805  * @return  void
// 1806  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1807 void MT_SendErrorNotification( byte err )
MT_SendErrorNotification:
        CFI Block cfiBlock116 Using cfiCommon0
        CFI Function MT_SendErrorNotification
// 1808 {
        FUNCALL MT_SendErrorNotification, MT_BuildAndSendZToolResponse
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R1
        LCALL	?Subroutine2 & 0xFFFF
// 1809   MT_BuildAndSendZToolResponse( (SPI_0DATA_MSG_LEN + 1),
// 1810                               (SPI_RESPONSE_BIT | SPI_CMD_SYS_RAM_WRITE),
// 1811                               1, &err );
??CrossCallReturnLabel_9:
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	R4,#0x1
        MOV	R2,#0x2
        LJMP	?Subroutine17 & 0xFFFF
        CFI EndBlock cfiBlock116
// 1812 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond117 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker119 Using cfiCommon1
        CFI (cfiPicker119) NoFunction
        CFI (cfiPicker119) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiPicker119
// 1813 #endif
// 1814 
// 1815 /***************************************************************************************************
// 1816  * @fn      MT_ReverseBytes
// 1817  *
// 1818  * @brief
// 1819  *
// 1820  *   Reverses bytes within an array
// 1821  *
// 1822  * @param   data - ptr to data buffer to reverse
// 1823  * @param    len - number of bytes in buffer
// 1824  *
// 1825  * @return  void
// 1826  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1827 void MT_ReverseBytes( byte *pData, byte len )
MT_ReverseBytes:
        CFI Block cfiBlock120 Using cfiCommon0
        CFI Function MT_ReverseBytes
// 1828 {
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,R1
        MOV	R4,A
// 1829   byte i,j;
// 1830   byte temp;
// 1831 
// 1832   for ( i = 0, j = len-1; len > 1; len-=2 ) {
        MOV	R5,#0x0
        MOV	A,#-0x1
        ADD	A,R4
        MOV	?V0 + 2,A
        SJMP	??MT_ReverseBytes_0
// 1833     temp = pData[i];
??MT_ReverseBytes_1:
        MOV	?V0 + 0,R5
        MOV	A,R2
        ADD	A,?V0 + 0
        MOV	R0,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R1,A
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
// 1834     pData[i++] = pData[j];
        MOV	?V0 + 0,?V0 + 2
        MOV	A,R2
        ADD	A,?V0 + 0
        MOV	R6,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R7,A
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_57:
        INC	R5
// 1835     pData[j--] = temp;
        MOV	DPL,R6
        MOV	DPH,R7
        MOV	A,?V0 + 3
        MOVX	@DPTR,A
        DEC	?V0 + 2
// 1836   }
        DEC	R4
        DEC	R4
??MT_ReverseBytes_0:
        MOV	A,R4
        CLR	C
        SUBB	A,#0x2
        JNC	??MT_ReverseBytes_1
// 1837 }
        LJMP	?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock120
// 1838 
// 1839 /***************************************************************************************************
// 1840  * @fn      MT_SendSPIRespMsg
// 1841  *
// 1842  * @brief
// 1843  *
// 1844  *   This function is used to process messages in the queue
// 1845  *
// 1846  * @param   none
// 1847  *
// 1848  * @return  void
// 1849  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1850 void MT_SendSPIRespMsg( byte ret, uint16 cmd_id, byte msgLen, byte respLen)
MT_SendSPIRespMsg:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI Function MT_SendSPIRespMsg
// 1851 {
        FUNCALL MT_SendSPIRespMsg, osal_mem_alloc
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL MT_SendSPIRespMsg, MT_BuildSPIMsg
        LOCFRAME XSTACK, 17, STACK
        ARGFRAME XSTACK, 17, STACK
        FUNCALL MT_SendSPIRespMsg, HalUARTWrite
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL MT_SendSPIRespMsg, osal_mem_free
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
// 1852   byte *msgPtr;
// 1853 
// 1854   msgPtr = osal_mem_alloc( msgLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV	A,R4
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R6,?V0 + 2
        MOV	R7,?V0 + 3
// 1855   if ( msgPtr )
        MOV	A,R6
        JNZ	??MT_SendSPIRespMsg_0
        MOV	A,R7
??MT_SendSPIRespMsg_0:
        JZ	??MT_SendSPIRespMsg_1
// 1856   {
// 1857 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
// 1858     MT_BuildSPIMsg( (SPI_RESPONSE_BIT | cmd_id), msgPtr, respLen, &ret );
        ; Setup parameters for call to function MT_BuildSPIMsg
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	?V0 + 2,DPL
        MOV	?V0 + 3,DPH
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	R1,?V0 + 1
        MOV	A,R6
        MOV	R4,A
        MOV	A,R7
        MOV	R5,A
        MOV	R2,?V0 + 4
        MOV	A,#0x10
        ORL	A,?V0 + 5
        MOV	R3,A
        MOV	DPTR,#(MT_BuildSPIMsg & 0xffff)
        MOV	A,#((MT_BuildSPIMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
// 1859     HalUARTWrite ( SPI_MGR_DEFAULT_PORT, msgPtr, msgLen );
        ; Setup parameters for call to function HalUARTWrite
        MOV	R4,?V0 + 0
        MOV	R5,#0x0
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	R1,#0x0
        MOV	DPTR,#(HalUARTWrite & 0xffff)
        MOV	A,#((HalUARTWrite >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1860 #endif
// 1861 
// 1862     osal_mem_free( msgPtr );
        ; Setup parameters for call to function osal_mem_free
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1863   }
// 1864 }
??MT_SendSPIRespMsg_1:
        LJMP	?Subroutine18 & 0xFFFF
        CFI EndBlock cfiBlock121

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "1.00 (F8W1.4.2)">`:
        DB "1.00 (F8W1.4.2)"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "1.10 (F8W1.4.2)">`:
        DB "1.10 (F8W1.4.2)"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for MTVersionString>`:
        DW `?<Constant "1.00 (F8W1.4.2)">`, `?<Constant "1.10 (F8W1.4.2)">`

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_3e8>`:
        DD 1000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_53544159>`:
        DD 1398030681

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        END
// 1865 
// 1866 #endif  // MT_TASK
// 1867 
// 1868 /***************************************************************************************************
// 1869 ***************************************************************************************************/
// 
// 4 344 bytes in segment BANKED_CODE
//     2 bytes in segment SFR_AN
//     8 bytes in segment XDATA_AN
//    44 bytes in segment XDATA_I
//    44 bytes in segment XDATA_ID
//    13 bytes in segment XDATA_Z
// 
// 4 380 bytes of CODE  memory (+  8 bytes shared)
//     0 bytes of DATA  memory (+  2 bytes shared)
//    49 bytes of XDATA memory (+ 16 bytes shared)
//
//Errors: none
//Warnings: none
