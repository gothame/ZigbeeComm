//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  24/Jan/2013  14:47:46 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\osal\mcu\ccsoc\OSAL_Nv.c                      /
//    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\Tools\CC2430D /
//                          B\f8wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR     /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DRTR_NWK -DBLINK_LEDS "-DCONST=const        /
//                          __code" -DGENERIC=__generic) -f                  /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f /
//                          8wConfig.cfg (-DSECURE=0                         /
//                          -DDEFAULT_CHANLIST=0x00000800                    /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                     /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\ -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\Source\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\  /
//                          -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ /
//                          \ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ /
//                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                      /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \hal\target\CC2430EB\ -I                         /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \osal\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I            /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢× /
//                          ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 /
//                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\sec\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\stack\sys\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \zmac\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ /
//                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Z /
//                          igBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\services\saddr\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \services\sdata\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\high_level\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf03\ -I     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf03\single_chip\ -D CC2430EB    /
//                          -D ZTOOL_P1 -D MT_TASK -lC                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ -lA        /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\            /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\RouterEB\Obj\ -e       /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\osal\mcu\ccsoc\OSAL_Nv.c"                    /
//    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\OSAL_Nv.s51 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME OSAL_Nv

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_ADD_X
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??calcChkF,021203H
        ARGFRAME XSTACK, 34, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION ??compactPage,0a1203H
        ARGFRAME XSTACK, 34, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 36, STACK
        FUNCTION ??findItem,021203H
        ARGFRAME XSTACK, 34, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION ??initItem,021203H
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION ??initItem2,021203H
        ARGFRAME XSTACK, 36, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION ??initNV,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 34, STACK
        LOCFRAME XSTACK, 26, STACK
        FUNCTION ??initPage,021203H
        ARGFRAME XSTACK, 26, STACK
        LOCFRAME XSTACK, 25, STACK
        FUNCTION ??readHdr,021203H
        ARGFRAME XSTACK, 34, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION ??setItem,021203H
        ARGFRAME XSTACK, 34, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION ??setPageUse,021203H
        ARGFRAME XSTACK, 32, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        FUNCTION ??writeBuf,021203H
        ARGFRAME XSTACK, 36, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        FUNCTION ??writeItem,021203H
        ARGFRAME XSTACK, 16, STACK
        LOCFRAME XSTACK, 28, STACK
        FUNCTION ??writeWord,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 28, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION ??writeWordD,021203H
        ARGFRAME XSTACK, 34, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION ??writeWordH,021203H
        ARGFRAME XSTACK, 34, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        FUNCTION ??xferBuf,021203H
        ARGFRAME XSTACK, 38, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
?Subroutine33 EQU 0
?Subroutine36 EQU 0
        PUBWEAK DMAARM
        PUBWEAK DMAIRQ
        PUBWEAK FADDRH
        PUBWEAK FADDRL
        PUBLIC FBuff
        PUBWEAK FCTL
        PUBWEAK FWT
        PUBWEAK __Constant_1
        PUBLIC osal_nv_init
        FUNCTION osal_nv_init,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_nv_item_init
        FUNCTION osal_nv_item_init,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_nv_item_len
        FUNCTION osal_nv_item_len,021203H
        LOCFRAME XSTACK, 18, STACK
        PUBLIC osal_nv_read
        FUNCTION osal_nv_read,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC osal_nv_write
        FUNCTION osal_nv_write,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 4, STACK
        LOCFRAME XSTACK, 38, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN HalAdcCheckVdd
        FUNCTION HalAdcCheckVdd,0202H
        ARGFRAME XSTACK, 32, STACK
        EXTERN GetCodeByte
        FUNCTION GetCodeByte,0202H
        ARGFRAME XSTACK, 34, STACK
        EXTERN halFlashDmaTrigger
        FUNCTION halFlashDmaTrigger,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN dmaCh0

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\osal\mcu\ccsoc\OSAL_Nv.c
//    1 /*********************************************************************
//    2     Filename:       OSAL_Nv.c
//    3     Revised:        $Date: 2007-04-11 14:41:47 -0700 (Wed, 11 Apr 2007) $
//    4     Revision:       $Revision: 13998 $
//    5 
//    6     Description: This module contains the OSAL non-volatile memory functions.
//    7 
//    8     Notes: A trick buried deep in initPage() requires that the MSB of the NV
//    9            Item Id be reserved for use by this module.
//   10 
//   11     Copyright (c) 2007 by Texas Instruments, Inc.
//   12     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   13     derivative works, modify, distribute, perform, display or sell this
//   14     software and/or its documentation for any purpose is prohibited
//   15     without the express written consent of Texas Instruments, Inc.
//   16 *********************************************************************/
//   17 
//   18 /*********************************************************************
//   19  * INCLUDES
//   20  */
//   21 
//   22 #include "ZComDef.h"
//   23 #include "hal_adc.h"

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr FWT
FWT:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0acH
// unsigned char volatile __sfr FADDRL
FADDRL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0adH
// unsigned char volatile __sfr FADDRH
FADDRH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0aeH
// unsigned char volatile __sfr FCTL
FCTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d1H
// unsigned char volatile __sfr DMAIRQ
DMAIRQ:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d6H
// unsigned char volatile __sfr DMAARM
DMAARM:
        DS 1
//   24 #include "hal_dma.h"
//   25 #include "osal.h"
//   26 #include "OSAL_Nv.h"
//   27 #include <ioCC2430.h>
//   28 
//   29 #if !defined ( OSAL_NV_CLEANUP )
//   30   #define OSAL_NV_CLEANUP  FALSE
//   31 #endif
//   32 
//   33 /*********************************************************************
//   34  * CONSTANTS
//   35  */
//   36 
//   37 #define OSAL_NV_DMA_CH         (&dmaCh0)
//   38 
//   39 #define OSAL_NV_ACTIVE          0x00
//   40 #define OSAL_NV_ERASED          0xFF
//   41 #define OSAL_NV_ERASED_ID       0xFFFF
//   42 #define OSAL_NV_ZEROED_ID       0x0000
//   43 
//   44 #define OSAL_NV_PAGE_FREE      (OSAL_NV_PAGE_SIZE - Z_EXTADDR_LEN)
//   45 
//   46 /* The last Flash page will reserve an IEEE addr block at the end of the page where the tools know
//   47  * to program the IEEE.
//   48  */
//   49 #define OSAL_NV_IEEE_OFFSET    (OSAL_NV_PAGE_SIZE - Z_EXTADDR_LEN)
//   50 #define OSAL_NV_IEEE_PAGE       63
//   51 
//   52 // In case pages 0-1 are ever used, define a null page value.
//   53 #define OSAL_NV_PAGE_NULL       0
//   54 
//   55 // In case item Id 0 is ever used, define a null item value.
//   56 #define OSAL_NV_ITEM_NULL       0
//   57 
//   58 #define OSAL_NV_WORD_SIZE       4
//   59 
//   60 #define OSAL_NV_PAGE_HDR_OFFSET 0
//   61 
//   62 /*********************************************************************
//   63  * MACROS
//   64  */
//   65 
//   66 #define OSAL_NV_PAGE_ERASE( pg ) \ 
//   67   st( \ 
//   68     FADDRH = (pg) << 1; \ 
//   69     FCTL = 0x01; \ 
//   70     asm("NOP");              \ 
//   71     while(FCTL == 0x80);     \ 
//   72   )
//   73 
//   74 #define OSAL_NV_PAGE_TO_ADDR( pg )    ((uint32)pg << 11)
//   75 #define OSAL_NV_ADDR_TO_PAGE( addr )  ((uint8)(addr >> 11))
//   76 
//   77 #define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalAdcCheckVdd( HAL_ADC_VDD_LIMIT_4 ))
//   78 
//   79 /*********************************************************************
//   80  * TYPEDEFS
//   81  */
//   82 
//   83 typedef struct
//   84 {
//   85   uint16 id;
//   86   uint16 len;   // Enforce Flash-WORD size on len.
//   87   uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
//   88   uint16 stat;  // Item status.
//   89 } osalNvHdr_t;
//   90 // Struct member offsets.
//   91 #define OSAL_NV_HDR_ID    0
//   92 #define OSAL_NV_HDR_LEN   2
//   93 #define OSAL_NV_HDR_CHK   4
//   94 #define OSAL_NV_HDR_STAT  6
//   95 
//   96 #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
//   97 #define OSAL_NV_HDR_SIZE  8
//   98 #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
//   99 
//  100 typedef struct
//  101 {
//  102   uint16 active;
//  103   uint16 inUse;
//  104   uint16 xfer;
//  105   uint16 spare;
//  106 } osalNvPgHdr_t;
//  107 // Struct member offsets.
//  108 #define OSAL_NV_PG_ACTIVE 0
//  109 #define OSAL_NV_PG_INUSE  2
//  110 #define OSAL_NV_PG_XFER   4
//  111 #define OSAL_NV_PG_SPARE  6
//  112 
//  113 #define OSAL_NV_PAGE_HDR_SIZE  8
//  114 #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
//  115 
//  116 typedef enum
//  117 {
//  118   eNvXfer,
//  119   eNvZero
//  120 } eNvHdrEnum;
//  121 
//  122 typedef enum
//  123 {
//  124   ePgActive,
//  125   ePgInUse,
//  126   ePgXfer,
//  127   ePgSpare
//  128 } ePgHdrEnum;
//  129 
//  130 /*********************************************************************
//  131  * GLOBAL VARIABLES
//  132  */
//  133 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  134 uint8 __xdata FBuff[4];  // Flash buffer for DMA transfer.
FBuff:
        DS 4
//  135 
//  136 /*********************************************************************
//  137  * EXTERNAL VARIABLES
//  138  */
//  139 
//  140 /*********************************************************************
//  141  * EXTERNAL FUNCTIONS
//  142  */
//  143 
//  144 extern __near_func uint8 GetCodeByte(uint32);
//  145 extern __near_func void halFlashDmaTrigger(void);
//  146 
//  147 extern bool HalAdcCheckVdd(uint8 limit);
//  148 
//  149 /*********************************************************************
//  150  * LOCAL VARIABLES
//  151  */
//  152 
//  153 // Offset into the page of the first available erased space.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  154 static uint16 pgOff[OSAL_NV_PAGES_USED];
??pgOff:
        DS 4
//  155 
//  156 // Count of the bytes lost for the zeroed-out items.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  157 static uint16 pgLost[OSAL_NV_PAGES_USED];
??pgLost:
        DS 4
//  158 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  159 static uint8 pgRes;  // Page reserved for item compacting transfer.
??pgRes:
        DS 1
//  160 
//  161 /* It saves ~100 code bytes to move a uint8* parameter/return value from findItem()
//  162  * to this local global.
//  163  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  164 static uint8 findPg;
??findPg:
        DS 1
//  165 
//  166 /* Immediately before the voltage critical operations of a page erase or
//  167  * a word write, check bus voltage. If less than min, set global flag & abort.
//  168  * Since this is to be done at the lowest level, many void functions would have to be changed to
//  169  * return a value and code added to check that value before proceeding, resulting in a very
//  170  * expensive code size hit for implementing this properly. Therefore, use this global as follows:
//  171  * at the start of osal_nv_item_init/osal_nv_write, set to FALSE, and at the end, before returning,
//  172  * check the value. Thus, the global is an accumulator of any error that occurred in any of the
//  173  * attempts to modify Flash with a low bus voltage during the complicated sequence of events that
//  174  * may occur on any item init or write. This is much more expedient and code saving than adding
//  175  * return values and checking return values to early out. No matter which method is used, an NV
//  176  * data record may end up mangled due to the low VCC conditions. The strategy is that the headers
//  177  * and checksums will detect and allow recovery from such a condition.
//  178  *
//  179  * One unfortunate side-effect of using the global fail flag vice adding and checking return
//  180  * values, is that setItem(), unaware that setting an item Id to zero has failed due to the low VCC
//  181  * check, will still update the page Lost bytes counter. Having an artificially high lost byte
//  182  * count makes it look like there are more bytes to recover from compacting a page than there may
//  183  * actually be. An easy work-around it to invoke initNV() from osal_nv_item_init or osal_nv_write
//  184  * anytime that the failF gets set - this will re-walk all of the pages and set the page offset
//  185  * count and page lost bytes count to their actual values.
//  186  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  187 static uint8 failF;
??failF:
        DS 1
//  188 
//  189 /*********************************************************************
//  190  * LOCAL FUNCTIONS
//  191  */
//  192 
//  193 static void   initDMA( void );
//  194 static void   execDMA( void );
//  195 
//  196 static uint8  initNV( void );
//  197 
//  198 static void   setPageUse( uint8 pg, uint8 inUse );
//  199 static uint16 initPage( uint8 pg, uint16 id );
//  200 static void   erasePage( uint8 pg );
//  201 static void   compactPage( uint8 pg );
//  202 
//  203 static uint16 findItem( uint16 id );
//  204 static uint8  initItem( uint16 id, uint16 len, void *buf );
//  205 static uint8  initItem2( uint16 id, uint16 len, uint8 *comPg );
//  206 static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
//  207 
//  208 static uint16 calcChkB( uint16 len, uint8 *buf );
//  209 static uint16 calcChkF( byte pg, uint16 offset, uint16 len );
//  210 
//  211 static void   readHdr( uint8 pg, uint16 offset, uint8 *buf );
//  212 static void   readWord( uint8 pg, uint16 offset, uint8 *buf );
//  213 
//  214 static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
//  215 static void   writeWordD( uint8 pg, uint16 offset, uint8 *buf );
//  216 static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
//  217 static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
//  218 static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
//  219 
//  220 static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf );
//  221 
//  222 /*********************************************************************
//  223  * @fn      initDMA
//  224  *
//  225  * @brief   Initialize the DMA Channel for NV flash operations.
//  226  *
//  227  * @param   none
//  228  *
//  229  * @return  None
//  230  */
//  231 static void initDMA( void )
//  232 {
//  233   // Start address of the destination is the Flash Write Data register.
//  234   OSAL_NV_DMA_CH->dstAddrH = 0xdf;
//  235   OSAL_NV_DMA_CH->dstAddrL = 0xaf;
//  236   OSAL_NV_DMA_CH->srcAddrH = (uint16)FBuff >> 8;
//  237   OSAL_NV_DMA_CH->srcAddrL = (uint16)FBuff;
//  238 
//  239   // Using the length field to determine how many bytes to transfer.
//  240   HAL_DMA_SET_VLEN( OSAL_NV_DMA_CH, HAL_DMA_VLEN_USE_LEN );
//  241 
//  242   // Transfer 4 bytes at a time.
//  243   HAL_DMA_SET_LEN( OSAL_NV_DMA_CH, OSAL_NV_WORD_SIZE );
//  244 
//  245   // Transfer size is 1 byte.
//  246   HAL_DMA_SET_WORD_SIZE( OSAL_NV_DMA_CH, HAL_DMA_WORDSIZE_BYTE );
//  247 
//  248   // After every 4-byte transfer, must await Flash write done indication.
//  249   HAL_DMA_SET_TRIG_MODE( OSAL_NV_DMA_CH, HAL_DMA_TMODE_SINGLE );
//  250   HAL_DMA_SET_TRIG_SRC( OSAL_NV_DMA_CH, HAL_DMA_TRIG_FLASH );
//  251 
//  252   // The source address is incremented by 1 byte after each transfer.
//  253   HAL_DMA_SET_SRC_INC( OSAL_NV_DMA_CH, HAL_DMA_SRCINC_1 );
//  254 
//  255   // The destination address is constant - the Flash Write Data register.
//  256   HAL_DMA_SET_DST_INC( OSAL_NV_DMA_CH, HAL_DMA_DSTINC_0 );
//  257 
//  258   // The DMA is to be polled and shall not issue an IRQ upon completion.
//  259   HAL_DMA_SET_IRQ( OSAL_NV_DMA_CH, HAL_DMA_IRQMASK_DISABLE );
//  260 
//  261   // Xfer all 8 bits of a byte xfer.
//  262   HAL_DMA_SET_M8( OSAL_NV_DMA_CH, HAL_DMA_M8_USE_8_BITS );
//  263 
//  264   // DMA memory access has highest priority.
//  265   HAL_DMA_SET_PRIORITY( OSAL_NV_DMA_CH, HAL_DMA_PRI_HIGH );
//  266 }
//  267 
//  268 /*********************************************************************
//  269  * @fn      execDMA
//  270  *
//  271  * @brief   Arms and triggers a DMA write to Flash memory.
//  272  *
//  273  * @param   none
//  274  *
//  275  * @return  none
//  276  */
//  277 static void execDMA( void )
//  278 {
//  279   if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
//  280   {
//  281     failF = TRUE;
//  282     return;
//  283   }
//  284 
//  285   HAL_DMA_CLEAR_IRQ( 0 );
//  286 
//  287   HAL_DMA_ARM_CH( 0 );
//  288 
//  289   halFlashDmaTrigger();
//  290 
//  291   while ( !(HAL_DMA_CHECK_IRQ( 0 )) );
//  292 
//  293   while ( FCTL & FWBUSY );
//  294 }
//  295 
//  296 /*********************************************************************
//  297  * @fn      initNV
//  298  *
//  299  * @brief   Initialize the NV flash pages.
//  300  *
//  301  * @param   none
//  302  *
//  303  * @return  TRUE if NV pages seem ok; FALSE otherwise.
//  304  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  305 static uint8 initNV( void )
??initNV:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ??initNV
//  306 {
        FUNCALL ??initNV, ??readHdr
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??initNV, ??readHdr
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??initNV, ??setPageUse
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??initNV, ??initPage
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??initNV, ??readHdr
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??initNV, ??writeWordD
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??initNV, ??writeWordD
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??initNV, ??setPageUse
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??initNV, ??compactPage
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 16
        MOV	A,#-0x10
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
//  307   osalNvPgHdr_t pgHdr, ieee;
//  308   uint8 oldPg = OSAL_NV_PAGE_NULL;
        MOV	?V0 + 1,#0x0
//  309   uint8 newPg = OSAL_NV_PAGE_NULL;
        MOV	R7,#0x0
//  310   uint8 xBad;
//  311   uint8 pg;
//  312 
//  313   readHdr( OSAL_NV_IEEE_PAGE, OSAL_NV_IEEE_OFFSET, (uint8 *)(&ieee) );
        ; Setup parameters for call to function readHdr
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#-0x8
        MOV	R3,#0x7
        MOV	R1,#0x3f
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  314   if ( (ieee.active == OSAL_NV_ERASED_ID) &&
//  315        (ieee.inUse == OSAL_NV_ERASED_ID) &&
//  316        (ieee.xfer == OSAL_NV_ERASED_ID) &&
//  317        (ieee.spare == OSAL_NV_ERASED_ID) )
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_1
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_1:
        JNZ	??initNV_2
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_3
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_3:
        JNZ	??initNV_2
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_4
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_4:
        JNZ	??initNV_2
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_5
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_5:
        JNZ	??initNV_2
//  318   {
//  319     xBad = TRUE;
        MOV	?V0 + 0,#0x1
        SJMP	??initNV_6
//  320   }
//  321   else
//  322   {
//  323     xBad = FALSE;
??initNV_2:
        MOV	?V0 + 0,R7
//  324   }
//  325 
//  326   pgRes = OSAL_NV_PAGE_NULL;
??initNV_6:
        CLR	A
        MOV	DPTR,#??pgRes
        MOVX	@DPTR,A
//  327 
//  328   for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
        MOV	R6,#0x3c
//  329   {
//  330 #if OSAL_NV_CLEANUP
//  331     OSAL_NV_PAGE_ERASE( pg );
//  332     asm( "NOP" );
//  333 #endif
//  334 
//  335     readHdr( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr) );
??initNV_7:
        ; Setup parameters for call to function readHdr
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  336 
//  337     if ( pgHdr.active == OSAL_NV_ERASED_ID )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_8
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_8:
        JNZ	??initNV_9
//  338     {
//  339       if ( pgRes == OSAL_NV_PAGE_NULL )
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        JNZ	??initNV_10
//  340       {
//  341         pgRes = pg;
        MOV	A,R6
        MOVX	@DPTR,A
        SJMP	??initNV_11
//  342       }
//  343       else
//  344       {
//  345         setPageUse( pg, TRUE );
??initNV_10:
        ; Setup parameters for call to function setPageUse
        MOV	R2,#0x1
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??setPageUse & 0xffff)
        MOV	A,#((??setPageUse >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??initNV_11
//  346       }
//  347     }
//  348     else  // Page is active.
//  349     {
//  350       // If the page is not yet in use, it is the tgt of items from an xfer.
//  351       if ( pgHdr.inUse == OSAL_NV_ERASED_ID )
??initNV_9:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_12
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_12:
        JNZ	??initNV_13
//  352       {
//  353         newPg = pg;
        MOV	A,R6
        MOV	R7,A
        SJMP	??initNV_11
//  354       }
//  355       // An Xfer from this page was in progress.
//  356       else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
??initNV_13:
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_14
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_14:
        JZ	??initNV_11
//  357       {
//  358         oldPg = pg;
        MOV	?V0 + 1,R6
//  359       }
//  360     }
//  361 
//  362     // Calculate page offset and lost bytes.
//  363     initPage( pg, OSAL_NV_ITEM_NULL );
??initNV_11:
        ; Setup parameters for call to function initPage
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??initPage & 0xffff)
        MOV	A,#((??initPage >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  364 
//  365     readHdr( pg, OSAL_NV_IEEE_OFFSET, (uint8 *)(&pgHdr) );
        ; Setup parameters for call to function readHdr
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#-0x8
        MOV	R3,#0x7
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  366     if ( xBad )
        MOV	A,?V0 + 0
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        JZ	??initNV_15
//  367     {
//  368       /* TBD - For the cost of more code space, the IEEE could be checksummed & then tested here
//  369        * before installing to the erased IEEE on page 63.
//  370        */
//  371       if ( (pgHdr.active != OSAL_NV_ERASED_ID) ||
//  372            (pgHdr.inUse != OSAL_NV_ERASED_ID) ||
//  373            (pgHdr.xfer != OSAL_NV_ERASED_ID) ||
//  374            (pgHdr.spare != OSAL_NV_ERASED_ID) )
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_16
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_16:
        JNZ	??initNV_17
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_18
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_18:
        JNZ	??initNV_17
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_19
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_19:
        JNZ	??initNV_17
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_20
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_20:
        JZ	??initNV_21
//  375       {
//  376         writeWordD( OSAL_NV_IEEE_PAGE, OSAL_NV_IEEE_OFFSET, (uint8 *)(&pgHdr) );
??initNV_17:
        ; Setup parameters for call to function writeWordD
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#-0x8
        MOV	R3,#0x7
        MOV	R1,#0x3f
        MOV	DPTR,#(??writeWordD & 0xffff)
        MOV	A,#((??writeWordD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  377         xBad = FALSE;
        MOV	?V0 + 0,#0x0
        SJMP	??initNV_21
//  378       }
//  379     }
//  380     else
//  381     {
//  382       if ( (pgHdr.active == OSAL_NV_ERASED_ID) &&
//  383            (pgHdr.inUse == OSAL_NV_ERASED_ID) &&
//  384            (pgHdr.xfer == OSAL_NV_ERASED_ID) &&
//  385            (pgHdr.spare == OSAL_NV_ERASED_ID) )
??initNV_15:
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_22
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_22:
        JNZ	??initNV_21
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_23
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_23:
        JNZ	??initNV_21
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_24
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_24:
        JNZ	??initNV_21
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initNV_25
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initNV_25:
        JNZ	??initNV_21
//  386       {
//  387         writeWordD( pg, OSAL_NV_IEEE_OFFSET, (uint8 *)(&ieee) );
        ; Setup parameters for call to function writeWordD
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#-0x8
        MOV	R3,#0x7
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??writeWordD & 0xffff)
        MOV	A,#((??writeWordD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  388       }
//  389     }
//  390   }  // for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
??initNV_21:
        INC	R6
        MOV	A,R6
        CLR	C
        SUBB	A,#0x3e
        JNC	$+5
        LJMP	??initNV_7 & 0xFFFF
//  391 
//  392   /* First the old page is erased, and then the new page is put into use.
//  393    * So if a transfer was in progress, the new page will always not yet be
//  394    * marked as in use, since that is the last step to ending a transfer.
//  395    */
//  396   if ( newPg != OSAL_NV_PAGE_NULL )
        MOV	A,R7
        JZ	??initNV_26
//  397   {
//  398     /* If there is already a fallow page reserved, keep it and put the newPg in use.
//  399      * An unfinished compaction will finish to the new reserve page and the old page
//  400      * will be erased and reserved.
//  401      */
//  402     if ( pgRes != OSAL_NV_PAGE_NULL )
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        JZ	??initNV_27
//  403     {
//  404       setPageUse( newPg, TRUE );
        ; Setup parameters for call to function setPageUse
        MOV	R2,#0x1
        MOV	A,R7
        MOV	R1,A
        MOV	DPTR,#(??setPageUse & 0xffff)
        MOV	A,#((??setPageUse >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??initNV_28
//  405     }
//  406     else
//  407     {
//  408       pgRes = newPg;
??initNV_27:
        MOV	A,R7
        MOVX	@DPTR,A
//  409     }
//  410 
//  411     /* If a page compaction was interrupted and the page being compacted is not
//  412      * yet erased, then there may be items remaining to xfer before erasing.
//  413      */
//  414     if ( oldPg != OSAL_NV_PAGE_NULL )
??initNV_28:
        MOV	A,?V0 + 1
        JZ	??initNV_26
//  415     {
//  416       compactPage( oldPg );
        ; Setup parameters for call to function compactPage
        MOV	R1,A
        MOV	DPTR,#(??compactPage & 0xffff)
        MOV	A,#((??compactPage >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  417     }
//  418   }
//  419 
//  420   return (pgRes != OSAL_NV_PAGE_NULL);
??initNV_26:
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        JZ	??initNV_29
        MOV	R1,#0x1
        SJMP	??initNV_30
??initNV_29:
        MOV	R1,#0x0
??initNV_30:
        MOV	A,#0x10
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine66
        ; // Fall through to label ?Subroutine66
//  421 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine66:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Valid
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  422 
//  423 /*********************************************************************
//  424  * @fn      setPageUse
//  425  *
//  426  * @brief   Set page header active/inUse state according to 'inUse'.
//  427  *
//  428  * @param   pg - Valid NV page to verify and init.
//  429  * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
//  430  *
//  431  * @return  none
//  432  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  433 static void setPageUse( uint8 pg, uint8 inUse )
??setPageUse:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ??setPageUse
//  434 {
        FUNCALL ??setPageUse, ??writeWord
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 8, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV	A,#-0x8
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 8)
//  435   osalNvPgHdr_t pgHdr;
//  436 
//  437   pgHdr.active = OSAL_NV_ZEROED_ID;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  438 
//  439   if ( inUse )
        MOV	A,R2
        JZ	??setPageUse_1
//  440   {
//  441     pgHdr.inUse = OSAL_NV_ZEROED_ID;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        CLR	A
        SJMP	??setPageUse_2
//  442   }
//  443   else
//  444   {
//  445     pgHdr.inUse = OSAL_NV_ERASED_ID;
??setPageUse_1:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,#-0x1
??setPageUse_2:
        LCALL	??Subroutine29_0 & 0xFFFF
//  446   }
//  447 
//  448   writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
??CrossCallReturnLabel_81:
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(??writeWord & 0xffff)
        MOV	A,#((??writeWord >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  449 }
        MOV	A,#0x8
        LCALL	?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine67
        ; // Fall through to label ?Subroutine67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine67:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock3
//  450 
//  451 /*********************************************************************
//  452  * @fn      initPage
//  453  *
//  454  * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
//  455  *
//  456  * @param   pg - Valid NV page to verify and init.
//  457  * @param   id - Valid NV item Id to use function as a "findItem".
//  458  *               If set to NULL then just perform the page initialization.
//  459  *
//  460  * @return  If 'id' is non-NULL and good checksums are found, return the offset
//  461  *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
//  462  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  463 static uint16 initPage( uint8 pg, uint16 id )
??initPage:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ??initPage
//  464 {
        FUNCALL ??initPage, ??setItem
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL ??initPage, ??readHdr
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL ??initPage, ??calcChkF
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL ??initPage, ??findItem
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL ??initPage, ??setItem
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 10
        MOV	A,#-0xa
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV	?V0 + 6,R1
//  465   uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
        MOV	?V0 + 2,#0x8
        MOV	?V0 + 3,#0x0
//  466   uint16 sz, lost = 0;
        MOV	R6,#0x0
        MOV	R7,#0x0
        SJMP	??initPage_1
//  467   osalNvHdr_t hdr;
//  468 
//  469   do
//  470   {
//  471     readHdr( pg, offset, (uint8 *)(&hdr) );
//  472 
//  473     if ( hdr.id == OSAL_NV_ERASED_ID )
//  474     {
//  475       break;
//  476     }
//  477     offset += OSAL_NV_HDR_SIZE;
//  478     sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
//  479 
//  480     // A bad 'len' write has blown away the rest of the page.
//  481     if ( (offset + sz) > OSAL_NV_PAGE_FREE )
//  482     {
//  483       lost += (OSAL_NV_PAGE_FREE - offset + OSAL_NV_HDR_SIZE);
//  484       offset = OSAL_NV_PAGE_FREE;
//  485       break;
//  486     }
//  487 
//  488     if ( hdr.id != OSAL_NV_ZEROED_ID )
//  489     {
//  490       if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
//  491       {
//  492         /* This trick allows function to do double duty for findItem() without
//  493          * compromising its essential functionality at powerup initialization.
//  494          */
//  495         if ( id != OSAL_NV_ITEM_NULL )
//  496         {
//  497           /* This trick allows asking to find the old/transferred item in case
//  498            * of a successful new item write that gets interrupted before the
//  499            * old item can be zeroed out.
//  500            */
//  501           if ( (id & 0x7fff) == hdr.id )
//  502           {
//  503             if ( (((id & 0x8000) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
//  504                  (((id & 0x8000) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
//  505             {
//  506               return offset;
//  507             }
//  508           }
//  509         }
//  510         // When invoked from the osal_nv_init(), find and zero any duplicates.
//  511         else if ( hdr.stat == OSAL_NV_ERASED_ID )
//  512         {
//  513           /* The trick of setting the MSB of the item Id causes the logic
//  514            * immediately above to return a valid page only if the header 'stat'
//  515            * indicates that it was the older item being transferred.
//  516            */
//  517           uint16 off = findItem( (hdr.id | 0x8000) );
//  518 
//  519           if ( off != OSAL_NV_ITEM_NULL )
//  520           {
//  521             setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
//  522           }
//  523         }
//  524       }
//  525       else
//  526       {
//  527         setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
??initPage_2:
        ; Setup parameters for call to function setItem
        MOV	R4,#0x1
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	R1,?V0 + 6
??initPage_3:
        MOV	DPTR,#(??setItem & 0xffff)
        MOV	A,#((??setItem >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  528       }
//  529     }
//  530 
//  531     if ( hdr.id == OSAL_NV_ZEROED_ID )
??initPage_4:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??initPage_5
        INC	DPTR
        MOVX	A,@DPTR
??initPage_5:
        JNZ	??initPage_6
//  532     {
//  533       lost += (OSAL_NV_HDR_SIZE + sz);
        MOV	A,#0x8
        ADD	A,?V0 + 0
        MOV	R0,A
        CLR	A
        ADDC	A,?V0 + 1
        MOV	R1,A
        MOV	A,R6
        ADD	A,R0
        MOV	R6,A
        MOV	A,R7
        ADDC	A,R1
        MOV	R7,A
//  534     }
//  535     offset += sz;
??initPage_6:
        MOV	A,?V0 + 2
        ADD	A,?V0 + 0
        MOV	?V0 + 2,A
        MOV	A,?V0 + 3
        ADDC	A,?V0 + 1
        MOV	?V0 + 3,A
//  536 
//  537   } while ( TRUE );
??initPage_1:
        ; Setup parameters for call to function readHdr
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	R1,?V0 + 6
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initPage_7
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initPage_7:
        JZ	??initPage_8
        MOV	A,?V0 + 2
        ADD	A,#0x8
        MOV	?V0 + 2,A
        MOV	A,?V0 + 3
        ADDC	A,#0x0
        MOV	?V0 + 3,A
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV	?V0 + 0,A
        MOV	A,#-0x1
        ANL	A,R1
        MOV	?V0 + 1,A
        MOV	A,?V0 + 0
        ADD	A,?V0 + 2
        MOV	R0,A
        MOV	A,R1
        LCALL	?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_124:
        JC	??initPage_9
        CLR	A
        ADD	A,R6
        MOV	R0,A
        MOV	A,#0x8
        ADDC	A,R7
        MOV	R1,A
        MOV	A,R0
        CLR	C
        SUBB	A,?V0 + 2
        MOV	R6,A
        MOV	A,R1
        SUBB	A,?V0 + 3
        MOV	R7,A
        MOV	?V0 + 2,#-0x8
        MOV	?V0 + 3,#0x7
//  538 
//  539   pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
??initPage_8:
        MOV	A,?V0 + 6
        LCALL	??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_118:
        MOV	A,?V0 + 2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 3
        LCALL	?Subroutine32 & 0xFFFF
//  540   pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
??CrossCallReturnLabel_89:
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R7
        MOVX	@DPTR,A
//  541 
//  542   return OSAL_NV_ITEM_NULL;
        MOV	R2,#0x0
        MOV	R3,#0x0
??initPage_10:
        MOV	A,#0xa
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R7,#0x7
        LJMP	?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 25)
??initPage_9:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??initPage_11
        INC	DPTR
        MOVX	A,@DPTR
??initPage_11:
        JNZ	$+5
        LJMP	??initPage_4 & 0xFFFF
        ; Setup parameters for call to function calcChkF
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	R1,?V0 + 6
        MOV	DPTR,#(??calcChkF & 0xffff)
        MOV	A,#((??calcChkF >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	R0,?V0 + 4
        MOV	R1,?V0 + 5
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??initPage_12
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??initPage_12:
        JZ	$+5
        LJMP	??initPage_2 & 0xFFFF
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JNZ	??initPage_13
        INC	DPTR
        MOVX	A,@DPTR
??initPage_13:
        JZ	??initPage_14
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ANL	A,#0x7f
        MOV	R1,A
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??initPage_15
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??initPage_15:
        JZ	$+5
        LJMP	??initPage_4 & 0xFFFF
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        INC	DPTR
        MOVX	A,@DPTR
        ANL	A,#0x80
        MOV	R1,A
        CLR	A
        JNZ	??initPage_16
        MOV	A,R1
??initPage_16:
        JNZ	??initPage_17
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initPage_18
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initPage_18:
        JZ	$+5
        LJMP	??initPage_4 & 0xFFFF
        SJMP	??initPage_19
??initPage_17:
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initPage_20
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initPage_20:
        JNZ	$+5
        LJMP	??initPage_4 & 0xFFFF
??initPage_19:
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        LJMP	??initPage_10 & 0xFFFF
??initPage_14:
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??initPage_21
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??initPage_21:
        JZ	$+5
        LJMP	??initPage_4 & 0xFFFF
        ; Setup parameters for call to function findItem
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        ORL	A,#0x80
        MOV	R3,A
        MOV	DPTR,#(??findItem & 0xffff)
        MOV	A,#((??findItem >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        JNZ	??initPage_22
        MOV	A,R3
??initPage_22:
        JNZ	$+5
        LJMP	??initPage_4 & 0xFFFF
        ; Setup parameters for call to function setItem
        MOV	R4,#0x1
        MOV	DPTR,#??findPg
        MOVX	A,@DPTR
        MOV	R1,A
        LJMP	??initPage_3 & 0xFFFF
        CFI EndBlock cfiBlock4
//  543 }
//  544 
//  545 /*********************************************************************
//  546  * @fn      erasePage
//  547  *
//  548  * @brief   Erases a page in Flash.
//  549  *
//  550  * @param   pg - Valid NV page to erase.
//  551  *
//  552  * @return  none
//  553  */
//  554 static void erasePage( uint8 pg )
//  555 {
//  556   osalNvHdr_t ieee;
//  557 
//  558   if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
//  559   {
//  560     failF = TRUE;
//  561     return;
//  562   }
//  563 
//  564   OSAL_NV_PAGE_ERASE( pg );
//  565 
//  566   pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
//  567   pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
//  568 
//  569   readHdr( OSAL_NV_IEEE_PAGE, OSAL_NV_IEEE_OFFSET, (uint8 *)(&ieee) );
//  570   if ( (ieee.id != OSAL_NV_ERASED_ID) ||
//  571        (ieee.len != OSAL_NV_ERASED_ID) ||
//  572        (ieee.chk != OSAL_NV_ERASED_ID) ||
//  573        (ieee.stat != OSAL_NV_ERASED_ID) )
//  574   {
//  575     writeWordD( pg, OSAL_NV_IEEE_OFFSET, (uint8 *)(&ieee) );
//  576   }
//  577 }
//  578 
//  579 /*********************************************************************
//  580  * @fn      compactPage
//  581  *
//  582  * @brief   Compacts the page specified.
//  583  *
//  584  * @param   srcPg - Valid NV page to erase.
//  585  *
//  586  * @return  none
//  587  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  588 static void compactPage( uint8 srcPg )
??compactPage:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ??compactPage
//  589 {
        FUNCALL ??compactPage, ??writeWordH
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ??compactPage, ??calcChkF
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ??compactPage, ??setItem
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ??compactPage, ??writeBuf
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL ??compactPage, ??xferBuf
        LOCFRAME XSTACK, 36, STACK
        ARGFRAME XSTACK, 36, STACK
        FUNCALL ??compactPage, ??setItem
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ??compactPage, ??readHdr
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ??compactPage, HalAdcCheckVdd
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ??compactPage, ??readHdr
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ??compactPage, ??writeWordD
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ??compactPage, ??setPageUse
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 18
        MOV	A,#-0x12
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV	A,R1
        MOV	R6,A
//  590   uint16 dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL	?Subroutine19 & 0xFFFF
//  591   uint16 srcOff = OSAL_NV_ZEROED_ID;
??CrossCallReturnLabel_55:
        LCALL	?Subroutine29 & 0xFFFF
//  592   osalNvHdr_t hdr;
//  593 
//  594   // Mark page as being in process of compaction.
//  595   writeWordH( srcPg, OSAL_NV_PG_XFER, (uint8*)(&srcOff) );
??CrossCallReturnLabel_79:
        MOV	R2,#0x4
        MOV	R3,A
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??writeWordH & 0xffff)
        MOV	A,#((??writeWordH >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  596 
//  597   srcOff = OSAL_NV_PAGE_HDR_SIZE;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,#0x8
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        LJMP	??compactPage_1 & 0xFFFF
//  598 
//  599   do
//  600   {
//  601     uint16 sz;
//  602     readHdr( srcPg, srcOff, (uint8 *)(&hdr) );
//  603 
//  604     if ( hdr.id == OSAL_NV_ERASED_ID )
//  605     {
//  606       break;
//  607     }
//  608 
//  609     srcOff += OSAL_NV_HDR_SIZE;
//  610 
//  611     if ( (srcOff + hdr.len) > OSAL_NV_PAGE_FREE )
//  612     {
//  613       break;
//  614     }
//  615 
//  616     sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
??compactPage_2:
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV	?V0 + 4,A
        MOV	A,#-0x1
        ANL	A,R1
        MOV	?V0 + 5,A
//  617 
//  618     if ( hdr.id != OSAL_NV_ZEROED_ID )
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??compactPage_3
        INC	DPTR
        MOVX	A,@DPTR
??compactPage_3:
        JNZ	$+5
        LJMP	??compactPage_4 & 0xFFFF
//  619     {
//  620       if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
        ; Setup parameters for call to function calcChkF
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV	DPTR,#(??calcChkF & 0xffff)
        MOV	A,#((??calcChkF >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R0,?V0 + 2
        MOV	R1,?V0 + 3
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??compactPage_5
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??compactPage_5:
        JNZ	??compactPage_6
//  621       {
//  622         setItem( srcPg, srcOff, eNvXfer );
        ; Setup parameters for call to function setItem
        MOV	R4,#0x0
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_192:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  623         writeBuf( pgRes, dstOff, OSAL_NV_HDR_SIZE, (byte *)(&hdr) );
        ; Setup parameters for call to function writeBuf
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	?V0 + 2,DPL
        MOV	?V0 + 3,DPH
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	R4,#0x8
        MOV	R5,#0x0
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(??writeBuf & 0xffff)
        MOV	A,#((??writeBuf >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  624         dstOff += OSAL_NV_HDR_SIZE;
        LCALL	?Subroutine43 & 0xFFFF
//  625         xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
??CrossCallReturnLabel_114:
        ; Setup parameters for call to function xferBuf
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV	DPTR,#(??xferBuf & 0xffff)
        MOV	A,#((??xferBuf >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  626         dstOff += sz;
        MOV	A,?V0 + 0
        ADD	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	A,?V0 + 1
        ADDC	A,?V0 + 5
        MOV	?V0 + 1,A
//  627       }
//  628 
//  629       setItem( srcPg, srcOff, eNvZero );  // Mark old location as invalid.
??compactPage_6:
        ; Setup parameters for call to function setItem
        MOV	R4,#0x1
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_193:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  630     }
//  631 
//  632     srcOff += sz;
??compactPage_4:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        ADD	A,?V0 + 4
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,?V0 + 5
??compactPage_1:
        MOVX	@DPTR,A
//  633 
//  634   } while ( TRUE );
        ; Setup parameters for call to function readHdr
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??compactPage_7
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??compactPage_7:
        JZ	??compactPage_8
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        ADD	A,#0x8
        LCALL	?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_174:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_7:
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL	??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_158:
        JNC	$+5
        LJMP	??compactPage_2 & 0xFFFF
//  635 
//  636   pgOff[pgRes-OSAL_NV_PAGE_BEG] = dstOff;
??compactPage_8:
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 1
        LCALL	?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JNZ	??compactPage_9
        MOV	A,#0x1
        MOV	DPTR,#??failF
        MOVX	@DPTR,A
        LJMP	??compactPage_10 & 0xFFFF
??compactPage_9:
        MOV	A,R6
        CLR	C
        RLC	A
        MOV	0xad,A
        MOV	0xae,#0x1
        NOP
??compactPage_11:
        MOV	A,#-0x80
        XRL	A,0xae
        JZ	??compactPage_11
        LCALL	?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_119:
        MOV	A,#0x8
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        LCALL	?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_90:
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
        ; Setup parameters for call to function readHdr
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#-0x8
        MOV	R3,#0x7
        MOV	R1,#0x3f
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??compactPage_12
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??compactPage_12:
        JNZ	??compactPage_13
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??compactPage_14
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??compactPage_14:
        JNZ	??compactPage_13
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??compactPage_15
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??compactPage_15:
        JNZ	??compactPage_13
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??compactPage_16
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??compactPage_16:
        JZ	??compactPage_10
??compactPage_13:
        ; Setup parameters for call to function writeWordD
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#-0x8
        MOV	R3,#0x7
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??writeWordD & 0xffff)
        MOV	A,#((??writeWordD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  637 
//  638   /* In order to recover from a page compaction that is interrupted,
//  639    * the logic in osal_nv_init() depends upon the following order:
//  640    * 1. Compacted page is erased.
//  641    * 2. State of the target of compaction is changed ePgActive to ePgInUse.
//  642    */
//  643   erasePage( srcPg );
//  644 
//  645   // Mark the reserve page as being in use.
//  646   setPageUse( pgRes, TRUE );
??compactPage_10:
        ; Setup parameters for call to function setPageUse
        MOV	R2,#0x1
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(??setPageUse & 0xffff)
        MOV	A,#((??setPageUse >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  647 
//  648   // Mark newly erased page as the new reserve page.
//  649   pgRes = srcPg;
        MOV	A,R6
        MOV	DPTR,#??pgRes
        MOVX	@DPTR,A
//  650 }
        MOV	A,#0x12
        LCALL	?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock5
        REQUIRE ?Subroutine68
        ; // Fall through to label ?Subroutine68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine68:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_119
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV	A,R6
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 25)
??Subroutine45_0:
        LCALL	?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_163:
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
        CFI EndBlock cfiCond11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOVX	@DPTR,A
        LCALL	?Subroutine63 & 0xFFFF
??CrossCallReturnLabel_165:
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine63:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_164
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_90
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_89
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV	A,R0
        ADD	A,#((??pgLost + 136) & 0xff)
        MOV	DPL,A
        MOV	A,R1
        ADDC	A,#(((??pgLost - 120) >> 8) & 0xff)
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CLR	A
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond22) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond22) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond22) CFA_SP SP+-5
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 8)
??Subroutine29_0:
        MOVX	@DPTR,A
        INC	DPTR
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 13)
??Subroutine29_1:
        MOVX	@DPTR,A
        ; Setup parameters for call to function writeWordH
        ; Setup parameters for call to function writeWord
        ; Setup parameters for call to function writeWord
        ; Setup parameters for call to function writeWord
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker26 Using cfiCommon1
        CFI (cfiPicker26) NoFunction
        CFI (cfiPicker26) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 36)
??Subroutine15_0:
        LCALL	?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_147:
        MOV	A,R6
        MOV	R1,A
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiPicker26
        CFI EndBlock cfiCond27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_192
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_193
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_145:
        MOV	A,R6
        MOV	R1,A
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30
        REQUIRE ?Subroutine72
        ; // Fall through to label ?Subroutine72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine72:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_192
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_193
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_190
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_191
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        MOV	DPTR,#(??setItem & 0xffff)
        MOV	A,#((??setItem >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        LCALL	?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_152:
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_151, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_32
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_151, ??CrossCallReturnLabel_31
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_33
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOVX	A,@DPTR
        ADD	A,#0x3
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,#-0x4
        ANL	A,R0
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        LCALL	?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_162:
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine62:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_119
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_118
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_121
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_27
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_120
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_26
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,R0
        ADD	A,#((??pgOff + 136) & 0xff)
        MOV	DPL,A
        MOV	A,R1
        ADDC	A,#(((??pgOff - 120) >> 8) & 0xff)
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53
//  651 
//  652 /*********************************************************************
//  653  * @fn      findItem
//  654  *
//  655  * @brief   Find an item Id in NV and return the page and offset to its data.
//  656  *
//  657  * @param   id - Valid NV item Id.
//  658  *
//  659  * @return  Offset of data corresponding to item Id, if found;
//  660  *          otherwise OSAL_NV_ITEM_NULL.
//  661  *
//  662  *          The page containing the item, if found;
//  663  *          otherwise no valid assignment made - left equal to item Id.
//  664  *
//  665  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  666 static uint16 findItem( uint16 id )
??findItem:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function ??findItem
//  667 {
        FUNCALL ??findItem, ??initPage
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ??findItem, ??initPage
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  668   uint16 off;
//  669   uint8 pg;
//  670 
//  671   for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
        MOV	?V0 + 0,#0x3c
//  672   {
//  673     if ( (off = initPage( pg, id )) != OSAL_NV_ITEM_NULL )
??findItem_1:
        ; Setup parameters for call to function initPage
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(??initPage & 0xffff)
        MOV	A,#((??initPage >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        JNZ	??findItem_2
        MOV	A,R3
??findItem_2:
        JZ	??findItem_3
//  674     {
//  675       findPg = pg;
??findItem_4:
        MOV	A,?V0 + 0
        MOV	DPTR,#??findPg
        MOVX	@DPTR,A
//  676       return off;
        SJMP	??findItem_5
//  677     }
//  678   }
??findItem_3:
        INC	?V0 + 0
        MOV	A,?V0 + 0
        CLR	C
        SUBB	A,#0x3e
        JC	??findItem_1
//  679 
//  680   // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
//  681   for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
        MOV	?V0 + 0,#0x3c
//  682   {
//  683     if ( (off = initPage( pg, (id | 0x8000) )) != OSAL_NV_ITEM_NULL )
??findItem_6:
        ; Setup parameters for call to function initPage
        MOV	A,R6
        MOV	R2,A
        MOV	A,#-0x80
        ORL	A,R7
        MOV	R3,A
        MOV	R1,?V0 + 0
        MOV	A,#((??initPage >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        JNZ	??findItem_7
        MOV	A,R3
??findItem_7:
        JNZ	??findItem_4
//  684     {
//  685       findPg = pg;
//  686       return off;
//  687     }
//  688   }
        INC	?V0 + 0
        MOV	A,?V0 + 0
        CLR	C
        SUBB	A,#0x3e
        JC	??findItem_6
//  689 
//  690   findPg = OSAL_NV_PAGE_NULL;
        CLR	A
        MOV	DPTR,#??findPg
        MOVX	@DPTR,A
//  691   return OSAL_NV_ITEM_NULL;
        MOV	R2,A
        MOV	R3,A
??findItem_5:
        LJMP	?Subroutine74 & 0xFFFF
        CFI EndBlock cfiBlock54
//  692 }
//  693 
//  694 /*********************************************************************
//  695  * @fn      initItem
//  696  *
//  697  * @brief   An NV item is created and initialized with the data passed to the function, if any.
//  698  *
//  699  * @param   id  - Valid NV item Id.
//  700  * @param   len - Item data length.
//  701  * @param  *buf - Pointer to item initalization data. Set to NULL if none.
//  702  *
//  703  * @return  TRUE if item write and read back checksums ok; FALSE otherwise.
//  704  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  705 static uint8 initItem( uint16 id, uint16 len, void *buf )
??initItem:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function ??initItem
//  706 {
        FUNCALL ??initItem, ??writeItem
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ??initItem, ??compactPage
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine21 & 0xFFFF
//  707   uint16 sz = ((len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
//  708                                                                     OSAL_NV_HDR_SIZE;
??CrossCallReturnLabel_61:
        LCALL	?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_122:
        MOV	?V0 + 4,A
        CLR	A
        ADDC	A,R1
        MOV	?V0 + 5,A
//  709   uint8 pg = OSAL_NV_PAGE_BEG;
        MOV	R7,#0x3c
//  710   uint8 rtrn = FALSE;
        MOV	?V0 + 0,#0x0
//  711   uint8 idx;
//  712 
//  713   for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++, pg++ )
        MOV	R6,#0x0
//  714   {
//  715     if ( pg == pgRes )
??initItem_1:
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        XRL	A,R7
        JZ	??initItem_2
//  716     {
//  717       continue;
//  718     }
//  719     if ( (pgOff[idx] - pgLost[idx] + sz) <= OSAL_NV_PAGE_FREE )
        MOV	A,R6
        LCALL	?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_138:
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        LCALL	?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        LCALL	?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV	A,?V0 + 4
        ADD	A,R0
        MOV	R0,A
        MOV	A,?V0 + 5
        LCALL	?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_116:
        JC	??initItem_3
//  720     {
//  721       break;
//  722     }
//  723   }
??initItem_2:
        INC	R6
        INC	R7
        MOV	A,R6
        CLR	C
        SUBB	A,#0x2
        JC	??initItem_1
//  724 
//  725   if ( idx != OSAL_NV_PAGES_USED )
        MOV	A,#0x2
        XRL	A,R6
        JZ	??initItem_4
//  726   {
//  727     // Item fits if an old page is compacted.
//  728     if ( (pgOff[idx] + sz) > OSAL_NV_PAGE_FREE )
??initItem_3:
        MOV	A,R6
        LCALL	?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_136:
        ADD	A,?V0 + 4
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,?V0 + 5
        LCALL	?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_159:
        JC	??initItem_5
//  729     {
//  730       pg = pgRes;
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        MOV	R7,A
//  731     }
//  732 
//  733     // New item is the first one written to the reserved page, then the old page is compacted.
//  734     if ( writeItem( pg, id, len, buf ) )
??initItem_5:
        ; Setup parameters for call to function writeItem
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	A,R7
        MOV	R1,A
        MOV	DPTR,#(??writeItem & 0xffff)
        MOV	A,#((??writeItem >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	A,R1
        JZ	??initItem_6
//  735     {
//  736       rtrn = TRUE;
        MOV	?V0 + 0,#0x1
//  737     }
//  738 
//  739     if ( pg == pgRes )
??initItem_6:
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        XRL	A,R7
        JNZ	??initItem_4
//  740     {
//  741       compactPage( OSAL_NV_PAGE_BEG+idx );
        ; Setup parameters for call to function compactPage
        MOV	A,#0x3c
        ADD	A,R6
        MOV	R1,A
        MOV	DPTR,#(??compactPage & 0xffff)
        MOV	A,#((??compactPage >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  742     }
//  743   }
//  744 
//  745   return rtrn;
??initItem_4:
        MOV	R1,?V0 + 0
        LJMP	?Subroutine68 & 0xFFFF
        CFI EndBlock cfiBlock55
//  746 }
//  747 
//  748 /*********************************************************************
//  749  * @fn      initItem2
//  750  *
//  751  * @brief   An NV item is created.
//  752  *
//  753  * @param   id  - Valid NV item Id.
//  754  * @param   len - Item data length.
//  755  *
//  756  * @return  TRUE if item write and read back checksums ok; FALSE otherwise.
//  757  *          If return it TRUE, then findPg is set to OSAL_NV_PAGE_NULL if a page compaction is not
//  758  *          required; otherwise it is set to the non-NULL page that must be compacted.
//  759  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  760 static uint8 initItem2( uint16 id, uint16 len, uint8 *comPg )
??initItem2:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function ??initItem2
//  761 {
        FUNCALL ??initItem2, ??writeItem
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV	?V0 + 0,R0
        MOV	?V0 + 1,R1
//  762   uint16 sz = ((len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
//  763                                                                     OSAL_NV_HDR_SIZE;
        LCALL	?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_123:
        MOV	?V0 + 2,A
        CLR	A
        ADDC	A,R1
        MOV	?V0 + 3,A
//  764   uint8 pg = OSAL_NV_PAGE_BEG;
        MOV	R6,#0x3c
//  765   uint8 idx;
//  766 
//  767   for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++, pg++ )
        MOV	R7,#0x0
//  768   {
//  769     if ( pg == pgRes )
??initItem2_1:
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        XRL	A,R6
        JZ	??initItem2_2
//  770     {
//  771       continue;
//  772     }
//  773     if ( (pgOff[idx] - pgLost[idx] + sz) <= OSAL_NV_PAGE_FREE )
        MOV	A,R7
        LCALL	?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_139:
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        LCALL	?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_10:
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        LCALL	?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV	A,?V0 + 2
        ADD	A,R0
        MOV	R0,A
        MOV	A,?V0 + 3
        LCALL	?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_117:
        JC	??initItem2_3
//  774     {
//  775       break;
//  776     }
//  777   }
??initItem2_2:
        INC	R7
        INC	R6
        MOV	A,R7
        CLR	C
        SUBB	A,#0x2
        JC	??initItem2_1
//  778 
//  779   // Item fits if an old page is compacted.
//  780   if ( (idx == OSAL_NV_PAGES_USED) || ((pgOff[idx] + sz) > OSAL_NV_PAGE_FREE) )
        MOV	A,#0x2
        XRL	A,R7
        JZ	??initItem2_4
??initItem2_3:
        MOV	A,R7
        LCALL	?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_137:
        ADD	A,?V0 + 2
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        LCALL	?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_125:
        JC	??initItem2_5
//  781   {
//  782     pg = pgRes;
??initItem2_4:
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        MOV	R6,A
//  783 
//  784     if ( idx != OSAL_NV_PAGES_USED )
        MOV	A,#0x2
        XRL	A,R7
        JZ	??initItem2_5
//  785     {
//  786       *comPg = OSAL_NV_PAGE_BEG+idx;
        MOV	A,#0x3c
        ADD	A,R7
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	@DPTR,A
//  787     }
//  788     else
//  789     {
//  790       // comPg has already been set to the page containing the item, so compact that one.
//  791     }
//  792   }
//  793 
//  794   if ( writeItem( pg, id, len, NULL ) )
??initItem2_5:
        ; Setup parameters for call to function writeItem
        MOV	?V0 + 0,#0x0
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??writeItem & 0xffff)
        MOV	A,#((??writeItem >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	A,R1
        JZ	??initItem2_6
//  795   {
//  796     return pg;
        MOV	A,R6
        MOV	R1,A
        SJMP	??initItem2_7
//  797   }
//  798   else
//  799   {
//  800     return OSAL_NV_PAGE_NULL;
??initItem2_6:
        MOV	R1,#0x0
??initItem2_7:
        LJMP	?Subroutine74 & 0xFFFF
        CFI EndBlock cfiBlock56
//  801   }
//  802 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_138
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_139
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        LCALL	?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_167:
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine64:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_167, ??CrossCallReturnLabel_139
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_167, ??CrossCallReturnLabel_138
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_137
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_166, ??CrossCallReturnLabel_136
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,R0
        ADD	A,#(??pgOff & 0xff)
        MOV	DPL,A
        MOV	A,R1
        ADDC	A,#((??pgOff >> 8) & 0xff)
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
        CFI Block cfiCond65 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_137
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        LCALL	?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_166:
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_125
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        ADDC	A,?V0 + 3
        LCALL	?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_161:
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_122
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        MOV	A,#0x3
        ADD	A,R4
        MOV	R0,A
        CLR	A
        ADDC	A,R5
        MOV	R1,A
        MOV	A,#-0x4
        ANL	A,R0
        MOV	R0,A
        MOV	A,#0x8
        ADD	A,R0
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_116
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker76 Using cfiCommon1
        CFI (cfiPicker76) NoFunction
        CFI (cfiPicker76) Picker
        ADDC	A,R1
        LCALL	?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_160:
        RET
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiPicker76

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
        CFI Block cfiCond77 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_159
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_125
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_116
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_117
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_124
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        MOV	R1,A
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_158
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 32)
??Subroutine61_0:
        CLR	C
        MOV	A,R0
        SUBB	A,#-0x7
        MOV	A,R1
        SUBB	A,#0x7
        RET
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82
        CFI EndBlock cfiCond83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker86 Using cfiCommon1
        CFI (cfiPicker86) NoFunction
        CFI (cfiPicker86) Picker
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R0
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        SUBB	A,R1
        MOV	R1,A
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiPicker86
//  803 
//  804 /*********************************************************************
//  805  * @fn      setItem
//  806  *
//  807  * @brief   Set an item Id or status to mark its state.
//  808  *
//  809  * @param   pg - Valid NV page.
//  810  * @param   offset - Valid offset into the page of the item data - the header
//  811  *                   offset is calculated from this.
//  812  * @param   stat - Valid enum value for the item status.
//  813  *
//  814  * @return  none
//  815  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  816 static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
??setItem:
        CFI Block cfiBlock87 Using cfiCommon0
        CFI Function ??setItem
//  817 {
        FUNCALL ??setItem, ??readHdr
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ??setItem, ??writeWord
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ??setItem, ??writeWord
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV	A,#-0x8
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	?V0 + 0,R1
        MOV	A,R4
        MOV	R6,A
//  818   osalNvHdr_t hdr;
//  819 
//  820   offset -= OSAL_NV_HDR_SIZE;
        MOV	A,R2
        ADD	A,#-0x8
        MOV	?V0 + 2,A
        MOV	A,R3
        ADDC	A,#-0x1
        MOV	?V0 + 3,A
//  821   readHdr( pg, offset, (uint8 *)(&hdr) );
        ; Setup parameters for call to function readHdr
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,?V0 + 2
        MOV	R3,A
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  822 
//  823   if ( stat == eNvXfer )
        MOV	A,R6
        JNZ	??setItem_1
//  824   {
//  825     hdr.stat = OSAL_NV_ACTIVE;
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  826     writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
        ; Setup parameters for call to function writeWord
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#0x4
        ADD	A,?V0 + 2
        MOV	R2,A
        CLR	A
        ADDC	A,?V0 + 3
        MOV	R3,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(??writeWord & 0xffff)
        MOV	A,#((??writeWord >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??setItem_2
//  827   }
//  828   else // if ( stat == eNvZero )
//  829   {
//  830     uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
//  831                                                                           OSAL_NV_HDR_SIZE;
??setItem_1:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV	A,#0x8
        ADD	A,R0
        MOV	R6,A
        CLR	A
        ADDC	A,R1
        MOV	R7,A
//  832     hdr.id = 0;
        LCALL	?Subroutine29 & 0xFFFF
//  833     writeWord( pg, offset, (uint8 *)(&hdr) );
??CrossCallReturnLabel_80:
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	R1,?V0 + 0
        MOV	DPTR,#(??writeWord & 0xffff)
        MOV	A,#((??writeWord >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  834     pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
        MOV	A,?V0 + 0
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        LCALL	?Subroutine63 & 0xFFFF
??CrossCallReturnLabel_164:
        MOVX	A,@DPTR
        ADD	A,R6
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R7
        MOVX	@DPTR,A
//  835   }
//  836 }
??setItem_2:
        MOV	A,#0x8
        LCALL	?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock87
        REQUIRE ?Subroutine74
        ; // Fall through to label ?Subroutine74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine74:
        CFI Block cfiBlock88 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock88
//  837 
//  838 /*********************************************************************
//  839  * @fn      calcChkB
//  840  *
//  841  * @brief   Calculates the data checksum over the 'buf' parameter.
//  842  *
//  843  * @param   pg - A valid NV Flash page.
//  844  * @param   offset - A valid offset into the page.
//  845  * @param   len - Byte count of the data to be checksummed.
//  846  *
//  847  * @return  Calculated checksum of the data bytes.
//  848  */
//  849 static uint16 calcChkB( uint16 len, uint8 *buf )
//  850 {
//  851   uint16 chk = 0;
//  852 
//  853   while ( len-- )
//  854   {
//  855     chk += *buf++;
//  856   }
//  857 
//  858   return chk;
//  859 }
//  860 
//  861 /*********************************************************************
//  862  * @fn      calcChkF
//  863  *
//  864  * @brief   Calculates the data checksum by reading the data bytes from NV.
//  865  *
//  866  * @param   pg - A valid NV Flash page.
//  867  * @param   offset - A valid offset into the page.
//  868  * @param   len - Byte count of the data to be checksummed.
//  869  *
//  870  * @return  Calculated checksum of the data bytes.
//  871  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  872 static uint16 calcChkF( byte pg, uint16 offset, uint16 len )
??calcChkF:
        CFI Block cfiBlock89 Using cfiCommon0
        CFI Function ??calcChkF
//  873 {
        FUNCALL ??calcChkF, GetCodeByte
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
//  874   uint32 addr = OSAL_NV_PAGE_TO_ADDR( pg ) + offset;
        MOV	?V0 + 4,R1
        MOV	?V0 + 5,#0x0
        MOV	?V0 + 6,#0x0
        MOV	?V0 + 7,#0x0
        MOV	A,#0xb
        MOV	R0,#?V0 + 4
        LCALL	?L_SHL
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	?V0 + 2,A
        MOV	?V0 + 3,A
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?L_ADD
//  875   uint16 chk = 0;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  876   uint8 eFlag = TRUE;
        MOV	?V0 + 2,#0x1
        SJMP	??CrossCallReturnLabel_175
//  877 
//  878   while ( len-- )
//  879   {
//  880     uint8 ch = GetCodeByte( addr++ );
??calcChkF_1:
        ; Setup parameters for call to function GetCodeByte
        MOV	R2,?V0 + 4
        MOV	R3,?V0 + 5
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        LCALL	GetCodeByte & 0xFFFF
        MOV	A,R1
        MOV	?V0 + 0,A
        MOV	DPTR,#__Constant_1
        MOV	R0,#?V0 + 4
        LCALL	?L_ADD_X
//  881 
//  882     if ( ch != OSAL_NV_ERASED )
        MOV	A,#-0x1
        XRL	A,?V0 + 0
        JZ	??calcChkF_2
//  883     {
//  884       eFlag = FALSE;
        MOV	?V0 + 2,#0x0
//  885     }
//  886 
//  887     chk += ch;
??calcChkF_2:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        ADD	A,?V0 + 0
        LCALL	?Subroutine70 & 0xFFFF
//  888   }
??CrossCallReturnLabel_175:
        LCALL	?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_106:
        JNZ	??calcChkF_3
        MOV	A,R1
??calcChkF_3:
        JNZ	??calcChkF_1
//  889 
//  890   if ( eFlag )
        MOV	A,?V0 + 2
        JZ	??calcChkF_4
//  891   {
//  892     return OSAL_NV_ERASED_ID;
        MOV	R2,#-0x1
        MOV	R3,#-0x1
        SJMP	??CrossCallReturnLabel_50
//  893   }
//  894   else
//  895   {
//  896     return chk;
??calcChkF_4:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_50:
        LJMP	?Subroutine75 & 0xFFFF
        CFI EndBlock cfiBlock89
//  897   }
//  898 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine70:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_177
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_179
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_176
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_174
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_178
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_175
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98
//  899 
//  900 /*********************************************************************
//  901  * @fn      readHdr
//  902  *
//  903  * @brief   Reads "sizeof( osalNvHdr_t )" bytes from NV.
//  904  *
//  905  * @param   pg - Valid NV page.
//  906  * @param   offset - Valid offset into the page.
//  907  * @param   buf - Valid buffer space of at least sizeof( osalNvHdr_t ) bytes.
//  908  *
//  909  * @return  none
//  910  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  911 static void readHdr( uint8 pg, uint16 offset, uint8 *buf )
??readHdr:
        CFI Block cfiBlock99 Using cfiCommon0
        CFI Function ??readHdr
//  912 {
        FUNCALL ??readHdr, GetCodeByte
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
//  913   uint32 addr = OSAL_NV_PAGE_TO_ADDR( pg ) + offset;
        MOV	?V0 + 4,R1
        MOV	?V0 + 5,#0x0
        MOV	?V0 + 6,#0x0
        MOV	?V0 + 7,#0x0
        MOV	A,#0xb
        MOV	R0,#?V0 + 4
        LCALL	?L_SHL
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	?V0 + 2,A
        MOV	?V0 + 3,A
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?L_ADD
//  914   uint8 len = OSAL_NV_HDR_SIZE;
        MOV	R6,#0x8
//  915 
//  916   do
//  917   {
//  918     *buf++ = GetCodeByte( addr++ );
??readHdr_1:
        ; Setup parameters for call to function GetCodeByte
        LCALL	?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_126:
        LCALL	?L_ADD_X
        LCALL	?Subroutine1 & 0xFFFF
//  919   } while ( --len );
??CrossCallReturnLabel_188:
        DEC	R6
        MOV	A,R6
        JNZ	??readHdr_1
//  920 }
        LJMP	?Subroutine75 & 0xFFFF
        CFI EndBlock cfiBlock99
//  921 
//  922 /*********************************************************************
//  923  * @fn      readWord
//  924  *
//  925  * @brief   Reads "sizeof( osalNvHdr_t )" bytes from NV.
//  926  *
//  927  * @param   pg - Valid NV page.
//  928  * @param   offset - Valid offset into the page.
//  929  * @param   buf - Valid buffer space of at least sizeof( osalNvHdr_t ) bytes.
//  930  *
//  931  * @return  none
//  932  */
//  933 static void readWord( uint8 pg, uint16 offset, uint8 *buf )
//  934 {
//  935   uint32 addr = OSAL_NV_PAGE_TO_ADDR( pg ) + offset;
//  936   uint8 len = OSAL_NV_WORD_SIZE;
//  937 
//  938   do
//  939   {
//  940     *buf++ = GetCodeByte( addr++ );
//  941   } while ( --len );
//  942 }
//  943 
//  944 
//  945 /*********************************************************************
//  946  * @fn      writeWord
//  947  *
//  948  * @brief   Writes a Flash-WORD to NV.
//  949  *
//  950  * @param   pg - A valid NV Flash page.
//  951  * @param   offset - A valid offset into the page.
//  952  * @param   buf - Pointer to source buffer.
//  953  *
//  954  * @return  none
//  955  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  956 static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
??writeWord:
        CFI Block cfiBlock100 Using cfiCommon0
        CFI Function ??writeWord
//  957 {
        FUNCALL ??writeWord, HalAdcCheckVdd
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ??writeWord, halFlashDmaTrigger
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
//  958   if ( (buf[0] != OSAL_NV_ERASED) || (buf[1] != OSAL_NV_ERASED) ||
//  959        (buf[2] != OSAL_NV_ERASED) || (buf[3] != OSAL_NV_ERASED) )
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??writeWord_1
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??writeWord_1
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??writeWord_1
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
        JZ	??writeWord_2
//  960   {
//  961     offset = (offset >> 2) + ((uint16)pg << 9);
??writeWord_1:
        MOV	A,#0x2
        MOV	R0,#?V0 + 0
        LCALL	?US_SHR
        MOV	?V0 + 2,R1
        MOV	?V0 + 3,A
        MOV	A,#0x9
        MOV	R0,#?V0 + 2
        LCALL	?S_SHL
        ADD	A,?V0 + 0
        MOV	A,?V0 + 3
        ADDC	A,?V0 + 1
        MOV	?V0 + 1,A
//  962 
//  963     FADDRL = (uint8)offset;
        MOV	A,?V0 + 0
        MOV	0xac,A
//  964     FADDRH = (uint8)(offset >> 8);
        MOV	A,?V0 + 1
        MOV	0xad,A
//  965 
//  966     FBuff[0] = buf[0];
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	DPTR,#FBuff
        LCALL	?Subroutine31 & 0xFFFF
//  967     FBuff[1] = buf[1];
??CrossCallReturnLabel_85:
        MOVX	A,@DPTR
        MOV	DPTR,#(FBuff + 1)
        LCALL	?Subroutine31 & 0xFFFF
//  968     FBuff[2] = buf[2];
??CrossCallReturnLabel_86:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPTR,#(FBuff + 2)
        LCALL	?Subroutine31 & 0xFFFF
//  969     FBuff[3] = buf[3];
??CrossCallReturnLabel_87:
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPTR,#(FBuff + 3)
        LCALL	?Subroutine37 & 0xFFFF
//  970 
//  971     execDMA();
??CrossCallReturnLabel_100:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JNZ	??writeWord_3
        MOV	A,#0x1
        MOV	DPTR,#??failF
        MOVX	@DPTR,A
        SJMP	??writeWord_2
??writeWord_3:
        ANL	0xd1,#0xfe
        MOV	0xd6,#0x1
        ; Setup parameters for call to function halFlashDmaTrigger
        LCALL	halFlashDmaTrigger & 0xFFFF
??writeWord_4:
        MOV	A,0xd1
        MOV	C,0xE0 /* A   */.0
        JNC	??writeWord_4
??writeWord_5:
        MOV	A,#-0x40
        ANL	A,0xae
        JNZ	??writeWord_5
//  972   }
//  973 }
??writeWord_2:
        LJMP	?Subroutine74 & 0xFFFF
        CFI EndBlock cfiBlock100

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_100
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker103 Using cfiCommon1
        CFI (cfiPicker103) NoFunction
        CFI (cfiPicker103) Picker
        MOVX	@DPTR,A
        ; Setup parameters for call to function HalAdcCheckVdd
        ; Setup parameters for call to function HalAdcCheckVdd
        MOV	R1,#0x4
        MOV	DPTR,#(HalAdcCheckVdd & 0xffff)
        MOV	A,#((HalAdcCheckVdd >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiPicker103
//  974 
//  975 /*********************************************************************
//  976  * @fn      writeWordD
//  977  *
//  978  * @brief   Writes two Flash-WORDs to NV.
//  979  *
//  980  * @param   pg - A valid NV Flash page.
//  981  * @param   offset - A valid offset into the page.
//  982  * @param   buf - Pointer to source buffer.
//  983  *
//  984  * @return  none
//  985  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  986 static void writeWordD( uint8 pg, uint16 offset, uint8 *buf )
??writeWordD:
        CFI Block cfiBlock104 Using cfiCommon0
        CFI Function ??writeWordD
//  987 {
        FUNCALL ??writeWordD, ??writeWord
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ??writeWordD, ??writeWord
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	?V0 + 0,R1
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	?V0 + 2,R4
        MOV	?V0 + 3,R5
//  988   writeWord( pg, offset, buf );
        ; Setup parameters for call to function writeWord
        MOV	DPTR,#(??writeWord & 0xffff)
        MOV	A,#((??writeWord >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  989   writeWord( pg, offset+OSAL_NV_WORD_SIZE, buf+OSAL_NV_WORD_SIZE);
        ; Setup parameters for call to function writeWord
        MOV	A,?V0 + 2
        ADD	A,#0x4
        MOV	R4,A
        MOV	A,?V0 + 3
        ADDC	A,#0x0
        MOV	R5,A
        MOV	A,#0x4
        ADD	A,R6
        MOV	R2,A
        CLR	A
        ADDC	A,R7
        MOV	R3,A
        MOV	R1,?V0 + 0
        MOV	A,#((??writeWord >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  990 }
        LJMP	?Subroutine74 & 0xFFFF
        CFI EndBlock cfiBlock104
//  991 
//  992 /*********************************************************************
//  993  * @fn      writeWordH
//  994  *
//  995  * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
//  996  *
//  997  * @param   pg - A valid NV Flash page.
//  998  * @param   offset - A valid offset into the page.
//  999  * @param   buf - Pointer to source buffer.
// 1000  *
// 1001  * @return  none
// 1002  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1003 static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
??writeWordH:
        CFI Block cfiBlock105 Using cfiCommon0
        CFI Function ??writeWordH
// 1004 {
        FUNCALL ??writeWordH, ??writeWord
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV	A,#-0x4
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
// 1005   uint8 tmp[4];
// 1006 
// 1007   tmp[0] = buf[0];
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine31 & 0xFFFF
// 1008   tmp[1] = buf[1];
??CrossCallReturnLabel_88:
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 1009   tmp[2] = OSAL_NV_ERASED;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,#-0x1
        MOVX	@DPTR,A
// 1010   tmp[3] = OSAL_NV_ERASED;
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,#-0x1
        LCALL	??Subroutine29_1 & 0xFFFF
// 1011 
// 1012   writeWord( pg, offset, tmp );
??CrossCallReturnLabel_82:
        MOV	DPTR,#(??writeWord & 0xffff)
        MOV	A,#((??writeWord >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1013 }
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        MOVX	@DPTR,A
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110
// 1014 
// 1015 /*********************************************************************
// 1016  * @fn      writeBuf
// 1017  *
// 1018  * @brief   Writes a data buffer to NV.
// 1019  *
// 1020  * @param   dstPg - A valid NV Flash page.
// 1021  * @param   offset - A valid offset into the page.
// 1022  * @param   len  - Byte count of the data to write.
// 1023  * @param   buf  - The data to write.
// 1024  *
// 1025  * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
// 1026  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1027 static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
??writeBuf:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function ??writeBuf
// 1028 {
        FUNCALL ??writeBuf, GetCodeByte
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ??writeBuf, ??writeWord
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ??writeBuf, ??writeWord
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ??writeBuf, ??writeWord
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV	A,#-0x8
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,R1
        MOVX	@DPTR,A
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
// 1029   uint32 addr;
// 1030   uint8 idx, rem, tmp[OSAL_NV_WORD_SIZE];
// 1031 
// 1032   rem = dstOff % OSAL_NV_WORD_SIZE;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        LCALL	?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_140:
        MOVX	@DPTR,A
// 1033   if ( rem )
        JNZ	$+5
        LJMP	??CrossCallReturnLabel_177 & 0xFFFF
// 1034   {
// 1035     dstOff -= rem;
        MOV	R0,A
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine26 & 0xFFFF
// 1036     addr = OSAL_NV_PAGE_TO_ADDR( dstPg ) + dstOff;
??CrossCallReturnLabel_70:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL	?L_SHL
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL	?L_ADD
// 1037 
// 1038     for ( idx = 0; idx < rem; idx++ )
// 1039     {
// 1040       tmp[idx] = GetCodeByte( addr++ );
??writeBuf_1:
        ; Setup parameters for call to function GetCodeByte
        LCALL	?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_127:
        LCALL	?L_ADD_X
        MOV	?V0 + 0,?V0 + 2
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL	?Subroutine30 & 0xFFFF
// 1041     }
??CrossCallReturnLabel_83:
        JC	??writeBuf_1
// 1042 
// 1043     while ( (idx < OSAL_NV_WORD_SIZE) && len )
??writeBuf_2:
        MOV	A,?V0 + 2
        CLR	C
        SUBB	A,#0x4
        JNC	??CrossCallReturnLabel_101
        MOV	A,R6
        JNZ	??writeBuf_3
        MOV	A,R7
??writeBuf_3:
        JZ	??CrossCallReturnLabel_101
// 1044     {
// 1045       tmp[idx++] = *buf++;
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_66:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	?V0 + 0,?V0 + 2
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_104:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_182:
        INC	?V0 + 2
// 1046       len--;
        LCALL	?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_133:
        SJMP	??writeBuf_2
// 1047     }
// 1048 
// 1049     while ( idx < OSAL_NV_WORD_SIZE )
// 1050     {
// 1051       tmp[idx++] = OSAL_NV_ERASED;
??writeBuf_4:
        MOV	?V0 + 0,?V0 + 2
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine38 & 0xFFFF
// 1052     }
??CrossCallReturnLabel_101:
        MOV	A,?V0 + 2
        CLR	C
        SUBB	A,#0x4
        JC	??writeBuf_4
// 1053 
// 1054     writeWord( dstPg, dstOff, tmp );
        ; Setup parameters for call to function writeWord
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1055     dstOff += OSAL_NV_WORD_SIZE;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine5 & 0xFFFF
// 1056   }
// 1057 
// 1058   rem = len % OSAL_NV_WORD_SIZE;
??CrossCallReturnLabel_177:
        MOV	A,R6
        LCALL	?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_141:
        LCALL	?Subroutine34 & 0xFFFF
// 1059   len /= OSAL_NV_WORD_SIZE;
??CrossCallReturnLabel_91:
        LCALL	?US_SHR
        MOV	R6,?V0 + 0
        MOV	R7,?V0 + 1
        SJMP	??CrossCallReturnLabel_183
// 1060 
// 1061   while ( len-- )
// 1062   {
// 1063     writeWord( dstPg, dstOff, buf );
??writeBuf_5:
        ; Setup parameters for call to function writeWord
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1064     dstOff += OSAL_NV_WORD_SIZE;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine5 & 0xFFFF
// 1065     buf += OSAL_NV_WORD_SIZE;
??CrossCallReturnLabel_178:
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,#0x4
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine71 & 0xFFFF
// 1066   }
??CrossCallReturnLabel_183:
        LCALL	?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_107:
        JNZ	??writeBuf_6
        MOV	A,R1
??writeBuf_6:
        JNZ	??writeBuf_5
// 1067 
// 1068   if ( rem )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JZ	??writeBuf_7
// 1069   {
// 1070     for ( idx = 0; idx < rem; idx++ )
        MOV	?V0 + 2,#0x0
// 1071     {
// 1072       tmp[idx] = *buf++;
??writeBuf_8:
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_67:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	?V0 + 0,?V0 + 2
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_105:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL	?XSTACK_DISP0_8
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        LCALL	?Subroutine30 & 0xFFFF
// 1073     }
??CrossCallReturnLabel_84:
        JC	??writeBuf_8
// 1074 
// 1075     while ( idx < OSAL_NV_WORD_SIZE )
??writeBuf_9:
        MOV	A,?V0 + 2
        CLR	C
        SUBB	A,#0x4
        JNC	??writeBuf_10
// 1076     {
// 1077       tmp[idx++] = OSAL_NV_ERASED;
        MOV	?V0 + 0,?V0 + 2
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_102:
        SJMP	??writeBuf_9
// 1078     }
// 1079 
// 1080     writeWord( dstPg, dstOff, tmp );
??writeBuf_10:
        ; Setup parameters for call to function writeWord
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1081   }
// 1082 }
??writeBuf_7:
        MOV	A,#0x8
        LJMP	??Subroutine75_0 & 0xFFFF
        CFI EndBlock cfiBlock111

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
        CFI Block cfiCond112 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_140
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker114 Using cfiCommon1
        CFI (cfiPicker114) NoFunction
        CFI (cfiPicker114) Picker
        ANL	A,#0x3
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_104
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+-1
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        LCALL	?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_171:
        RET
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
        CFI Block cfiCond119 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_104
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_103
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_101
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_105
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+-1
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_102
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker124 Using cfiCommon1
        CFI (cfiPicker124) NoFunction
        CFI (cfiPicker124) Picker
        MOV	A,DPL
        ADD	A,?V0 + 0
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiPicker124
        REQUIRE ?Subroutine69
        ; // Fall through to label ?Subroutine69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine69:
        CFI Block cfiCond125 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_101
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_103
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_111
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_110
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_76
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_105
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+-1
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_104
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+-1
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_102
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_75
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker135 Using cfiCommon1
        CFI (cfiPicker135) NoFunction
        CFI (cfiPicker135) Picker
        MOV	DPL,A
        MOV	A,DPH
        ADDC	A,#0x0
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond136 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_101
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker138 Using cfiCommon1
        CFI (cfiPicker138) NoFunction
        CFI (cfiPicker138) Picker
        LCALL	?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_170:
        MOV	A,#-0x1
        MOVX	@DPTR,A
        INC	?V0 + 2
        RET
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond139 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker141 Using cfiCommon1
        CFI (cfiPicker141) NoFunction
        CFI (cfiPicker141) Picker
        MOV	A,R1
        MOVX	@DPTR,A
        INC	?V0 + 2
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,?V0 + 2
        CLR	C
        SUBB	A,R2
        RET
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiPicker141

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond142 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker144 Using cfiCommon1
        CFI (cfiPicker144) NoFunction
        CFI (cfiPicker144) Picker
        LCALL	?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_168:
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiPicker144

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond145 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker147 Using cfiCommon1
        CFI (cfiPicker147) NoFunction
        CFI (cfiPicker147) Picker
        LCALL	?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_144:
        MOV	A,#0x18
        RET
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiPicker147

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond148 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker151 Using cfiCommon1
        CFI (cfiPicker151) NoFunction
        CFI (cfiPicker151) Picker
        LCALL	?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_148:
        MOV	A,#0x1
        RET
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiPicker151

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker157 Using cfiCommon1
        CFI (cfiPicker157) NoFunction
        CFI (cfiPicker157) Picker
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        RET
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiPicker157
// 1083 
// 1084 /*********************************************************************
// 1085  * @fn      xferBuf
// 1086  *
// 1087  * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
// 1088  *
// 1089  * @return  none
// 1090  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1091 static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
??xferBuf:
        CFI Block cfiBlock158 Using cfiCommon0
        CFI Function ??xferBuf
// 1092 {
        FUNCALL ??xferBuf, GetCodeByte
        LOCFRAME XSTACK, 28, STACK
        ARGFRAME XSTACK, 28, STACK
        FUNCALL ??xferBuf, GetCodeByte
        LOCFRAME XSTACK, 28, STACK
        ARGFRAME XSTACK, 28, STACK
        FUNCALL ??xferBuf, ??writeWord
        LOCFRAME XSTACK, 28, STACK
        ARGFRAME XSTACK, 28, STACK
        FUNCALL ??xferBuf, GetCodeByte
        LOCFRAME XSTACK, 28, STACK
        ARGFRAME XSTACK, 28, STACK
        FUNCALL ??xferBuf, ??writeWord
        LOCFRAME XSTACK, 28, STACK
        ARGFRAME XSTACK, 28, STACK
        FUNCALL ??xferBuf, GetCodeByte
        LOCFRAME XSTACK, 28, STACK
        ARGFRAME XSTACK, 28, STACK
        FUNCALL ??xferBuf, ??writeWord
        LOCFRAME XSTACK, 28, STACK
        ARGFRAME XSTACK, 28, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 12
        MOV	A,#-0xc
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,R1
        MOVX	@DPTR,A
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,R4
        MOVX	@DPTR,A
        MOV	A,#0x1e
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
// 1093   uint32 addr;
// 1094   uint8 idx, rem, tmp[OSAL_NV_WORD_SIZE];
// 1095 
// 1096   rem = dstOff % OSAL_NV_WORD_SIZE;
        MOV	A,#0x1c
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ANL	A,#0x3
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 1097   if ( rem )
        JNZ	$+5
        LJMP	??CrossCallReturnLabel_179 & 0xFFFF
// 1098   {
// 1099     dstOff -= rem;
        MOV	R0,A
        MOV	A,#0x1c
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine26 & 0xFFFF
// 1100     addr = OSAL_NV_PAGE_TO_ADDR( dstPg ) + dstOff;
??CrossCallReturnLabel_71:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL	?L_SHL
        MOV	A,#0x1c
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_194:
        LCALL	?L_ADD
// 1101 
// 1102     for ( idx = 0; idx < rem; idx++ )
        CLR	A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
// 1103     {
// 1104       tmp[idx] = GetCodeByte( addr++ );
??xferBuf_1:
        ; Setup parameters for call to function GetCodeByte
        LCALL	?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_130:
        LCALL	?L_ADD_X
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine28 & 0xFFFF
// 1105     }
??CrossCallReturnLabel_74:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R2,A
        POP	A
        CFI CFA_SP SP+0
        CLR	C
        SUBB	A,R2
        JC	??xferBuf_1
// 1106 
// 1107     addr = OSAL_NV_PAGE_TO_ADDR( srcPg ) + srcOff;
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL	?L_SHL
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_197:
        LCALL	?L_ADD
        SJMP	??CrossCallReturnLabel_134
// 1108 
// 1109     while ( (idx < OSAL_NV_WORD_SIZE) && len )
// 1110     {
// 1111       tmp[idx++] = GetCodeByte( addr++ );
??xferBuf_2:
        ; Setup parameters for call to function GetCodeByte
        LCALL	?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_131:
        LCALL	?L_ADD_X
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine28 & 0xFFFF
// 1112       srcOff++;
??CrossCallReturnLabel_76:
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,#0x1
        LCALL	?Subroutine70 & 0xFFFF
// 1113       len--;
??CrossCallReturnLabel_176:
        LCALL	?Subroutine50 & 0xFFFF
// 1114     }
??CrossCallReturnLabel_134:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,#0x4
        JNC	??xferBuf_3
        MOV	A,R6
        JNZ	??xferBuf_4
        MOV	A,R7
??xferBuf_4:
        JNZ	??xferBuf_2
// 1115 
// 1116     while ( idx < OSAL_NV_WORD_SIZE )
??xferBuf_3:
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,#0x4
        JNC	??xferBuf_5
// 1117     {
// 1118       tmp[idx++] = OSAL_NV_ERASED;
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL	??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_77:
        SJMP	??xferBuf_3
// 1119     }
// 1120 
// 1121     writeWord( dstPg, dstOff, tmp );
??xferBuf_5:
        ; Setup parameters for call to function writeWord
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#0x1c
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1122     dstOff += OSAL_NV_WORD_SIZE;
        MOV	A,#0x1c
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine5 & 0xFFFF
// 1123   }
// 1124 
// 1125   rem = len % OSAL_NV_WORD_SIZE;
??CrossCallReturnLabel_179:
        MOV	A,R6
        ANL	A,#0x3
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        LCALL	?Subroutine34 & 0xFFFF
// 1126   len = len / OSAL_NV_WORD_SIZE;
??CrossCallReturnLabel_92:
        LCALL	?US_SHR
        MOV	R6,?V0 + 0
        MOV	R7,?V0 + 1
        SJMP	??CrossCallReturnLabel_181
// 1127 
// 1128   while ( len-- )
// 1129   {
// 1130     readWord( srcPg, srcOff, tmp );
??xferBuf_6:
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOV	R0,DPL
        MOV	R1,DPH
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_184:
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL	?L_SHL
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL	?L_ADD
        MOV	?V0 + 0,#0x4
??xferBuf_7:
        ; Setup parameters for call to function GetCodeByte
        LCALL	?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_128:
        LCALL	?L_ADD_X
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_156:
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_142:
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_185:
        DEC	?V0 + 0
        MOV	A,?V0 + 0
        JNZ	??xferBuf_7
// 1131     srcOff += OSAL_NV_WORD_SIZE;
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine5 & 0xFFFF
// 1132     writeWord( dstPg, dstOff, tmp );
??CrossCallReturnLabel_180:
        ; Setup parameters for call to function writeWord
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#0x1c
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1133     dstOff += OSAL_NV_WORD_SIZE;
        MOV	A,#0x1c
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine5 & 0xFFFF
// 1134   }
??CrossCallReturnLabel_181:
        LCALL	?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_108:
        JNZ	??xferBuf_8
        MOV	A,R1
??xferBuf_8:
        JNZ	??xferBuf_6
// 1135 
// 1136   if ( rem )
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JZ	??xferBuf_9
// 1137   {
// 1138     addr = OSAL_NV_PAGE_TO_ADDR( srcPg ) + srcOff;
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL	?L_SHL
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_195:
        LCALL	?L_ADD
// 1139 
// 1140     for ( idx = 0; idx < rem; idx++ )
        CLR	A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
// 1141     {
// 1142       tmp[idx] = GetCodeByte( addr++ );
??xferBuf_10:
        ; Setup parameters for call to function GetCodeByte
        LCALL	?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_132:
        LCALL	?L_ADD_X
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine28 & 0xFFFF
// 1143     }
??CrossCallReturnLabel_75:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R2,A
        POP	A
        CFI CFA_SP SP+0
        CLR	C
        SUBB	A,R2
        JC	??xferBuf_10
// 1144 
// 1145     while ( idx < OSAL_NV_WORD_SIZE )
??xferBuf_11:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,#0x4
        JNC	??xferBuf_12
// 1146     {
// 1147       tmp[idx++] = OSAL_NV_ERASED;
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_111:
        LCALL	??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_78:
        SJMP	??xferBuf_11
// 1148     }
// 1149 
// 1150     writeWord( dstPg, dstOff, tmp );
??xferBuf_12:
        ; Setup parameters for call to function writeWord
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#0x1c
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1151   }
// 1152 }
??xferBuf_9:
        MOV	A,#0xc
        SJMP	??Subroutine75_0
        CFI EndBlock cfiBlock158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine75:
        CFI Block cfiBlock159 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x2
??Subroutine75_0:
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock159

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
        CFI Block cfiCond160 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_188
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_189
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_142
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_144, ??CrossCallReturnLabel_65
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_144, ??CrossCallReturnLabel_64
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker165 Using cfiCommon1
        CFI (cfiPicker165) NoFunction
        CFI (cfiPicker165) Picker
        MOVX	A,@DPTR
        ADD	A,#0x1
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        RET
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiPicker165

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond166 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_135
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_133
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker169 Using cfiCommon1
        CFI (cfiPicker169) NoFunction
        CFI (cfiPicker169) Picker
        MOV	A,R6
        ADD	A,#-0x1
        DEC	R6
        MOV	A,R7
        ADDC	A,#-0x1
        MOV	R7,A
        RET
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiPicker169

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond170 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_131
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_132
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_130
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker173 Using cfiCommon1
        CFI (cfiPicker173) NoFunction
        CFI (cfiPicker173) Picker
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        LCALL	GetCodeByte & 0xFFFF
        MOV	DPTR,#__Constant_1
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiPicker173

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond174 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_127
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_126
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker178 Using cfiCommon1
        CFI (cfiPicker178) NoFunction
        CFI (cfiPicker178) Picker
        MOV	R2,?V0 + 4
        MOV	R3,?V0 + 5
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        LCALL	GetCodeByte & 0xFFFF
        MOV	DPTR,#__Constant_1
        MOV	R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiPicker178

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond179 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_110
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker181 Using cfiCommon1
        CFI (cfiPicker181) NoFunction
        CFI (cfiPicker181) Picker
        LCALL	?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_173:
        MOV	A,#-0x1
        RET
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiPicker181

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond182 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_106
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker186 Using cfiCommon1
        CFI (cfiPicker186) NoFunction
        CFI (cfiPicker186) Picker
        MOV	A,R6
        MOV	R0,A
        MOV	A,R7
        MOV	R1,A
        MOV	A,#-0x1
        ADD	A,R0
        DEC	R6
        MOV	A,#-0x1
        ADDC	A,R1
        MOV	R7,A
        MOV	A,R0
        RET
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiPicker186

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond187 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_96
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_97
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+0
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond192) CFA_SP SP+0
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker193 Using cfiCommon1
        CFI (cfiPicker193) NoFunction
        CFI (cfiPicker193) Picker
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiPicker193

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond194 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker196 Using cfiCommon1
        CFI (cfiPicker196) NoFunction
        CFI (cfiPicker196) Picker
        MOVX	@DPTR,A
        MOV	?V0 + 0,R6
        MOV	?V0 + 1,R7
        MOV	A,#0x2
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiPicker196

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond197 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker200 Using cfiCommon1
        CFI (cfiPicker200) NoFunction
        CFI (cfiPicker200) Picker
        LCALL	?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_172:
        MOV	A,R1
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 28)
??Subroutine28_0:
        MOVX	@DPTR,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        INC	A
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiPicker200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
        CFI Block cfiCond203 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_110
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_74
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_111
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_76
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_75
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker208 Using cfiCommon1
        CFI (cfiPicker208) NoFunction
        CFI (cfiPicker208) Picker
        MOV	A,DPL
        ADD	A,R0
        LJMP	?Subroutine69 & 0xFFFF
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiPicker208

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond209 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond210) CFA_SP SP+0
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker211 Using cfiCommon1
        CFI (cfiPicker211) NoFunction
        CFI (cfiPicker211) Picker
        CLR	C
        MOVX	A,@DPTR
        SUBB	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        SUBB	A,#0x0
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond212 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond214) CFA_SP SP+0
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker215 Using cfiCommon1
        CFI (cfiPicker215) NoFunction
        CFI (cfiPicker215) Picker
        LCALL	?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_149:
        MOV	A,#0x2
        RET
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiPicker215

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond216 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond217 Using cfiCommon0
        CFI (cfiCond217) NoFunction
        CFI (cfiCond217) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond217) CFA_SP SP+0
        CFI (cfiCond217) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker218 Using cfiCommon1
        CFI (cfiPicker218) NoFunction
        CFI (cfiPicker218) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        MOV	?V0 + 2,#0x0
        MOV	?V0 + 3,#0x0
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        RET
        CFI EndBlock cfiCond216
        CFI EndBlock cfiCond217
        CFI EndBlock cfiPicker218

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond219 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond224 Using cfiCommon0
        CFI (cfiCond224) NoFunction
        CFI (cfiCond224) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond224) CFA_SP SP+0
        CFI (cfiCond224) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker225 Using cfiCommon1
        CFI (cfiPicker225) NoFunction
        CFI (cfiPicker225) Picker
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(??writeWord & 0xffff)
        MOV	A,#((??writeWord >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiCond224
        CFI EndBlock cfiPicker225

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond226 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_179
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+0
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_178
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_177
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker231 Using cfiCommon1
        CFI (cfiPicker231) NoFunction
        CFI (cfiPicker231) Picker
        MOVX	A,@DPTR
        ADD	A,#0x4
        LJMP	?Subroutine70 & 0xFFFF
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiPicker231

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond232 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond234) CFA_SP SP+0
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker235 Using cfiCommon1
        CFI (cfiPicker235) NoFunction
        CFI (cfiPicker235) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        MOV	?V0 + 5,#0x0
        MOV	?V0 + 6,#0x0
        MOV	?V0 + 7,#0x0
        MOV	A,#0xb
        MOV	R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiPicker235
// 1153 
// 1154 /*********************************************************************
// 1155  * @fn      writeItem
// 1156  *
// 1157  * @brief   Writes an item header/data combo to the specified NV page.
// 1158  *
// 1159  * @param   pg - Valid NV Flash page.
// 1160  * @param   id - Valid NV item Id.
// 1161  * @param   len  - Byte count of the data to write.
// 1162  * @param   buf  - The data to write. If NULL, no data/checksum write.
// 1163  *
// 1164  * @return  TRUE if header/data to write matches header/data read back, else FALSE.
// 1165  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1166 static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf )
??writeItem:
        CFI Block cfiBlock236 Using cfiCommon0
        CFI Function ??writeItem
// 1167 {
        FUNCALL ??writeItem, ??setPageUse
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??writeItem, ??writeWord
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??writeItem, ??readHdr
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??writeItem, ??writeBuf
        LOCFRAME XSTACK, 28, STACK
        ARGFRAME XSTACK, 28, STACK
        FUNCALL ??writeItem, ??calcChkF
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??writeItem, ??writeWordH
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        FUNCALL ??writeItem, ??readHdr
        LOCFRAME XSTACK, 26, STACK
        ARGFRAME XSTACK, 26, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 10
        MOV	A,#-0xa
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	A,R1
        MOV	R6,A
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
        MOV	?V0 + 4,R4
        MOV	?V0 + 5,R5
        MOV	A,#0x1a
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine21 & 0xFFFF
// 1168   uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
??CrossCallReturnLabel_62:
        LCALL	?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_120:
        LCALL	?Subroutine19 & 0xFFFF
// 1169   uint8 rtrn = FALSE;
??CrossCallReturnLabel_56:
        MOV	R7,#0x0
// 1170   osalNvHdr_t hdr;
// 1171   uint16 sz;
// 1172 
// 1173   if ( pg == pgRes )
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??writeItem_1
// 1174   {
// 1175     /* Mark reserve page as being active, in process of receiving items.
// 1176      * Invoking function must effect a page compaction.
// 1177      */
// 1178     setPageUse( pg, FALSE );
        ; Setup parameters for call to function setPageUse
        MOV	R2,#0x0
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??setPageUse & 0xffff)
        MOV	A,#((??setPageUse >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1179   }
// 1180 
// 1181   hdr.id = id;
??writeItem_1:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 7
        MOVX	@DPTR,A
// 1182   hdr.len = len;
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 5
        MOVX	@DPTR,A
// 1183 
// 1184   writeWord( pg, offset, (uint8 *)&hdr );
        ; Setup parameters for call to function writeWord
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??writeWord & 0xffff)
        MOV	A,#((??writeWord >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1185   readHdr( pg, offset, (uint8 *)(&hdr) );
        ; Setup parameters for call to function readHdr
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1186 
// 1187   if ( (hdr.id == id) && (hdr.len == len) )
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,?V0 + 6
        JNZ	??writeItem_2
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,?V0 + 7
??writeItem_2:
        JZ	$+5
        LJMP	??writeItem_3 & 0xFFFF
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,?V0 + 4
        JNZ	??writeItem_4
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,?V0 + 5
??writeItem_4:
        JZ	$+5
        LJMP	??writeItem_3 & 0xFFFF
// 1188   {
// 1189     if ( buf != NULL )
        MOV	A,?V0 + 2
        JNZ	??writeItem_5
        MOV	A,?V0 + 3
??writeItem_5:
        JNZ	$+5
        LJMP	??writeItem_6 & 0xFFFF
// 1190     {
// 1191       uint16 chk = calcChkB( len, buf );
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOV	R0,?V0 + 4
        MOV	R1,?V0 + 5
        MOV	R4,#0x0
        MOV	R5,#0x0
        SJMP	??writeItem_7
??writeItem_8:
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,R4
        ADD	A,R2
        MOV	R4,A
        MOV	A,R5
        ADDC	A,#0x0
        MOV	R5,A
        INC	DPTR
??writeItem_7:
        MOV	A,R0
        MOV	R2,A
        MOV	A,R1
        MOV	R3,A
        MOV	A,#-0x1
        ADD	A,R2
        DEC	R0
        MOV	A,#-0x1
        ADDC	A,R3
        MOV	R1,A
        MOV	A,R2
        JNZ	??writeItem_9
        MOV	A,R3
??writeItem_9:
        JNZ	??writeItem_8
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
// 1192 
// 1193       offset += OSAL_NV_HDR_SIZE;
        LCALL	?Subroutine43 & 0xFFFF
// 1194       writeBuf( pg, offset, len, buf );
??CrossCallReturnLabel_115:
        ; Setup parameters for call to function writeBuf
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV	R4,?V0 + 4
        MOV	R5,?V0 + 5
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??writeBuf & 0xffff)
        MOV	A,#((??writeBuf >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
// 1195 
// 1196       if ( chk == calcChkF( pg, offset, len ) )
        ; Setup parameters for call to function calcChkF
        MOV	R4,?V0 + 4
        MOV	R5,?V0 + 5
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(??calcChkF & 0xffff)
        MOV	A,#((??calcChkF >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R0,?V0 + 2
        MOV	R1,?V0 + 3
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??writeItem_10
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??writeItem_10:
        JNZ	??writeItem_3
// 1197       {
// 1198         writeWordH( pg, (offset-OSAL_NV_WORD_SIZE), (uint8 *)&chk );
        ; Setup parameters for call to function writeWordH
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#-0x4
        LCALL	?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_112:
        MOV	DPTR,#(??writeWordH & 0xffff)
        MOV	A,#((??writeWordH >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1199         readHdr( pg, (offset-OSAL_NV_HDR_SIZE), (uint8 *)(&hdr) );
        ; Setup parameters for call to function readHdr
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#-0x8
        LCALL	?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_113:
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1200 
// 1201         if ( chk == hdr.chk )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??writeItem_11
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??writeItem_11:
        JNZ	??writeItem_3
// 1202         {
// 1203           rtrn = TRUE;
??writeItem_6:
        INC	R7
// 1204         }
// 1205       }
// 1206     }
// 1207     else
// 1208     {
// 1209       rtrn = TRUE;
// 1210     }
// 1211   }
// 1212 
// 1213   sz = ((len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
// 1214                                                              OSAL_NV_HDR_SIZE;
// 1215   pgOff[pg-OSAL_NV_PAGE_BEG] += sz;
??writeItem_3:
        MOV	A,#0x3
        ADD	A,?V0 + 4
        MOV	R0,A
        CLR	A
        ADDC	A,?V0 + 5
        MOV	R1,A
        MOV	A,#-0x4
        ANL	A,R0
        MOV	R0,A
        MOV	A,#0x8
        ADD	A,R0
        MOV	R2,A
        CLR	A
        ADDC	A,R1
        MOV	R3,A
        LCALL	?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_121:
        MOVX	A,@DPTR
        ADD	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R3
        MOVX	@DPTR,A
// 1216 
// 1217   return rtrn;
        MOV	A,R7
        MOV	R1,A
        MOV	A,#0xa
        LJMP	??Subroutine75_0 & 0xFFFF
        CFI EndBlock cfiBlock236
// 1218 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond237 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_114
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker239 Using cfiCommon1
        CFI (cfiPicker239) NoFunction
        CFI (cfiPicker239) Picker
        MOV	A,?V0 + 0
        ADD	A,#0x8
        MOV	?V0 + 0,A
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	?V0 + 1,A
        RET
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiPicker239

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond240 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_112
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker242 Using cfiCommon1
        CFI (cfiPicker242) NoFunction
        CFI (cfiPicker242) Picker
        ADD	A,?V0 + 0
        MOV	R2,A
        MOV	A,#-0x1
        ADDC	A,?V0 + 1
        MOV	R3,A
        MOV	A,R6
        MOV	R1,A
        RET
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiPicker242

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond243 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond244 Using cfiCommon0
        CFI (cfiCond244) NoFunction
        CFI (cfiCond244) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond244) CFA_SP SP+0
        CFI (cfiCond244) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker246 Using cfiCommon1
        CFI (cfiPicker246) NoFunction
        CFI (cfiPicker246) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
        RET
        CFI EndBlock cfiCond243
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiPicker246

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond247 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker250 Using cfiCommon1
        CFI (cfiPicker250) NoFunction
        CFI (cfiPicker250) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        RET
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiPicker250
// 1219 
// 1220 /*********************************************************************
// 1221  * @fn      osal_nv_init
// 1222  *
// 1223  * @brief   Initialize NV service.
// 1224  *
// 1225  * @param   p - Not used.
// 1226  *
// 1227  * @return  none
// 1228  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1229 void osal_nv_init( void *p )
osal_nv_init:
        CFI Block cfiBlock251 Using cfiCommon0
        CFI Function osal_nv_init
// 1230 {
        FUNCALL osal_nv_init, ??initNV
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1231   (void)p;  // Suppress Lint warning.
// 1232 
// 1233   // Set Flash write timing based on CPU speed.
// 1234 #ifdef CPU16MHZ
// 1235   FWT = 0x15;
// 1236 #else
// 1237   FWT = 0x2A;
        MOV	0xab,#0x2a
// 1238 #endif
// 1239 
// 1240   initDMA();
        MOV	A,#-0x21
        MOV	DPTR,#(dmaCh0 + 2)
        MOVX	@DPTR,A
        MOV	A,#-0x51
        MOV	DPTR,#(dmaCh0 + 3)
        MOVX	@DPTR,A
        MOV	A,#((FBuff >> 8) & 0xff)
        MOV	DPTR,#dmaCh0
        MOVX	@DPTR,A
        MOV	A,#(FBuff & 0xff)
        MOV	DPTR,#(dmaCh0 + 1)
        MOVX	@DPTR,A
        MOV	DPTR,#(dmaCh0 + 4)
        MOVX	A,@DPTR
        ANL	A,#0x1f
        MOVX	@DPTR,A
        MOV	A,#0x4
        MOV	DPTR,#(dmaCh0 + 5)
        MOVX	@DPTR,A
        MOV	DPTR,#(dmaCh0 + 4)
        MOVX	A,@DPTR
        ANL	A,#0xe0
        MOVX	@DPTR,A
        MOV	A,#0x12
        MOV	DPTR,#(dmaCh0 + 6)
        MOVX	@DPTR,A
        MOV	A,#0x42
        MOV	DPTR,#(dmaCh0 + 7)
        MOVX	@DPTR,A
// 1241 
// 1242   (void)initNV();  // Always returns TRUE after pages have been erased.
        ; Setup parameters for call to function initNV
        MOV	DPTR,#(??initNV & 0xffff)
        MOV	A,#((??initNV >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1243 }
        LJMP	?Subroutine67 & 0xFFFF
        CFI EndBlock cfiBlock251
// 1244 
// 1245 /*********************************************************************
// 1246  * @fn      osal_nv_item_init
// 1247  *
// 1248  * @brief   If the NV item does not already exist, it is created and
// 1249  *          initialized with the data passed to the function, if any.
// 1250  *          This function must be called before calling osal_nv_read() or
// 1251  *          osal_nv_write().
// 1252  *
// 1253  * @param   id  - Valid NV item Id.
// 1254  * @param   len - Item length.
// 1255  * @param  *buf - Pointer to item initalization data. Set to NULL if none.
// 1256  *
// 1257  * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
// 1258  *          ZSUCCESS       - Id already existed, no action taken.
// 1259  *          NV_OPER_FAILED - Failure to find or create Id.
// 1260  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1261 uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
osal_nv_item_init:
        CFI Block cfiBlock252 Using cfiCommon0
        CFI Function osal_nv_item_init
// 1262 {
        FUNCALL osal_nv_item_init, ??findItem
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL osal_nv_item_init, ??initItem
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL osal_nv_item_init, ??initNV
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine21 & 0xFFFF
// 1263   failF = FALSE;
??CrossCallReturnLabel_63:
        CLR	A
        MOV	DPTR,#??failF
        MOVX	@DPTR,A
// 1264 
// 1265   /* ZCD_NV_EXTADDR is the only item maintained without an osalNvHdr_t,
// 1266    * so it is always already initialized.
// 1267    */
// 1268   if ( (id == ZCD_NV_EXTADDR) || (findItem( id ) != OSAL_NV_ITEM_NULL) )
        MOV	A,#0x1
        XRL	A,R6
        JNZ	??osal_nv_item_init_0
        MOV	A,R7
??osal_nv_item_init_0:
        JZ	??osal_nv_item_init_1
        ; Setup parameters for call to function findItem
        MOV	DPTR,#(??findItem & 0xffff)
        MOV	A,#((??findItem >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        JNZ	??osal_nv_item_init_2
        MOV	A,R3
??osal_nv_item_init_2:
        JZ	??osal_nv_item_init_3
// 1269   {
// 1270     return ZSUCCESS;
??osal_nv_item_init_1:
        MOV	R1,#0x0
        SJMP	??osal_nv_item_init_4
// 1271   }
// 1272   else if ( initItem( id, len, buf ) != OSAL_NV_PAGE_NULL )
??osal_nv_item_init_3:
        ; Setup parameters for call to function initItem
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	R4,?V0 + 0
        MOV	R5,?V0 + 1
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(??initItem & 0xffff)
        MOV	A,#((??initItem >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	A,R1
        JZ	??osal_nv_item_init_5
// 1273   {
// 1274     if ( failF )
        MOV	DPTR,#??failF
        MOVX	A,@DPTR
        JZ	??osal_nv_item_init_6
// 1275     {
// 1276       (void)initNV();  // See comment at the declaration of failF.
        ; Setup parameters for call to function initNV
        MOV	DPTR,#(??initNV & 0xffff)
        MOV	A,#((??initNV >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1277       return NV_OPER_FAILED;
// 1278     }
// 1279     else
// 1280     {
// 1281       return NV_ITEM_UNINIT;
// 1282     }
// 1283   }
// 1284   else
// 1285   {
// 1286     return NV_OPER_FAILED;
??osal_nv_item_init_5:
        MOV	R1,#0x10
??osal_nv_item_init_4:
        LJMP	?Subroutine68 & 0xFFFF
// 1287   }
??osal_nv_item_init_6:
        MOV	R1,#0xf
        SJMP	??osal_nv_item_init_4
        CFI EndBlock cfiBlock252
// 1288 }
// 1289 
// 1290 /*********************************************************************
// 1291  * @fn      osal_nv_item_len
// 1292  *
// 1293  * @brief   Get the data length of the item stored in NV memory.
// 1294  *
// 1295  * @param   id  - Valid NV item Id.
// 1296  *
// 1297  * @return  Item length, if found; zero otherwise.
// 1298  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1299 uint16 osal_nv_item_len( uint16 id )
osal_nv_item_len:
        CFI Block cfiBlock253 Using cfiCommon0
        CFI Function osal_nv_item_len
// 1300 {
        FUNCALL osal_nv_item_len, ??findItem
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL osal_nv_item_len, ??readHdr
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV	A,#-0x8
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 1301   if ( id == ZCD_NV_EXTADDR )
        MOV	A,#0x1
        XRL	A,R2
        JNZ	??osal_nv_item_len_0
        MOV	A,R3
??osal_nv_item_len_0:
        JNZ	??osal_nv_item_len_1
// 1302   {
// 1303     return Z_EXTADDR_LEN;
        MOV	R2,#0x8
??osal_nv_item_len_2:
        MOV	R3,#0x0
        SJMP	??CrossCallReturnLabel_51
// 1304   }
// 1305   else
// 1306   {
// 1307     uint16 offset = findItem( id );
??osal_nv_item_len_1:
        ; Setup parameters for call to function findItem
        MOV	DPTR,#(??findItem & 0xffff)
        MOV	A,#((??findItem >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,?V0 + 0
        MOV	R1,?V0 + 1
// 1308 
// 1309     if ( offset == OSAL_NV_ITEM_NULL )
        MOV	A,R0
        JNZ	??osal_nv_item_len_3
        MOV	A,R1
??osal_nv_item_len_3:
        JNZ	??osal_nv_item_len_4
// 1310     {
// 1311       return 0;
        MOV	R2,#0x0
        SJMP	??osal_nv_item_len_2
// 1312     }
// 1313     else
// 1314     {
// 1315       osalNvHdr_t hdr;
// 1316       readHdr( findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr) );
??osal_nv_item_len_4:
        ; Setup parameters for call to function readHdr
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#-0x8
        ADD	A,R0
        MOV	R2,A
        MOV	A,#-0x1
        ADDC	A,R1
        MOV	R3,A
        MOV	DPTR,#??findPg
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1317       return hdr.len;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV	A,#0x8
        LJMP	?Subroutine66 & 0xFFFF
        CFI EndBlock cfiBlock253
// 1318     }
// 1319   }
// 1320 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond254 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond255) CFA_SP SP+0
        CFI (cfiCond255) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond256 Using cfiCommon0
        CFI (cfiCond256) NoFunction
        CFI (cfiCond256) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond256) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond256) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond256) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond256) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond256) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond256) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond256) CFA_SP SP+0
        CFI (cfiCond256) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond257 Using cfiCommon0
        CFI (cfiCond257) NoFunction
        CFI (cfiCond257) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond257) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond257) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond257) CFA_SP SP+0
        CFI (cfiCond257) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond258 Using cfiCommon0
        CFI (cfiCond258) NoFunction
        CFI (cfiCond258) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond258) CFA_SP SP+0
        CFI (cfiCond258) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker259 Using cfiCommon1
        CFI (cfiPicker259) NoFunction
        CFI (cfiPicker259) Picker
        LCALL	?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_150:
        RET
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiCond256
        CFI EndBlock cfiCond257
        CFI EndBlock cfiCond258
        CFI EndBlock cfiPicker259

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
        CFI Block cfiCond260 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond261 Using cfiCommon0
        CFI (cfiCond261) NoFunction
        CFI (cfiCond261) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_190
        CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond261) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond261) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond261) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond261) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond261) CFA_SP SP+0
        CFI (cfiCond261) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond262 Using cfiCommon0
        CFI (cfiCond262) NoFunction
        CFI (cfiCond262) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_44
        CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond262) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond262) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond262) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond262) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond262) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond262) CFA_SP SP+0
        CFI (cfiCond262) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_53
        CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond263) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond263) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond263) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond263) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond263) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond263) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond263) CFA_SP SP+0
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_50
        CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond264) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond264) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond264) CFA_SP SP+0
        CFI (cfiCond264) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond265 Using cfiCommon0
        CFI (cfiCond265) NoFunction
        CFI (cfiCond265) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_192
        CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond265) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond265) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond265) CFA_SP SP+0
        CFI (cfiCond265) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond266 Using cfiCommon0
        CFI (cfiCond266) NoFunction
        CFI (cfiCond266) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_42
        CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond266) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond266) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond266) CFA_SP SP+0
        CFI (cfiCond266) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond267 Using cfiCommon0
        CFI (cfiCond267) NoFunction
        CFI (cfiCond267) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_43
        CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond267) CFA_SP SP+0
        CFI (cfiCond267) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond268 Using cfiCommon0
        CFI (cfiCond268) NoFunction
        CFI (cfiCond268) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_47
        CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond268) CFA_SP SP+0
        CFI (cfiCond268) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond269 Using cfiCommon0
        CFI (cfiCond269) NoFunction
        CFI (cfiCond269) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_45
        CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond269) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond269) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond269) CFA_SP SP+0
        CFI (cfiCond269) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_54
        CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond270) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond270) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond270) CFA_SP SP+0
        CFI (cfiCond270) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond271 Using cfiCommon0
        CFI (cfiCond271) NoFunction
        CFI (cfiCond271) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_191
        CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond271) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond271) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond271) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond271) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond271) CFA_SP SP+0
        CFI (cfiCond271) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond272 Using cfiCommon0
        CFI (cfiCond272) NoFunction
        CFI (cfiCond272) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_51
        CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond272) CFA_SP SP+0
        CFI (cfiCond272) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond273 Using cfiCommon0
        CFI (cfiCond273) NoFunction
        CFI (cfiCond273) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_52
        CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond273) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond273) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond273) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond273) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond273) CFA_SP SP+0
        CFI (cfiCond273) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond274 Using cfiCommon0
        CFI (cfiCond274) NoFunction
        CFI (cfiCond274) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_48
        CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond274) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond274) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond274) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond274) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond274) CFA_SP SP+0
        CFI (cfiCond274) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond275 Using cfiCommon0
        CFI (cfiCond275) NoFunction
        CFI (cfiCond275) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_46
        CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond275) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond275) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond275) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond275) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond275) CFA_SP SP+0
        CFI (cfiCond275) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond276 Using cfiCommon0
        CFI (cfiCond276) NoFunction
        CFI (cfiCond276) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_41
        CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond276) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond276) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond276) CFA_SP SP+0
        CFI (cfiCond276) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_193
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker278 Using cfiCommon1
        CFI (cfiPicker278) NoFunction
        CFI (cfiPicker278) Picker
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        RET
        CFI EndBlock cfiCond260
        CFI EndBlock cfiCond261
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiCond265
        CFI EndBlock cfiCond266
        CFI EndBlock cfiCond267
        CFI EndBlock cfiCond268
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiCond271
        CFI EndBlock cfiCond272
        CFI EndBlock cfiCond273
        CFI EndBlock cfiCond274
        CFI EndBlock cfiCond275
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiPicker278
// 1321 
// 1322 /*********************************************************************
// 1323  * @fn      osal_nv_write
// 1324  *
// 1325  * @brief   Write a data item to NV. Function can write an entire item to NV or
// 1326  *          an element of an item by indexing into the item with an offset.
// 1327  *
// 1328  * @param   id  - Valid NV item Id.
// 1329  * @param   ndx - Index offset into item
// 1330  * @param   len - Length of data to write.
// 1331  * @param  *buf - Data to write.
// 1332  *
// 1333  * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
// 1334  *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
// 1335  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1336 uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
osal_nv_write:
        CFI Block cfiBlock279 Using cfiCommon0
        CFI Function osal_nv_write
// 1337 {
        FUNCALL osal_nv_write, ??readHdr
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, ??writeWordD
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, ??findItem
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, ??readHdr
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, GetCodeByte
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, ??initItem2
        LOCFRAME XSTACK, 36, STACK
        ARGFRAME XSTACK, 36, STACK
        FUNCALL osal_nv_write, ??setItem
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, ??xferBuf
        LOCFRAME XSTACK, 38, STACK
        ARGFRAME XSTACK, 38, STACK
        FUNCALL osal_nv_write, ??writeBuf
        LOCFRAME XSTACK, 36, STACK
        ARGFRAME XSTACK, 36, STACK
        FUNCALL osal_nv_write, ??xferBuf
        LOCFRAME XSTACK, 38, STACK
        ARGFRAME XSTACK, 38, STACK
        FUNCALL osal_nv_write, ??calcChkF
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, ??writeWordH
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, ??readHdr
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, ??setItem
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, ??compactPage
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        FUNCALL osal_nv_write, ??initNV
        LOCFRAME XSTACK, 34, STACK
        ARGFRAME XSTACK, 34, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 18
        MOV	A,#-0x12
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
// 1338   uint8 rtrn = ZSUCCESS;
        CLR	A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
// 1339 
// 1340   /* Global fail flag for fail due to low bus voltage has less impact on code
// 1341    * size than passing back a return value all the way from the lowest level.
// 1342    */
// 1343   failF = FALSE;
        MOV	DPTR,#??failF
        MOVX	@DPTR,A
// 1344 
// 1345   if ( id == ZCD_NV_EXTADDR )
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??osal_nv_write_0
        INC	DPTR
        MOVX	A,@DPTR
??osal_nv_write_0:
        JZ	$+5
        LJMP	??osal_nv_write_1 & 0xFFFF
// 1346   {
// 1347     osalNvHdr_t hdr;
// 1348     readHdr( OSAL_NV_IEEE_PAGE, OSAL_NV_IEEE_OFFSET, (uint8 *)(&hdr) );
        ; Setup parameters for call to function readHdr
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#-0x8
        MOV	R3,#0x7
        MOV	R1,#0x3f
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1349 
// 1350     if ( (hdr.id == OSAL_NV_ERASED_ID) &&
// 1351          (hdr.len == OSAL_NV_ERASED_ID) &&
// 1352          (hdr.chk == OSAL_NV_ERASED_ID) &&
// 1353          (hdr.stat == OSAL_NV_ERASED_ID) )
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??osal_nv_write_2
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??osal_nv_write_2:
        JNZ	??osal_nv_write_3
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??osal_nv_write_4
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??osal_nv_write_4:
        JNZ	??osal_nv_write_3
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??osal_nv_write_5
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??osal_nv_write_5:
        JNZ	??osal_nv_write_3
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??osal_nv_write_6
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??osal_nv_write_6:
        JNZ	??osal_nv_write_3
// 1354     {
// 1355       writeWordD( OSAL_NV_IEEE_PAGE, OSAL_NV_IEEE_OFFSET, buf );
        ; Setup parameters for call to function writeWordD
        MOV	A,#0x24
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV	R2,#-0x8
        MOV	R3,#0x7
        MOV	R1,#0x3f
        MOV	DPTR,#(??writeWordD & 0xffff)
        MOV	A,#((??writeWordD >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1356       return ((failF) ? NV_OPER_FAILED : ZSUCCESS);
        MOV	DPTR,#??failF
        MOVX	A,@DPTR
        JZ	??osal_nv_write_7
        MOV	R1,#0x10
        SJMP	??osal_nv_write_8
??osal_nv_write_7:
        MOV	R1,#0x0
??osal_nv_write_8:
        LJMP	??osal_nv_write_9 & 0xFFFF
// 1357     }
// 1358     else
// 1359     {
// 1360       return NV_OPER_FAILED;
??osal_nv_write_3:
        MOV	R1,#0x10
        LJMP	??osal_nv_write_9 & 0xFFFF
// 1361     }
// 1362   }
// 1363 
// 1364   if ( len != 0 )
??osal_nv_write_1:
        MOV	A,#0x22
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??osal_nv_write_10
        INC	DPTR
        MOVX	A,@DPTR
??osal_nv_write_10:
        JNZ	$+5
        LJMP	??osal_nv_write_11 & 0xFFFF
// 1365   {
// 1366     osalNvHdr_t hdr;
// 1367     uint32 addr;
// 1368     uint16 srcOff;
// 1369     uint16 cnt;
// 1370     uint8 *ptr;
// 1371 
// 1372     srcOff = findItem( id );
        ; Setup parameters for call to function findItem
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV	DPTR,#(??findItem & 0xffff)
        MOV	A,#((??findItem >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine35 & 0xFFFF
// 1373     if ( srcOff == OSAL_NV_ITEM_NULL )
??CrossCallReturnLabel_97:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??osal_nv_write_12
        INC	DPTR
        MOVX	A,@DPTR
??osal_nv_write_12:
        JNZ	??osal_nv_write_13
// 1374     {
// 1375       return NV_ITEM_UNINIT;
        MOV	R1,#0xf
        LJMP	??osal_nv_write_9 & 0xFFFF
// 1376     }
// 1377 
// 1378     readHdr( findPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr) );
??osal_nv_write_13:
        ; Setup parameters for call to function readHdr
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,#-0x8
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#-0x1
        MOV	R3,A
        MOV	DPTR,#??findPg
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1379     if ( hdr.len < (ndx + len) )
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        PUSH	DPL
        CFI CFA_SP SP+-3
        PUSH	DPH
        CFI CFA_SP SP+-4
        MOV	A,#0x22
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_12:
        POP	DPH
        CFI CFA_SP SP+-3
        POP	DPL
        CFI CFA_SP SP+-2
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_59:
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        CLR	C
        MOVX	A,@DPTR
        SUBB	A,R0
        INC	DPTR
        MOVX	A,@DPTR
        SUBB	A,R1
        JNC	$+5
        LJMP	??osal_nv_write_3 & 0xFFFF
// 1380     {
// 1381       return NV_OPER_FAILED;
// 1382     }
// 1383 
// 1384     addr = OSAL_NV_PAGE_TO_ADDR( findPg ) + srcOff + ndx;
        MOV	DPTR,#??findPg
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL	?L_SHL
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_196:
        LCALL	?L_ADD
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_198:
        LCALL	?L_ADD
// 1385     ptr = buf;
        MOV	A,#0x24
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine57 & 0xFFFF
// 1386     cnt = len;
??CrossCallReturnLabel_153:
        MOV	A,#0x22
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
// 1387     do
// 1388     {
// 1389       if ( GetCodeByte( addr++ ) != *ptr++ )
??osal_nv_write_14:
        ; Setup parameters for call to function GetCodeByte
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        LCALL	GetCodeByte & 0xFFFF
        MOV	A,R1
        MOV	R2,A
        MOV	DPTR,#__Constant_1
        MOV	R0,#?V0 + 0
        LCALL	?L_ADD_X
        MOV	R0,?V0 + 4
        MOV	R1,?V0 + 5
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOV	?V0 + 4,DPL
        MOV	?V0 + 5,DPH
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        XRL	A,R2
        JNZ	??osal_nv_write_15
// 1390       {
// 1391         break;
// 1392       }
// 1393     } while ( --cnt );
        LCALL	?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV	A,R6
        JNZ	??osal_nv_write_16
        MOV	A,R7
??osal_nv_write_16:
        JNZ	??osal_nv_write_14
// 1394 
// 1395     if ( cnt != 0 )  // If the buffer to write is different in one or more bytes.
??osal_nv_write_15:
        MOV	A,R6
        JNZ	??osal_nv_write_17
        MOV	A,R7
??osal_nv_write_17:
        JNZ	$+5
        LJMP	??osal_nv_write_18 & 0xFFFF
// 1396     {
// 1397       uint8 comPg, srcPg;
// 1398 
// 1399       comPg = srcPg = findPg;
        MOV	DPTR,#??findPg
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        MOV	A,#0x7
        LCALL	?XSTACK_DISP0_8
        MOV	A,?V0 + 1
        MOVX	@DPTR,A
// 1400       // initItem2() can change the findPg and it advances pgOff[] of the dstPg.
// 1401       uint8 dstPg = initItem2( id, hdr.len, &comPg );
        ; Setup parameters for call to function initItem2
        MOV	?V0 + 2,DPL
        MOV	?V0 + 3,DPH
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV	DPTR,#(??initItem2 & 0xffff)
        MOV	A,#((??initItem2 >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	A,R1
        MOV	?V0 + 0,A
// 1402 
// 1403       if ( dstPg != OSAL_NV_PAGE_NULL )
        JNZ	$+5
        LJMP	??osal_nv_write_19 & 0xFFFF
// 1404       {
// 1405         uint16 tmp = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine71 & 0xFFFF
// 1406         uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
??CrossCallReturnLabel_186:
        MOV	A,?V0 + 0
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,R0
        ADD	A,#((??pgOff + 136) & 0xff)
        MOV	?V0 + 4,A
        MOV	A,R1
        ADDC	A,#(((??pgOff - 120) >> 8) & 0xff)
        MOV	?V0 + 5,A
        MOV	DPL,?V0 + 4
        MOV	DPH,A
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_13:
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        LCALL	?Subroutine27 & 0xFFFF
// 1407         uint16 origOff = srcOff;
// 1408 
// 1409         setItem( srcPg, srcOff, eNvXfer );
??CrossCallReturnLabel_72:
        ; Setup parameters for call to function setItem
        MOV	R4,#0x0
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_190:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1410 
// 1411         xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
        ; Setup parameters for call to function xferBuf
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV	?V0 + 2,R6
        MOV	?V0 + 3,R7
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV	R4,?V0 + 0
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV	R1,?V0 + 1
        MOV	DPTR,#(??xferBuf & 0xffff)
        MOV	A,#((??xferBuf >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
// 1412         srcOff += ndx;
// 1413         dstOff += ndx;
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,R6
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R7
        MOV	R7,A
// 1414 
// 1415         writeBuf( dstPg, dstOff, len, buf );
        ; Setup parameters for call to function writeBuf
        MOV	A,#0x24
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV	A,#0x24
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV	DPTR,#(??writeBuf & 0xffff)
        MOV	A,#((??writeBuf >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
// 1416         srcOff += len;
// 1417         dstOff += len;
// 1418 
// 1419         xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
        ; Setup parameters for call to function xferBuf
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_14:
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R0
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        SUBB	A,R1
        MOV	R3,A
        MOV	A,#0x22
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV	A,R2
        CLR	C
        SUBB	A,R0
        MOV	?V0 + 2,A
        MOV	A,R3
        SUBB	A,R1
        MOV	?V0 + 3,A
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV	A,#0x24
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,R6
        MOV	?V0 + 2,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R7
        MOV	?V0 + 3,A
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV	R4,?V0 + 0
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        MOV	A,#0x7
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_16:
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV	A,#0x26
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R1
        MOV	R3,A
        MOV	R1,?V0 + 1
        MOV	DPTR,#(??xferBuf & 0xffff)
        MOV	A,#((??xferBuf >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
// 1420 
// 1421         // Calculate and write the new checksum.
// 1422         dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_17:
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        LCALL	?Subroutine27 & 0xFFFF
// 1423         tmp = calcChkF( dstPg, dstOff, hdr.len );
??CrossCallReturnLabel_73:
        ; Setup parameters for call to function calcChkF
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV	DPTR,#(??calcChkF & 0xffff)
        MOV	A,#((??calcChkF >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine35 & 0xFFFF
// 1424         dstOff -= OSAL_NV_HDR_SIZE;
??CrossCallReturnLabel_98:
        MOV	A,R6
        ADD	A,#-0x8
        MOV	R6,A
        MOV	A,R7
        ADDC	A,#-0x1
        MOV	R7,A
// 1425         writeWordH( dstPg, (dstOff+OSAL_NV_HDR_CHK), (uint8 *)&tmp );
        ; Setup parameters for call to function writeWordH
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,#0x4
        ADD	A,R6
        MOV	R2,A
        CLR	A
        ADDC	A,R7
        MOV	R3,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(??writeWordH & 0xffff)
        MOV	A,#((??writeWordH >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1426         readHdr( dstPg, dstOff, (uint8 *)(&hdr) );
        ; Setup parameters for call to function readHdr
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(??readHdr & 0xffff)
        MOV	A,#((??readHdr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1427 
// 1428         if ( tmp == hdr.chk )
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??osal_nv_write_20
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??osal_nv_write_20:
        JNZ	??osal_nv_write_21
// 1429         {
// 1430           setItem( srcPg, origOff, eNvZero );
        ; Setup parameters for call to function setItem
        MOV	R4,#0x1
        MOV	A,R4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_191:
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??osal_nv_write_22
// 1431         }
// 1432         else
// 1433         {
// 1434           rtrn = NV_OPER_FAILED;
??osal_nv_write_21:
        MOV	A,#0x10
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
// 1435         }
// 1436 
// 1437         if ( dstPg == pgRes )
??osal_nv_write_22:
        MOV	DPTR,#??pgRes
        MOVX	A,@DPTR
        XRL	A,?V0 + 0
        JNZ	??osal_nv_write_18
// 1438         {
// 1439           compactPage( comPg );
        ; Setup parameters for call to function compactPage
        MOV	A,#0x7
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(??compactPage & 0xffff)
        MOV	A,#((??compactPage >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??osal_nv_write_18
// 1440         }
// 1441       }
// 1442       else
// 1443       {
// 1444         rtrn = NV_OPER_FAILED;
??osal_nv_write_19:
        MOV	A,#0x10
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
// 1445       }
// 1446     }
// 1447   }
// 1448 
// 1449   if ( failF )
??osal_nv_write_18:
        MOV	DPTR,#??failF
        MOVX	A,@DPTR
        JZ	??osal_nv_write_11
// 1450   {
// 1451     (void)initNV();  // See comment at the declaration of failF.
        ; Setup parameters for call to function initNV
        MOV	DPTR,#(??initNV & 0xffff)
        MOV	A,#((??initNV >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1452     rtrn = NV_OPER_FAILED;
        MOV	A,#0x10
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
// 1453   }
// 1454 
// 1455   return rtrn;
??osal_nv_write_11:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R1,A
??osal_nv_write_9:
        MOV	A,#0x12
        LJMP	??Subroutine75_0 & 0xFFFF
        CFI EndBlock cfiBlock279
// 1456 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine71:
        CFI Block cfiCond280 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_184
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond281 Using cfiCommon0
        CFI (cfiCond281) NoFunction
        CFI (cfiCond281) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond281) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond281) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond281) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond281) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond281) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond281) CFA_SP SP+0
        CFI (cfiCond281) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond282 Using cfiCommon0
        CFI (cfiCond282) NoFunction
        CFI (cfiCond282) Conditional ??CrossCallReturnLabel_188
        CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond282) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond282) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond282) CFA_SP SP+0
        CFI (cfiCond282) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond283 Using cfiCommon0
        CFI (cfiCond283) NoFunction
        CFI (cfiCond283) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond283) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond283) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond283) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond283) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond283) CFA_SP SP+0
        CFI (cfiCond283) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond284 Using cfiCommon0
        CFI (cfiCond284) NoFunction
        CFI (cfiCond284) Conditional ??CrossCallReturnLabel_189
        CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond284) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond284) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond284) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond284) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond284) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond284) CFA_SP SP+0
        CFI (cfiCond284) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond285 Using cfiCommon0
        CFI (cfiCond285) NoFunction
        CFI (cfiCond285) Conditional ??CrossCallReturnLabel_187
        CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond285) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond285) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond285) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond285) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond285) CFA_SP SP+0
        CFI (cfiCond285) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond286 Using cfiCommon0
        CFI (cfiCond286) NoFunction
        CFI (cfiCond286) Conditional ??CrossCallReturnLabel_182
        CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond286) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond286) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond286) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond286) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond286) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond286) CFA_SP SP+0
        CFI (cfiCond286) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond287 Using cfiCommon0
        CFI (cfiCond287) NoFunction
        CFI (cfiCond287) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond287) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond287) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond287) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond287) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond287) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond287) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond287) CFA_SP SP+0
        CFI (cfiCond287) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker288 Using cfiCommon1
        CFI (cfiPicker288) NoFunction
        CFI (cfiPicker288) Picker
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond280
        CFI EndBlock cfiCond281
        CFI EndBlock cfiCond282
        CFI EndBlock cfiCond283
        CFI EndBlock cfiCond284
        CFI EndBlock cfiCond285
        CFI EndBlock cfiCond286
        CFI EndBlock cfiCond287
        CFI EndBlock cfiPicker288

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond289 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond290 Using cfiCommon0
        CFI (cfiCond290) NoFunction
        CFI (cfiCond290) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond290) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond290) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond290) CFA_SP SP+0
        CFI (cfiCond290) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker291 Using cfiCommon1
        CFI (cfiPicker291) NoFunction
        CFI (cfiPicker291) Picker
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R0
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        SUBB	A,R1
        MOV	R7,A
        RET
        CFI EndBlock cfiCond289
        CFI EndBlock cfiCond290
        CFI EndBlock cfiPicker291

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond292 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_198
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond293 Using cfiCommon0
        CFI (cfiCond293) NoFunction
        CFI (cfiCond293) Conditional ??CrossCallReturnLabel_197
        CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond293) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond293) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond293) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond293) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond293) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond293) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond293) CFA_SP SP+0
        CFI (cfiCond293) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker294 Using cfiCommon1
        CFI (cfiPicker294) NoFunction
        CFI (cfiPicker294) Picker
        LCALL	?Subroutine57 & 0xFFFF
        CFI EndBlock cfiCond292
        CFI EndBlock cfiCond293
        CFI EndBlock cfiPicker294
??CrossCallReturnLabel_155:
        REQUIRE ?Subroutine73
        ; // Fall through to label ?Subroutine73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine73:
        CFI Block cfiCond295 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_198
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond296 Using cfiCommon0
        CFI (cfiCond296) NoFunction
        CFI (cfiCond296) Conditional ??CrossCallReturnLabel_194
        CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond296) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond296) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond296) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond296) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond296) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond296) CFA_SP SP+0
        CFI (cfiCond296) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond297 Using cfiCommon0
        CFI (cfiCond297) NoFunction
        CFI (cfiCond297) Conditional ??CrossCallReturnLabel_196
        CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond297) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond297) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond297) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond297) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond297) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond297) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond297) CFA_SP SP+0
        CFI (cfiCond297) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond298 Using cfiCommon0
        CFI (cfiCond298) NoFunction
        CFI (cfiCond298) Conditional ??CrossCallReturnLabel_195
        CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond298) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond298) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond298) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond298) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond298) CFA_SP SP+0
        CFI (cfiCond298) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond299 Using cfiCommon0
        CFI (cfiCond299) NoFunction
        CFI (cfiCond299) Conditional ??CrossCallReturnLabel_197
        CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond299) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond299) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond299) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond299) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond299) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond299) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond299) CFA_SP SP+0
        CFI (cfiCond299) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker300 Using cfiCommon1
        CFI (cfiPicker300) NoFunction
        CFI (cfiPicker300) Picker
        MOV	R0,#?V0 + 0
        MOV	R1,#?V0 + 4
        RET
        CFI EndBlock cfiCond295
        CFI EndBlock cfiCond296
        CFI EndBlock cfiCond297
        CFI EndBlock cfiCond298
        CFI EndBlock cfiCond299
        CFI EndBlock cfiPicker300

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
        CFI Block cfiCond301 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_195
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond302 Using cfiCommon0
        CFI (cfiCond302) NoFunction
        CFI (cfiCond302) Conditional ??CrossCallReturnLabel_153
        CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond302) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond302) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond302) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond302) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond302) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond302) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond302) CFA_SP SP+0
        CFI (cfiCond302) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond303 Using cfiCommon0
        CFI (cfiCond303) NoFunction
        CFI (cfiCond303) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_197
        CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond303) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond303) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond303) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond303) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond303) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond303) CFA_SP SP+0
        CFI (cfiCond303) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond304 Using cfiCommon0
        CFI (cfiCond304) NoFunction
        CFI (cfiCond304) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_194
        CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond304) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond304) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond304) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond304) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond304) CFA_SP SP+0
        CFI (cfiCond304) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond305 Using cfiCommon0
        CFI (cfiCond305) NoFunction
        CFI (cfiCond305) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_198
        CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond305) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond305) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond305) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond305) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond305) CFA_SP SP+0
        CFI (cfiCond305) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond306 Using cfiCommon0
        CFI (cfiCond306) NoFunction
        CFI (cfiCond306) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_196
        CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond306) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond306) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond306) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond306) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond306) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond306) CFA_SP SP+0
        CFI (cfiCond306) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker307 Using cfiCommon1
        CFI (cfiPicker307) NoFunction
        CFI (cfiPicker307) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 5,A
        RET
        CFI EndBlock cfiCond301
        CFI EndBlock cfiCond302
        CFI EndBlock cfiCond303
        CFI EndBlock cfiCond304
        CFI EndBlock cfiCond305
        CFI EndBlock cfiCond306
        CFI EndBlock cfiPicker307

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond308 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-2
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond309 Using cfiCommon0
        CFI (cfiCond309) NoFunction
        CFI (cfiCond309) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond309) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond309) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond309) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond309) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond309) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond309) CFA_SP SP+0
        CFI (cfiCond309) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond310 Using cfiCommon0
        CFI (cfiCond310) NoFunction
        CFI (cfiCond310) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond310) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond310) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond310) CFA_SP SP+0
        CFI (cfiCond310) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker311 Using cfiCommon1
        CFI (cfiPicker311) NoFunction
        CFI (cfiPicker311) Picker
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R1
        MOV	R1,A
        RET
        CFI EndBlock cfiCond308
        CFI EndBlock cfiCond309
        CFI EndBlock cfiCond310
        CFI EndBlock cfiPicker311

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond312 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond313 Using cfiCommon0
        CFI (cfiCond313) NoFunction
        CFI (cfiCond313) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond313) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond313) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond313) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond313) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond313) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond313) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond313) CFA_SP SP+0
        CFI (cfiCond313) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker314 Using cfiCommon1
        CFI (cfiPicker314) NoFunction
        CFI (cfiPicker314) Picker
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	R1,?V0 + 0
        RET
        CFI EndBlock cfiCond312
        CFI EndBlock cfiCond313
        CFI EndBlock cfiPicker314

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond315 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_190
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond316 Using cfiCommon0
        CFI (cfiCond316) NoFunction
        CFI (cfiCond316) Conditional ??CrossCallReturnLabel_191
        CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond316) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond316) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond316) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond316) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond316) CFA_SP SP+0
        CFI (cfiCond316) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker317 Using cfiCommon1
        CFI (cfiPicker317) NoFunction
        CFI (cfiPicker317) Picker
        LCALL	?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_146:
        MOV	R1,?V0 + 1
        LJMP	?Subroutine72 & 0xFFFF
        CFI EndBlock cfiCond315
        CFI EndBlock cfiCond316
        CFI EndBlock cfiPicker317

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond318 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond319 Using cfiCommon0
        CFI (cfiCond319) NoFunction
        CFI (cfiCond319) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond319) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond319) CFA_SP SP+0
        CFI (cfiCond319) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker320 Using cfiCommon1
        CFI (cfiPicker320) NoFunction
        CFI (cfiPicker320) Picker
        LCALL	?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_151:
        MOV	R0,A
        RET
        CFI EndBlock cfiCond318
        CFI EndBlock cfiCond319
        CFI EndBlock cfiPicker320

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond321 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-2
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond322 Using cfiCommon0
        CFI (cfiCond322) NoFunction
        CFI (cfiCond322) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond322) CFA_SP SP+-2
        CFI (cfiCond322) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker323 Using cfiCommon1
        CFI (cfiPicker323) NoFunction
        CFI (cfiPicker323) Picker
        MOV	A,R0
        ADD	A,#(??pgLost & 0xff)
        MOV	DPL,A
        MOV	A,R1
        ADDC	A,#((??pgLost >> 8) & 0xff)
        MOV	DPH,A
        CFI Block cfiCond324 Using cfiCommon0
        CFI (cfiCond324) NoFunction
        CFI (cfiCond324) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond324) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond324) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond324) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond324) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond324) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond324) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond324) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond324) CFA_SP SP+-4
        CFI (cfiCond324) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond325 Using cfiCommon0
        CFI (cfiCond325) NoFunction
        CFI (cfiCond325) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond325) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond325) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond325) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond325) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond325) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond325) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond325) CFA_SP SP+-2
        CFI (cfiCond325) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond326 Using cfiCommon0
        CFI (cfiCond326) NoFunction
        CFI (cfiCond326) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond326) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond326) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond326) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond326) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond326) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond326) CFA_SP SP+0
        CFI (cfiCond326) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond327 Using cfiCommon0
        CFI (cfiCond327) NoFunction
        CFI (cfiCond327) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond327) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond327) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond327) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond327) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond327) CFA_SP SP+-2
        CFI (cfiCond327) CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond328 Using cfiCommon0
        CFI (cfiCond328) NoFunction
        CFI (cfiCond328) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond328) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond328) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond328) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond328) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond328) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond328) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond328) CFA_SP SP+0
        CFI (cfiCond328) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond329 Using cfiCommon0
        CFI (cfiCond329) NoFunction
        CFI (cfiCond329) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond329) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond329) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond329) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond329) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond329) CFA_SP SP+-2
        CFI (cfiCond329) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond330 Using cfiCommon0
        CFI (cfiCond330) NoFunction
        CFI (cfiCond330) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond330) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond330) CFA_SP SP+0
        CFI (cfiCond330) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond331 Using cfiCommon0
        CFI (cfiCond331) NoFunction
        CFI (cfiCond331) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond331) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond331) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond331) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond331) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond331) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond331) CFA_SP SP+0
        CFI (cfiCond331) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond332 Using cfiCommon0
        CFI (cfiCond332) NoFunction
        CFI (cfiCond332) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond332) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond332) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond332) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond332) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond332) CFA_SP SP+-2
        CFI (cfiCond332) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond333 Using cfiCommon0
        CFI (cfiCond333) NoFunction
        CFI (cfiCond333) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond333) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond333) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond333) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond333) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond333) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond333) CFA_SP SP+0
        CFI (cfiCond333) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond334 Using cfiCommon0
        CFI (cfiCond334) NoFunction
        CFI (cfiCond334) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond334) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond334) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond334) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond334) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond334) CFA_SP SP+-2
        CFI (cfiCond334) CFA_XSP16 add(XSP16, 32)
??Subroutine4_0:
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        RET
        CFI EndBlock cfiCond321
        CFI EndBlock cfiCond322
        CFI EndBlock cfiPicker323
        CFI EndBlock cfiCond324
        CFI EndBlock cfiCond325
        CFI EndBlock cfiCond326
        CFI EndBlock cfiCond327
        CFI EndBlock cfiCond328
        CFI EndBlock cfiCond329
        CFI EndBlock cfiCond330
        CFI EndBlock cfiCond331
        CFI EndBlock cfiCond332
        CFI EndBlock cfiCond333
        CFI EndBlock cfiCond334

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond335 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_196
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond336 Using cfiCommon0
        CFI (cfiCond336) NoFunction
        CFI (cfiCond336) Conditional ??CrossCallReturnLabel_195
        CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond336) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond336) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond336) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond336) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond336) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond336) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond336) CFA_SP SP+0
        CFI (cfiCond336) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond337 Using cfiCommon0
        CFI (cfiCond337) NoFunction
        CFI (cfiCond337) Conditional ??CrossCallReturnLabel_194
        CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond337) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond337) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond337) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond337) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond337) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond337) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond337) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond337) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond337) CFA_SP SP+0
        CFI (cfiCond337) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker338 Using cfiCommon1
        CFI (cfiPicker338) NoFunction
        CFI (cfiPicker338) Picker
        LCALL	?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_154:
        MOV	?V0 + 6,#0x0
        MOV	?V0 + 7,#0x0
        SJMP	?Subroutine73
        CFI EndBlock cfiCond335
        CFI EndBlock cfiCond336
        CFI EndBlock cfiCond337
        CFI EndBlock cfiPicker338

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond339 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond340 Using cfiCommon0
        CFI (cfiCond340) NoFunction
        CFI (cfiCond340) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond340) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond340) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond340) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond340) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond340) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond340) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond340) CFA_SP SP+0
        CFI (cfiCond340) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond341 Using cfiCommon0
        CFI (cfiCond341) NoFunction
        CFI (cfiCond341) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond341) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond341) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond341) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond341) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond341) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond341) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond341) CFA_SP SP+0
        CFI (cfiCond341) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond342 Using cfiCommon0
        CFI (cfiCond342) NoFunction
        CFI (cfiCond342) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond342) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond342) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond342) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond342) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond342) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond342) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond342) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond342) CFA_SP SP+0
        CFI (cfiCond342) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker343 Using cfiCommon1
        CFI (cfiPicker343) NoFunction
        CFI (cfiPicker343) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	?V0 + 1,#0x0
        MOV	?V0 + 2,#0x0
        MOV	?V0 + 3,#0x0
        MOV	A,#0xb
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond339
        CFI EndBlock cfiCond340
        CFI EndBlock cfiCond341
        CFI EndBlock cfiCond342
        CFI EndBlock cfiPicker343
// 1457 
// 1458 /*********************************************************************
// 1459  * @fn      osal_nv_read
// 1460  *
// 1461  * @brief   Read data from NV.  This function can be used to read an
// 1462  *          entire item from NV or an element of an item by indexing
// 1463  *          into the item with an offset.  Read data is copied into
// 1464  *          *buf.
// 1465  *
// 1466  * @param   id     - Valid NV item Id.
// 1467  *
// 1468  * @param   ndx - Index offset into item
// 1469  *
// 1470  * @param   len    - Length of data to read.
// 1471  *
// 1472  * @param   *buf  - Data is read into this buffer.
// 1473  *
// 1474  * @return  ZSUCCESS if NV data was copied to the parameter 'buf'.
// 1475  *          Otherwise, NV_OPER_FAILED for failure.
// 1476  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1477 uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
osal_nv_read:
        CFI Block cfiBlock344 Using cfiCommon0
        CFI Function osal_nv_read
// 1478 {
        FUNCALL osal_nv_read, ??findItem
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL osal_nv_read, GetCodeByte
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV	A,#-0x4
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine4_0 & 0xFFFF
// 1479   uint32 addr;
// 1480   uint16 offset;
// 1481   uint8 *ptr = (uint8 *)buf;
??CrossCallReturnLabel_19:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine71 & 0xFFFF
// 1482 
// 1483   if ( id == ZCD_NV_EXTADDR )
??CrossCallReturnLabel_187:
        MOV	A,#0x1
        XRL	A,R2
        JNZ	??osal_nv_read_0
        MOV	A,R3
??osal_nv_read_0:
        JNZ	??osal_nv_read_1
// 1484   {
// 1485     offset = OSAL_NV_IEEE_OFFSET;
        MOV	?V0 + 0,#-0x8
        MOV	?V0 + 1,#0x7
// 1486     findPg = OSAL_NV_IEEE_PAGE;
        MOV	A,#0x3f
        MOV	DPTR,#??findPg
        MOVX	@DPTR,A
// 1487   }
// 1488   else
// 1489   {
// 1490     offset = findItem( id );
// 1491   }
// 1492 
// 1493   if ( offset == OSAL_NV_ITEM_NULL )
// 1494   {
// 1495     return NV_OPER_FAILED;
// 1496   }
// 1497 
// 1498   addr = OSAL_NV_PAGE_TO_ADDR( findPg ) + offset + ndx;
??osal_nv_read_2:
        MOV	DPTR,#??findPg
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL	?L_SHL
        MOV	?V0 + 2,A
        MOV	?V0 + 3,A
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?L_ADD
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV	R0,#?V0 + 4
        MOV	R1,#?V0 + 0
        LCALL	?L_ADD
        SJMP	??CrossCallReturnLabel_189
??osal_nv_read_1:
        ; Setup parameters for call to function findItem
        MOV	DPTR,#(??findItem & 0xffff)
        MOV	A,#((??findItem >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	A,R2
        JNZ	??osal_nv_read_3
        MOV	A,R3
??osal_nv_read_3:
        JNZ	??osal_nv_read_2
        MOV	R1,#0x10
        SJMP	??osal_nv_read_4
// 1499   while ( len-- )
// 1500   {
// 1501     *ptr++ = GetCodeByte( addr++ );
??osal_nv_read_5:
        ; Setup parameters for call to function GetCodeByte
        LCALL	?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_129:
        LCALL	?L_ADD_X
        LCALL	?Subroutine1 & 0xFFFF
// 1502   }
??CrossCallReturnLabel_189:
        LCALL	?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_109:
        JNZ	??osal_nv_read_6
        MOV	A,R1
??osal_nv_read_6:
        JNZ	??osal_nv_read_5
// 1503 
// 1504   return ZSUCCESS;
        MOV	R1,#0x0
??osal_nv_read_4:
        MOV	A,#0x4
        LJMP	??Subroutine75_0 & 0xFFFF
        CFI EndBlock cfiBlock344
// 1505 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond345 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_188
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond346 Using cfiCommon0
        CFI (cfiCond346) NoFunction
        CFI (cfiCond346) Conditional ??CrossCallReturnLabel_189
        CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond346) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond346) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond346) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond346) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond346) CFA_SP SP+0
        CFI (cfiCond346) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker347 Using cfiCommon1
        CFI (cfiPicker347) NoFunction
        CFI (cfiPicker347) Picker
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_157:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_143:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LJMP	?Subroutine71 & 0xFFFF
        CFI EndBlock cfiCond345
        CFI EndBlock cfiCond346
        CFI EndBlock cfiPicker347

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
        CFI Block cfiCond348 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_188
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond349 Using cfiCommon0
        CFI (cfiCond349) NoFunction
        CFI (cfiCond349) Conditional ??CrossCallReturnLabel_156
        CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond349) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond349) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond349) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond349) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond349) CFA_SP SP+0
        CFI (cfiCond349) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond350 Using cfiCommon0
        CFI (cfiCond350) NoFunction
        CFI (cfiCond350) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_189
        CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond350) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond350) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond350) CFA_SP SP+0
        CFI (cfiCond350) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker351 Using cfiCommon1
        CFI (cfiPicker351) NoFunction
        CFI (cfiPicker351) Picker
        LCALL	?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_169:
        MOV	A,R1
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond348
        CFI EndBlock cfiCond349
        CFI EndBlock cfiCond350
        CFI EndBlock cfiPicker351

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine65:
        CFI Block cfiCond352 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_189
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond353 Using cfiCommon0
        CFI (cfiCond353) NoFunction
        CFI (cfiCond353) Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_156
        CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond353) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond353) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond353) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond353) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond353) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond353) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond353) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond353) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond353) CFA_SP SP+0
        CFI (cfiCond353) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond354 Using cfiCommon0
        CFI (cfiCond354) NoFunction
        CFI (cfiCond354) Conditional ??CrossCallReturnLabel_168, ??CrossCallReturnLabel_66
        CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond354) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond354) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond354) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond354) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond354) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond354) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond354) CFA_SP SP+0
        CFI (cfiCond354) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond355 Using cfiCommon0
        CFI (cfiCond355) NoFunction
        CFI (cfiCond355) Conditional ??CrossCallReturnLabel_168, ??CrossCallReturnLabel_67
        CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond355) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond355) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond355) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond355) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond355) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond355) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond355) CFA_SP SP+0
        CFI (cfiCond355) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond356 Using cfiCommon0
        CFI (cfiCond356) NoFunction
        CFI (cfiCond356) Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_188
        CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond356) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond356) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond356) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond356) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond356) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond356) CFA_SP SP+0
        CFI (cfiCond356) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker357 Using cfiCommon1
        CFI (cfiPicker357) NoFunction
        CFI (cfiPicker357) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        RET
        CFI EndBlock cfiCond352
        CFI EndBlock cfiCond353
        CFI EndBlock cfiCond354
        CFI EndBlock cfiCond355
        CFI EndBlock cfiCond356
        CFI EndBlock cfiPicker357

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_1:
        DS 4
        REQUIRE `?<Initializer for __Constant_1>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_1>`:
        DD 1

        END
// 1506 
// 1507 /*********************************************************************
// 1508 *********************************************************************/
// 
// 6 000 bytes in segment BANKED_CODE
//     6 bytes in segment SFR_AN
//     4 bytes in segment XDATA_I
//     4 bytes in segment XDATA_ID
//    15 bytes in segment XDATA_Z
// 
// 6 000 bytes of CODE  memory (+ 4 bytes shared)
//     0 bytes of DATA  memory (+ 6 bytes shared)
//    15 bytes of XDATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
