//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  24/Jan/2013  14:47:43 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\mt\SPIMgr.c                                   /
//    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\Tools\CC2430D /
//                          B\f8wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR     /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DRTR_NWK -DBLINK_LEDS "-DCONST=const        /
//                          __code" -DGENERIC=__generic) -f                  /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f /
//                          8wConfig.cfg (-DSECURE=0                         /
//                          -DDEFAULT_CHANLIST=0x00000800                    /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                     /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\ -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\Source\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\  /
//                          -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ /
//                          \ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ /
//                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                      /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \hal\target\CC2430EB\ -I                         /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \osal\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I            /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢× /
//                          ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 /
//                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\sec\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\stack\sys\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \zmac\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ /
//                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Z /
//                          igBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\services\saddr\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \services\sdata\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\high_level\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf03\ -I     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf03\single_chip\ -D CC2430EB    /
//                          -D ZTOOL_P1 -D MT_TASK -lC                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ -lA        /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\            /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\RouterEB\Obj\ -e       /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\mt\SPIMgr.c"                                 /
//    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\SPIMgr.s51  /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME SPIMgr

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC App_TaskID
        PUBLIC CMD_Token
        PUBLIC FSC_Token
        PUBLIC LEN_Token
        PUBLIC SPIMgr_CalcFCS
        FUNCTION SPIMgr_CalcFCS,0203H
        ARGFRAME XSTACK, 77, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SPIMgr_Init
        FUNCTION SPIMgr_Init,021203H
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC SPIMgr_ProcessZToolData
        FUNCTION SPIMgr_ProcessZToolData,0a1603H
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 79, STACK
        PUBLIC SPIMgr_RegisterTaskID
        FUNCTION SPIMgr_RegisterTaskID,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC SPI_Msg
        PUBLIC `a`
        PUBLIC state
        PUBLIC tempDataLen
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 30, STACK
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME XSTACK, 77, STACK
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME XSTACK, 77, STACK
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME XSTACK, 77, STACK
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME XSTACK, 77, STACK
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME XSTACK, 77, STACK
        EXTERN Print
        FUNCTION Print,0202H
        ARGFRAME XSTACK, 79, STACK
        EXTERN UartTX_Send_String
        FUNCTION UartTX_Send_String,0202H
        ARGFRAME XSTACK, 77, STACK
        EXTERN MT_TaskID
        EXTERN Uart_PP_Flag
        EXTERN Uart_Rx_Flag

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mt\SPIMgr.c
//    1 /***************************************************************************************************
//    2     Filename:       SPIMgr.c
//    3     Revised:        $Date: 2006-10-09 17:35:06 -0700 (Mon, 09 Oct 2006) $
//    4     Revision:       $Revision: 12239 $
//    5 
//    6     Description:
//    7        This module handles anything dealing with the serial port.
//    8 
//    9     Copyright (c) 2006 by Texas Instruments, Inc.
//   10     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   11     derivative works, modify, distribute, perform, display or sell this
//   12     software and/or its documentation for any purpose is prohibited
//   13     without the express written consent of Texas Instruments, Inc.
//   14 ***************************************************************************************************/
//   15 
//   16 
//   17 /***************************************************************************************************
//   18  *                                           INCLUDES
//   19  ***************************************************************************************************/
//   20 #include "ZComDef.h"
//   21 #include "OSAL.h"
//   22 #include "hal_uart.h"
//   23 #include "MTEL.h"
//   24 #include "SPIMgr.h"
//   25 #include "OSAL_Memory.h"
//   26 #include "wxl_uart.h"
//   27 #include "Menu.h"
//   28 
//   29 
//   30 /***************************************************************************************************
//   31  *                                            MACROS
//   32  ***************************************************************************************************/
//   33 
//   34 /***************************************************************************************************
//   35  *                                           CONSTANTS
//   36  ***************************************************************************************************/
//   37 
//   38 /* State values for ZTool protocal */
//   39 #define SOP_STATE      0x00
//   40 #define CMD_STATE1     0x01
//   41 #define CMD_STATE2     0x02
//   42 #define LEN_STATE      0x03
//   43 #define DATA_STATE     0x04
//   44 #define FCS_STATE      0x05
//   45 
//   46 /***************************************************************************************************
//   47  *                                            TYPEDEFS
//   48  ***************************************************************************************************/
//   49 
//   50 /***************************************************************************************************
//   51  *                                         GLOBAL VARIABLES
//   52  ***************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   53 byte App_TaskID;
App_TaskID:
        DS 1
//   54 
//   55 /* ZTool protocal parameters */
//   56 
//   57 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   58 uint8 state;
state:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   59 uint8  CMD_Token[2];
CMD_Token:
        DS 2

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   60 uint8  LEN_Token;
LEN_Token:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   61 uint8  FSC_Token;
FSC_Token:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   62 mtOSALSerialData_t  *SPI_Msg;
SPI_Msg:
        DS 2

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   63 uint8  tempDataLen;
tempDataLen:
        DS 1
//   64 #endif //ZTOOL
//   65 
//   66 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//   67 uint16  SPIMgr_MaxZAppBufLen;
//   68 bool    SPIMgr_ZAppRxStatus;
//   69 #endif
//   70 
//   71 
//   72 /***************************************************************************************************
//   73  *                                          LOCAL FUNCTIONS
//   74  ***************************************************************************************************/
//   75 
//   76 /***************************************************************************************************
//   77  * @fn      SPIMgr_Init
//   78  *
//   79  * @brief
//   80  *
//   81  * @param   None
//   82  *
//   83  * @return  None
//   84 ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   85 void SPIMgr_Init ()
SPIMgr_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SPIMgr_Init
//   86 {
        FUNCALL SPIMgr_Init, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 30, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 30
        MOV	A,#-0x1e
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//   87   halUARTCfg_t uartConfig;
//   88 
//   89   /* Initialize APP ID */
//   90   App_TaskID = 0;
        CLR	A
        MOV	DPTR,#App_TaskID
        MOVX	@DPTR,A
//   91 
//   92   /* UART Configuration */
//   93   uartConfig.configured           = TRUE;
        MOV	A,#0x1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//   94   uartConfig.baudRate             = SPI_MGR_DEFAULT_BAUDRATE;
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x6
        MOVX	@DPTR,A
//   95   uartConfig.flowControl          = SPI_MGR_DEFAULT_OVERFLOW;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
//   96   uartConfig.flowControlThreshold = SPI_MGR_DEFAULT_THRESHOLD;
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x30
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//   97   uartConfig.rx.maxBufSize        = SPI_MGR_DEFAULT_MAX_RX_BUFF;
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOV	A,#-0x80
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//   98   uartConfig.tx.maxBufSize        = SPI_MGR_DEFAULT_MAX_TX_BUFF;
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        MOV	A,#-0x80
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//   99   uartConfig.idleTimeout          = SPI_MGR_DEFAULT_IDLE_TIMEOUT;
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x6
        MOVX	@DPTR,A
//  100   uartConfig.intEnable            = TRUE;
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x1
        MOVX	@DPTR,A
//  101 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  102   uartConfig.callBackFunc         = SPIMgr_ProcessZToolData;
        MOV	A,#0x1b
        LCALL	?XSTACK_DISP0_8
        MOV	A,#(SPIMgr_ProcessZToolData & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((SPIMgr_ProcessZToolData >> 8) & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((SPIMgr_ProcessZToolData >> 16) & 0xff)
        MOVX	@DPTR,A
//  103 #elif defined (ZAPP_P1) || defined (ZAPP_P2)
//  104   uartConfig.callBackFunc         = SPIMgr_ProcessZAppData;
//  105 #else
//  106   uartConfig.callBackFunc         = NULL;
//  107 #endif
//  108 
//  109   /* Start UART */
//  110 #if defined (SPI_MGR_DEFAULT_PORT)
//  111   HalUARTOpen (SPI_MGR_DEFAULT_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	R1,#0x0
        MOV	DPTR,#(HalUARTOpen & 0xffff)
        MOV	A,#((HalUARTOpen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  112 #else
//  113   /* Silence IAR compiler warning */
//  114   (void)uartConfig;
//  115 #endif
//  116 
//  117   /* Initialize for ZApp */
//  118 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//  119   /* Default max bytes that ZAPP can take */
//  120   SPIMgr_MaxZAppBufLen  = 1;
//  121   SPIMgr_ZAppRxStatus   = SPI_MGR_ZAPP_RX_READY;
//  122 #endif
//  123 
//  124 
//  125 }
        MOV	A,#0x1e
        LCALL	?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock1
//  126 
//  127 /***************************************************************************************************
//  128  * @fn      MT_SerialRegisterTaskID
//  129  *
//  130  * @brief
//  131  *
//  132  *   This function registers the taskID of the application so it knows
//  133  *   where to send the messages whent they come in.
//  134  *
//  135  * @param   void
//  136  *
//  137  * @return  void
//  138  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  139 void SPIMgr_RegisterTaskID( byte taskID )
SPIMgr_RegisterTaskID:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SPIMgr_RegisterTaskID
//  140 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  141   App_TaskID = taskID;
        MOV	A,R1
        MOV	DPTR,#App_TaskID
        MOVX	@DPTR,A
//  142 }
        SJMP	?Subroutine8
        CFI EndBlock cfiBlock2
//  143 
//  144 /***************************************************************************************************
//  145  * @fn      SPIMgr_CalcFCS
//  146  *
//  147  * @brief
//  148  *
//  149  *   Calculate the FCS of a message buffer by XOR'ing each byte.
//  150  *   Remember to NOT include SOP and FCS fields, so start at the CMD
//  151  *   field.
//  152  *
//  153  * @param   byte *msg_ptr - message pointer
//  154  * @param   byte len - length (in bytes) of message
//  155  *
//  156  * @return  result byte
//  157  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  158 byte SPIMgr_CalcFCS( uint8 *msg_ptr, uint8 len )
SPIMgr_CalcFCS:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SPIMgr_CalcFCS
//  159 {
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R1
        MOV	R4,A
//  160   byte x;
//  161   byte xorResult;
//  162 
//  163   xorResult = 0;
        MOV	R1,#0x0
//  164 
//  165   for ( x = 0; x < len; x++, msg_ptr++ )
        MOV	R5,#0x0
        SJMP	??SPIMgr_CalcFCS_0
//  166     xorResult = xorResult ^ *msg_ptr;
??SPIMgr_CalcFCS_1:
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        XCH	A,R1
        XRL	A,R1
        MOV	R1,A
        INC	R5
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
??SPIMgr_CalcFCS_0:
        MOV	A,R5
        CLR	C
        SUBB	A,R4
        JC	??SPIMgr_CalcFCS_1
//  167 
//  168   return ( xorResult );
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  169 }
//  170 
//  171 
//  172 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//  173 /***************************************************************************************************
//  174  * @fn      SPIMgr_ProcessZToolRxData
//  175  *
//  176  * @brief   | SOP | CMD  |   Data Length   | FSC  |
//  177  *          |  1  |  2   |       1         |  1   |
//  178  *
//  179  *          Parses the data and determine either is SPI or just simply serial data
//  180  *          then send the data to correct place (MT or APP)
//  181  *
//  182  * @param   pBuffer  - pointer to the buffer that contains the data
//  183  *          length   - length of the buffer
//  184  *
//  185  *
//  186  * @return  None
//  187  ***************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  188 int a = 0;
`a`:
        DS 2
//  189 extern int Uart_Rx_Flag;
//  190 extern int Uart_PP_Flag;
//  191 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  192 void SPIMgr_ProcessZToolData ( uint8 port, uint8 event )
SPIMgr_ProcessZToolData:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SPIMgr_ProcessZToolData
//  193 {
        FUNCALL SPIMgr_ProcessZToolData, osal_msg_deallocate
        LOCFRAME XSTACK, 77, STACK
        ARGFRAME XSTACK, 77, STACK
        FUNCALL SPIMgr_ProcessZToolData, Hal_UART_RxBufLen
        LOCFRAME XSTACK, 77, STACK
        ARGFRAME XSTACK, 77, STACK
        FUNCALL SPIMgr_ProcessZToolData, HalUARTRead
        LOCFRAME XSTACK, 77, STACK
        ARGFRAME XSTACK, 77, STACK
        FUNCALL SPIMgr_ProcessZToolData, osal_msg_allocate
        LOCFRAME XSTACK, 77, STACK
        ARGFRAME XSTACK, 77, STACK
        FUNCALL SPIMgr_ProcessZToolData, SPIMgr_CalcFCS
        LOCFRAME XSTACK, 77, STACK
        ARGFRAME XSTACK, 77, STACK
        FUNCALL SPIMgr_ProcessZToolData, osal_msg_send
        LOCFRAME XSTACK, 77, STACK
        ARGFRAME XSTACK, 77, STACK
        FUNCALL SPIMgr_ProcessZToolData, Print
        LOCFRAME XSTACK, 79, STACK
        ARGFRAME XSTACK, 79, STACK
        FUNCALL SPIMgr_ProcessZToolData, UartTX_Send_String
        LOCFRAME XSTACK, 77, STACK
        ARGFRAME XSTACK, 77, STACK
        FUNCALL SPIMgr_ProcessZToolData, UartTX_Send_String
        LOCFRAME XSTACK, 77, STACK
        ARGFRAME XSTACK, 77, STACK
        FUNCALL SPIMgr_ProcessZToolData, UartTX_Send_String
        LOCFRAME XSTACK, 77, STACK
        ARGFRAME XSTACK, 77, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 67
        MOV	A,#-0x43
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 77)
//  194   uint8 Uart_Rx_Data[50];
//  195   uint8 Uart_PP_cpy[] = "please send data";
        MOV	A,#0x32
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	DPH,#((`?<Constant "please send data">` >> 8) & 0xff)
        MOV	DPL,#(`?<Constant "please send data">` & 0xff)
        MOV	A,#0x11
        LCALL	?MOVE_LONG8_XDATA_XDATA
//  196   a = 0;
        MOV	DPTR,#`a`
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  197   /* Verify events */
//  198   if (event == HAL_UART_TX_FULL)
        MOV	A,#0x8
        XRL	A,R2
        JNZ	$+5
        LJMP	??SPIMgr_ProcessZToolData_0 & 0xFFFF
//  199   {
//  200     // Do something when TX if full
//  201     return;
//  202   }
//  203 
//  204   if (event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
        MOV	A,#0x7
        ANL	A,R2
        JNZ	??SPIMgr_ProcessZToolData_1
        LJMP	??SPIMgr_ProcessZToolData_0 & 0xFFFF
//  205   {
//  206     while (Hal_UART_RxBufLen(SPI_MGR_DEFAULT_PORT))
//  207     {
//  208       HalUARTRead (SPI_MGR_DEFAULT_PORT, &Uart_Rx_Data[a], 1);
//  209 
//  210 
//  211     switch (state)
//  212       {
//  213         case SOP_STATE:
//  214           if (Uart_Rx_Data[a] == SOP_VALUE)
//  215             state = CMD_STATE1;
//  216           break;
//  217 
//  218         case CMD_STATE1:
//  219           CMD_Token[0] = Uart_Rx_Data[a];
//  220           state = CMD_STATE2;
//  221           break;
//  222 
//  223         case CMD_STATE2:
//  224           CMD_Token[1] = Uart_Rx_Data[a];
//  225           state = LEN_STATE;
//  226           break;
//  227 
//  228         case LEN_STATE:
//  229           LEN_Token = Uart_Rx_Data[a];
//  230           if (Uart_Rx_Data[a] == 0)
//  231             state = FCS_STATE;
//  232           else
//  233             state = DATA_STATE;
//  234 
//  235           tempDataLen = 0;
//  236 
//  237           // Allocate memory for the data
//  238           SPI_Msg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) + 2+1+LEN_Token );
//  239 
//  240           if (SPI_Msg)
//  241           {
//  242             // Fill up what we can
//  243             SPI_Msg->hdr.event = CMD_SERIAL_MSG;
//  244             SPI_Msg->msg = (uint8*)(SPI_Msg+1);
//  245             SPI_Msg->msg[0] = CMD_Token[0];
//  246             SPI_Msg->msg[1] = CMD_Token[1];
//  247             SPI_Msg->msg[2] = LEN_Token;
//  248           }
//  249           else
//  250           {
//  251             state = SOP_STATE;
//  252             return;
//  253           }
//  254 
//  255           break;
//  256 
//  257         case DATA_STATE:
//  258             SPI_Msg->msg[3 + tempDataLen++] = Uart_Rx_Data[a];
//  259             if ( tempDataLen == LEN_Token )
//  260               state = FCS_STATE;
//  261           break;
//  262 
//  263         case FCS_STATE:
//  264 
//  265           FSC_Token = Uart_Rx_Data[a];
//  266 
//  267           //Make sure it's correct
//  268           if ((SPIMgr_CalcFCS ((uint8*)&SPI_Msg->msg[0], 2 + 1 + LEN_Token) == FSC_Token))
//  269           {
//  270             osal_msg_send( MT_TaskID, (byte *)SPI_Msg );
//  271           }
//  272           else
//  273           {
//  274             // deallocate the msg
//  275             osal_msg_deallocate ( (uint8 *)SPI_Msg);
??SPIMgr_ProcessZToolData_2:
        ; Setup parameters for call to function osal_msg_deallocate
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#(osal_msg_deallocate & 0xffff)
        MOV	A,#((osal_msg_deallocate >> 16) & 0xff)
??SPIMgr_ProcessZToolData_3:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  276           }
//  277 
//  278           //Reset the state, send or discard the buffers at this point
//  279           state = SOP_STATE;
        CLR	A
??SPIMgr_ProcessZToolData_4:
        MOV	DPTR,#state
??SPIMgr_ProcessZToolData_5:
        MOVX	@DPTR,A
//  280 
//  281           break;
//  282 
//  283         default:
//  284          break;
//  285 
//  286       }
//  287     a++;
??SPIMgr_ProcessZToolData_6:
        MOV	DPTR,#`a`
        MOVX	A,@DPTR
        ADD	A,#0x1
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOVX	@DPTR,A
??SPIMgr_ProcessZToolData_1:
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV	R1,#0x0
        MOV	DPTR,#(Hal_UART_RxBufLen & 0xffff)
        MOV	A,#((Hal_UART_RxBufLen >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        JNZ	??SPIMgr_ProcessZToolData_7
        MOV	A,R3
??SPIMgr_ProcessZToolData_7:
        JNZ	$+5
        LJMP	??SPIMgr_ProcessZToolData_8 & 0xFFFF
        ; Setup parameters for call to function HalUARTRead
        MOV	R4,#0x1
        MOV	R5,#0x0
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV	R2,A
        MOV	A,DPH
        ADDC	A,R1
        MOV	R3,A
        MOV	R1,#0x0
        MOV	DPTR,#(HalUARTRead & 0xffff)
        MOV	A,#((HalUARTRead >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#state
        MOVX	A,@DPTR
        LCALL	?UC_SWITCH_DENSE
`?<Jumptable for SPIMgr_ProcessZToolData>_0`:
        DB        0
        DB        5
        DW        ??SPIMgr_ProcessZToolData_6
        DW        ??SPIMgr_ProcessZToolData_9
        DW        ??SPIMgr_ProcessZToolData_10
        DW        ??SPIMgr_ProcessZToolData_11
        DW        ??SPIMgr_ProcessZToolData_12
        DW        ??SPIMgr_ProcessZToolData_13
        DW        ??SPIMgr_ProcessZToolData_14
??SPIMgr_ProcessZToolData_9:
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        XRL	A,#0x2
        JNZ	??SPIMgr_ProcessZToolData_6
        MOV	A,#0x1
        SJMP	??SPIMgr_ProcessZToolData_4
??SPIMgr_ProcessZToolData_10:
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV	DPTR,#CMD_Token
        MOVX	@DPTR,A
        MOV	A,#0x2
        SJMP	??SPIMgr_ProcessZToolData_4
??SPIMgr_ProcessZToolData_11:
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV	DPTR,#(CMD_Token + 1)
        MOVX	@DPTR,A
        MOV	A,#0x3
        SJMP	??SPIMgr_ProcessZToolData_4
??SPIMgr_ProcessZToolData_12:
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV	DPTR,#LEN_Token
        MOVX	@DPTR,A
        JNZ	??SPIMgr_ProcessZToolData_15
        MOV	A,#0x5
        SJMP	??SPIMgr_ProcessZToolData_16
??SPIMgr_ProcessZToolData_15:
        MOV	A,#0x4
??SPIMgr_ProcessZToolData_16:
        MOV	DPTR,#state
        MOVX	@DPTR,A
        CLR	A
        MOV	DPTR,#tempDataLen
        MOVX	@DPTR,A
        ; Setup parameters for call to function osal_msg_allocate
        MOV	DPTR,#LEN_Token
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	A,#0x7
        ADD	A,R0
        MOV	R2,A
        CLR	A
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#SPI_Msg
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	DPTR,#SPI_Msg
        MOVX	A,@DPTR
        JNZ	??SPIMgr_ProcessZToolData_17
        INC	DPTR
        MOVX	A,@DPTR
??SPIMgr_ProcessZToolData_17:
        JZ	??SPIMgr_ProcessZToolData_18
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV	A,#0x1
        MOVX	@DPTR,A
        MOV	DPTR,#SPI_Msg
        MOVX	A,@DPTR
        ADD	A,#0x4
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        LCALL	?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        MOV	DPTR,#CMD_Token
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_19:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	DPTR,#(CMD_Token + 1)
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        LCALL	?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_6:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	DPTR,#LEN_Token
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        LCALL	?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_7:
        INC	DPTR
        POP	A
        CFI CFA_SP SP+0
        LJMP	??SPIMgr_ProcessZToolData_5 & 0xFFFF
??SPIMgr_ProcessZToolData_18:
        CLR	A
        MOV	DPTR,#state
        MOVX	@DPTR,A
        LJMP	??SPIMgr_ProcessZToolData_0 & 0xFFFF
??SPIMgr_ProcessZToolData_13:
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_4:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	DPTR,#tempDataLen
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_13:
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	DPL,R2
        MOV	DPH,A
        INC	DPTR
        INC	DPTR
        INC	DPTR
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	DPTR,#tempDataLen
        MOVX	A,@DPTR
        INC	A
        MOVX	@DPTR,A
        MOV	R2,A
        MOV	DPTR,#LEN_Token
        MOVX	A,@DPTR
        XRL	A,R2
        JZ	$+5
        LJMP	??SPIMgr_ProcessZToolData_6 & 0xFFFF
        MOV	A,#0x5
        LJMP	??SPIMgr_ProcessZToolData_4 & 0xFFFF
??SPIMgr_ProcessZToolData_14:
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV	DPTR,#FSC_Token
        MOVX	@DPTR,A
        ; Setup parameters for call to function SPIMgr_CalcFCS
        MOV	DPTR,#LEN_Token
        MOVX	A,@DPTR
        ADD	A,#0x3
        MOV	R1,A
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#(SPIMgr_CalcFCS & 0xffff)
        MOV	A,#((SPIMgr_CalcFCS >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R2,A
        MOV	DPTR,#FSC_Token
        MOVX	A,@DPTR
        XRL	A,R2
        MOV	DPTR,#SPI_Msg
        JZ	$+5
        LJMP	??SPIMgr_ProcessZToolData_2 & 0xFFFF
        ; Setup parameters for call to function osal_msg_send
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#MT_TaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        LJMP	??SPIMgr_ProcessZToolData_3 & 0xFFFF
//  288 
//  289     }
//  290      if(Uart_Rx_Flag == Open)
??SPIMgr_ProcessZToolData_8:
        MOV	DPTR,#Uart_Rx_Flag
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??SPIMgr_ProcessZToolData_19
        INC	DPTR
        MOVX	A,@DPTR
??SPIMgr_ProcessZToolData_19:
        JNZ	??SPIMgr_ProcessZToolData_20
//  291      {
//  292        Uart_Rx_Data[a] = '\0';
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV	DPL,A
        MOV	A,DPH
        ADDC	A,R1
        MOV	DPH,A
        CLR	A
        MOVX	@DPTR,A
//  293        Print(6,40,Uart_Rx_Data,1);
        ; Setup parameters for call to function Print
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 79)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x28
        MOV	R1,#0x6
        MOV	DPTR,#(Print & 0xffff)
        MOV	A,#((Print >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 77)
        SJMP	??SPIMgr_ProcessZToolData_0
//  294      }
//  295     else if(Uart_PP_Flag == Open)
??SPIMgr_ProcessZToolData_20:
        MOV	DPTR,#Uart_PP_Flag
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??SPIMgr_ProcessZToolData_21
        INC	DPTR
        MOVX	A,@DPTR
??SPIMgr_ProcessZToolData_21:
        JNZ	??SPIMgr_ProcessZToolData_0
//  296     {
//  297       if((Uart_PP_cpy[7] == Uart_Rx_Data[7])&&(Uart_PP_cpy[0] == Uart_Rx_Data[0])&&(Uart_PP_cpy[15] == Uart_Rx_Data[15]))
        MOV	A,#0x39
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,#0x7
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,R2
        JNZ	??SPIMgr_ProcessZToolData_22
        MOV	A,#0x32
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        XRL	A,R2
        JNZ	??SPIMgr_ProcessZToolData_22
        MOV	A,#0x41
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,#0xf
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        XRL	A,R2
        JNZ	??SPIMgr_ProcessZToolData_22
//  298       {
//  299         UartTX_Send_String("hello Cdwxl\n",12);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0xc
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "hello Cdwxl\\n">` & 0xff)
        MOV	R3,#((`?<Constant "hello Cdwxl\\n">` >> 8) & 0xff)
        MOV	DPTR,#(UartTX_Send_String & 0xffff)
        SJMP	??SPIMgr_ProcessZToolData_23
//  300       }
//  301       else
//  302       {
//  303         UartTX_Send_String("Command error!\n",15);
??SPIMgr_ProcessZToolData_22:
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0xf
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "Command error!\\n">` & 0xff)
        MOV	R3,#((`?<Constant "Command error!\\n">` >> 8) & 0xff)
        MOV	DPTR,#(UartTX_Send_String & 0xffff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  304         UartTX_Send_String("Command:please send data\n",26);
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0x1a
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "Command:please send d...">` & 0xff)
        MOV	R3,#((`?<Constant "Command:please send d...">` >> 8) & 0xff)
??SPIMgr_ProcessZToolData_23:
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
??SPIMgr_ProcessZToolData_0:
        MOV	A,#0x43
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  305       }
//  306 
//  307     }
//  308 
//  309   }
//  310 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV	DPTR,#SPI_Msg
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R2
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+-1
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_17:
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_10
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+-1
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_7
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+-1
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_11
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_21:
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_15:
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_0
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_5
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_4
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_1
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_2
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_3
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_8
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV	DPTR,#`a`
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,DPL
        ADD	A,R0
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+-1
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL	??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_20:
        INC	DPTR
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_6
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+-1
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_7
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+-1
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_11
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_10
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+-1
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOV	DPTR,#SPI_Msg
        MOVX	A,@DPTR
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_6
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+-1
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_7
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+-1
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+-1
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 77)
??Subroutine7_0:
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 77)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV	DPL,A
        MOV	A,DPH
        ADDC	A,R1
        MOV	DPH,A
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "please send data"`:
        DB "please send data"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "hello Cdwxl\\n">>`:
        DB "hello Cdwxl\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Command error!\\n"`:
        DB "Command error!\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Command:please se`:
        DB "Command:please send data\012"

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "please send data">`:
        DS 17
        REQUIRE `?<Initializer for <Constant "please send data"`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "hello Cdwxl\\n">`:
        DS 13
        REQUIRE `?<Initializer for <Constant "hello Cdwxl\\n">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Command error!\\n">`:
        DS 16
        REQUIRE `?<Initializer for <Constant "Command error!\\n"`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Command:please send d...">`:
        DS 26
        REQUIRE `?<Initializer for <Constant "Command:please se`
        REQUIRE __INIT_XDATA_I

        END
//  311 #endif //ZTOOL
//  312 
//  313 #if defined (ZAPP_P1) || defined (ZAPP_P2)
//  314 /***************************************************************************************************
//  315  * @fn      SPIMgr_ProcessZAppRxData
//  316  *
//  317  * @brief   | SOP | CMD  |   Data Length   | FSC  |
//  318  *          |  1  |  2   |       1         |  1   |
//  319  *
//  320  *          Parses the data and determine either is SPI or just simply serial data
//  321  *          then send the data to correct place (MT or APP)
//  322  *
//  323  * @param   pBuffer  - pointer to the buffer that contains the data
//  324  *          length   - length of the buffer
//  325  *
//  326  *
//  327  * @return  None
//  328  ***************************************************************************************************/
//  329 void SPIMgr_ProcessZAppData ( uint8 port, uint8 event )
//  330 {
//  331 
//  332   osal_event_hdr_t  *msg_ptr;
//  333   uint16 length = 0;
//  334   uint16 rxBufLen  = Hal_UART_RxBufLen(SPI_MGR_DEFAULT_PORT);
//  335 
//  336   /*
//  337      If maxZAppBufferLength is 0 or larger than current length
//  338      the entire length of the current buffer is returned.
//  339   */
//  340   if ((SPIMgr_MaxZAppBufLen != 0) && (SPIMgr_MaxZAppBufLen <= rxBufLen))
//  341   {
//  342     length = SPIMgr_MaxZAppBufLen;
//  343   }
//  344   else
//  345   {
//  346     length = rxBufLen;
//  347   }
//  348 
//  349   /* Verify events */
//  350   if (event == HAL_UART_TX_FULL)
//  351   {
//  352     // Do something when TX if full
//  353     return;
//  354   }
//  355 
//  356   if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
//  357   {
//  358     if ( App_TaskID )
//  359     {
//  360       /*
//  361          If Application is ready to receive and there is something
//  362          in the Rx buffer then send it up
//  363       */
//  364       if ((SPIMgr_ZAppRxStatus == SPI_MGR_ZAPP_RX_READY ) && (length != 0))
//  365       {
//  366         /* Disable App flow control until it processes the current data */
//  367          SPIMgr_AppFlowControl ( SPI_MGR_ZAPP_RX_NOT_READY );
//  368 
//  369         /* 2 more bytes are added, 1 for CMD type, other for length */
//  370         msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
//  371         if ( msg_ptr )
//  372         {
//  373           msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
//  374           msg_ptr->status = length;
//  375 
//  376           /* Read the data of Rx buffer */
//  377           HalUARTRead( SPI_MGR_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
//  378 
//  379           /* Send the raw data to application...or where ever */
//  380           osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
//  381         }
//  382       }
//  383     }
//  384   }
//  385 }
//  386 
//  387 /***************************************************************************************************
//  388  * @fn      SPIMgr_ZAppBufferLengthRegister
//  389  *
//  390  * @brief
//  391  *
//  392  * @param   maxLen - Max Length that the application wants at a time
//  393  *
//  394  * @return  None
//  395  *
//  396  ***************************************************************************************************/
//  397 void SPIMgr_ZAppBufferLengthRegister ( uint16 maxLen )
//  398 {
//  399   /* If the maxLen is larger than the RX buff, something is not right */
//  400   if (maxLen <= SPI_MGR_DEFAULT_MAX_RX_BUFF)
//  401     SPIMgr_MaxZAppBufLen = maxLen;
//  402   else
//  403     SPIMgr_MaxZAppBufLen = 1; /* default is 1 byte */
//  404 }
//  405 
//  406 /***************************************************************************************************
//  407  * @fn      SPIMgr_AppFlowControl
//  408  *
//  409  * @brief
//  410  *
//  411  * @param   status - ready to send or not
//  412  *
//  413  * @return  None
//  414  *
//  415  ***************************************************************************************************/
//  416 void SPIMgr_AppFlowControl ( bool status )
//  417 {
//  418 
//  419   /* Make sure only update if needed */
//  420   if (status != SPIMgr_ZAppRxStatus )
//  421   {
//  422     SPIMgr_ZAppRxStatus = status;
//  423   }
//  424 
//  425   /* App is ready to read again, ProcessZAppData have to be triggered too */
//  426   if (status == SPI_MGR_ZAPP_RX_READY)
//  427   {
//  428     SPIMgr_ProcessZAppData ( SPI_MGR_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
//  429   }
//  430 
//  431 }
//  432 
//  433 #endif //ZAPP
//  434 
//  435 /***************************************************************************************************
//  436 ***************************************************************************************************/
// 
// 867 bytes in segment BANKED_CODE
//  72 bytes in segment XDATA_I
//  72 bytes in segment XDATA_ID
//  11 bytes in segment XDATA_Z
// 
// 939 bytes of CODE  memory
//  83 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
