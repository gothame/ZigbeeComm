//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  24/Jan/2013  14:47:52 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\Source\SampleApp.c                 /
//    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\Tools\CC2430D /
//                          B\f8wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR     /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DRTR_NWK -DBLINK_LEDS "-DCONST=const        /
//                          __code" -DGENERIC=__generic) -f                  /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f /
//                          8wConfig.cfg (-DSECURE=0                         /
//                          -DDEFAULT_CHANLIST=0x00000800                    /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                     /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\ -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\Source\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\  /
//                          -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ /
//                          \ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ /
//                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                      /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \hal\target\CC2430EB\ -I                         /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \osal\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I            /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢× /
//                          ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 /
//                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\sec\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\stack\sys\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \zmac\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ /
//                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Z /
//                          igBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\services\saddr\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \services\sdata\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\high_level\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf03\ -I     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf03\single_chip\ -D CC2430EB    /
//                          -D ZTOOL_P1 -D MT_TASK -lC                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ -lA        /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\            /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\RouterEB\Obj\ -e       /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\Source\SampleApp.c                 /
//    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\SampleApp.s /
//                          51                                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC JoinNode
        PUBLIC RfTx
        PUBLIC RxBuf
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,0a1203H
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC SendData
        FUNCTION SendData,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC TxBuf
        PUBLIC clear
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME XSTACK, 11, STACK
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME XSTACK, 11, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME XSTACK, 11, STACK
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN UartTX_Send_String
        FUNCTION UartTX_Send_String,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME XSTACK, 23, STACK

// E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /*********************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2007-05-31 15:56:04 -0700 (Thu, 31 May 2007) $
//    4   Revision:       $Revision: 14490 $
//    5 
//    6   Description:
//    7 				  - Sample Application (no Profile).
//    8 				
//    9           This application isn't intended to do anything useful,
//   10           it is intended to be a simple example of an application's
//   11           structure.
//   12 
//   13           This application sends it's messages either as broadcast or
//   14           broadcast filtered group messages.  The other (more normal)
//   15           message addressing is unicast.  Most of the other
//   16           sample applications are written to support the unicast
//   17           message model.
//   18 
//   19           Key control:
//   20             SW1:  Sends a flash command to all devices in Group 1.
//   21             SW2:  Adds/Removes (toggles) this device in and out
//   22                   of Group 1.  This will enable and disable the
//   23                   reception of the flash command.
//   24 
//   25   Notes:
//   26 
//   27   Copyright (c) 2007 by Texas Instruments, Inc.
//   28   All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   29   derivative works, modify, distribute, perform, display or sell this
//   30   software and/or its documentation for any purpose is prohibited
//   31   without the express written consent of Texas Instruments, Inc.
//   32 *********************************************************************/
//   33 
//   34 /*********************************************************************
//   35  * INCLUDES
//   36  */
//   37 #include "OSAL.h"
//   38 #include "ZGlobals.h"
//   39 #include "AF.h"
//   40 #include "aps_groups.h"
//   41 #include "ZDApp.h"
//   42 
//   43 #include "SampleApp.h"
//   44 #include "SampleAppHw.h"
//   45 
//   46 #include "OnBoard.h"
//   47 
//   48 /* HAL */
//   49 #include "hal_lcd.h"
//   50 #include "hal_led.h"
//   51 #include "hal_key.h"
//   52 
//   53 #include "string.h"
//   54 
//   55 /*********************************************************************
//   56  * MACROS
//   57  */
//   58 
//   59 /*********************************************************************
//   60  * CONSTANTS
//   61  */
//   62 
//   63 /*********************************************************************
//   64  * TYPEDEFS
//   65  */
//   66 
//   67 /*********************************************************************
//   68  * GLOBAL VARIABLES
//   69  */
//   70 
//   71 // This list should be filled with Application specific Cluster IDs.
//   72 
//   73 struct join
//   74 {
//   75 	uint8 RfdCount ;		//RFD¼ÆÊýÆ÷
//   76 	uint8 RouterCount;	//Â·ÓÉÆ÷¼ÆÊýÆ÷
//   77 	uint8 RfdAddr[20][10];	//´æ´¢RFD½ÚµãµØÖ·ÓÃ£¬¸ßÁ½Î»ÎªÍøÂçµØÖ·£¬µÍ8Î»ÎªÎïÀíµØÖ·
//   78 	uint8 RouterAddr[20][10];//´æ´¢RFD½ÚµãµØÖ·ÓÃ£¬¸ßÁ½Î»ÎªÍøÂçµØÖ·£¬µÍ8Î»ÎªÎïÀíµØÖ·

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   79 }JoinNode;
JoinNode:
        DS 402
//   80 
//   81 union j{
//   82   uint8 TxBuf[66];
//   83   struct RFTXBUF
//   84   {
//   85         uint8 HeadCom[3]; //ÃüÁîÍ·
//   86         uint8 Node_type[3];
//   87         uint8 IEEE[8];
//   88         uint16 Saddr;
//   89         uint8 DataBuf[50];  //Êý¾Ý»º³åÇø
//   90   }TXDATA;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   91 }RfTx;//ÎÞÏß·¢ËÍ»º³åÇø
RfTx:
        DS 66

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "Group 1">`:
        DS 8
        REQUIRE `?<Initializer for <Constant "Group 1">>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
`?<Constant "haha!Rou jiond succeed\\n">`:
        DS 24
        REQUIRE `?<Initializer for <Constant "haha!Rou jiond su`
        REQUIRE __INIT_XDATA_I
//   92 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   93 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DS 4
        REQUIRE `?<Initializer for SampleApp_ClusterList>`
        REQUIRE __INIT_XDATA_I
//   94 {
//   95   SAMPLEAPP_PERIODIC_CLUSTERID,
//   96   SAMPLEAPP_FLASH_CLUSTERID
//   97 };
//   98 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   99 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DS 12
        REQUIRE `?<Initializer for SampleApp_SimpleDesc>`
        REQUIRE __INIT_XDATA_I
//  100 {
//  101   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  102   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  103   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  104   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  105   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  106   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  107   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  108   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  109   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  110 };
//  111 
//  112 // This is the Endpoint/Interface description.  It is defined here, but
//  113 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  114 // in the structure here and make it a "const" (in code space).  The
//  115 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  116 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
//  117 
//  118 /*********************************************************************
//  119  * EXTERNAL VARIABLES
//  120  */
//  121 
//  122 /*********************************************************************
//  123  * EXTERNAL FUNCTIONS
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * LOCAL VARIABLES
//  128  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  129 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
//  130                           // This variable will be received when
//  131                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  132 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
//  133 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  134 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
//  135 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  136 afAddrType_t SampleApp_Periodic_DstAddr;
SampleApp_Periodic_DstAddr:
        DS 4

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  137 afAddrType_t SampleApp_Flash_DstAddr;
SampleApp_Flash_DstAddr:
        DS 4
//  138 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  139 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
//  140 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  141 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  142 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
//  143 
//  144 /*********************************************************************
//  145  * LOCAL FUNCTIONS
//  146  */
//  147 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  148 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  149 void SampleApp_SendPeriodicMessage( void );
//  150 void SampleApp_SendFlashMessage( uint16 flashTime );
//  151 uint8 SendData(uint8 *buf, uint16 addr, uint8 Leng);
//  152 
//  153 /*********************************************************************
//  154  * NETWORK LAYER CALLBACKS
//  155  */
//  156 
//  157 /*********************************************************************
//  158  * PUBLIC FUNCTIONS
//  159  */
//  160 
//  161 /*********************************************************************
//  162  * @fn      SampleApp_Init
//  163  *
//  164  * @brief   Initialization function for the Generic App Task.
//  165  *          This is called during initialization and should contain
//  166  *          any application specific initialization (ie. hardware
//  167  *          initialization/setup, table initialization, power up
//  168  *          notificaiton ... ).
//  169  *
//  170  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  171  *                    used to send messages and set timers.
//  172  *
//  173  * @return  none
//  174  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  175 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
//  176 {
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        MOV	A,#-0xb
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  177   SampleApp_TaskID = task_id;
        MOV	A,R1
        MOV	DPTR,#SampleApp_TaskID
        MOVX	@DPTR,A
//  178   SampleApp_NwkState = DEV_INIT;
        MOV	A,#0x1
        MOV	DPTR,#SampleApp_NwkState
        MOVX	@DPTR,A
//  179   SampleApp_TransID = 0;
        CLR	A
        MOV	DPTR,#SampleApp_TransID
        MOVX	@DPTR,A
//  180 
//  181   // Device hardware initialization can be added here or in main() (Zmain.c).
//  182   // If the hardware is application specific - add it here.
//  183   // If the hardware is other parts of the device add it in main().
//  184 
//  185  #if defined ( SOFT_START )
//  186   // The "Demo" target is setup to have SOFT_START and HOLD_AUTO_START
//  187   // SOFT_START is a compile option that allows the device to start
//  188   //  as a coordinator if one isn't found.
//  189   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  190   // together - if they are - we will start up a coordinator. Otherwise,
//  191   // the device will start as a router.
//  192   //if ( readCoordinatorJumper() )
//  193   //  zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  194  // else
//  195    // zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  196 #endif // SOFT_START
//  197 
//  198 #if defined ( HOLD_AUTO_START )
//  199   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  200   //  from starting the device and wait for the application to
//  201   //  start the device.
//  202   ZDOInitDevice(0);
//  203 #endif
//  204 
//  205   // Setup for the periodic message's destination address
//  206   // Broadcast to everyone
//  207   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV	A,#0xf
        MOV	DPTR,#(SampleApp_Periodic_DstAddr + 2)
        MOVX	@DPTR,A
//  208   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        MOV	A,#0x14
        MOV	DPTR,#(SampleApp_Periodic_DstAddr + 3)
        MOVX	@DPTR,A
//  209   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV	DPTR,#SampleApp_Periodic_DstAddr
        MOV	A,#-0x1
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  210 
//  211   // Setup for the flash command's destination address - Group 1
//  212   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV	A,#0x1
        MOV	DPTR,#(SampleApp_Flash_DstAddr + 2)
        MOVX	@DPTR,A
//  213   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        MOV	A,#0x14
        MOV	DPTR,#(SampleApp_Flash_DstAddr + 3)
        MOVX	@DPTR,A
//  214   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV	DPTR,#SampleApp_Flash_DstAddr
        MOV	A,#0x1
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  215 
//  216   // Fill out the endpoint description.
//  217   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV	A,#0x14
        MOV	DPTR,#SampleApp_epDesc
        MOVX	@DPTR,A
//  218   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        MOV	DPTR,#(SampleApp_epDesc + 1)
        MOV	A,#(SampleApp_TaskID & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((SampleApp_TaskID >> 8) & 0xff)
        MOVX	@DPTR,A
//  219   SampleApp_epDesc.simpleDesc
//  220             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        MOV	DPTR,#(SampleApp_epDesc + 3)
        MOV	A,#(SampleApp_SimpleDesc & 0xff)
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#((SampleApp_SimpleDesc >> 8) & 0xff)
        MOVX	@DPTR,A
//  221   SampleApp_epDesc.latencyReq = noLatencyReqs;
        CLR	A
        MOV	DPTR,#(SampleApp_epDesc + 5)
        MOVX	@DPTR,A
//  222 
//  223   // Register the endpoint description with the AF
//  224   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV	R2,#(SampleApp_epDesc & 0xff)
        MOV	R3,#((SampleApp_epDesc >> 8) & 0xff)
        MOV	DPTR,#(afRegister & 0xffff)
        MOV	A,#((afRegister >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  225 
//  226   // Register for all key events - This app will handle all key events
//  227   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV	DPTR,#SampleApp_TaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(RegisterForKeys & 0xffff)
        MOV	A,#((RegisterForKeys >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  228 
//  229   // By default, all devices start out in Group 1
//  230   SampleApp_Group.ID = 0x0001;
        MOV	DPTR,#SampleApp_Group
        MOV	A,#0x1
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  231   osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 0,#(`?<Constant "Group 1">` & 0xff)
        MOV	?V0 + 1,#((`?<Constant "Group 1">` >> 8) & 0xff)
        MOV	?V0 + 2,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,#0x7
        MOV	R5,#0x0
        MOV	R2,#((SampleApp_Group + 2) & 0xff)
        MOV	R3,#(((SampleApp_Group + 2) >> 8) & 0xff)
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  232   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV	R2,#(SampleApp_Group & 0xff)
        MOV	R3,#((SampleApp_Group >> 8) & 0xff)
        MOV	R1,#0x14
        MOV	DPTR,#(aps_AddGroup & 0xffff)
        MOV	A,#((aps_AddGroup >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  233 
//  234 #if defined ( LCD_SUPPORTED )
//  235   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
//  236 #endif
//  237 }
        MOV	R7,#0x3
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  238 
//  239 /*********************************************************************
//  240  * @fn      SampleApp_ProcessEvent
//  241  *
//  242  * @brief   Generic Application Task event processor.  This function
//  243  *          is called to process all events for the task.  Events
//  244  *          include timers, messages and any other user defined events.
//  245  *
//  246  * @param   task_id  - The OSAL assigned task ID.
//  247  * @param   events - events to process.  This is a bit map and can
//  248  *                   contain more than one event.
//  249  *
//  250  * @return  none
//  251  */
//  252 void UartTX_Send_String(char *Data,int len);
//  253 void UartTX_Send_Single(char single_Data);

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  254 uint8 RxBuf[50];
RxBuf:
        DS 50

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  255 uint8 TxBuf[50];
TxBuf:
        DS 50

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  256 int clear = 0;
clear:
        DS 2

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  257 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
//  258 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, UartTX_Send_String
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, HalLedBlink
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, NLME_GetExtAddr
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL SampleApp_ProcessEvent, memcpy
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL SampleApp_ProcessEvent, NLME_GetShortAddr
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, SendData
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, SampleApp_SendPeriodicMessage
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  259   afIncomingMSGPacket_t *MSGpkt;
//  260 
//  261   if ( events & SYS_EVENT_MSG )
        MOV	A,#-0x80
        ANL	A,R7
        MOV	R1,A
        CLR	A
        JNZ	??SampleApp_ProcessEvent_0
        MOV	A,R1
??SampleApp_ProcessEvent_0:
        JNZ	$+5
        LJMP	??SampleApp_ProcessEvent_1 & 0xFFFF
//  262   {
//  263     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        LJMP	??SampleApp_ProcessEvent_2 & 0xFFFF
//  264     while ( MSGpkt )
//  265     {
//  266       switch ( MSGpkt->hdr.event )
//  267       {
//  268         // Received when a key is pressed
//  269         case KEY_CHANGE:
//  270           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  271           break;
//  272 
//  273         // Received when a messages is received (OTA) for this endpoint
//  274         case AF_INCOMING_MSG_CMD:
//  275           SampleApp_MessageMSGCB( MSGpkt );
//  276           break;
//  277 
//  278         // Received whenever the device changes state in the network
//  279         case ZDO_STATE_CHANGE:
//  280           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_3:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPTR,#SampleApp_NwkState
        MOVX	@DPTR,A
//  281           if ( (SampleApp_NwkState == DEV_ZB_COORD)
//  282               || (SampleApp_NwkState == DEV_ROUTER)
//  283               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL	A,#0x9
        JZ	??SampleApp_ProcessEvent_4
        MOVX	A,@DPTR
        XRL	A,#0x7
        JZ	??SampleApp_ProcessEvent_4
        MOVX	A,@DPTR
        XRL	A,#0x6
        JZ	$+5
        LJMP	??SampleApp_ProcessEvent_5 & 0xFFFF
//  284           {
//  285 #if defined( ZDO_COORDINATOR )
//  286             UartTX_Send_String("haha!Nework found succeed\n",26);
//  287             HalLedBlink( HAL_LED_4, 4, 50, 250 );
//  288 #elif defined( RTR_NWK ) && (!defined(ZDO_COORDINATOR))
//  289             UartTX_Send_String("haha!Rou jiond succeed\n",23);
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function UartTX_Send_String
        MOV	R4,#0x17
        MOV	R5,#0x0
        MOV	R2,#(`?<Constant "haha!Rou jiond succeed\\n">` & 0xff)
        MOV	R3,#((`?<Constant "haha!Rou jiond succeed\\n">` >> 8) & 0xff)
        MOV	DPTR,#(UartTX_Send_String & 0xffff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  290             HalLedBlink( HAL_LED_4, 3, 50, 250 );            //Ð¡µÆÉÁË¸
        ; Setup parameters for call to function HalLedBlink
        MOV	R4,#-0x6
        MOV	R5,#0x0
        MOV	R3,#0x32
        MOV	R2,#0x3
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedBlink & 0xffff)
        MOV	A,#((HalLedBlink >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  291             RfTx.TXDATA.HeadCom[0] = 'n';                    //ÊäÈëÃüÁî
        MOV	A,#0x6e
        MOV	DPTR,#RfTx
        MOVX	@DPTR,A
//  292             RfTx.TXDATA.HeadCom[1] = 'e';
        MOV	A,#0x65
        MOV	DPTR,#(RfTx + 1)
        MOVX	@DPTR,A
//  293             RfTx.TXDATA.HeadCom[2] = 'w';
        MOV	A,#0x77
        MOV	DPTR,#(RfTx + 2)
        MOVX	@DPTR,A
//  294             RfTx.TXDATA.Node_type[0] = 'R';                  //½ÚµãÀàÐÍ
        MOV	A,#0x52
        MOV	DPTR,#(RfTx + 3)
        MOVX	@DPTR,A
//  295             RfTx.TXDATA.Node_type[1] = 'O';
        MOV	A,#0x4f
        MOV	DPTR,#(RfTx + 4)
        MOVX	@DPTR,A
//  296             RfTx.TXDATA.Node_type[2] = 'U';	
        MOV	A,#0x55
        MOV	DPTR,#(RfTx + 5)
        MOVX	@DPTR,A
//  297             memcpy(RfTx.TXDATA.IEEE,NLME_GetExtAddr(),8);     //»ñÈ¡ÎïÀíµØÖ·
        ; Setup parameters for call to function memcpy
        MOV	?V0 + 2,#0x8
        MOV	?V0 + 3,#0x0
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        ; Setup parameters for call to function NLME_GetExtAddr
        MOV	DPTR,#(NLME_GetExtAddr & 0xffff)
        MOV	A,#((NLME_GetExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,#((RfTx + 6) & 0xff)
        MOV	R3,#(((RfTx + 6) >> 8) & 0xff)
        MOV	DPTR,#(memcpy & 0xffff)
        MOV	A,#((memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  298             RfTx.TXDATA.Saddr = NLME_GetShortAddr();          //»ñÈ¡ÍøÂçµØÖ·
        ; Setup parameters for call to function NLME_GetShortAddr
        MOV	DPTR,#(NLME_GetShortAddr & 0xffff)
        MOV	A,#((NLME_GetShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#(RfTx + 14)
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  299             SendData(RfTx.TxBuf, 0x0000, 32);                  //·¢ËÍÊ×´ÎÐÅÏ¢
        ; Setup parameters for call to function SendData
        MOV	R1,#0x20
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#(RfTx & 0xff)
        MOV	R3,#((RfTx >> 8) & 0xff)
        MOV	DPTR,#(SendData & 0xffff)
        MOV	A,#((SendData >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  300 #else
//  301             UartTX_Send_String("haha!End jiond succeed\n",23);
//  302             HalLedBlink( HAL_LED_4, 3, 50, 250 );
//  303             SendData(NLME_GetExtAddr(), 0x0000, 2);
//  304 #endif
//  305 
//  306             // Start sending the periodic message in a regular interval.
//  307 
//  308             osal_start_timerEx( SampleApp_TaskID,
//  309                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  310                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV	R4,#-0x78
        MOV	R5,#0x13
        MOV	R2,#0x1
        MOV	R3,#0x0
        MOV	DPTR,#SampleApp_TaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_start_timerEx & 0xffff)
        MOV	A,#((osal_start_timerEx >> 16) & 0xff)
??SampleApp_ProcessEvent_6:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  311           }
//  312           else
//  313           {
//  314             // Device is no longer in the network
//  315           }
//  316           break;
//  317 
//  318         default:
//  319           break;
//  320       }
//  321 
//  322       // Release the memory
//  323       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(osal_msg_deallocate & 0xffff)
        MOV	A,#((osal_msg_deallocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  324 
//  325       // Next - if one is available
//  326       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_2:
        MOV	DPTR,#SampleApp_TaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_msg_receive & 0xffff)
        MOV	A,#((osal_msg_receive >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	A,?V0 + 0
        JNZ	??SampleApp_ProcessEvent_7
        MOV	A,?V0 + 1
??SampleApp_ProcessEvent_7:
        JZ	??SampleApp_ProcessEvent_8
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	A,@DPTR
        LCALL	?UC_SWITCH_SPARSE
`?<Jumptable for SampleApp_ProcessEvent>_0`:
        DB        0
        DB        3
        DB        26
        DW        ??SampleApp_ProcessEvent_9
        DB        192
        DW        ??SampleApp_ProcessEvent_10
        DB        209
        DW        ??SampleApp_ProcessEvent_3
        DW        ??SampleApp_ProcessEvent_5
??SampleApp_ProcessEvent_10:
        ; Setup parameters for call to function SampleApp_HandleKeys
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(SampleApp_HandleKeys & 0xffff)
        MOV	A,#((SampleApp_HandleKeys >> 16) & 0xff)
        SJMP	??SampleApp_ProcessEvent_6
??SampleApp_ProcessEvent_9:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(SampleApp_MessageMSGCB & 0xffff)
        MOV	A,#((SampleApp_MessageMSGCB >> 16) & 0xff)
        SJMP	??SampleApp_ProcessEvent_6
//  327     }
//  328 
//  329     // return unprocessed events
//  330     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_8:
        MOV	A,R6
        MOV	R2,A
        MOV	A,#-0x80
        XRL	A,R7
??SampleApp_ProcessEvent_11:
        MOV	R3,A
        SJMP	??SampleApp_ProcessEvent_12
//  331   }
//  332 
//  333   // Send a message out - This event is generated by a timer
//  334   //  (setup in SampleApp_Init()).
//  335   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_1:
        MOV	A,R6
        MOV	C,0xE0 /* A   */.0
        JNC	??SampleApp_ProcessEvent_13
//  336   {
//  337     // Send the periodic message
//  338     SampleApp_SendPeriodicMessage();
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        MOV	DPTR,#(SampleApp_SendPeriodicMessage & 0xffff)
        MOV	A,#((SampleApp_SendPeriodicMessage >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  339 
//  340     // Setup to send message again in normal period (+ a little jitter)
//  341     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  342         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        MOV	DPTR,#(osal_rand & 0xffff)
        MOV	A,#((osal_rand >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	R0,?V0 + 0
        ; Setup parameters for call to function osal_start_timerEx
        MOV	A,#-0x78
        ADD	A,R0
        MOV	R4,A
        MOV	A,#0x13
        ADDC	A,#0x0
        MOV	R5,A
        MOV	R2,#0x1
        MOV	R3,#0x0
        MOV	DPTR,#SampleApp_TaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_start_timerEx & 0xffff)
        MOV	A,#((osal_start_timerEx >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  343 
//  344     // return unprocessed events
//  345     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV	A,#0x1
        XRL	A,R6
        MOV	R2,A
        MOV	A,R7
        SJMP	??SampleApp_ProcessEvent_11
//  346   }
//  347 
//  348   // Discard unknown events
//  349   return 0;
??SampleApp_ProcessEvent_13:
        MOV	R2,#0x0
        MOV	R3,#0x0
??SampleApp_ProcessEvent_12:
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  350 }
//  351 
//  352 /*********************************************************************
//  353  * Event Generation Functions
//  354  */
//  355 /*********************************************************************
//  356  * @fn      SampleApp_HandleKeys
//  357  *
//  358  * @brief   Handles all key events for this device.
//  359  *
//  360  * @param   shift - true if in shift/alt.
//  361  * @param   keys - bit field for key events. Valid entries:
//  362  *                 HAL_KEY_SW_2
//  363  *                 HAL_KEY_SW_1
//  364  *
//  365  * @return  none
//  366  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  367 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
//  368 {
        FUNCALL SampleApp_HandleKeys, SampleApp_SendFlashMessage
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL SampleApp_HandleKeys, aps_FindGroup
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL SampleApp_HandleKeys, aps_RemoveGroup
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL SampleApp_HandleKeys, aps_AddGroup
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
//  369   if ( keys & HAL_KEY_SW_1 )
        MOV	C,0xE0 /* A   */.0
        JNC	??SampleApp_HandleKeys_0
//  370   {
//  371     /* This key sends the Flash Command is sent to Group 1.
//  372      * This device will not receive the Flash Command from this
//  373      * device (even if it belongs to group 1).
//  374      */
//  375     SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
        ; Setup parameters for call to function SampleApp_SendFlashMessage
        MOV	R2,#-0x18
        MOV	R3,#0x3
        MOV	DPTR,#(SampleApp_SendFlashMessage & 0xffff)
        MOV	A,#((SampleApp_SendFlashMessage >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  376   }
//  377 
//  378   if ( keys & HAL_KEY_SW_2 )
??SampleApp_HandleKeys_0:
        MOV	A,R6
        MOV	C,0xE0 /* A   */.3
        JNC	??SampleApp_HandleKeys_1
//  379   {
//  380     /* The Flashr Command is sent to Group 1.
//  381      * This key toggles this device in and out of group 1.
//  382      * If this device doesn't belong to group 1, this application
//  383      * will not receive the Flash command sent to group 1.
//  384      */
//  385     aps_Group_t *grp;
//  386     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  387     if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV	R2,#0x1
        MOV	R3,#0x0
        MOV	R1,#0x14
        MOV	DPTR,#(aps_FindGroup & 0xffff)
        MOV	A,#((aps_FindGroup >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        JNZ	??SampleApp_HandleKeys_2
        MOV	A,R3
??SampleApp_HandleKeys_2:
        JZ	??SampleApp_HandleKeys_3
//  388     {
//  389       // Remove from the group
//  390       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV	R2,#0x1
        MOV	R3,#0x0
        MOV	R1,#0x14
        MOV	DPTR,#(aps_RemoveGroup & 0xffff)
        MOV	A,#((aps_RemoveGroup >> 16) & 0xff)
        SJMP	??SampleApp_HandleKeys_4
//  391     }
//  392     else
//  393     {
//  394       // Add to the flash group
//  395       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
??SampleApp_HandleKeys_3:
        ; Setup parameters for call to function aps_AddGroup
        MOV	R2,#(SampleApp_Group & 0xff)
        MOV	R3,#((SampleApp_Group >> 8) & 0xff)
        MOV	R1,#0x14
        MOV	DPTR,#(aps_AddGroup & 0xffff)
        MOV	A,#((aps_AddGroup >> 16) & 0xff)
??SampleApp_HandleKeys_4:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  396     }
//  397   }
//  398 }
??SampleApp_HandleKeys_1:
        LJMP	??Subroutine1_0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  399 
//  400 /*********************************************************************
//  401  * LOCAL FUNCTIONS
//  402  */
//  403 
//  404 /*********************************************************************
//  405  * @fn      SampleApp_MessageMSGCB
//  406  *
//  407  * @brief   Data message processor callback.  This function processes
//  408  *          any incoming data - probably from other devices.  So, based
//  409  *          on cluster ID, perform the intended action.
//  410  *
//  411  * @param   none
//  412  *
//  413  * @return  none
//  414  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  415 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
//  416 {
        FUNCALL SampleApp_MessageMSGCB, memcpy
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL SampleApp_MessageMSGCB, UartTX_Send_String
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  417   int new_node_flag;
//  418   new_node_flag = 0;
//  419   if(clear == 0)
        MOV	DPTR,#clear
        MOVX	A,@DPTR
        JNZ	??SampleApp_MessageMSGCB_0
        INC	DPTR
        MOVX	A,@DPTR
??SampleApp_MessageMSGCB_0:
        JNZ	??SampleApp_MessageMSGCB_1
//  420   {
//  421     JoinNode.RouterCount = 0;               //Â·ÓÉÆ÷¼ÆÊýÇåÁã
        CLR	A
        MOV	DPTR,#(JoinNode + 1)
        MOVX	@DPTR,A
//  422     JoinNode.RfdCount = 0;                  //ÖÕ¶Ë¼ÆÊýÇåÁã
        MOV	DPTR,#JoinNode
        MOVX	@DPTR,A
//  423     clear = 1;
        MOV	DPTR,#clear
        MOV	A,#0x1
        MOVX	@DPTR,A
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  424   }
//  425   switch ( pkt->clusterId )
??SampleApp_MessageMSGCB_1:
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 0
        LCALL	?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DW        2
        DB        0
        DW        ??SampleApp_MessageMSGCB_2
        DW        ??SampleApp_MessageMSGCB_3
//  426   {
//  427     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  428       break;
//  429 
//  430     case SAMPLEAPP_FLASH_CLUSTERID:
//  431       memcpy(RxBuf,pkt->cmd.Data,pkt->cmd.DataLength);
??SampleApp_MessageMSGCB_3:
        MOV	A,R2
        ADD	A,#0x13
        MOV	R6,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R7,A
        ; Setup parameters for call to function memcpy
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	A,R2
        ADD	A,#0x15
        MOV	DPL,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	DPH,A
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV	DPTR,#(memcpy & 0xffff)
        MOV	A,#((memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  432 #if defined( ZDO_COORDINATOR )          //Èç¹ûÊÇÐ­µ÷Æ÷ÊÕµ½Êý¾Ý
//  433       if((RxBuf[0] == 'n') && (RxBuf[1] == 'e') &&(RxBuf[2] == 'w'))        //ÐÂ½Úµã¼ÓÈë
//  434       {
//  435         if((RxBuf[3] == 'R') && (RxBuf[4] == 'O') && (RxBuf[5] == 'U'))         //ÅÐ¶ÏÊÇÂ·ÓÉÆ÷½Úµã
//  436         {
//  437           for(int i=0;i<JoinNode.RouterCount;i++)
//  438           {
//  439             for(int j=0;j<8;j++)
//  440             {
//  441               if(JoinNode.RouterAddr[JoinNode.RouterCount][j] == RxBuf[j+6])          //ÅÐ¶ÏÊÇ·ñÓÐÏàÍ¬µØÖ·
//  442               {
//  443                 new_node_flag++;                                                      //ÅÐ¶ÏÎ»ÏàÍ¬±êÖ¾¼Ó1
//  444               }
//  445               else
//  446               {
//  447                 new_node_flag = 0;                                                    //ÅÐ¶ÏÎ»²»Í¬£¬±íÊ¾µØÖ·²»Í¬£¬±êÖ¾Çå0
//  448                 j += 8;
//  449               }
//  450             }
//  451             if(new_node_flag == 8)
//  452             {
//  453               i += JoinNode.RouterCount;                                          //ÍË³ö²éÑ¯
//  454             }
//  455           }
//  456           if(new_node_flag == 0)
//  457           {
//  458             for(int i=0;i<8;i++)
//  459             {
//  460               JoinNode.RouterAddr[JoinNode.RouterCount][7-i] = RxBuf[i+6];            //´æ·ÅÎïÀíµØÖ·
//  461             }
//  462             JoinNode.RouterAddr[JoinNode.RouterCount][8] = RxBuf[6+8];             //´æ·ÅÍøÂçµØÖ·
//  463             JoinNode.RouterAddr[JoinNode.RouterCount][9] = RxBuf[6+9];
//  464             JoinNode.RouterCount ++;
//  465           }
//  466         }
//  467         UartTX_Send_String( RxBuf,6);
//  468         UartTX_Send_String( JoinNode.RouterAddr[JoinNode.RouterCount-1],10);                               //Í¨¹ý´®¿Ú·¢ËÍÊý¾Ý
//  469       }
//  470       else
//  471       UartTX_Send_String(RxBuf,pkt->cmd.DataLength);
//  472 
//  473 #elif defined( RTR_NWK ) && (!defined(ZDO_COORDINATOR))                            //Ñ¡ÔñÂ·ÓÉÆ÷
//  474       UartTX_Send_String(RxBuf,pkt->cmd.DataLength);                                //Í¨¹ý´®¿Ú·¢ËÍÊý¾Ý
        ; Setup parameters for call to function UartTX_Send_String
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV	DPTR,#(UartTX_Send_String & 0xffff)
        MOV	A,#((UartTX_Send_String >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  475 #else                                    //Ê£ÏÂµÄ¾ÍÊÇÖÕ¶Ë½Úµã
//  476 #endif
//  477       HalLedBlink( HAL_LED_4, 2, 50, 100 );              //Ð¡µÆÉÁË¸
        ; Setup parameters for call to function HalLedBlink
        MOV	R4,#0x64
        MOV	R5,#0x0
        MOV	R3,#0x32
        MOV	R2,#0x2
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedBlink & 0xffff)
        MOV	A,#((HalLedBlink >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  478 
//  479       break;
//  480   }
//  481 }
??SampleApp_MessageMSGCB_2:
        LJMP	??Subroutine1_0 & 0xFFFF
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	R2,#(RxBuf & 0xff)
        MOV	R3,#((RxBuf >> 8) & 0xff)
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
//  482 
//  483 /*********************************************************************
//  484  * @fn      SampleApp_SendPeriodicMessage
//  485  *
//  486  * @brief   Send the periodic message.
//  487  *
//  488  * @param   none
//  489  *
//  490  * @return  none
//  491  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  492 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
//  493 {
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  494   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  495                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  496                        1,
//  497                        (uint8*)&SampleAppPeriodicCounter,
//  498                        &SampleApp_TransID,
//  499                        AF_DISCV_ROUTE,
//  500                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV	?V0 + 0,#0xa
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	?V0 + 0,#(SampleApp_TransID & 0xff)
        MOV	?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	?V0 + 0,#(SampleAppPeriodicCounter & 0xff)
        MOV	?V0 + 1,#((SampleAppPeriodicCounter >> 8) & 0xff)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	R1,#0x20
        MOV	R4,#(SampleApp_epDesc & 0xff)
        MOV	R5,#((SampleApp_epDesc >> 8) & 0xff)
        MOV	R2,#(SampleApp_Periodic_DstAddr & 0xff)
        MOV	R3,#((SampleApp_Periodic_DstAddr >> 8) & 0xff)
        MOV	DPTR,#(AF_DataRequest & 0xffff)
        MOV	A,#((AF_DataRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x9
        LJMP	?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock7
//  501   {
//  502   }
//  503   else
//  504   {
//  505     // Error occurred in request to send.
//  506   }
//  507 }
//  508 
//  509 /*********************************************************************
//  510  * @fn      SampleApp_SendFlashMessage
//  511  *
//  512  * @brief   Send the flash message to group 1.
//  513  *
//  514  * @param   flashTime - in milliseconds
//  515  *
//  516  * @return  none
//  517  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  518 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
//  519 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV	A,#-0x3
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  520   uint8 buffer[3];
//  521   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV	DPTR,#SampleAppFlashCounter
        MOVX	A,@DPTR
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	DPTR,#SampleAppFlashCounter
        MOVX	A,@DPTR
        INC	A
        MOVX	@DPTR,A
//  522   buffer[1] = LO_UINT16( flashTime );
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
//  523   buffer[2] = HI_UINT16( flashTime );
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,R3
        MOVX	@DPTR,A
//  524 
//  525   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  526                        SAMPLEAPP_FLASH_CLUSTERID,
//  527                        3,
//  528                        buffer,
//  529                        &SampleApp_TransID,
//  530                        AF_DISCV_ROUTE,
//  531                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV	?V0 + 0,#0xa
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	?V0 + 0,#(SampleApp_TransID & 0xff)
        MOV	?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	?V0 + 0,#0x3
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	?V0 + 0,#0x2
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	R1,#0x20
        MOV	R4,#(SampleApp_epDesc & 0xff)
        MOV	R5,#((SampleApp_epDesc >> 8) & 0xff)
        MOV	R2,#(SampleApp_Flash_DstAddr & 0xff)
        MOV	R3,#((SampleApp_Flash_DstAddr >> 8) & 0xff)
        MOV	DPTR,#(AF_DataRequest & 0xffff)
        MOV	A,#((AF_DataRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x9
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  532   {
//  533   }
//  534   else
//  535   {
//  536     // Error occurred in request to send.
//  537   }
//  538 }
        MOV	A,#0x3
        SJMP	?Subroutine1
        CFI EndBlock cfiBlock8
//  539 
//  540 //**********************************************************************
//  541 //**ÒÔ¶ÌµØÖ··½Ê½·¢ËÍÊý¾Ý
//  542 //buf ::·¢ËÍµÄÊý¾Ý
//  543 //addr::Ä¿µÄµØÖ·
//  544 //Leng::Êý¾Ý³¤¶È
//  545 //********************************************************************

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  546 uint8 SendData(uint8 *buf, uint16 addr, uint8 Leng)
SendData:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function SendData
//  547 {
        FUNCALL SendData, AF_DataRequest
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV	A,#-0x4
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  548 	afAddrType_t SendDataAddr;
//  549 	
//  550 	SendDataAddr.addrMode = (afAddrMode_t)Addr16Bit;         //¶ÌµØÖ··¢ËÍ
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x2
        MOVX	@DPTR,A
//  551 	SendDataAddr.endPoint = SAMPLEAPP_ENDPOINT;
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x14
        MOVX	@DPTR,A
//  552 	SendDataAddr.addr.shortAddr = addr;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
//  553         if ( AF_DataRequest( &SendDataAddr, //·¢ËÍµÄµØÖ·ºÍÄ£Ê½
//  554                        &SampleApp_epDesc,   //ÖÕ¶Ë£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©
//  555                        2,//·¢ËÍ´®ID
//  556                        Leng,
//  557                        buf,
//  558                        &SampleApp_TransID,  //ÐÅÏ¢ID£¨²Ù×÷ÏµÍ³²ÎÊý£©
//  559                        AF_DISCV_ROUTE,
//  560                      //  AF_ACK_REQUEST,
//  561                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV	?V0 + 0,#0xa
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	?V0 + 0,#(SampleApp_TransID & 0xff)
        MOV	?V0 + 1,#((SampleApp_TransID >> 8) & 0xff)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	?V0 + 0,R1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	?V0 + 0,#0x2
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	R1,#0x20
        MOV	R4,#(SampleApp_epDesc & 0xff)
        MOV	R5,#((SampleApp_epDesc >> 8) & 0xff)
        MOV	A,#0x9
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(AF_DataRequest & 0xffff)
        MOV	A,#((AF_DataRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x9
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	A,R1
        JNZ	??SendData_0
//  562 	{
//  563 		return 1;
        MOV	R1,#0x1
        SJMP	??SendData_1
//  564 	}
//  565 	else
//  566 	{
//  567 		return 0;// Error occurred in request to send.
??SendData_0:
        MOV	R1,#0x0
??SendData_1:
        MOV	A,#0x4
        CFI EndBlock cfiBlock9
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  568 	}
//  569 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Valid
??Subroutine1_0:
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "Group 1">>`:
        DB "Group 1"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "haha!Rou jiond su`:
        DB "haha!Rou jiond succeed\012"

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SampleApp_ClusterList>`:
        DW 1, 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SampleApp_SimpleDesc>`:
        DB 20
        DW 3848, 1
        DB 0, 2
        DW SampleApp_ClusterList
        DB 2
        DW SampleApp_ClusterList

        END
//  570 
//  571 /*********************************************************************
//  572 *********************************************************************/
// 
// 1 124 bytes in segment BANKED_CODE
//    48 bytes in segment XDATA_I
//    48 bytes in segment XDATA_ID
//   607 bytes in segment XDATA_Z
// 
// 1 172 bytes of CODE  memory
//   655 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
