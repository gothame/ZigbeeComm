//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  24/Jan/2013  14:47:48 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\stack\zdo\ZDApp.c                             /
//    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\Tools\CC2430D /
//                          B\f8wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR     /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DRTR_NWK -DBLINK_LEDS "-DCONST=const        /
//                          __code" -DGENERIC=__generic) -f                  /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f /
//                          8wConfig.cfg (-DSECURE=0                         /
//                          -DDEFAULT_CHANLIST=0x00000800                    /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                     /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\ -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\Source\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\  /
//                          -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ /
//                          \ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ /
//                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                      /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \hal\target\CC2430EB\ -I                         /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \osal\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I            /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢× /
//                          ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 /
//                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\sec\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\stack\sys\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \zmac\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ /
//                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Z /
//                          igBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\services\saddr\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \services\sdata\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\high_level\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf03\ -I     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf03\single_chip\ -D CC2430EB    /
//                          -D ZTOOL_P1 -D MT_TASK -lC                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ -lA        /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\            /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\RouterEB\Obj\ -e       /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\stack\zdo\ZDApp.c"                           /
//    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ZDApp.s51   /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,021203H
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK WDCTL
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,0203H
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppSetupProtoVersion
        FUNCTION ZDAppSetupProtoVersion,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AutoFindDestinationEx
        FUNCTION ZDApp_AutoFindDestinationEx,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_EndDeviceAnnounceCB
        FUNCTION ZDApp_EndDeviceAnnounceCB,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDApp_EndDeviceBindRsp
        FUNCTION ZDApp_EndDeviceBindRsp,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,021203H
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,021203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_MatchDescRspCB
        FUNCTION ZDApp_MatchDescRspCB,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,021203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,0a1203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterForEndDeviceAnnounce
        FUNCTION ZDApp_RegisterForEndDeviceAnnounce,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RegisterForMatchDescRsp
        FUNCTION ZDApp_RegisterForMatchDescRsp,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,021203H
        ARGFRAME ISTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_RestoreNetworkState
        FUNCTION ZDApp_RestoreNetworkState,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,0203H
        PUBLIC ZDApp_SendEndDeviceBindReq
        FUNCTION ZDApp_SendEndDeviceBindReq,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 27, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDApp_SendNewDstAddr
        FUNCTION ZDApp_SendNewDstAddr,021203H
        ARGFRAME XSTACK, 19, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StartUpFromApp
        FUNCTION ZDApp_StartUpFromApp,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopStartUp
        FUNCTION ZDApp_StopStartUp,0203H
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,0a1203H
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDOInitDevice
        FUNCTION ZDOInitDevice,021203H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,021203H
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,021203H
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,0203H
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,0203H
        PUBWEAK _A_IEN0
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkStatus
        PUBLIC zdoDiscCounter
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 9, STACK
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        EXTERN NLME_GetRequest
        FUNCTION NLME_GetRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 12, STACK
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN NLME_InitNV
        FUNCTION NLME_InitNV,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN NLME_RestoreFromNV
        FUNCTION NLME_RestoreFromNV,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN NLME_GetProtocolVersion
        FUNCTION NLME_GetProtocolVersion,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 27, STACK
        EXTERN NLME_SetRequest
        FUNCTION NLME_SetRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 27, STACK
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 27, STACK
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME XSTACK, 29, STACK
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME XSTACK, 31, STACK
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME XSTACK, 11, STACK
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN NLME_StartRouterRequest
        FUNCTION NLME_StartRouterRequest,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 24, STACK
        EXTERN afFindSimpleDesc
        FUNCTION afFindSimpleDesc,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME XSTACK, 29, STACK
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME XSTACK, 24, STACK
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME XSTACK, 24, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 27, STACK
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME XSTACK, 32, STACK
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 27, STACK
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN NLME_RemoveChild
        FUNCTION NLME_RemoveChild,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 12, STACK
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME XSTACK, 18, STACK
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME XSTACK, 18, STACK
        EXTERN osal_cpyExtAddr
        FUNCTION osal_cpyExtAddr,0202H
        ARGFRAME XSTACK, 27, STACK
        EXTERN osal_ExtAddrEqual
        FUNCTION osal_ExtAddrEqual,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 12, STACK
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN nwk_getNetworkDesc
        FUNCTION nwk_getNetworkDesc,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _NIB
        EXTERN zgConfigPANID
        EXTERN zgDefaultStartingScanDuration
        EXTERN zgStackProfile

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\zdo\ZDApp.c
//    1 /*********************************************************************
//    2     Filename:       ZDApp.c
//    3     Revised:        $Date: 2007-05-31 15:56:04 -0700 (Thu, 31 May 2007) $
//    4     Revision:       $Revision: 14490 $
//    5 
//    6     Description:
//    7 
//    8       This file contains the interface to the Zigbee Device Application.
//    9       This is the Application part that the use can change. This also
//   10       contains the Task functions.
//   11 
//   12     Notes:
//   13 
//   14     Copyright (c) 2006 by Texas Instruments, Inc.
//   15     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   16     derivative works, modify, distribute, perform, display or sell this
//   17     software and/or its documentation for any purpose is prohibited
//   18     without the express written consent of Texas Instruments, Inc.
//   19 *********************************************************************/
//   20 
//   21 /*********************************************************************
//   22  * INCLUDES
//   23  */
//   24 #include "ZComDef.h"
//   25 #include "ZMac.h"
//   26 #include "OSAL.h"
//   27 #include "OSAL_Tasks.h"
//   28 #include "OSAL_PwrMgr.h"
//   29 #include "OSAL_Nv.h"
//   30 #include "AF.h"
//   31 #include "APSMEDE.h"
//   32 #include "NLMEDE.h"
//   33 #include "AddrMgr.h"
//   34 #include "ZDCache.h"
//   35 #include "ZDProfile.h"
//   36 #include "ZDObject.h"
//   37 #include "ZDConfig.h"
//   38 #include "ZDSecMgr.h"
//   39 #include "ZDApp.h"
//   40 #include "DebugTrace.h"
//   41 #include "nwk_util.h"
//   42 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DS 1
//   43 #include "ZGlobals.h"
//   44 
//   45 #if   ( SECURE != 0  )
//   46   #include "ssp.h"
//   47 #endif
//   48 
//   49 #if defined( MT_ZDO_FUNC )
//   50   #include "MT_ZDO.h"
//   51 #endif
//   52 
//   53 /* HAL */
//   54 #include "hal_led.h"
//   55 #include "hal_lcd.h"
//   56 #include "hal_key.h"
//   57 
//   58 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   59   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   60 #endif
//   61 /*********************************************************************
//   62  * MACROS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * CONSTANTS
//   67  */
//   68 #if !defined( NWK_START_DELAY )
//   69   #define NWK_START_DELAY             100   // in milliseconds
//   70 #endif
//   71 
//   72 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   73   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   74 #endif
//   75 
//   76 #if !defined( BEACON_REQUEST_DELAY )
//   77   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//   78 #endif
//   79 
//   80 #if !defined( BEACON_REQ_DELAY_MASK )
//   81   #define BEACON_REQ_DELAY_MASK       0x007F
//   82 #endif
//   83 
//   84 #if defined (AUTO_SOFT_START)
//   85   #define MAX_RESUME_RETRY            3
//   86   #define NUM_DISC_ATTEMPTS           3
//   87 #else
//   88   #define MAX_RESUME_RETRY            1
//   89 #endif
//   90 
//   91 #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
//   92 
//   93 // Beacon Order Settings (see NLMEDE.h)
//   94 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//   95 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//   96 
//   97 #if ( SECURE != 0 )
//   98   #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
//   99     // The number of times the frame counter can change before
//  100     // saving to NV
//  101     #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
//  102   #endif
//  103 #endif
//  104 
//  105 // Leave control bits
//  106 #define ZDAPP_LEAVE_CTRL_INIT 0
//  107 #define ZDAPP_LEAVE_CTRL_SET  1
//  108 #define ZDAPP_LEAVE_CTRL_RA   2
//  109 
//  110 // Standard time to update NWK NV data
//  111 #define ZDAPP_UPDATE_NWK_NV_TIME 100
//  112 
//  113 // Address Manager Stub Implementation
//  114 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  115 
//  116 /*********************************************************************
//  117  * TYPEDEFS
//  118  */
//  119 
//  120 /*********************************************************************
//  121  * GLOBAL VARIABLES
//  122  */
//  123 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  124 byte zdoDiscCounter = 1;
zdoDiscCounter:
        DS 1
        REQUIRE `?<Initializer for zdoDiscCounter>`
        REQUIRE __INIT_XDATA_I
//  125 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  126 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
//  127 
//  128 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
//  129   byte zdappMgmtNwkDiscRspTransSeq;
//  130   byte zdappMgmtNwkDiscReqInProgress = FALSE;
//  131   zAddrType_t zdappMgmtNwkDiscRspAddr;
//  132   byte zdappMgmtNwkDiscStartIndex;
//  133   byte zdappMgmtSavedNwkState;
//  134 #endif
//  135 
//  136 #if ( SECURE != 0 )
//  137   uint16 nwkFrameCounterChanges = 0;
//  138 #endif
//  139 
//  140 #if defined ( SOFT_START )
//  141   static uint8 softStartAllowCoord = TRUE;
//  142 #endif
//  143 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  144 uint8 continueJoining = TRUE;
continueJoining:
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  145 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  146 byte  _tmpRejoinState;
_tmpRejoinState:
        DS 1
//  147 
//  148 /*********************************************************************
//  149  * EXTERNAL VARIABLES
//  150  */
//  151 
//  152 /*********************************************************************
//  153  * EXTERNAL FUNCTIONS
//  154  */
//  155 
//  156 /*********************************************************************
//  157  * LOCAL FUNCTIONS
//  158  */
//  159 
//  160 void ZDApp_NetworkStartEvt( void );
//  161 void ZDApp_DeviceAuthEvt( void );
//  162 void ZDApp_SaveNetworkStateEvt( void );
//  163 
//  164 uint8 ZDApp_ReadNetworkRestoreState( void );
//  165 uint8 ZDApp_RestoreNetworkState( void );
//  166 void ZDAppDetermineDeviceType( void );
//  167 void ZDAppSetupProtoVersion( void );
//  168 void ZDApp_InitUserDesc( void );
//  169 void ZDAppCheckForHoldKey( void );
//  170 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  171 void ZDApp_ProcessNetworkJoin( void );
//  172 void ZDApp_SetCoordAddress( byte endPoint, byte dstEP );
//  173 void ZDApp_SendNewDstAddr( byte dstEP, zAddrType_t *dstAddr,
//  174                cId_t clusterID, byte removeFlag, byte task_id, byte endpoint );
//  175 
//  176 #if ( SECURE != 0 )
//  177   void ZDApp_SaveNwkKey( void );
//  178   byte ZDApp_RestoreNwkKey( void );
//  179 #endif
//  180 
//  181 void ZDApp_SendMsg( byte taskID, byte cmd, byte len, byte *buf );
//  182 
//  183 #if defined ( ZDO_BIND_UNBIND_RESPONSE ) && !defined ( REFLECTOR )
//  184   extern void ZDApp_AppBindReq( byte TransSeq, zAddrType_t *SrcAddr, byte *SrcAddress,
//  185                       byte SrcEndPoint, cId_t ClusterID, byte *DstAddress,
//  186                       byte DstEndPoint, byte SecurityUse, uint8 Type );
//  187 #endif
//  188 
//  189 void ZDApp_ResetTimerStart( uint16 delay );
//  190 void ZDApp_ResetTimerCancel( void );
//  191 void ZDApp_LeaveCtrlInit( void );
//  192 void ZDApp_LeaveCtrlSet( uint8 ra );
//  193 uint8 ZDApp_LeaveCtrlBypass( void );
//  194 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  195 void ZDApp_LeaveReset( uint8 ra );
//  196 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
//  197                         uint8 removeChildren );
//  198 void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm );
//  199 
//  200 /*********************************************************************
//  201  * LOCAL VARIABLES
//  202  */
//  203 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  204 byte ZDAppTaskID;
ZDAppTaskID:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  205 byte nwkStatus;
nwkStatus:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  206 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  207 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
//  208 
//  209 #if defined( HOLD_AUTO_START )
//  210   devStates_t devState = DEV_HOLD;
//  211 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  212   devStates_t devState = DEV_INIT;
devState:
        DS 1
        REQUIRE `?<Initializer for devState>`
        REQUIRE __INIT_XDATA_I
//  213 #endif
//  214 
//  215 #if defined( ZDO_COORDINATOR ) && !defined( SOFT_START )
//  216   // Set the default to coodinator
//  217   devStartModes_t devStartMode = MODE_HARD;
//  218 #else

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  219   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
devStartMode:
        DS 1
//  220   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  221                         // to parent. Set to make the device do an Orphan scan.
//  222 #endif
//  223 
//  224 #if defined ( ZDO_IEEEADDR_REQUEST )
//  225   static byte ZDApp_IEEEAddrRsp_TaskID = 0;  // Initialized to NO TASK
//  226 #endif
//  227 
//  228 #if defined ( ZDO_NWKADDR_REQUEST )
//  229   static byte ZDApp_NwkAddrRsp_TaskID = 0;  // Initialized to NO TASK
//  230 #endif
//  231 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  232 static byte ZDApp_MatchDescRsp_TaskID = 0;  // Initialized to NO TASK
??ZDApp_MatchDescRsp_TaskID:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  233 static byte ZDApp_EndDeviceAnnounce_TaskID = 0;  // Initialized to NO TASK
??ZDApp_EndDeviceAnnounce_TaskID:
        DS 1
//  234 
//  235 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  236   static byte ZDApp_BindUnbindRsp_TaskID = TASK_NO_TASK;
//  237 #endif
//  238 
//  239 #if defined ( ZDO_BIND_UNBIND_RESPONSE ) && !defined ( REFLECTOR )
//  240   static byte ZDApp_BindReq_TaskID = 0;  // Initialized to NO TASK
//  241 #endif
//  242 
//  243 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && !defined ( REFLECTOR )
//  244   static byte ZDApp_MgmtBindReq_TaskID = 0;  // Initialized to NO TASK
//  245 #endif
//  246 
//  247 #if !defined( ZDO_COORDINATOR ) || defined( SOFT_START )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  248   static uint8 retryCnt;
??retryCnt:
        DS 1
//  249 #endif
//  250 
//  251 // a little awkward -- this is will hold the list of versions that are legal given other
//  252 // constraints such as NV value, macro values etc. list used in ZDO_NetworkDiscoveryConfirmCB()
//  253 // when a joining device is deciding which network to join.

        RSEG XDATA_I:XDATA:NOROOT(0)
//  254 static byte sPVerList[] = {ZB_PROT_V1_1, ZB_PROT_V1_0};
??sPVerList:
        DS 2
        REQUIRE `?<Initializer for sPVerList>`
        REQUIRE __INIT_XDATA_I
//  255 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  256 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DS 6
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  257 {
//  258   ZDO_EP,
//  259   &ZDAppTaskID,
//  260   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  261   (afNetworkLatencyReq_t)0            // No Network Latency req
//  262 };
//  263 
//  264 /*********************************************************************
//  265  * @fn      ZDApp_Init
//  266  *
//  267  * @brief   ZDApp Initialization function.
//  268  *
//  269  * @param   task_id - ZDApp Task ID
//  270  *
//  271  * @return  None
//  272  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  273 void ZDApp_Init( byte task_id )
ZDApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDApp_Init
//  274 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, ZDAppCheckForHoldKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, ZDAppSetupProtoVersion
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, NLME_GetRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDApp_Init, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 1)
//  275   uint8 capabilities;
//  276 
//  277   // Save the task ID
//  278   ZDAppTaskID = task_id;
        MOV	A,R1
        MOV	DPTR,#ZDAppTaskID
        MOVX	@DPTR,A
//  279 
//  280   // Initialize the ZDO global device short address storage
//  281   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV	A,#0x2
        MOV	DPTR,#(ZDAppNwkAddr + 8)
        MOVX	@DPTR,A
//  282   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV	DPTR,#ZDAppNwkAddr
        MOV	A,#-0x2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#-0x1
        MOVX	@DPTR,A
//  283   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        MOV	DPTR,#(NLME_GetExtAddr & 0xffff)
        MOV	A,#((NLME_GetExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  284 
//  285   // Check for manual "Hold Auto Start"
//  286   ZDAppCheckForHoldKey();
        ; Setup parameters for call to function ZDAppCheckForHoldKey
        MOV	DPTR,#(ZDAppCheckForHoldKey & 0xffff)
        MOV	A,#((ZDAppCheckForHoldKey >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  287 
//  288   // Initialize ZDO items and setup the device - type of device to create.
//  289   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        MOV	DPTR,#(ZDO_Init & 0xffff)
        MOV	A,#((ZDO_Init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  290 
//  291   // Register the endpoint description with the AF
//  292   // This task doesn't have a Simple description, but we still need
//  293   // to register the endpoint.
//  294   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV	R2,#(ZDApp_epDesc & 0xff)
        MOV	R3,#((ZDApp_epDesc >> 8) & 0xff)
        MOV	DPTR,#(afRegister & 0xffff)
        MOV	A,#((afRegister >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  295 
//  296 #if defined( ZDO_USERDESC_RESPONSE )
//  297   ZDApp_InitUserDesc();
//  298 #endif // ZDO_USERDESC_RESPONSE
//  299 
//  300 #if defined( ZDO_CACHE )
//  301   ZDCacheInit();
//  302 #endif
//  303 
//  304   // Setup the Zigbee Network Protocol Version
//  305   ZDAppSetupProtoVersion();
        ; Setup parameters for call to function ZDAppSetupProtoVersion
        MOV	DPTR,#(ZDAppSetupProtoVersion & 0xffff)
        MOV	A,#((ZDAppSetupProtoVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  306 
//  307   // set broadcast address mask to support broadcast filtering
//  308   NLME_GetRequest(nwkCapabilityInfo, 0, &capabilities);
        ; Setup parameters for call to function NLME_GetRequest
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	R1,#-0x71
        MOV	DPTR,#(NLME_GetRequest & 0xffff)
        MOV	A,#((NLME_GetRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  309   NLME_SetBroadcastFilter( capabilities );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(NLME_SetBroadcastFilter & 0xffff)
        MOV	A,#((NLME_SetBroadcastFilter >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  310 
//  311   // Start the device?
//  312   if ( devState != DEV_HOLD )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JZ	??ZDApp_Init_0
//  313   {
//  314     ZDOInitDevice( 0 );
        ; Setup parameters for call to function ZDOInitDevice
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(ZDOInitDevice & 0xffff)
        MOV	A,#((ZDOInitDevice >> 16) & 0xff)
        SJMP	??ZDApp_Init_1
//  315   }
//  316   else
//  317   {
//  318     // Blink LED to indicate HOLD_START
//  319     HalLedBlink ( HAL_LED_4, 0, 50, 500 );
??ZDApp_Init_0:
        ; Setup parameters for call to function HalLedBlink
        MOV	R4,#-0xc
        MOV	R5,#0x1
        MOV	R3,#0x32
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedBlink & 0xffff)
        MOV	A,#((HalLedBlink >> 16) & 0xff)
??ZDApp_Init_1:
        LJMP	?Subroutine25 & 0xFFFF
        CFI EndBlock cfiBlock0
//  320   }
//  321 } /* ZDO_Init() */
//  322 
//  323 /*********************************************************************
//  324  * @fn      ZDApp_event_loop()
//  325  *
//  326  * @brief   Main event loop for Zigbee device objects task. This function
//  327  *          should be called at periodic intervals.
//  328  *
//  329  * @param   task_id - Task ID
//  330  * @param   events  - Bitmap of events
//  331  *
//  332  * @return  none
//  333  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  334 UINT16 ZDApp_event_loop( byte task_id, UINT16 events )
ZDApp_event_loop:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function ZDApp_event_loop
//  335 {
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, ZDApp_NetworkStartEvt
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, osal_pwrmgr_device
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  336   uint8 *msg_ptr;
//  337 
//  338   if ( events & SYS_EVENT_MSG )
        MOV	A,#-0x80
        ANL	A,R7
        MOV	R1,A
        CLR	A
        JNZ	??ZDApp_event_loop_0
        MOV	A,R1
??ZDApp_event_loop_0:
        JNZ	??ZDApp_event_loop_1
//  339   {
//  340     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  341     {
//  342       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  343 
//  344       // Release the memory
//  345       osal_msg_deallocate( msg_ptr );
//  346     }
//  347 
//  348     // Return unprocessed events
//  349     return (events ^ SYS_EVENT_MSG);
//  350   }
//  351 
//  352   if ( events & ZDO_NETWORK_INIT )
        MOV	A,R6
        MOV	C,0xE0 /* A   */.0
        JNC	??ZDApp_event_loop_2
//  353   {
//  354     // Initialize apps and start the network
//  355     devState = DEV_INIT;
        MOV	A,#0x1
        MOV	DPTR,#devState
        MOVX	@DPTR,A
//  356     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  357                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV	R4,#0xf
        MOV	R3,#0xf
        MOV	DPTR,#devStartMode
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        ANL	A,#0x7
        MOV	R1,A
        MOV	DPTR,#(ZDO_StartDevice & 0xffff)
        MOV	A,#((ZDO_StartDevice >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  358 
//  359     // Return unprocessed events
//  360     return (events ^ ZDO_NETWORK_INIT);
        MOV	A,#0x1
??ZDApp_event_loop_3:
        XRL	A,R6
        MOV	R2,A
        MOV	A,R7
??ZDApp_event_loop_4:
        MOV	R3,A
        LJMP	??ZDApp_event_loop_5 & 0xFFFF
//  361   }
??ZDApp_event_loop_6:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        MOV	DPTR,#(ZDApp_ProcessOSALMsg & 0xffff)
        MOV	A,#((ZDApp_ProcessOSALMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        ; Setup parameters for call to function osal_msg_deallocate
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	DPTR,#(osal_msg_deallocate & 0xffff)
        MOV	A,#((osal_msg_deallocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDApp_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV	DPTR,#ZDAppTaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_msg_receive & 0xffff)
        MOV	A,#((osal_msg_receive >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	A,R2
        JNZ	??ZDApp_event_loop_7
        MOV	A,R3
??ZDApp_event_loop_7:
        JNZ	??ZDApp_event_loop_6
        MOV	A,R6
        MOV	R2,A
        MOV	A,#-0x80
??ZDApp_event_loop_8:
        XRL	A,R7
        SJMP	??ZDApp_event_loop_4
//  362 
//  363 #if defined (RTR_NWK)
//  364   if ( events & ZDO_NETWORK_START )
??ZDApp_event_loop_2:
        ANL	A,#0x2
        JZ	??ZDApp_event_loop_9
//  365   {
//  366     ZDApp_NetworkStartEvt();
        ; Setup parameters for call to function ZDApp_NetworkStartEvt
        MOV	DPTR,#(ZDApp_NetworkStartEvt & 0xffff)
        MOV	A,#((ZDApp_NetworkStartEvt >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  367 
//  368     // Return unprocessed events
//  369     return (events ^ ZDO_NETWORK_START);
        MOV	A,#0x2
??ZDApp_event_loop_10:
        SJMP	??ZDApp_event_loop_3
//  370   }
//  371 #endif  //RTR_NWK
//  372 
//  373 #if defined ( RTR_NWK )
//  374   if ( events & ZDO_ROUTER_START )
??ZDApp_event_loop_9:
        MOV	A,R6
        ANL	A,#0x20
        JZ	??ZDApp_event_loop_11
//  375   {
//  376     if ( nwkStatus == ZSuccess )
        MOV	DPTR,#nwkStatus
        MOVX	A,@DPTR
        JNZ	??ZDApp_event_loop_12
//  377     {
//  378       if ( devState == DEV_END_DEVICE )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0x6
        JNZ	??ZDApp_event_loop_13
//  379         devState = DEV_ROUTER;
        MOV	A,#0x7
        MOVX	@DPTR,A
//  380 
//  381       osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_event_loop_13:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV	R1,#0x0
        MOV	DPTR,#(osal_pwrmgr_device & 0xffff)
        MOV	A,#((osal_pwrmgr_device >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  382     }
//  383     else
//  384     {
//  385       // remain as end device!!
//  386     }
//  387     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_event_loop_12:
        ; Setup parameters for call to function osal_set_event
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  388 
//  389     // Return unprocessed events
//  390     return (events ^ ZDO_ROUTER_START);
        MOV	A,#0x20
        SJMP	??ZDApp_event_loop_3
//  391   }
//  392 #endif  // RTR
//  393 
//  394   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_11:
        MOV	A,R6
        ANL	A,#0x10
        JZ	??ZDApp_event_loop_14
//  395   {
//  396     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(ZDO_UpdateNwkStatus & 0xffff)
        MOV	A,#((ZDO_UpdateNwkStatus >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  397 
//  398     // Return unprocessed events
//  399     return (events ^ ZDO_STATE_CHANGE_EVT);
        MOV	A,#0x10
        SJMP	??ZDApp_event_loop_10
//  400   }
//  401 
//  402   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_14:
        MOV	A,R6
        ANL	A,#0x8
        JZ	??ZDApp_event_loop_15
//  403   {
//  404     // User defined logic
//  405 
//  406     // Return unprocessed events
//  407     return (events ^ ZDO_COMMAND_CNF);
        MOV	A,#0x8
        XRL	A,R6
        MOV	R2,A
        SJMP	??ZDApp_event_loop_5
//  408   }
//  409 
//  410 #if defined( ZDSECMGR_SECURE ) && defined( RTR_NWK )
//  411   if ( events & ZDO_NEW_DEVICE )
//  412   {
//  413     // process the new device event
//  414     if ( ZDSecMgrNewDeviceEvent() == TRUE )
//  415     {
//  416       osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
//  417     }
//  418 
//  419     // Return unprocessed events
//  420     return (events ^ ZDO_NEW_DEVICE);
//  421   }
//  422 #endif  // ZDSECMGR_SECURE && RTR
//  423 
//  424 #if defined ( ZDSECMGR_COMMERCIAL )
//  425   if ( events & ZDO_SECMGR_EVENT )
//  426   {
//  427     ZDSecMgrEvent();
//  428 
//  429     // Return unprocessed events
//  430     return (events ^ ZDO_SECMGR_EVENT);
//  431   }
//  432 #endif // defined( ZDSECMGR_COMMERCIAL )
//  433 
//  434 #if   ( SECURE != 0  )
//  435   if ( events & ZDO_DEVICE_AUTH )
//  436   {
//  437     ZDApp_DeviceAuthEvt();
//  438 
//  439     // Return unprocessed events
//  440     return (events ^ ZDO_DEVICE_AUTH);
//  441   }
//  442 #endif  // SECURE
//  443 
//  444   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_15:
        MOV	A,#0x2
        ANL	A,R7
        MOV	R1,A
        CLR	A
        JNZ	??ZDApp_event_loop_16
        MOV	A,R1
??ZDApp_event_loop_16:
        JZ	??ZDApp_event_loop_17
//  445   {
//  446     ZDApp_SaveNetworkStateEvt();
//  447 
//  448     // Return unprocessed events
//  449     return (events ^ ZDO_NWK_UPDATE_NV);
        MOV	A,#0x2
        SJMP	??ZDApp_event_loop_8
//  450   }
//  451 
//  452 #if ( SECURE != 0  )
//  453   if ( events & ZDO_FRAMECOUNTER_CHANGE )
//  454   {
//  455     if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
//  456       ZDApp_SaveNwkKey();
//  457 
//  458     // Return unprocessed events
//  459     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
//  460   }
//  461 #endif
//  462 
//  463   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_17:
        MOV	A,R6
        ANL	A,#0x4
        JZ	??ZDApp_event_loop_18
//  464   {
//  465     // The device has been in the UNAUTH state, so reset
//  466     // Note: there will be no return from this call
//  467     SystemReset();
        CLR	0xa8.7
        MOV	0xc9,#-0x55
        MOV	0xc9,#0x5b
??ZDApp_event_loop_19:
        NOP
        SJMP	??ZDApp_event_loop_19
//  468   }
//  469 
//  470   // Discard or make more handlers
//  471   return 0;
??ZDApp_event_loop_18:
        MOV	R2,#0x0
        MOV	R3,#0x0
??ZDApp_event_loop_5:
        LJMP	??Subroutine26_1 & 0xFFFF
        CFI EndBlock cfiBlock1
//  472 }
//  473 
//  474 /*********************************************************************
//  475  * Application Functions
//  476  */
//  477 
//  478 /*********************************************************************
//  479  * @fn      ZDOInitDevice
//  480  *
//  481  * @brief   Start the device in the network.  This function will read
//  482  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  483  *   restore the network state of the device.
//  484  *
//  485  * @param   startDelay - timeDelay to start device (in milliseconds).
//  486  *      There is a jitter added to this delay:
//  487  *              ((NWK_START_DELAY + startDelay)
//  488  *              + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  489  *
//  490  * NOTE:    If the application would like to force a "new" join, the
//  491  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  492  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  493  *          this function. "new" join means to not restore the network
//  494  *          state of the device. Use zgWriteStartupOptions() to set these
//  495  *          options.
//  496  *
//  497  * @return
//  498  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  499  *          restored.
//  500  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  501  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  502  *          it could mean that there was no network state to restore.
//  503  *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
//  504  *          with the rejoin option set to TRUE.  So, the device was not
//  505  *          started in the network (one time only).  The next time this
//  506  *          function is called it will start.
//  507  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  508 uint8 ZDOInitDevice( uint16 startDelay )
ZDOInitDevice:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZDOInitDevice
//  509 {
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlInit
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlStartup
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDOInitDevice, osal_rand
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDOInitDevice, ZDApp_NetworkInit
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  510   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  511   uint16 extendedDelay = 0;
//  512 
//  513   devState = DEV_INIT;    // Remove the Hold state
        MOV	A,#0x1
        MOV	DPTR,#devState
        MOVX	@DPTR,A
//  514 
//  515   // Initialize leave control logic
//  516   ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        MOV	DPTR,#(ZDApp_LeaveCtrlInit & 0xffff)
        MOV	A,#((ZDApp_LeaveCtrlInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  517 
//  518   // Check leave control reset settings
//  519   ZDApp_LeaveCtrlStartup( &devState, &startDelay );
        ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#(devState & 0xff)
        MOV	R3,#((devState >> 8) & 0xff)
        MOV	DPTR,#(ZDApp_LeaveCtrlStartup & 0xffff)
        MOV	A,#((ZDApp_LeaveCtrlStartup >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  520 
//  521   // Leave may make the hold state come back
//  522   if ( devState == DEV_HOLD )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JNZ	??ZDOInitDevice_0
//  523     return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
        MOV	R1,#0x2
        SJMP	??ZDOInitDevice_1
//  524 
//  525 #if defined ( NV_RESTORE )
//  526   // Get Keypad directly to see if a reset nv is needed.
//  527   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  528   // while booting to skip past NV Restore.
//  529   if ( HalKeyRead() == SW_BYPASS_NV )
//  530     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  531   else
//  532   {
//  533     // Determine if NV should be restored
//  534     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  535   }
//  536 
//  537   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  538   {
//  539     networkStateNV = ZDApp_RestoreNetworkState();
//  540   }
//  541   else
//  542   {
//  543     // Wipe out the network state in NV
//  544     NLME_InitNV();
//  545     NLME_SetDefaultNV();
//  546     ZDAppSetupProtoVersion();
//  547   }
//  548 #endif
//  549 
//  550   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
//  551   {
//  552     ZDAppDetermineDeviceType();
//  553 
//  554     // Only delay if joining network - not restoring network state
//  555     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  556               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
??ZDOInitDevice_0:
        ; Setup parameters for call to function osal_rand
        MOV	DPTR,#(osal_rand & 0xffff)
        MOV	A,#((osal_rand >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	R0,?V0 + 0
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,#0x7f
        ANL	A,R0
        MOV	R0,A
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,#0x64
        ADD	A,R0
        MOV	R2,A
        CLR	A
        ADDC	A,R1
        MOV	R3,A
//  557   }
//  558 
//  559   // Trigger the network start
//  560   ZDApp_NetworkInit( extendedDelay );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV	DPTR,#(ZDApp_NetworkInit & 0xffff)
        MOV	A,#((ZDApp_NetworkInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  561 
//  562   return ( networkStateNV );
        MOV	R1,#0x1
??ZDOInitDevice_1:
        LJMP	?Subroutine26 & 0xFFFF
        CFI EndBlock cfiBlock2
//  563 }
//  564 
//  565 /*********************************************************************
//  566  * @fn      ZDApp_ReadNetworkRestoreState
//  567  *
//  568  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  569  *          or not to restore the network state.
//  570  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  571  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  572  *
//  573  * @param   none
//  574  *
//  575  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  576  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  577  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  578  *          ZCD_NV_STARTUP_OPTION
//  579  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  580 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ZDApp_ReadNetworkRestoreState
//  581 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  582   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV	R6,#0x0
//  583 
//  584   // Look for the New Network State option.
//  585   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        MOV	DPTR,#(zgReadStartupOptions & 0xffff)
        MOV	A,#((zgReadStartupOptions >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	C,0xE0 /* A   */.1
        JNC	??ZDApp_ReadNetworkRestoreState_0
//  586   {
//  587     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        INC	R6
//  588   }
//  589 
//  590   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV	A,R6
        MOV	R1,A
        SJMP	??Subroutine27_0
        CFI EndBlock cfiBlock3
//  591 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Valid
??Subroutine27_0:
        MOV	R7,#0x1
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  592 
//  593 /*********************************************************************
//  594  * @fn      ZDAppDetermineDeviceType()
//  595  *
//  596  * @brief   Determines the type of device to start.  Right now
//  597  *          this only works with the SOFT_START feature.  So it doesn't
//  598  *          support the end device type.
//  599  *
//  600  *          Looks at zgDeviceLogicalType and determines what type of
//  601  *          device to start.  The types are:
//  602  *            ZG_DEVICETYPE_COORDINATOR
//  603  *            ZG_DEVICETYPE_ROUTER
//  604  *            ZG_DEVICETYPE_ENDDEVICE - not supported yet.
//  605  *            ZG_DEVICETYPE_SOFT - looks for coordinator, if one doesn't
//  606  *               exist, becomes one.  This option is should only be used
//  607  *               if the system is manually configured and you are insured
//  608  *               that the first device is started before all the other
//  609  *               devices are started.
//  610  *
//  611  * @param   none
//  612  *
//  613  * @return  none
//  614  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  615 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ZDAppDetermineDeviceType
//  616 {
        ; Saved register size: 0
        ; Auto size: 0
//  617   if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
        LJMP	?BRET
        CFI EndBlock cfiBlock5
//  618     return;
//  619 
//  620 #if defined ( SOFT_START )
//  621   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
//  622   {
//  623     devStartMode = MODE_HARD;     // Start as a coordinator
//  624     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
//  625   }
//  626   else
//  627   {
//  628     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER )
//  629     {
//  630       softStartAllowCoord = FALSE;  // Don't allow coord to start
//  631       continueJoining = TRUE;
//  632     }
//  633     devStartMode = MODE_JOIN;     // Assume joining
//  634   }
//  635 #endif // SOFT_START
//  636 }
//  637 
//  638 /*********************************************************************
//  639  * @fn      ZDApp_NetworkStartEvt()
//  640  *
//  641  * @brief   Process the Network Start Event
//  642  *
//  643  * @param   none
//  644  *
//  645  * @return  none
//  646  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  647 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ZDApp_NetworkStartEvt
//  648 {
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  649   if ( nwkStatus == ZSuccess )
        MOV	DPTR,#nwkStatus
        MOVX	A,@DPTR
        JNZ	??ZDApp_NetworkStartEvt_0
//  650   {
//  651     // Successfully started a ZigBee network
//  652     if ( devState == DEV_COORD_STARTING )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0x8
        JNZ	??ZDApp_NetworkStartEvt_1
//  653     {
//  654       devState = DEV_ZB_COORD;
        MOV	A,#0x9
        MOVX	@DPTR,A
//  655 
//  656 #if ( SECURE != 0 )
//  657       // Initialize keys
//  658       SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0 );
//  659       SSP_SwitchNwkKey( 0 );
//  660 #endif
//  661     }
//  662 
//  663     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV	R1,#0x0
        MOV	DPTR,#(osal_pwrmgr_device & 0xffff)
        MOV	A,#((osal_pwrmgr_device >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  664     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        SJMP	??ZDApp_NetworkStartEvt_2
//  665   }
//  666   else
//  667   {
//  668     // Try again with a higher energy threshold !!
//  669     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        MOV	DPTR,#(NLME_GetEnergyThreshold & 0xffff)
        MOV	A,#((NLME_GetEnergyThreshold >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R0,A
        MOV	A,#0x10
        ADD	A,R0
        MOV	R0,A
        CLR	A
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R0
        SUBB	A,#-0x1
        MOV	A,R1
        SUBB	A,#0x0
        CLR	C
        XRL	A,PSW
        RLC	A
        JNC	??ZDApp_NetworkStartEvt_3
//  670     {
//  671       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        MOV	A,#((NLME_GetEnergyThreshold >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        ADD	A,#0x10
        MOV	R1,A
        MOV	DPTR,#(NLME_SetEnergyThreshold & 0xffff)
        MOV	A,#((NLME_SetEnergyThreshold >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  672       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV	R2,#0x1
        SJMP	??ZDApp_NetworkStartEvt_4
//  673     }
//  674     else
//  675     {
//  676       // Failed to start network. Enter a dormant state (until user intervenes)
//  677       devState = DEV_INIT;
??ZDApp_NetworkStartEvt_3:
        MOV	A,#0x1
        MOV	DPTR,#devState
        MOVX	@DPTR,A
//  678       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
??ZDApp_NetworkStartEvt_2:
        MOV	R2,#0x10
??ZDApp_NetworkStartEvt_4:
        LJMP	?Subroutine31 & 0xFFFF
        CFI EndBlock cfiBlock6
//  679     }
//  680   }
//  681 }
//  682 
//  683 #if ( SECURE != 0 )
//  684 /*********************************************************************
//  685  * @fn      ZDApp_DeviceAuthEvt()
//  686  *
//  687  * @brief   Process the Device Authentic Event
//  688  *
//  689  * @param   none
//  690  *
//  691  * @return  none
//  692  */
//  693 void ZDApp_DeviceAuthEvt( void )
//  694 {
//  695   // received authentication from trust center
//  696   if ( devState == DEV_END_DEVICE_UNAUTH )
//  697   {
//  698     // Stop the reset timer so it doesn't reset
//  699     ZDApp_ResetTimerCancel();
//  700 
//  701     devState = DEV_END_DEVICE;
//  702     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
//  703 
//  704     // Set the Power Manager Device
//  705 #if defined ( POWER_SAVING )
//  706     osal_pwrmgr_device( PWRMGR_BATTERY );
//  707 #endif
//  708 
//  709 #if defined ( RTR_NWK )
//  710     if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
//  711     {
//  712       // NOTE: first two parameters are not used, see NLMEDE.h for details
//  713       NLME_StartRouterRequest( 0, 0, false );
//  714     }
//  715 #endif  // RTR
//  716 
//  717       // Notify to save info into NV
//  718     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 100 );
//  719 
//  720     // Save off the security
//  721     ZDApp_SaveNwkKey();
//  722 
//  723 #if defined ( ZDO_ENDDEVICE_ANNCE_GENERATE )
//  724     ZDP_EndDeviceAnnce( ZDAppNwkAddr.addr.shortAddr, saveExtAddr,
//  725                        ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
//  726 #endif
//  727   }
//  728   else
//  729   {
//  730     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
//  731   }
//  732 }
//  733 #endif
//  734 
//  735 /*********************************************************************
//  736  * @fn      ZDApp_SaveNetworkStateEvt()
//  737  *
//  738  * @brief   Process the Save the Network State Event
//  739  *
//  740  * @param   none
//  741  *
//  742  * @return  none
//  743  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  744 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ZDApp_SaveNetworkStateEvt
//  745 {
        ; Saved register size: 0
        ; Auto size: 0
//  746 #if defined ( NV_RESTORE )
//  747  #if defined ( NV_TURN_OFF_RADIO )
//  748   // Turn off the radio's receiver during an NV update
//  749   byte RxOnIdle;
//  750   byte x = false;
//  751   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
//  752   ZMacSetReq( ZMacRxOnIdle, &x );
//  753  #endif
//  754 
//  755   // Update the Network State in NV
//  756   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
//  757                  NWK_NV_DEVICELIST_ENABLE |
//  758                  NWK_NV_BINDING_ENABLE    |
//  759                  NWK_NV_ADDRMGR_ENABLE );
//  760 
//  761   // Reset the NV startup option to resume from NV by
//  762   // clearing the "New" join option.
//  763   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
//  764 
//  765  #if defined ( NV_TURN_OFF_RADIO )
//  766   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
//  767  #endif
//  768 #endif  // NV_RESTORE
//  769 }
        LJMP	?BRET
        CFI EndBlock cfiBlock7
//  770 
//  771 /*********************************************************************
//  772  * @fn      ZDApp_RestoreNetworkState()
//  773  *
//  774  * @brief   This function will restore the network state of the
//  775  *          device if the network state is stored in NV.
//  776  *
//  777  * @param   none
//  778  *
//  779  * @return
//  780  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  781  *          restored.
//  782  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
//  783  *          This could mean that zgStartupOption said to not restore, or
//  784  *          it could mean that there was no network state to restore.
//  785  *
//  786  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  787 uint8 ZDApp_RestoreNetworkState( void )
ZDApp_RestoreNetworkState:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ZDApp_RestoreNetworkState
//  788 {
        FUNCALL ZDApp_RestoreNetworkState, NLME_InitNV
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZDApp_RestoreNetworkState, NLME_RestoreFromNV
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZDApp_RestoreNetworkState, NLME_GetShortAddr
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  789   byte nvStat;
//  790 #if ( SECURE != 0 )
//  791   nwkActiveKeyItems keyItems;
//  792 #endif
//  793 
//  794   // Initialize NWK NV items
//  795   nvStat = NLME_InitNV();
        ; Setup parameters for call to function NLME_InitNV
        MOV	DPTR,#(NLME_InitNV & 0xffff)
        MOV	A,#((NLME_InitNV >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R6,A
//  796 
//  797   if ( nvStat != NV_OPER_FAILED )
        MOV	A,#0x10
        XRL	A,R6
        JZ	??ZDApp_RestoreNetworkState_0
//  798   {
//  799     if ( NLME_RestoreFromNV() )
        ; Setup parameters for call to function NLME_RestoreFromNV
        MOV	DPTR,#(NLME_RestoreFromNV & 0xffff)
        MOV	A,#((NLME_RestoreFromNV >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JZ	??ZDApp_RestoreNetworkState_1
//  800     {
//  801       // Are we a coordinator
//  802       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        MOV	DPTR,#(NLME_GetShortAddr & 0xffff)
        MOV	A,#((NLME_GetShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#ZDAppNwkAddr
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  803       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        JNZ	??ZDApp_RestoreNetworkState_2
        INC	DPTR
        MOVX	A,@DPTR
??ZDApp_RestoreNetworkState_2:
        JNZ	??ZDApp_RestoreNetworkState_3
//  804       {
//  805         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        ANL	A,#0xf8
        MOVX	@DPTR,A
//  806       }
//  807       devStartMode = MODE_RESUME;
??ZDApp_RestoreNetworkState_3:
        MOV	A,#0x1
        MOV	DPTR,#devStartMode
        MOVX	@DPTR,A
//  808     }
//  809     else
//  810       nvStat = NV_ITEM_UNINIT;
//  811 
//  812 #if   ( SECURE != 0  )
//  813     nwkFrameCounterChanges = 0;
//  814     osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
//  815     osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
//  816 
//  817   #if defined ( ZDO_COORDINATOR )
//  818     ZDApp_RestoreNwkKey();
//  819   #endif // ZDO_COORDINATOR
//  820 #endif // SECURE
//  821 
//  822     // The default for RxOnWhenIdle is true for RTR_NWK and false for end devices
//  823     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
//  824     // other than default.
//  825   }
//  826 
//  827   if ( nvStat == ZSUCCESS )
??ZDApp_RestoreNetworkState_0:
        MOV	A,R6
        JNZ	??ZDApp_RestoreNetworkState_1
//  828     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
        MOV	R1,#0x0
        SJMP	??ZDApp_RestoreNetworkState_4
//  829   else
//  830     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
??ZDApp_RestoreNetworkState_1:
        MOV	R1,#0x1
??ZDApp_RestoreNetworkState_4:
        LJMP	??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock8
//  831 }
//  832 
//  833 /*********************************************************************
//  834  * @fn      ZDAppSetupProtoVersion()
//  835  *
//  836  * @brief   Setup the Network Protocol version
//  837  *
//  838  * NOTES:
//  839  *   Take care of setting initial protocol value if we're possibly a
//  840  *   Coordinator.
//  841  *
//  842  *   If DEF_PROTO_VERS macro is not defined get version
//  843  *   from NV. if the NV version isn't valid default to Version 1.1.
//  844  *
//  845  *   if DEF_PROTO_VERS macro is defined respect it.
//  846  *
//  847  *   This initialization section works for End Devices as well.
//  848  *
//  849  *   There are two chores: make sure that if we're the Coordinator we start
//  850  *   the correct network version, and set things up so that if we're a
//  851  *   joining device we join the correct network. In both cases this init
//  852  *   function runs so take care of both cases here.
//  853  *
//  854  * @param   none
//  855  *
//  856  * @return  none
//  857  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  858 void ZDAppSetupProtoVersion( void )
ZDAppSetupProtoVersion:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ZDAppSetupProtoVersion
//  859 {
        FUNCALL ZDAppSetupProtoVersion, NLME_GetProtocolVersion
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDAppSetupProtoVersion, NLME_SetRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        FUNCALL ZDAppSetupProtoVersion, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 1, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 1)
//  860   uint8 restore = 1;  // update NV or not: could save a flash erase cycle
//  861 
//  862 #if !defined ( DEF_PROTO_VERS )
//  863   uint8 protoVer = NLME_GetProtocolVersion(); // get  protocol version from NV
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//  864 
//  865   // it is possible that it is uninitialized.
//  866   if ((protoVer != ZB_PROT_V1_0) && (protoVer != ZB_PROT_V1_1))
        XRL	A,#0x1
        JZ	??ZDAppSetupProtoVersion_0
        MOVX	A,@DPTR
        XRL	A,#0x2
        JZ	??ZDAppSetupProtoVersion_0
//  867   {
//  868     // NV value not valid. 'protoVer' must be set.
//  869 
//  870     // For Coordinator behavior
//  871     // CUSTOMER NOTE: change the following to default the started network
//  872     // to a protocol version other than 1.1
//  873     protoVer = ZB_PROT_V1_1;
        MOV	A,#0x2
        MOVX	@DPTR,A
//  874   }
//  875   else
//  876   {
//  877     // NV valid. 'protoVer' is valid.
//  878     restore = 0;  // no need to update NV
//  879 
//  880     // For joining device behavior. Respect the NV version by making
//  881     // all entries in the version array the same as the NV value.
//  882     osal_memset(sPVerList, protoVer, sizeof(sPVerList));
//  883   }
//  884 #else
//  885   // macro defined. respect it.
//  886 
//  887   // don't compile if defined to an illegal value.
//  888   #if (DEF_PROTO_VERS != ZB_PROT_V1_0) && (DEF_PROTO_VERS != ZB_PROT_V1_1)
//  889     #error  No legal value for default protocol version
//  890   #endif
//  891   uint8 protoVer = DEF_PROTO_VERS;
//  892 
//  893   // For joining device behavior. respect the NV version by making
//  894   // all entries in the version array the same as the macro value.
//  895   osal_memset(sPVerList, protoVer, sizeof(sPVerList));
//  896 #endif   // DEF_PROTO_VERS
//  897 
//  898   // if we are or can be the Coordinator then we must update
//  899   // it here. if we're going to be a joining device setting will be done in the
//  900   // confirm callback if necessary.
//  901   if (restore)
//  902   {
//  903     // we need to set NV to a (possibly) new value
//  904     NLME_SetRequest(nwkProtocolVersion, 0, &protoVer);
        ; Setup parameters for call to function NLME_SetRequest
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	R1,#-0x68
        MOV	DPTR,#(NLME_SetRequest & 0xffff)
        MOV	A,#((NLME_SetRequest >> 16) & 0xff)
        SJMP	??ZDAppSetupProtoVersion_1
//  905   }
??ZDAppSetupProtoVersion_0:
        ; Setup parameters for call to function osal_memset
        MOV	R4,#0x2
        MOV	R5,#0x0
        MOV	R2,#(??sPVerList & 0xff)
        MOV	R3,#((??sPVerList >> 8) & 0xff)
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
??ZDAppSetupProtoVersion_1:
        LJMP	?Subroutine25 & 0xFFFF
        CFI EndBlock cfiBlock9
//  906 }
//  907 
//  908 /*********************************************************************
//  909  * @fn      ZDApp_InitUserDesc()
//  910  *
//  911  * @brief   Initialize the User Descriptor, the descriptor is read from NV
//  912  *          when needed.  If you want to initialize the User descriptor to
//  913  *          something other than all zero, do it here.
//  914  *
//  915  * @param   none
//  916  *
//  917  * @return  none
//  918  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  919 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ZDApp_InitUserDesc
//  920 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME XSTACK, 29, STACK
        ARGFRAME XSTACK, 29, STACK
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME XSTACK, 31, STACK
        ARGFRAME XSTACK, 31, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV	A,#-0x11
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  921   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
//  922 
//  923   // Initialize the User Descriptor, the descriptor is read from NV
//  924   // when needed.  If you want to initialize the User descriptor to something
//  925   // other than all zero, do it here.
//  926   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV	R4,#0x11
        MOV	R5,#0x0
        MOV	R1,#0x0
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  927   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
//  928          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_item_init
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV	R4,#0x11
        MOV	R5,#0x0
        MOV	R2,#-0x7f
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_init & 0xffff)
        MOV	A,#((osal_nv_item_init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	A,R1
        JNZ	??ZDApp_InitUserDesc_0
//  929   {
//  930     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
//  931          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV	?V0 + 0,#0x11
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7f
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	A,R1
        JNZ	??ZDApp_InitUserDesc_0
//  932     {
//  933       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JZ	??ZDApp_InitUserDesc_0
//  934       {
//  935         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        SETB	0xE0 /* A   */.4
        MOVX	@DPTR,A
//  936       }
//  937     }
//  938   }
//  939 }
??ZDApp_InitUserDesc_0:
        MOV	A,#0x11
        LJMP	??Subroutine26_0 & 0xFFFF
        CFI EndBlock cfiBlock10
//  940 
//  941 /*********************************************************************
//  942  * @fn      ZDAppCheckForHoldKey()
//  943  *
//  944  * @brief   Check for key to set the device into Hold Auto Start
//  945  *
//  946  * @param   none
//  947  *
//  948  * @return  none
//  949  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  950 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function ZDAppCheckForHoldKey
//  951 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  952 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  953   // Get Keypad directly to see if a HOLD_START is needed.
//  954   // Hold down the SW_BYPASS_START key (see OnBoard.h)
//  955   // while booting to avoid starting up the device.
//  956   if ( HalKeyRead () == SW_BYPASS_START)
        ; Setup parameters for call to function HalKeyRead
        MOV	DPTR,#(HalKeyRead & 0xffff)
        MOV	A,#((HalKeyRead >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JNZ	??ZDAppCheckForHoldKey_0
//  957   {
//  958     // Change the device state to HOLD on start up
//  959     devState = DEV_HOLD;
        CLR	A
        MOV	DPTR,#devState
        MOVX	@DPTR,A
//  960   }
//  961 #endif // HAL_KEY
//  962 }
??ZDAppCheckForHoldKey_0:
        LJMP	??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock11
//  963 
//  964 /*********************************************************************
//  965  * @fn      ZDApp_ProcessOSALMsg()
//  966  *
//  967  * @brief   Process the incoming task message.
//  968  *
//  969  * @param   msgPtr - message to process
//  970  *
//  971  * @return  none
//  972  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  973 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ZDApp_ProcessOSALMsg
//  974 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NodeProfileSync
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, NLME_JoinRequest
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, NLME_ReJoinRequest
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetPollRate
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetQueuedPollRate
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetResponseRate
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessNetworkJoin
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL ZDApp_ProcessOSALMsg, osal_set_event
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  975   // Data Confirmation message fields
//  976   byte sentEP;       // This should always be 0
//  977   byte sentStatus;
//  978   afDataConfirm_t *afDataConfirm;
//  979 
//  980   switch ( msgPtr->event )
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        LCALL	?UC_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessOSALMsg>_0`:
        DB        0
        DB        4
        DB        1
        DW        ??ZDApp_ProcessOSALMsg_0
        DB        2
        DW        ??ZDApp_ProcessOSALMsg_1
        DB        3
        DW        ??ZDApp_ProcessOSALMsg_2
        DB        26
        DW        ??ZDApp_ProcessOSALMsg_3
        DW        ??ZDApp_ProcessOSALMsg_4
//  981   {
//  982     // Incoming ZDO Message
//  983     case AF_INCOMING_MSG_CMD:
//  984       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_3:
        ; Setup parameters for call to function ZDP_IncomingData
        MOV	DPTR,#(ZDP_IncomingData & 0xffff)
        MOV	A,#((ZDP_IncomingData >> 16) & 0xff)
        LJMP	??CrossCallReturnLabel_69 & 0xFFFF
//  985       break;
//  986 
//  987     case AF_DATA_CONFIRM_CMD:
//  988       // This message is received as a confirmation of a data packet sent.
//  989       // The status is of ZStatus_t type [defined in NLMEDE.h]
//  990       // The message fields are defined in AF.h
//  991       afDataConfirm = (afDataConfirm_t *)msgPtr;
//  992       sentEP = afDataConfirm->endpoint;
//  993       sentStatus = afDataConfirm->hdr.status;
//  994 
//  995       // Action taken when confirmation is received.
//  996       /* Put code here */
//  997 #if !defined ( RTR_NWK )
//  998       if ( sentStatus == ZMacNoACK )
//  999       {
// 1000         //ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
// 1001       }
// 1002 #else
// 1003      (void)sentStatus;
// 1004 #endif
// 1005       break;
// 1006 
// 1007     case ZDO_NWK_DISC_CNF:
// 1008       if (devState != DEV_NWK_DISC)
??ZDApp_ProcessOSALMsg_0:
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0x2
        JZ	$+5
        LJMP	??ZDApp_ProcessOSALMsg_4 & 0xFFFF
// 1009       {
// 1010       }
// 1011 #if !defined ( ZDO_COORDINATOR ) || defined ( SOFT_START )
// 1012   #if defined ( MANAGED_SCAN )
// 1013       else if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
// 1014   #else
// 1015       else if ( (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status == ZDO_SUCCESS) && (zdoDiscCounter++ > NUM_DISC_ATTEMPTS) )
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        MOVX	A,@DPTR
        JZ	$+5
        LJMP	??ZDApp_ProcessOSALMsg_5 & 0xFFFF
        MOV	DPTR,#zdoDiscCounter
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,#0x1
        ADD	A,R2
        MOVX	@DPTR,A
        MOV	A,R2
        CLR	C
        SUBB	A,#0x3
        JNC	$+5
        LJMP	??ZDApp_ProcessOSALMsg_5 & 0xFFFF
// 1016   #endif
// 1017       {
// 1018         if ( devStartMode == MODE_JOIN )
        MOV	DPTR,#devStartMode
        MOVX	A,@DPTR
        JNZ	??ZDApp_ProcessOSALMsg_6
// 1019         {
// 1020           devState = DEV_NWK_JOINING;
        MOV	A,#0x3
        MOV	DPTR,#devState
        MOVX	@DPTR,A
// 1021 
// 1022           ZDApp_NodeProfileSync((ZDO_NetworkDiscoveryCfm_t *)msgPtr);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        MOV	A,R6
        MOV	R2,A
        MOV	DPTR,#(ZDApp_NodeProfileSync & 0xffff)
        MOV	A,#((ZDApp_NodeProfileSync >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1023 
// 1024           if ( NLME_JoinRequest( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->extendedPANID,
// 1025                BUILD_UINT16( ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdLSB, ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->panIdMSB ),
// 1026                ((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->logicalChannel,
// 1027                ZDO_Config_Node_Descriptor.CapabilityFlags ) != ZSuccess )
        ; Setup parameters for call to function NLME_JoinRequest
        MOV	DPTR,#(ZDO_Config_Node_Descriptor + 2)
        LCALL	??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_30:
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        CLR	A
        ADD	A,R4
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R5,A
        MOV	A,R6
        ADD	A,#0x6
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(NLME_JoinRequest & 0xffff)
        MOV	A,#((NLME_JoinRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        SJMP	??ZDApp_ProcessOSALMsg_7
// 1028           {
// 1029             ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1030                 + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1031           }
// 1032         }
// 1033         else if ( devStartMode == MODE_REJOIN )
??ZDApp_ProcessOSALMsg_6:
        XRL	A,#0x3
        JNZ	??ZDApp_ProcessOSALMsg_8
// 1034         {
// 1035           devState = DEV_NWK_REJOIN;
        MOV	A,#0x4
        MOV	DPTR,#devState
        MOVX	@DPTR,A
// 1036           if ( NLME_ReJoinRequest() != ZSuccess )
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOV	DPTR,#(NLME_ReJoinRequest & 0xffff)
        MOV	A,#((NLME_ReJoinRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDApp_ProcessOSALMsg_7:
        MOV	A,R1
        JZ	??ZDApp_ProcessOSALMsg_8
// 1037           {
// 1038             ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1039                 + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        MOV	DPTR,#(osal_rand & 0xffff)
        MOV	A,#((osal_rand >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1040           }
// 1041         }
// 1042 
// 1043         if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??ZDApp_ProcessOSALMsg_8:
        MOV	DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.3
        JNC	??ZDApp_ProcessOSALMsg_4
// 1044         {
// 1045           // The receiver is on, turn network layer polling off.
// 1046           NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(NLME_SetPollRate & 0xffff)
        MOV	A,#((NLME_SetPollRate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1047           NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(NLME_SetQueuedPollRate & 0xffff)
        MOV	A,#((NLME_SetQueuedPollRate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1048           NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(NLME_SetResponseRate & 0xffff)
        MOV	A,#((NLME_SetResponseRate >> 16) & 0xff)
        SJMP	??CrossCallReturnLabel_69
// 1049         }
// 1050       }
// 1051       else
// 1052       {
// 1053 #if defined ( SOFT_START ) && !defined ( VIRTKEY_SOFT_START )
// 1054   #if defined ( MANAGED_SCAN )
// 1055         if ( (softStartAllowCoord)
// 1056             && (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status != ZDO_SUCCESS )
// 1057               && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
// 1058   #else
// 1059         if ( (softStartAllowCoord)
// 1060             && (((ZDO_NetworkDiscoveryCfm_t *)msgPtr)->hdr.status != ZDO_SUCCESS )
// 1061               && (zdoDiscCounter++ > NUM_DISC_ATTEMPTS) )
// 1062   #endif
// 1063         {
// 1064           ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
// 1065           devStartMode = MODE_HARD;
// 1066         }
// 1067         else if ( continueJoining == FALSE )
// 1068         {
// 1069           devState = DEV_HOLD;
// 1070           osal_stop_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT );
// 1071           break;    // Don't init
// 1072         }
// 1073 #endif
// 1074   #if defined ( MANAGED_SCAN )
// 1075         ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
// 1076   #else
// 1077         if ( continueJoining )
??ZDApp_ProcessOSALMsg_5:
        MOV	DPTR,#continueJoining
        MOVX	A,@DPTR
        JZ	??ZDApp_ProcessOSALMsg_4
// 1078         {
// 1079           ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
// 1080               + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        MOV	DPTR,#(osal_rand & 0xffff)
        MOV	A,#((osal_rand >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	A,#-0x1
        ANL	A,?V0 + 0
        MOV	R0,A
        MOV	A,#0x64
        ADD	A,R0
        MOV	R2,A
        CLR	A
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(ZDApp_NetworkInit & 0xffff)
        MOV	A,#((ZDApp_NetworkInit >> 16) & 0xff)
        SJMP	??CrossCallReturnLabel_69
// 1081         }
// 1082   #endif
// 1083       }
// 1084 #endif  // !ZDO_COORDINATOR
// 1085       break;
// 1086 
// 1087 #if !defined( ZDO_COORDINATOR ) || defined( SOFT_START )
// 1088     case ZDO_NWK_JOIN_IND:
// 1089       ZDApp_ProcessNetworkJoin();
??ZDApp_ProcessOSALMsg_1:
        ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
        MOV	DPTR,#(ZDApp_ProcessNetworkJoin & 0xffff)
        MOV	A,#((ZDApp_ProcessNetworkJoin >> 16) & 0xff)
        SJMP	??CrossCallReturnLabel_69
// 1090       break;
// 1091 
// 1092     case ZDO_NWK_JOIN_REQ:
// 1093       retryCnt = 0;
??ZDApp_ProcessOSALMsg_2:
        CLR	A
        MOV	DPTR,#??retryCnt
        MOVX	@DPTR,A
// 1094       devStartMode = MODE_RESUME;
        MOV	A,#0x1
        MOV	DPTR,#devStartMode
        MOVX	@DPTR,A
// 1095       _tmpRejoinState = true;
        MOV	DPTR,#_tmpRejoinState
        MOVX	@DPTR,A
// 1096       zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
        MOV	A,#0x2
        MOV	DPTR,#zgDefaultStartingScanDuration
        LCALL	?Subroutine2 & 0xFFFF
// 1097       ZDApp_NetworkInit( 0 );
??CrossCallReturnLabel_59:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1098 
// 1099       // indicate state change to apps
// 1100       devState = DEV_INIT;
        MOV	A,#0x1
        LCALL	?Subroutine0 & 0xFFFF
// 1101       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_69:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1102       break;
// 1103 #endif  // !ZDO_COORDINATOR
// 1104 
// 1105 #if defined ( ZDSECMGR_SECURE )
// 1106   #if defined ( ZDSECMGR_COMMERCIAL )
// 1107         case ZDO_ESTABLISH_KEY_CFM:
// 1108           ZDSecMgrEstablishKeyCfm
// 1109             ( (ZDO_EstablishKeyCfm_t*)msgPtr );
// 1110           break;
// 1111   #endif
// 1112 
// 1113   #if defined ( ZDSECMGR_COMMERCIAL )
// 1114     #if !defined ( ZDO_COORDINATOR ) || defined ( SOFT_START )
// 1115         case ZDO_ESTABLISH_KEY_IND:
// 1116           ZDSecMgrEstablishKeyInd
// 1117             ( (ZDO_EstablishKeyInd_t*)msgPtr );
// 1118           break;
// 1119     #endif
// 1120   #endif
// 1121 
// 1122   #if !defined ( ZDO_COORDINATOR ) || defined( SOFT_START )
// 1123         case ZDO_TRANSPORT_KEY_IND:
// 1124           ZDSecMgrTransportKeyInd
// 1125             ( (ZDO_TransportKeyInd_t*)msgPtr );
// 1126           break;
// 1127   #endif
// 1128 
// 1129   #if defined ( ZDO_COORDINATOR )
// 1130         case ZDO_UPDATE_DEVICE_IND:
// 1131           ZDSecMgrUpdateDeviceInd
// 1132             ( (ZDO_UpdateDeviceInd_t*)msgPtr );
// 1133           break;
// 1134   #endif
// 1135 
// 1136   #if defined ( RTR_NWK )
// 1137     #if !defined ( ZDO_COORDINATOR ) || defined( SOFT_START )
// 1138         case ZDO_REMOVE_DEVICE_IND:
// 1139           ZDSecMgrRemoveDeviceInd
// 1140             ( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1141           break;
// 1142     #endif
// 1143   #endif
// 1144 
// 1145   #if defined ( ZDSECMGR_COMMERCIAL )
// 1146     #if defined ( ZDO_COORDINATOR )
// 1147         case ZDO_REQUEST_KEY_IND:
// 1148           ZDSecMgrRequestKeyInd
// 1149             ( (ZDO_RequestKeyInd_t*)msgPtr );
// 1150           break;
// 1151     #endif
// 1152   #endif
// 1153 
// 1154   #if !defined ( ZDO_COORDINATOR ) || defined( SOFT_START )
// 1155         case ZDO_SWITCH_KEY_IND:
// 1156           ZDSecMgrSwitchKeyInd
// 1157             ( (ZDO_SwitchKeyInd_t*)msgPtr );
// 1158           break;
// 1159   #endif
// 1160 
// 1161 #endif // defined ( ZDSECMGR_SECURE )
// 1162 
// 1163     default:
// 1164       break;
// 1165   }
// 1166 
// 1167   (void)sentEP;
// 1168 }
??ZDApp_ProcessOSALMsg_4:
        SJMP	??Subroutine26_1
        CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x2
??Subroutine26_0:
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
??Subroutine26_1:
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13
// 1169 
// 1170 #if !defined( ZDO_COORDINATOR ) || defined( SOFT_START )
// 1171 /*********************************************************************
// 1172  * @fn      ZDApp_ProcessNetworkJoin()
// 1173  *
// 1174  * @brief
// 1175  *
// 1176  *   Save off the Network key information.
// 1177  *
// 1178  * @param   none
// 1179  *
// 1180  * @return  none
// 1181  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1182 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function ZDApp_ProcessNetworkJoin
// 1183 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_GetShortAddr
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, ZMacSetReq
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1184   if ( (devState == DEV_NWK_JOINING) ||
// 1185       ((devState == DEV_NWK_ORPHAN)  &&
// 1186        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0x3
        JZ	??ZDApp_ProcessNetworkJoin_0
        MOVX	A,@DPTR
        XRL	A,#0xa
        JZ	$+5
        LJMP	??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        ANL	A,#0x7
        XRL	A,#0x1
        JZ	$+5
        LJMP	??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
// 1187   {
// 1188     // Result of a Join attempt by this device.
// 1189     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV	DPTR,#nwkStatus
        MOVX	A,@DPTR
        JNZ	??ZDApp_ProcessNetworkJoin_3
// 1190     {
// 1191       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1192 
// 1193 #if defined ( POWER_SAVING )
// 1194       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1195 #endif
// 1196 
// 1197 #if   ( SECURE != 0  )
// 1198       if ( _NIB.SecurityLevel && (ZDApp_RestoreNwkKey() == false ) )
// 1199       {
// 1200         // wait for auth from trust center!!
// 1201         devState = DEV_END_DEVICE_UNAUTH;
// 1202 
// 1203         // Start the reset timer for MAX UNAUTH time
// 1204         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
// 1205       }
// 1206       else
// 1207 #endif  // SECURE
// 1208       {
// 1209 #if defined ( RTR_NWK )
// 1210         if ( devState == DEV_NWK_ORPHAN
// 1211             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0xa
        JNZ	??ZDApp_ProcessNetworkJoin_4
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        ANL	A,#0x7
        XRL	A,#0x2
        JZ	??ZDApp_ProcessNetworkJoin_4
// 1212         {
// 1213           // Change NIB state to router for restore
// 1214           _NIB.nwkState = NWK_ROUTER;
        MOV	A,#0x8
        MOV	DPTR,#(_NIB + 35)
        MOVX	@DPTR,A
// 1215         }
// 1216 #endif
// 1217         devState = DEV_END_DEVICE;
??ZDApp_ProcessNetworkJoin_4:
        MOV	A,#0x6
        MOV	DPTR,#devState
        MOVX	@DPTR,A
// 1218 #if defined ( RTR_NWK )
// 1219         // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1220   #if !defined (AUTO_SOFT_START)
// 1221         if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        ANL	A,#0x7
        XRL	A,#0x2
        JNZ	$+5
        LJMP	??ZDApp_ProcessNetworkJoin_5 & 0xFFFF
// 1222         {
// 1223           NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV	R3,#0x0
        MOV	R2,#0x0
        MOV	R1,#0x0
        MOV	DPTR,#(NLME_StartRouterRequest & 0xffff)
        MOV	A,#((NLME_StartRouterRequest >> 16) & 0xff)
        LJMP	??CrossCallReturnLabel_62 & 0xFFFF
// 1224         }
// 1225   #endif // AUTO_SOFT_START
// 1226 #endif  // RTR
// 1227 
// 1228 #if defined ( ZDO_ENDDEVICE_ANNCE_GENERATE )
// 1229         ZDP_EndDeviceAnnce( ZDAppNwkAddr.addr.shortAddr, saveExtAddr,
// 1230                            ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
// 1231 #endif
// 1232       }
// 1233     }
// 1234     else
// 1235     {
// 1236       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
??ZDApp_ProcessNetworkJoin_3:
        MOV	DPTR,#devStartMode
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??ZDApp_ProcessNetworkJoin_6
        MOV	DPTR,#??retryCnt
        MOVX	A,@DPTR
        INC	A
        MOVX	@DPTR,A
        JZ	??ZDApp_ProcessNetworkJoin_6
// 1237       {
// 1238         if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        MOV	DPTR,#(_NIB + 33)
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??ZDApp_ProcessNetworkJoin_7
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??ZDApp_ProcessNetworkJoin_7:
        JZ	??ZDApp_ProcessNetworkJoin_8
        MOV	DPTR,#(_NIB + 33)
        MOVX	A,@DPTR
        XRL	A,#0xfe
        JNZ	??ZDApp_ProcessNetworkJoin_9
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??ZDApp_ProcessNetworkJoin_9:
        JNZ	??ZDApp_ProcessNetworkJoin_10
// 1239           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_8:
        CLR	A
        MOV	DPTR,#devStartMode
        SJMP	??ZDApp_ProcessNetworkJoin_11
// 1240         else
// 1241         {
// 1242           devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_10:
        MOV	A,#0x3
        MOV	DPTR,#devStartMode
        MOVX	@DPTR,A
// 1243           _tmpRejoinState = true;
        MOV	A,#0x1
        MOV	DPTR,#_tmpRejoinState
??ZDApp_ProcessNetworkJoin_11:
        MOVX	@DPTR,A
// 1244         }
// 1245       }
// 1246 
// 1247       if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 1248            (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??ZDApp_ProcessNetworkJoin_6:
        ; Setup parameters for call to function NLME_GetShortAddr
        MOV	DPTR,#(NLME_GetShortAddr & 0xffff)
        MOV	A,#((NLME_GetShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	A,#-0x2
        XRL	A,?V0 + 0
        JNZ	??ZDApp_ProcessNetworkJoin_12
        MOV	A,#-0x1
        XRL	A,?V0 + 1
??ZDApp_ProcessNetworkJoin_12:
        JNZ	??ZDApp_ProcessNetworkJoin_13
        MOV	DPTR,#(_NIB + 20)
        MOVX	A,@DPTR
        XRL	A,#0xfe
        JNZ	??ZDApp_ProcessNetworkJoin_14
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??ZDApp_ProcessNetworkJoin_14:
        JZ	??ZDApp_ProcessNetworkJoin_15
// 1249       {
// 1250         uint16 addr = INVALID_NODE_ADDR;
??ZDApp_ProcessNetworkJoin_13:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,#-0x2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#-0x1
        MOVX	@DPTR,A
// 1251         // Invalidate nwk addr so end device does not use in its data reqs.
// 1252         _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV	DPTR,#(_NIB + 20)
        MOV	A,#-0x2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#-0x1
        LCALL	?Subroutine1 & 0xFFFF
// 1253         ZMacSetReq( ZMacShortAddress, (byte *)&addr );
??CrossCallReturnLabel_0:
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	R1,#0x53
        LCALL	ZMacSetReq & 0xFFFF
// 1254       }
// 1255 
// 1256       zdoDiscCounter = 1;
??ZDApp_ProcessNetworkJoin_15:
        MOV	A,#0x1
        MOV	DPTR,#zdoDiscCounter
        SJMP	??ZDApp_ProcessNetworkJoin_16
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
// 1257 
// 1258 //      ZDApp_NetworkInit( (uint16)
// 1259 //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
// 1260 //                          (NWK_START_DELAY * 5)) );
// 1261       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1262            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1263     }
// 1264   }
// 1265   else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
??ZDApp_ProcessNetworkJoin_1:
        MOVX	A,@DPTR
        XRL	A,#0x4
        JZ	$+5
        LJMP	??ZDApp_ProcessNetworkJoin_5 & 0xFFFF
// 1266   {
// 1267     // results of an orphaning attempt by this device
// 1268     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV	DPTR,#nwkStatus
        MOVX	A,@DPTR
        JNZ	??ZDApp_ProcessNetworkJoin_17
// 1269     {
// 1270 #if ( SECURE != 0 )
// 1271       ZDApp_RestoreNwkKey();
// 1272 #endif
// 1273       devState = DEV_END_DEVICE;
        MOV	A,#0x6
        LCALL	?Subroutine0 & 0xFFFF
// 1274       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_70:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1275       // setup Power Manager Device
// 1276 #if defined ( POWER_SAVING )
// 1277       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1278 #endif
// 1279 
// 1280       if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
        MOV	DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.3
        JNC	??ZDApp_ProcessNetworkJoin_5
// 1281       {
// 1282         // The receiver is on, turn network layer polling off.
// 1283         NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(NLME_SetPollRate & 0xffff)
        MOV	A,#((NLME_SetPollRate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1284         NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(NLME_SetQueuedPollRate & 0xffff)
        MOV	A,#((NLME_SetQueuedPollRate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1285         NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(NLME_SetResponseRate & 0xffff)
        MOV	A,#((NLME_SetResponseRate >> 16) & 0xff)
        SJMP	??CrossCallReturnLabel_62
// 1286       }
// 1287 
// 1288 #if defined ( ZDO_ENDDEVICE_ANNCE_GENERATE )
// 1289       ZDP_EndDeviceAnnce( ZDAppNwkAddr.addr.shortAddr, saveExtAddr,
// 1290                          ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
// 1291 #endif
// 1292 
// 1293     }
// 1294     else
// 1295     {
// 1296       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
??ZDApp_ProcessNetworkJoin_17:
        MOV	DPTR,#devStartMode
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??ZDApp_ProcessNetworkJoin_18
        MOV	DPTR,#??retryCnt
        MOVX	A,@DPTR
        INC	A
        MOVX	@DPTR,A
        JZ	??ZDApp_ProcessNetworkJoin_18
// 1297       {
// 1298         if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        MOV	DPTR,#(_NIB + 33)
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??ZDApp_ProcessNetworkJoin_19
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??ZDApp_ProcessNetworkJoin_19:
        JZ	??ZDApp_ProcessNetworkJoin_20
        MOV	DPTR,#(_NIB + 33)
        MOVX	A,@DPTR
        XRL	A,#0xfe
        JNZ	??ZDApp_ProcessNetworkJoin_21
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??ZDApp_ProcessNetworkJoin_21:
        JNZ	??ZDApp_ProcessNetworkJoin_22
// 1299           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_20:
        CLR	A
        MOV	DPTR,#devStartMode
        SJMP	??ZDApp_ProcessNetworkJoin_16
// 1300         else
// 1301         {
// 1302           devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_22:
        MOV	A,#0x3
        MOV	DPTR,#devStartMode
        MOVX	@DPTR,A
// 1303           _tmpRejoinState = true;
        MOV	A,#0x1
        MOV	DPTR,#_tmpRejoinState
??ZDApp_ProcessNetworkJoin_16:
        MOVX	@DPTR,A
// 1304         }
// 1305       }
// 1306 
// 1307       // setup a retry for later...
// 1308       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1309            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
??ZDApp_ProcessNetworkJoin_18:
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function osal_rand
        MOV	DPTR,#(osal_rand & 0xffff)
        MOV	A,#((osal_rand >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1310     }
// 1311   }
// 1312   else
// 1313   {
// 1314     // this is an error case!!
// 1315   }
// 1316 }
??ZDApp_ProcessNetworkJoin_5:
        LJMP	?Subroutine26 & 0xFFFF
        CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV	?V0 + 0,R2
        MOV	A,#0x7f
        ANL	A,?V0 + 0
        MOV	R0,A
        MOV	A,#0x64
        ADD	A,R0
        MOV	R2,A
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
        REQUIRE ?Subroutine29
        ; // Fall through to label ?Subroutine29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond21) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond21) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond21) CFA_SP SP+-5
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV	R3,#0x0
        MOV	DPTR,#(ZDApp_NetworkInit & 0xffff)
        MOV	A,#((ZDApp_NetworkInit >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOV	DPTR,#devState
        MOVX	@DPTR,A
        ; Setup parameters for call to function osal_set_event
        ; Setup parameters for call to function osal_set_event
        MOV	R2,#0x10
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
        REQUIRE ?Subroutine28
        ; // Fall through to label ?Subroutine28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??Subroutine31_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??Subroutine31_0
        CFI (cfiCond29) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond29) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond29) CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond30) CFA_SP SP+-5
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOV	R3,#0x0
        MOV	DPTR,#ZDAppTaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_set_event & 0xffff)
        MOV	A,#((osal_set_event >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33
// 1317 #endif // !ZDO_COORDINATOR
// 1318 
// 1319 #if ( SECURE != 0 )
// 1320 /*********************************************************************
// 1321  * @fn      ZDApp_SaveNwkKey()
// 1322  *
// 1323  * @brief   Save off the Network key information.
// 1324  *
// 1325  * @param   none
// 1326  *
// 1327  * @return  none
// 1328  */
// 1329 void ZDApp_SaveNwkKey( void )
// 1330 {
// 1331   nwkActiveKeyItems keyItems;
// 1332 
// 1333   SSP_ReadNwkActiveKey( &keyItems );
// 1334   keyItems.frameCounter++;
// 1335 
// 1336   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1337                 (void *)&keyItems );
// 1338 
// 1339   nwkFrameCounterChanges = 0;
// 1340 }
// 1341 
// 1342 /*********************************************************************
// 1343  * @fn      ZDApp_ResetNwkKey()
// 1344  *
// 1345  * @brief   Reset the Network key information in NV.
// 1346  *
// 1347  * @param   none
// 1348  *
// 1349  * @return  none
// 1350  */
// 1351 void ZDApp_ResetNwkKey( void )
// 1352 {
// 1353   nwkActiveKeyItems keyItems;
// 1354 
// 1355   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
// 1356   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1357                 (void *)&keyItems );
// 1358 }
// 1359 #endif
// 1360 
// 1361 #if ( SECURE != 0 )
// 1362 /*********************************************************************
// 1363  * @fn      ZDApp_RestoreNwkKey()
// 1364  *
// 1365  * @brief
// 1366  *
// 1367  *   Save off the Network key information.
// 1368  *
// 1369  * @param   none
// 1370  *
// 1371  * @return  true if restored from NV, false if not
// 1372  */
// 1373 byte ZDApp_RestoreNwkKey( void )
// 1374 {
// 1375   nwkActiveKeyItems keyItems;
// 1376   byte ret = false;
// 1377 
// 1378   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1379       == ZSUCCESS )
// 1380   {
// 1381     if ( keyItems.frameCounter > 0 )
// 1382     {
// 1383       // Restore the key information
// 1384       keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
// 1385       SSP_WriteNwkActiveKey( &keyItems );
// 1386       ret = true;
// 1387     }
// 1388     nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES; // Force a save for the first
// 1389   }
// 1390   return ( ret );
// 1391 }
// 1392 #endif
// 1393 
// 1394 /*********************************************************************
// 1395  * @fn      ZDApp_SendEndDeviceBindReq()
// 1396  *
// 1397  * @brief
// 1398  *
// 1399  *   This function will look up the endpoint description
// 1400  *   and send an End Device Bind Request message.
// 1401  *
// 1402  * @param  endPoint - Endpoint to auto find
// 1403  *
// 1404  * @return  none
// 1405  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1406 void ZDApp_SendEndDeviceBindReq( byte endPoint )
ZDApp_SendEndDeviceBindReq:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function ZDApp_SendEndDeviceBindReq
// 1407 {
        FUNCALL ZDApp_SendEndDeviceBindReq, HalLedSet
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ZDApp_SendEndDeviceBindReq, afFindSimpleDesc
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ZDApp_SendEndDeviceBindReq, ZDP_EndDeviceBindReq
        LOCFRAME XSTACK, 29, STACK
        ARGFRAME XSTACK, 29, STACK
        FUNCALL ZDApp_SendEndDeviceBindReq, osal_mem_free
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 11
        MOV	A,#-0xb
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	A,R1
        MOV	R7,A
// 1408 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
// 1409   zAddrType_t dstAddr;
// 1410   SimpleDescriptionFormat_t *sDesc;
// 1411   byte free;
// 1412   if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
        JNZ	$+5
        LJMP	??ZDApp_SendEndDeviceBindReq_0 & 0xFFFF
        CLR	C
        SUBB	A,#-0xf
        JC	$+5
        LJMP	??ZDApp_SendEndDeviceBindReq_0 & 0xFFFF
// 1413   {
// 1414     return;   // Can't do for ZDO
// 1415   }
// 1416 
// 1417   HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1418 
// 1419   free = afFindSimpleDesc( &sDesc, endPoint );
        ; Setup parameters for call to function afFindSimpleDesc
        MOV	A,R7
        MOV	R1,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(afFindSimpleDesc & 0xffff)
        MOV	A,#((afFindSimpleDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R6,A
// 1420   if ( sDesc != NULL )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JNZ	??ZDApp_SendEndDeviceBindReq_1
        INC	DPTR
        MOVX	A,@DPTR
??ZDApp_SendEndDeviceBindReq_1:
        JNZ	$+5
        LJMP	??ZDApp_SendEndDeviceBindReq_0 & 0xFFFF
// 1421   {
// 1422     dstAddr.addrMode = Addr16Bit;
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x2
        MOVX	@DPTR,A
// 1423     dstAddr.addr.shortAddr = 0;   // Zigbee Coordinator
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
// 1424     ZDP_EndDeviceBindReq( &dstAddr,
// 1425 #if defined ( REFLECTOR  )
// 1426                 // We have a reflector, so tell the coordinator to send
// 1427                 // binding messages this way
// 1428                 NLME_GetShortAddr(),
// 1429 #else
// 1430                 // tell the coordinator to store if available
// 1431                 NWK_PAN_COORD_ADDR,
// 1432 #endif
// 1433                 endPoint,sDesc->AppProfId,
// 1434                 sDesc->AppNumOutClusters, sDesc->pAppOutClusterList,
// 1435                 sDesc->AppNumInClusters, sDesc->pAppInClusterList,
// 1436                 0 );
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL	??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL	??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	A,#0x7
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV	A,R7
        MOV	R1,A
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDP_EndDeviceBindReq & 0xffff)
        MOV	A,#((ZDP_EndDeviceBindReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x9
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1437 
// 1438     if ( free )
        MOV	A,R6
        JZ	??ZDApp_SendEndDeviceBindReq_0
// 1439     {
// 1440       osal_mem_free( sDesc );
        ; Setup parameters for call to function osal_mem_free
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDApp_SendEndDeviceBindReq_0:
        MOV	A,#0xb
        LJMP	?Subroutine27 & 0xFFFF
        CFI EndBlock cfiBlock34
// 1441     }
// 1442   }
// 1443   else
// 1444   {
// 1445 
// 1446   }
// 1447 #endif // ZDO_ENDDEVICEBIND_REQUEST
// 1448 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_46:
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_18
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_19
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_15
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        LCALL	?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_57:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_45:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45
// 1449 
// 1450 /*********************************************************************
// 1451  * @fn      ZDApp_AutoFindDestination()
// 1452  *
// 1453  * @brief
// 1454  *
// 1455  *   This function will try to find the Input Match for this device's
// 1456  *   (endpoint passed in) outputs.
// 1457  *
// 1458  * @param  endPoint - Endpoint to auto find
// 1459  * @param  task_id  - task ID override, if NULL use endpoint desc's
// 1460  *                    task_id
// 1461  *
// 1462  * @return  none
// 1463  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1464 void ZDApp_AutoFindDestinationEx( byte endPoint, uint8 *task_id )
ZDApp_AutoFindDestinationEx:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function ZDApp_AutoFindDestinationEx
// 1465 {
        FUNCALL ZDApp_AutoFindDestinationEx, HalLedSet
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDApp_AutoFindDestinationEx, afFindEndPointDesc
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDApp_AutoFindDestinationEx, osal_mem_alloc
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDApp_AutoFindDestinationEx, osal_memcpy
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDApp_AutoFindDestinationEx, ZDP_MatchDescReq
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 9
        MOV	A,#-0x9
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,R1
        MOV	R6,A
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
// 1466 #if defined ( ZDO_MATCH_REQUEST )
// 1467   zAddrType_t dstAddr;
// 1468   SimpleDescriptionFormat_t *sDesc;
// 1469   endPointDesc_t *tmpDesc;
// 1470   if ( endPoint == ZDO_EP )
        JNZ	$+5
        LJMP	??ZDApp_AutoFindDestinationEx_0 & 0xFFFF
// 1471     return;   // Can't do for ZDO
// 1472 
// 1473   HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1474 
// 1475   tmpDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(afFindEndPointDesc & 0xffff)
        MOV	A,#((afFindEndPointDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R6,?V0 + 2
        MOV	R7,?V0 + 3
// 1476   if ( tmpDesc )
        MOV	A,R6
        JNZ	??ZDApp_AutoFindDestinationEx_1
        MOV	A,R7
??ZDApp_AutoFindDestinationEx_1:
        JNZ	$+5
        LJMP	??ZDApp_AutoFindDestinationEx_0 & 0xFFFF
// 1477   {
// 1478     if ( ZDApp_AutoFindMode_epDesc == NULL )
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        MOVX	A,@DPTR
        JNZ	??ZDApp_AutoFindDestinationEx_2
        INC	DPTR
        MOVX	A,@DPTR
??ZDApp_AutoFindDestinationEx_2:
        JNZ	??ZDApp_AutoFindDestinationEx_3
// 1479     {
// 1480       ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)osal_mem_alloc( sizeof ( endPointDesc_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV	R2,#0x6
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
// 1481     }
// 1482 
// 1483     if ( ZDApp_AutoFindMode_epDesc )
??ZDApp_AutoFindDestinationEx_3:
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        MOVX	A,@DPTR
        JNZ	??ZDApp_AutoFindDestinationEx_4
        INC	DPTR
        MOVX	A,@DPTR
??ZDApp_AutoFindDestinationEx_4:
        JNZ	$+5
        LJMP	??ZDApp_AutoFindDestinationEx_0 & 0xFFFF
// 1484     {
// 1485       osal_memcpy( ZDApp_AutoFindMode_epDesc, tmpDesc, sizeof( endPointDesc_t ) );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 4,R6
        MOV	?V0 + 5,R7
        MOV	?V0 + 6,#0x0
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	R4,#0x6
        MOV	R5,#0x0
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
// 1486       if ( task_id )
        MOV	A,?V0 + 0
        JNZ	??ZDApp_AutoFindDestinationEx_5
        MOV	A,?V0 + 1
??ZDApp_AutoFindDestinationEx_5:
        JZ	??ZDApp_AutoFindDestinationEx_6
// 1487       {
// 1488         // Override the Task ID, if needed.
// 1489         ZDApp_AutoFindMode_epDesc->task_id = task_id;
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 1
        MOVX	@DPTR,A
// 1490       }
// 1491 
// 1492       sDesc = ZDApp_AutoFindMode_epDesc->simpleDesc;
??ZDApp_AutoFindDestinationEx_6:
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_22:
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	A,R0
        MOV	R2,A
        MOV	A,R1
        MOV	R3,A
// 1493 
// 1494       // This message is sent to everyone
// 1495       dstAddr.addrMode = AddrBroadcast;
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0xf
        LCALL	?Subroutine1 & 0xFFFF
// 1496       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
??CrossCallReturnLabel_1:
        MOV	A,#-0x1
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
// 1497       ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR, sDesc->AppProfId,
// 1498                         sDesc->AppNumOutClusters, sDesc->pAppOutClusterList,
// 1499                         sDesc->AppNumInClusters, sDesc->pAppInClusterList, 0 );
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV	?V0 + 0,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	R4,#-0x1
        MOV	R5,#-0x1
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDP_MatchDescReq & 0xffff)
        MOV	A,#((ZDP_MatchDescReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x8
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
??ZDApp_AutoFindDestinationEx_0:
        MOV	A,#0x9
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R7,#0x7
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock46
// 1500 
// 1501     }
// 1502   }
// 1503   else
// 1504   {
// 1505   }
// 1506 #endif // ZDO_MATCH_REQUEST
// 1507 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        LCALL	?Subroutine21 & 0xFFFF
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 27)
??Subroutine12_0:
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 27)
??Subroutine11_0:
        LCALL	?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_47:
        INC	DPTR
        RET
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
        CFI EndBlock cfiCond58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??Subroutine12_0, ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_20
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_23
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_21
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_22
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??Subroutine12_0, ??CrossCallReturnLabel_28
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        LCALL	?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_58:
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_20
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_19
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_14
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_23
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_21
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_22
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_58, ??Subroutine12_0, ??CrossCallReturnLabel_28
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_58, ??Subroutine12_0, ??CrossCallReturnLabel_29
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_18
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker76 Using cfiCommon1
        CFI (cfiPicker76) NoFunction
        CFI (cfiPicker76) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        RET
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiPicker76
// 1508 
// 1509 /*********************************************************************
// 1510  * @fn      ZDApp_ResetTimerStart
// 1511  *
// 1512  * @brief   Start the reset timer.
// 1513  *
// 1514  * @param   delay - delay time(ms) before reset
// 1515  *
// 1516  * @return  none
// 1517  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1518 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
        CFI Block cfiBlock77 Using cfiCommon0
        CFI Function ZDApp_ResetTimerStart
// 1519 {
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1520   // Start the rest timer
// 1521   osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,#0x4
        MOV	R3,#0x0
        LCALL	??Subroutine5_1 & 0xFFFF
??CrossCallReturnLabel_12:
        LJMP	??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock77
// 1522 }
// 1523 
// 1524 /*********************************************************************
// 1525  * @fn      ZDApp_ResetTimerCancel
// 1526  *
// 1527  * @brief   Cancel the reset timer.
// 1528  *
// 1529  * @param   none
// 1530  *
// 1531  * @return  none
// 1532  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1533 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
        CFI Block cfiBlock78 Using cfiCommon0
        CFI Function ZDApp_ResetTimerCancel
// 1534 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1535   // Cancel the reset timer
// 1536   osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV	R2,#0x4
        MOV	R3,#0x0
        MOV	DPTR,#ZDAppTaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_stop_timerEx & 0xffff)
        MOV	A,#((osal_stop_timerEx >> 16) & 0xff)
        LJMP	??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock78
// 1537 }
// 1538 
// 1539 /*********************************************************************
// 1540  * @fn      ZDApp_LeaveCtrlInit
// 1541  *
// 1542  * @brief   Initialize the leave control logic.
// 1543  *
// 1544  * @param   none
// 1545  *
// 1546  * @return  none
// 1547  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1548 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlInit
// 1549 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1550   uint8 status;
// 1551 
// 1552 
// 1553   // Initialize control state
// 1554   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        LCALL	?Subroutine3 & 0xFFFF
// 1555 
// 1556   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 1557                               sizeof(ZDApp_LeaveCtrl),
// 1558                               &ZDApp_LeaveCtrl );
// 1559 
// 1560   if ( status == ZSUCCESS )
??CrossCallReturnLabel_4:
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R4,#0x1
        MOV	R5,#0x0
        MOV	R2,#-0x7b
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_init & 0xffff)
        MOV	A,#((osal_nv_item_init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV	A,R1
        JNZ	??ZDApp_LeaveCtrlInit_0
// 1561   {
// 1562     // Read saved control
// 1563     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 1564                   0,
// 1565                   sizeof( uint8 ),
// 1566                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7b
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1567   }
// 1568 }
??ZDApp_LeaveCtrlInit_0:
        LJMP	??Subroutine26_1 & 0xFFFF
        CFI EndBlock cfiBlock79
// 1569 
// 1570 /*********************************************************************
// 1571  * @fn      ZDApp_LeaveCtrlSet
// 1572  *
// 1573  * @brief   Set the leave control logic.
// 1574  *
// 1575  * @param   ra - reassociate flag
// 1576  *
// 1577  * @return  none
// 1578  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1579 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlSet
// 1580 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1581   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV	A,#0x1
        MOV	DPTR,#ZDApp_LeaveCtrl
        MOVX	@DPTR,A
// 1582 
// 1583   if ( ra == TRUE )
        XRL	A,R1
        JNZ	??ZDApp_LeaveCtrlSet_0
// 1584   {
// 1585     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV	A,#0x3
        MOVX	@DPTR,A
// 1586   }
// 1587 
// 1588   // Write the leave control
// 1589   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1590                  0,
// 1591                  sizeof( uint8 ),
// 1592                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        MOV	?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
        MOV	?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7b
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_write & 0xffff)
        MOV	A,#((osal_nv_write >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LJMP	??Subroutine26_0 & 0xFFFF
        CFI EndBlock cfiBlock80
// 1593 }
// 1594 
// 1595 /*********************************************************************
// 1596  * @fn      ZDApp_LeaveCtrlBypass
// 1597  *
// 1598  * @brief   Check if NV restore should be skipped during a leave reset.
// 1599  *
// 1600  * @param   none
// 1601  *
// 1602  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 1603  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1604 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlBypass
// 1605 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1606   uint8 bypass;
// 1607 
// 1608   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 1609   {
// 1610     bypass = TRUE;
// 1611   }
// 1612   else
// 1613   {
// 1614     bypass = FALSE;
// 1615   }
// 1616 
// 1617   return bypass;
        MOV	DPTR,#ZDApp_LeaveCtrl
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.0
        CLR	A
        MOV	0xE0 /* A   */.0,C
        MOV	R1,A
        LJMP	??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock81
// 1618 }
// 1619 
// 1620 /*********************************************************************
// 1621  * @fn      ZDApp_LeaveCtrlStartup
// 1622  *
// 1623  * @brief   Check for startup conditions during a leave reset.
// 1624  *
// 1625  * @param   state      - devState_t determined by leave control logic
// 1626  * @param   startDelay - startup delay
// 1627  *
// 1628  * @return  none
// 1629  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1630 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
        CFI Block cfiBlock82 Using cfiCommon0
        CFI Function ZDApp_LeaveCtrlStartup
// 1631 {
        FUNCALL ZDApp_LeaveCtrlStartup, osal_nv_write
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1632   *startDelay = 0;
        MOV	DPL,R4
        MOV	DPH,R5
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
// 1633 
// 1634   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV	DPTR,#ZDApp_LeaveCtrl
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.0
        JNC	??ZDApp_LeaveCtrlStartup_0
// 1635   {
// 1636     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV	C,0xE0 /* A   */.1
        JNC	??ZDApp_LeaveCtrlStartup_1
// 1637     {
// 1638       *startDelay = 5000;
        MOV	DPL,R4
        MOV	DPH,R5
        MOV	A,#-0x78
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,#0x13
        SJMP	??ZDApp_LeaveCtrlStartup_2
// 1639     }
// 1640     else
// 1641     {
// 1642       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        CLR	A
        MOV	DPL,R2
        MOV	DPH,R3
??ZDApp_LeaveCtrlStartup_2:
        MOVX	@DPTR,A
// 1643     }
// 1644 
// 1645     // Set leave control to initialized state
// 1646     ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        LCALL	?Subroutine3 & 0xFFFF
// 1647 
// 1648     // Write initialized control
// 1649     osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1650                   0,
// 1651                   sizeof( uint8 ),
// 1652                   &ZDApp_LeaveCtrl);
??CrossCallReturnLabel_5:
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#-0x7b
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_write & 0xffff)
        MOV	A,#((osal_nv_write >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 1653   }
// 1654 }
??ZDApp_LeaveCtrlStartup_0:
        LJMP	??Subroutine26_1 & 0xFFFF
        CFI EndBlock cfiBlock82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        CLR	A
        MOV	DPTR,#ZDApp_LeaveCtrl
        MOVX	@DPTR,A
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        MOV	?V0 + 0,#(ZDApp_LeaveCtrl & 0xff)
        MOV	?V0 + 1,#((ZDApp_LeaveCtrl >> 8) & 0xff)
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85
// 1655 
// 1656 /*********************************************************************
// 1657  * @fn      ZDApp_LeaveReset
// 1658  *
// 1659  * @brief   Setup a device reset due to a leave indication/confirm.
// 1660  *
// 1661  * @param   ra - reassociate flag
// 1662  *
// 1663  * @return  none
// 1664  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1665 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
        CFI Block cfiBlock86 Using cfiCommon0
        CFI Function ZDApp_LeaveReset
// 1666 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1667   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        MOV	DPTR,#(ZDApp_LeaveCtrlSet & 0xffff)
        MOV	A,#((ZDApp_LeaveCtrlSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1668 
// 1669   ZDApp_ResetTimerStart( 5000 );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV	R2,#-0x78
        MOV	R3,#0x13
        MOV	DPTR,#(ZDApp_ResetTimerStart & 0xffff)
        MOV	A,#((ZDApp_ResetTimerStart >> 16) & 0xff)
        SJMP	??Subroutine31_0
        CFI EndBlock cfiBlock86
// 1670 }
// 1671 
// 1672 /*********************************************************************
// 1673  * @fn      ZDApp_LeaveUpdate
// 1674  *
// 1675  * @brief   Update local device data related to leaving device.
// 1676  *
// 1677  * @param   nwkAddr        - NWK address of leaving device
// 1678  * @param   extAddr        - EXT address of leaving device
// 1679  * @param   removeChildren - remove children of leaving device
// 1680  *
// 1681  * @return  none
// 1682  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1683 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
        CFI Block cfiBlock87 Using cfiCommon0
        CFI Function ZDApp_LeaveUpdate
// 1684                         uint8 removeChildren )
// 1685 {
        FUNCALL ZDApp_LeaveUpdate, NLME_RemoveChild
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV	A,R4
        MOV	R2,A
        MOV	A,R5
        MOV	R3,A
// 1686   /*
// 1687   AddrMgrEntry_t entry;
// 1688   */
// 1689 
// 1690 
// 1691   // Remove if child
// 1692   NLME_RemoveChild( extAddr, removeChildren );
        ; Setup parameters for call to function NLME_RemoveChild
        MOV	DPTR,#(NLME_RemoveChild & 0xffff)
        MOV	A,#((NLME_RemoveChild >> 16) & 0xff)
        SJMP	??Subroutine31_0
        CFI EndBlock cfiBlock87
// 1693 
// 1694   /*
// 1695   // Set NWK address to invalid
// 1696   entry.user    = ADDRMGR_USER_DEFAULT;
// 1697   entry.nwkAddr = INVALID_NODE_ADDR;
// 1698   AddrMgrExtAddrSet( entry.extAddr, extAddr );
// 1699   AddrMgrEntryUpdate( &entry );
// 1700 
// 1701   // Check
// 1702   if ( removeChildren == TRUE )
// 1703   {
// 1704     // Set index to INVALID_NODE_ADDR to start search
// 1705     entry.index = INVALID_NODE_ADDR;
// 1706 
// 1707     // Get first entry
// 1708     AddrMgrEntryGetNext( &entry );
// 1709 
// 1710     // Remove all descendents
// 1711     while ( entry.index != INVALID_NODE_ADDR )
// 1712     {
// 1713       // Check NWK address allocation algorithm
// 1714       if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
// 1715       {
// 1716         // Set NWK address to invalid
// 1717         entry.nwkAddr = INVALID_NODE_ADDR;
// 1718         AddrMgrEntryUpdate( &entry );
// 1719       }
// 1720 
// 1721       // Get next entry
// 1722       AddrMgrEntryGetNext( &entry );
// 1723     }
// 1724   }
// 1725   */
// 1726 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiBlock88 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL	?Subroutine28 & 0xFFFF
??Subroutine31_0:
        LCALL	?BCALL               ; Banked call to: DPTR()
        LJMP	??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock88
// 1727 
// 1728 /*********************************************************************
// 1729  * CALLBACK FUNCTIONS
// 1730  */
// 1731 
// 1732 #if defined ( ZDO_COORDINATOR )
// 1733 /*********************************************************************
// 1734  * @fn      ZDApp_EndDeviceBindReqCB()
// 1735  *
// 1736  * @brief
// 1737  *
// 1738  *   Called by ZDO when an End Device Bind Request message is received.
// 1739  *
// 1740  * @param  bindReq  - binding request information
// 1741  * @param  SecurityUse - Security enable/disable
// 1742  *
// 1743  * @return  none
// 1744  */
// 1745 void ZDApp_EndDeviceBindReqCB( ZDEndDeviceBind_t *bindReq )
// 1746 {
// 1747 #if defined ( COORDINATOR_BINDING )
// 1748   if ( bindReq->localCoordinator == 0x0000 )
// 1749   {
// 1750     ZDO_DoEndDeviceBind( bindReq );
// 1751   }
// 1752   else
// 1753 #endif // COORDINATOR_BINDING
// 1754   {
// 1755     ZDO_MatchEndDeviceBind( bindReq );
// 1756   }
// 1757 }
// 1758 #endif // ZDO_COORDINATOR
// 1759 
// 1760 #if !defined ( REFLECTOR ) && defined ( ZDO_BIND_UNBIND_RESPONSE )
// 1761 /*********************************************************************
// 1762  * @fn      ZDApp_AppBindReq()
// 1763  *
// 1764  * @brief
// 1765  *
// 1766  *   Called to send an App Bind Request message.
// 1767  *
// 1768  * @param  SrcAddr     - Source address ( who sent the message )
// 1769  * @param  SrcAddress  - Source Address (64 bit)
// 1770  * @param  SrcEndPoint - Source endpoint
// 1771  * @param  ClusterID   - Cluster ID
// 1772  * @param  DstAddress  - Destination Address (64 bit)
// 1773  * @param  DstEndPoint - Destination endpoint
// 1774  * @param  SecurityUse - Security enable/disable
// 1775  *
// 1776  * @return  none
// 1777  */
// 1778 void ZDApp_AppBindReq( byte TransSeq, zAddrType_t *SrcAddr, byte *SrcAddress,
// 1779                       byte SrcEndPoint, cId_t ClusterID, byte *DstAddress,
// 1780                       byte DstEndPoint, byte SecurityUse, uint8 Type )
// 1781 {
// 1782   ZDO_BindReq_t *pBindReq;
// 1783 
// 1784   if ( ZDApp_BindReq_TaskID )
// 1785   {
// 1786     // Send the IEEE Address response structure to the registered task
// 1787     pBindReq = (ZDO_BindReq_t *)osal_msg_allocate( sizeof( ZDO_BindReq_t ) );
// 1788     if ( pBindReq )
// 1789     {
// 1790       pBindReq->event_hdr.event = Type;
// 1791 
// 1792       // Build the structure
// 1793       pBindReq->hdr.srcAddr = SrcAddr->addr.shortAddr;
// 1794       pBindReq->hdr.transSeq = TransSeq;
// 1795       pBindReq->hdr.SecurityUse = SecurityUse;
// 1796 
// 1797       osal_cpyExtAddr( pBindReq->srcAddr, SrcAddress );
// 1798       pBindReq->srcEP = SrcEndPoint;
// 1799       pBindReq->clusterID = ClusterID;
// 1800       osal_cpyExtAddr( pBindReq->dstAddr, DstAddress );
// 1801       pBindReq->dstEP = DstEndPoint;
// 1802 
// 1803       osal_msg_send( ZDApp_BindReq_TaskID, (uint8 *)pBindReq );
// 1804     }
// 1805   }
// 1806 }
// 1807 #endif // !REFLECTOR && ZDO_BIND_UNBIND_RESPONSE
// 1808 
// 1809 #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
// 1810 /*********************************************************************
// 1811  * @fn      ZDApp_BindReqCB()
// 1812  *
// 1813  * @brief
// 1814  *
// 1815  *   Called by ZDO when a Bind Request message is received.
// 1816  *
// 1817  * @param  SrcAddr     - Source address ( who sent the message )
// 1818  * @param  SrcAddress  - Source Address (64 bit)
// 1819  * @param  SrcEndPoint - Source endpoint
// 1820  * @param  ClusterID   - Cluster ID
// 1821  * @param  DstAddress  - Destination Address (64 bit)
// 1822  * @param  DstEndPoint - Destination endpoint
// 1823  * @param  SecurityUse - Security enable/disable
// 1824  *
// 1825  * @return  none
// 1826  */
// 1827 void ZDApp_BindReqCB( byte TransSeq, zAddrType_t *SrcAddr, byte *SrcAddress,
// 1828                       byte SrcEndPoint, cId_t ClusterID, zAddrType_t *DstAddress,
// 1829                       byte DstEndPoint, byte SecurityUse )
// 1830 {
// 1831 #if defined ( REFLECTOR )
// 1832   zAddrType_t SourceAddr;       // Binding Source addres
// 1833   byte bindStat;
// 1834 
// 1835   SourceAddr.addrMode = Addr64Bit;
// 1836   osal_cpyExtAddr( SourceAddr.addr.extAddr, SrcAddress );
// 1837 
// 1838   if ( DstAddress->addrMode != Addr64Bit &&
// 1839          DstAddress->addrMode != AddrGroup )
// 1840   {
// 1841     bindStat = ZDP_NOT_SUPPORTED;
// 1842   }
// 1843 
// 1844   else
// 1845   { // Check source endpoints
// 1846     if ( SrcEndPoint == 0 || SrcEndPoint > MAX_ENDPOINTS )
// 1847     {
// 1848       bindStat = ZDP_INVALID_EP;
// 1849     }
// 1850     // Check the destination endpoints for ext address mode
// 1851     else if ( ( DstAddress->addrMode == Addr64Bit ) &&
// 1852             ( DstEndPoint == 0 || DstEndPoint > MAX_ENDPOINTS ) )
// 1853     {
// 1854       bindStat = ZDP_INVALID_EP;
// 1855     }
// 1856 
// 1857     else
// 1858     {
// 1859 #if defined ( ZDO_NWKADDR_REQUEST )
// 1860       {
// 1861         uint16 nwkAddr;
// 1862 
// 1863         // Check for the source address
// 1864         if ( APSME_LookupNwkAddr( SrcAddress, &nwkAddr ) == FALSE )
// 1865         {
// 1866           ZDP_NwkAddrReq( SrcAddress, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 1867         }
// 1868 
// 1869         // Check for the destination address
// 1870         if ( DstAddress->addrMode == Addr64Bit )
// 1871         {
// 1872           if ( APSME_LookupNwkAddr( DstAddress->addr.extAddr, &nwkAddr ) == FALSE )
// 1873           {
// 1874             ZDP_NwkAddrReq( DstAddress->addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 1875           }
// 1876         }
// 1877       }
// 1878 #endif
// 1879 
// 1880       if ( APSME_BindRequest( &SourceAddr, SrcEndPoint, ClusterID,
// 1881                      DstAddress, DstEndPoint ) == ZSuccess )
// 1882       {
// 1883         bindStat = ZDP_SUCCESS;
// 1884         // Notify to save info into NV
// 1885         osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
// 1886       }
// 1887       else
// 1888         bindStat = ZDP_TABLE_FULL;
// 1889     }
// 1890   }
// 1891   // Send back a response message
// 1892   ZDP_BindRsp( TransSeq, SrcAddr, bindStat, SecurityUse );
// 1893 
// 1894 #else  // must be ZDO_BIND_UNBIND_RESPONSE
// 1895 
// 1896   ZDApp_AppBindReq( TransSeq, SrcAddr, SrcAddress, SrcEndPoint, ClusterID,
// 1897                     DstAddress->addr.extAddr, DstEndPoint, SecurityUse, ZDO_BIND_REQUEST );
// 1898 
// 1899 #endif // REFLECTOR
// 1900 }
// 1901 #endif // REFLECTOR OR ZDO_BIND_UNBIND_RESPONSE
// 1902 
// 1903 #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
// 1904 /*********************************************************************
// 1905  * @fn      ZDApp_UnbindReqCB()
// 1906  *
// 1907  * @brief
// 1908  *
// 1909  *   Called by ZDO when an Unbind Request message is received.
// 1910  *
// 1911  * @param  SrcAddr  - Source address
// 1912  * @param  SrcAddress - Source Address (64 bit)
// 1913  * @param  SrcEndPoint - Source endpoint
// 1914  * @param  ClusterID - Cluster ID
// 1915  * @param  DstAddress - Destination Address (64 bit)
// 1916  * @param  DstEndPoint - Destination endpoint
// 1917  * @param  SecurityUse - Security enable/disable
// 1918  *
// 1919  * @return  none
// 1920  */
// 1921 void ZDApp_UnbindReqCB( byte TransSeq, zAddrType_t *SrcAddr, byte *SrcAddress,
// 1922                         byte SrcEndPoint, cId_t ClusterID, zAddrType_t *DstAddress,
// 1923                         byte DstEndPoint, byte SecurityUse )
// 1924 {
// 1925 #if defined ( REFLECTOR )
// 1926   zAddrType_t SourceAddr;       // Binding Source addres
// 1927   byte bindStat;
// 1928 
// 1929   SourceAddr.addrMode = Addr64Bit;
// 1930   osal_cpyExtAddr( SourceAddr.addr.extAddr, SrcAddress );
// 1931 
// 1932   // Check endpoints
// 1933   if ( SrcEndPoint == 0 || SrcEndPoint > MAX_ENDPOINTS ||
// 1934        DstEndPoint == 0 || DstEndPoint > MAX_ENDPOINTS )
// 1935   {
// 1936     bindStat = ZDP_INVALID_EP;
// 1937   }
// 1938 
// 1939   else
// 1940   {
// 1941     if ( APSME_UnBindRequest( &SourceAddr, SrcEndPoint, ClusterID,
// 1942                              DstAddress, DstEndPoint ) == ZSuccess )
// 1943     {
// 1944       bindStat = ZDP_SUCCESS;
// 1945 
// 1946       // Notify to save info into NV
// 1947       osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
// 1948     }
// 1949     else
// 1950       bindStat = ZDP_NO_ENTRY;
// 1951   }
// 1952 
// 1953   // Send back a response message
// 1954   ZDP_UnbindRsp( TransSeq, SrcAddr, bindStat, SecurityUse );
// 1955 
// 1956 #else // Must be ZDO_BIND_UNBIND_RESPONSE
// 1957 
// 1958   ZDApp_AppBindReq( TransSeq, SrcAddr, SrcAddress, SrcEndPoint, ClusterID,
// 1959                     DstAddress->addr.extAddr, DstEndPoint, SecurityUse, ZDO_UNBIND_REQUEST );
// 1960 
// 1961 #endif // ZDO_BIND_UNBIND_RESPONSE
// 1962 }
// 1963 #endif // REFLECTOR OR ZDO_BIND_UNBIND_RESPONSE
// 1964 
// 1965 /*********************************************************************
// 1966  * @fn      ZDApp_SendNewDstAddr()
// 1967  *
// 1968  * @brief
// 1969  *
// 1970  *   Used to send an OSAL message to an application that contains a
// 1971  *   new destination address
// 1972  *
// 1973  * @param  dstEP  - Destination endpoint
// 1974  * @param  dstAddr - response status
// 1975  * @param  clusterID - relavent cluster for this dst address
// 1976  * @param  removeFlag - false if add, true to remove
// 1977  * @param  task_id - What task to send it to
// 1978  * @param  endpoint - who the new address is for
// 1979  *
// 1980  * @return  none
// 1981  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1982 void ZDApp_SendNewDstAddr( byte dstEP, zAddrType_t *dstAddr,
ZDApp_SendNewDstAddr:
        CFI Block cfiBlock89 Using cfiCommon0
        CFI Function ZDApp_SendNewDstAddr
// 1983                    cId_t clusterID, byte removeFlag, byte task_id, byte endpoint )
// 1984 {
        FUNCALL ZDApp_SendNewDstAddr, osal_msg_allocate
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL ZDApp_SendNewDstAddr, osal_memcpy
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        FUNCALL ZDApp_SendNewDstAddr, osal_msg_send
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	?V0 + 2,R1
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
        MOV	A,#0x13
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 6,A
// 1985   byte bufLen;
// 1986   ZDO_NewDstAddr_t *msgPtr;
// 1987 
// 1988   // Send the address to the task
// 1989   bufLen = sizeof(ZDO_NewDstAddr_t);
// 1990 
// 1991   msgPtr = (ZDO_NewDstAddr_t *)osal_msg_allocate( bufLen );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	R2,#0x10
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
// 1992   if ( msgPtr )
        MOV	A,R2
        JNZ	??ZDApp_SendNewDstAddr_0
        MOV	A,R3
??ZDApp_SendNewDstAddr_0:
        JZ	??ZDApp_SendNewDstAddr_1
// 1993   {
// 1994     msgPtr->hdr.event = ZDO_NEW_DSTADDR;
        MOV	A,#-0x30
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
// 1995     msgPtr->dstAddrDstEP = dstEP;
        INC	DPTR
        INC	DPTR
        MOV	A,?V0 + 2
        LCALL	?Subroutine1 & 0xFFFF
// 1996     osal_memcpy(&msgPtr->dstAddr, dstAddr, sizeof( zAddrType_t ) );
??CrossCallReturnLabel_2:
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	R4,#0x9
        MOV	R5,#0x0
        MOV	A,R2
        ADD	A,#0x3
        INC	R2
        INC	R2
        INC	R2
        MOV	A,R3
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
// 1997     msgPtr->dstAddrClusterIDLSB = LO_UINT16( clusterID );
        MOV	A,?V0 + 4
        ADD	A,#0xc
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV	A,R6
        MOVX	@DPTR,A
// 1998     msgPtr->dstAddrClusterIDMSB = HI_UINT16( clusterID );
        MOV	A,?V0 + 4
        ADD	A,#0xd
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV	A,R7
        MOVX	@DPTR,A
// 1999     msgPtr->dstAddrRemove = removeFlag;
        MOV	A,?V0 + 4
        ADD	A,#0xe
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV	A,?V0 + 7
        MOVX	@DPTR,A
// 2000     msgPtr->dstAddrEP = endpoint;
        MOV	A,?V0 + 4
        ADD	A,#0xf
        LCALL	?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV	A,?V0 + 6
        MOVX	@DPTR,A
// 2001 
// 2002     osal_msg_send( task_id, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV	R2,?V0 + 4
        MOV	R3,?V0 + 5
        MOV	R1,?V0 + 3
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2003   }
// 2004 }
??ZDApp_SendNewDstAddr_1:
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock89
        REQUIRE ?Subroutine30
        ; // Fall through to label ?Subroutine30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiBlock90 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        MOVX	@DPTR,A
        ; Setup parameters for call to function ZMacSetReq
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95
// 2005 
// 2006 /*********************************************************************
// 2007  * @fn      ZDApp_SendEventMsg()
// 2008  *
// 2009  * @brief
// 2010  *
// 2011  *   Sends a Network Join message
// 2012  *
// 2013  * @param  cmd - command ID
// 2014  * @param  len - length (in bytes) of the buf field
// 2015  * @param  buf - buffer for the rest of the message.
// 2016  *
// 2017  * @return  none
// 2018  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2019 void ZDApp_SendEventMsg( byte cmd, byte len, byte *buf )
ZDApp_SendEventMsg:
        CFI Block cfiBlock96 Using cfiCommon0
        CFI Function ZDApp_SendEventMsg
// 2020 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2021   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV	A,R2
        MOV	R3,A
        MOV	A,R1
        MOV	R2,A
        CFI EndBlock cfiBlock96
        REQUIRE ?Subroutine32
        ; // Fall through to label ?Subroutine32
// 2022 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiBlock97 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_63:
        LJMP	??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock97
// 2023 
// 2024 /*********************************************************************
// 2025  * @fn      ZDApp_SendMsg()
// 2026  *
// 2027  * @brief   Sends a OSAL message
// 2028  *
// 2029  * @param  taskID - Where to send the message
// 2030  * @param  cmd - command ID
// 2031  * @param  len - length (in bytes) of the buf field
// 2032  * @param  buf - buffer for the rest of the message.
// 2033  *
// 2034  * @return  none
// 2035  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2036 void ZDApp_SendMsg( byte taskID, byte cmd, byte len, byte *buf )
ZDApp_SendMsg:
        CFI Block cfiBlock98 Using cfiCommon0
        CFI Function ZDApp_SendMsg
// 2037 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	A,R1
        MOV	R6,A
        MOV	?V0 + 3,R2
        MOV	A,R3
        MOV	R7,A
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
// 2038   osal_event_hdr_t *msgPtr;
// 2039 
// 2040   // Send the address to the task
// 2041   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
// 2042   if ( msgPtr )
        MOV	A,R2
        JNZ	??ZDApp_SendMsg_0
        MOV	A,R3
??ZDApp_SendMsg_0:
        JZ	??ZDApp_SendMsg_1
// 2043   {
// 2044     if ( (len > 0) && (buf != NULL) )
        MOV	A,R7
        JZ	??ZDApp_SendMsg_2
        MOV	A,?V0 + 6
        JNZ	??ZDApp_SendMsg_3
        MOV	A,?V0 + 7
??ZDApp_SendMsg_3:
        JZ	??ZDApp_SendMsg_2
// 2045       osal_memcpy( msgPtr, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 0,?V0 + 6
        MOV	?V0 + 1,?V0 + 7
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,R7
        MOV	R4,A
        MOV	R5,#0x0
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 2046 
// 2047     msgPtr->event = cmd;
??ZDApp_SendMsg_2:
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        MOV	A,?V0 + 3
        MOVX	@DPTR,A
// 2048     osal_msg_send( taskID, (byte *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV	R2,?V0 + 4
        MOV	R3,?V0 + 5
        MOV	A,R6
        MOV	R1,A
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2049   }
// 2050 }
??ZDApp_SendMsg_1:
        LJMP	?Subroutine30 & 0xFFFF
        CFI EndBlock cfiBlock98
// 2051 
// 2052 #if defined ( ZDO_NWKADDR_REQUEST )
// 2053 /*********************************************************************
// 2054  * @fn      ZDApp_NwkAddrRspCB()
// 2055  *
// 2056  * @brief
// 2057  *
// 2058  *   Called by ZDO when a NWK_addr_rsp message is received.
// 2059  *
// 2060  * @param  SrcAddr  - Source address
// 2061  * @param  Status - response status
// 2062  * @param  IEEEAddr - 64 bit IEEE address of device
// 2063  * @param  aoi - 16 bit network address of interest.
// 2064  * @param  NumAssocDev - number of associated devices to reporting device
// 2065  * @param  AssocDevList - array short addresses of associated devices
// 2066  *
// 2067  * @return  none
// 2068  */
// 2069 void ZDApp_NwkAddrRspCB( zAddrType_t *SrcAddr, byte Status, byte *IEEEAddr,
// 2070                          uint16 nwkAddr, byte NumAssocDev,
// 2071                          byte StartIndex, uint16 *AssocDevList )
// 2072 {
// 2073   uint8 bufLen;
// 2074   ZDO_NwkAddrResp_t *pNwkAddrRsp;
// 2075 
// 2076 #if defined ( MT_ZDO_FUNC )
// 2077   /* First check if MT has subscribed for this callback. If so , pass it as
// 2078   a event to MonitorTest and return control to calling function after that */
// 2079   if ( _zdoCallbackSub & CB_ID_ZDO_NWK_ADDR_RSP )
// 2080   {
// 2081     zdo_MTCB_NwkIEEEAddrRspCB( SPI_CB_ZDO_NWK_ADDR_RSP, SrcAddr, Status,
// 2082                   IEEEAddr, nwkAddr, NumAssocDev, StartIndex, AssocDevList );
// 2083     return;
// 2084   }
// 2085 #endif  //MT_ZDO_FUNC
// 2086 
// 2087   if ( ZDApp_NwkAddrRsp_TaskID )
// 2088   {
// 2089     // Send the NWK Address response structure to the registered task
// 2090     bufLen = sizeof( ZDO_NwkAddrResp_t ) + sizeof( uint16 ) * NumAssocDev;
// 2091 
// 2092     pNwkAddrRsp = (ZDO_NwkAddrResp_t *)osal_msg_allocate( bufLen );
// 2093 
// 2094     if ( pNwkAddrRsp )
// 2095     {
// 2096       pNwkAddrRsp->hdr.event = ZDO_NWK_ADDR_RESP;
// 2097 
// 2098       // Build the structure
// 2099       pNwkAddrRsp->nwkAddr = nwkAddr;
// 2100       osal_cpyExtAddr( pNwkAddrRsp->extAddr, IEEEAddr );
// 2101       pNwkAddrRsp->numAssocDevs = NumAssocDev;
// 2102       pNwkAddrRsp->startIndex = StartIndex;
// 2103       osal_memcpy( pNwkAddrRsp->devList, AssocDevList, (sizeof( uint16 ) * NumAssocDev) );
// 2104 
// 2105       osal_msg_send( ZDApp_NwkAddrRsp_TaskID, (uint8 *)pNwkAddrRsp );
// 2106     }
// 2107   }
// 2108 }
// 2109 #endif // ZDO_NWKADDR_REQUEST
// 2110 
// 2111 #if defined ( ZDO_IEEEADDR_REQUEST )
// 2112 /*********************************************************************
// 2113  * @fn      ZDApp_IEEEAddrRspCB()
// 2114  *
// 2115  * @brief
// 2116  *
// 2117  *   Called by ZDO when a NWK_addr_rsp message is received.
// 2118  *
// 2119  * @param  SrcAddr  - Source address
// 2120  * @param  Status - response status
// 2121  * @param  IEEEAddr - 64 bit IEEE address of device
// 2122  * @param  aoi - 16 bit network address of interest.
// 2123  * @param  NumAssocDev - number of associated devices to reporting device
// 2124  * @param  AssocDevList - array short addresses of associated devices
// 2125  *
// 2126  * @return  none
// 2127  */
// 2128 void ZDApp_IEEEAddrRspCB( zAddrType_t *SrcAddr, byte Status, byte *IEEEAddr,
// 2129                           uint16 aoi, byte NumAssocDev,
// 2130                           byte StartIndex, uint16 *AssocDevList )
// 2131 {
// 2132   uint8 bufLen;
// 2133   ZDO_IEEEAddrResp_t *pIEEEAddrRsp;
// 2134 
// 2135 #if defined ( MT_ZDO_FUNC )
// 2136   /* First check if MT has subscribed for this callback. If so , pass it as
// 2137   a event to MonitorTest and return control to calling function after that */
// 2138   if ( _zdoCallbackSub & CB_ID_ZDO_IEEE_ADDR_RSP )
// 2139   {
// 2140     zdo_MTCB_NwkIEEEAddrRspCB( SPI_CB_ZDO_IEEE_ADDR_RSP, SrcAddr, Status,
// 2141                   IEEEAddr, 0, NumAssocDev, StartIndex, AssocDevList );
// 2142     return;
// 2143   }
// 2144 #endif  //MT_ZDO_FUNC
// 2145 
// 2146   if ( ZDApp_IEEEAddrRsp_TaskID )
// 2147   {
// 2148     // Send the IEEE Address response structure to the registered task
// 2149     bufLen = sizeof( ZDO_IEEEAddrResp_t ) + sizeof( uint16 ) * NumAssocDev;
// 2150 
// 2151     pIEEEAddrRsp = (ZDO_IEEEAddrResp_t *)osal_msg_allocate( bufLen );
// 2152     if ( pIEEEAddrRsp )
// 2153     {
// 2154       pIEEEAddrRsp->hdr.event = ZDO_IEEE_ADDR_RESP;
// 2155 
// 2156       // Build the structure
// 2157       pIEEEAddrRsp->nwkAddr = aoi;
// 2158       osal_cpyExtAddr( pIEEEAddrRsp->extAddr, IEEEAddr );
// 2159       pIEEEAddrRsp->numAssocDevs = NumAssocDev;
// 2160       pIEEEAddrRsp->startIndex = StartIndex;
// 2161       osal_memcpy( pIEEEAddrRsp->devList, AssocDevList, (sizeof( uint16 ) * NumAssocDev) );
// 2162 
// 2163       osal_msg_send( ZDApp_IEEEAddrRsp_TaskID, (uint8 *)pIEEEAddrRsp );
// 2164     }
// 2165   }
// 2166 }
// 2167 #endif // ZDO_IEEEADDR_REQUEST
// 2168 
// 2169 #if defined ( ZDO_NODEDESC_REQUEST )
// 2170 /*********************************************************************
// 2171  * @fn      ZDApp_NodeDescRspCB()
// 2172  *
// 2173  * @brief
// 2174  *
// 2175  *   Called by ZDO when a Node_Desc_rsp message is received.
// 2176  *
// 2177  * @param  SrcAddr  - Source address
// 2178  * @param  Status - response status
// 2179  * @param  aoi - 16 bit network address of interest.
// 2180  * @param  pNodeDesc - pointer to the devices Node Descriptor
// 2181  *                     NULL if Status != ZDP_SUCCESS
// 2182  *
// 2183  * @return  none
// 2184  */
// 2185 void ZDApp_NodeDescRspCB( zAddrType_t *SrcAddr, byte Status, uint16 aoi,
// 2186                           NodeDescriptorFormat_t *pNodeDesc )
// 2187 {
// 2188 #if defined ( MT_ZDO_FUNC )
// 2189   /* First check if MT has subscribed for this callback. If so , pass it as
// 2190   a event to MonitorTest and return control to calling function after that */
// 2191   if ( _zdoCallbackSub & CB_ID_ZDO_NODE_DESC_RSP )
// 2192   {
// 2193     zdo_MTCB_NodeDescRspCB( SrcAddr, Status, aoi, pNodeDesc );
// 2194     return;
// 2195   }
// 2196 #endif  //MT_ZDO_FUNC
// 2197 }
// 2198 #endif
// 2199 
// 2200 #if defined ( ZDO_POWERDESC_REQUEST )
// 2201 /*********************************************************************
// 2202  * @fn      ZDApp_PowerDescRspCB()
// 2203  *
// 2204  * @brief
// 2205  *
// 2206  *   Called by ZDO when a Power_Desc_rsp message is received.
// 2207  *
// 2208  * @param  SrcAddr  - Source address
// 2209  * @param  Status - response status
// 2210  * @param  aoi - 16 bit network address of interest.
// 2211  * @param  pPwrDesc - pointer to the devices Power Descriptor
// 2212  *                     NULL if Status != ZDP_SUCCESS
// 2213  *
// 2214  * @return  none
// 2215  */
// 2216 void ZDApp_PowerDescRspCB( zAddrType_t *SrcAddr, byte Status,
// 2217                             uint16 aoi, NodePowerDescriptorFormat_t *pPwrDesc )
// 2218 {
// 2219 #if defined ( MT_ZDO_FUNC )
// 2220   /* First check if MT has subscribed for this callback. If so , pass it as
// 2221   a event to MonitorTest and return control to calling function after that */
// 2222   if ( _zdoCallbackSub & CB_ID_ZDO_POWER_DESC_RSP )
// 2223   {
// 2224     zdo_MTCB_PowerDescRspCB( SrcAddr, Status, aoi, pPwrDesc );
// 2225     return;
// 2226   }
// 2227 #endif  //MT_ZDO_FUNC
// 2228 }
// 2229 #endif // ZDO_POWERDESC_REQUEST
// 2230 
// 2231 #if defined ( ZDO_SIMPLEDESC_REQUEST )
// 2232 /*********************************************************************
// 2233  * @fn      ZDApp_SimpleDescRspCB()
// 2234  *
// 2235  * @brief
// 2236  *
// 2237  *   Called by ZDO when a Simple_Desc_rsp message is received.
// 2238  *
// 2239  * @param  SrcAddr  - Source address
// 2240  * @param  Status - response status
// 2241  * @param  aoi - 16 bit network address of interest.
// 2242  * @param  endPoint - Endpoint for description
// 2243  * @param  pSimpleDesc - pointer to the devices Simple Descriptor
// 2244  *                     NULL if Status != ZDP_SUCCESS
// 2245  *
// 2246  * @return  none
// 2247  */
// 2248 void ZDApp_SimpleDescRspCB( zAddrType_t *SrcAddr, byte Status,
// 2249                             uint16 aoi, byte endPoint,
// 2250                             SimpleDescriptionFormat_t *pSimpleDesc )
// 2251 {
// 2252 #if defined ( MT_ZDO_FUNC )
// 2253   /* First check if MT has subscribed for this callback. If so , pass it as
// 2254   a event to MonitorTest and return control to calling function after that */
// 2255   if ( _zdoCallbackSub & CB_ID_ZDO_SIMPLE_DESC_RSP )
// 2256   {
// 2257     zdo_MTCB_SimpleDescRspCB( SrcAddr, Status, aoi, endPoint, pSimpleDesc );
// 2258     return;
// 2259   }
// 2260 #endif  //MT_ZDO_FUNC
// 2261 }
// 2262 #endif // ZDO_SIMPLEDESC_REQUEST
// 2263 
// 2264 #if defined ( ZDO_ACTIVEEP_REQUEST )
// 2265 /*********************************************************************
// 2266  * @fn      ZDApp_ActiveEPRspCB()
// 2267  *
// 2268  * @brief
// 2269  *
// 2270  *   Called by ZDO when a Active_EP_rsp message is received.
// 2271  *
// 2272  * @param  src    - Device's short address that this response describes
// 2273  * @param  Status - response status
// 2274  * @param  epCnt  - number of epList items
// 2275  * @param  epList - array of active endpoint.
// 2276  *
// 2277  * @return  none
// 2278  */
// 2279 void ZDApp_ActiveEPRspCB( zAddrType_t *src, byte Status,
// 2280                                                      byte epCnt, byte *epList )
// 2281 {
// 2282 #if defined ( MT_ZDO_FUNC )
// 2283   /* First check if MT has subscribed for this callback. If so , pass it as
// 2284   a event to MonitorTest and return control to calling function after that */
// 2285   if ( _zdoCallbackSub & CB_ID_ZDO_ACTIVE_EPINT_RSP )
// 2286   {
// 2287     zdo_MTCB_MatchActiveEPRspCB( SPI_CB_ZDO_ACTIVE_EPINT_RSP, src,
// 2288                                   src->addr.shortAddr, Status, epCnt, epList );
// 2289     return;
// 2290   }
// 2291 #endif  //MT_ZDO_FUNC
// 2292 }
// 2293 #endif // ZDO_ACTIVEEP_REQUEST
// 2294 
// 2295 #if defined ( ZDO_MATCH_REQUEST )
// 2296 /*********************************************************************
// 2297  * @fn      ZDApp_MatchDescRspCB()
// 2298  *
// 2299  * @brief
// 2300  *
// 2301  *   Called by ZDO when a Match_Desc_rsp message is received.
// 2302  *
// 2303  * NOTE:  Currently, this function accepts any responding device as THE
// 2304  *        match and updates the endpoint (requested) destination's
// 2305  *        address.  So, the last response received is the application's
// 2306  *        match.
// 2307  *
// 2308  *        This function could be changed to do further device discovery
// 2309  *        and/or accept multiple responses.
// 2310  *
// 2311  * @param  src     - Device's short address that this response describes
// 2312  * @param  Status  - response status
// 2313  * @param  epCnt   - number of epList items
// 2314  * @param  epList  - array of active endpoint
// 2315  *
// 2316  * @return  none
// 2317  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2318 void ZDApp_MatchDescRspCB( zAddrType_t *src, byte Status,
ZDApp_MatchDescRspCB:
        CFI Block cfiBlock99 Using cfiCommon0
        CFI Function ZDApp_MatchDescRspCB
// 2319                                                      byte epCnt, byte *epList )
// 2320 {
        FUNCALL ZDApp_MatchDescRspCB, osal_msg_allocate
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDApp_MatchDescRspCB, osal_memcpy
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDApp_MatchDescRspCB, osal_msg_send
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDApp_MatchDescRspCB, ZDApp_SendNewDstAddr
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDApp_MatchDescRspCB, HalLedSet
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
        MOV	?V0 + 3,R4
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 5,A
// 2321 #if defined ( MT_ZDO_FUNC )
// 2322   /* First check if MT has subscribed for this callback. If so , pass it as
// 2323   a event to MonitorTest and return control to calling function after that */
// 2324   if ( _zdoCallbackSub & CB_ID_ZDO_MATCH_DESC_RSP )
// 2325   {
// 2326     zdo_MTCB_MatchActiveEPRspCB( SPI_CB_ZDO_MATCH_DESC_RSP, src,
// 2327                                   src->addr.shortAddr, Status, epCnt, epList );
// 2328     return;
// 2329   }
// 2330 #endif  //MT_ZDO_FUNC
// 2331 
// 2332   if ( (Status != ZDP_SUCCESS) || (epCnt == 0) )
        MOV	A,R1
        JZ	$+5
        LJMP	??ZDApp_MatchDescRspCB_0 & 0xFFFF
        MOV	A,R4
        JNZ	$+5
        LJMP	??ZDApp_MatchDescRspCB_0 & 0xFFFF
// 2333   {
// 2334     return;
// 2335   }
// 2336 
// 2337   if ( ZDApp_MatchDescRsp_TaskID )
        MOV	DPTR,#??ZDApp_MatchDescRsp_TaskID
        MOVX	A,@DPTR
        JZ	??ZDApp_MatchDescRspCB_1
// 2338   {
// 2339     // Send the IEEE Address response structure to the registered task.
// 2340     uint8 bufLen = sizeof( ZDO_MatchDescResp_t ) + epCnt;
// 2341     ZDO_MatchDescResp_t *pMatchDescRsp = (ZDO_MatchDescResp_t *)osal_msg_allocate( bufLen );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	A,#0x5
        ADD	A,?V0 + 3
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R6,?V0 + 0
        MOV	R7,?V0 + 1
// 2342 
// 2343     if ( pMatchDescRsp )
        MOV	A,R6
        JNZ	??ZDApp_MatchDescRspCB_2
        MOV	A,R7
??ZDApp_MatchDescRspCB_2:
        JZ	??ZDApp_MatchDescRspCB_1
// 2344     {
// 2345       pMatchDescRsp->hdr.event = ZDO_MATCH_DESC_RESP;
        MOV	A,#-0x2c
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
// 2346 
// 2347       // Build the structure.
// 2348       pMatchDescRsp->nwkAddr = src->addr.shortAddr;
        MOV	DPL,?V0 + 6
        MOV	DPH,?V0 + 7
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        LCALL	?Subroutine4 & 0xFFFF
// 2349       pMatchDescRsp->epCnt = epCnt;
??CrossCallReturnLabel_6:
        MOV	A,?V0 + 3
        MOVX	@DPTR,A
// 2350       osal_memcpy( pMatchDescRsp->epList, epList, epCnt );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 0,?V0 + 4
        MOV	?V0 + 1,?V0 + 5
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	R4,?V0 + 3
        MOV	R5,#0x0
        MOV	A,R6
        ADD	A,#0x5
        MOV	R2,A
        MOV	A,R7
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 2351 
// 2352       osal_msg_send( ZDApp_MatchDescRsp_TaskID, (uint8 *)pMatchDescRsp );
        ; Setup parameters for call to function osal_msg_send
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#??ZDApp_MatchDescRsp_TaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2353     }
// 2354   }
// 2355 
// 2356   if ( ZDApp_AutoFindMode_epDesc )
??ZDApp_MatchDescRspCB_1:
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        MOVX	A,@DPTR
        JNZ	??ZDApp_MatchDescRspCB_3
        INC	DPTR
        MOVX	A,@DPTR
??ZDApp_MatchDescRspCB_3:
        JZ	??ZDApp_MatchDescRspCB_0
// 2357   {
// 2358     ZDApp_SendNewDstAddr( *epList, src, 0, false,
// 2359                           *(ZDApp_AutoFindMode_epDesc->task_id),
// 2360                             ZDApp_AutoFindMode_epDesc->endPoint );
        ; Setup parameters for call to function ZDApp_SendNewDstAddr
        MOV	DPTR,#ZDApp_AutoFindMode_epDesc
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	?V0 + 0,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,?V0 + 6
        MOV	R3,?V0 + 7
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(ZDApp_SendNewDstAddr & 0xffff)
        MOV	A,#((ZDApp_SendNewDstAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
// 2361 
// 2362     HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x1
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDApp_MatchDescRspCB_0:
        LJMP	?Subroutine30 & 0xFFFF
        CFI EndBlock cfiBlock99
// 2363   }
// 2364 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker102 Using cfiCommon1
        CFI (cfiPicker102) NoFunction
        CFI (cfiPicker102) Picker
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond103 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105
// 2365 #endif // ZDO_MATCH_REQUEST
// 2366 
// 2367 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
// 2368 /*********************************************************************
// 2369  * @fn      ZDApp_EndDeviceBindRsp()
// 2370  *
// 2371  * @brief
// 2372  *
// 2373  *   Called by ZDO when a End_Device_Bind_rsp message is received.
// 2374  *
// 2375  * @param  SrcAddr  - Source address
// 2376  * @param  Status - response status
// 2377  *
// 2378  * @return  none
// 2379  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2380 void ZDApp_EndDeviceBindRsp( zAddrType_t *SrcAddr, byte Status )
ZDApp_EndDeviceBindRsp:
        CFI Block cfiBlock106 Using cfiCommon0
        CFI Function ZDApp_EndDeviceBindRsp
// 2381 {
        FUNCALL ZDApp_EndDeviceBindRsp, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_EndDeviceBindRsp, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2382 #if defined ( MT_ZDO_FUNC )
// 2383   /* First check if MT has subscribed for this callback. If so , pass it as
// 2384   a event to MonitorTest and return control to calling function after that */
// 2385   if ( _zdoCallbackSub & CB_ID_ZDO_END_DEVICE_BIND_RSP )
// 2386   {
// 2387     zdo_MTCB_BindRspCB( SPI_CB_ZDO_END_DEVICE_BIND_RSP, SrcAddr, Status );
// 2388     return;
// 2389   }
// 2390 #endif  //MT_ZDO_FUNC
// 2391 
// 2392   if ( Status == ZDP_SUCCESS )
        MOV	A,R1
        JNZ	??ZDApp_EndDeviceBindRsp_0
// 2393     HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x1
        SJMP	??ZDApp_EndDeviceBindRsp_1
// 2394 #if defined(BLINK_LEDS)
// 2395   else
// 2396     // Flash LED to show failure
// 2397     HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
??ZDApp_EndDeviceBindRsp_0:
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x4
??ZDApp_EndDeviceBindRsp_1:
        MOV	R1,#0x8
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LJMP	??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock106
// 2398 #endif
// 2399 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiBlock107 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 1)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
??Subroutine25_0:
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock107
// 2400 #endif // ZDO_ENDDEVICEBIND_REQUEST
// 2401 
// 2402 #if defined ( ZDO_BIND_UNBIND_REQUEST )
// 2403 /*********************************************************************
// 2404  * @fn      ZDApp_BindRsp()
// 2405  *
// 2406  * @brief
// 2407  *
// 2408  *   Called by ZDO when a Bind_rsp message is received.
// 2409  *
// 2410  * @param  SrcAddr  - Source address
// 2411  * @param  Status - response status
// 2412  *
// 2413  * @return  none
// 2414  */
// 2415 void ZDApp_BindRsp( zAddrType_t *SrcAddr, byte Status )
// 2416 {
// 2417   ZDO_BindRsp_t bindRsp;
// 2418 
// 2419 #if defined ( MT_ZDO_FUNC )
// 2420   /* First check if MT has subscribed for this callback. If so , pass it as
// 2421   a event to MonitorTest and return control to calling function after that */
// 2422   if ( _zdoCallbackSub & CB_ID_ZDO_BIND_RSP )
// 2423   {
// 2424     zdo_MTCB_BindRspCB( SPI_CB_ZDO_BIND_RSP, SrcAddr, Status );
// 2425     return;
// 2426   }
// 2427 #endif  //MT_ZDO_FUNC
// 2428 
// 2429   if ( ZDApp_BindUnbindRsp_TaskID != TASK_NO_TASK )
// 2430   {
// 2431     // Send the response structure to the registered task
// 2432     bindRsp.nwkAddr = SrcAddr->addr.shortAddr;
// 2433     bindRsp.status  = Status;
// 2434 
// 2435     ZDApp_SendMsg( ZDApp_BindUnbindRsp_TaskID,
// 2436                    ZDO_BIND_RESP,
// 2437                    sizeof(ZDO_BindRsp_t),
// 2438                    (byte*)(&bindRsp) );
// 2439   }
// 2440 }
// 2441 #endif // ZDO_BIND_UNBIND_REQUEST
// 2442 
// 2443 #if defined ( ZDO_BIND_UNBIND_REQUEST )
// 2444 /*********************************************************************
// 2445  * @fn      ZDApp_UnbindRsp()
// 2446  *
// 2447  * @brief
// 2448  *
// 2449  *   Called by ZDO when a Unbind_rsp message is received.
// 2450  *
// 2451  * @param  SrcAddr  - Source address
// 2452  * @param  Status - response status
// 2453  *
// 2454  * @return  none
// 2455  */
// 2456 void ZDApp_UnbindRsp( zAddrType_t *SrcAddr, byte Status )
// 2457 {
// 2458   ZDO_UnbindRsp_t unbindRsp;
// 2459 
// 2460 #if defined ( MT_ZDO_FUNC )
// 2461   /* First check if MT has subscribed for this callback. If so , pass it as
// 2462   a event to MonitorTest and return control to calling function after that */
// 2463   if ( _zdoCallbackSub & CB_ID_ZDO_UNBIND_RSP )
// 2464   {
// 2465     zdo_MTCB_BindRspCB( SPI_CB_ZDO_UNBIND_RSP, SrcAddr, Status );
// 2466     return;
// 2467   }
// 2468 #endif  //MT_ZDO_FUNC
// 2469 
// 2470   if ( ZDApp_BindUnbindRsp_TaskID != TASK_NO_TASK )
// 2471   {
// 2472     // Send the response structure to the registered task
// 2473     unbindRsp.nwkAddr = SrcAddr->addr.shortAddr;
// 2474     unbindRsp.status  = Status;
// 2475 
// 2476     ZDApp_SendMsg( ZDApp_BindUnbindRsp_TaskID,
// 2477                    ZDO_UNBIND_RESP,
// 2478                    sizeof(ZDO_UnbindRsp_t),
// 2479                    (byte*)(&unbindRsp) );
// 2480   }
// 2481 }
// 2482 #endif // ZDO_BIND_UNBIND_REQUEST
// 2483 
// 2484 /*********************************************************************
// 2485  * Call Back Functions from NWK  - API
// 2486  */
// 2487 
// 2488 /*********************************************************************
// 2489  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 2490  *
// 2491  * @brief       This function returns a choice of PAN to join.
// 2492  *
// 2493  * @param       ResultCount - Number of routers discovered
// 2494  * @param               NetworkList - Pointer to list of network descriptors
// 2495  *
// 2496  * @return      ZStatus_t
// 2497  */
// 2498 #define STACK_PROFILE_MAX 2

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2499 ZStatus_t ZDO_NetworkDiscoveryConfirmCB( byte ResultCount,
ZDO_NetworkDiscoveryConfirmCB:
        CFI Block cfiBlock108 Using cfiCommon0
        CFI Function ZDO_NetworkDiscoveryConfirmCB
// 2500                                          networkDesc_t *NetworkList )
// 2501 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, NLME_SetRequest
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, osal_start_timerEx
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, osal_cpyExtAddr
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        MOV	A,#-0xd
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 14
        MOV	A,#-0xe
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	A,R1
        MOV	R4,A
// 2502   networkDesc_t *pNwkDesc;
// 2503   ZDO_NetworkDiscoveryCfm_t msg;
// 2504   byte  i, j;
// 2505   uint8 stackProfile;
// 2506   uint8 stackProfilePro;
// 2507   uint8 selected;
// 2508 
// 2509 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 2510   if ( zdappMgmtNwkDiscReqInProgress )
// 2511   {
// 2512     zdappMgmtNwkDiscReqInProgress = false;
// 2513     ZDO_FinishProcessingMgmtNwkDiscReq( ResultCount, NetworkList );
// 2514     return ( ZSuccess );
// 2515   }
// 2516 #endif
// 2517 
// 2518   // process discovery results
// 2519   stackProfilePro = FALSE;
        MOV	?V0 + 1,#0x0
// 2520   selected = FALSE;
// 2521 
// 2522   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV	R5,#0x0
// 2523   {
// 2524     for ( j = 0; j < (sizeof(sPVerList)/sizeof(sPVerList[0])); ++j )
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV	?V0 + 0,#0x0
// 2525     {
// 2526       pNwkDesc = NetworkList;
??ZDO_NetworkDiscoveryConfirmCB_1:
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
// 2527       for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV	?V0 + 4,#0x0
        SJMP	??ZDO_NetworkDiscoveryConfirmCB_2
// 2528       {
// 2529         if ( zgConfigPANID != 0xFFFF )
// 2530         {
// 2531           // PAN Id is preconfigured. check if it matches
// 2532           // only 14 bits of pan id is used
// 2533           if ( pNwkDesc->panId != ( zgConfigPANID & 0x3FFF ) )
// 2534             continue;
// 2535           #if !defined ( DEF_PROTO_VERS )
// 2536           // If the macro was not defined ensure we join the version supported by
// 2537           // this PAN by forcing a match below. We need this statement because we
// 2538           // want to (possibly) override the NV value if the PAN was pre-defined.
// 2539           // See App Note 026.
// 2540           sPVerList[j] = pNwkDesc->version;
// 2541           #endif
// 2542         }
// 2543 
// 2544         // check that network is allowing joining
// 2545         //------------------------------------------------------------
// 2546         #if defined( RTR_NWK )
// 2547         //------------------------------------------------------------
// 2548         if ( stackProfilePro == FALSE )
// 2549         {
// 2550           if ( !pNwkDesc->routerCapacity )
// 2551           {
// 2552             continue;
// 2553           }
// 2554         }
// 2555         else
// 2556         {
// 2557           if ( !pNwkDesc->deviceCapacity )
??ZDO_NetworkDiscoveryConfirmCB_3:
        INC	DPTR
        MOVX	A,@DPTR
        JZ	??ZDO_NetworkDiscoveryConfirmCB_4
// 2558           {
// 2559             continue;
// 2560           }
// 2561         }
// 2562         //------------------------------------------------------------
// 2563         #else
// 2564         //------------------------------------------------------------
// 2565         if ( !pNwkDesc->deviceCapacity )
// 2566         {
// 2567           continue;
// 2568         }
// 2569         //------------------------------------------------------------
// 2570         #endif
// 2571         //------------------------------------------------------------
// 2572 
// 2573         // check version of zigbee protocol
// 2574         if ( pNwkDesc->version != sPVerList[j] )
??ZDO_NetworkDiscoveryConfirmCB_5:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_34:
        XRL	A,R0
        JNZ	??ZDO_NetworkDiscoveryConfirmCB_4
// 2575           continue;
// 2576 
// 2577         // check version of stack profile
// 2578         if ( pNwkDesc->stackProfile != zgStackProfile )
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R0,A
        MOV	DPTR,#zgStackProfile
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
// 2579         {
// 2580           stackProfilePro = TRUE;
        MOV	?V0 + 1,#0x1
// 2581 
// 2582           if ( stackProfile == 0 )
        MOV	A,R5
        JZ	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_6 & 0xFFFF
// 2583           {
// 2584             continue;
// 2585           }
// 2586         }
??ZDO_NetworkDiscoveryConfirmCB_4:
        INC	?V0 + 4
        MOV	A,R6
        ADD	A,#0x14
        LCALL	??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
??ZDO_NetworkDiscoveryConfirmCB_2:
        MOV	A,?V0 + 4
        CLR	C
        SUBB	A,R4
        JNC	??ZDO_NetworkDiscoveryConfirmCB_7
        MOV	DPTR,#zgConfigPANID
        MOVX	A,@DPTR
        XRL	A,#0xff
        JNZ	??ZDO_NetworkDiscoveryConfirmCB_8
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0xff
??ZDO_NetworkDiscoveryConfirmCB_8:
        JZ	??ZDO_NetworkDiscoveryConfirmCB_9
        MOV	DPTR,#zgConfigPANID
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ANL	A,#0x3f
        MOV	R1,A
        MOV	DPH,R7
        MOV	DPL,R6
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??ZDO_NetworkDiscoveryConfirmCB_10
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??ZDO_NetworkDiscoveryConfirmCB_10:
        JNZ	??ZDO_NetworkDiscoveryConfirmCB_4
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_55:
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
??ZDO_NetworkDiscoveryConfirmCB_9:
        MOV	A,?V0 + 1
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        JZ	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_3 & 0xFFFF
        MOVX	A,@DPTR
        JZ	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_5 & 0xFFFF
        SJMP	??ZDO_NetworkDiscoveryConfirmCB_4
// 2587 
// 2588         // check if beacon order is the right value..
// 2589     //  if ( pNwkDesc->beaconOrder < ZDO_CONFIG_MAX_BO )
// 2590     //    continue;
// 2591 
// 2592         // choose this pan for joining
// 2593         break;
// 2594       }
// 2595       if (i < ResultCount)
// 2596       {
// 2597         selected = TRUE;
// 2598         break;
// 2599       }
// 2600     }
??ZDO_NetworkDiscoveryConfirmCB_7:
        INC	?V0 + 0
        MOV	A,?V0 + 0
        CLR	C
        SUBB	A,#0x2
        JNC	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_1 & 0xFFFF
// 2601 
// 2602     // break if selected or stack profile pro wasn't found
// 2603     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
        MOV	A,?V0 + 1
        JZ	??ZDO_NetworkDiscoveryConfirmCB_11
// 2604     {
// 2605       break;
// 2606     }
// 2607   }
        INC	R5
        MOV	A,R5
        CLR	C
        SUBB	A,#0x2
        JNC	$+5
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_0 & 0xFFFF
// 2608 
// 2609   if ( i == ResultCount )
??ZDO_NetworkDiscoveryConfirmCB_11:
        MOV	A,R4
        XRL	A,?V0 + 4
        JNZ	??ZDO_NetworkDiscoveryConfirmCB_6
// 2610   {
// 2611     msg.hdr.status = ZDO_FAIL;   // couldn't find appropriate PAN to join !
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x1
        MOVX	@DPTR,A
        LJMP	??ZDO_NetworkDiscoveryConfirmCB_12 & 0xFFFF
// 2612   }
// 2613   else
// 2614   {
// 2615     // (possibly) reset NV network version we're running under.
// 2616     if (NLME_GetProtocolVersion() != sPVerList[j])
??ZDO_NetworkDiscoveryConfirmCB_6:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R2,A
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_35:
        XRL	A,R2
        JZ	??ZDO_NetworkDiscoveryConfirmCB_13
// 2617     {
// 2618       NLME_SetRequest(nwkProtocolVersion, 0, &sPVerList[j]);
        ; Setup parameters for call to function NLME_SetRequest
        MOV	A,?V0 + 0
        ADD	A,#(??sPVerList & 0xff)
        MOV	R4,A
        CLR	A
        ADDC	A,#((??sPVerList >> 8) & 0xff)
        MOV	R5,A
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	R1,#-0x68
        MOV	DPTR,#(NLME_SetRequest & 0xffff)
        MOV	A,#((NLME_SetRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2619       // make sure we update NV
// 2620       osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2621     }
// 2622 
// 2623     msg.hdr.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_13:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
// 2624     msg.panIdLSB = LO_UINT16( pNwkDesc->panId );
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        LCALL	?Subroutine19 & 0xFFFF
// 2625     msg.panIdMSB = HI_UINT16( pNwkDesc->panId );
??CrossCallReturnLabel_42:
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        LCALL	?Subroutine19 & 0xFFFF
// 2626     msg.logicalChannel = pNwkDesc->logicalChannel;
??CrossCallReturnLabel_43:
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        LCALL	?Subroutine4 & 0xFFFF
// 2627     msg.version = pNwkDesc->version;
??CrossCallReturnLabel_7:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 2628     osal_cpyExtAddr( msg.extendedPANID, pNwkDesc->extendedPANID );
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	A,R6
        ADD	A,#0xc
        MOV	R4,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R5,A
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2629   }
// 2630 
// 2631   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(ZDO_NetworkDiscoveryCfm_t), (byte *)&msg );
??ZDO_NetworkDiscoveryConfirmCB_12:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R3,#0xe
        MOV	R2,#0x1
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2632 
// 2633   return (ZSuccess);
        MOV	R1,#0x0
        MOV	A,#0xe
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	R7,#0x5
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock108
// 2634 }  // ZDO_NetworkDiscoveryConfirmCB

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond109 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker111 Using cfiCommon1
        CFI (cfiPicker111) NoFunction
        CFI (cfiPicker111) Picker
        LCALL	?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_56:
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiPicker111

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond112 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_34
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_35
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOV	?V0 + 2,?V0 + 0
        MOV	A,?V0 + 2
        ADD	A,#(??sPVerList & 0xff)
        MOV	DPL,A
        CLR	A
        ADDC	A,#((??sPVerList >> 8) & 0xff)
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond118) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond118) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond118) CFA_SP SP+-5
        CFI Block cfiPicker119 Using cfiCommon1
        CFI (cfiPicker119) NoFunction
        CFI (cfiPicker119) Picker
        MOV	DPTR,#ZDAppTaskID
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 24)
??Subroutine8_0:
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(ZDApp_SendMsg & 0xffff)
        MOV	A,#((ZDApp_SendMsg >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiPicker119
        CFI EndBlock cfiCond120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_44:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_7
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker128 Using cfiCommon1
        CFI (cfiPicker128) NoFunction
        CFI (cfiPicker128) Picker
        MOVX	@DPTR,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiPicker128
// 2635 
// 2636 /*********************************************************************
// 2637  * @fn          ZDO_NetworkFormationConfirmCB
// 2638  *
// 2639  * @brief       This function reports the results of the request to
// 2640  *              initialize a coordinator in a network.
// 2641  *
// 2642  * @param       Status - Result of NLME_NetworkFormationRequest()
// 2643  *
// 2644  * @return      none
// 2645  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2646 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
        CFI Block cfiBlock129 Using cfiCommon0
        CFI Function ZDO_NetworkFormationConfirmCB
// 2647 {
        ; Saved register size: 0
        ; Auto size: 0
// 2648 #if defined(ZDO_COORDINATOR)
// 2649   nwkStatus = (byte)Status;
// 2650 
// 2651   if ( Status == ZSUCCESS )
// 2652   {
// 2653     // LED on shows Coordinator started
// 2654     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2655 
// 2656     // LED off forgets HOLD_AUTO_START
// 2657     HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
// 2658 
// 2659 #if defined ( ZBIT )
// 2660     SIM_SetColor(0xd0ffd0);
// 2661 #endif
// 2662 
// 2663     if ( devState == DEV_HOLD )
// 2664     {
// 2665       // Began with HOLD_AUTO_START
// 2666       devState = DEV_COORD_STARTING;
// 2667     }
// 2668   }
// 2669 #if defined(BLINK_LEDS)
// 2670   else
// 2671     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2672 #endif
// 2673 
// 2674   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
// 2675 #endif  //ZDO_COORDINATOR
// 2676 }
        LJMP	?BRET
        CFI EndBlock cfiBlock129
// 2677 
// 2678 #if defined(RTR_NWK)
// 2679 /*********************************************************************
// 2680  * @fn          ZDO_StartRouterConfirmCB
// 2681  *
// 2682  * @brief       This function reports the results of the request to
// 2683  *              start functioning as a router in a network.
// 2684  *
// 2685  * @param       Status - Result of NLME_StartRouterRequest()
// 2686  *
// 2687  * @return      none
// 2688  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2689 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
        CFI Block cfiBlock130 Using cfiCommon0
        CFI Function ZDO_StartRouterConfirmCB
// 2690 {
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2691   nwkStatus = (byte)Status;
        MOV	A,R1
        MOV	DPTR,#nwkStatus
        MOVX	@DPTR,A
// 2692 
// 2693   if ( Status == ZSUCCESS )
        JNZ	??ZDO_StartRouterConfirmCB_0
// 2694   {
// 2695     // LED on shows Router started
// 2696     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x1
        MOV	R1,#0x4
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2697     // LED off forgets HOLD_AUTO_START
// 2698     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2699     if ( devState == DEV_HOLD )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JNZ	??ZDO_StartRouterConfirmCB_1
// 2700     {
// 2701       // Began with HOLD_AUTO_START
// 2702       devState = DEV_END_DEVICE;
        MOV	A,#0x6
        MOVX	@DPTR,A
        SJMP	??ZDO_StartRouterConfirmCB_1
// 2703     }
// 2704   }
// 2705 #if defined(BLINK_LEDS)
// 2706   else
// 2707     HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x4
        MOV	R1,#0x4
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2708 #endif
// 2709 
// 2710   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV	R2,#0x20
        LJMP	?Subroutine31 & 0xFFFF
        CFI EndBlock cfiBlock130
// 2711 }
// 2712 #endif  //RTR_NWK
// 2713 
// 2714 /*********************************************************************
// 2715  * @fn          ZDO_JoinConfirmCB
// 2716  *
// 2717  * @brief       This function allows the next hight layer to be notified
// 2718  *              of the results of its request to join itself or another
// 2719  *              device to a network.
// 2720  *
// 2721  * @param       Status - Result of NLME_JoinRequest()
// 2722  *
// 2723  * @return      none
// 2724  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2725 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
        CFI Block cfiBlock131 Using cfiCommon0
        CFI Function ZDO_JoinConfirmCB
// 2726 {
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_JoinConfirmCB, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2727   nwkStatus = (byte)Status;
        MOV	A,R1
        MOV	DPTR,#nwkStatus
        MOVX	@DPTR,A
// 2728 
// 2729   if ( Status == ZSUCCESS )
        JNZ	??ZDO_JoinConfirmCB_0
// 2730   {
// 2731     // LED on shows device joined
// 2732     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x1
        MOV	R1,#0x4
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2733     // LED off forgets HOLD_AUTO_START
// 2734     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x0
        MOV	R1,#0x8
        MOV	A,#((HalLedSet >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2735     if ( (devState == DEV_HOLD) )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JNZ	??ZDO_JoinConfirmCB_1
// 2736     {
// 2737       // Began with HOLD_AUTO_START
// 2738       devState = DEV_NWK_JOINING;
        MOV	A,#0x3
        MOVX	@DPTR,A
// 2739     }
// 2740 #if !  ( SECURE != 0  )
// 2741     // Notify to save info into NV
// 2742     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 100 );
??ZDO_JoinConfirmCB_1:
        ; Setup parameters for call to function osal_start_timerEx
        MOV	R4,#0x64
        MOV	R5,#0x0
        LCALL	??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_10:
        SJMP	??ZDO_JoinConfirmCB_2
// 2743 #endif
// 2744   }
// 2745 #if defined(BLINK_LEDS)
// 2746   else
// 2747     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_JoinConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV	R2,#0x4
        MOV	R1,#0x4
        MOV	DPTR,#(HalLedSet & 0xffff)
        MOV	A,#((HalLedSet >> 16) & 0xff)
??ZDO_JoinConfirmCB_2:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2748 #endif
// 2749 
// 2750   // Notify ZDApp
// 2751   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R3,#0x2
        MOV	R2,#0x2
        LJMP	?Subroutine32 & 0xFFFF
        CFI EndBlock cfiBlock131
// 2752 }
// 2753 
// 2754 /*********************************************************************
// 2755  * @fn          ZDO_JoinIndicationCB
// 2756  *
// 2757  * @brief       This function allows the next higher layer of a
// 2758  *              coordinator to be notified of a remote join request.
// 2759  *
// 2760  * @param       ShortAddress - 16-bit address
// 2761  * @param       ExtendedAddress - IEEE (64-bit) address
// 2762  * @param       CapabilityInformation - Association Capability Information
// 2763  *
// 2764  * @return      ZStatus_t
// 2765  */
// 2766 #if defined(RTR_NWK)

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2767 ZStatus_t ZDO_JoinIndicationCB( uint16 ShortAddress, byte *ExtendedAddress,
ZDO_JoinIndicationCB:
        CFI Block cfiBlock132 Using cfiCommon0
        CFI Function ZDO_JoinIndicationCB
// 2768                                          byte CapabilityInformation )
// 2769 {
        FUNCALL ZDO_JoinIndicationCB, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2770 #if defined (AUTO_SOFT_START)
// 2771     ZDX_PostCoordinatorIEEE(ShortAddress);
// 2772 #endif
// 2773 
// 2774   // Notify to save info into NV
// 2775   osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2776 
// 2777 #if   ( SECURE != 0  )
// 2778   // send notification to TC of new device..
// 2779   if ( _NIB.SecurityLevel )
// 2780     osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
// 2781 #endif  // SECURE
// 2782 
// 2783   return ( ZSuccess );
        MOV	R1,#0x0
        LJMP	??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock132
// 2784 }
// 2785 #endif  //RTR_NWK
// 2786 
// 2787 /*********************************************************************
// 2788  * @fn          ZDO_LeaveCnf
// 2789  *
// 2790  * @brief       This function allows the next higher layer to be
// 2791  *              notified of the results of its request for this or
// 2792  *              a child device to leave the network.
// 2793  *
// 2794  * @param       cnf - NLME_LeaveCnf_t
// 2795  *
// 2796  * @return      none
// 2797  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2798 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
        CFI Block cfiBlock133 Using cfiCommon0
        CFI Function ZDO_LeaveCnf
// 2799 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZDO_LeaveCnf, osal_ExtAddrEqual
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZDO_LeaveCnf, NLME_RemoveChild
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
// 2800   // Check for this device
// 2801   if ( osal_ExtAddrEqual( cnf->extAddr,
// 2802                           NLME_GetExtAddr() ) == TRUE )
        ; Setup parameters for call to function osal_ExtAddrEqual
        ; Setup parameters for call to function NLME_GetExtAddr
        MOV	DPTR,#(NLME_GetExtAddr & 0xffff)
        MOV	A,#((NLME_GetExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	A,R6
        ADD	A,#0x2
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(osal_ExtAddrEqual & 0xffff)
        MOV	A,#((osal_ExtAddrEqual >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JNZ	??ZDO_LeaveCnf_0
// 2803   {
// 2804     // Prepare to leave with reset
// 2805     ZDApp_LeaveReset( cnf->rejoin );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV	A,R6
        ADD	A,#0xb
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_32:
        SJMP	??CrossCallReturnLabel_16
// 2806   }
// 2807   //------------------------------------------------------------------
// 2808   #if defined( RTR_NWK )
// 2809   //------------------------------------------------------------------
// 2810   else
// 2811   {
// 2812     // Remove device address(optionally descendents) from data
// 2813     ZDApp_LeaveUpdate( cnf->dstAddr,
// 2814                        cnf->extAddr,
// 2815                        cnf->removeChildren );
??ZDO_LeaveCnf_0:
        ; Setup parameters for call to function NLME_RemoveChild
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2816   }
// 2817   //------------------------------------------------------------------
// 2818   #endif
// 2819   //------------------------------------------------------------------
// 2820 }
        LJMP	??Subroutine27_0 & 0xFFFF
        CFI EndBlock cfiBlock133
// 2821 
// 2822 /*********************************************************************
// 2823  * @fn          ZDO_LeaveInd
// 2824  *
// 2825  * @brief       This function allows the next higher layer of a
// 2826  *              device to be notified of a remote leave request or
// 2827  *              indication.
// 2828  *
// 2829  * @param       ind - NLME_LeaveInd_t
// 2830  *
// 2831  * @return      none
// 2832  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2833 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
        CFI Block cfiBlock134 Using cfiCommon0
        CFI Function ZDO_LeaveInd
// 2834 {
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_LeaveInd, NLME_RemoveChild
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
// 2835   uint8 leave;
// 2836 
// 2837 
// 2838   // Parent is requesting the leave - NWK layer filters out illegal
// 2839   // requests
// 2840   if ( ind->request == TRUE )
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0x1
        JNZ	??ZDO_LeaveInd_0
// 2841   {
// 2842     // Notify network of leave
// 2843     //----------------------------------------------------------------
// 2844     #if defined( RTR_NWK )
// 2845     //----------------------------------------------------------------
// 2846     NLME_LeaveRsp_t rsp;
// 2847     rsp.rejoin         = ind->rejoin;
        MOV	A,R6
        ADD	A,#0xc
        LCALL	??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_37:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
// 2848     rsp.removeChildren = ind->removeChildren;
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
// 2849     NLME_LeaveRsp( &rsp );
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(NLME_LeaveRsp & 0xffff)
        MOV	A,#((NLME_LeaveRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??ZDO_LeaveInd_1
// 2850     //----------------------------------------------------------------
// 2851     #endif
// 2852     //----------------------------------------------------------------
// 2853 
// 2854     // Prepare to leave with reset
// 2855     ZDApp_LeaveReset( ind->rejoin );
// 2856   }
// 2857   else
// 2858   {
// 2859     leave = FALSE;
// 2860 
// 2861     // Check if this device needs to leave as a child or descendent
// 2862     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        MOV	DPL,R6
        MOV	DPH,R7
        PUSH	DPL
        CFI CFA_SP SP+-1
        PUSH	DPH
        CFI CFA_SP SP+-2
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        MOV	DPTR,#(NLME_GetCoordShortAddr & 0xffff)
        MOV	A,#((NLME_GetCoordShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        POP	DPH
        CFI CFA_SP SP+-1
        POP	DPL
        CFI CFA_SP SP+0
        MOVX	A,@DPTR
        XRL	A,?V0 + 0
        JNZ	??ZDO_LeaveInd_2
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,?V0 + 1
??ZDO_LeaveInd_2:
        JNZ	??ZDO_LeaveInd_3
// 2863     {
// 2864       if ( ( ind->removeChildren == TRUE               ) ||
// 2865            ( ZDO_Config_Node_Descriptor.LogicalType ==
// 2866              NODETYPE_DEVICE                           )    )
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_39:
        XRL	A,#0x1
        JZ	??ZDO_LeaveInd_1
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        ANL	A,#0x7
        XRL	A,#0x2
        JNZ	??ZDO_LeaveInd_3
// 2867       {
// 2868         leave = TRUE;
// 2869       }
// 2870     }
// 2871     else if ( ind->removeChildren == TRUE )
// 2872     {
// 2873       // Check NWK address allocation algorithm
// 2874       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 2875     }
// 2876 
// 2877     if ( leave == TRUE )
// 2878     {
// 2879       // Prepare to leave with reset
// 2880       ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV	A,R6
        ADD	A,#0xc
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_33:
        SJMP	??CrossCallReturnLabel_17
// 2881     }
// 2882     else
// 2883     {
// 2884       // Remove device address(optionally descendents) from data
// 2885       ZDApp_LeaveUpdate( ind->srcAddr,
// 2886                          ind->extAddr,
// 2887                          ind->removeChildren );
??ZDO_LeaveInd_3:
        ; Setup parameters for call to function NLME_RemoveChild
        MOV	A,R6
        ADD	A,#0xb
        MOV	DPL,A
        MOV	A,R7
        LCALL	??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2888     }
// 2889   }
// 2890 }
        LJMP	?Subroutine26 & 0xFFFF
        CFI EndBlock cfiBlock134

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond135 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker137 Using cfiCommon1
        CFI (cfiPicker137) NoFunction
        CFI (cfiPicker137) Picker
        MOV	A,R6
        ADD	A,#0xb
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 12)
??Subroutine17_0:
        MOV	DPL,A
        MOV	A,R7
        LCALL	??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_54:
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiPicker137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond140 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker142 Using cfiCommon1
        CFI (cfiPicker142) NoFunction
        CFI (cfiPicker142) Picker
        MOV	DPL,A
        MOV	A,R7
        LCALL	??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_53:
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(ZDApp_LeaveReset & 0xffff)
        MOV	A,#((ZDApp_LeaveReset >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiPicker142

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond143 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker147 Using cfiCommon1
        CFI (cfiPicker147) NoFunction
        CFI (cfiPicker147) Picker
        MOV	DPL,A
        MOV	A,?V0 + 5
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_37
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_32
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_38
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_39
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_33
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_36
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 27)
??Subroutine22_0:
        ADDC	A,#0x0
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiPicker147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond155 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker157 Using cfiCommon1
        CFI (cfiPicker157) NoFunction
        CFI (cfiPicker157) Picker
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	A,R6
        ADD	A,#0x2
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(NLME_RemoveChild & 0xffff)
        MOV	A,#((NLME_RemoveChild >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiPicker157
// 2891 
// 2892 /*********************************************************************
// 2893  * @fn          ZDO_SyncIndicationCB
// 2894  *
// 2895  * @brief       This function allows the next higher layer of a
// 2896  *              coordinator to be notified of a loss of synchronization
// 2897  *                          with the parent/child device.
// 2898  *
// 2899  * @param       type: 0 - child; 1 - parent
// 2900  *
// 2901  *
// 2902  * @return      none
// 2903  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2904 void ZDO_SyncIndicationCB( byte type, uint16 shortAddr )
ZDO_SyncIndicationCB:
        CFI Block cfiBlock158 Using cfiCommon0
        CFI Function ZDO_SyncIndicationCB
// 2905 {
        ; Saved register size: 0
        ; Auto size: 0
// 2906 
// 2907 #if !defined ( RTR_NWK )
// 2908     if ( type == 1 )
// 2909     {
// 2910       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
// 2911     }
// 2912 #endif
// 2913   return;
        LJMP	?BRET
        CFI EndBlock cfiBlock158
// 2914 }
// 2915 
// 2916 /*********************************************************************
// 2917  * @fn          ZDO_PollConfirmCB
// 2918  *
// 2919  * @brief       This function allows the next higher layer to be
// 2920  *              notified of a Poll Confirm.
// 2921  *
// 2922  * @param       none
// 2923  *
// 2924  * @return      none
// 2925  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2926 void ZDO_PollConfirmCB( byte status )
ZDO_PollConfirmCB:
        CFI Block cfiBlock159 Using cfiCommon0
        CFI Function ZDO_PollConfirmCB
// 2927 {
        ; Saved register size: 0
        ; Auto size: 0
// 2928   return;
        LJMP	?BRET
        CFI EndBlock cfiBlock159
// 2929 }
// 2930 
// 2931 /******************************************************************************
// 2932  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 2933  *
// 2934  * @brief       Stub routine implemented by NHLE. NHLE should call
// 2935  *              <AddrMgrWriteNV> when appropriate.
// 2936  *
// 2937  * @param       none
// 2938  *
// 2939  * @return      none
// 2940  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2941 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
        CFI Block cfiBlock160 Using cfiCommon0
        CFI Function AddrMgrWriteNVRequest
// 2942 {
        FUNCALL AddrMgrWriteNVRequest, osal_get_timeoutEx
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        FUNCALL AddrMgrWriteNVRequest, osal_start_timerEx
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2943   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV	R2,#0x0
        MOV	R3,#0x2
        MOV	DPTR,#ZDAppTaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_get_timeoutEx & 0xffff)
        MOV	A,#((osal_get_timeoutEx >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        JNZ	??AddrMgrWriteNVRequest_0
        MOV	A,R3
??AddrMgrWriteNVRequest_0:
        JNZ	??AddrMgrWriteNVRequest_1
// 2944   {
// 2945     // Trigger to save info into NV
// 2946     osal_start_timerEx( ZDAppTaskID,
// 2947                         ZDO_NWK_UPDATE_NV,
// 2948                         ZDAPP_UPDATE_NWK_NV_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV	R4,#0x64
        MOV	R5,#0x0
        LCALL	??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 2949   }
// 2950 }
??AddrMgrWriteNVRequest_1:
        LJMP	??Subroutine26_1 & 0xFFFF
        CFI EndBlock cfiBlock160

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond161 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond162) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond162) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond162) CFA_SP SP+-5
        CFI Block cfiPicker163 Using cfiCommon1
        CFI (cfiPicker163) NoFunction
        CFI (cfiPicker163) Picker
        MOV	R4,#-0x18
        MOV	R5,#0x3
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond165) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond165) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond165) CFA_SP SP+-5
??Subroutine5_0:
        MOV	R2,#0x0
        MOV	R3,#0x2
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond166) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond166) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond166) CFA_SP SP+-5
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond167) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond167) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond167) CFA_SP SP+-5
??Subroutine5_1:
        MOV	DPTR,#ZDAppTaskID
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(osal_start_timerEx & 0xffff)
        MOV	A,#((osal_start_timerEx >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiPicker163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
// 2951 
// 2952 /*********************************************************************
// 2953  * Call Back Functions from Security  - API
// 2954  */
// 2955 
// 2956 #if defined( ZDO_COORDINATOR )
// 2957  /*********************************************************************
// 2958  * @fn          ZDO_UpdateDeviceIndication
// 2959  *
// 2960  * @brief       This function notifies the "Trust Center" of a
// 2961  *              network when a device joins or leaves the network.
// 2962  *
// 2963  * @param       extAddr - pointer to 64 bit address of new device
// 2964  * @param       status  - 0 if a new device joined securely
// 2965  *                      - 1 if a new device joined un-securely
// 2966  *                      - 2 if a device left the network
// 2967  *
// 2968  * @return      true if newly joined device should be allowed to
// 2969  *                                              remain on network
// 2970  */
// 2971 ZStatus_t ZDO_UpdateDeviceIndication( byte *extAddr, byte status )
// 2972 {
// 2973 
// 2974 #if   ( SECURE != 0  )
// 2975   // can implement a network access policy based on the
// 2976   // IEEE address of newly joining devices...
// 2977 #endif  // Trust Center
// 2978 
// 2979   return ZSuccess;
// 2980 }
// 2981 #endif // ZDO
// 2982 
// 2983 /*********************************************************************
// 2984  * @fn          ZDApp_InMsgCB
// 2985  *
// 2986  * @brief       This function is called to pass up any message that is
// 2987  *              not yet supported.  This allows for the developer to
// 2988  *              support features themselves..
// 2989  *
// 2990  * @return      none
// 2991  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2992 void ZDApp_InMsgCB( byte TransSeq, zAddrType_t *srcAddr, byte wasBroadcast,
ZDApp_InMsgCB:
        CFI Block cfiBlock168 Using cfiCommon0
        CFI Function ZDApp_InMsgCB
// 2993                   cId_t clusterID, byte asduLen, byte *asdu, byte SecurityUse )
// 2994 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R5,A
// 2995   if ( clusterID & ZDO_RESPONSE_BIT )
        MOV	A,#-0x80
        ANL	A,R7
        MOV	?V0 + 1,A
        CLR	A
        JNZ	??ZDApp_InMsgCB_0
        MOV	A,?V0 + 1
??ZDApp_InMsgCB_0:
        JNZ	??ZDApp_InMsgCB_1
// 2996   {
// 2997     // Handle the response message
// 2998   }
// 2999   else
// 3000   {
// 3001     // Handle the request message by sending a generic "not supported".
// 3002     // End Device Announce doesn't have a response.
// 3003     if ( !wasBroadcast && clusterID != End_Device_annce )
        MOV	A,R4
        JNZ	??ZDApp_InMsgCB_1
        MOV	A,#0x13
        XRL	A,R6
        JNZ	??ZDApp_InMsgCB_2
        MOV	A,R7
??ZDApp_InMsgCB_2:
        JZ	??ZDApp_InMsgCB_1
// 3004     {
// 3005       ZDP_GenericRsp( TransSeq, srcAddr, ZDP_NOT_SUPPORTED, 0,
// 3006                       (uint16)(clusterID | ZDO_RESPONSE_BIT), SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV	A,R6
        MOV	?V0 + 0,A
        MOV	A,#-0x80
        ORL	A,R7
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	?V0 + 0,#0x0
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,#-0x7c
        MOV	DPTR,#(ZDP_GenericRsp & 0xffff)
        MOV	A,#((ZDP_GenericRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 3007     }
// 3008   }
// 3009 }
??ZDApp_InMsgCB_1:
        LJMP	??Subroutine26_1 & 0xFFFF
        CFI EndBlock cfiBlock168
// 3010 
// 3011 #if defined ( ZDO_MGMT_LQI_REQUEST )
// 3012 /*********************************************************************
// 3013  * @fn          ZDApp_MgmtLqiRspCB
// 3014  *
// 3015  * @brief       This function handles Management LQI response for the
// 3016  *              Device Object application.
// 3017  *
// 3018  * @param       Status - ZSuccess or other for failure
// 3019  * @param       NeighborLqiEntries - number of possible entries on
// 3020  *                       the device
// 3021  * @param       StartIndex - where this list start in possible entries
// 3022  * @param       NeighborLqiCount - number of entries in this list
// 3023  * @param       pList - pointer to the list of LQI items.
// 3024  * @param       SecurityUse -
// 3025  *
// 3026  * @return      none
// 3027  */
// 3028 void ZDApp_MgmtLqiRspCB( uint16 SrcAddr, byte Status, byte NeighborLqiEntries,
// 3029                          byte StartIndex, byte NeighborLqiCount,
// 3030                          neighborLqiItem_t *pList )
// 3031 {
// 3032   byte x;
// 3033 
// 3034 #if defined ( MT_ZDO_FUNC )
// 3035   /* First check if MT has subscribed for this callback. If so , pass it as
// 3036   a event to MonitorTest and return control to calling function after that */
// 3037   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_LQI_RSP )
// 3038   {
// 3039     zdo_MTCB_MgmtLqiRspCB( SrcAddr, Status, NeighborLqiEntries, StartIndex,
// 3040                                         NeighborLqiCount, pList );
// 3041     return;
// 3042   }
// 3043 #endif  //MT_ZDO_FUNC
// 3044 
// 3045   if ( Status == ZSuccess )
// 3046   {
// 3047     for ( x = 0; x < NeighborLqiCount; x++, pList++ )
// 3048     {
// 3049       // Do something with the results
// 3050     }
// 3051   }
// 3052   else
// 3053   {
// 3054     // Error
// 3055   }
// 3056 }
// 3057 #endif // ZDO_MGMT_LQI_REQUEST
// 3058 
// 3059 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
// 3060 /*********************************************************************
// 3061  * @fn          ZDApp_MgmtNwkDiscRspCB
// 3062  *
// 3063  * @brief       This function handles Management Network Discovery
// 3064  *              response for the Device Object application.
// 3065  *
// 3066  * @param       SrcAddr - source of the message
// 3067  * @param       Status - ZSuccess or other for failure
// 3068  * @param       NetworkCount - number of possible entries on
// 3069  *                       the device
// 3070  * @param       StartIndex - where this list start in possible entries
// 3071  * @param       networkListCount - number of entries in this list
// 3072  * @param       pList - pointer to the list of Network Discover items.
// 3073  * @param       SecurityUse -
// 3074  *
// 3075  * @return      none
// 3076  */
// 3077 void ZDApp_MgmtNwkDiscRspCB( uint16 SrcAddr, byte Status, byte NetworkCount,
// 3078                              byte StartIndex, byte networkListCount,
// 3079                              mgmtNwkDiscItem_t *pList )
// 3080 {
// 3081   byte x;
// 3082 
// 3083 #if defined ( MT_ZDO_FUNC )
// 3084   /* First check if MT has subscribed for this callback. If so , pass it as
// 3085   a event to MonitorTest and return control to calling function after that */
// 3086   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_NWKDISC_RSP )
// 3087   {
// 3088     zdo_MTCB_MgmtNwkDiscRspCB( SrcAddr, Status, NetworkCount, StartIndex,
// 3089                                         networkListCount, pList );
// 3090     return;
// 3091   }
// 3092 #endif  //MT_ZDO_FUNC
// 3093 
// 3094   if ( Status == ZSuccess )
// 3095   {
// 3096     for ( x = 0; x < networkListCount; x++, pList++ )
// 3097     {
// 3098       // Do something with the results
// 3099     }
// 3100   }
// 3101   else
// 3102   {
// 3103     // Error
// 3104   }
// 3105 }
// 3106 #endif // ZDO_MGMT_NWKDISC_REQUEST
// 3107 
// 3108 #if defined ( ZDO_MGMT_RTG_REQUEST )
// 3109 /*********************************************************************
// 3110  * @fn          ZDApp_MgmtRtgRspCB
// 3111  *
// 3112  * @brief       This function handles Management Routing response for the
// 3113  *              Device Object application.
// 3114  *
// 3115  * @param       SrcAddr - source of the message
// 3116  * @param       Status - ZSuccess or other for failure
// 3117  * @param       rtgCount - number of possible entries on
// 3118  *                       the device
// 3119  * @param       StartIndex - where this list start in possible entries
// 3120  * @param       rtgCount - number of entries in this list
// 3121  * @param       pList - pointer to the list of Network Discover items.
// 3122  * @param       SecurityUse -
// 3123  *
// 3124  * @return      none
// 3125  */
// 3126 void ZDApp_MgmtRtgRspCB( uint16 SrcAddr, byte Status, byte rtgCount,
// 3127                          byte StartIndex, byte rtgListCount,
// 3128                          rtgItem_t *pList )
// 3129 {
// 3130   byte x;
// 3131 
// 3132 #if defined ( MT_ZDO_FUNC )
// 3133   /* First check if MT has subscribed for this callback. If so , pass it as
// 3134   a event to MonitorTest and return control to calling function after that */
// 3135   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_RTG_RSP )
// 3136   {
// 3137     zdo_MTCB_MgmtRtgRspCB( SrcAddr, Status, rtgCount, StartIndex,
// 3138                                                         rtgListCount, pList );
// 3139     return;
// 3140   }
// 3141 #endif  //MT_ZDO_FUNC
// 3142 
// 3143   if ( Status == ZSuccess )
// 3144   {
// 3145     for ( x = 0; x < rtgListCount; x++, pList++ )
// 3146     {
// 3147       // Do something with the results
// 3148     }
// 3149   }
// 3150   else
// 3151   {
// 3152     // Error
// 3153   }
// 3154 }
// 3155 #endif // ZDO_MGMT_RTG_REQUEST
// 3156 
// 3157 #if defined ( ZDO_MGMT_BIND_REQUEST )
// 3158 /*********************************************************************
// 3159  * @fn          ZDApp_MgmtBindRspCB
// 3160  *
// 3161  * @brief       This function handles Management Binding response for the
// 3162  *              Device Object application.
// 3163  *
// 3164  * @param       SrcAddr - source of the message
// 3165  * @param       Status - ZSuccess or other for failure
// 3166  * @param       BindingCount - number of possible entries on
// 3167  *                       the device
// 3168  * @param       StartIndex - where this list start in possible entries
// 3169  * @param       BindingListCount - number of entries in this list
// 3170  * @param       pList - pointer to the list of Network Discover items.
// 3171  * @param       SecurityUse -
// 3172  *
// 3173  * @return      none
// 3174  */
// 3175 void ZDApp_MgmtBindRspCB( uint16 SrcAddr, byte Status, byte BindingCount,
// 3176                          byte StartIndex, byte BindingListCount,
// 3177                          apsBindingItem_t *pList )
// 3178 {
// 3179   byte x;
// 3180 
// 3181 #if defined ( MT_ZDO_FUNC )
// 3182   /* First check if MT has subscribed for this callback. If so , pass it as
// 3183   a event to MonitorTest and return control to calling function after that */
// 3184   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_BIND_RSP )
// 3185   {
// 3186     zdo_MTCB_MgmtBindRspCB( SrcAddr, Status, BindingCount, StartIndex,
// 3187                                                   BindingListCount, pList );
// 3188     return;
// 3189   }
// 3190 #endif  //MT_ZDO_FUNC
// 3191 
// 3192   if ( Status == ZSuccess )
// 3193   {
// 3194     for ( x = 0; x < BindingListCount; x++, pList++ )
// 3195     {
// 3196       // Do something with the results
// 3197     }
// 3198   }
// 3199   else
// 3200   {
// 3201     // Error
// 3202   }
// 3203 }
// 3204 #endif // ZDO_MGMT_BIND_REQUEST
// 3205 
// 3206 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
// 3207 /*********************************************************************
// 3208  * @fn          ZDApp_MgmtDirectJoinRspCB
// 3209  *
// 3210  * @brief       This function handles Management Direct Join response for the
// 3211  *              Device Object application.
// 3212  *
// 3213  * @param       SrcAddr - source of the message
// 3214  * @param       Status - ZSuccess or other for failure
// 3215  * @param       SecurityUse -
// 3216  *
// 3217  * @return      none
// 3218  */
// 3219 void ZDApp_MgmtDirectJoinRspCB( uint16 SrcAddr, byte Status, byte SecurityUse )
// 3220 {
// 3221 #if defined ( MT_ZDO_FUNC )
// 3222   /* First check if MT has subscribed for this callback. If so , pass it as
// 3223   a event to MonitorTest and return control to calling function after that */
// 3224   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_DIRECT_JOIN_RSP )
// 3225   {
// 3226     zdo_MTCB_MgmtDirectJoinRspCB( SrcAddr, Status, SecurityUse );
// 3227     return;
// 3228   }
// 3229 #endif  //MT_ZDO_FUNC
// 3230 
// 3231   if ( Status == ZSuccess )
// 3232   {
// 3233     // Do something with the results
// 3234   }
// 3235   else
// 3236   {
// 3237     // Error
// 3238   }
// 3239 }
// 3240 #endif // ZDO_MGMT_JOINDIRECT_REQUEST
// 3241 
// 3242 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
// 3243 /*********************************************************************
// 3244  * @fn          ZDApp_MgmtLeaveRspCB
// 3245  *
// 3246  * @brief       This function handles Management Leave response for the
// 3247  *              Device Object application.
// 3248  *
// 3249  * @param       SrcAddr - source of the message
// 3250  * @param       Status - ZSuccess or other for failure
// 3251  * @param       SecurityUse -
// 3252  *
// 3253  * @return      none
// 3254  */
// 3255 void ZDApp_MgmtLeaveRspCB( uint16 SrcAddr, byte Status, byte SecurityUse )
// 3256 {
// 3257 #if defined ( MT_ZDO_FUNC )
// 3258   /* First check if MT has subscribed for this callback. If so , pass it as
// 3259   a event to MonitorTest and return control to calling function after that */
// 3260   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_LEAVE_RSP )
// 3261   {
// 3262     zdo_MTCB_MgmtLeaveRspCB( SrcAddr, Status, SecurityUse );
// 3263     return;
// 3264   }
// 3265 #endif  //MT_ZDO_FUNC
// 3266 
// 3267   if ( Status == ZSuccess )
// 3268   {
// 3269     // Do something with the results
// 3270   }
// 3271   else
// 3272   {
// 3273     // Error
// 3274   }
// 3275 }
// 3276 #endif // ZDO_MGMT_LEAVE_REQUEST
// 3277 
// 3278 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && !defined( REFLECTOR )
// 3279 /*********************************************************************
// 3280  * @fn          ZDApp_MgmtBindReqCB
// 3281  *
// 3282  * @brief       This function finishes the processing of the Management
// 3283  *              Bind Request and generates the response.
// 3284  *
// 3285  * @param       none
// 3286  *
// 3287  * @return      none
// 3288  */
// 3289 void ZDApp_MgmtBindReqCB( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
// 3290 {
// 3291   ZDO_MgmtBindReq_t *pBindReq;
// 3292   osal_event_hdr_t *msgPtr;
// 3293 
// 3294   if ( ZDApp_MgmtBindReq_TaskID )
// 3295   {
// 3296     // Send the IEEE Address response structure to the registered task
// 3297     msgPtr = (osal_event_hdr_t *)osal_msg_allocate( sizeof(osal_event_hdr_t) + sizeof( ZDO_MgmtBindReq_t ) );
// 3298     if ( msgPtr )
// 3299     {
// 3300       msgPtr->event = ZDO_MGMT_BIND_REQ;
// 3301       pBindReq = (ZDO_MgmtBindReq_t *)(msgPtr + 1);
// 3302 
// 3303       // Build the structure
// 3304       pBindReq->hdr.srcAddr = SrcAddr->addr.shortAddr;
// 3305       pBindReq->hdr.transSeq = TransSeq;
// 3306       pBindReq->hdr.SecurityUse = SecurityUse;
// 3307 
// 3308       pBindReq->startIndex = StartIndex;
// 3309       osal_msg_send( ZDApp_MgmtBindReq_TaskID, (uint8 *)msgPtr );
// 3310     }
// 3311   }
// 3312 }
// 3313 #endif // ZDO_MGMT_BIND_RESPONSE && !REFLECTOR
// 3314 
// 3315 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
// 3316 
// 3317 /*********************************************************************
// 3318  * @fn          ZDApp_MgmtPermitJoinRspCB
// 3319  *
// 3320  * @brief       This function handles Management permit join response
// 3321  *              for the Device Object application.
// 3322  *
// 3323  * @param       SrcAddr - source of the message
// 3324  * @param       Status - ZSuccess or other for failure
// 3325  * @param       SecurityUse -
// 3326  *
// 3327  * @return      none
// 3328  */
// 3329 void ZDApp_MgmtPermitJoinRspCB( uint16 SrcAddr, byte Status,
// 3330                                 byte SecurityUse )
// 3331 {
// 3332 #if defined ( MT_ZDO_FUNC )
// 3333   /* First check if MT has subscribed for this callback. If so , pass it as
// 3334   a event to MonitorTest and return control to calling function after that */
// 3335   if ( _zdoCallbackSub & CB_ID_ZDO_MGMT_PERMIT_JOIN_RSP )
// 3336   {
// 3337     zdo_MTCB_MgmtPermitJoinRspCB( SrcAddr, Status, SecurityUse );
// 3338     return;
// 3339   }
// 3340 #endif  //MT_ZDO_FUNC
// 3341 
// 3342   if ( Status == ZSuccess )
// 3343   {
// 3344     // Do something with the results
// 3345   }
// 3346   else
// 3347   {
// 3348     // Error
// 3349   }
// 3350 }
// 3351 #endif // ZDO_MGMT_LEAVE_REQUEST
// 3352 
// 3353 #if defined ( ZDO_USERDESC_REQUEST )
// 3354 /*********************************************************************
// 3355  * @fn          ZDApp_UserDescRspCB
// 3356  *
// 3357  * @brief       This function handles User Descriptor response for the
// 3358  *              Device Object application.
// 3359  *
// 3360  * @param       SrcAddr - source of the message
// 3361  * @param       Status - ZSuccess or other for failure
// 3362  * @param       nwkAddrOfInterest - network address of remote device
// 3363  * @param       userDescLen - length of user descriptor
// 3364  * @param       userDesc - user descriptor byte string
// 3365  * @param       SecurityUse -
// 3366  *
// 3367  * @return      none
// 3368  */
// 3369 void ZDApp_UserDescRspCB( uint16 SrcAddr, byte status, uint16 nwkAddrOfInterest,
// 3370                           byte userDescLen, byte *userDesc, byte SecurityUse )
// 3371 {
// 3372 #if defined ( MT_ZDO_FUNC )
// 3373   /* First check if MT has subscribed for this callback. If so , pass it as
// 3374   a event to MonitorTest and return control to calling function after that */
// 3375   if ( _zdoCallbackSub & CB_ID_ZDO_USER_DESC_RSP )
// 3376   {
// 3377     zdo_MTCB_UserDescRspCB( SrcAddr, status, nwkAddrOfInterest,
// 3378                             userDescLen, userDesc, SecurityUse );
// 3379     return;
// 3380   }
// 3381 #endif  //MT_ZDO_FUNC
// 3382 
// 3383   if ( status == ZSuccess )
// 3384   {
// 3385     // Do something with the results
// 3386   }
// 3387   else
// 3388   {
// 3389     // Error
// 3390   }
// 3391 }
// 3392 #endif
// 3393 
// 3394 #if defined ( ZDO_USERDESCSET_REQUEST )
// 3395 /*********************************************************************
// 3396  * @fn          ZDApp_UserDescConfCB
// 3397  *
// 3398  * @brief       This function handles Management Direct Join response for the
// 3399  *              Device Object application.
// 3400  *
// 3401  * @param       SrcAddr - source of the message
// 3402  * @param       Status - ZSuccess or other for failure
// 3403  * @param       SecurityUse -
// 3404  *
// 3405  * @return      none
// 3406  */
// 3407 void ZDApp_UserDescConfCB( uint16 SrcAddr, byte status, byte SecurityUse )
// 3408 {
// 3409 #if defined ( MT_ZDO_FUNC )
// 3410   /* First check if MT has subscribed for this callback. If so , pass it as
// 3411   a event to MonitorTest and return control to calling function after that */
// 3412   if ( _zdoCallbackSub & CB_ID_ZDO_USER_DESC_CONF )
// 3413   {
// 3414     zdo_MTCB_UserDescConfCB( SrcAddr, status, SecurityUse );
// 3415     return;
// 3416   }
// 3417 #endif  //MT_ZDO_FUNC
// 3418 
// 3419   if ( status == ZSuccess )
// 3420   {
// 3421     // Do something with the results
// 3422   }
// 3423   else
// 3424   {
// 3425     // Error
// 3426   }
// 3427 }
// 3428 #endif
// 3429 
// 3430 #if defined ( ZDO_SERVERDISC_REQUEST )
// 3431 /*********************************************************************
// 3432  * @fn          ZDApp_ServerDiscRspCB
// 3433  *
// 3434  * @brief       Handle the Server_Discovery_rsp response.
// 3435  *
// 3436  * @param       srcAddr     - Source Address of the message.
// 3437  * @param       status      - ZSuccess.
// 3438  * @param       serverMask  - Bit mask of services matching the req serverMask.
// 3439  * @param       securityUse -
// 3440  *
// 3441  * @return      none
// 3442  */
// 3443 void ZDApp_ServerDiscRspCB( uint16 srcAddr, byte status,
// 3444                             uint16 serverMask, byte securityUse )
// 3445 {
// 3446 #if defined ( MT_ZDO_FUNC )
// 3447   if ( _zdoCallbackSub & CB_ID_ZDO_SERVERDISC_RSP )
// 3448   {
// 3449     zdo_MTCB_ServerDiscRspCB( srcAddr, status, serverMask, securityUse );
// 3450     return;
// 3451   }
// 3452 #endif
// 3453 
// 3454   if ( status == ZSuccess )
// 3455   {
// 3456     // Do something with the results.
// 3457   }
// 3458   else
// 3459   {
// 3460     // Error
// 3461   }
// 3462 }
// 3463 #endif
// 3464 
// 3465 /*********************************************************************
// 3466  * @fn      ZDApp_EndDeviceAnnounceCB()
// 3467  *
// 3468  * @brief   Received an End Device Announce.
// 3469  *
// 3470  * @param   SrcAddr - Source of the message
// 3471  * @param   nwkAddr - short address of the new device
// 3472  * @param   extAddr - IEEE address of the new device
// 3473  * @param   capabilities - device capabilities.  This field is only
// 3474  *             populated in a v1.1 network so use the following before
// 3475  *             using it:
// 3476  *                  if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
// 3477  *
// 3478  * @return  none
// 3479  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3480 void ZDApp_EndDeviceAnnounceCB( uint16 SrcAddr, uint16 nwkAddr, uint8 *extAddr,
ZDApp_EndDeviceAnnounceCB:
        CFI Block cfiBlock169 Using cfiCommon0
        CFI Function ZDApp_EndDeviceAnnounceCB
// 3481                                uint8 capabilities )
// 3482 {
        FUNCALL ZDApp_EndDeviceAnnounceCB, osal_cpyExtAddr
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDApp_EndDeviceAnnounceCB, ZDApp_SendMsg
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        MOV	A,#-0x9
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 15
        MOV	A,#-0xf
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,R1
        MOV	R6,A
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
// 3483   ZDO_EndDeviceAnnounce_t Announce;
// 3484 
// 3485   // If it interests you - put your own code here.
// 3486 
// 3487   if ( ZDApp_EndDeviceAnnounce_TaskID )
        MOV	DPTR,#??ZDApp_EndDeviceAnnounce_TaskID
        MOVX	A,@DPTR
        JZ	??ZDApp_EndDeviceAnnounceCB_0
// 3488   {
// 3489     // Build the structure
// 3490     Announce.srcAddr = SrcAddr;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
// 3491     Announce.nwkAddr = nwkAddr;
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
// 3492     osal_cpyExtAddr( Announce.extAddr, extAddr );
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	A,R0
        MOV	R4,A
        MOV	A,R1
        MOV	R5,A
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 3493     Announce.capabilities = capabilities;
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        MOV	A,R6
        LCALL	?Subroutine1 & 0xFFFF
// 3494 
// 3495     ZDApp_SendMsg( ZDApp_EndDeviceAnnounce_TaskID, ZDO_END_DEVICE_ANNOUNCE,
// 3496                   sizeof( ZDO_EndDeviceAnnounce_t ), (uint8 *)&Announce );
??CrossCallReturnLabel_3:
        MOV	R4,DPL
        MOV	R5,DPH
        MOV	R3,#0xf
        MOV	R2,#-0x2b
        MOV	DPTR,#??ZDApp_EndDeviceAnnounce_TaskID
        LCALL	??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 3497   }
// 3498 }
??ZDApp_EndDeviceAnnounceCB_0:
        MOV	A,#0xf
        LJMP	?Subroutine27 & 0xFFFF
        CFI EndBlock cfiBlock169
// 3499 
// 3500 /*********************************************************************
// 3501  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 3502  *
// 3503  * @brief   Changes the Match Descriptor Response permission.
// 3504  *
// 3505  * @param   endpoint - endpoint to allow responses
// 3506  * @param   action - true to allow responses, false to not
// 3507  *
// 3508  * @return  none
// 3509  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3510 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
        CFI Block cfiBlock170 Using cfiCommon0
        CFI Function ZDApp_ChangeMatchDescRespPermission
// 3511 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3512   // Store the action
// 3513   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        MOV	DPTR,#(afSetMatch & 0xffff)
        MOV	A,#((afSetMatch >> 16) & 0xff)
        LJMP	??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock170
// 3514 }
// 3515 
// 3516 /*********************************************************************
// 3517  * @fn      ZDApp_NetworkInit()
// 3518  *
// 3519  * @brief   Used to start the network joining process
// 3520  *
// 3521  * @param   delay - mSec delay to wait before starting
// 3522  *
// 3523  * @return  none
// 3524  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3525 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
        CFI Block cfiBlock171 Using cfiCommon0
        CFI Function ZDApp_NetworkInit
// 3526 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3527   if ( delay )
        MOV	A,R2
        JNZ	??ZDApp_NetworkInit_0
        MOV	A,R3
??ZDApp_NetworkInit_0:
        JZ	??ZDApp_NetworkInit_1
// 3528   {
// 3529     // Wait awhile before starting the device
// 3530     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,#0x1
        MOV	R3,#0x0
        LCALL	??Subroutine5_1 & 0xFFFF
??CrossCallReturnLabel_13:
        SJMP	??CrossCallReturnLabel_68
// 3531   }
// 3532   else
// 3533   {
// 3534     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_1:
        ; Setup parameters for call to function osal_set_event
        MOV	R2,#0x1
        LCALL	?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_68:
        LJMP	??Subroutine31_0 & 0xFFFF
        CFI EndBlock cfiBlock171
// 3535   }
// 3536 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond172 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker174 Using cfiCommon1
        CFI (cfiPicker174) NoFunction
        CFI (cfiPicker174) Picker
        MOV	R2,#0x10
        LJMP	?Subroutine28 & 0xFFFF
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiPicker174
// 3537 
// 3538 #if defined ( ZDO_IEEEADDR_REQUEST )
// 3539 /*********************************************************************
// 3540  * @fn      ZDApp_RegisterForIEEEAddrRsp()
// 3541  *
// 3542  * @brief   Register to receive IEEE Addr Response messages
// 3543  *
// 3544  * @param   TaskID - ID of task to send message
// 3545  *
// 3546  * @return  none
// 3547  */
// 3548 void ZDApp_RegisterForIEEEAddrRsp( byte TaskID )
// 3549 {
// 3550   ZDApp_IEEEAddrRsp_TaskID = TaskID;    // Only 1 task at a time
// 3551 }
// 3552 #endif // defined ( ZDO_IEEEADDR_REQUEST )
// 3553 
// 3554 #if defined ( ZDO_NWKADDR_REQUEST )
// 3555 /*********************************************************************
// 3556  * @fn      ZDApp_RegisterForNwkAddrRsp()
// 3557  *
// 3558  * @brief   Register to receive NWK Addr Response messages
// 3559  *
// 3560  * @param   TaskID - ID of task to send message
// 3561  *
// 3562  * @return  none
// 3563  */
// 3564 void ZDApp_RegisterForNwkAddrRsp( byte TaskID )
// 3565 {
// 3566   ZDApp_NwkAddrRsp_TaskID = TaskID;    // Only 1 task at a time
// 3567 }
// 3568 #endif // defined ( ZDO_NWKADDR_REQUEST )
// 3569 
// 3570 /*********************************************************************
// 3571  * @fn      ZDApp_RegisterForMatchDescRsp()
// 3572  *
// 3573  * @brief   Register to receive Match Descriptor Response messages
// 3574  *
// 3575  * @param   TaskID - ID of task to send message
// 3576  *
// 3577  * @return  none
// 3578  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3579 void ZDApp_RegisterForMatchDescRsp( byte TaskID )
ZDApp_RegisterForMatchDescRsp:
        CFI Block cfiBlock175 Using cfiCommon0
        CFI Function ZDApp_RegisterForMatchDescRsp
// 3580 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3581   ZDApp_MatchDescRsp_TaskID = TaskID;    // Only 1 task at a time
        MOV	A,R1
        MOV	DPTR,#??ZDApp_MatchDescRsp_TaskID
        MOVX	@DPTR,A
// 3582 }
        LJMP	??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock175
// 3583 
// 3584 /*********************************************************************
// 3585  * @fn      ZDApp_RegisterForEndDeviceAnnounce()
// 3586  *
// 3587  * @brief   Register to receive End Device Announce messages
// 3588  *
// 3589  * @param   TaskID - ID of task to send message
// 3590  *
// 3591  * @return  none
// 3592  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3593 void ZDApp_RegisterForEndDeviceAnnounce( byte TaskID )
ZDApp_RegisterForEndDeviceAnnounce:
        CFI Block cfiBlock176 Using cfiCommon0
        CFI Function ZDApp_RegisterForEndDeviceAnnounce
// 3594 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3595   ZDApp_EndDeviceAnnounce_TaskID = TaskID;    // Only 1 task at a time
        MOV	A,R1
        MOV	DPTR,#??ZDApp_EndDeviceAnnounce_TaskID
        MOVX	@DPTR,A
// 3596 }
        LJMP	??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock176
// 3597 
// 3598 #if defined ( ZDO_BIND_UNBIND_REQUEST )
// 3599 /*********************************************************************
// 3600  * @fn      ZDApp_RegisterForBindRsp()
// 3601  *
// 3602  * @brief   Register to receive Bind_rsp and Unbind_rsp messages
// 3603  *
// 3604  * @param   TaskID - ID of task to send message
// 3605  *
// 3606  * @return  none
// 3607  */
// 3608 void ZDApp_RegisterForBindRsp( byte TaskID )
// 3609 {
// 3610   ZDApp_BindUnbindRsp_TaskID = TaskID;    // Only 1 task at a time
// 3611 }
// 3612 #endif // ZDO_BIND_UNBIND_REQUEST
// 3613 
// 3614 #if defined ( ZDO_BIND_UNBIND_RESPONSE ) && !defined ( REFLECTOR )
// 3615 /*********************************************************************
// 3616  * @fn      ZDApp_RegisterForBindReq()
// 3617  *
// 3618  * @brief   Register to receive Bind and Unbind Request messages
// 3619  *
// 3620  * @param   TaskID - ID of task to send message
// 3621  *
// 3622  * @return  none
// 3623  */
// 3624 void ZDApp_RegisterForBindReq( byte TaskID )
// 3625 {
// 3626   ZDApp_BindReq_TaskID = TaskID;
// 3627 }
// 3628 #endif
// 3629 
// 3630 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && !defined ( REFLECTOR )
// 3631 /*********************************************************************
// 3632  * @fn      ZDApp_RegisterForMgmtBindReq()
// 3633  *
// 3634  * @brief   Register to receive Mgmt Bind Request messages
// 3635  *
// 3636  * @param   TaskID - ID of task to send message
// 3637  *
// 3638  * @return  none
// 3639  */
// 3640 void ZDApp_RegisterForMgmtBindReq( byte TaskID )
// 3641 {
// 3642   ZDApp_MgmtBindReq_TaskID = TaskID;
// 3643 }
// 3644 #endif
// 3645 
// 3646 /*********************************************************************
// 3647  * @fn      ZDApp_StartUpFromApp()
// 3648  *
// 3649  * @brief   Start the device.  This function will only start a device
// 3650  *          that is in the Holding state.
// 3651  *
// 3652  * @param   mode - ZDAPP_STARTUP_COORD - Start up as coordinator only
// 3653  *                 ZDAPP_STARTUP_ROUTER - Start up as router only
// 3654  *                 ZDAPP_STARTUP_AUTO - Startup in auto, look for coord,
// 3655  *                                       if not found, become coord.
// 3656  *
// 3657  * @return  TRUE if started, FALSE if in the wrong mode
// 3658  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3659 ZStatus_t ZDApp_StartUpFromApp( uint8 mode )
ZDApp_StartUpFromApp:
        CFI Block cfiBlock177 Using cfiCommon0
        CFI Function ZDApp_StartUpFromApp
// 3660 {
        FUNCALL ZDApp_StartUpFromApp, ZDOInitDevice
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3661   ZStatus_t ret = ZFailure;
        MOV	R1,#0x1
// 3662 
// 3663   if ( devState == DEV_HOLD )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        JNZ	??ZDApp_StartUpFromApp_0
// 3664   {
// 3665     // Start the device's joining process
// 3666     if ( ZDOInitDevice( 0 ) == ZDO_INITDEV_NEW_NETWORK_STATE )
        ; Setup parameters for call to function ZDOInitDevice
        MOV	R2,#0x0
        MOV	R3,#0x0
        MOV	DPTR,#(ZDOInitDevice & 0xffff)
        MOV	A,#((ZDOInitDevice >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 3667     {
// 3668 #if defined( SOFT_START )
// 3669       if ( mode == ZDAPP_STARTUP_COORD )
// 3670       {
// 3671         devStartMode = MODE_HARD;     // Start as a coordinator
// 3672         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
// 3673       }
// 3674       else
// 3675       {
// 3676         if ( mode == ZDAPP_STARTUP_ROUTER )
// 3677         {
// 3678           softStartAllowCoord = FALSE;  // Don't allow coord to start
// 3679           continueJoining = TRUE;
// 3680         }
// 3681         devStartMode = MODE_JOIN;     // Assume joining
// 3682       }
// 3683 #endif  // SOFT_START
// 3684     }
// 3685     ret = ZSuccess;
        MOV	R1,#0x0
// 3686   }
// 3687 
// 3688   return ( ret );
??ZDApp_StartUpFromApp_0:
        LJMP	??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock177
// 3689 }
// 3690 
// 3691 /*********************************************************************
// 3692  * @fn      ZDApp_StopStartUp()
// 3693  *
// 3694  * @brief   Stops the joining process of a router.  This will only
// 3695  *          work if the router is in the scanning process and
// 3696  *          the SOFT_START feature is enabled.
// 3697  *
// 3698  * @param   none
// 3699  *
// 3700  * @return  TRUE if SOFT_START is enabled, FALSE if not possible
// 3701  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3702 uint8 ZDApp_StopStartUp( void )
ZDApp_StopStartUp:
        CFI Block cfiBlock178 Using cfiCommon0
        CFI Function ZDApp_StopStartUp
// 3703 {
        ; Saved register size: 0
        ; Auto size: 0
// 3704   uint8 ret = FALSE;
// 3705 
// 3706 #if defined( SOFT_START )
// 3707   continueJoining = FALSE;
// 3708   ret = TRUE;
// 3709 #endif  // SOFT_START
// 3710 
// 3711   return ( ret );
        MOV	R1,#0x0
        LJMP	?BRET
        CFI EndBlock cfiBlock178
// 3712 }
// 3713 
// 3714 /*********************************************************************
// 3715  * @fn      ZDApp_StartJoiningCycle()
// 3716  *
// 3717  * @brief   Starts the joining cycle of a device.  This will only
// 3718  *          continue an already started (or stopped) joining cycle.
// 3719  *
// 3720  * @param   none
// 3721  *
// 3722  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3723  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3724 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
        CFI Block cfiBlock179 Using cfiCommon0
        CFI Function ZDApp_StartJoiningCycle
// 3725 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3726   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0x1
        JZ	??ZDApp_StartJoiningCycle_0
        MOVX	A,@DPTR
        XRL	A,#0x2
        JNZ	??ZDApp_StartJoiningCycle_1
// 3727   {
// 3728     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV	A,#0x1
        MOV	DPTR,#continueJoining
        LCALL	?Subroutine2 & 0xFFFF
// 3729     ZDApp_NetworkInit( 0 );
??CrossCallReturnLabel_60:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 3730 
// 3731     return ( TRUE );
        MOV	R1,#0x1
        SJMP	??ZDApp_StartJoiningCycle_2
// 3732   }
// 3733   else
// 3734     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV	R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP	??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock179
// 3735 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond180 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker182 Using cfiCommon1
        CFI (cfiPicker182) NoFunction
        CFI (cfiPicker182) Picker
        MOVX	@DPTR,A
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV	R2,#0x0
        LJMP	?Subroutine29 & 0xFFFF
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiPicker182
// 3736 
// 3737 /*********************************************************************
// 3738  * @fn      ZDApp_StopJoiningCycle()
// 3739  *
// 3740  * @brief   Stops the joining or rejoining process of a device.
// 3741  *
// 3742  * @param   none
// 3743  *
// 3744  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3745  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3746 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
        CFI Block cfiBlock183 Using cfiCommon0
        CFI Function ZDApp_StopJoiningCycle
// 3747 {
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3748   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV	DPTR,#devState
        MOVX	A,@DPTR
        XRL	A,#0x1
        JZ	??ZDApp_StopJoiningCycle_0
        MOVX	A,@DPTR
        XRL	A,#0x2
        JNZ	??ZDApp_StopJoiningCycle_1
// 3749   {
// 3750     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        CLR	A
        MOV	DPTR,#continueJoining
        MOVX	@DPTR,A
// 3751     return ( TRUE );
        MOV	R1,#0x1
        SJMP	??ZDApp_StopJoiningCycle_2
// 3752   }
// 3753   else
// 3754     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV	R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP	??Subroutine25_0 & 0xFFFF
        CFI EndBlock cfiBlock183
// 3755 }
// 3756 
// 3757 #if !defined ( ZDO_COORDINATOR ) || defined ( SOFT_START )
// 3758 /*********************************************************************
// 3759  * @fn      ZDApp_NodeProfileSync()
// 3760  *
// 3761  * @brief   Sync node with stack profile.
// 3762  *
// 3763  * @param   cfm - ZDO_NetworkDiscoveryCfm_t
// 3764  *
// 3765  * @return  none
// 3766  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3767 void ZDApp_NodeProfileSync( ZDO_NetworkDiscoveryCfm_t* cfm )
ZDApp_NodeProfileSync:
        CFI Block cfiBlock184 Using cfiCommon0
        CFI Function ZDApp_NodeProfileSync
// 3768 {
        FUNCALL ZDApp_NodeProfileSync, nwk_getNetworkDesc
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3769   networkDesc_t* desc;
// 3770   uint16         panID;
// 3771 
// 3772   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV	DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.1
        JNC	??ZDApp_NodeProfileSync_0
// 3773   {
// 3774     panID = BUILD_UINT16( cfm->panIdLSB, cfm->panIdMSB );
// 3775 
// 3776     desc = nwk_getNetworkDesc( cfm->extendedPANID, panID, cfm->logicalChannel );
        ; Setup parameters for call to function nwk_getNetworkDesc
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        CLR	A
        ADD	A,R6
        MOV	R4,A
        MOV	A,R5
        ADDC	A,#0x0
        MOV	R5,A
        MOV	A,R2
        ADD	A,#0x6
        MOV	R2,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(nwk_getNetworkDesc & 0xffff)
        MOV	A,#((nwk_getNetworkDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,R2
        MOV	DPH,R3
// 3777 
// 3778     if (desc != NULL)
        MOV	A,DPL
        JNZ	??ZDApp_NodeProfileSync_1
        MOV	A,DPH
??ZDApp_NodeProfileSync_1:
        JZ	??ZDApp_NodeProfileSync_0
// 3779     {
// 3780       if ( desc->stackProfile != zgStackProfile )
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPTR,#zgStackProfile
        MOVX	A,@DPTR
        XRL	A,R2
        JZ	??ZDApp_NodeProfileSync_0
// 3781       {
// 3782         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV	DPTR,#ZDO_Config_Node_Descriptor
        MOVX	A,@DPTR
        ANL	A,#0xf8
        ORL	A,#0x2
        MOVX	@DPTR,A
// 3783         ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV	A,#0xc
        MOV	DPTR,#(ZDO_Config_Node_Descriptor + 2)
        MOVX	@DPTR,A
// 3784       }
// 3785     }
// 3786   }
// 3787 }
??ZDApp_NodeProfileSync_0:
        LJMP	??Subroutine26_1 & 0xFFFF
        CFI EndBlock cfiBlock184

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zdoDiscCounter>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for continueJoining>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devState>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sPVerList>`:
        DB 2, 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_epDesc>`:
        DB 0
        DW ZDAppTaskID, 0H
        DB 0

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        END
// 3788 #endif
// 3789 
// 3790 /*********************************************************************
// 3791 *********************************************************************/
// 
// 4 621 bytes in segment BANKED_CODE
//     2 bytes in segment SFR_AN
//    11 bytes in segment XDATA_I
//    11 bytes in segment XDATA_ID
//    19 bytes in segment XDATA_Z
// 
// 4 632 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//    30 bytes of XDATA memory
//
//Errors: none
//Warnings: none
