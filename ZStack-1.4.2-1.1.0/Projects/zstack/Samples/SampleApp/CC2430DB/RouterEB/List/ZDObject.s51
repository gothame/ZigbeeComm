//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  24/Jan/2013  14:47:49 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\stack\zdo\ZDObject.c                          /
//    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\Tools\CC2430D /
//                          B\f8wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR     /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DRTR_NWK -DBLINK_LEDS "-DCONST=const        /
//                          __code" -DGENERIC=__generic) -f                  /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f /
//                          8wConfig.cfg (-DSECURE=0                         /
//                          -DDEFAULT_CHANLIST=0x00000800                    /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                     /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\ -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\Source\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\  /
//                          -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ /
//                          \ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ /
//                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                      /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \hal\target\CC2430EB\ -I                         /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \osal\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I            /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢× /
//                          ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 /
//                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\sec\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\stack\sys\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \zmac\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ /
//                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Z /
//                          igBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\services\saddr\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \services\sdata\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\high_level\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf03\ -I     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf03\single_chip\ -D CC2430EB    /
//                          -D ZTOOL_P1 -D MT_TASK -lC                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ -lA        /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\            /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\RouterEB\Obj\ -e       /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\stack\zdo\ZDObject.c"                        /
//    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ZDObject.s5 /
//                          1                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ZDObject

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?G_EQ
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??ZDO_CreateAlignedUINT16List,021203H
        ARGFRAME XSTACK, 30, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC NLME_PermitJoiningTimeout
        FUNCTION NLME_PermitJoiningTimeout,0203H
        PUBLIC ZDO_AnyClusterMatches
        FUNCTION ZDO_AnyClusterMatches,0203H
        ARGFRAME XSTACK, 32, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_EndDeviceTimeoutCB
        FUNCTION ZDO_EndDeviceTimeoutCB,0203H
        PUBLIC ZDO_Init
        FUNCTION ZDO_Init,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_ProcessActiveEPReq
        FUNCTION ZDO_ProcessActiveEPReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDO_ProcessBindUnbindRsp
        FUNCTION ZDO_ProcessBindUnbindRsp,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_ProcessEPListRsp
        FUNCTION ZDO_ProcessEPListRsp,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ProcessMatchDescReq
        FUNCTION ZDO_ProcessMatchDescReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC ZDO_ProcessNodeDescReq
        FUNCTION ZDO_ProcessNodeDescReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ProcessPowerDescReq
        FUNCTION ZDO_ProcessPowerDescReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ProcessSimpleDescReq
        FUNCTION ZDO_ProcessSimpleDescReq,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDO_StartDevice
        FUNCTION ZDO_StartDevice,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBWEAK __Constant_0
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN NLME_DeviceJoiningInit
        FUNCTION NLME_DeviceJoiningInit,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN NLME_NetworkDiscoveryRequest
        FUNCTION NLME_NetworkDiscoveryRequest,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN nwk_ScanJoiningOrphan
        FUNCTION nwk_ScanJoiningOrphan,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN NLME_OrphanJoinRequest
        FUNCTION NLME_OrphanJoinRequest,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDSecMgrConfig
        FUNCTION ZDSecMgrConfig,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN osal_start_timer
        FUNCTION osal_start_timer,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME XSTACK, 12, STACK
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME XSTACK, 30, STACK
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME XSTACK, 30, STACK
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN NLME_GetProtocolVersion
        FUNCTION NLME_GetProtocolVersion,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN ZDP_NodeDescMsg
        FUNCTION ZDP_NodeDescMsg,0202H
        ARGFRAME XSTACK, 15, STACK
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN ZDP_PowerDescMsg
        FUNCTION ZDP_PowerDescMsg,0202H
        ARGFRAME XSTACK, 15, STACK
        EXTERN afFindSimpleDesc
        FUNCTION afFindSimpleDesc,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN ZDP_SimpleDescMsg
        FUNCTION ZDP_SimpleDescMsg,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME XSTACK, 30, STACK
        EXTERN afNumEndPoints
        FUNCTION afNumEndPoints,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN afEndPoints
        FUNCTION afEndPoints,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN ZDP_EPRsp
        FUNCTION ZDP_EPRsp,0202H
        ARGFRAME XSTACK, 37, STACK
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME XSTACK, 30, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 33, STACK
        EXTERN ZDApp_MatchDescRspCB
        FUNCTION ZDApp_MatchDescRspCB,0202H
        ARGFRAME XSTACK, 14, STACK
        EXTERN ZDApp_EndDeviceBindRsp
        FUNCTION ZDApp_EndDeviceBindRsp,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN ZDAppNwkAddr
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_Config_Power_Descriptor
        EXTERN devState
        EXTERN epList
        EXTERN zgDefaultChannelList
        EXTERN zgDefaultStartingScanDuration

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\zdo\ZDObject.c
//    1 /*********************************************************************
//    2     Filename:       ZDObject.c
//    3     Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
//    4     Revision:       $Revision: 14296 $
//    5 
//    6     Description:
//    7 
//    8       This Zigbee Device Object.
//    9 
//   10     Notes:
//   11 
//   12     Copyright (c) 2006 by Texas Instruments, Inc.
//   13     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   14     derivative works, modify, distribute, perform, display or sell this
//   15     software and/or its documentation for any purpose is prohibited
//   16     without the express written consent of Texas Instruments, Inc.
//   17 *********************************************************************/
//   18 
//   19 /*********************************************************************
//   20  * INCLUDES
//   21  */
//   22 #include "ZComdef.h"
//   23 #include "OSAL.h"
//   24 #include "OSAL_Nv.h"
//   25 #include "rtg.h"
//   26 #include "NLMEDE.h"
//   27 #include "nwk_globals.h"
//   28 #include "APS.h"
//   29 #include "APSMEDE.h"
//   30 #include "AssocList.h"
//   31 #include "BindingTable.h"
//   32 #include "AddrMgr.h"
//   33 #include "AF.h"
//   34 #include "ZDObject.h"
//   35 #include "ZDProfile.h"
//   36 #include "ZDConfig.h"
//   37 #include "ZDCache.h"
//   38 #include "ZDSecMgr.h"
//   39 #include "ZDApp.h"
//   40 #include "nwk_util.h"   // NLME_IsAddressBroadcast()
//   41 #include "ZGlobals.h"
//   42 
//   43 #if defined( LCD_SUPPORTED )
//   44   #include "OnBoard.h"
//   45 #endif
//   46 
//   47 /* HAL */
//   48 #include "hal_lcd.h"
//   49 
//   50 /*********************************************************************
//   51  * MACROS
//   52  */
//   53 
//   54 /*********************************************************************
//   55  * CONSTANTS
//   56  */
//   57 // NLME Stub Implementations
//   58 #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
//   59 
//   60 // Status fields used by ZDO_ProcessMgmtRtgReq
//   61 #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
//   62 #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
//   63 #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
//   64 #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
//   65 
//   66 /*********************************************************************
//   67  * TYPEDEFS
//   68  */
//   69 #if defined ( REFLECTOR )
//   70 typedef struct
//   71 {
//   72   byte SrcTransSeq;
//   73   zAddrType_t SrcAddr;
//   74   uint16 LocalCoordinator;
//   75   byte epIntf;
//   76   uint16 ProfileID;
//   77   byte numInClusters;
//   78   uint16 *inClusters;
//   79   byte numOutClusters;
//   80   uint16 *outClusters;
//   81   byte SecurityUse;
//   82   byte status;
//   83 } ZDO_EDBind_t;
//   84 #endif // defined ( REFLECTOR )
//   85 
//   86 #if defined ( ZDO_COORDINATOR )
//   87 enum
//   88 {
//   89   ZDMATCH_INIT,           // Initialized
//   90   ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
//   91   ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
//   92 };
//   93 
//   94 enum
//   95 {
//   96   ZDMATCH_REASON_START,
//   97   ZDMATCH_REASON_TIMEOUT,
//   98   ZDMATCH_REASON_UNBIND_RSP,
//   99   ZDMATCH_REASON_BIND_RSP
//  100 };
//  101 
//  102 enum
//  103 {
//  104   ZDMATCH_SENDING_NOT,
//  105   ZDMATCH_SENDING_UNBIND,
//  106   ZDMATCH_SENDING_BIND
//  107 };
//  108 
//  109 typedef struct
//  110 {
//  111   ZDEndDeviceBind_t ed1;
//  112   ZDEndDeviceBind_t ed2;
//  113   uint8  state;            // One of the above states
//  114   uint8  sending;         // 0 - not sent, 1 - unbind, 2 bind - expecting response
//  115   uint8  transSeq;
//  116   uint8  ed1numMatched;
//  117   uint16 *ed1Matched;
//  118   uint8  ed2numMatched;
//  119   uint16 *ed2Matched;
//  120 } ZDMatchEndDeviceBind_t;
//  121 #endif
//  122 
//  123 /*********************************************************************
//  124  * GLOBAL VARIABLES
//  125  */
//  126 
//  127 /*********************************************************************
//  128  * EXTERNAL VARIABLES
//  129  */
//  130 
//  131 /*********************************************************************
//  132  * EXTERNAL FUNCTIONS
//  133  */
//  134 
//  135 /*********************************************************************
//  136  * LOCAL VARIABLES
//  137  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  138 static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
??ZDOBuildBuf:
        DS 52
//  139 
//  140 #if defined ( REFLECTOR )
//  141 static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
//  142 #endif
//  143 
//  144 #if defined ( MANAGED_SCAN )
//  145   uint32 managedScanNextChannel = 0;
//  146   uint32 managedScanChannelMask = 0;
//  147   uint8  managedScanTimesPerChannel = 0;
//  148 #endif
//  149 
//  150 #if defined ( ZDO_COORDINATOR )
//  151   ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
//  152 #endif
//  153 
//  154 /*********************************************************************
//  155  * LOCAL FUNCTIONS
//  156  */
//  157 static void ZDODeviceSetup( void );
//  158 static uint16 *ZDO_CreateAlignedUINT16List(uint8 num, uint8 *buf);
//  159 #if defined ( MANAGED_SCAN )
//  160   static void ZDOManagedScan_Next( void );
//  161 #endif
//  162 #if defined ( REFLECTOR )
//  163   static void ZDO_RemoveEndDeviceBind( void );
//  164   static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
//  165 #endif
//  166 #if defined ( REFLECTOR ) || defined( ZDO_COORDINATOR )
//  167   static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
//  168                                 byte numList2, uint16 *list2, uint16 *pMatches );
//  169 #endif
//  170 #if defined ( ZDO_COORDINATOR )
//  171   static void ZDO_RemoveMatchMemory( void );
//  172   static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
//  173   static uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq );
//  174   static void ZDO_EndDeviceBindMatchTimeoutCB( void );
//  175 #endif
//  176 
//  177 /*********************************************************************
//  178  * @fn          ZDO_Init
//  179  *
//  180  * @brief       ZDObject and ZDProfile initialization.
//  181  *
//  182  * @param       none
//  183  *
//  184  * @return      none
//  185  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  186 void ZDO_Init( void )
ZDO_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDO_Init
//  187 {
        FUNCALL ZDO_Init, NLME_DeviceJoiningInit
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZDO_Init, ZDSecMgrInit
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  188   // Initialize ZD items
//  189   #if defined ( REFLECTOR )
//  190   ZDO_EDBind = NULL;
//  191   #endif
//  192 
//  193   // Setup the device - type of device to create.
//  194   ZDODeviceSetup();
        ; Setup parameters for call to function NLME_DeviceJoiningInit
        MOV	DPTR,#(NLME_DeviceJoiningInit & 0xffff)
        MOV	A,#((NLME_DeviceJoiningInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  195 
//  196   // Initialize ZigBee Device Security Manager
//  197   ZDSecMgrInit();
        ; Setup parameters for call to function ZDSecMgrInit
        MOV	DPTR,#(ZDSecMgrInit & 0xffff)
        MOV	A,#((ZDSecMgrInit >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        CFI EndBlock cfiBlock0
//  198 }
        REQUIRE ?Subroutine21
        ; // Fall through to label ?Subroutine21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock1
//  199 
//  200 #if defined ( MANAGED_SCAN )
//  201 /*********************************************************************
//  202  * @fn      ZDOManagedScan_Next()
//  203  *
//  204  * @brief   Setup a managed scan.
//  205  *
//  206  * @param   none
//  207  *
//  208  * @return  none
//  209  */
//  210 static void ZDOManagedScan_Next( void )
//  211 {
//  212   // Is it the first time
//  213   if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
//  214   {
//  215     // Setup the defaults
//  216     managedScanNextChannel  = 1;
//  217 
//  218     while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
//  219       managedScanNextChannel <<= 1;
//  220 
//  221     managedScanChannelMask = managedScanNextChannel;
//  222     managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
//  223   }
//  224   else
//  225   {
//  226     // Do we need to go to the next channel
//  227     if ( managedScanTimesPerChannel == 0 )
//  228     {
//  229       // Find next active channel
//  230       managedScanChannelMask  = managedScanNextChannel;
//  231       managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
//  232     }
//  233     else
//  234     {
//  235       managedScanTimesPerChannel--;
//  236 
//  237       if ( managedScanTimesPerChannel == 0 )
//  238       {
//  239         managedScanNextChannel  <<= 1;
//  240         while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
//  241           managedScanNextChannel <<= 1;
//  242 
//  243         if ( managedScanNextChannel == 0 )
//  244           zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
//  245       }
//  246     }
//  247   }
//  248 }
//  249 #endif // MANAGED_SCAN
//  250 
//  251 /*********************************************************************
//  252  * @fn      ZDODeviceSetup()
//  253  *
//  254  * @brief   Call set functions depending on the type of device compiled.
//  255  *
//  256  * @param   none
//  257  *
//  258  * @return  none
//  259  */
//  260 static void ZDODeviceSetup( void )
//  261 {
//  262 #if defined( ZDO_COORDINATOR )
//  263   NLME_CoordinatorInit();
//  264 #endif
//  265 
//  266 #if defined ( REFLECTOR )
//  267   #if defined ( ZDO_COORDINATOR )
//  268     APS_ReflectorInit( APS_REFLECTOR_PUBLIC );
//  269   #else
//  270     APS_ReflectorInit( APS_REFLECTOR_PRIVATE );
//  271   #endif
//  272 #endif
//  273 
//  274 #if !defined( ZDO_COORDINATOR ) || defined( SOFT_START )
//  275   NLME_DeviceJoiningInit();
//  276 #endif
//  277 }
//  278 
//  279 /*********************************************************************
//  280  * @fn          ZDO_StartDevice
//  281  *
//  282  * @brief       This function starts a device in a network.
//  283  *
//  284  * @param       logicalType     - Device type to start
//  285  *              startMode       - indicates mode of device startup
//  286  *              beaconOrder     - indicates time betwen beacons
//  287  *              superframeOrder - indicates length of active superframe
//  288  *
//  289  * @return      none
//  290  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  291 void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
ZDO_StartDevice:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZDO_StartDevice
//  292 {
        FUNCALL ZDO_StartDevice, NLME_NetworkDiscoveryRequest
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDO_StartDevice, nwk_ScanJoiningOrphan
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDO_StartDevice, NLME_OrphanJoinRequest
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDO_StartDevice, ZDSecMgrConfig
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDO_StartDevice, osal_start_timer
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 11
        MOV	A,#-0xb
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
//  293   ZStatus_t ret;
//  294 
//  295   ret = ZUnsupportedMode;
        MOV	R6,#0x12
//  296 
//  297 #if defined(ZDO_COORDINATOR)
//  298   if ( logicalType == NODETYPE_COORDINATOR )
//  299   {
//  300     if ( startMode == MODE_HARD )
//  301     {
//  302       devState = DEV_COORD_STARTING;
//  303       ret = NLME_NetworkFormationRequest( zgConfigPANID, zgDefaultChannelList,
//  304                                           zgDefaultStartingScanDuration, beaconOrder,
//  305                                           superframeOrder, false );
//  306     }
//  307     else if ( startMode == MODE_RESUME )
//  308     {
//  309       // Just start the coordinator
//  310       devState = DEV_COORD_STARTING;
//  311       ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
//  312     }
//  313     else
//  314     {
//  315     }
//  316   }
//  317 #endif  // !ZDO_COORDINATOR
//  318 
//  319 #if !defined ( ZDO_COORDINATOR ) || defined( SOFT_START )
//  320   if ( logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE )
        MOV	A,#0x1
        XRL	A,R1
        JZ	??ZDO_StartDevice_0
        MOV	A,#0x2
        XRL	A,R1
        JZ	$+5
        LJMP	??ZDO_StartDevice_1 & 0xFFFF
//  321   {
//  322     if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
??ZDO_StartDevice_0:
        MOV	A,R2
        JZ	??ZDO_StartDevice_2
        MOV	A,#0x3
        XRL	A,R2
        JNZ	??ZDO_StartDevice_3
//  323     {
//  324       devState = DEV_NWK_DISC;
??ZDO_StartDevice_2:
        MOV	A,#0x2
        LCALL	?Subroutine1 & 0xFFFF
//  325 
//  326   #if defined( MANAGED_SCAN )
//  327       ZDOManagedScan_Next();
//  328       ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
//  329   #else
//  330       ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
??CrossCallReturnLabel_2:
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(NLME_NetworkDiscoveryRequest & 0xffff)
        MOV	A,#((NLME_NetworkDiscoveryRequest >> 16) & 0xff)
        SJMP	??ZDO_StartDevice_4
//  331   #endif
//  332     }
//  333     else if ( startMode == MODE_RESUME )
??ZDO_StartDevice_3:
        MOV	A,#0x1
        XRL	A,R2
        JNZ	??ZDO_StartDevice_1
//  334     {
//  335       if ( logicalType == NODETYPE_ROUTER )
        MOV	A,#0x1
        XRL	A,R1
        JNZ	??ZDO_StartDevice_5
//  336       {
//  337         ZMacScanCnf_t scanCnf;
//  338         devState = DEV_NWK_ORPHAN;
        MOV	A,#0xa
        MOV	DPTR,#devState
        MOVX	@DPTR,A
//  339 
//  340         /* if router and nvram is available, fake successful orphan scan */
//  341         scanCnf.hdr.Status = ZSUCCESS;
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
//  342         scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x3
        MOVX	@DPTR,A
//  343         scanCnf.UnscannedChannels = 0;
        MOV	DPTR,#__Constant_0
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
//  344         scanCnf.ResultListSize = 0;
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
//  345         nwk_ScanJoiningOrphan(&scanCnf);
        ; Setup parameters for call to function nwk_ScanJoiningOrphan
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(nwk_ScanJoiningOrphan & 0xffff)
        MOV	A,#((nwk_ScanJoiningOrphan >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  346 
//  347         ret = ZSuccess;
        MOV	R6,#0x0
        SJMP	??ZDO_StartDevice_1
//  348       }
//  349       else
//  350       {
//  351         devState = DEV_NWK_ORPHAN;
??ZDO_StartDevice_5:
        MOV	A,#0xa
        LCALL	?Subroutine1 & 0xFFFF
//  352         ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
//  353                                       zgDefaultStartingScanDuration );
??CrossCallReturnLabel_3:
        LCALL	?L_MOV_X
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	DPTR,#(NLME_OrphanJoinRequest & 0xffff)
        MOV	A,#((NLME_OrphanJoinRequest >> 16) & 0xff)
??ZDO_StartDevice_4:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R6,A
//  354       }
//  355     }
//  356     else
//  357     {
//  358     }
//  359   }
//  360 #endif  //!ZDO COORDINATOR || SOFT_START
//  361 
//  362   // configure the Security Manager for type of device
//  363   ZDSecMgrConfig();
??ZDO_StartDevice_1:
        ; Setup parameters for call to function ZDSecMgrConfig
        MOV	DPTR,#(ZDSecMgrConfig & 0xffff)
        MOV	A,#((ZDSecMgrConfig >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  364 
//  365   if ( ret != ZSuccess )
        MOV	A,R6
        JZ	??ZDO_StartDevice_6
//  366     osal_start_timer( ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
        ; Setup parameters for call to function osal_start_timer
        MOV	R4,#-0x18
        MOV	R5,#0x3
        MOV	R2,#0x1
        MOV	R3,#0x0
        MOV	DPTR,#(osal_start_timer & 0xffff)
        MOV	A,#((osal_start_timer >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  367 }
??ZDO_StartDevice_6:
        MOV	A,#0xb
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP	?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV	DPTR,#devState
        MOVX	@DPTR,A
        ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
        ; Setup parameters for call to function NLME_OrphanJoinRequest
        MOV	DPTR,#zgDefaultStartingScanDuration
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#zgDefaultChannelList
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
//  368 
//  369 /*********************************************************************
//  370  * @fn      ZDO_UpdateNwkStatus()
//  371  *
//  372  * @brief
//  373  *
//  374  *   This function will send an update message to each registered
//  375  *   application endpoint/interface about a network status change.
//  376  *
//  377  * @param   none
//  378  *
//  379  * @return  none
//  380  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  381 void ZDO_UpdateNwkStatus( devStates_t state )
ZDO_UpdateNwkStatus:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ZDO_UpdateNwkStatus
//  382 {
        FUNCALL ZDO_UpdateNwkStatus, NLME_GetShortAddr
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_UpdateNwkStatus, NLME_GetExtAddr
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_UpdateNwkStatus, osal_msg_allocate
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        FUNCALL ZDO_UpdateNwkStatus, osal_msg_send
        LOCFRAME XSTACK, 12, STACK
        ARGFRAME XSTACK, 12, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	?V0 + 0,R1
//  383   // Endpoint/Interface descriptor list.
//  384   epList_t *epDesc = epList;
        MOV	DPTR,#epList
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
//  385   byte bufLen = sizeof(osal_event_hdr_t);
//  386   osal_event_hdr_t *msgPtr;
//  387 
//  388   ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        MOV	DPTR,#(NLME_GetShortAddr & 0xffff)
        MOV	A,#((NLME_GetShortAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPTR,#ZDAppNwkAddr
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  389   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        MOV	DPTR,#(NLME_GetExtAddr & 0xffff)
        MOV	A,#((NLME_GetExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        SJMP	??ZDO_UpdateNwkStatus_0
//  390 
//  391   while ( epDesc )
//  392   {
//  393     if ( epDesc->epDesc->endPoint != ZDO_EP )
??ZDO_UpdateNwkStatus_1:
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_25:
        JZ	??ZDO_UpdateNwkStatus_2
//  394     {
//  395       msgPtr = (osal_event_hdr_t *)osal_msg_allocate( bufLen );
        ; Setup parameters for call to function osal_msg_allocate
        MOV	R2,#0x2
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  396       if ( msgPtr )
        MOV	A,R2
        JNZ	??ZDO_UpdateNwkStatus_3
        MOV	A,R3
??ZDO_UpdateNwkStatus_3:
        JZ	??ZDO_UpdateNwkStatus_2
//  397       {
//  398         msgPtr->event = ZDO_STATE_CHANGE; // Command ID
        MOV	A,#-0x2f
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
//  399         msgPtr->status = (byte)state;
        INC	DPTR
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
//  400 
//  401         osal_msg_send( *(epDesc->epDesc->task_id), (byte *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV	DPL,R6
        MOV	DPH,R7
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  402       }
//  403     }
//  404     epDesc = epDesc->nextDesc;
??ZDO_UpdateNwkStatus_2:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
//  405   }
??ZDO_UpdateNwkStatus_0:
        MOV	A,R6
        JNZ	??ZDO_UpdateNwkStatus_4
        MOV	A,R7
??ZDO_UpdateNwkStatus_4:
        JNZ	??ZDO_UpdateNwkStatus_1
//  406 }
        LJMP	?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock6
//  407 
//  408 #if defined ( REFLECTOR )
//  409 /*********************************************************************
//  410  * @fn          ZDO_RemoveEndDeviceBind
//  411  *
//  412  * @brief       Remove the end device bind
//  413  *
//  414  * @param  none
//  415  *
//  416  * @return      none
//  417  */
//  418 static void ZDO_RemoveEndDeviceBind( void )
//  419 {
//  420   if ( ZDO_EDBind )
//  421   {
//  422     // Free the RAM
//  423     if ( ZDO_EDBind->inClusters )
//  424       osal_mem_free( ZDO_EDBind->inClusters );
//  425     if ( ZDO_EDBind->outClusters )
//  426       osal_mem_free( ZDO_EDBind->outClusters );
//  427     osal_mem_free( ZDO_EDBind );
//  428     ZDO_EDBind = NULL;
//  429   }
//  430 }
//  431 #endif // REFLECTOR
//  432 
//  433 #if defined ( REFLECTOR )
//  434 /*********************************************************************
//  435  * @fn          ZDO_RemoveEndDeviceBind
//  436  *
//  437  * @brief       Remove the end device bind
//  438  *
//  439  * @param  none
//  440  *
//  441  * @return      none
//  442  */
//  443 static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
//  444 {
//  445   ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
//  446 }
//  447 #endif // REFLECTOR
//  448 
//  449 #if defined ( REFLECTOR ) || defined ( ZDO_COORDINATOR )
//  450 /*********************************************************************
//  451  * @fn          ZDO_CompareClusterLists
//  452  *
//  453  * @brief       Compare one list to another list
//  454  *
//  455  * @param       numList1 - number of items in list 1
//  456  * @param       list1 - first list of cluster IDs
//  457  * @param       numList2 - number of items in list 2
//  458  * @param       list2 - second list of cluster IDs
//  459  * @param       pMatches - buffer to put matches
//  460  *
//  461  * @return      number of matches
//  462  */
//  463 static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
//  464                           byte numList2, uint16 *list2, uint16 *pMatches )
//  465 {
//  466   byte x, y;
//  467   uint16 z;
//  468   byte numMatches = 0;
//  469 
//  470   // Check the first in against the seconds out
//  471   for ( x = 0; x < numList1; x++ )
//  472   {
//  473     for ( y = 0; y < numList2; y++ )
//  474     {
//  475       z = list2[y];
//  476       if ( list1[x] == z )
//  477         pMatches[numMatches++] = z;
//  478     }
//  479   }
//  480 
//  481   return ( numMatches );
//  482 }
//  483 #endif // REFLECTOR || ZDO_COORDINATOR
//  484 
//  485 #if defined ( REFLECTOR )
//  486 /*********************************************************************
//  487  * @fn          ZDO_DoEndDeviceBind
//  488  *
//  489  * @brief       Process the End Device Bind Req from ZDApp
//  490  *
//  491  * @param  bindReq  - Bind Request Information
//  492  * @param  SecurityUse - Security enable/disable
//  493  *
//  494  * @return      none
//  495  */
//  496 void ZDO_DoEndDeviceBind( ZDEndDeviceBind_t *bindReq )
//  497 {
//  498   uint8 numMatches;
//  499   uint8 Status;
//  500   BindingEntry_t *pBind;
//  501   AddrMgrEntry_t addrEntry;
//  502   zAddrType_t SrcAddr;
//  503 
//  504   SrcAddr.addrMode = Addr16Bit;
//  505   SrcAddr.addr.shortAddr = bindReq->srcAddr;
//  506 
//  507   // Ask for IEEE address
//  508   if ( (bindReq->srcAddr != ZDAppNwkAddr.addr.shortAddr) )
//  509   {
//  510     addrEntry.user = ADDRMGR_USER_BINDING;
//  511     addrEntry.nwkAddr = bindReq->srcAddr;
//  512     Status = AddrMgrEntryLookupNwk( &addrEntry );
//  513     if ( Status == TRUE)
//  514     {
//  515       // Add a reference to entry
//  516       AddrMgrEntryAddRef( &addrEntry );
//  517     }
//  518     else
//  519     {
//  520       // If we have the extended address
//  521       if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
//  522       {
//  523         osal_cpyExtAddr( addrEntry.extAddr, bindReq->ieeeAddr );
//  524       }
//  525 
//  526       // Not in address manager?
//  527       AddrMgrEntryUpdate( &addrEntry );   // Add it
//  528     }
//  529 
//  530     if ( AddrMgrExtAddrValid( addrEntry.extAddr ) == FALSE )
//  531     {
//  532       ZDP_IEEEAddrReq( bindReq->srcAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, false );
//  533     }
//  534   }
//  535 
//  536   if ( ZDO_EDBind )   // End Device Bind in progress
//  537   {
//  538     Status = ZDP_NO_MATCH;
//  539 
//  540     if ( bindReq->profileID == ZDO_EDBind->ProfileID )
//  541     {
//  542       // Check the first in against the seconds out
//  543       numMatches = ZDO_CompareClusterLists(
//  544                   ZDO_EDBind->numOutClusters, ZDO_EDBind->outClusters,
//  545                   bindReq->numInClusters, bindReq->inClusters, ZDOBuildBuf );
//  546 
//  547       if ( numMatches )
//  548       {
//  549         // if existing bind exists, remove it
//  550         pBind = bindFindExisting( &(ZDO_EDBind->SrcAddr), ZDO_EDBind->epIntf,
//  551                       &SrcAddr, bindReq->endpoint );
//  552         if ( pBind )
//  553         {
//  554           bindRemoveEntry( pBind );
//  555           Status = ZDP_SUCCESS;
//  556         }
//  557         // else add new binding table entry
//  558         else if ( bindAddEntry( &(ZDO_EDBind->SrcAddr), ZDO_EDBind->epIntf,
//  559                       &SrcAddr, bindReq->endpoint, numMatches, ZDOBuildBuf ) )
//  560           Status = ZDP_SUCCESS;
//  561         else
//  562           Status = ZDP_TABLE_FULL;
//  563       }
//  564 
//  565       // Check the second in against the first out
//  566       numMatches = ZDO_CompareClusterLists( bindReq->numOutClusters, bindReq->outClusters,
//  567                       ZDO_EDBind->numInClusters, ZDO_EDBind->inClusters,
//  568                       ZDOBuildBuf );
//  569 
//  570       if ( numMatches )
//  571       {
//  572         // if existing bind exists, remove it
//  573         pBind = bindFindExisting( &SrcAddr, bindReq->endpoint, &(ZDO_EDBind->SrcAddr),
//  574                       ZDO_EDBind->epIntf );
//  575         if ( pBind )
//  576         {
//  577           bindRemoveEntry( pBind );
//  578           Status = ZDP_SUCCESS;
//  579         }
//  580         // else add new binding table entry
//  581         else if ( bindAddEntry( &SrcAddr, bindReq->endpoint, &(ZDO_EDBind->SrcAddr),
//  582                       ZDO_EDBind->epIntf, numMatches, ZDOBuildBuf ) )
//  583           Status = ZDP_SUCCESS;
//  584         else
//  585           Status = ZDP_TABLE_FULL;
//  586       }
//  587     }
//  588 
//  589     if ( Status == ZDP_SUCCESS )
//  590     {
//  591       // We've found a match, so we don't have to wait for the timeout
//  592       APS_SetEndDeviceBindTimeout( 10, ZDO_EndDeviceTimeoutCB );  // psuedo stop end device timeout
//  593 
//  594         // Notify to save info into NV
//  595       osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
//  596     }
//  597 
//  598     ZDO_EDBind->status = Status;
//  599 
//  600     // Send the response message to the device sending this message
//  601     ZDO_SendEDBindRsp( bindReq->TransSeq, &SrcAddr, Status, bindReq->SecurityUse );
//  602   }
//  603   else  // Start a new End Device Bind
//  604   {
//  605     // Copy the info
//  606     ZDO_EDBind = osal_mem_alloc( sizeof( ZDO_EDBind_t ) );
//  607     if ( ZDO_EDBind )
//  608     {
//  609       osal_memcpy( &(ZDO_EDBind->SrcAddr), &SrcAddr, sizeof( zAddrType_t ) );
//  610       ZDO_EDBind->LocalCoordinator = bindReq->localCoordinator;
//  611       ZDO_EDBind->epIntf = bindReq->endpoint;
//  612       ZDO_EDBind->ProfileID = bindReq->profileID;
//  613       ZDO_EDBind->SrcTransSeq = bindReq->TransSeq;
//  614 
//  615       ZDO_EDBind->numInClusters = bindReq->numInClusters;
//  616       if ( bindReq->numInClusters )
//  617       {
//  618         ZDO_EDBind->inClusters = osal_mem_alloc( (short)(bindReq->numInClusters * sizeof(uint16)) );
//  619         if ( ZDO_EDBind->inClusters )
//  620         {
//  621           osal_memcpy( ZDO_EDBind->inClusters, bindReq->inClusters, (bindReq->numInClusters * sizeof( uint16 )) );
//  622         }
//  623         else
//  624         {
//  625           // Force no clusters
//  626           ZDO_EDBind->numInClusters = 0;
//  627         }
//  628       }
//  629       else
//  630         ZDO_EDBind->inClusters = NULL;
//  631 
//  632       ZDO_EDBind->numOutClusters = bindReq->numOutClusters;
//  633       if ( bindReq->numOutClusters )
//  634       {
//  635         ZDO_EDBind->outClusters = osal_mem_alloc( (short)(bindReq->numOutClusters*sizeof(uint16)) );
//  636         if ( ZDO_EDBind->outClusters )
//  637         {
//  638           osal_memcpy( ZDO_EDBind->outClusters, bindReq->outClusters, (bindReq->numOutClusters * sizeof( uint16 )) );
//  639         }
//  640         else
//  641         {
//  642           ZDO_EDBind->numOutClusters = 0;
//  643         }
//  644       }
//  645       else
//  646         ZDO_EDBind->outClusters = NULL;
//  647 
//  648       ZDO_EDBind->SecurityUse = bindReq->SecurityUse;
//  649       ZDO_EDBind->status = ZDP_TIMEOUT;
//  650 
//  651       // Setup the timer
//  652       APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceTimeoutCB );
//  653     }
//  654   }
//  655 }
//  656 #endif // REFLECTOR
//  657 
//  658 /*********************************************************************
//  659  * Utility functions
//  660  */
//  661 
//  662 /*********************************************************************
//  663  * @fn          ZDO_CreateAlignedUINT16List
//  664  *
//  665  * @brief       Creates a list of cluster IDs that is guaranteed to be aligned.
//  666  *              according to the needs of the target. If thre device is running
//  667  *              Protocol version 1.0 the incoming buffer will have only a single
//  668  *              byte for the cluster ID.
//  669  *
//  670  *              Depends on the malloc taking care of alignment.
//  671  *
//  672  *              When cluster ID went to 16 bits alignment for cluster IDs became
//  673  *              an issue.
//  674  *
//  675  * @param       num  - number of entries in list
//  676  * @param       buf  - pointer to list
//  677  *
//  678  * @return      pointer to aligned list. Null if can't allocate memory.
//  679  *              Caller's responsibility to free memory.
//  680  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  681 static uint16 *ZDO_CreateAlignedUINT16List(uint8 num, uint8 *buf)
??ZDO_CreateAlignedUINT16List:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ??ZDO_CreateAlignedUINT16List
//  682 {
        FUNCALL ??ZDO_CreateAlignedUINT16List, osal_mem_alloc
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        FUNCALL ??ZDO_CreateAlignedUINT16List, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	?V0 + 2,R1
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  683   uint16 *ptr;
//  684 
//  685   if ((ptr=osal_mem_alloc((short)(num*sizeof(uint16)))))  {
        ; Setup parameters for call to function osal_mem_alloc
        MOV	A,R1
        CLR	C
        RLC	A
        MOV	R2,A
        CLR	A
        RLC	A
        MOV	R3,A
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	A,R2
        JNZ	??ZDO_CreateAlignedUINT16List_1
        MOV	A,R3
??ZDO_CreateAlignedUINT16List_1:
        JZ	??ZDO_CreateAlignedUINT16List_2
//  686     uint8 i, ubyte, inc;
//  687 
//  688     inc = (ZB_PROT_V1_1 == NLME_GetProtocolVersion()) ? 2 : 1;
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x2
        JNZ	??ZDO_CreateAlignedUINT16List_3
        MOV	R3,#0x2
        SJMP	??ZDO_CreateAlignedUINT16List_4
??ZDO_CreateAlignedUINT16List_3:
        MOV	R3,#0x1
//  689 
//  690     for (i=0; i<num; ++i)  {
??ZDO_CreateAlignedUINT16List_4:
        MOV	R2,#0x0
        SJMP	??ZDO_CreateAlignedUINT16List_5
//  691       // set upper byte to 0 if we're talking Version 1.0. otherwise
//  692       // the buffer contains 16 bit cluster IDs.
//  693       ubyte  = (2 == inc) ? buf[1] : 0;
??ZDO_CreateAlignedUINT16List_6:
        MOV	?V0 + 3,#0x0
//  694       ptr[i] = BUILD_UINT16(buf[0], ubyte);
??ZDO_CreateAlignedUINT16List_7:
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	R4,A
        CLR	A
        ADD	A,R4
        MOV	A,?V0 + 3
        ADDC	A,#0x0
        MOV	R5,A
        MOV	A,R2
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,?V0 + 0
        ADD	A,R0
        MOV	DPL,A
        MOV	A,?V0 + 1
        ADDC	A,R1
        MOV	DPH,A
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
//  695       buf    += inc;
        MOV	?V0 + 4,R3
        MOV	A,R6
        ADD	A,?V0 + 4
        MOV	R6,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R7,A
        INC	R2
??ZDO_CreateAlignedUINT16List_5:
        MOV	A,R2
        CLR	C
        SUBB	A,?V0 + 2
        JNC	??ZDO_CreateAlignedUINT16List_2
        MOV	A,#0x2
        XRL	A,R3
        JNZ	??ZDO_CreateAlignedUINT16List_6
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
        SJMP	??ZDO_CreateAlignedUINT16List_7
//  696     }
//  697   }
//  698 
//  699   return ptr;
??ZDO_CreateAlignedUINT16List_2:
        MOV	R2,?V0 + 0
        MOV	R3,?V0 + 1
        CFI EndBlock cfiBlock7
        REQUIRE ?Subroutine24
        ; // Fall through to label ?Subroutine24
//  700 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
//  701 
//  702 /*********************************************************************
//  703  * @fn          ZDO_CompareByteLists
//  704  *
//  705  * @brief       Compares two lists for matches.
//  706  *
//  707  * @param       ACnt  - number of entries in list A
//  708  * @param       AList  - List A
//  709  * @param       BCnt  - number of entries in list B
//  710  * @param       BList  - List B
//  711  *
//  712  * @return      true if a match is found
//  713  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  714 byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
ZDO_AnyClusterMatches:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ZDO_AnyClusterMatches
//  715 {
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	?V0 + 0,R1
        MOV	?V0 + 1,R4
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
//  716   byte x, y;
//  717 
//  718   for ( x = 0; x < ACnt; x++ )
??CrossCallReturnLabel_32:
        MOV	?V0 + 3,#0x0
        SJMP	??ZDO_AnyClusterMatches_0
??ZDO_AnyClusterMatches_1:
        INC	?V0 + 3
??ZDO_AnyClusterMatches_0:
        MOV	A,?V0 + 3
        CLR	C
        SUBB	A,?V0 + 0
        JNC	??ZDO_AnyClusterMatches_2
//  719   {
//  720     for ( y = 0; y < BCnt; y++ )
        MOV	?V0 + 2,#0x0
        SJMP	??ZDO_AnyClusterMatches_3
??ZDO_AnyClusterMatches_4:
        INC	?V0 + 2
??ZDO_AnyClusterMatches_3:
        MOV	A,?V0 + 2
        CLR	C
        SUBB	A,?V0 + 1
        JNC	??ZDO_AnyClusterMatches_1
//  721     {
//  722       if ( AList[x] == BList[y] )
        MOV	A,?V0 + 3
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	A,R2
        ADD	A,R4
        MOV	DPL,A
        MOV	A,R3
        ADDC	A,R5
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        MOV	A,?V0 + 2
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	A,R0
        ADD	A,R4
        MOV	DPL,A
        MOV	A,R1
        ADDC	A,R5
        MOV	DPH,A
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??ZDO_AnyClusterMatches_5
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R7
??ZDO_AnyClusterMatches_5:
        JNZ	??ZDO_AnyClusterMatches_4
//  723       {
//  724         return true;
        MOV	R1,#0x1
        SJMP	??ZDO_AnyClusterMatches_6
//  725       }
//  726     }
//  727   }
//  728 
//  729   return false;
??ZDO_AnyClusterMatches_2:
        MOV	R1,#0x0
??ZDO_AnyClusterMatches_6:
        SJMP	?Subroutine22
        CFI EndBlock cfiBlock9
//  730 }
//  731 
//  732 /*********************************************************************
//  733  * Callback functions from ZDProfile
//  734  */
//  735 
//  736 /*********************************************************************
//  737  * @fn          ZDO_ProcessNodeDescReq
//  738  *
//  739  * @brief       This function processes and responds to the
//  740  *              Node_Desc_req message.
//  741  *
//  742  * @param       src  - Source address
//  743  * @param       msg - NWKAddrOfInterest
//  744  * @param       sty - Security enable/disable
//  745  *
//  746  * @return      none
//  747  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  748 void ZDO_ProcessNodeDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
ZDO_ProcessNodeDescReq:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ZDO_ProcessNodeDescReq
//  749 {
        FUNCALL ZDO_ProcessNodeDescReq, ZDP_NodeDescMsg
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL ZDO_ProcessNodeDescReq, ZDP_GenericRsp
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine4 & 0xFFFF
//  750   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
//  751   NodeDescriptorFormat_t *desc = NULL;
//  752   byte stat = ZDP_INVALID_REQTYPE;
//  753 
//  754   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
??CrossCallReturnLabel_12:
        JNZ	??ZDO_ProcessNodeDescReq_0
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,?V0 + 1
??ZDO_ProcessNodeDescReq_0:
        JNZ	??ZDO_ProcessNodeDescReq_1
//  755   {
//  756     desc = &ZDO_Config_Node_Descriptor;
//  757   }
//  758 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  759   else if ( CACHE_SERVER )
//  760   {
//  761     desc = (NodeDescriptorFormat_t *)ZDCacheGetDesc( aoi, eNodeDesc, &stat );
//  762   }
//  763 #endif
//  764 
//  765   if ( desc != NULL )
//  766   {
//  767     ZDP_NodeDescMsg( seq, src, aoi, desc, sty );
        ; Setup parameters for call to function ZDP_NodeDescMsg
        MOV	A,R5
        MOV	?V0 + 2,A
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	?V0 + 2,#(ZDO_Config_Node_Descriptor & 0xff)
        MOV	?V0 + 3,#((ZDO_Config_Node_Descriptor >> 8) & 0xff)
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R4,?V0 + 0
        MOV	R5,?V0 + 1
        MOV	DPTR,#(ZDP_NodeDescMsg & 0xffff)
        MOV	A,#((ZDP_NodeDescMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        SJMP	??ZDO_ProcessNodeDescReq_2
//  768   }
//  769   else
//  770   {
//  771     ZDP_GenericRsp( seq, src, stat, aoi, Node_Desc_rsp, sty );
??ZDO_ProcessNodeDescReq_1:
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV	?V0 + 2,#0x2
        MOV	?V0 + 3,#-0x80
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	R4,#-0x80
        MOV	DPTR,#(ZDP_GenericRsp & 0xffff)
        MOV	A,#((ZDP_GenericRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        CFI EndBlock cfiBlock10
//  772   }
//  773 }
??ZDO_ProcessNodeDescReq_2:
        REQUIRE ?Subroutine22
        ; // Fall through to label ?Subroutine22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11
//  774 
//  775 /*********************************************************************
//  776  * @fn          ZDO_ProcessPowerDescReq
//  777  *
//  778  * @brief       This function processes and responds to the
//  779  *              Node_Power_req message.
//  780  *
//  781  * @param       src  - Source address
//  782  * @param       msg - NWKAddrOfInterest
//  783  * @param       sty - Security enable/disable
//  784  *
//  785  * @return      none
//  786  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  787 void ZDO_ProcessPowerDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
ZDO_ProcessPowerDescReq:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ZDO_ProcessPowerDescReq
//  788 {
        FUNCALL ZDO_ProcessPowerDescReq, ZDP_PowerDescMsg
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL ZDO_ProcessPowerDescReq, ZDP_GenericRsp
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine4 & 0xFFFF
//  789   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
//  790   NodePowerDescriptorFormat_t *desc = NULL;
//  791   byte stat = ZDP_INVALID_REQTYPE;
//  792 
//  793   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
??CrossCallReturnLabel_13:
        JNZ	??ZDO_ProcessPowerDescReq_0
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,?V0 + 1
??ZDO_ProcessPowerDescReq_0:
        JNZ	??ZDO_ProcessPowerDescReq_1
//  794   {
//  795     desc = &ZDO_Config_Power_Descriptor;
//  796   }
//  797 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  798   else if ( CACHE_SERVER )
//  799   {
//  800     desc = (NodePowerDescriptorFormat_t *)ZDCacheGetDesc(aoi,ePowerDesc,&stat);
//  801   }
//  802 #endif
//  803 
//  804   if ( desc != NULL )
//  805   {
//  806     ZDP_PowerDescMsg( seq, src, aoi, desc, sty );
        ; Setup parameters for call to function ZDP_PowerDescMsg
        MOV	A,R5
        MOV	?V0 + 2,A
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	?V0 + 2,#(ZDO_Config_Power_Descriptor & 0xff)
        MOV	?V0 + 3,#((ZDO_Config_Power_Descriptor >> 8) & 0xff)
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R4,?V0 + 0
        MOV	R5,?V0 + 1
        MOV	DPTR,#(ZDP_PowerDescMsg & 0xffff)
        MOV	A,#((ZDP_PowerDescMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        SJMP	??ZDO_ProcessPowerDescReq_2
//  807   }
//  808   else
//  809   {
//  810     ZDP_GenericRsp( seq, src, stat, aoi, Power_Desc_rsp, sty );
??ZDO_ProcessPowerDescReq_1:
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV	?V0 + 2,#0x3
        MOV	?V0 + 3,#-0x80
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	R4,#-0x80
        MOV	DPTR,#(ZDP_GenericRsp & 0xffff)
        MOV	A,#((ZDP_GenericRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  811   }
//  812 }
??ZDO_ProcessPowerDescReq_2:
        SJMP	?Subroutine22
        CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        CLR	A
        ADD	A,?V0 + 0
        MOV	A,R7
        ADDC	A,#0x0
        MOV	?V0 + 1,A
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,?V0 + 0
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
//  813 
//  814 /*********************************************************************
//  815  * @fn          ZDO_ProcessSimpleDescReq
//  816  *
//  817  * @brief       This function processes and responds to the
//  818  *              Simple_Desc_req message.
//  819  *
//  820  * @param       src - Source address
//  821  * @param       msg - message data
//  822  * @param       sty - Security enable/disable
//  823  *
//  824  * @return      none
//  825  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  826 void ZDO_ProcessSimpleDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
ZDO_ProcessSimpleDescReq:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function ZDO_ProcessSimpleDescReq
//  827 {
        FUNCALL ZDO_ProcessSimpleDescReq, afFindSimpleDesc
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDO_ProcessSimpleDescReq, ZDP_SimpleDescMsg
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ZDO_ProcessSimpleDescReq, osal_mem_free
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	?V0 + 0,R1
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
//  828   SimpleDescriptionFormat_t *sDesc = NULL;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        LCALL	?Subroutine0 & 0xFFFF
//  829   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
??CrossCallReturnLabel_0:
        MOV	R0,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R1,A
//  830   byte endPoint = msg[2];
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
//  831   byte free = false;
        MOV	?V0 + 5,#0x0
//  832   byte stat = ZDP_SUCCESS;
        MOV	?V0 + 4,#0x0
//  833 
//  834   if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
        JZ	??ZDO_ProcessSimpleDescReq_0
        CLR	C
        SUBB	A,#-0xf
        JC	??ZDO_ProcessSimpleDescReq_1
//  835   {
//  836     stat = ZDP_INVALID_EP;
??ZDO_ProcessSimpleDescReq_0:
        MOV	?V0 + 4,#-0x7e
        SJMP	??ZDO_ProcessSimpleDescReq_2
//  837   }
//  838   else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
??ZDO_ProcessSimpleDescReq_1:
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,R0
        JNZ	??ZDO_ProcessSimpleDescReq_3
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R1
??ZDO_ProcessSimpleDescReq_3:
        JNZ	??ZDO_ProcessSimpleDescReq_4
//  839   {
//  840     free = afFindSimpleDesc( &sDesc, endPoint );
        ; Setup parameters for call to function afFindSimpleDesc
        MOV	A,R2
        MOV	R1,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(afFindSimpleDesc & 0xffff)
        MOV	A,#((afFindSimpleDesc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	?V0 + 5,A
//  841     if ( sDesc == NULL )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessSimpleDescReq_5
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessSimpleDescReq_5:
        JNZ	??ZDO_ProcessSimpleDescReq_2
//  842     {
//  843       stat = ZDP_NOT_ACTIVE;
        MOV	?V0 + 4,#-0x7d
        SJMP	??ZDO_ProcessSimpleDescReq_2
//  844     }
//  845   }
//  846 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  847   else if ( CACHE_SERVER )
//  848   {
//  849     stat = endPoint;
//  850     sDesc = (SimpleDescriptionFormat_t *)ZDCacheGetDesc(aoi, eSimpDesc, &stat);
//  851   }
//  852 #endif
//  853   else
//  854   {
//  855 #if defined ( RTR_NWK )
//  856     stat = ZDP_DEVICE_NOT_FOUND;
??ZDO_ProcessSimpleDescReq_4:
        MOV	?V0 + 4,#-0x7f
//  857 #else
//  858     stat = ZDP_INVALID_REQTYPE;
//  859 #endif
//  860   }
//  861 
//  862   ZDP_SimpleDescMsg( seq, src, stat, sDesc, Simple_Desc_rsp, sty );
??ZDO_ProcessSimpleDescReq_2:
        ; Setup parameters for call to function ZDP_SimpleDescMsg
        MOV	?V0 + 2,#0x4
        MOV	?V0 + 3,#-0x80
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R5,?V0 + 1
        MOV	R4,?V0 + 4
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(ZDP_SimpleDescMsg & 0xffff)
        MOV	A,#((ZDP_SimpleDescMsg >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  863 
//  864   if ( free )
        MOV	A,?V0 + 5
        JZ	??ZDO_ProcessSimpleDescReq_6
//  865   {
//  866     osal_mem_free( sDesc );
        ; Setup parameters for call to function osal_mem_free
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL	?BCALL               ; Banked call to: DPTR()
//  867   }
//  868 }
??ZDO_ProcessSimpleDescReq_6:
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        LJMP	?Subroutine24 & 0xFFFF
        CFI EndBlock cfiBlock16
//  869 
//  870 /*********************************************************************
//  871  * @fn          ZDO_ProcessActiveEPReq
//  872  *
//  873  * @brief       This function processes and responds to the
//  874  *              Active_EP_req message.
//  875  *
//  876  * @param       src  - Source address
//  877  * @param       sty - Security enable/disable
//  878  *
//  879  * @return      none
//  880  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  881 void ZDO_ProcessActiveEPReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
ZDO_ProcessActiveEPReq:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function ZDO_ProcessActiveEPReq
//  882 {
        FUNCALL ZDO_ProcessActiveEPReq, afNumEndPoints
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDO_ProcessActiveEPReq, afEndPoints
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDO_ProcessActiveEPReq, ZDP_EPRsp
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDO_ProcessActiveEPReq, ZDP_GenericRsp
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV	?V0 + 0,R1
        MOV	?V0 + 6,R2
        MOV	?V0 + 7,R3
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
//  883   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        CLR	A
        ADD	A,R2
        MOV	R6,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R7,A
//  884   byte cnt = CACHE_EP_MAX;
//  885   byte stat = ZDP_SUCCESS;
//  886 
//  887   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??ZDO_ProcessActiveEPReq_0
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R7
??ZDO_ProcessActiveEPReq_0:
        JNZ	??ZDO_ProcessActiveEPReq_1
//  888   {
//  889     cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
        ; Setup parameters for call to function afNumEndPoints
        MOV	DPTR,#(afNumEndPoints & 0xffff)
        MOV	A,#((afNumEndPoints >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        DEC	A
        MOV	?V0 + 2,A
//  890     afEndPoints( (uint8 *)ZDOBuildBuf, true );
        ; Setup parameters for call to function afEndPoints
        MOV	R1,#0x1
        MOV	R2,#(??ZDOBuildBuf & 0xff)
        MOV	R3,#((??ZDOBuildBuf >> 8) & 0xff)
        MOV	DPTR,#(afEndPoints & 0xffff)
        MOV	A,#((afEndPoints >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  891   }
//  892 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  893   else if ( CACHE_SERVER )
//  894   {
//  895     cnt = *((byte *)ZDCacheGetDesc(aoi, eActEPDesc, (uint8 *)ZDOBuildBuf));
//  896     // If cnt = 0, err code in 1st byte of buf, otherwise EP list is in the buf.
//  897     if ( cnt == 0 )
//  898     {
//  899       stat = ZDOBuildBuf[0];
//  900     }
//  901   }
//  902 #endif
//  903   else
//  904   {
//  905     stat = ZDP_INVALID_REQTYPE;
//  906   }
//  907 
//  908   if ( cnt != CACHE_EP_MAX )
        MOV	A,#0x4
        XRL	A,?V0 + 2
        JZ	??ZDO_ProcessActiveEPReq_1
//  909   {
//  910     ZDP_ActiveEPRsp( seq, src, stat, aoi, cnt, (uint8 *)ZDOBuildBuf, sty );
        ; Setup parameters for call to function ZDP_EPRsp
        MOV	R0,#?V0 + 1
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	?V0 + 4,#(??ZDOBuildBuf & 0xff)
        MOV	?V0 + 5,#((??ZDOBuildBuf >> 8) & 0xff)
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,?V0 + 2
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 1
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	?V0 + 2,R6
        MOV	?V0 + 3,R7
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 1
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        MOV	R1,?V0 + 0
        MOV	R2,#0x5
        MOV	R3,#-0x80
        MOV	DPTR,#(ZDP_EPRsp & 0xffff)
        MOV	A,#((ZDP_EPRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x7
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        SJMP	??ZDO_ProcessActiveEPReq_2
//  911   }
//  912   else
//  913   {
//  914     ZDP_GenericRsp( seq, src, ZDP_NOT_SUPPORTED, aoi, Active_EP_rsp, sty );
??ZDO_ProcessActiveEPReq_1:
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV	?V0 + 2,#0x5
        MOV	?V0 + 3,#-0x80
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	?V0 + 2,R6
        MOV	?V0 + 3,R7
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R5,?V0 + 1
        MOV	R4,#-0x7c
        MOV	R2,?V0 + 6
        MOV	R3,?V0 + 7
        MOV	R1,?V0 + 0
        MOV	DPTR,#(ZDP_GenericRsp & 0xffff)
        MOV	A,#((ZDP_GenericRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI EndBlock cfiBlock17
//  915   }
//  916 }
??ZDO_ProcessActiveEPReq_2:
        REQUIRE ?Subroutine25
        ; // Fall through to label ?Subroutine25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock18
//  917 
//  918 /*********************************************************************
//  919  * @fn          ZDO_ProcessMatchDescReq
//  920  *
//  921  * @brief       This function processes and responds to the
//  922  *              Match_Desc_req message.
//  923  *
//  924  * @param       src  - Source address
//  925  * @param       msg - input message containing search material
//  926  * @param       sty - Security enable/disable
//  927  *
//  928  * @return      none
//  929  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  930 void ZDO_ProcessMatchDescReq( byte seq, zAddrType_t *src, byte *msg, byte sty )
ZDO_ProcessMatchDescReq:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function ZDO_ProcessMatchDescReq
//  931 {
        FUNCALL ZDO_ProcessMatchDescReq, ??ZDO_CreateAlignedUINT16List
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, ??ZDO_CreateAlignedUINT16List
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, NLME_IsAddressBroadcast
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, ZDP_EPRsp
        LOCFRAME XSTACK, 37, STACK
        ARGFRAME XSTACK, 37, STACK
        FUNCALL ZDO_ProcessMatchDescReq, NLME_IsAddressBroadcast
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_msg_send
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, ZDO_AnyClusterMatches
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ZDO_ProcessMatchDescReq, ZDO_AnyClusterMatches
        LOCFRAME XSTACK, 32, STACK
        ARGFRAME XSTACK, 32, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_msg_allocate
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_memcpy
        LOCFRAME XSTACK, 33, STACK
        ARGFRAME XSTACK, 33, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_memcpy
        LOCFRAME XSTACK, 33, STACK
        ARGFRAME XSTACK, 33, STACK
        FUNCALL ZDO_ProcessMatchDescReq, ZDP_EPRsp
        LOCFRAME XSTACK, 37, STACK
        ARGFRAME XSTACK, 37, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME XSTACK, 30, STACK
        ARGFRAME XSTACK, 30, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 14
        MOV	A,#-0xe
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        MOV	A,R1
        MOVX	@DPTR,A
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  932   byte epCnt = 0;
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        CLR	A
        LCALL	?Subroutine0 & 0xFFFF
//  933   byte numInClusters;
//  934   uint16 *inClusters;
//  935   byte numOutClusters;
//  936   uint16 *outClusters;
//  937   epList_t *epDesc;
//  938   SimpleDescriptionFormat_t *sDesc = NULL;
//  939   uint8 allocated;
//  940 
//  941   // Parse the incoming message
//  942   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
??CrossCallReturnLabel_1:
        MOV	R6,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R7,A
//  943   uint16 profileID = BUILD_UINT16( msg[2], msg[3] );
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        CLR	A
        ADD	A,R2
        MOV	?V0 + 0,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	?V0 + 1,A
//  944   msg += 4;
        MOV	A,R4
        ADD	A,#0x4
        MOV	?V0 + 2,A
        MOV	A,R5
        ADDC	A,#0x0
//  945   numInClusters = *msg++;
        MOV	DPL,?V0 + 2
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
        INC	DPTR
        MOV	?V0 + 2,DPL
        MOV	?V0 + 3,DPH
//  946   inClusters = NULL;
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  947   if (numInClusters)  {
        MOV	A,?V0 + 7
        JZ	??ZDO_ProcessMatchDescReq_0
//  948     if (!(inClusters=ZDO_CreateAlignedUINT16List(numInClusters, msg)))  {
        ; Setup parameters for call to function ZDO_CreateAlignedUINT16List
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	R1,A
        MOV	DPTR,#(??ZDO_CreateAlignedUINT16List & 0xffff)
        MOV	A,#((??ZDO_CreateAlignedUINT16List >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	R0,?V0 + 4
        MOV	R1,?V0 + 5
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV	A,R0
        JNZ	??ZDO_ProcessMatchDescReq_1
        MOV	A,R1
??ZDO_ProcessMatchDescReq_1:
        JZ	??ZDO_ProcessMatchDescReq_2
//  949       // can't allocate memory. drop message
//  950       return;
//  951     }
//  952   }
//  953   msg += numInClusters*sizeof(uint16);
??ZDO_ProcessMatchDescReq_0:
        MOV	A,?V0 + 7
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,?V0 + 2
        ADD	A,R0
        MOV	?V0 + 2,A
        MOV	A,?V0 + 3
        ADDC	A,R1
        MOV	?V0 + 3,A
//  954 
//  955   numOutClusters = *msg++;
        MOV	DPL,?V0 + 2
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//  956   outClusters = NULL;
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        LCALL	?Subroutine2 & 0xFFFF
//  957   if (numOutClusters)  {
??CrossCallReturnLabel_4:
        JZ	??ZDO_ProcessMatchDescReq_3
//  958     if (!(outClusters=ZDO_CreateAlignedUINT16List(numOutClusters, msg)))  {
        ; Setup parameters for call to function ZDO_CreateAlignedUINT16List
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	R1,A
        MOV	DPTR,#(??ZDO_CreateAlignedUINT16List & 0xffff)
        MOV	A,#((??ZDO_CreateAlignedUINT16List >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R0,?V0 + 2
        MOV	R1,?V0 + 3
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV	A,R0
        JNZ	??ZDO_ProcessMatchDescReq_4
        MOV	A,R1
??ZDO_ProcessMatchDescReq_4:
        JNZ	??ZDO_ProcessMatchDescReq_3
//  959       // can't allocate memory. drop message
//  960       if (inClusters) {
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessMatchDescReq_5
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessMatchDescReq_5:
        JZ	??ZDO_ProcessMatchDescReq_2
//  961         osal_mem_free(inClusters);
        ; Setup parameters for call to function osal_mem_free
        MOV	A,#0x6
??ZDO_ProcessMatchDescReq_6:
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDO_ProcessMatchDescReq_2:
        MOV	A,#0xe
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        LJMP	?Subroutine25 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 30)
//  962       }
//  963       return;
//  964     }
//  965   }
//  966   msg += numOutClusters*sizeof(uint16);
//  967 
//  968   if ( NWK_BROADCAST_SHORTADDR_DEVALL == aoi )
??ZDO_ProcessMatchDescReq_3:
        MOV	A,#-0x1
        XRL	A,R6
        JNZ	??ZDO_ProcessMatchDescReq_7
        MOV	A,#-0x1
        XRL	A,R7
??ZDO_ProcessMatchDescReq_7:
        JZ	??ZDO_ProcessMatchDescReq_8
//  969   {
//  970 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  971     if ( CACHE_SERVER )
//  972     {
//  973       ZDCacheProcessMatchDescReq( seq, src, numInClusters, inClusters,
//  974                             numOutClusters, outClusters, profileID, aoi, sty );
//  975     }
//  976 #endif
//  977   }
//  978   else if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(NLME_IsAddressBroadcast & 0xffff)
        MOV	A,#((NLME_IsAddressBroadcast >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JNZ	??ZDO_ProcessMatchDescReq_9
//  979   {
//  980     ZDP_MatchDescRsp( seq, src, ZDP_INVALID_REQTYPE,
//  981                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, sty );
??ZDO_ProcessMatchDescReq_10:
        ; Setup parameters for call to function ZDP_EPRsp
        MOV	A,#0x1e
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 31)
        MOV	?V0 + 0,#0x0
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	DPTR,#ZDAppNwkAddr
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV	?V0 + 0,#-0x80
        LJMP	??ZDO_ProcessMatchDescReq_11 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 30)
//  982     if (inClusters)  {
//  983       osal_mem_free(inClusters);
//  984     }
//  985     if (outClusters)  {
//  986       osal_mem_free(outClusters);
//  987     }
//  988     return;
//  989   }
//  990   else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
??ZDO_ProcessMatchDescReq_9:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	A,#((NLME_IsAddressBroadcast >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JNZ	??ZDO_ProcessMatchDescReq_8
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??ZDO_ProcessMatchDescReq_12
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R7
??ZDO_ProcessMatchDescReq_12:
        JNZ	??ZDO_ProcessMatchDescReq_10
//  991   {
//  992 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  993     if ( CACHE_SERVER )
//  994     {
//  995       ZDCacheProcessMatchDescReq( seq, src, numInClusters, inClusters,
//  996                             numOutClusters, outClusters, profileID, aoi, sty );
//  997     }
//  998 #else
//  999     ZDP_MatchDescRsp( seq, src, ZDP_INVALID_REQTYPE,
// 1000                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, sty );
// 1001 #endif
// 1002     if (inClusters)  {
// 1003       osal_mem_free(inClusters);
// 1004     }
// 1005     if (outClusters)  {
// 1006       osal_mem_free(outClusters);
// 1007     }
// 1008     return;
// 1009   }
// 1010 
// 1011   // First count the number of endpoints that match.
// 1012   epDesc = epList;
??ZDO_ProcessMatchDescReq_8:
        MOV	DPTR,#epList
        SJMP	??ZDO_ProcessMatchDescReq_13
// 1013   while ( epDesc )
// 1014   {
// 1015     // Don't search endpoint 0 and check if response is allowed
// 1016     if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
// 1017     {
// 1018       if ( epDesc->pfnDescCB )
// 1019       {
// 1020         sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
// 1021         allocated = TRUE;
// 1022       }
// 1023       else
// 1024       {
// 1025         sDesc = epDesc->epDesc->simpleDesc;
// 1026         allocated = FALSE;
// 1027       }
// 1028 
// 1029       if ( sDesc && sDesc->AppProfId == profileID )
// 1030       {
// 1031         uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
// 1032 
// 1033         // If there are no search input/ouput clusters - respond
// 1034         if ( ((numInClusters == 0) && (numOutClusters == 0))
// 1035             // Are there matching input clusters?
// 1036              || (ZDO_AnyClusterMatches( numInClusters, inClusters,
// 1037                   sDesc->AppNumInClusters, sDesc->pAppInClusterList ))
// 1038             // Are there matching output clusters?
// 1039              || (ZDO_AnyClusterMatches( numOutClusters, outClusters,
// 1040                   sDesc->AppNumOutClusters, sDesc->pAppOutClusterList ))     )
// 1041         {
// 1042           // Notify the endpoint of the match.
// 1043           uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
// 1044           ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
// 1045 
// 1046           if (pRspSent)
// 1047           {
// 1048             pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
// 1049             pRspSent->nwkAddr = src->addr.shortAddr;
// 1050             pRspSent->numInClusters = numInClusters;
// 1051             pRspSent->numOutClusters = numOutClusters;
// 1052 
// 1053             if (numInClusters)
// 1054             {
// 1055               pRspSent->pInClusters = (uint16*) (pRspSent + 1);
// 1056               osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
// 1057             }
// 1058             else
// 1059             {
// 1060               pRspSent->pInClusters = NULL;
// 1061             }
// 1062 
// 1063             if (numOutClusters)
// 1064             {
// 1065               pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
// 1066               osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
// 1067             }
// 1068             else
// 1069             {
// 1070               pRspSent->pOutClusters = NULL;
??ZDO_ProcessMatchDescReq_14:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
// 1071             }
// 1072 
// 1073             osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
??ZDO_ProcessMatchDescReq_15:
        ; Setup parameters for call to function osal_msg_send
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL	?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1074           }
// 1075 
// 1076           uint8Buf[epCnt++] = sDesc->EndPoint;
??ZDO_ProcessMatchDescReq_16:
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_26:
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,#(??ZDOBuildBuf & 0xff)
        MOV	DPL,A
        CLR	A
        ADDC	A,#((??ZDOBuildBuf >> 8) & 0xff)
        MOV	DPH,A
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        INC	A
        MOVX	@DPTR,A
// 1077         }
// 1078       }
// 1079 
// 1080       if ( allocated )
??ZDO_ProcessMatchDescReq_17:
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JZ	??ZDO_ProcessMatchDescReq_18
// 1081         osal_mem_free( sDesc );
        ; Setup parameters for call to function osal_mem_free
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1082     }
// 1083     epDesc = epDesc->nextDesc;
??ZDO_ProcessMatchDescReq_18:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_20:
        INC	DPTR
??ZDO_ProcessMatchDescReq_13:
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessMatchDescReq_19
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessMatchDescReq_19:
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_20 & 0xFFFF
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_23:
        JZ	??ZDO_ProcessMatchDescReq_18
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_28:
        MOVX	A,@DPTR
        MOV	C,0xE0 /* A   */.0
        JNC	??ZDO_ProcessMatchDescReq_18
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_43:
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R6,A
        MOV	R1,#0x0
        MOV	A,R4
        ORL	A,R5
        ORL	A,R6
        JZ	??ZDO_ProcessMatchDescReq_21
        ; Setup parameters for indirect call
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV	R2,A
        INC	R1
        MOV	A,R1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_21:
        MOVX	A,@DPTR
        MOV	DPL,R4
        MOV	DPH,R5
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x1
        SJMP	??ZDO_ProcessMatchDescReq_22
??ZDO_ProcessMatchDescReq_21:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_36:
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        CLR	A
??ZDO_ProcessMatchDescReq_22:
        MOVX	@DPTR,A
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessMatchDescReq_23
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessMatchDescReq_23:
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_17 & 0xFFFF
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_37:
        MOVX	A,@DPTR
        XRL	A,?V0 + 0
        JNZ	??ZDO_ProcessMatchDescReq_24
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,?V0 + 1
??ZDO_ProcessMatchDescReq_24:
        JZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_17 & 0xFFFF
        MOV	A,?V0 + 7
        JNZ	??ZDO_ProcessMatchDescReq_25
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JZ	??ZDO_ProcessMatchDescReq_26
??ZDO_ProcessMatchDescReq_25:
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_29:
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV	R1,?V0 + 7
        MOV	DPTR,#(ZDO_AnyClusterMatches & 0xffff)
        MOV	A,#((ZDO_AnyClusterMatches >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV	A,R1
        JNZ	??ZDO_ProcessMatchDescReq_26
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_54:
        INC	DPTR
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_55:
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	A,#0xa
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(ZDO_AnyClusterMatches & 0xffff)
        MOV	A,#((ZDO_AnyClusterMatches >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV	A,R1
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_17 & 0xFFFF
??ZDO_ProcessMatchDescReq_26:
        ; Setup parameters for call to function osal_msg_allocate
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        ADD	A,?V0 + 7
        CLR	C
        RLC	A
        ADD	A,#0xa
        MOV	R2,A
        MOV	R3,#0x0
        MOV	DPTR,#(osal_msg_allocate & 0xffff)
        MOV	A,#((osal_msg_allocate >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	R6,?V0 + 2
        MOV	R7,?V0 + 3
        MOV	A,R6
        JNZ	??ZDO_ProcessMatchDescReq_27
        MOV	A,R7
??ZDO_ProcessMatchDescReq_27:
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_16 & 0xFFFF
        MOV	A,#-0x25
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOV	A,?V0 + 7
        LCALL	?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
        MOV	A,?V0 + 7
        JZ	??ZDO_ProcessMatchDescReq_28
        MOV	A,R6
        ADD	A,#0x5
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	A,R6
        ADD	A,#0xa
        MOV	R0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R1,A
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function osal_memcpy
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 33)
        MOV	A,?V0 + 7
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        SJMP	??ZDO_ProcessMatchDescReq_29
??ZDO_ProcessMatchDescReq_28:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
??ZDO_ProcessMatchDescReq_29:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_14 & 0xFFFF
        MOV	A,?V0 + 7
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,R6
        ADD	A,R0
        MOV	R0,A
        MOV	A,R7
        ADDC	A,R1
        MOV	R1,A
        MOV	A,#0xa
        ADD	A,R0
        MOV	R2,A
        CLR	A
        ADDC	A,R1
        MOV	R3,A
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 33)
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        CLR	C
        RLC	A
        MOV	R4,A
        CLR	A
        RLC	A
        MOV	R5,A
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        LJMP	??ZDO_ProcessMatchDescReq_15 & 0xFFFF
// 1084   }
// 1085 
// 1086   // Send the message only if at least one match found.
// 1087   if ( epCnt )
??ZDO_ProcessMatchDescReq_20:
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JZ	??ZDO_ProcessMatchDescReq_30
// 1088   {
// 1089     if ( ZSuccess == ZDP_MatchDescRsp( seq, src, ZDP_SUCCESS,
// 1090                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, sty ) )
        ; Setup parameters for call to function ZDP_EPRsp
        MOV	A,#0x1e
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 31)
        MOV	?V0 + 0,#(??ZDOBuildBuf & 0xff)
        MOV	?V0 + 1,#((??ZDOBuildBuf >> 8) & 0xff)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 34)
        MOV	DPTR,#ZDAppNwkAddr
        LCALL	?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV	?V0 + 0,#0x0
??ZDO_ProcessMatchDescReq_11:
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV	A,#0x13
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	R2,#0x6
        MOV	R3,#-0x80
        MOV	DPTR,#(ZDP_EPRsp & 0xffff)
        MOV	A,#((ZDP_EPRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x7
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
// 1091     {
// 1092     }
// 1093   }
// 1094   else
// 1095   {
// 1096   }
// 1097   if (inClusters)  {
??ZDO_ProcessMatchDescReq_30:
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessMatchDescReq_31
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessMatchDescReq_31:
        JZ	??ZDO_ProcessMatchDescReq_32
        ; Setup parameters for call to function osal_mem_free
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZDO_ProcessMatchDescReq_32:
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        JNZ	??ZDO_ProcessMatchDescReq_33
        INC	DPTR
        MOVX	A,@DPTR
??ZDO_ProcessMatchDescReq_33:
        JNZ	$+5
        LJMP	??ZDO_ProcessMatchDescReq_2 & 0xFFFF
        ; Setup parameters for call to function osal_mem_free
        MOV	A,#0x8
        LJMP	??ZDO_ProcessMatchDescReq_6 & 0xFFFF
        CFI EndBlock cfiBlock19
// 1098     osal_mem_free(inClusters);
// 1099   }
// 1100   if (outClusters)  {
// 1101     osal_mem_free(outClusters);
// 1102   }
// 1103 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_49:
        INC	DPTR
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_37
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_15
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_36
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_24
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_23
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 30)
??Subroutine18_0:
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 5,A
        MOV	?V0 + 6,#0x0
        MOV	R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_42:
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_29
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_54
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_55
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_56:
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_55
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_20
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_29
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_43
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_21
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_54
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_28
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56
        REQUIRE ?Subroutine23
        ; // Fall through to label ?Subroutine23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_43
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_29
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_55
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_22
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_54
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_28
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_21
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_40:
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        LCALL	??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_39:
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_27
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_23
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_26
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_14
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_24
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_25
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 30)
??Subroutine8_0:
        LCALL	?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_44:
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85
        CFI EndBlock cfiCond86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond87 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_22
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_21
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_57:
        INC	DPTR
        RET
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_41:
        INC	DPTR
        SJMP	?Subroutine23
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond100 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_19
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_18
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_17
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker107 Using cfiCommon1
        CFI (cfiPicker107) NoFunction
        CFI (cfiPicker107) Picker
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        RET
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond108 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_47:
        INC	DPTR
        LCALL	?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV	R1,A
        MOV	DPTR,#(osal_msg_send & 0xffff)
        MOV	A,#((osal_msg_send >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond111 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOVX	@DPTR,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        MOVX	@DPTR,A
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        CLR	A
        ADD	A,R2
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123
// 1104 
// 1105 #if defined ( ZDO_COORDINATOR )
// 1106 /*********************************************************************
// 1107  * @fn          ZDO_ProcessEndDeviceBindReq
// 1108  *
// 1109  * @brief       This function processes and responds to the
// 1110  *              End_Device_Bind_req message.
// 1111  *
// 1112  * @param       SrcAddr  - Source address
// 1113  * @param       msg - input message containing search material
// 1114  * @param       SecurityUse - Security enable/disable
// 1115  *
// 1116  * @return      none
// 1117  */
// 1118 void ZDO_ProcessEndDeviceBindReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg,
// 1119                                   byte SecurityUse )
// 1120 {
// 1121   ZDEndDeviceBind_t bindReq;
// 1122   uint8  protoVer;
// 1123 
// 1124   protoVer = NLME_GetProtocolVersion();
// 1125 
// 1126   // Parse the message
// 1127   bindReq.TransSeq = TransSeq;
// 1128   bindReq.srcAddr = SrcAddr->addr.shortAddr;
// 1129   bindReq.SecurityUse = SecurityUse;
// 1130 
// 1131   bindReq.localCoordinator = BUILD_UINT16( msg[0], msg[1] );
// 1132   msg += 2;
// 1133 
// 1134   if ( protoVer != ZB_PROT_V1_0 )
// 1135   {
// 1136     osal_cpyExtAddr( &(bindReq.ieeeAddr), msg );
// 1137     msg += Z_EXTADDR_LEN;
// 1138   }
// 1139 
// 1140   bindReq.endpoint = *msg++;
// 1141   bindReq.profileID = BUILD_UINT16( msg[0], msg[1] );
// 1142   msg += 2;
// 1143 
// 1144   bindReq.numInClusters = *msg++;
// 1145   bindReq.inClusters = NULL;
// 1146   if ( bindReq.numInClusters )
// 1147   {
// 1148     if ( !(bindReq.inClusters = ZDO_CreateAlignedUINT16List( bindReq.numInClusters, msg )) )
// 1149     {
// 1150       // can't allocate memory. drop message
// 1151       return;
// 1152     }
// 1153   }
// 1154   msg += (bindReq.numInClusters * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 )));
// 1155 
// 1156   bindReq.numOutClusters = *msg++;
// 1157   bindReq.outClusters = NULL;
// 1158   if ( bindReq.numOutClusters )
// 1159   {
// 1160     if ( !(bindReq.outClusters=ZDO_CreateAlignedUINT16List( bindReq.numOutClusters, msg )) )
// 1161     {
// 1162       // can't allocate memory. drop message
// 1163       if ( bindReq.inClusters )
// 1164       {
// 1165         osal_mem_free( bindReq.inClusters );
// 1166       }
// 1167       return;
// 1168     }
// 1169   }
// 1170 
// 1171   ZDApp_EndDeviceBindReqCB( &bindReq );
// 1172 
// 1173   if ( bindReq.inClusters )
// 1174   {
// 1175     osal_mem_free( bindReq.inClusters );
// 1176   }
// 1177   if ( bindReq.outClusters )
// 1178   {
// 1179     osal_mem_free( bindReq.outClusters );
// 1180   }
// 1181 }
// 1182 #endif // ZDO_COORDINATOR
// 1183 
// 1184 #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
// 1185 
// 1186 /*********************************************************************
// 1187  * @fn          ZDO_ProcessBindUnbindReq
// 1188  *
// 1189  * @brief       This function processes and responds to the
// 1190  *              Bind_req or Unbind_req message.
// 1191  *
// 1192  * @param       SrcAddr  - Source address
// 1193  * @param       msgClusterID - message cluster ID
// 1194  * @param       msg - input message containing search material
// 1195  * @param       SecurityUse - Security enable/disable
// 1196  *
// 1197  * @return      none
// 1198  */
// 1199 void ZDO_ProcessBindUnbindReq( byte TransSeq, zAddrType_t *SrcAddr, uint16 msgClusterID,
// 1200                               byte *msg, byte SecurityUse )
// 1201 {
// 1202   byte *SrcAddress;
// 1203   byte SrcEpIntf;
// 1204   uint16 ClusterID;
// 1205   zAddrType_t DstAddress;
// 1206   byte DstEpIntf;
// 1207   uint8 protoVer;
// 1208 
// 1209   protoVer = NLME_GetProtocolVersion();
// 1210 
// 1211   SrcAddress = msg;
// 1212   msg += Z_EXTADDR_LEN;
// 1213   SrcEpIntf = *msg++;
// 1214 
// 1215   if ( protoVer != ZB_PROT_V1_0 )
// 1216   {
// 1217     ClusterID = BUILD_UINT16( msg[0], msg[1] );
// 1218     msg += 2;
// 1219   }
// 1220   else
// 1221   {
// 1222     ClusterID = *msg++;
// 1223   }
// 1224 
// 1225   if ( protoVer != ZB_PROT_V1_0 )
// 1226   {
// 1227     DstAddress.addrMode = *msg++;
// 1228     if ( DstAddress.addrMode == Addr64Bit )
// 1229     {
// 1230       osal_cpyExtAddr( DstAddress.addr.extAddr, msg );
// 1231       msg += Z_EXTADDR_LEN;
// 1232       DstEpIntf = *msg;
// 1233     }
// 1234     else
// 1235     {
// 1236       DstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
// 1237       msg += sizeof ( uint16 );
// 1238     }
// 1239   }
// 1240   else
// 1241   {
// 1242     DstAddress.addrMode = Addr64Bit;
// 1243     osal_cpyExtAddr( DstAddress.addr.extAddr, msg );
// 1244     msg += Z_EXTADDR_LEN;
// 1245     DstEpIntf = *msg;
// 1246   }
// 1247 
// 1248 
// 1249   if ( msgClusterID == Bind_req )
// 1250   {
// 1251     ZDApp_BindReqCB( TransSeq, SrcAddr, SrcAddress, SrcEpIntf,
// 1252                     ClusterID, &DstAddress, DstEpIntf, SecurityUse );
// 1253   }
// 1254   else
// 1255   {
// 1256     ZDApp_UnbindReqCB( TransSeq, SrcAddr, SrcAddress, SrcEpIntf,
// 1257                     ClusterID, &DstAddress, DstEpIntf, SecurityUse );
// 1258   }
// 1259 }
// 1260 #endif // REFLECTOR || ZDO_BIND_UNBIND_RESPONSE
// 1261 
// 1262 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1263 /*********************************************************************
// 1264  * @fn      ZDO_ProcessAddrRsp
// 1265  *
// 1266  * @brief   Process an incoming NWK_addr_rsp or IEEE_addr_rsp message and then
// 1267  *          invoke the corresponding CB function.
// 1268  *
// 1269  * @param   src - Source address of the request.
// 1270  * @param   cId - Cluster ID of the request.
// 1271  * @param   msg - Incoming request message.
// 1272  *
// 1273  * @return  none
// 1274  */
// 1275 void ZDO_ProcessAddrRsp( zAddrType_t *src, uint16 cId, byte *msg, byte msgLen )
// 1276 {
// 1277 #if defined ( REFLECTOR )
// 1278   AddrMgrEntry_t addrEntry;
// 1279 #endif
// 1280   uint16 aoi;
// 1281   uint16 *list = NULL;
// 1282   byte idx = 0;
// 1283   byte cnt = 0;
// 1284 
// 1285   byte stat = *msg++;
// 1286   byte *ieee = msg;
// 1287   msg += Z_EXTADDR_LEN;
// 1288   aoi = BUILD_UINT16( msg[0], msg[1] );
// 1289 
// 1290 #if defined ( REFLECTOR )
// 1291   // Add this to the address manager
// 1292   addrEntry.user = ADDRMGR_USER_DEFAULT;
// 1293   addrEntry.nwkAddr = aoi;
// 1294   AddrMgrExtAddrSet( addrEntry.extAddr, ieee );
// 1295   AddrMgrEntryUpdate( &addrEntry );
// 1296 #endif
// 1297 
// 1298   // NumAssocDev field is only present on success.
// 1299   if ( stat == ZDO_SUCCESS )
// 1300   {
// 1301     msg += 2;
// 1302     cnt = ( msgLen > 1 + Z_EXTADDR_LEN + 2 ) ? *msg++ : 0;   // Single req: msgLen = status + IEEEAddr + NWKAddr
// 1303 
// 1304     // StartIndex field is only present if NumAssocDev field is non-zero.
// 1305     if ( cnt != 0 )
// 1306     {
// 1307       idx = *msg++;
// 1308 
// 1309       if ( cnt > idx )
// 1310       {
// 1311         list = osal_mem_alloc( (short)(cnt * sizeof( uint16 )) );
// 1312 
// 1313         if ( list )
// 1314         {
// 1315           uint16 *pList = list;
// 1316           byte n = cnt - idx;
// 1317 
// 1318           while ( n != 0 )
// 1319           {
// 1320             *pList++ = BUILD_UINT16( msg[0], msg[1] );
// 1321             msg += sizeof( uint16 );
// 1322             n--;
// 1323           }
// 1324         }
// 1325       }
// 1326     }
// 1327   }
// 1328 
// 1329 #if defined ( ZDO_NWKADDR_REQUEST )
// 1330   if ( cId == NWK_addr_rsp )
// 1331   {
// 1332     ZDApp_NwkAddrRspCB( src, stat, ieee, aoi, cnt, idx, list );
// 1333   }
// 1334 #endif
// 1335 
// 1336 #if defined ( ZDO_IEEEADDR_REQUEST )
// 1337   if ( cId == IEEE_addr_rsp )
// 1338   {
// 1339     ZDApp_IEEEAddrRspCB( src, stat, ieee, aoi, cnt, idx, list );
// 1340   }
// 1341 #endif
// 1342 
// 1343   if ( list )
// 1344   {
// 1345     osal_mem_free( list );
// 1346   }
// 1347 }
// 1348 #endif // ZDO_NWKADDR_REQUEST ZDO_IEEEADDR_REQUEST
// 1349 
// 1350 #if defined ( ZDO_NODEDESC_REQUEST )
// 1351 /*********************************************************************
// 1352  * @fn          ZDO_ProcessNodeDescRsp
// 1353  *
// 1354  * @brief       This function processes and responds to the
// 1355  *              Node_Desc_rsp message.
// 1356  *
// 1357  * @param       SrcAddr  - Source address
// 1358  * @param       msg - input message containing search material
// 1359  *
// 1360  * @return      none
// 1361  */
// 1362 void ZDO_ProcessNodeDescRsp( zAddrType_t *SrcAddr, byte *msg )
// 1363 {
// 1364   byte proVer = NLME_GetProtocolVersion();
// 1365   NodeDescriptorFormat_t nodeDesc;
// 1366   NodeDescriptorFormat_t *pNodeDesc = NULL;
// 1367   byte Status = *msg++;
// 1368   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
// 1369 
// 1370   if ( Status == ZDP_SUCCESS )
// 1371   {
// 1372     msg += 2;
// 1373     nodeDesc.LogicalType = *msg & 0x07;
// 1374     if ( proVer == ZB_PROT_V1_0 )
// 1375     {
// 1376       nodeDesc.UserDescAvail = 0;
// 1377       nodeDesc.ComplexDescAvail = 0;
// 1378     }
// 1379     else
// 1380     {
// 1381       nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
// 1382       nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
// 1383     }
// 1384     msg++;  // Reserved bits.
// 1385     nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
// 1386     nodeDesc.APSFlags = *msg++ & 0x07;
// 1387     nodeDesc.CapabilityFlags = *msg++;
// 1388     nodeDesc.ManufacturerCode[0] = *msg++;
// 1389     nodeDesc.ManufacturerCode[1] = *msg++;
// 1390     nodeDesc.MaxBufferSize = *msg++;
// 1391     nodeDesc.MaxTransferSize[0] = *msg++;
// 1392     nodeDesc.MaxTransferSize[1] = *msg++;
// 1393 
// 1394     if ( proVer == ZB_PROT_V1_0)
// 1395     {
// 1396       nodeDesc.ServerMask = 0;
// 1397     }
// 1398     else
// 1399     {
// 1400       nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
// 1401     }
// 1402 
// 1403     pNodeDesc = &nodeDesc;
// 1404   }
// 1405 
// 1406   ZDApp_NodeDescRspCB( SrcAddr, Status, aoi, pNodeDesc );
// 1407 }
// 1408 #endif // ZDO_NODEDESC_REQUEST
// 1409 
// 1410 #if defined ( ZDO_POWERDESC_REQUEST )
// 1411 /*********************************************************************
// 1412  * @fn          ZDO_ProcessPowerDescRsp
// 1413  *
// 1414  * @brief       This function processes and responds to the
// 1415  *              Power_Desc_rsp message.
// 1416  *
// 1417  * @param       SrcAddr  - Source address
// 1418  * @param       msg - input message containing search material
// 1419  *
// 1420  * @return      none
// 1421  */
// 1422 void ZDO_ProcessPowerDescRsp( zAddrType_t *SrcAddr, byte *msg )
// 1423 {
// 1424   NodePowerDescriptorFormat_t pwrDesc;
// 1425   NodePowerDescriptorFormat_t *pPwrDesc = NULL;
// 1426   byte Status = *msg++;
// 1427   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
// 1428 
// 1429   if ( Status == ZDP_SUCCESS )
// 1430   {
// 1431     msg += 2;
// 1432     pwrDesc.AvailablePowerSources = *msg >> 4;
// 1433     pwrDesc.PowerMode = *msg++ & 0x0F;
// 1434     pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
// 1435     pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
// 1436     pPwrDesc = &pwrDesc;
// 1437   }
// 1438 
// 1439   ZDApp_PowerDescRspCB( SrcAddr, Status, aoi, pPwrDesc );
// 1440 }
// 1441 #endif // ZDO_POWERDESC_REQUEST
// 1442 
// 1443 #if defined ( ZDO_SIMPLEDESC_REQUEST )
// 1444 /*********************************************************************
// 1445  * @fn          ZDO_ProcessSimpleDescRsp
// 1446  *
// 1447  * @brief       This function processes and responds to the
// 1448  *              Simple_Desc_rsp message.
// 1449  *
// 1450  * @param       SrcAddr  - Source address
// 1451  * @param       msg - input message containing search material
// 1452  *
// 1453  * @return      none
// 1454  */
// 1455 void ZDO_ProcessSimpleDescRsp( zAddrType_t *SrcAddr, byte *msg )
// 1456 {
// 1457   byte epIntf = 0;
// 1458   SimpleDescriptionFormat_t simpleDesc;
// 1459   SimpleDescriptionFormat_t *pSimpleDesc = NULL;
// 1460   byte Status = *msg++;
// 1461   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
// 1462 
// 1463   if ( Status == ZDP_SUCCESS )
// 1464   {
// 1465     msg += 3;
// 1466     epIntf = *msg;
// 1467     pSimpleDesc = &simpleDesc;
// 1468     ZDO_ParseSimpleDescBuf( msg, pSimpleDesc );
// 1469   }
// 1470 
// 1471   ZDApp_SimpleDescRspCB( SrcAddr, Status, aoi, epIntf, pSimpleDesc );
// 1472 }
// 1473 #endif // ZDO_SIMPLEDESC_REQUEST
// 1474 
// 1475 #if defined ( ZDO_ACTIVEEP_REQUEST ) || defined ( ZDO_MATCH_REQUEST )
// 1476 /*********************************************************************
// 1477  * @fn          ZDO_ProcessEPListRsp
// 1478  *
// 1479  * @brief       This function processes and responds to the
// 1480  *              Active_EP_rsp or Match_Desc_rsp message.
// 1481  *
// 1482  * @param       src  - Source address
// 1483  * @param       ClusterID - Active_EP_rsp or Match_Desc_rsp
// 1484  * @param       msg - input message containing search material
// 1485  *
// 1486  * @return      none
// 1487  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1488 void ZDO_ProcessEPListRsp( zAddrType_t *src, uint16 ClusterID, byte *msg )
ZDO_ProcessEPListRsp:
        CFI Block cfiBlock124 Using cfiCommon0
        CFI Function ZDO_ProcessEPListRsp
// 1489 {
        FUNCALL ZDO_ProcessEPListRsp, ZDApp_MatchDescRspCB
        LOCFRAME XSTACK, 14, STACK
        ARGFRAME XSTACK, 14, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV	A,#0xc
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
// 1490   byte Status = *msg++;
??CrossCallReturnLabel_35:
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOV	R0,DPL
        MOV	R1,DPH
// 1491   byte cnt = msg[2];
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
// 1492   byte *list = msg+3;
// 1493 
// 1494   src->addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        MOV	?V0 + 2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        CLR	A
        ADD	A,?V0 + 2
        MOV	R6,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R7,A
        MOV	DPL,R2
        MOV	DPH,R3
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R7
        MOVX	@DPTR,A
// 1495 
// 1496 #if defined ( ZDO_ACTIVEEP_REQUEST )
// 1497   if ( ClusterID == Active_EP_rsp )
// 1498     ZDApp_ActiveEPRspCB( src, Status, cnt, list );
// 1499 #endif
// 1500 
// 1501 #if defined ( ZDO_MATCH_REQUEST )
// 1502   if ( ClusterID == Match_Desc_rsp )
        MOV	A,#0x6
        XRL	A,R4
        JNZ	??ZDO_ProcessEPListRsp_0
        MOV	A,#-0x80
        XRL	A,R5
??ZDO_ProcessEPListRsp_0:
        JNZ	??ZDO_ProcessEPListRsp_1
// 1503     ZDApp_MatchDescRspCB( src, Status, cnt, list );
        ; Setup parameters for call to function ZDApp_MatchDescRspCB
        MOV	A,R0
        ADD	A,#0x3
        MOV	?V0 + 2,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	?V0 + 3,A
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV	R4,?V0 + 1
        MOV	R1,?V0 + 0
        MOV	DPTR,#(ZDApp_MatchDescRspCB & 0xffff)
        MOV	A,#((ZDApp_MatchDescRspCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 1504 #endif
// 1505 }
??ZDO_ProcessEPListRsp_1:
        LJMP	?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock124
// 1506 #endif  // ZDO_ACTIVEEP_REQUEST ZDO_MATCH_REQUEST
// 1507 
// 1508 #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
// 1509 /*********************************************************************
// 1510  * @fn          ZDO_ProcessBindUnBindRsp
// 1511  *
// 1512  * @brief       This function processes and responds to the
// 1513  *              End_Device_Bind_rsp message.
// 1514  *
// 1515  * @param       SrcAddr  - Source address
// 1516  * @param       ClusterID - Active_EP_rsp or Match_Desc_rsp
// 1517  * @param       msg - input message containing search material
// 1518  *
// 1519  * @return      none
// 1520  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1521 void ZDO_ProcessBindUnbindRsp( zAddrType_t *SrcAddr, uint16 ClusterID, byte Status, uint8 TransSeq )
ZDO_ProcessBindUnbindRsp:
        CFI Block cfiBlock125 Using cfiCommon0
        CFI Function ZDO_ProcessBindUnbindRsp
// 1522 {
        FUNCALL ZDO_ProcessBindUnbindRsp, ZDApp_EndDeviceBindRsp
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1523 #if defined ( ZDO_COORDINATOR )
// 1524   uint8 used = FALSE;
// 1525 #endif
// 1526 
// 1527 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
// 1528   if ( ClusterID == End_Device_Bind_rsp )
        MOV	A,#0x20
        XRL	A,R4
        JNZ	??ZDO_ProcessBindUnbindRsp_0
        MOV	A,#-0x80
        XRL	A,R5
??ZDO_ProcessBindUnbindRsp_0:
        JNZ	??ZDO_ProcessBindUnbindRsp_1
// 1529     ZDApp_EndDeviceBindRsp( SrcAddr, Status );
        ; Setup parameters for call to function ZDApp_EndDeviceBindRsp
        MOV	DPTR,#(ZDApp_EndDeviceBindRsp & 0xffff)
        MOV	A,#((ZDApp_EndDeviceBindRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
// 1530 #endif
// 1531 
// 1532 #if defined ( ZDO_COORDINATOR )
// 1533   if ( matchED )
// 1534   {
// 1535     used = ZDMatchSendState(
// 1536            (uint8)((ClusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1537            Status, TransSeq );
// 1538   }
// 1539 
// 1540   if ( !used )
// 1541 #endif
// 1542   {
// 1543   #if defined ( ZDO_BIND_UNBIND_REQUEST )
// 1544     if ( ClusterID == Bind_rsp )
// 1545       ZDApp_BindRsp( SrcAddr, Status );
// 1546     else
// 1547       ZDApp_UnbindRsp( SrcAddr, Status );
// 1548   #endif
// 1549   }
// 1550 }
??ZDO_ProcessBindUnbindRsp_1:
        LJMP	?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock125
// 1551 #endif // ZDO_BIND_UNBIND_REQUEST ZDO_ENDDEVICEBIND_REQUEST
// 1552 
// 1553 #if defined ( ZDO_SERVERDISC_REQUEST )
// 1554 /*********************************************************************
// 1555  * @fn          ZDO_ProcessServerDiscRsp
// 1556  *
// 1557  * @brief       Process the Server_Discovery_rsp message.
// 1558  *
// 1559  * @param       srcAddr - Source address.
// 1560  * @param       msg - Byte array containing the Server_Discovery_rsp command frame.
// 1561  * @param       SecurityUse -
// 1562  *
// 1563  * @return      none
// 1564  */
// 1565 void ZDO_ProcessServerDiscRsp(zAddrType_t *srcAddr, byte *msg, byte SecurityUse)
// 1566 {
// 1567   byte status = *msg++;
// 1568   uint16 serverMask = BUILD_UINT16( msg[0], msg[1] );
// 1569 
// 1570   ZDApp_ServerDiscRspCB( srcAddr->addr.shortAddr, status, serverMask,
// 1571                          SecurityUse );
// 1572 }
// 1573 #endif
// 1574 
// 1575 #if defined ( ZDO_SERVERDISC_RESPONSE )
// 1576 /*********************************************************************
// 1577  * @fn          ZDO_ProcessServerDiscReq
// 1578  *
// 1579  * @brief       Process the Server_Discovery_req message.
// 1580  *
// 1581  * @param       transID - Transaction sequence number of request.
// 1582  * @param       srcAddr  - Source address
// 1583  * @param       msg - Byte array containing the Server_Discovery_req command frame.
// 1584  * @param       SecurityUse -
// 1585  *
// 1586  * @return      none
// 1587  */
// 1588 void ZDO_ProcessServerDiscReq( byte transID, zAddrType_t *srcAddr, byte *msg,
// 1589                                byte SecurityUse )
// 1590 {
// 1591   uint16 serverMask = BUILD_UINT16( msg[0], msg[1] );
// 1592   uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
// 1593 
// 1594   if ( matchMask )
// 1595   {
// 1596     ZDP_ServerDiscRsp( transID, srcAddr, ZSUCCESS, ZDAppNwkAddr.addr.shortAddr,
// 1597                        matchMask, SecurityUse );
// 1598   }
// 1599 }
// 1600 #endif
// 1601 
// 1602 /*********************************************************************
// 1603  * Call Back Functions from APS  - API
// 1604  */
// 1605 
// 1606 /*********************************************************************
// 1607  * @fn          ZDO_EndDeviceTimeoutCB
// 1608  *
// 1609  * @brief       This function handles the binding timer for the End
// 1610  *              Device Bind command.
// 1611  *
// 1612  * @param       none
// 1613  *
// 1614  * @return      none
// 1615  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1616 void ZDO_EndDeviceTimeoutCB( void )
ZDO_EndDeviceTimeoutCB:
        CFI Block cfiBlock126 Using cfiCommon0
        CFI Function ZDO_EndDeviceTimeoutCB
// 1617 {
        ; Saved register size: 0
        ; Auto size: 0
// 1618 #if defined ( REFLECTOR )
// 1619   byte stat;
// 1620   if ( ZDO_EDBind )
// 1621   {
// 1622     stat = ZDO_EDBind->status;
// 1623 
// 1624     // Send the response message to the first sent
// 1625     ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
// 1626                         stat, ZDO_EDBind->SecurityUse );
// 1627 
// 1628     ZDO_RemoveEndDeviceBind();
// 1629   }
// 1630 #endif  // REFLECTOR
// 1631 }
        LJMP	?BRET
        CFI EndBlock cfiBlock126
// 1632 
// 1633 /*********************************************************************
// 1634  * Optional Management Messages
// 1635  */
// 1636 
// 1637 #if defined( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
// 1638 /*********************************************************************
// 1639  * @fn          ZDO_ProcessMgmtLqiReq
// 1640  *
// 1641  * @brief       This function handles parsing the incoming Management
// 1642  *              LQI request and generate the response.
// 1643  *
// 1644  *   Note:      This function will limit the number of items returned
// 1645  *              to ZDO_MAX_LQI_ITEMS items.
// 1646  *
// 1647  * @param       SrcAddr - source of the request
// 1648  * @param       StartIndex - where to start the return list
// 1649  * @param       SecurityUse -
// 1650  *
// 1651  * @return      none
// 1652  */
// 1653 void ZDO_ProcessMgmtLqiReq( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
// 1654 {
// 1655   byte x;
// 1656   byte index;
// 1657   byte numItems;
// 1658   byte maxItems;
// 1659   ZDP_MgmtLqiItem_t* table;
// 1660   ZDP_MgmtLqiItem_t* item;
// 1661   neighborEntry_t    entry;
// 1662   byte aItems;
// 1663   associated_devices_t *aDevice;
// 1664 
// 1665   // Get the number of neighbor items
// 1666   NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
// 1667 
// 1668   // Get the number of associated items
// 1669   aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
// 1670   // Total number of items
// 1671   maxItems += aItems;
// 1672 
// 1673   // Start with the supplied index
// 1674   numItems = maxItems - StartIndex;
// 1675 
// 1676   // limit the size of the list
// 1677   if ( numItems > ZDO_MAX_LQI_ITEMS )
// 1678     numItems = ZDO_MAX_LQI_ITEMS;
// 1679 
// 1680   // Allocate the memory to build the table
// 1681   table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
// 1682             ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
// 1683 
// 1684   if ( table != NULL )
// 1685   {
// 1686     x = 0;
// 1687     item = table;
// 1688     index = StartIndex;
// 1689 
// 1690     // Loop through associated items and build list
// 1691     for ( ; x < numItems; x++ )
// 1692     {
// 1693       if ( index < aItems )
// 1694       {
// 1695         // get next associated device
// 1696         aDevice = AssocFindDevice( index++ );
// 1697 
// 1698         // set basic fields
// 1699         item->panID   = _NIB.nwkPanId;
// 1700         osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
// 1701         item->nwkAddr = aDevice->shortAddr;
// 1702         item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
// 1703         item->depth   = 0xFF;
// 1704         item->lqi     = aDevice->linkInfo.rxCost;
// 1705 
// 1706         osal_memset( item->extAddr, 0x00, Z_EXTADDR_LEN );
// 1707 
// 1708         // use association info to set other fields
// 1709         if ( aDevice->nodeRelation == PARENT )
// 1710         {
// 1711           if (  aDevice->shortAddr == 0 )
// 1712           {
// 1713             item->devType = ZDP_MGMT_DT_COORD;
// 1714           }
// 1715           else
// 1716           {
// 1717             item->devType = ZDP_MGMT_DT_ROUTER;
// 1718           }
// 1719 
// 1720           item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
// 1721           item->relation = ZDP_MGMT_REL_PARENT;
// 1722         }
// 1723         else
// 1724         {
// 1725           if ( aDevice->nodeRelation < CHILD_FFD )
// 1726           {
// 1727             item->devType = ZDP_MGMT_DT_ENDDEV;
// 1728 
// 1729             if ( aDevice->nodeRelation == CHILD_RFD )
// 1730             {
// 1731               item->rxOnIdle = FALSE;
// 1732             }
// 1733             else
// 1734             {
// 1735               item->rxOnIdle = TRUE;
// 1736             }
// 1737           }
// 1738           else
// 1739           {
// 1740             item->devType = ZDP_MGMT_DT_ROUTER;
// 1741 
// 1742             if ( aDevice->nodeRelation == CHILD_FFD )
// 1743             {
// 1744               item->rxOnIdle = FALSE;
// 1745             }
// 1746             else
// 1747             {
// 1748               item->rxOnIdle = TRUE;
// 1749             }
// 1750           }
// 1751 
// 1752           item->relation = ZDP_MGMT_REL_CHILD;
// 1753         }
// 1754 
// 1755         item++;
// 1756       }
// 1757       else
// 1758       {
// 1759         if ( StartIndex <= aItems )
// 1760           // Start with 1st neighbor
// 1761           index = 0;
// 1762         else
// 1763           // Start with >1st neighbor
// 1764           index = StartIndex - aItems;
// 1765         break;
// 1766       }
// 1767     }
// 1768 
// 1769     // Loop through neighbor items and finish list
// 1770     for ( ; x < numItems; x++ )
// 1771     {
// 1772       // Add next neighbor table item
// 1773       NLME_GetRequest( nwkNeighborTable, index++, &entry );
// 1774 
// 1775       // set ZDP_MgmtLqiItem_t fields
// 1776       item->panID    = entry.panId;
// 1777       osal_memset( item->extPanID, 0x00, Z_EXTADDR_LEN);
// 1778       osal_memset( item->extAddr, 0x00, Z_EXTADDR_LEN );
// 1779       item->nwkAddr  = entry.neighborAddress;
// 1780       item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
// 1781       item->relation = ZDP_MGMT_REL_UNKNOWN;
// 1782       item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
// 1783       item->depth    = 0xFF;
// 1784       item->lqi      = entry.linkInfo.rxCost;
// 1785 
// 1786       if ( item->nwkAddr == 0 )
// 1787       {
// 1788         item->devType = ZDP_MGMT_DT_COORD;
// 1789       }
// 1790       else
// 1791       {
// 1792         item->devType = ZDP_MGMT_DT_ROUTER;
// 1793       }
// 1794 
// 1795       item++;
// 1796     }
// 1797 
// 1798     // Send response
// 1799     ZDP_MgmtLqiRsp( TransSeq, SrcAddr, ZSuccess, maxItems,
// 1800                     StartIndex, numItems, table, false );
// 1801 
// 1802     osal_mem_free( table );
// 1803   }
// 1804 }
// 1805 #endif // ZDO_MGMT_LQI_RESPONSE && RTR_NWK
// 1806 
// 1807 #if defined ( ZDO_MGMT_LQI_REQUEST )
// 1808 /*********************************************************************
// 1809  * @fn          ZDO_ProcessMgmtLqiRsp
// 1810  *
// 1811  * @brief       This function handles parsing the incoming Management
// 1812  *              LQI response and then generates a callback to the ZD
// 1813  *              application.
// 1814  *
// 1815  * @param       SrcAddr - source of the request
// 1816  * @param       msg - buffer holding incoming message to parse
// 1817  * @param       SecurityUse -
// 1818  *
// 1819  * @return      none
// 1820  */
// 1821 void ZDO_ProcessMgmtLqiRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 1822 {
// 1823   byte x;
// 1824   byte status;
// 1825   byte startIndex = 0;
// 1826   byte neighborLqiCount = 0;
// 1827   byte neighborLqiEntries = 0;
// 1828   neighborLqiItem_t *list = NULL;
// 1829   byte proVer = NLME_GetProtocolVersion();
// 1830 
// 1831   status = *msg++;
// 1832   if ( status == ZSuccess )
// 1833   {
// 1834     neighborLqiEntries = *msg++;
// 1835     startIndex = *msg++;
// 1836     neighborLqiCount = *msg++;
// 1837 
// 1838     // Allocate a buffer big enough to handle the list.
// 1839     list = (neighborLqiItem_t *)osal_mem_alloc( neighborLqiCount *
// 1840                                         sizeof( neighborLqiItem_t ) );
// 1841     if ( list )
// 1842     {
// 1843       neighborLqiItem_t *pList = list;
// 1844 
// 1845       for ( x = 0; x < neighborLqiCount; x++ )
// 1846       {
// 1847         if ( proVer == ZB_PROT_V1_0 )
// 1848         {
// 1849           pList->PANId = BUILD_UINT16( msg[0], msg[1] );
// 1850           msg += 2;
// 1851         }
// 1852         else
// 1853         {
// 1854           osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
// 1855           msg += Z_EXTADDR_LEN;
// 1856         }
// 1857 
// 1858         msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
// 1859         pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
// 1860         if ( proVer == ZB_PROT_V1_0 )
// 1861           msg += 2 + 1 + 1;          // Skip DeviceType, RxOnIdle, Relationship, PermitJoinging and Depth
// 1862         else
// 1863           msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
// 1864 
// 1865         pList->rxLqi = *msg++;
// 1866         pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
// 1867         pList++;
// 1868       }
// 1869     }
// 1870   }
// 1871 
// 1872   // Call the callback to the application.
// 1873   ZDApp_MgmtLqiRspCB( SrcAddr->addr.shortAddr, status, neighborLqiEntries,
// 1874                       startIndex, neighborLqiCount, list );
// 1875 
// 1876   if ( list )
// 1877   {
// 1878     osal_mem_free( list );
// 1879   }
// 1880 }
// 1881 #endif // ZDO_MGMT_LQI_REQUEST
// 1882 
// 1883 #if defined( ZDO_MGMT_NWKDISC_RESPONSE )
// 1884 /*********************************************************************
// 1885  * @fn          ZDO_ProcessMgmtNwkDiscReq
// 1886  *
// 1887  * @brief       This function handles parsing the incoming Management
// 1888  *              Network Discover request and starts the request.
// 1889  *
// 1890  * @param       SrcAddr - source of the request
// 1891  * @param       msg - pointer to incoming message
// 1892  * @param       SecurityUse -
// 1893  *
// 1894  * @return      none
// 1895  */
// 1896 void ZDO_ProcessMgmtNwkDiscReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 1897 {
// 1898   NLME_ScanFields_t scan;
// 1899   uint8             index;
// 1900 
// 1901   scan.channels = BUILD_UINT32( msg[0], msg[1], msg[2], msg[3] );
// 1902   msg += 4;
// 1903   scan.duration = *msg++;
// 1904   index         = *msg;
// 1905 
// 1906   // Save off the information to be used for the response
// 1907   zdappMgmtNwkDiscReqInProgress          = true;
// 1908   zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
// 1909   zdappMgmtNwkDiscRspAddr.addr.shortAddr = SrcAddr->addr.shortAddr;
// 1910   zdappMgmtNwkDiscStartIndex             = index;
// 1911   zdappMgmtNwkDiscRspTransSeq            = TransSeq;
// 1912 
// 1913   if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
// 1914   {
// 1915     NLME_NwkDiscTerm();
// 1916 
// 1917     // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
// 1918   }
// 1919 }
// 1920 #endif // ZDO_MGMT_NWKDISC_RESPONSE
// 1921 
// 1922 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1923 /*********************************************************************
// 1924  * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
// 1925  *
// 1926  * @brief       This function finishes the processing of the Management
// 1927  *              Network Discover Request and generates the response.
// 1928  *
// 1929  *   Note:      This function will limit the number of items returned
// 1930  *              to ZDO_MAX_NWKDISC_ITEMS items.
// 1931  *
// 1932  * @param       ResultCountSrcAddr - source of the request
// 1933  * @param       msg - pointer to incoming message
// 1934  * @param       SecurityUse -
// 1935  *
// 1936  * @return      none
// 1937  */
// 1938 void ZDO_FinishProcessingMgmtNwkDiscReq( byte ResultCount,
// 1939                                          networkDesc_t *NetworkList )
// 1940 {
// 1941   byte count;
// 1942 
// 1943 #if defined ( RTR_NWK )
// 1944   networkDesc_t *newDesc, *pList = NetworkList;
// 1945 
// 1946   // Look for my PanID.
// 1947   while ( pList )
// 1948   {
// 1949     if ( pList->panId == _NIB.nwkPanId )
// 1950     {
// 1951       break;
// 1952     }
// 1953 
// 1954     if ( !pList->nextDesc )
// 1955     {
// 1956       break;
// 1957     }
// 1958     pList = pList->nextDesc;
// 1959   }
// 1960 
// 1961   // If my Pan not present (query to a star network ZC or an isolated ZR?),
// 1962   // prepend it.
// 1963   if ( !pList || (pList->panId != _NIB.nwkPanId) )
// 1964   {
// 1965     newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
// 1966     if ( newDesc )
// 1967     {
// 1968       byte pJoin;
// 1969 
// 1970       newDesc->panId = _NIB.nwkPanId;
// 1971       newDesc->logicalChannel = _NIB.nwkLogicalChannel;
// 1972       newDesc->beaconOrder = _NIB.beaconOrder;
// 1973       newDesc->superFrameOrder = _NIB.superFrameOrder;
// 1974       newDesc->version = NLME_GetProtocolVersion();
// 1975       newDesc->stackProfile = zgStackProfile;
// 1976       //Extended PanID
// 1977       osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
// 1978 
// 1979       ZMacGetReq( ZMacAssociationPermit, &pJoin );
// 1980       newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
// 1981                                          INVALID_NODE_ADDR);
// 1982 
// 1983       newDesc->nextDesc = NetworkList;
// 1984       NetworkList = newDesc;
// 1985       ResultCount++;
// 1986     }
// 1987   }
// 1988 #endif
// 1989 
// 1990   // Calc the count and apply a max count.
// 1991   if ( zdappMgmtNwkDiscStartIndex > ResultCount )
// 1992   {
// 1993     count = 0;
// 1994   }
// 1995   else
// 1996   {
// 1997     count = ResultCount - zdappMgmtNwkDiscStartIndex;
// 1998     if ( count > ZDO_MAX_NWKDISC_ITEMS )
// 1999     {
// 2000       count = ZDO_MAX_NWKDISC_ITEMS;
// 2001     }
// 2002 
// 2003     // Move the list pointer up to the start index.
// 2004     NetworkList += zdappMgmtNwkDiscStartIndex;
// 2005   }
// 2006 
// 2007   ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
// 2008                      &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
// 2009                       zdappMgmtNwkDiscStartIndex,
// 2010                       count,
// 2011                       NetworkList,
// 2012                       false );
// 2013 
// 2014 #if defined ( RTR_NWK )
// 2015   if ( newDesc )
// 2016   {
// 2017     osal_mem_free( newDesc );
// 2018   }
// 2019 #endif
// 2020 
// 2021   NLME_NwkDiscTerm();
// 2022 }
// 2023 #endif
// 2024 
// 2025 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
// 2026 /*********************************************************************
// 2027  * @fn          ZDO_ProcessMgmNwkDiscRsp
// 2028  *
// 2029  * @brief       This function handles parsing the incoming Management
// 2030  *              Network Discover response and then generates a callback
// 2031  *              to the ZD application.
// 2032  *
// 2033  * @param       SrcAddr - source of the request
// 2034  * @param       msg - buffer holding incoming message to parse
// 2035  * @param       SecurityUse -
// 2036  *
// 2037  * @return      none
// 2038  */
// 2039 void ZDO_ProcessMgmNwkDiscRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2040 {
// 2041   byte x;
// 2042   byte status;
// 2043   byte networkCount = 0;
// 2044   byte startIndex = 0;
// 2045   byte networkListCount = 0;
// 2046   mgmtNwkDiscItem_t *list = NULL;
// 2047 
// 2048   byte proVer = NLME_GetProtocolVersion();
// 2049 
// 2050   status = *msg++;
// 2051   if ( status == ZSuccess )
// 2052   {
// 2053     networkCount = *msg++;
// 2054     startIndex = *msg++;
// 2055     networkListCount = *msg++;
// 2056 
// 2057     // Allocate a buffer big enough to handle the list.
// 2058     list = (mgmtNwkDiscItem_t *)osal_mem_alloc( networkListCount *
// 2059                                         sizeof( mgmtNwkDiscItem_t ) );
// 2060     if ( list )
// 2061     {
// 2062       mgmtNwkDiscItem_t *pList = list;
// 2063       for ( x = 0; x < networkListCount; x++ )
// 2064       {
// 2065         if ( proVer == ZB_PROT_V1_0 )  //Version 1.0
// 2066         {
// 2067           pList->PANId = BUILD_UINT16( msg[0], msg[1] );
// 2068           msg += 2;
// 2069         }
// 2070         else
// 2071         {
// 2072           osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
// 2073           pList->PANId = BUILD_UINT16( msg[0], msg[1] );
// 2074           msg += Z_EXTADDR_LEN;
// 2075 
// 2076         }
// 2077         pList->logicalChannel = *msg++;
// 2078         pList->stackProfile = (*msg) & 0x0F;
// 2079         pList->version = (*msg++ >> 4) & 0x0F;
// 2080         pList->beaconOrder = (*msg) & 0x0F;
// 2081         pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
// 2082         pList->permitJoining = *msg++;
// 2083         pList++;
// 2084       }
// 2085     }
// 2086   }
// 2087 
// 2088   // Call the callback to the application.
// 2089   ZDApp_MgmtNwkDiscRspCB( SrcAddr->addr.shortAddr, status, networkCount,
// 2090                           startIndex, networkListCount, list );
// 2091 
// 2092   if ( list )
// 2093   {
// 2094     osal_mem_free( list );
// 2095   }
// 2096 }
// 2097 #endif // ZDO_MGMT_NWKDISC_REQUEST
// 2098 
// 2099 #if defined ( ZDO_MGMT_RTG_RESPONSE ) && defined ( RTR_NWK )
// 2100 /*********************************************************************
// 2101  * @fn          ZDO_ProcessMgmtRtgReq
// 2102  *
// 2103  * @brief       This function finishes the processing of the Management
// 2104  *              Routing Request and generates the response.
// 2105  *
// 2106  *   Note:      This function will limit the number of items returned
// 2107  *              to ZDO_MAX_RTG_ITEMS items.
// 2108  *
// 2109  * @param       ResultCountSrcAddr - source of the request
// 2110  * @param       msg - pointer to incoming message
// 2111  * @param       SecurityUse -
// 2112  *
// 2113  * @return      none
// 2114  */
// 2115 void ZDO_ProcessMgmtRtgReq( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
// 2116 {
// 2117   byte x;
// 2118   byte maxNumItems;
// 2119   byte numItems;
// 2120   byte *pBuf;
// 2121   rtgItem_t *pList;
// 2122 
// 2123   // Get the number of table items
// 2124   NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
// 2125 
// 2126   numItems = maxNumItems - StartIndex;    // Start at the passed in index
// 2127 
// 2128   // limit the size of the list
// 2129   if ( numItems > ZDO_MAX_RTG_ITEMS )
// 2130     numItems = ZDO_MAX_RTG_ITEMS;
// 2131 
// 2132   // Allocate the memory to build the table
// 2133   pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
// 2134 
// 2135   if ( pBuf )
// 2136   {
// 2137     // Convert buffer to list
// 2138     pList = (rtgItem_t *)pBuf;
// 2139 
// 2140     // Loop through items and build list
// 2141     for ( x = 0; x < numItems; x++ )
// 2142     {
// 2143       NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
// 2144 
// 2145       // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
// 2146       switch( pList->status )
// 2147       {
// 2148         case RT_ACTIVE:
// 2149           pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
// 2150           break;
// 2151 
// 2152         case RT_DISC:
// 2153           pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
// 2154           break;
// 2155 
// 2156         case RT_LINK_FAIL:
// 2157           pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
// 2158 
// 2159         case RT_INIT:
// 2160         case RT_REPAIR:
// 2161         default:
// 2162           pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
// 2163           break;
// 2164       }
// 2165 
// 2166       // Increment pointer to next record
// 2167       pList++;
// 2168     }
// 2169 
// 2170     // Send response
// 2171     ZDP_MgmtRtgRsp( TransSeq, SrcAddr, ZSuccess, maxNumItems, StartIndex, numItems,
// 2172                           (rtgItem_t *)pBuf, false );
// 2173 
// 2174     osal_mem_free( pBuf );
// 2175   }
// 2176 }
// 2177 #endif // defined(ZDO_MGMT_RTG_RESPONSE)  && defined(RTR_NWK)
// 2178 
// 2179 #if defined ( ZDO_MGMT_RTG_REQUEST )
// 2180 /*********************************************************************
// 2181  * @fn          ZDO_ProcessMgmtRtgRsp
// 2182  *
// 2183  * @brief       This function handles parsing the incoming Management
// 2184  *              Routing response and then generates a callback
// 2185  *              to the ZD application.
// 2186  *
// 2187  * @param       SrcAddr - source of the request
// 2188  * @param       msg - buffer holding incoming message to parse
// 2189  * @param       SecurityUse -
// 2190  *
// 2191  * @return      none
// 2192  */
// 2193 void ZDO_ProcessMgmtRtgRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2194 {
// 2195   byte x;
// 2196   byte status;
// 2197   byte rtgCount = 0;
// 2198   byte startIndex = 0;
// 2199   byte rtgListCount = 0;
// 2200   byte *pBuf = NULL;
// 2201   rtgItem_t *pList = NULL;
// 2202 
// 2203   status = *msg++;
// 2204   if ( status == ZSuccess )
// 2205   {
// 2206     rtgCount = *msg++;
// 2207     startIndex = *msg++;
// 2208     rtgListCount = *msg++;
// 2209 
// 2210     // Allocate a buffer big enough to handle the list
// 2211     pBuf = osal_mem_alloc( rtgListCount * sizeof( rtgItem_t ) );
// 2212     if ( pBuf )
// 2213     {
// 2214       pList = (rtgItem_t *)pBuf;
// 2215       for ( x = 0; x < rtgListCount; x++ )
// 2216       {
// 2217         pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
// 2218         msg += 2;
// 2219         pList->status = *msg++;
// 2220         pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
// 2221         msg += 2;
// 2222         pList++;
// 2223       }
// 2224     }
// 2225   }
// 2226 
// 2227   // Call the callback to the application.
// 2228   ZDApp_MgmtRtgRspCB( SrcAddr->addr.shortAddr, status, rtgCount,
// 2229                                  startIndex, rtgListCount, (rtgItem_t *)pBuf );
// 2230 
// 2231   if ( pBuf )
// 2232   {
// 2233     osal_mem_free( pBuf );
// 2234   }
// 2235 }
// 2236 #endif // ZDO_MGMT_RTG_REQUEST
// 2237 
// 2238 #if defined ( ZDO_MGMT_BIND_RESPONSE )
// 2239 /*********************************************************************
// 2240  * @fn          ZDO_ProcessMgmtBindReq
// 2241  *
// 2242  * @brief       This function finishes the processing of the Management
// 2243  *              Bind Request and generates the response.
// 2244  *
// 2245  *   Note:      This function will limit the number of items returned
// 2246  *              to ZDO_MAX_BIND_ITEMS items.
// 2247  *
// 2248  * @param       ResultCountSrcAddr - source of the request
// 2249  * @param       msg - pointer to incoming message
// 2250  * @param       SecurityUse -
// 2251  *
// 2252  * @return      none
// 2253  */
// 2254 void ZDO_ProcessMgmtBindReq( byte TransSeq, zAddrType_t *SrcAddr, byte StartIndex, byte SecurityUse )
// 2255 {
// 2256 #if defined ( REFLECTOR )
// 2257   byte x;
// 2258   uint16 maxNumItems;
// 2259   uint16 numItems;
// 2260   byte *pBuf = NULL;
// 2261   apsBindingItem_t *pList;
// 2262 
// 2263   // Get the number of table items
// 2264   APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
// 2265 
// 2266   if ( maxNumItems > StartIndex )
// 2267     numItems = maxNumItems - StartIndex;    // Start at the passed in index
// 2268   else
// 2269     numItems = 0;
// 2270 
// 2271   // limit the size of the list
// 2272   if ( numItems > ZDO_MAX_BIND_ITEMS )
// 2273     numItems = ZDO_MAX_BIND_ITEMS;
// 2274 
// 2275   // Allocate the memory to build the table
// 2276   if ( numItems )
// 2277     pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems );
// 2278 
// 2279   if ( pBuf )
// 2280   {
// 2281     // Convert buffer to list
// 2282     pList = (apsBindingItem_t *)pBuf;
// 2283 
// 2284     // Loop through items and build list
// 2285     for ( x = 0; x < numItems; x++ )
// 2286     {
// 2287       APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
// 2288       pList++;
// 2289     }
// 2290   }
// 2291 
// 2292   // Send response
// 2293   ZDP_MgmtBindRsp( TransSeq, SrcAddr, ZSuccess, (byte)maxNumItems, StartIndex, (byte)numItems,
// 2294                         (apsBindingItem_t *)pBuf, false );
// 2295 
// 2296   if ( pBuf )
// 2297   {
// 2298     osal_mem_free( pBuf );
// 2299   }
// 2300 #else  // See if app support is needed
// 2301 
// 2302   ZDApp_MgmtBindReqCB( TransSeq, SrcAddr, StartIndex, SecurityUse );
// 2303 
// 2304 #endif
// 2305 }
// 2306 #endif // ZDO_MGMT_BIND_RESPONSE
// 2307 
// 2308 #if defined ( ZDO_MGMT_BIND_REQUEST )
// 2309 /*********************************************************************
// 2310  * @fn          ZDO_ProcessMgmtBindRsp
// 2311  *
// 2312  * @brief       This function handles parsing the incoming Management
// 2313  *              Binding response and then generates a callback
// 2314  *              to the ZD application.
// 2315  *
// 2316  * @param       SrcAddr - source of the request
// 2317  * @param       msg - buffer holding incoming message to parse
// 2318  * @param       SecurityUse -
// 2319  *
// 2320  * @return      none
// 2321  */
// 2322 void ZDO_ProcessMgmtBindRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2323 {
// 2324   byte x;
// 2325   byte status;
// 2326   byte bindingCount = 0;
// 2327   byte startIndex = 0;
// 2328   byte bindingListCount = 0;
// 2329   byte *pBuf = NULL;
// 2330   apsBindingItem_t *pList = NULL;
// 2331 
// 2332   status = *msg++;
// 2333   if ( status == ZSuccess )
// 2334   {
// 2335     bindingCount = *msg++;
// 2336     startIndex = *msg++;
// 2337     bindingListCount = *msg++;
// 2338 
// 2339     // Allocate a buffer big enough to handle the list
// 2340     if ( bindingListCount )
// 2341       pBuf = osal_mem_alloc( (short)(bindingListCount * sizeof( apsBindingItem_t )) );
// 2342     if ( pBuf )
// 2343     {
// 2344       pList = (apsBindingItem_t *)pBuf;
// 2345       for ( x = 0; x < bindingListCount; x++ )
// 2346       {
// 2347         osal_cpyExtAddr( pList->srcAddr, msg );
// 2348         msg += Z_EXTADDR_LEN;
// 2349         pList->srcEP = *msg++;
// 2350 
// 2351         // Get the Cluster ID
// 2352         if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
// 2353         {
// 2354           pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
// 2355           msg += 2;
// 2356           pList->dstAddr.addrMode = *msg++;
// 2357           if ( pList->dstAddr.addrMode == Addr64Bit )
// 2358           {
// 2359             osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
// 2360             msg += Z_EXTADDR_LEN;
// 2361             pList->dstEP = *msg++;
// 2362           }
// 2363           else
// 2364           {
// 2365             pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
// 2366             msg += 2;
// 2367           }
// 2368         }
// 2369         else
// 2370         {
// 2371           pList->clusterID = *msg++;
// 2372 
// 2373           osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
// 2374           msg += Z_EXTADDR_LEN;
// 2375           pList->dstEP = *msg++;
// 2376         }
// 2377 
// 2378         pList++;
// 2379       }
// 2380     }
// 2381   }
// 2382 
// 2383   // Call the callback to the application
// 2384   ZDApp_MgmtBindRspCB( SrcAddr->addr.shortAddr, status, bindingCount,
// 2385                     startIndex, bindingListCount, (apsBindingItem_t *)pBuf );
// 2386 
// 2387   if ( pBuf )
// 2388       osal_mem_free( pBuf );
// 2389 }
// 2390 #endif // ZDO_MGMT_BIND_REQUEST
// 2391 
// 2392 #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && defined ( RTR_NWK )
// 2393 /*********************************************************************
// 2394  * @fn          ZDO_ProcessMgmtDirectJoinReq
// 2395  *
// 2396  * @brief       This function finishes the processing of the Management
// 2397  *              Direct Join Request and generates the response.
// 2398  *
// 2399  * @param       SrcAddr - source of the request
// 2400  * @param       msg - pointer to incoming message
// 2401  * @param       SecurityUse -
// 2402  *
// 2403  * @return      none
// 2404  */
// 2405 void ZDO_ProcessMgmtDirectJoinReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2406 {
// 2407   byte *deviceAddr;
// 2408   byte capInfo;
// 2409   byte stat;
// 2410 
// 2411   // Parse the message
// 2412   deviceAddr = msg;
// 2413   capInfo = msg[Z_EXTADDR_LEN];
// 2414 
// 2415   stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
// 2416 
// 2417   ZDP_MgmtDirectJoinRsp( TransSeq, SrcAddr, stat, false );
// 2418 }
// 2419 #endif // ZDO_MGMT_JOINDIRECT_RESPONSE && RTR_NWK
// 2420 
// 2421 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
// 2422 /*********************************************************************
// 2423  * @fn          ZDO_ProcessMgmtDirectJoinRsp
// 2424  *
// 2425  * @brief       This function handles parsing the incoming Management
// 2426  *              Direct Join response and then generates a callback
// 2427  *              to the ZD application.
// 2428  *
// 2429  * @param       SrcAddr - source of the request
// 2430  * @param       Status - ZSuccess or other for failure
// 2431  * @param       SecurityUse -
// 2432  *
// 2433  * @return      none
// 2434  */
// 2435 void ZDO_ProcessMgmtDirectJoinRsp( zAddrType_t *SrcAddr, byte Status, byte SecurityUse )
// 2436 {
// 2437   // Call the callback to the application
// 2438   ZDApp_MgmtDirectJoinRspCB( SrcAddr->addr.shortAddr, Status, SecurityUse );
// 2439 }
// 2440 #endif // ZDO_MGMT_JOINDIRECT_REQUEST
// 2441 
// 2442 #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
// 2443 /*********************************************************************
// 2444  * @fn          ZDO_ProcessMgmtLeaveReq
// 2445  *
// 2446  * @brief       This function processes a Management Leave Request
// 2447  *              and generates the response.
// 2448  *
// 2449  * @param       SrcAddr - source of the request
// 2450  * @param       msg - pointer to incoming message
// 2451  * @param       SecurityUse -
// 2452  *
// 2453  * @return      none
// 2454  */
// 2455 void ZDO_ProcessMgmtLeaveReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2456 {
// 2457   NLME_LeaveReq_t req;
// 2458   ZStatus_t       status;
// 2459 
// 2460 
// 2461   if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
// 2462        ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
// 2463   {
// 2464     // Remove this device
// 2465     req.extAddr = NULL;
// 2466   }
// 2467   else
// 2468   {
// 2469     // Remove child device
// 2470     req.extAddr = msg;
// 2471   }
// 2472 
// 2473   req.removeChildren = FALSE;
// 2474   req.rejoin         = FALSE;
// 2475   req.silent         = FALSE;
// 2476 
// 2477   status = NLME_LeaveReq( &req );
// 2478 
// 2479   ZDP_MgmtLeaveRsp( TransSeq, SrcAddr, status, FALSE );
// 2480 }
// 2481 #endif // ZDO_MGMT_LEAVE_RESPONSE
// 2482 
// 2483 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
// 2484 /*********************************************************************
// 2485  * @fn          ZDO_ProcessMgmtLeaveRsp
// 2486  *
// 2487  * @brief       This function handles a Management Leave Response
// 2488  *              and generates a callback to the ZD application.
// 2489  *
// 2490  * @param       SrcAddr - source of the request
// 2491  * @param       Status - ZSuccess or other for failure
// 2492  * @param       SecurityUse -
// 2493  *
// 2494  * @return      none
// 2495  */
// 2496 void ZDO_ProcessMgmtLeaveRsp( zAddrType_t *SrcAddr, byte Status, byte SecurityUse )
// 2497 {
// 2498   // Call the callback to the application
// 2499   ZDApp_MgmtLeaveRspCB( SrcAddr->addr.shortAddr, Status, SecurityUse );
// 2500 }
// 2501 #endif // ZDO_MGMT_LEAVE_REQUEST
// 2502 
// 2503 #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE ) && defined( RTR_NWK )
// 2504 /*********************************************************************
// 2505  * @fn          ZDO_ProcessMgmtPermitJoinReq
// 2506  *
// 2507  * @brief       This function processes a Management Permit Join Request
// 2508  *              and generates the response.
// 2509  *
// 2510  * @param       SrcAddr - source of the request
// 2511  * @param       msg - pointer to incoming message
// 2512  * @param       SecurityUse -
// 2513  *
// 2514  * @return      none
// 2515  */
// 2516 void ZDO_ProcessMgmtPermitJoinReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg,
// 2517                                    byte SecurityUse )
// 2518 {
// 2519   uint8 stat;
// 2520   uint8 duration;
// 2521   uint8 tcsig;
// 2522 
// 2523 
// 2524   duration = msg[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
// 2525   tcsig    = msg[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
// 2526 
// 2527   // Set the network layer permit join duration
// 2528   stat = (byte) NLME_PermitJoiningRequest( duration );
// 2529 
// 2530   // Handle the Trust Center Significance
// 2531   if ( tcsig == TRUE )
// 2532   {
// 2533     ZDSecMgrPermitJoining( duration );
// 2534   }
// 2535 
// 2536   // Send a response if unicast
// 2537   if (SrcAddr->addr.shortAddr != NWK_BROADCAST_SHORTADDR)
// 2538   {
// 2539     ZDP_MgmtPermitJoinRsp( TransSeq, SrcAddr, stat, false );
// 2540   }
// 2541 }
// 2542 #endif // ZDO_MGMT_PERMIT_JOIN_RESPONSE && defined( RTR_NWK )
// 2543 
// 2544 /*
// 2545  * This function stub allows the next higher layer to be notified of
// 2546  * a permit joining timeout.
// 2547  */
// 2548 #if defined( RTR_NWK )
// 2549 /*********************************************************************
// 2550  * @fn          ZDO_ProcessMgmtPermitJoinTimeout
// 2551  *
// 2552  * @brief       This function stub allows the next higher layer to be
// 2553  *              notified of a permit joining timeout. Currently, this
// 2554  *              directly bypasses the APS layer.
// 2555  *
// 2556  * @param       none
// 2557  *
// 2558  * @return      none
// 2559  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2560 void ZDO_ProcessMgmtPermitJoinTimeout( void )
NLME_PermitJoiningTimeout:
        CFI Block cfiBlock127 Using cfiCommon0
        CFI Function NLME_PermitJoiningTimeout
// 2561 {
        ; Saved register size: 0
        ; Auto size: 0
// 2562   #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
// 2563   {
// 2564     // Currently, only the ZDSecMgr needs to be notified
// 2565     ZDSecMgrPermitJoiningTimeout();
// 2566   }
// 2567   #endif
// 2568 }
        LJMP	?BRET
        CFI EndBlock cfiBlock127

        RSEG XDATA_I:XDATA:NOROOT(0)
__Constant_0:
        DS 4
        REQUIRE `?<Initializer for __Constant_0>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for __Constant_0>`:
        DD 0

        END
// 2569 #endif // defined( RTR_NWK )
// 2570 
// 2571 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
// 2572 /*********************************************************************
// 2573  * @fn          ZDO_ProcessMgmtPermitJoinRsp
// 2574  *
// 2575  * @brief       This function handles a Management Permit Join Response
// 2576  *              and generates a callback to the ZD application.
// 2577  *
// 2578  * @param       SrcAddr - source of the request
// 2579  * @param       Status - ZSuccess or other for failure
// 2580  * @param       SecurityUse -
// 2581  *
// 2582  * @return      none
// 2583  */
// 2584 void ZDO_ProcessMgmtPermitJoinRsp( zAddrType_t *SrcAddr, byte Status, byte SecurityUse )
// 2585 {
// 2586   // Call the callback to the application
// 2587   ZDApp_MgmtPermitJoinRspCB( SrcAddr->addr.shortAddr, Status, SecurityUse );
// 2588 }
// 2589 #endif // ZDO_MGMT_PERMIT_JOIN_REQUEST
// 2590 
// 2591 #if defined ( ZDO_USERDESC_REQUEST )
// 2592 /*********************************************************************
// 2593  * @fn          ZDO_ProcessUserDescRsp
// 2594  *
// 2595  * @brief       This function handles parsing the incoming User
// 2596  *              Descriptor Response and then generates a callback
// 2597  *              to the ZD application.
// 2598  *
// 2599  * @param       SrcAddr - source of the request
// 2600  * @param       msg - incoming response message
// 2601  * @param       SecurityUse -
// 2602  *
// 2603  * @return      none
// 2604  */
// 2605 void ZDO_ProcessUserDescRsp( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2606 {
// 2607   ZDApp_UserDescRspCB( SrcAddr->addr.shortAddr,
// 2608                       msg[0],                           // Status
// 2609                       BUILD_UINT16( msg[1], msg[2] ),   // NWKAddrOfInterest
// 2610                       msg[3],                           // Length
// 2611                       &msg[4],                          // User Descriptor
// 2612                       SecurityUse );
// 2613 }
// 2614 #endif // ZDO_USERDESC_REQUEST
// 2615 
// 2616 #if defined ( ZDO_USERDESC_RESPONSE )
// 2617 /*********************************************************************
// 2618  * @fn          ZDO_ProcessUserDescReq
// 2619  *
// 2620  * @brief       This function finishes the processing of the User
// 2621  *              Descriptor Request and generates the response.
// 2622  *
// 2623  * @param       SrcAddr - source of the request
// 2624  * @param       msg - pointer to incoming message
// 2625  * @param       SecurityUse -
// 2626  *
// 2627  * @return      none
// 2628  */
// 2629 void ZDO_ProcessUserDescReq( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2630 {
// 2631   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
// 2632   UserDescriptorFormat_t userDesc;
// 2633 
// 2634   if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
// 2635              ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
// 2636   {
// 2637     ZDP_UserDescRsp( TransSeq, SrcAddr, aoi, &userDesc, false );
// 2638   }
// 2639   else
// 2640   {
// 2641 #if defined( ZDO_CACHE )
// 2642     (void)aoi;
// 2643 #else
// 2644     ZDP_GenericRsp(
// 2645        TransSeq, SrcAddr, ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, SecurityUse );
// 2646 #endif
// 2647   }
// 2648 }
// 2649 #endif // ZDO_USERDESC_RESPONSE
// 2650 
// 2651 #if defined ( ZDO_USERDESCSET_REQUEST )
// 2652 /*********************************************************************
// 2653  * @fn          ZDO_ProcessUserDescConf
// 2654  *
// 2655  * @brief       This function handles parsing the incoming User
// 2656  *              Descriptor Confirm and then generates a callback
// 2657  *              to the ZD application.
// 2658  *
// 2659  * @param       SrcAddr - source of the request
// 2660  * @param       msg - incoming response message
// 2661  * @param       SecurityUse -
// 2662  *
// 2663  * @return      none
// 2664  */
// 2665 void ZDO_ProcessUserDescConf( zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2666 {
// 2667   ZDApp_UserDescConfCB( SrcAddr->addr.shortAddr,
// 2668                         msg[0],                           // Status
// 2669                         SecurityUse );
// 2670 }
// 2671 #endif // ZDO_USERDESCSET_REQUEST
// 2672 
// 2673 
// 2674 #if defined ( ZDO_USERDESCSET_RESPONSE )
// 2675 /*********************************************************************
// 2676  * @fn          ZDO_ProcessUserDescSet
// 2677  *
// 2678  * @brief       This function finishes the processing of the User
// 2679  *              Descriptor Set and generates the response.
// 2680  *
// 2681  * @param       SrcAddr - source of the request
// 2682  * @param       msg - pointer to incoming message
// 2683  * @param       SecurityUse -
// 2684  *
// 2685  * @return      none
// 2686  */
// 2687 void ZDO_ProcessUserDescSet( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2688 {
// 2689   uint16 aoi = BUILD_UINT16( msg[0], msg[1] );
// 2690   UserDescriptorFormat_t userDesc;
// 2691   uint8 outMsg[3];
// 2692   uint8 status;
// 2693   uint16 nai;
// 2694 
// 2695   nai = BUILD_UINT16( msg[0], msg[1] );
// 2696 
// 2697   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
// 2698   {
// 2699     if ( NLME_GetProtocolVersion() == ZB_PROT_V1_0 )
// 2700       userDesc.len = AF_MAX_USER_DESCRIPTOR_LEN;
// 2701     else
// 2702     {
// 2703       userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
// 2704       msg ++;  // increment one for the length field
// 2705     }
// 2706     osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
// 2707     osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
// 2708     if ( userDesc.len != 0 )
// 2709     {
// 2710       ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
// 2711     }
// 2712     else
// 2713     {
// 2714       ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
// 2715     }
// 2716 
// 2717     status = ZDP_SUCCESS;
// 2718   }
// 2719   else
// 2720   {
// 2721     status =  ZDP_NOT_SUPPORTED;
// 2722   }
// 2723 
// 2724   outMsg[0] = status;
// 2725   outMsg[1] = LO_UINT16( nai );
// 2726   outMsg[2] = LO_UINT16( nai );
// 2727 
// 2728   ZDP_SendData( &TransSeq, SrcAddr, User_Desc_conf, 3, outMsg, SecurityUse );
// 2729 }
// 2730 #endif // ZDO_USERDESCSET_RESPONSE
// 2731 
// 2732 #if defined ( ZDO_ENDDEVICE_ANNCE ) && defined(RTR_NWK)
// 2733 /*********************************************************************
// 2734  * @fn          ZDO_ProcessEndDeviceAnnce
// 2735  *
// 2736  * @brief       This function processes an end device annouce message.
// 2737  *
// 2738  * @param       SrcAddr - source of the request
// 2739  * @param       msg - pointer to incoming message
// 2740  * @param       SecurityUse -
// 2741  *
// 2742  * @return      none
// 2743  */
// 2744 void ZDO_ProcessEndDeviceAnnce( byte TransSeq, zAddrType_t *SrcAddr, byte *msg, byte SecurityUse )
// 2745 {
// 2746   uint16 nwkAddr;
// 2747   associated_devices_t *dev;
// 2748   AddrMgrEntry_t addrEntry;
// 2749   uint8 *ieeeAddr;
// 2750   uint8 capabilities;
// 2751 
// 2752   // Parse incoming message
// 2753   nwkAddr = BUILD_UINT16( msg[0], msg[1] );
// 2754   msg += 2;
// 2755   ieeeAddr = msg;
// 2756   msg += Z_EXTADDR_LEN;
// 2757   if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
// 2758   {
// 2759     capabilities = *msg;
// 2760   }
// 2761   else
// 2762   {
// 2763     capabilities = 0;
// 2764   }
// 2765 
// 2766   addrEntry.user = ADDRMGR_USER_DEFAULT;
// 2767   addrEntry.nwkAddr = nwkAddr;
// 2768   AddrMgrExtAddrSet( addrEntry.extAddr, ieeeAddr );
// 2769   AddrMgrEntryUpdate( &addrEntry );
// 2770 
// 2771   // find device in device list
// 2772   dev = AssocGetWithExt( ieeeAddr );
// 2773   if ( dev != NULL )
// 2774   {
// 2775     // if found and address is different
// 2776     if ( dev->shortAddr != nwkAddr )
// 2777     {
// 2778       // update device list if device is (was) not our child
// 2779       if ( dev->nodeRelation == NEIGHBOR || dev->nodeRelation == OTHER )
// 2780       {
// 2781         dev->shortAddr = nwkAddr;
// 2782       }
// 2783     }
// 2784   }
// 2785 
// 2786   // Application notification
// 2787   ZDApp_EndDeviceAnnounceCB( SrcAddr->addr.shortAddr, nwkAddr, ieeeAddr, capabilities );
// 2788 }
// 2789 #endif // ZDO_ENDDEVICE_ANNCE
// 2790 
// 2791 #if defined( ZDO_SIMPLEDESC_REQUEST ) || ( defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 ) )
// 2792 /*********************************************************************
// 2793  * @fn          ZDO_BuildSimpleDescBuf
// 2794  *
// 2795  * @brief       Build a byte sequence representation of a Simple Descriptor.
// 2796  *
// 2797  * @param       buf  - pointer to a byte array big enough for data.
// 2798  * @param       desc - SimpleDescriptionFormat_t *
// 2799  *
// 2800  * @return      none
// 2801  */
// 2802 void ZDO_BuildSimpleDescBuf( byte *buf, SimpleDescriptionFormat_t *desc )
// 2803 {
// 2804   byte proVer = NLME_GetProtocolVersion();
// 2805   byte cnt;
// 2806   uint16 *ptr;
// 2807 
// 2808   *buf++ = desc->EndPoint;
// 2809   *buf++ = HI_UINT16( desc->AppProfId );
// 2810   *buf++ = LO_UINT16( desc->AppProfId );
// 2811   *buf++ = HI_UINT16( desc->AppDeviceId );
// 2812   *buf++ = LO_UINT16( desc->AppDeviceId );
// 2813 
// 2814   if ( proVer == ZB_PROT_V1_0 )
// 2815   {
// 2816     *buf++ = (byte)((desc->AppDevVer << 4) | (desc->Reserved));
// 2817   }
// 2818   else
// 2819   {
// 2820     *buf++ = (byte)(desc->AppDevVer << 4);
// 2821   }
// 2822 
// 2823   *buf++ = desc->AppNumInClusters;
// 2824   ptr = desc->pAppInClusterList;
// 2825   for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
// 2826   {
// 2827     *buf++ = HI_UINT16( *ptr );
// 2828     *buf++ = LO_UINT16( *ptr );
// 2829   }
// 2830 
// 2831   *buf++ = desc->AppNumOutClusters;
// 2832   ptr = desc->pAppOutClusterList;
// 2833   for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
// 2834   {
// 2835     *buf++ = HI_UINT16( *ptr );
// 2836     *buf++ = LO_UINT16( *ptr );
// 2837   }
// 2838 }
// 2839 
// 2840 /*********************************************************************
// 2841  * @fn          ZDO_ParseSimpleDescBuf
// 2842  *
// 2843  * @brief       Parse a byte sequence representation of a Simple Descriptor.
// 2844  *
// 2845  * @param       buf  - pointer to a byte array representing a Simple Desc.
// 2846  * @param       desc - SimpleDescriptionFormat_t *
// 2847  *
// 2848  *              This routine allocates storage for the cluster IDs because
// 2849  *              they are 16-bit and need to be aligned to be properly processed.
// 2850  *              This routine returns non-zero if an allocation fails.
// 2851  *
// 2852  *              NOTE: This means that the caller or user of the input structure
// 2853  *                    is responsible for freeing the memory
// 2854  *
// 2855  * @return      0: success
// 2856  *              1: failure due to malloc failure.
// 2857  */
// 2858 uint8 ZDO_ParseSimpleDescBuf( byte *buf, SimpleDescriptionFormat_t *desc )
// 2859 {
// 2860   byte proVer = NLME_GetProtocolVersion();
// 2861   uint8 num, i;
// 2862 
// 2863   desc->EndPoint = *buf++;
// 2864   desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
// 2865   buf += 2;
// 2866   desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
// 2867   buf += 2;
// 2868   desc->AppDevVer = *buf >> 4;
// 2869 
// 2870   if ( proVer == ZB_PROT_V1_0 )
// 2871   {
// 2872     desc->Reserved = *buf++ &0x0F;
// 2873   }
// 2874   else
// 2875   {
// 2876     desc->Reserved = 0;
// 2877     buf++;
// 2878   }
// 2879 
// 2880   // move in input cluster list (if any). allocate aligned memory.
// 2881   num = desc->AppNumInClusters = *buf++;
// 2882   if (num)  {
// 2883     if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))  {
// 2884       // malloc failed. we're done.
// 2885       return 1;
// 2886     }
// 2887     for (i=0; i<num; ++i)  {
// 2888       desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
// 2889       buf += 2;
// 2890     }
// 2891   }
// 2892 
// 2893   // move in output cluster list (if any). allocate aligned memory.
// 2894   num = desc->AppNumOutClusters = *buf++;
// 2895   if (num)  {
// 2896     if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))  {
// 2897       // malloc failed. free input cluster list memory if there is any
// 2898       if (desc->pAppInClusterList)  {
// 2899         osal_mem_free(desc->pAppInClusterList);
// 2900       }
// 2901       return 1;
// 2902     }
// 2903     for (i=0; i<num; ++i)  {
// 2904       desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
// 2905       buf += 2;
// 2906     }
// 2907   }
// 2908   return 0;
// 2909 }
// 2910 #endif
// 2911 
// 2912 #if defined ( ZDO_COORDINATOR )
// 2913 /*********************************************************************
// 2914  * @fn      ZDO_MatchEndDeviceBind()
// 2915  *
// 2916  * @brief
// 2917  *
// 2918  *   Called to match end device binding requests
// 2919  *
// 2920  * @param  bindReq  - binding request information
// 2921  * @param  SecurityUse - Security enable/disable
// 2922  *
// 2923  * @return  none
// 2924  */
// 2925 void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
// 2926 {
// 2927   zAddrType_t dstAddr;
// 2928   uint8 sendRsp = FALSE;
// 2929   uint8 status;
// 2930 
// 2931   // Is this the first request?
// 2932   if ( matchED == NULL )
// 2933   {
// 2934     // Create match info structure
// 2935     matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
// 2936     if ( matchED )
// 2937     {
// 2938       // Clear the structure
// 2939       osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
// 2940 
// 2941       // Copy the first request's information
// 2942       if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
// 2943       {
// 2944 
// 2945         status = ZDP_NO_ENTRY;
// 2946         sendRsp = TRUE;
// 2947       }
// 2948     }
// 2949     else
// 2950     {
// 2951       status = ZDP_NO_ENTRY;
// 2952       sendRsp = TRUE;
// 2953     }
// 2954 
// 2955     if ( !sendRsp )
// 2956     {
// 2957       // Set into the correct state
// 2958       matchED->state = ZDMATCH_WAIT_REQ;
// 2959 
// 2960       // Setup the timeout
// 2961       APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
// 2962     }
// 2963   }
// 2964   else
// 2965   {
// 2966       matchED->state = ZDMATCH_SENDING_BINDS;
// 2967 
// 2968       // Copy the 2nd request's information
// 2969       if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
// 2970       {
// 2971         status = ZDP_NO_ENTRY;
// 2972         sendRsp = TRUE;
// 2973       }
// 2974 
// 2975       // Make a source match for ed1
// 2976       matchED->ed1numMatched = ZDO_CompareClusterLists(
// 2977                   matchED->ed1.numOutClusters, matchED->ed1.outClusters,
// 2978                   matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
// 2979       if ( matchED->ed1numMatched )
// 2980       {
// 2981         // Save the match list
// 2982         matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
// 2983         if ( matchED->ed1Matched )
// 2984         {
// 2985           osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
// 2986         }
// 2987         else
// 2988         {
// 2989           // Allocation error, stop
// 2990           status = ZDP_NO_ENTRY;
// 2991           sendRsp = TRUE;
// 2992         }
// 2993       }
// 2994 
// 2995       // Make a source match for ed2
// 2996       matchED->ed2numMatched = ZDO_CompareClusterLists(
// 2997                   matchED->ed2.numOutClusters, matchED->ed2.outClusters,
// 2998                   matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
// 2999       if ( matchED->ed2numMatched )
// 3000       {
// 3001         // Save the match list
// 3002         matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
// 3003         if ( matchED->ed2Matched )
// 3004         {
// 3005           osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
// 3006         }
// 3007         else
// 3008         {
// 3009           // Allocation error, stop
// 3010           status = ZDP_NO_ENTRY;
// 3011           sendRsp = TRUE;
// 3012         }
// 3013       }
// 3014 
// 3015       if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
// 3016       {
// 3017         // Do the first unbind/bind state
// 3018         ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
// 3019       }
// 3020       else
// 3021       {
// 3022         status = ZDP_NO_MATCH;
// 3023         sendRsp = TRUE;
// 3024       }
// 3025   }
// 3026 
// 3027   if ( sendRsp )
// 3028   {
// 3029     // send response to this requester
// 3030     dstAddr.addrMode = Addr16Bit;
// 3031     dstAddr.addr.shortAddr = bindReq->srcAddr;
// 3032     ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
// 3033 
// 3034     if ( matchED->state == ZDMATCH_SENDING_BINDS )
// 3035     {
// 3036       // send response to first requester
// 3037       dstAddr.addrMode = Addr16Bit;
// 3038       dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
// 3039       ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
// 3040     }
// 3041 
// 3042     // Process ended - release memory used
// 3043     ZDO_RemoveMatchMemory();
// 3044   }
// 3045 }
// 3046 
// 3047 static void ZDO_RemoveMatchMemory( void )
// 3048 {
// 3049   if ( matchED )
// 3050   {
// 3051     if ( matchED->ed2Matched )
// 3052       osal_mem_free( matchED->ed2Matched );
// 3053     if ( matchED->ed1Matched )
// 3054       osal_mem_free( matchED->ed1Matched );
// 3055 
// 3056     if ( matchED->ed1.inClusters )
// 3057       osal_mem_free( matchED->ed1.inClusters );
// 3058 
// 3059     if ( matchED->ed1.outClusters )
// 3060       osal_mem_free( matchED->ed1.outClusters );
// 3061 
// 3062     if ( matchED->ed2.inClusters )
// 3063       osal_mem_free( matchED->ed2.inClusters );
// 3064 
// 3065     if ( matchED->ed2.outClusters )
// 3066       osal_mem_free( matchED->ed2.outClusters );
// 3067 
// 3068     osal_mem_free( matchED );
// 3069 
// 3070     matchED = (ZDMatchEndDeviceBind_t *)NULL;
// 3071   }
// 3072 }
// 3073 
// 3074 static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
// 3075 {
// 3076   uint8 allOK = TRUE;
// 3077 
// 3078   // Copy bind information into the match info structure
// 3079   osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
// 3080 
// 3081   // Copy input cluster IDs
// 3082   if ( srcReq->numInClusters )
// 3083   {
// 3084     destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
// 3085     if ( destReq->inClusters )
// 3086     {
// 3087       // Copy the clusters
// 3088       osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
// 3089                       (srcReq->numInClusters * sizeof ( uint16 )) );
// 3090     }
// 3091     else
// 3092       allOK = FALSE;
// 3093   }
// 3094 
// 3095   // Copy output cluster IDs
// 3096   if ( srcReq->numOutClusters )
// 3097   {
// 3098     destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
// 3099     if ( destReq->outClusters )
// 3100     {
// 3101       // Copy the clusters
// 3102       osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
// 3103                       (srcReq->numOutClusters * sizeof ( uint16 )) );
// 3104     }
// 3105     else
// 3106       allOK = FALSE;
// 3107   }
// 3108 
// 3109   if ( !allOK )
// 3110   {
// 3111     if ( destReq->inClusters )
// 3112       osal_mem_free( destReq->inClusters );
// 3113     if ( destReq->outClusters )
// 3114       osal_mem_free( destReq->outClusters );
// 3115   }
// 3116 
// 3117   return ( allOK );
// 3118 }
// 3119 
// 3120 static uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
// 3121 {
// 3122   uint8 *dstIEEEAddr;
// 3123   uint8 dstEP;
// 3124   zAddrType_t dstAddr;
// 3125   zAddrType_t destinationAddr;
// 3126   uint16 msgType;
// 3127   uint16 clusterID;
// 3128   ZDEndDeviceBind_t *ed = NULL;
// 3129   uint8 rspStatus = ZDP_SUCCESS;
// 3130 
// 3131   if ( matchED == NULL )
// 3132     return ( FALSE );
// 3133 
// 3134   // Check sequence number
// 3135   if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
// 3136   {
// 3137     if ( TransSeq != matchED->transSeq )
// 3138       return( FALSE ); // ignore the message
// 3139   }
// 3140 
// 3141   // turn off timer
// 3142   APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
// 3143 
// 3144   if ( reason == ZDMATCH_REASON_TIMEOUT )
// 3145   {
// 3146     rspStatus = ZDP_TIMEOUT;    // The process will stop
// 3147   }
// 3148 
// 3149   if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
// 3150   {
// 3151     matchED->sending = ZDMATCH_SENDING_UNBIND;
// 3152 
// 3153     if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
// 3154     {
// 3155       rspStatus = status;
// 3156     }
// 3157   }
// 3158   else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
// 3159   {
// 3160     if ( status == ZDP_SUCCESS )
// 3161     {
// 3162       matchED->sending = ZDMATCH_SENDING_UNBIND;
// 3163     }
// 3164     else
// 3165     {
// 3166       matchED->sending = ZDMATCH_SENDING_BIND;
// 3167     }
// 3168   }
// 3169 
// 3170   if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
// 3171   {
// 3172     // Move to the next cluster ID
// 3173     if ( matchED->ed1numMatched )
// 3174       matchED->ed1numMatched--;
// 3175     else if ( matchED->ed2numMatched )
// 3176       matchED->ed2numMatched--;
// 3177   }
// 3178 
// 3179   // What message do we send now
// 3180   if ( matchED->ed1numMatched )
// 3181   {
// 3182     ed = &(matchED->ed1);
// 3183     clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
// 3184     dstIEEEAddr = matchED->ed2.ieeeAddr;
// 3185     dstEP = matchED->ed2.endpoint;
// 3186   }
// 3187   else if ( matchED->ed2numMatched )
// 3188   {
// 3189     ed = &(matchED->ed2);
// 3190     clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
// 3191     dstIEEEAddr = matchED->ed1.ieeeAddr;
// 3192     dstEP = matchED->ed1.endpoint;
// 3193   }
// 3194 
// 3195   dstAddr.addrMode = Addr16Bit;
// 3196 
// 3197   // Send the next message
// 3198   if ( rspStatus == ZDP_SUCCESS && ed )
// 3199   {
// 3200     // Send unbind/bind message to source
// 3201     if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
// 3202       msgType = Unbind_req;
// 3203     else
// 3204       msgType = Bind_req;
// 3205 
// 3206     dstAddr.addr.shortAddr = ed->srcAddr;
// 3207 
// 3208     // Save off the transaction sequence number
// 3209     matchED->transSeq = ZDP_TransID;
// 3210 
// 3211     destinationAddr.addrMode = Addr64Bit;
// 3212     osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
// 3213 
// 3214     ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
// 3215         &destinationAddr, dstEP, ed->SecurityUse );
// 3216 
// 3217     // Set timeout for response
// 3218     APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
// 3219   }
// 3220   else
// 3221   {
// 3222     // Send the response messages to requesting devices
// 3223     // send response to first requester
// 3224     dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
// 3225     ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
// 3226 
// 3227     // send response to second requester
// 3228     if ( matchED->state == ZDMATCH_SENDING_BINDS )
// 3229     {
// 3230       dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
// 3231       ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
// 3232     }
// 3233 
// 3234     // Process ended - release memory used
// 3235     ZDO_RemoveMatchMemory();
// 3236   }
// 3237 
// 3238   return ( TRUE );
// 3239 }
// 3240 
// 3241 static void ZDO_EndDeviceBindMatchTimeoutCB( void )
// 3242 {
// 3243   ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
// 3244 }
// 3245 
// 3246 #endif // ZDO_COORDINATOR
// 3247 
// 3248 /*********************************************************************
// 3249 *********************************************************************/
// 3250 
// 3251 
// 
// 2 632 bytes in segment BANKED_CODE
//     4 bytes in segment XDATA_I
//     4 bytes in segment XDATA_ID
//    52 bytes in segment XDATA_Z
// 
// 2 632 bytes of CODE  memory (+ 4 bytes shared)
//    52 bytes of XDATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
