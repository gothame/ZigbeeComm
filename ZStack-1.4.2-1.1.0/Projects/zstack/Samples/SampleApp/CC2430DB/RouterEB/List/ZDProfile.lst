##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   24/Jan/2013  14:47:50 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\stack\zdo\ZDProfile.c                           #
#    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8 #
#                          wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR          #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DRTR_NWK -DBLINK_LEDS "-DCONST=const __code"  #
#                          -DGENERIC=__generic) -f                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCo #
#                          nfig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x0000080 #
#                          0 -DZDAPP_CONFIG_PAN_ID=0xFFFF                    #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\ -I                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\Source\ -I                 #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt\ #
#                           -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ #
#                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee200 #
#                          6-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2430DB\..\..\..\..\..\Components #
#                          \hal\include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª· #
#                          ¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 #
#                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ #
#                          ..\Components\hal\target\CC2430EB\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\osa #
#                          l\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ #
#                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 #
#                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Project #
#                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. #
#                          .\Components\osal\include\ -I                     #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\Î #
#                          ÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zig #
#                          Bee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zsta #
#                          ck\Samples\SampleApp\CC2430DB\..\..\..\..\..\Comp #
#                          onents\stack\nwk\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\sys\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ #
#                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zi #
#                          gBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Com #
#                          ponents\stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\zmac\f8w\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍ #
#                          øÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2 #
#                          006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁ #
#                          Ï\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ #
#                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\mac\high_level\ -I                      #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \low_level\srf03\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf03\single_chip #
#                          \ -D CC2430EB -D ZTOOL_P1 -D MT_TASK -lC          #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\ -lA            #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\RouterEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\stack\zdo\ZDProfile.c"                         #
#    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\ZDProfile.lst   #
#    Object file        =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\Obj\ZDProfile.r51    #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\zdo\ZDProfile.c
      1          /*********************************************************************
      2              Filename:       ZDProfile.c
      3              Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
      4              Revision:       $Revision: 14296 $
      5          
      6              Description:
      7          
      8                This Zigbee Device Profile.
      9          
     10              Notes:
     11          
     12              Copyright (c) 2006 by Texas Instruments, Inc.
     13              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     14              derivative works, modify, distribute, perform, display or sell this
     15              software and/or its documentation for any purpose is prohibited
     16              without the express written consent of Texas Instruments, Inc.
     17          *********************************************************************/
     18          
     19          /*********************************************************************
     20           * INCLUDES
     21           */
     22          #include "ZComdef.h"
     23          #include "OSAL.h"
     24          #include "AF.h"
     25          #include "NLMEDE.h"
     26          #include "nwk_util.h"
     27          #include "APS.h"
     28          
     29          #include "ZDCache.h"
     30          #include "ZDConfig.h"
     31          #include "ZDProfile.h"
     32          #include "ZDObject.h"
     33          #include "nwk_util.h"
     34          
     35          /*********************************************************************
     36           * MACROS
     37           */
     38          
     39          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     40            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     41            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     42            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     43          }
     44          
     45          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     46            afStatus_t stat;                                    \
     47            ZDP_TmpBuf = (BUF)+1;                               \
     48            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     49            ZDP_TmpBuf = ZDP_Buf+1;                             \
     50            return stat;                                        \
     51          }
     52          
     53          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     54            afStatus_t stat;                                    \
     55            ZDP_TxOptions = (TxO);                              \
     56            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     57            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     58            return stat;                                        \
     59          }
     60          
     61          /*********************************************************************
     62           * CONSTANTS
     63           */
     64          
     65          #define ZDP_BUF_SZ          80
     66          

   \                                 In segment CODE_C, align 1
     67          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
     68          
     69          /*********************************************************************
     70           * TYPEDEFS
     71           */
     72          
     73          /*********************************************************************
     74           * GLOBAL VARIABLES
     75           */
     76          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     77          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
     78          
     79          /*********************************************************************
     80           * EXTERNAL VARIABLES
     81           */
     82          
     83          extern endPointDesc_t ZDApp_epDesc;
     84          
     85          /*********************************************************************
     86           * EXTERNAL FUNCTIONS
     87           */
     88          
     89          /*********************************************************************
     90           * LOCAL FUNCTIONS
     91           */
     92          
     93          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
     94          
     95          /*********************************************************************
     96           * LOCAL VARIABLES
     97           */
     98          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     99          static byte  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ??ZDP_Buf:
   \   000000                DS 80

   \                                 In segment XDATA_I, align 1, keep-with-next
    100          static byte *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ??ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    101          static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ??ZDP_TxOptions:
   \   000000                DS 1
    102          
    103          /*********************************************************************
    104           * @fn          fillAndSend
    105           *
    106           * @brief       Combined to reduce space
    107           *
    108           * @param
    109           * @param
    110           *
    111           * @return      afStatus_t
    112           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    113          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     ??fillAndSend:
    114          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   7413         MOV     A,#0x13
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine31 & 0xFFFF
    115          #if ( AF_V1_SUPPORT )
    116          
    117            byte proVer = NLME_GetProtocolVersion();
    118          #endif
    119            afAddrType_t afAddr;
    120          
    121            ZADDR_TO_AFADDR( addr, afAddr );
   \                     ??CrossCallReturnLabel_69:
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   8C82         MOV     DPL,R4
   \   00001F   8D83         MOV     DPH,R5
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C0E0         PUSH    A
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   8C82         MOV     DPL,R4
   \   000036   8D83         MOV     DPH,R5
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FB           MOV     R3,A
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   EA           MOV     A,R2
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   EB           MOV     A,R3
   \   000047   F0           MOVX    @DPTR,A
    122          
    123          #if ( AF_V1_SUPPORT )
    124            if ( proVer == ZB_PROT_V1_0 )
    125            {
    126              return ( afFillAndSendMessage( &afAddr, ZDP_AF_ENDPOINT, clusterID,
    127                         1, FRAMETYPE_MSG, transSeq,
    128                         NULL, NULL, NULL, NULL, len, ZDP_TmpBuf,
    129                         ZDP_TxOptions, FALSE, AF_DEFAULT_RADIUS ) );
    130            }
    131            else
    132          #endif
    133            {
    134              *(ZDP_TmpBuf-1) = *transSeq;
   \   000048   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   24FF         ADD     A,#-0x1
   \   00004E   F5..         MOV     ?V0 + 4,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   34FF         ADDC    A,#-0x1
   \   000054   F5..         MOV     ?V0 + 5,A
   \   000056   85..82       MOV     DPL,?V0 + 0
   \   000059   85..83       MOV     DPH,?V0 + 1
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   85..82       MOV     DPL,?V0 + 4
   \   000060   85..83       MOV     DPH,?V0 + 5
   \   000063   F0           MOVX    @DPTR,A
    135          
    136              return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    137                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    138                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000064                ; Setup parameters for call to function AF_DataRequest
   \   000064   75..0A       MOV     ?V0 + 6,#0xa
   \   000067   78..         MOV     R0,#?V0 + 6
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   89..         MOV     ?V0 + 0,R1
   \   000078   7401         MOV     A,#0x1
   \   00007A   25..         ADD     A,?V0 + 0
   \   00007C   F5..         MOV     ?V0 + 0,A
   \   00007E   E4           CLR     A
   \   00007F   3400         ADDC    A,#0x0
   \   000081   F5..         MOV     ?V0 + 1,A
   \   000083   78..         MOV     R0,#?V0 + 0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   78..         MOV     R0,#?V0 + 2
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   90....       MOV     DPTR,#??ZDP_TxOptions
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   7C..         MOV     R4,#(ZDApp_epDesc & 0xff)
   \   000094   7D..         MOV     R5,#((ZDApp_epDesc >> 8) & 0xff)
   \   000096   7409         MOV     A,#0x9
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   AA82         MOV     R2,DPL
   \   00009D   AB83         MOV     R3,DPH
   \   00009F   90....       MOV     DPTR,#(AF_DataRequest & 0xffff)
   \   0000A2   74..         MOV     A,#((AF_DataRequest >> 16) & 0xff)
   \   0000A4   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000A7   7409         MOV     A,#0x9
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AC   7404         MOV     A,#0x4
   \   0000AE                REQUIRE ?Subroutine44
   \   0000AE                ; // Fall through to label ?Subroutine44
    139            }
    140          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET
    141          
    142          /*********************************************************************
    143           * @fn          ZDP_SendData
    144           *
    145           * @brief       This builds and send a request message that has
    146           *              NWKAddrOfInterest as its only parameter.
    147           *
    148           * @param       dstAddr - destination address
    149           * @param       cmd - clusterID
    150           * @param       dataLen - number of bytes of data
    151           * @param       data - pointer to the data
    152           * @param       SecurityEnable - Security Options
    153           *
    154           * @return      afStatus_t
    155           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    156          afStatus_t ZDP_SendData( byte *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    157                                  byte len, byte *buf, byte SecurityEnable )
    158          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   740E         MOV     A,#0xe
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 3,A
    159            byte *pBuf = ZDP_TmpBuf;
   \   00001F   12....       LCALL   ?Subroutine9 & 0xFFFF
    160            byte cnt = len;
   \                     ??CrossCallReturnLabel_22:
   \   000022   85....       MOV     ?V0 + 4,?V0 + 2
   \   000025   8010         SJMP    ??ZDP_SendData_0
    161          
    162            while ( cnt-- )
    163            {
    164              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000027   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00002A   AE82         MOV     R6,DPL
   \   00002C   AF83         MOV     R7,DPH
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   A882         MOV     R0,DPL
   \   000035   A983         MOV     R1,DPH
    165            }
   \                     ??ZDP_SendData_0:
   \   000037   85....       MOV     ?V0 + 5,?V0 + 4
   \   00003A   74FF         MOV     A,#-0x1
   \   00003C   25..         ADD     A,?V0 + 5
   \   00003E   F5..         MOV     ?V0 + 4,A
   \   000040   E5..         MOV     A,?V0 + 5
   \   000042   70E3         JNZ     ??ZDP_SendData_1
    166          
    167            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
    168                         (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
   \   000044   E5..         MOV     A,?V0 + 3
   \   000046   6004         JZ      ??ZDP_SendData_2
   \   000048   7840         MOV     R0,#0x40
   \   00004A   8002         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00004C   7800         MOV     R0,#0x0
   \                     ??ZDP_SendData_3:
   \   00004E   E8           MOV     A,R0
   \   00004F   440A         ORL     A,#0xa
   \   000051   90....       MOV     DPTR,#??ZDP_TxOptions
   \   000054   F0           MOVX    @DPTR,A
   \   000055                ; Setup parameters for call to function fillAndSend
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   A9..         MOV     R1,?V0 + 2
   \   00005C   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   00005F   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   000061   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   E4           CLR     A
   \   00006A   90....       MOV     DPTR,#??ZDP_TxOptions
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   7F06         MOV     R7,#0x6
   \   000070   02....       LJMP    ?BANKED_LEAVE_XDATA
    169          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   02....       LJMP    ?Subroutine46 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#??ZDP_TmpBuf
   \                     ??Subroutine9_0:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   22           RET
    170          
    171          #if defined ( ZDO_NODEDESC_REQUEST ) || defined ( ZDO_POWERDESC_REQUEST ) ||\
    172              defined ( ZDO_ACTIVEEP_REQUEST ) || defined ( ZDO_COMPLEXDESC_REQUEST ) ||\
    173              defined ( ZDO_USERDESC_REQUEST )
    174          /*********************************************************************
    175           * @fn          ZDP_NWKAddrOfInterestReq
    176           *
    177           * @brief       This builds and send a request message that has
    178           *              NWKAddrOfInterest as its only parameter.
    179           *
    180           * @param       dstAddr - destination address
    181           * @param       nwkAddr - 16 bit address
    182           * @param       SecurityEnable - Security Options
    183           *
    184           * @return      afStatus_t
    185           */
    186          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
    187                                               byte cmd, byte SecurityEnable )
    188          {
    189            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
    190            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    191          
    192            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
    193          }
    194          #endif // ZDO_NODEDESC_REQUEST ZDO_POWERDESC_REQUEST ZDO_ACTIVEEP_REQUEST ZDO_COMPLEXDESC_REQUEST  ZDO_USERDESC_REQUEST
    195          
    196          /*********************************************************************
    197           * Address Requests
    198           */
    199          
    200          #if defined ( ZDO_NWKADDR_REQUEST )
    201          /*********************************************************************
    202           * @fn          ZDP_NwkAddrReq
    203           *
    204           * @brief       This builds and send a NWK_addr_req message.  This
    205           *              function sends a broadcast message looking for a 16
    206           *              bit address with a 64 bit address as bait.
    207           *
    208           * @param       IEEEAddress - looking for this device
    209           * @param       SecurityEnable - Security Options
    210           *
    211           * @return      afStatus_t
    212           */
    213          afStatus_t ZDP_NwkAddrReq( byte *IEEEAddress, byte ReqType,
    214                                     byte StartIndex, byte SecurityEnable )
    215          {
    216            byte *pBuf = ZDP_TmpBuf;
    217            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    218            zAddrType_t dstAddr;
    219          
    220            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
    221            {
    222              dstAddr.addrMode = AddrBroadcast;
    223              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    224            }
    225            else
    226            {
    227              dstAddr.addrMode = Addr16Bit;
    228              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
    229            }
    230          
    231            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
    232          
    233            *pBuf++ = ReqType;
    234            *pBuf++ = StartIndex;
    235          
    236            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
    237          }
    238          #endif
    239          
    240          #if defined ( ZDO_IEEEADDR_REQUEST )
    241          /*********************************************************************
    242           * @fn          ZDP_IEEEAddrReq
    243           *
    244           * @brief       This builds and send a IEEE_addr_req message.  This
    245           *              function sends a unicast message looking for a 64
    246           *              bit IEEE address with a 16 bit address as bait.
    247           *
    248           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    249           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    250           * @param       SecurityEnable - Security Options
    251           *
    252           * @return      afStatus_t
    253           */
    254          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
    255                                      byte StartIndex, byte SecurityEnable )
    256          {
    257            byte *pBuf = ZDP_TmpBuf;
    258            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    259            zAddrType_t dstAddr;
    260          
    261            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    262            dstAddr.addr.shortAddr = shortAddr;
    263          
    264            *pBuf++ = LO_UINT16( shortAddr );
    265            *pBuf++ = HI_UINT16( shortAddr );
    266          
    267            *pBuf++ = ReqType;
    268            *pBuf++ = StartIndex;
    269          
    270            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
    271          }
    272          #endif
    273          
    274          #if defined ( ZDO_MATCH_REQUEST )
    275          /*********************************************************************
    276           * @fn          ZDP_MatchDescReq
    277           *
    278           * @brief       This builds and send a Match_Desc_req message.  This
    279           *              function sends a broadcast or unicast message
    280           *              requesting the list of endpoint/interfaces that
    281           *              match profile ID and cluster IDs.
    282           *
    283           * @param       dstAddr - destination address
    284           * @param       ProfileID - Profile ID
    285           * @param       NumInClusters - number of input clusters
    286           * @param       InClusterList - input cluster ID list
    287           * @param       NumOutClusters - number of output clusters
    288           * @param       OutClusterList - output cluster ID list
    289           * @param       SecurityEnable - Security Options
    290           *
    291           * @return      afStatus_t
    292           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    293          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    294                                          uint16 ProfileID,
    295                                          byte NumInClusters, cId_t *InClusterList,
    296                                          byte NumOutClusters, cId_t *OutClusterList,
    297                                          byte SecurityEnable )
    298          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EC           MOV     A,R4
   \   000016   FE           MOV     R6,A
   \   000017   ED           MOV     A,R5
   \   000018   FF           MOV     R7,A
   \   000019   89..         MOV     ?V0 + 6,R1
   \   00001B   7412         MOV     A,#0x12
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000023   7416         MOV     A,#0x16
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 7,A
   \   00002B   7417         MOV     A,#0x17
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 4,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 5,A
    299            byte *pBuf = ZDP_TmpBuf;
   \   000037   12....       LCALL   ?Subroutine15 & 0xFFFF
    300            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    301            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    302            uint8 protoVer = NLME_GetProtocolVersion();
   \                     ??CrossCallReturnLabel_102:
   \   00003A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003D   E9           MOV     A,R1
   \   00003E   FB           MOV     R3,A
    303          
    304            len += (NumInClusters + NumOutClusters)*((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
   \   00003F   7401         MOV     A,#0x1
   \   000041   6B           XRL     A,R3
   \   000042   6004         JZ      ??ZDP_MatchDescReq_0
   \   000044   7802         MOV     R0,#0x2
   \   000046   8002         SJMP    ??ZDP_MatchDescReq_1
   \                     ??ZDP_MatchDescReq_0:
   \   000048   7801         MOV     R0,#0x1
   \                     ??ZDP_MatchDescReq_1:
   \   00004A   E5..         MOV     A,?V0 + 7
   \   00004C   25..         ADD     A,?V0 + 6
   \   00004E   F5F0         MOV     B,A
   \   000050   E8           MOV     A,R0
   \   000051   A4           MUL     AB
   \   000052   2406         ADD     A,#0x6
   \   000054   FA           MOV     R2,A
    305          
    306            if ( len >= ZDP_BUF_SZ-1 )
   \   000055   C3           CLR     C
   \   000056   944F         SUBB    A,#0x4f
   \   000058   4005         JC      ??ZDP_MatchDescReq_2
    307            {
    308              return afStatus_MEM_FAIL;
   \   00005A   7981         MOV     R1,#-0x7f
   \   00005C   02....       LJMP    ??ZDP_MatchDescReq_3 & 0xFFFF
    309            }
    310          
    311            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_2:
   \   00005F   EE           MOV     A,R6
   \   000060   85..82       MOV     DPL,?V0 + 2
   \   000063   85..83       MOV     DPH,?V0 + 3
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
    312            *pBuf++ = HI_UINT16( nwkAddr );
   \   000068   EF           MOV     A,R7
   \   000069   12....       LCALL   ?Subroutine21 & 0xFFFF
    313          
    314            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
    315            *pBuf++ = HI_UINT16( ProfileID );
    316          
    317            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_46:
   \   00006C   E5..         MOV     A,?V0 + 6
   \   00006E   12....       LCALL   ?Subroutine23 & 0xFFFF
    318            if ( NumInClusters )
   \                     ??CrossCallReturnLabel_50:
   \   000071   6028         JZ      ??ZDP_MatchDescReq_4
    319            {
    320              for (i=0; i<NumInClusters; ++i)  {
   \   000073   7C00         MOV     R4,#0x0
    321                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??ZDP_MatchDescReq_5:
   \   000075   EC           MOV     A,R4
   \   000076   C3           CLR     C
   \   000077   33           RLC     A
   \   000078   F8           MOV     R0,A
   \   000079   E4           CLR     A
   \   00007A   33           RLC     A
   \   00007B   F9           MOV     R1,A
   \   00007C   7414         MOV     A,#0x14
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000084   12....       LCALL   ?Subroutine8 & 0xFFFF
    322                if (protoVer != ZB_PROT_V1_0)  {
   \                     ??CrossCallReturnLabel_20:
   \   000087   600B         JZ      ??CrossCallReturnLabel_32
    323                  *pBuf++ = HI_UINT16( InClusterList[i] );
   \   000089   7414         MOV     A,#0x14
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000091   12....       LCALL   ?Subroutine11 & 0xFFFF
    324                }
    325              }
   \                     ??CrossCallReturnLabel_32:
   \   000094   0C           INC     R4
   \   000095   EC           MOV     A,R4
   \   000096   C3           CLR     C
   \   000097   95..         SUBB    A,?V0 + 6
   \   000099   40DA         JC      ??ZDP_MatchDescReq_5
    326            }
    327          
    328            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_4:
   \   00009B   85..82       MOV     DPL,?V0 + 2
   \   00009E   85..83       MOV     DPH,?V0 + 3
   \   0000A1   E5..         MOV     A,?V0 + 7
   \   0000A3   12....       LCALL   ?Subroutine23 & 0xFFFF
    329            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_51:
   \   0000A6   6028         JZ      ??ZDP_MatchDescReq_6
    330            {
    331              for (i=0; i<NumOutClusters; ++i)  {
   \   0000A8   7C00         MOV     R4,#0x0
    332                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??ZDP_MatchDescReq_7:
   \   0000AA   EC           MOV     A,R4
   \   0000AB   C3           CLR     C
   \   0000AC   33           RLC     A
   \   0000AD   F8           MOV     R0,A
   \   0000AE   E4           CLR     A
   \   0000AF   33           RLC     A
   \   0000B0   F9           MOV     R1,A
   \   0000B1   E5..         MOV     A,?V0 + 4
   \   0000B3   28           ADD     A,R0
   \   0000B4   F582         MOV     DPL,A
   \   0000B6   E5..         MOV     A,?V0 + 5
   \   0000B8   39           ADDC    A,R1
   \   0000B9   12....       LCALL   ?Subroutine8 & 0xFFFF
    333                if (protoVer != ZB_PROT_V1_0)  {
   \                     ??CrossCallReturnLabel_21:
   \   0000BC   600B         JZ      ??CrossCallReturnLabel_33
    334                  *pBuf++ = HI_UINT16( OutClusterList[i] );
   \   0000BE   E5..         MOV     A,?V0 + 4
   \   0000C0   28           ADD     A,R0
   \   0000C1   F582         MOV     DPL,A
   \   0000C3   E5..         MOV     A,?V0 + 5
   \   0000C5   39           ADDC    A,R1
   \   0000C6   12....       LCALL   ?Subroutine11 & 0xFFFF
    335                }
    336              }
   \                     ??CrossCallReturnLabel_33:
   \   0000C9   0C           INC     R4
   \   0000CA   EC           MOV     A,R4
   \   0000CB   C3           CLR     C
   \   0000CC   95..         SUBB    A,?V0 + 7
   \   0000CE   40DA         JC      ??ZDP_MatchDescReq_7
    337            }
    338          
    339            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_6:
   \   0000D0                ; Setup parameters for call to function fillAndSend
   \   0000D0   75..06       MOV     ?V0 + 0,#0x6
   \   0000D3   75..00       MOV     ?V0 + 1,#0x0
   \   0000D6   78..         MOV     R0,#?V0 + 0
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   EA           MOV     A,R2
   \   0000DC   F9           MOV     R1,A
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000E5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_3:
   \   0000ED   7402         MOV     A,#0x2
   \   0000EF   02....       LJMP    ?Subroutine45 & 0xFFFF
    340          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FD           MOV     R5,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   8D82         MOV     DPL,R5
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   6B           XRL     A,R3
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V0 + 0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000003   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000006                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000006                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000006   02....       LJMP    ?Subroutine47 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7A..         MOV     R2,#(ZDP_TransID & 0xff)
   \   000007   7B..         MOV     R3,#((ZDP_TransID >> 8) & 0xff)
   \   000009   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   00000C   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   00000E   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F583         MOV     DPH,A
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \                     ??Subroutine40_0:
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   8582..       MOV     ?V0 + 2,DPL
   \   00000C   8583..       MOV     ?V0 + 3,DPH
   \   00000F   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000005   7401         MOV     A,#0x1
   \   000007   22           RET
    341          #endif // ZDO_MATCH_REQUEST
    342          
    343          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    344          /*********************************************************************
    345           * @fn          ZDP_SimpleDescReq
    346           *
    347           * @brief       This builds and send a NWK_Simple_Desc_req
    348           *              message.  This function sends unicast message to the
    349           *              destination device.
    350           *
    351           * @param       dstAddr - destination address
    352           * @param       nwkAddr - 16 bit address
    353           * @param       epIntf - endpoint/interface
    354           * @param       SecurityEnable - Security Options
    355           *
    356           * @return      afStatus_t
    357           */
    358          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
    359                                              byte endPoint, byte SecurityEnable )
    360          
    361          {
    362            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
    363            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    364            ZDP_TmpBuf[2] = endPoint;
    365          
    366            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
    367          }
    368          #endif // ZDO_SIMPLEDESC_REQUEST
    369          
    370          #if defined ( ZDO_USERDESCSET_REQUEST )
    371          /*********************************************************************
    372           * @fn          ZDP_UserDescSet
    373           *
    374           * @brief       This builds and send a User_Desc_set message to set
    375           *              the user descriptor.  This function sends unicast
    376           *              message to the destination device.
    377           *
    378           * @param       dstAddr - destination address
    379           * @param       nwkAddr - 16 bit address
    380           * @param       UserDescriptor - user descriptor
    381           * @param       SecurityEnable - Security Options
    382           *
    383           * @return      afStatus_t
    384           */
    385          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
    386                                    UserDescriptorFormat_t *UserDescriptor,
    387                                    byte SecurityEnable )
    388          {
    389            byte *pBuf = ZDP_TmpBuf;
    390            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    391                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
    392            byte addrLen = 2;
    393          
    394            *pBuf++ = LO_UINT16( nwkAddr );
    395            *pBuf++ = HI_UINT16( nwkAddr );
    396          
    397            if ( NLME_GetProtocolVersion() == ZB_PROT_V1_1 )
    398            {
    399              *pBuf++ = len;
    400              addrLen = 3;
    401            }
    402            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
    403            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
    404          
    405            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
    406          }
    407          #endif // ZDO_USERDESCSET_REQUEST
    408          
    409          #if defined ( ZDO_SERVERDISC_REQUEST )
    410          /*********************************************************************
    411           * @fn          ZDP_ServerDiscReq
    412           *
    413           * @brief       Build and send a Server_Discovery_req request message.
    414           *
    415           * @param       serverMask - 16-bit bit-mask of server services being sought.
    416           * @param       SecurityEnable - Security Options
    417           *
    418           * @return      afStatus_t
    419           */
    420          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
    421          {
    422            byte *pBuf = ZDP_TmpBuf;
    423            zAddrType_t dstAddr;
    424          
    425            dstAddr.addrMode = AddrBroadcast;
    426            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
    427          
    428            *pBuf++ = LO_UINT16( serverMask );
    429            *pBuf = HI_UINT16( serverMask );
    430          
    431            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    432                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
    433          }
    434          #endif
    435          
    436          #if defined ( ZDO_ENDDEVICE_ANNCE_REQUEST ) || defined ( ZDO_ENDDEVICE_ANNCE_GENERATE )
    437          /*********************************************************************
    438           * @fn          ZDP_EndDeviceAnnce
    439           *
    440           * @brief       This builds and send an End_Device_Annce
    441           *              message.  This function sends a broadcast message.
    442           *
    443           * @param       nwkAddr - 16 bit address of the device
    444           * @param       IEEEAddr - 64 bit address of the device
    445           * @param       capabilities - device capabilities.  This field is only
    446           *                 sent for v1.1 networks.
    447           * @param       SecurityEnable - Security Options
    448           *
    449           * @return      afStatus_t
    450           */
    451          afStatus_t ZDP_EndDeviceAnnce( uint16 nwkAddr, byte *IEEEAddr,
    452                                        byte capabilities, byte SecurityEnable )
    453          {
    454            zAddrType_t dstAddr;
    455            uint8 len;
    456          
    457            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    458            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    459          
    460            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
    461            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    462            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
    463            len = 2 + Z_EXTADDR_LEN;
    464          
    465            if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
    466            {
    467              ZDP_TmpBuf[10] = capabilities;
    468              len++;
    469            }
    470          
    471            return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_annce, len );
    472          }
    473          #endif // ZDO_ENDDEVICE_ANNCE_REQUEST
    474          
    475          /*********************************************************************
    476           * Address Responses
    477           */
    478          
    479          /*********************************************************************
    480           * @fn      zdpProcessAddrReq
    481           *
    482           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    483           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    484           *
    485           * @param   seq - Message sequence number of the request.
    486           * @param   src - Source address of the request.
    487           * @param   msg - Incoming request message.
    488           * @param   cId - Cluster ID of the request.
    489           * @param   sty - Security enable/disable options.
    490           *
    491           * @return  none
    492           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    493          static void zdpProcessAddrReq(
   \                     ??zdpProcessAddrReq:
    494                              byte seq, zAddrType_t *src, byte *msg, uint16 cId, byte sty )
    495          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7404         MOV     A,#0x4
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   EA           MOV     A,R2
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EB           MOV     A,R3
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EC           MOV     A,R4
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   ED           MOV     A,R5
   \   000024   F0           MOVX    @DPTR,A
   \   000025   7416         MOV     A,#0x16
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 6,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 7,A
    496            byte reqType = msg[(cId == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000031   E5..         MOV     A,?V0 + 6
   \   000033   7002         JNZ     ??zdpProcessAddrReq_1
   \   000035   E5..         MOV     A,?V0 + 7
   \                     ??zdpProcessAddrReq_1:
   \   000037   7004         JNZ     ??zdpProcessAddrReq_2
   \   000039   7808         MOV     R0,#0x8
   \   00003B   8002         SJMP    ??zdpProcessAddrReq_3
   \                     ??zdpProcessAddrReq_2:
   \   00003D   7802         MOV     R0,#0x2
   \                     ??zdpProcessAddrReq_3:
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   28           ADD     A,R0
   \   000046   FA           MOV     R2,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   3400         ADDC    A,#0x0
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F5..         MOV     ?V0 + 3,A
    497          
    498            uint16 aoi = INVALID_NODE_ADDR;
    499            byte *ieee = NULL;
   \   000052   75..00       MOV     ?V0 + 4,#0x0
   \   000055   75..00       MOV     ?V0 + 5,#0x0
    500          
    501            if ( cId == NWK_addr_req )
   \   000058   E5..         MOV     A,?V0 + 6
   \   00005A   7002         JNZ     ??zdpProcessAddrReq_4
   \   00005C   E5..         MOV     A,?V0 + 7
   \                     ??zdpProcessAddrReq_4:
   \   00005E   7028         JNZ     ??zdpProcessAddrReq_5
    502            {
    503              ieee = msg;
   \   000060   7401         MOV     A,#0x1
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F5..         MOV     ?V0 + 4,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F5..         MOV     ?V0 + 5,A
    504          
    505              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00006C                ; Setup parameters for call to function osal_ExtAddrEqual
   \   00006C   AC..         MOV     R4,?V0 + 4
   \   00006E   7A..         MOV     R2,#(saveExtAddr & 0xff)
   \   000070   7B..         MOV     R3,#((saveExtAddr >> 8) & 0xff)
   \   000072   90....       MOV     DPTR,#(osal_ExtAddrEqual & 0xffff)
   \   000075   74..         MOV     A,#((osal_ExtAddrEqual >> 16) & 0xff)
   \   000077   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00007A   E9           MOV     A,R1
   \   00007B   7003         JNZ     $+5
   \   00007D   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
    506              {
    507                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000080   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000083   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000086   8031         SJMP    ??zdpProcessAddrReq_7
    508              }
    509              /*
    510              else if ( reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP )
    511              {
    512                //ggg - what to do?
    513              }
    514              */
    515          #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
    516              else
    517              {
    518                aoi = ZDCacheGetNwkAddr( msg );
    519              }
    520          #endif
    521            }
    522            else  // if ( cId == IEEE_addr_req )
    523            {
    524              aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??zdpProcessAddrReq_5:
   \   000088   7401         MOV     A,#0x1
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FA           MOV     R2,A
   \   000092   7401         MOV     A,#0x1
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F583         MOV     DPH,A
   \   00009B   8882         MOV     DPL,R0
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F9           MOV     R1,A
   \   0000A0   E4           CLR     A
   \   0000A1   2A           ADD     A,R2
   \   0000A2   FE           MOV     R6,A
   \   0000A3   E9           MOV     A,R1
   \   0000A4   3400         ADDC    A,#0x0
   \   0000A6   FF           MOV     R7,A
    525          
    526              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000A7   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   6E           XRL     A,R6
   \   0000AC   7003         JNZ     ??zdpProcessAddrReq_8
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_8:
   \   0000B1   7006         JNZ     ??zdpProcessAddrReq_7
    527              {
    528                ieee = saveExtAddr;
   \   0000B3   75....       MOV     ?V0 + 4,#(saveExtAddr & 0xff)
   \   0000B6   75....       MOV     ?V0 + 5,#((saveExtAddr >> 8) & 0xff)
    529              }
    530          #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
    531              else
    532              {
    533                ieee = ZDCacheGetExtAddr( aoi );
    534              }
    535          #endif
    536            }
    537          
    538            if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??zdpProcessAddrReq_7:
   \   0000B9   74FE         MOV     A,#-0x2
   \   0000BB   6E           XRL     A,R6
   \   0000BC   7003         JNZ     ??zdpProcessAddrReq_9
   \   0000BE   74FF         MOV     A,#-0x1
   \   0000C0   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_9:
   \   0000C1   7003         JNZ     $+5
   \   0000C3   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
   \   0000C6   E5..         MOV     A,?V0 + 4
   \   0000C8   7002         JNZ     ??zdpProcessAddrReq_10
   \   0000CA   E5..         MOV     A,?V0 + 5
   \                     ??zdpProcessAddrReq_10:
   \   0000CC   7003         JNZ     $+5
   \   0000CE   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
    539            {
    540              byte *pBuf = ZDP_TmpBuf;
   \   0000D1   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   0000D4   12....       LCALL   ?Subroutine13 & 0xFFFF
    541              // Status + IEEE-Addr + Nwk-Addr.
    542              byte len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_38:
   \   0000D7   75..0B       MOV     ?V0 + 2,#0xb
    543          
    544              byte stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) ||
    545                        (reqType == ZDP_ADDR_REQTYPE_EXTENDED) ||
    546                    ((reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP) && (cId == NWK_addr_req)) ) ?
    547                ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0000DA   E5..         MOV     A,?V0 + 3
   \   0000DC   6014         JZ      ??zdpProcessAddrReq_11
   \   0000DE   7401         MOV     A,#0x1
   \   0000E0   65..         XRL     A,?V0 + 3
   \   0000E2   600E         JZ      ??zdpProcessAddrReq_11
   \   0000E4   7402         MOV     A,#0x2
   \   0000E6   65..         XRL     A,?V0 + 3
   \   0000E8   700C         JNZ     ??zdpProcessAddrReq_12
   \   0000EA   E5..         MOV     A,?V0 + 6
   \   0000EC   7002         JNZ     ??zdpProcessAddrReq_13
   \   0000EE   E5..         MOV     A,?V0 + 7
   \                     ??zdpProcessAddrReq_13:
   \   0000F0   7004         JNZ     ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0000F2   7A00         MOV     R2,#0x0
   \   0000F4   8002         SJMP    ??zdpProcessAddrReq_14
   \                     ??zdpProcessAddrReq_12:
   \   0000F6   7A80         MOV     R2,#-0x80
    548          
    549              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_14:
   \   0000F8   EA           MOV     A,R2
   \   0000F9   85..82       MOV     DPL,?V0 + 0
   \   0000FC   85..83       MOV     DPH,?V0 + 1
   \   0000FF   F0           MOVX    @DPTR,A
    550          
    551              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   000100                ; Setup parameters for call to function osal_cpyExtAddr
   \   000100   AC..         MOV     R4,?V0 + 4
   \   000102   AD..         MOV     R5,?V0 + 5
   \   000104   A3           INC     DPTR
   \   000105   AA82         MOV     R2,DPL
   \   000107   AB83         MOV     R3,DPH
   \   000109   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   00010C   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   00010E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    552          
    553              *pBuf++ = LO_UINT16( aoi );
   \   000111   EE           MOV     A,R6
   \   000112   8A82         MOV     DPL,R2
   \   000114   8B83         MOV     DPH,R3
   \   000116   F0           MOVX    @DPTR,A
   \   000117   A3           INC     DPTR
    554              *pBuf++ = HI_UINT16( aoi );
   \   000118   EF           MOV     A,R7
   \   000119   12....       LCALL   ?Subroutine24 & 0xFFFF
    555          
    556          #if defined( RTR_NWK )
    557              if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) &&
    558                   (aoi == ZDAppNwkAddr.addr.shortAddr) )
   \                     ??CrossCallReturnLabel_53:
   \   00011C   7401         MOV     A,#0x1
   \   00011E   65..         XRL     A,?V0 + 3
   \   000120   6003         JZ      $+5
   \   000122   02....       LJMP    ??zdpProcessAddrReq_15 & 0xFFFF
   \   000125   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000128   E0           MOVX    A,@DPTR
   \   000129   6E           XRL     A,R6
   \   00012A   7003         JNZ     ??zdpProcessAddrReq_16
   \   00012C   A3           INC     DPTR
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_16:
   \   00012F   6003         JZ      $+5
   \   000131   02....       LJMP    ??zdpProcessAddrReq_15 & 0xFFFF
    559              {
    560                byte cnt = 0;
   \   000134   E4           CLR     A
   \   000135   85..82       MOV     DPL,?XSP + 0
   \   000138   85..83       MOV     DPH,?XSP + 1
   \   00013B   F0           MOVX    @DPTR,A
    561                uint16 *list = AssocMakeList( &cnt );
   \   00013C                ; Setup parameters for call to function AssocMakeList
   \   00013C   AA82         MOV     R2,DPL
   \   00013E   AB83         MOV     R3,DPH
   \   000140   90....       MOV     DPTR,#(AssocMakeList & 0xffff)
   \   000143   74..         MOV     A,#((AssocMakeList >> 16) & 0xff)
   \   000145   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    562          
    563                // NumAssocDev field is only present on success.
    564                *pBuf++ = cnt;
   \   000148   85..82       MOV     DPL,?XSP + 0
   \   00014B   85..83       MOV     DPH,?XSP + 1
   \   00014E   12....       LCALL   ?Subroutine1 & 0xFFFF
    565                len++;
   \                     ??CrossCallReturnLabel_2:
   \   000151   75..0C       MOV     ?V0 + 2,#0xc
    566          
    567                if ( list != NULL )
   \   000154   EA           MOV     A,R2
   \   000155   7001         JNZ     ??zdpProcessAddrReq_17
   \   000157   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_17:
   \   000158   7003         JNZ     $+5
   \   00015A   02....       LJMP    ??zdpProcessAddrReq_15 & 0xFFFF
    568                {
    569                  byte idx =
    570                    msg[(((cId == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   00015D   E5..         MOV     A,?V0 + 6
   \   00015F   7002         JNZ     ??zdpProcessAddrReq_18
   \   000161   E5..         MOV     A,?V0 + 7
   \                     ??zdpProcessAddrReq_18:
   \   000163   7004         JNZ     ??zdpProcessAddrReq_19
   \   000165   7808         MOV     R0,#0x8
   \   000167   8002         SJMP    ??zdpProcessAddrReq_20
   \                     ??zdpProcessAddrReq_19:
   \   000169   7802         MOV     R0,#0x2
   \                     ??zdpProcessAddrReq_20:
   \   00016B   7401         MOV     A,#0x1
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   E0           MOVX    A,@DPTR
   \   000171   28           ADD     A,R0
   \   000172   FC           MOV     R4,A
   \   000173   A3           INC     DPTR
   \   000174   E0           MOVX    A,@DPTR
   \   000175   3400         ADDC    A,#0x0
   \   000177   8C82         MOV     DPL,R4
   \   000179   F583         MOV     DPH,A
   \   00017B   A3           INC     DPTR
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   FC           MOV     R4,A
    571                  uint16 *pList = list + idx;
   \   00017E   C3           CLR     C
   \   00017F   33           RLC     A
   \   000180   F8           MOV     R0,A
   \   000181   E4           CLR     A
   \   000182   33           RLC     A
   \   000183   F9           MOV     R1,A
   \   000184   EA           MOV     A,R2
   \   000185   28           ADD     A,R0
   \   000186   F8           MOV     R0,A
   \   000187   EB           MOV     A,R3
   \   000188   39           ADDC    A,R1
   \   000189   F9           MOV     R1,A
    572          
    573                  // StartIndex field is only present if NumAssocDev field is non-zero.
    574                  *pBuf++ = idx;
   \   00018A   EC           MOV     A,R4
   \   00018B   85..82       MOV     DPL,?V0 + 0
   \   00018E   85..83       MOV     DPH,?V0 + 1
   \   000191   12....       LCALL   ?Subroutine24 & 0xFFFF
    575                  len++;
   \                     ??CrossCallReturnLabel_54:
   \   000194   75..0D       MOV     ?V0 + 2,#0xd
    576          
    577                  if ( cnt > idx )
   \   000197   85..82       MOV     DPL,?XSP + 0
   \   00019A   85..83       MOV     DPH,?XSP + 1
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   FD           MOV     R5,A
   \   00019F   EC           MOV     A,R4
   \   0001A0   C3           CLR     C
   \   0001A1   9D           SUBB    A,R5
   \   0001A2   500C         JNC     ??zdpProcessAddrReq_21
    578                  {
    579                    cnt -= idx;
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   C3           CLR     C
   \   0001A6   9C           SUBB    A,R4
   \   0001A7   F0           MOVX    @DPTR,A
    580                    len += (cnt * sizeof( uint16 ));
   \   0001A8   C3           CLR     C
   \   0001A9   33           RLC     A
   \   0001AA   240D         ADD     A,#0xd
   \   0001AC   F5..         MOV     ?V0 + 2,A
   \   0001AE   8025         SJMP    ??zdpProcessAddrReq_22
    581                  }
    582                  else
    583                  {
    584                    cnt = 0;
   \                     ??zdpProcessAddrReq_21:
   \   0001B0   E4           CLR     A
   \   0001B1   F0           MOVX    @DPTR,A
   \   0001B2   8024         SJMP    ??zdpProcessAddrReq_23
    585                  }
    586          
    587                  while ( cnt != 0 )
    588                  {
    589                    *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_24:
   \   0001B4   8882         MOV     DPL,R0
   \   0001B6   8983         MOV     DPH,R1
   \   0001B8   12....       LCALL   ?Subroutine1 & 0xFFFF
    590                    *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_3:
   \   0001BB   8882         MOV     DPL,R0
   \   0001BD   8983         MOV     DPH,R1
   \   0001BF   A3           INC     DPTR
   \   0001C0   12....       LCALL   ?Subroutine1 & 0xFFFF
    591                    pList++;
   \                     ??CrossCallReturnLabel_4:
   \   0001C3   E8           MOV     A,R0
   \   0001C4   2402         ADD     A,#0x2
   \   0001C6   08           INC     R0
   \   0001C7   08           INC     R0
   \   0001C8   E9           MOV     A,R1
   \   0001C9   3400         ADDC    A,#0x0
   \   0001CB   F9           MOV     R1,A
    592                    cnt--;
   \   0001CC   85..82       MOV     DPL,?XSP + 0
   \   0001CF   85..83       MOV     DPH,?XSP + 1
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   14           DEC     A
   \   0001D4   F0           MOVX    @DPTR,A
    593                  }
   \                     ??zdpProcessAddrReq_22:
   \   0001D5   E0           MOVX    A,@DPTR
   \   0001D6   70DC         JNZ     ??zdpProcessAddrReq_24
    594          
    595                  osal_mem_free( (byte *)list );
   \                     ??zdpProcessAddrReq_23:
   \   0001D8                ; Setup parameters for call to function osal_mem_free
   \   0001D8   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   0001DB   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   0001DD   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    596                }
    597              }
    598          
    599          #endif
    600          
    601              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_15:
   \   0001E0   7410         MOV     A,#0x10
   \   0001E2   90....       MOV     DPTR,#??ZDP_TxOptions
   \   0001E5   F0           MOVX    @DPTR,A
    602              fillAndSend( &seq, src, (cId_t)(cId | ZDO_RESPONSE_BIT), len );
   \   0001E6                ; Setup parameters for call to function fillAndSend
   \   0001E6   E5..         MOV     A,?V0 + 6
   \   0001E8   F5..         MOV     ?V0 + 0,A
   \   0001EA   7480         MOV     A,#-0x80
   \   0001EC   45..         ORL     A,?V0 + 7
   \   0001EE   F5..         MOV     ?V0 + 1,A
   \   0001F0   78..         MOV     R0,#?V0 + 0
   \   0001F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F5   A9..         MOV     R1,?V0 + 2
   \   0001F7   7406         MOV     A,#0x6
   \   0001F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   FC           MOV     R4,A
   \   0001FE   A3           INC     DPTR
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   FD           MOV     R5,A
   \   000201   7405         MOV     A,#0x5
   \   000203   12....       LCALL   ?XSTACK_DISP0_8
   \   000206   AA82         MOV     R2,DPL
   \   000208   AB83         MOV     R3,DPH
   \   00020A   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   00020D   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   00020F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000212   7402         MOV     A,#0x2
   \   000214   12....       LCALL   ?DEALLOC_XSTACK8
    603              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000217   E4           CLR     A
   \   000218   90....       MOV     DPTR,#??ZDP_TxOptions
   \   00021B   F0           MOVX    @DPTR,A
    604            }
    605          }
   \                     ??zdpProcessAddrReq_6:
   \   00021C   7406         MOV     A,#0x6
   \   00021E   02....       LJMP    ?Subroutine45 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00000A   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0 + 0,DPL
   \   000005   8583..       MOV     ?V0 + 1,DPH
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    606          
    607          /*********************************************************************
    608           * @fn          ZDP_NodeDescMsg
    609           *
    610           * @brief       Builds and sends a Node Descriptor message, unicast to the
    611           *              specified device.
    612           *
    613           * @param       dstAddr - destination address
    614           * @param       nwkAddr - 16 bit network address for device
    615           * @param       pNodeDesc - pointer to the node descriptor
    616           * @param       SecurityEnable - Security Options
    617           *
    618           * @return      afStatus_t
    619           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    620          afStatus_t ZDP_NodeDescMsg( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_NodeDescMsg:
    621                 uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc, byte SecurityEnable )
    622          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 2,R2
   \   000014   8B..         MOV     ?V0 + 3,R3
   \   000016   8C..         MOV     ?V0 + 0,R4
   \   000018   8D..         MOV     ?V0 + 1,R5
   \   00001A   740D         MOV     A,#0xd
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine17 & 0xFFFF
    623            byte proVer = NLME_GetProtocolVersion();
   \                     ??CrossCallReturnLabel_104:
   \   000022   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000025   E9           MOV     A,R1
   \   000026   FA           MOV     R2,A
    624            byte *pBuf = ZDP_TmpBuf;
   \   000027   12....       LCALL   ?Subroutine9 & 0xFFFF
    625            byte len;
    626          
    627            if ( proVer == ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_23:
   \   00002A   7401         MOV     A,#0x1
   \   00002C   6A           XRL     A,R2
   \   00002D   7004         JNZ     ??ZDP_NodeDescMsg_0
    628            {
    629              len = 1 + 2 + 8;  // Status + nwkAddr + Node descriptor
   \   00002F   7C0B         MOV     R4,#0xb
   \   000031   8002         SJMP    ??ZDP_NodeDescMsg_1
    630            }
    631            else
    632            {
    633              len = 1 + 2 + 10;  // Status + nwkAddr + Node descriptor
   \                     ??ZDP_NodeDescMsg_0:
   \   000033   7C0D         MOV     R4,#0xd
    634            }
    635          
    636            *pBuf++ = ZDP_SUCCESS;
   \                     ??ZDP_NodeDescMsg_1:
   \   000035   E4           CLR     A
   \   000036   8882         MOV     DPL,R0
   \   000038   8983         MOV     DPH,R1
   \   00003A   12....       LCALL   ?Subroutine21 & 0xFFFF
    637          
    638            *pBuf++ = LO_UINT16( nwkAddr );
    639            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_47:
   \   00003D   A882         MOV     R0,DPL
   \   00003F   A983         MOV     R1,DPH
    640          
    641            if ( proVer == ZB_PROT_V1_0 )
   \   000041   7401         MOV     A,#0x1
   \   000043   6A           XRL     A,R2
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   7005         JNZ     ??ZDP_NodeDescMsg_2
    642            {
    643              *pBuf++ = (byte)(pNodeDesc->LogicalType & 0x07);
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   5407         ANL     A,#0x7
   \   00004D   8003         SJMP    ??ZDP_NodeDescMsg_3
    644            }
    645            else
    646            {
    647              *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    648                               (pNodeDesc->UserDescAvail << 4) |
    649                               (pNodeDesc->LogicalType & 0x07));
   \                     ??ZDP_NodeDescMsg_2:
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   541F         ANL     A,#0x1f
   \                     ??ZDP_NodeDescMsg_3:
   \   000052   12....       LCALL   ?Subroutine37 & 0xFFFF
    650            }
    651          
    652            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_84:
   \   000055   12....       LCALL   ?Subroutine10 & 0xFFFF
    653            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_30:
   \   000058   12....       LCALL   ?Subroutine10 & 0xFFFF
    654            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_31:
   \   00005B   A3           INC     DPTR
   \   00005C   12....       LCALL   ?Subroutine7 & 0xFFFF
    655            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_18:
   \   00005F   12....       LCALL   ?Subroutine7 & 0xFFFF
    656            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_19:
   \   000062   A3           INC     DPTR
   \   000063   12....       LCALL   ?Subroutine6 & 0xFFFF
    657            *pBuf++ = pNodeDesc->MaxTransferSize[0];
   \                     ??CrossCallReturnLabel_16:
   \   000066   12....       LCALL   ?Subroutine6 & 0xFFFF
    658            *pBuf++ = pNodeDesc->MaxTransferSize[1];
   \                     ??CrossCallReturnLabel_17:
   \   000069   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   08           INC     R0
   \   00006F   A983         MOV     R1,DPH
    659          
    660            if ( proVer != ZB_PROT_V1_0 )
   \   000071   7401         MOV     A,#0x1
   \   000073   6A           XRL     A,R2
   \   000074   6019         JZ      ??ZDP_NodeDescMsg_4
    661            {
    662              *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000076   EE           MOV     A,R6
   \   000077   2408         ADD     A,#0x8
   \   000079   FA           MOV     R2,A
   \   00007A   EF           MOV     A,R7
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   FB           MOV     R3,A
   \   00007E   8A82         MOV     DPL,R2
   \   000080   8B83         MOV     DPH,R3
   \   000082   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000085   F0           MOVX    @DPTR,A
    663              *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \   000086   8A82         MOV     DPL,R2
   \   000088   8B83         MOV     DPH,R3
   \   00008A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00008D   A3           INC     DPTR
   \   00008E   F0           MOVX    @DPTR,A
    664            }
    665          
    666            return fillAndSend( &TransSeq, dstAddr, Node_Desc_rsp, len );
   \                     ??ZDP_NodeDescMsg_4:
   \   00008F                ; Setup parameters for call to function fillAndSend
   \   00008F   75..02       MOV     ?V0 + 0,#0x2
   \   000092   75..80       MOV     ?V0 + 1,#-0x80
   \   000095   78..         MOV     R0,#?V0 + 0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   EC           MOV     A,R4
   \   00009B   F9           MOV     R1,A
   \   00009C   AC..         MOV     R4,?V0 + 2
   \   00009E   AD..         MOV     R5,?V0 + 3
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   AA82         MOV     R2,DPL
   \   0000A7   AB83         MOV     R3,DPH
   \   0000A9   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   0000AC   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   0000AE   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B6   7401         MOV     A,#0x1
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   7F04         MOV     R7,#0x4
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA
    667          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009                REQUIRE ?Subroutine46
   \   000009                ; // Fall through to label ?Subroutine46

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC     DPTR
   \                     ??Subroutine19_0:
   \   000001   E0           MOVX    A,@DPTR
   \   000002                REQUIRE ?Subroutine48
   \   000002                ; // Fall through to label ?Subroutine48

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000003                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   000003                REQUIRE ?Subroutine47
   \   000003                ; // Fall through to label ?Subroutine47
    668          
    669          /*********************************************************************
    670           * @fn          ZDP_PowerDescMsg
    671           *
    672           * @brief       Builds and sends a Power Descriptor message, unicast to the
    673           *              specified device.
    674           *
    675           * @param       dstAddr - destination address
    676           * @param       Status - message status (ZDP_SUCCESS or other)
    677           * @param       nwkAddr - 16 bit network address for device
    678           * @param       pPowerDesc - pointer to the node descriptor
    679           * @param       SecurityEnable - Security Options
    680           *
    681           * @return      afStatus_t
    682           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    683          afStatus_t ZDP_PowerDescMsg( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_PowerDescMsg:
    684            uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc, byte SecurityEnable )
    685          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00001A   E8           MOV     A,R0
   \   00001B   FE           MOV     R6,A
   \   00001C   E9           MOV     A,R1
   \   00001D   FF           MOV     R7,A
    686            byte *pBuf = ZDP_TmpBuf;
   \   00001E   12....       LCALL   ?Subroutine9 & 0xFFFF
    687            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    688          
    689            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_25:
   \   000021   E4           CLR     A
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
    690          
    691            *pBuf++ = LO_UINT16( nwkAddr );
   \   000028   EC           MOV     A,R4
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
    692            *pBuf++ = HI_UINT16( nwkAddr );
   \   00002B   ED           MOV     A,R5
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   A882         MOV     R0,DPL
   \   000030   A983         MOV     R1,DPH
    693          
    694            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    695                              | (pPowerDesc->PowerMode & 0x0F));
   \   000032   12....       LCALL   ?Subroutine16 & 0xFFFF
    696            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    697                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_98:
   \   000035   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000038   A3           INC     DPTR
   \   000039   F0           MOVX    @DPTR,A
    698          
    699            return fillAndSend( &TransSeq, dstAddr, Power_Desc_rsp, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..03       MOV     ?V0 + 0,#0x3
   \   00003D   75..80       MOV     ?V0 + 1,#-0x80
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   7905         MOV     R1,#0x5
   \   000047   EA           MOV     A,R2
   \   000048   FC           MOV     R4,A
   \   000049   EB           MOV     A,R3
   \   00004A                REQUIRE ?Subroutine49
   \   00004A                ; // Fall through to label ?Subroutine49
    700          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   FD           MOV     R5,A
   \   000001   7402         MOV     A,#0x2
   \   000003   12....       LCALL   ?XSTACK_DISP0_8
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   00000D   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?DEALLOC_XSTACK8
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001C   7F02         MOV     R7,#0x2
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
    701          
    702          /*********************************************************************
    703           * @fn          ZDP_SimpleDescMsg
    704           *
    705           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    706           *              specified device.
    707           *
    708           * @param       dstAddr - destination address
    709           * @param       Status - message status (ZDP_SUCCESS or other)
    710           * @param       pSimpleDesc - pointer to the node descriptor
    711           * @param       SecurityEnable - Security Options
    712           *
    713           * @return      afStatus_t
    714           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    715          afStatus_t ZDP_SimpleDescMsg( byte TransSeq, zAddrType_t *dstAddr, byte Status,
   \                     ZDP_SimpleDescMsg:
    716                                        SimpleDescriptionFormat_t *pSimpleDesc,
    717                                        cId_t clusterID, byte SecurityEnable )
    718          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 4,R2
   \   000014   8B..         MOV     ?V0 + 5,R3
   \   000016   8C..         MOV     ?V0 + 6,R4
   \   000018   7410         MOV     A,#0x10
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000020   7412         MOV     A,#0x12
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine31 & 0xFFFF
    719            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_70:
   \   000028   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   00002B   12....       LCALL   ?Subroutine17 & 0xFFFF
    720            uint8 i, len;
    721            uint8 protoVer;
    722          
    723            protoVer = NLME_GetProtocolVersion();
   \                     ??CrossCallReturnLabel_105:
   \   00002E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000031   E9           MOV     A,R1
   \   000032   FB           MOV     R3,A
    724          
    725            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \   000033   E5..         MOV     A,?V0 + 6
   \   000035   7043         JNZ     ??ZDP_SimpleDescMsg_0
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   7002         JNZ     ??ZDP_SimpleDescMsg_1
   \   00003B   E5..         MOV     A,?V0 + 1
   \                     ??ZDP_SimpleDescMsg_1:
   \   00003D   603B         JZ      ??ZDP_SimpleDescMsg_0
    726            {
    727              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    728              len = 1 + 2 + 1 + 8;
    729              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters)
    730                      * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
   \   00003F   7401         MOV     A,#0x1
   \   000041   6B           XRL     A,R3
   \   000042   6004         JZ      ??ZDP_SimpleDescMsg_2
   \   000044   7802         MOV     R0,#0x2
   \   000046   8002         SJMP    ??ZDP_SimpleDescMsg_3
   \                     ??ZDP_SimpleDescMsg_2:
   \   000048   7801         MOV     R0,#0x1
   \                     ??ZDP_SimpleDescMsg_3:
   \   00004A   85..82       MOV     DPL,?V0 + 0
   \   00004D   85..83       MOV     DPH,?V0 + 1
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   85..82       MOV     DPL,?V0 + 0
   \   00005D   85..83       MOV     DPH,?V0 + 1
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   FA           MOV     R2,A
   \   000067   E0           MOVX    A,@DPTR
   \   000068   2A           ADD     A,R2
   \   000069   F5F0         MOV     B,A
   \   00006B   E8           MOV     A,R0
   \   00006C   A4           MUL     AB
   \   00006D   240C         ADD     A,#0xc
   \   00006F   FA           MOV     R2,A
    731            }
    732            else
    733            {
    734              len = 2; // Status + desc length
    735            }
    736            if ( len >= ZDP_BUF_SZ-1 )
   \   000070   C3           CLR     C
   \   000071   944F         SUBB    A,#0x4f
   \   000073   4007         JC      ??ZDP_SimpleDescMsg_4
    737            {
    738              return afStatus_MEM_FAIL;
   \   000075   7981         MOV     R1,#-0x7f
   \   000077   02....       LJMP    ??ZDP_SimpleDescMsg_5 & 0xFFFF
    739            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00007A   7A02         MOV     R2,#0x2
    740          
    741            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_4:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   E5..         MOV     A,?V0 + 6
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   AE82         MOV     R6,DPL
   \   000086   AF83         MOV     R7,DPH
    742          
    743            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000088   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00008B   12....       LCALL   ??Subroutine4_0 & 0xFFFF
    744            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_9:
   \   00008E   90....       MOV     DPTR,#(ZDAppNwkAddr + 1)
   \   000091   12....       LCALL   ?Subroutine42 & 0xFFFF
    745          
    746            if ( len > 2 )
   \                     ??CrossCallReturnLabel_93:
   \   000094   EA           MOV     A,R2
   \   000095   C3           CLR     C
   \   000096   9403         SUBB    A,#0x3
   \   000098   5003         JNC     $+5
   \   00009A   02....       LJMP    ??ZDP_SimpleDescMsg_6 & 0xFFFF
    747            {
    748              *pBuf++ = len - 4;   // Simple descriptor length
   \   00009D   74FC         MOV     A,#-0x4
   \   00009F   2A           ADD     A,R2
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   0E           INC     R6
   \   0000A3   0E           INC     R6
   \   0000A4   AF83         MOV     R7,DPH
    749          
    750              *pBuf++ = pSimpleDesc->EndPoint;
   \   0000A6   85..82       MOV     DPL,?V0 + 0
   \   0000A9   85..83       MOV     DPH,?V0 + 1
   \   0000AC   12....       LCALL   ??Subroutine4_0 & 0xFFFF
    751              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_10:
   \   0000AF   85..82       MOV     DPL,?V0 + 0
   \   0000B2   85..83       MOV     DPH,?V0 + 1
   \   0000B5   A3           INC     DPTR
   \   0000B6   A882         MOV     R0,DPL
   \   0000B8   A983         MOV     R1,DPH
   \   0000BA   12....       LCALL   ?Subroutine3 & 0xFFFF
    752              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
    753              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_7:
   \   0000BD   E5..         MOV     A,?V0 + 0
   \   0000BF   2403         ADD     A,#0x3
   \   0000C1   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000C4   12....       LCALL   ?Subroutine3 & 0xFFFF
    754              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
    755          
    756              if ( protoVer == ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_8:
   \   0000C7   7401         MOV     A,#0x1
   \   0000C9   6B           XRL     A,R3
   \   0000CA   85..82       MOV     DPL,?V0 + 0
   \   0000CD   85..83       MOV     DPH,?V0 + 1
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   7011         JNZ     ??ZDP_SimpleDescMsg_7
    757              {
    758                *pBuf++ = (byte)((pSimpleDesc->AppDevVer << 4) | (pSimpleDesc->Reserved));
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FC           MOV     R4,A
   \   0000D9   C4           SWAP    A
   \   0000DA   540F         ANL     A,#0xf
   \   0000DC   C0E0         PUSH    A
   \   0000DE   EC           MOV     A,R4
   \   0000DF   C4           SWAP    A
   \   0000E0   54F0         ANL     A,#0xf0
   \   0000E2   FC           MOV     R4,A
   \   0000E3   D0E0         POP     A
   \   0000E5   4C           ORL     A,R4
   \   0000E6   8004         SJMP    ??ZDP_SimpleDescMsg_8
    759              }
    760              else
    761              {
    762                *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C4           SWAP    A
   \   0000EA   54F0         ANL     A,#0xf0
   \                     ??ZDP_SimpleDescMsg_8:
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   0E           INC     R6
   \   0000F3   AF83         MOV     R7,DPH
    763              }
    764          
    765              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000F5   E5..         MOV     A,?V0 + 0
   \   0000F7   2406         ADD     A,#0x6
   \   0000F9   08           INC     R0
   \   0000FA   08           INC     R0
   \   0000FB   08           INC     R0
   \   0000FC   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000FF   12....       LCALL   ??Subroutine4_0 & 0xFFFF
    766              if ( pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_11:
   \   000102   8882         MOV     DPL,R0
   \   000104   8983         MOV     DPH,R1
   \   000106   E0           MOVX    A,@DPTR
   \   000107   6033         JZ      ??ZDP_SimpleDescMsg_9
    767              {
    768                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   000109   7C00         MOV     R4,#0x0
   \   00010B   801C         SJMP    ??ZDP_SimpleDescMsg_10
    769                {
    770                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_11:
   \   00010D   EC           MOV     A,R4
   \   00010E   C3           CLR     C
   \   00010F   33           RLC     A
   \   000110   F8           MOV     R0,A
   \   000111   E4           CLR     A
   \   000112   33           RLC     A
   \   000113   F9           MOV     R1,A
   \   000114   85..82       MOV     DPL,?V0 + 0
   \   000117   85..83       MOV     DPH,?V0 + 1
   \   00011A   12....       LCALL   ?Subroutine5 & 0xFFFF
    771                  if ( protoVer != ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_14:
   \   00011D   6009         JZ      ??CrossCallReturnLabel_12
    772                  {
    773                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   00011F   85..82       MOV     DPL,?V0 + 0
   \   000122   85..83       MOV     DPH,?V0 + 1
   \   000125   12....       LCALL   ?Subroutine4 & 0xFFFF
    774                }
    775              }
   \                     ??CrossCallReturnLabel_12:
   \   000128   0C           INC     R4
   \                     ??ZDP_SimpleDescMsg_10:
   \   000129   85..82       MOV     DPL,?V0 + 0
   \   00012C   85..83       MOV     DPH,?V0 + 1
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   FD           MOV     R5,A
   \   000137   EC           MOV     A,R4
   \   000138   C3           CLR     C
   \   000139   9D           SUBB    A,R5
   \   00013A   40D1         JC      ??ZDP_SimpleDescMsg_11
    776              }
    777              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_9:
   \   00013C   E5..         MOV     A,?V0 + 0
   \   00013E   2409         ADD     A,#0x9
   \   000140   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000143   12....       LCALL   ?Subroutine32 & 0xFFFF
    778              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_72:
   \   000146   8882         MOV     DPL,R0
   \   000148   8983         MOV     DPH,R1
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   603E         JZ      ??ZDP_SimpleDescMsg_12
    779              {
    780                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   00014D   7C00         MOV     R4,#0x0
   \                     ??ZDP_SimpleDescMsg_13:
   \   00014F   85..82       MOV     DPL,?V0 + 0
   \   000152   85..83       MOV     DPH,?V0 + 1
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   FD           MOV     R5,A
   \   000160   EC           MOV     A,R4
   \   000161   C3           CLR     C
   \   000162   9D           SUBB    A,R5
   \   000163   5026         JNC     ??ZDP_SimpleDescMsg_12
    781                {
    782                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000165   EC           MOV     A,R4
   \   000166   C3           CLR     C
   \   000167   33           RLC     A
   \   000168   F8           MOV     R0,A
   \   000169   E4           CLR     A
   \   00016A   33           RLC     A
   \   00016B   F9           MOV     R1,A
   \   00016C   85..82       MOV     DPL,?V0 + 0
   \   00016F   85..83       MOV     DPH,?V0 + 1
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   12....       LCALL   ?Subroutine5 & 0xFFFF
    783                  if ( protoVer != ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_15:
   \   000178   600C         JZ      ??CrossCallReturnLabel_13
    784                  {
    785                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   00017A   85..82       MOV     DPL,?V0 + 0
   \   00017D   85..83       MOV     DPH,?V0 + 1
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   12....       LCALL   ?Subroutine4 & 0xFFFF
    786                }
    787              }
   \                     ??CrossCallReturnLabel_13:
   \   000186   0C           INC     R4
   \   000187   80C6         SJMP    ??ZDP_SimpleDescMsg_13
    788            }
    789            }
    790            else
    791            {
    792              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_6:
   \   000189   E4           CLR     A
   \   00018A   F0           MOVX    @DPTR,A
    793            }
    794          
    795            return fillAndSend( &TransSeq, dstAddr, clusterID, len );
   \                     ??ZDP_SimpleDescMsg_12:
   \   00018B                ; Setup parameters for call to function fillAndSend
   \   00018B   78..         MOV     R0,#?V0 + 2
   \   00018D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000190   EA           MOV     A,R2
   \   000191   F9           MOV     R1,A
   \   000192   AC..         MOV     R4,?V0 + 4
   \   000194   AD..         MOV     R5,?V0 + 5
   \   000196   7402         MOV     A,#0x2
   \   000198   12....       LCALL   ?XSTACK_DISP0_8
   \   00019B   AA82         MOV     R2,DPL
   \   00019D   AB83         MOV     R3,DPH
   \   00019F   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   0001A2   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   0001A4   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001A7   7402         MOV     A,#0x2
   \   0001A9   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_5:
   \   0001AC   7401         MOV     A,#0x1
   \   0001AE   02....       LJMP    ?Subroutine44 & 0xFFFF
    796          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F8           MOV     R0,A
   \                     ??Subroutine25_0:
   \   000001   E5..         MOV     A,?V0 + 1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   02....       LJMP    ?Subroutine48 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000006   7401         MOV     A,#0x1
   \   000008   6B           XRL     A,R3
   \   000009   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   A3           INC     DPTR
   \                     ??Subroutine4_0:
   \   000004   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000007   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00000B   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   0E           INC     R6
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET
    797          
    798          /*********************************************************************
    799           * @fn          ZDP_EPRsp
    800           *
    801           * @brief       This builds and send an endpoint list. Used in
    802           *              Active_EP_rsp and Match_Desc_Rsp
    803           *              message.  This function sends unicast message to the
    804           *              requesting device.
    805           *
    806           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    807           * @param       dstAddr - destination address
    808           * @param       Status - message status (ZDP_SUCCESS or other)
    809           * @param       nwkAddr - Device's short address that this response describes
    810           * @param       Count - number of endpoint/interfaces in list
    811           * @param       pEPIntfList - Array of Endpoint/Interfaces
    812           * @param       SecurityEnable - Security Options
    813           *
    814           * @return      afStatus_t
    815           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    816          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    817                                  byte Status, uint16 nwkAddr, byte Count,
    818                                  byte *pEPList,
    819                                  byte SecurityEnable )
    820          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   8C..         MOV     ?V0 + 6,R4
   \   000018   8D..         MOV     ?V0 + 7,R5
   \   00001A   7411         MOV     A,#0x11
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FD           MOV     R5,A
   \   000021   7412         MOV     A,#0x12
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000029   7414         MOV     A,#0x14
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FC           MOV     R4,A
   \   000030   7415         MOV     A,#0x15
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine12 & 0xFFFF
    821            byte *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_34:
   \   000038   FB           MOV     R3,A
    822            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \   000039   75..04       MOV     ?V0 + 3,#0x4
    823            byte txOptions;
    824          
    825            if ( MsgType == Match_Desc_rsp )
   \   00003C   7406         MOV     A,#0x6
   \   00003E   6E           XRL     A,R6
   \   00003F   7003         JNZ     ??ZDP_EPRsp_0
   \   000041   7480         MOV     A,#-0x80
   \   000043   6F           XRL     A,R7
   \                     ??ZDP_EPRsp_0:
   \   000044   7005         JNZ     ??ZDP_EPRsp_1
    826              txOptions = AF_MSG_ACK_REQUEST;
   \   000046   75..10       MOV     ?V0 + 4,#0x10
   \   000049   8003         SJMP    ??ZDP_EPRsp_2
    827            else
    828              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00004B   75..00       MOV     ?V0 + 4,#0x0
    829          
    830              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   00004E   ED           MOV     A,R5
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
    831            *pBuf++ = LO_UINT16( nwkAddr );
   \   000055   E8           MOV     A,R0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
    832            *pBuf++ = HI_UINT16( nwkAddr );
   \   000058   E9           MOV     A,R1
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   AA82         MOV     R2,DPL
   \   00005D   AB83         MOV     R3,DPH
    833          
    834            *pBuf++ = Count;   // Endpoint/Interface count
   \   00005F   EC           MOV     A,R4
   \   000060   F0           MOVX    @DPTR,A
    835          
    836            if ( Count )
   \   000061   6024         JZ      ??ZDP_EPRsp_3
    837            {
    838              len += Count;
   \   000063   7404         MOV     A,#0x4
   \   000065   2C           ADD     A,R4
   \   000066   F5..         MOV     ?V0 + 3,A
    839              osal_memcpy( pBuf, pEPList, Count );
   \   000068                ; Setup parameters for call to function osal_memcpy
   \   000068   75..00       MOV     ?V0 + 2,#0x0
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000070   7D00         MOV     R5,#0x0
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   A3           INC     DPTR
   \   000077   0A           INC     R2
   \   000078   AB83         MOV     R3,DPH
   \   00007A   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   00007D   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   00007F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
    840            }
    841          
    842            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000087   E5..         MOV     A,?V0 + 4
   \   000089   90....       MOV     DPTR,#??ZDP_TxOptions
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D                ; Setup parameters for call to function fillAndSend
   \   00008D   8E..         MOV     ?V0 + 0,R6
   \   00008F   8F..         MOV     ?V0 + 1,R7
   \   000091   78..         MOV     R0,#?V0 + 0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   A9..         MOV     R1,?V0 + 3
   \   000098   AC..         MOV     R4,?V0 + 6
   \   00009A   AD..         MOV     R5,?V0 + 7
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   AA82         MOV     R2,DPL
   \   0000A3   AB83         MOV     R3,DPH
   \   0000A5   90....       MOV     DPTR,#(??fillAndSend & 0xffff)
   \   0000A8   74..         MOV     A,#((??fillAndSend >> 16) & 0xff)
   \   0000AA   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000AD   7402         MOV     A,#0x2
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B2   E4           CLR     A
   \   0000B3   90....       MOV     DPTR,#??ZDP_TxOptions
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9                REQUIRE ?Subroutine45
   \   0000B9                ; // Fall through to label ?Subroutine45
    843          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FA           MOV     R2,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET
    844          
    845          #if defined ( ZDO_USERDESC_RESPONSE )
    846          /*********************************************************************
    847           * @fn          ZDP_UserDescRsp
    848           *
    849           * @brief       Build and send the User Decriptor Response.
    850           *
    851           *
    852           * @param       dstAddr - destination address
    853           * @param       nwkAddrOfInterest -
    854           * @param       userDesc -
    855           * @param       SecurityEnable - Security Options
    856           *
    857           * @return      ZStatus_t
    858           */
    859          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
    860                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    861                          byte SecurityEnable )
    862          {
    863            byte *pBuf = ZDP_TmpBuf;
    864            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    865          
    866            len += userDesc->len;
    867          
    868            *pBuf++ = ZSUCCESS;
    869          
    870            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
    871            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
    872          
    873            *pBuf++ = userDesc->len;
    874            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
    875          
    876            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
    877          }
    878          #endif // ZDO_USERDESC_RESPONSE
    879          
    880          #if defined ( ZDO_SERVERDISC_RESPONSE )
    881          /*********************************************************************
    882           * @fn          ZDP_ServerDiscRsp
    883           *
    884           * @brief       Build and send the Server_Discovery_rsp response.
    885           *
    886           * @param       transID - Transaction sequence number of request.
    887           * @param       dstAddr - Network Destination Address.
    888           * @param       status - Status of response to request.
    889           * @param       aoi - Network Address of Interest of request.
    890           * @param       serverMask - Bit map of service(s) being sought.
    891           * @param       SecurityEnable - Security Options
    892           *
    893           * @return      ZStatus_t
    894           */
    895          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
    896                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    897          {
    898            const byte len = 1  + 2;  // status + aoi + mask.
    899            byte *pBuf = ZDP_TmpBuf;
    900          
    901            *pBuf++ = status;
    902          
    903            *pBuf++ = LO_UINT16( serverMask );
    904            *pBuf++ = HI_UINT16( serverMask );
    905          
    906            return (ZStatus_t)fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
    907          }
    908          #endif // ZDO_USERDESC_RESPONSE
    909          
    910          /*********************************************************************
    911           * @fn          ZDP_GenericRsp
    912           *
    913           * @brief       Sends a response message with only the parameter status
    914           *              byte and the addr of interest for data.
    915           *              This function sends unicast message to the
    916           *              requesting device.
    917           *
    918           * @param       dstAddr - destination address
    919           * @param       status  - generic status for response
    920           * @param       aoi     - address of interest
    921           * @param       dstAddr - destination address
    922           * @param       rspId   - response cluster ID
    923           * @param       SecurityEnable - Security Options
    924           *
    925           * @return      afStatus_t
    926           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    927          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
    928                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
    929          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   740B         MOV     A,#0xb
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00001E   740D         MOV     A,#0xd
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine12 & 0xFFFF
    930            uint8 len;
    931          
    932            ZDP_TmpBuf[0] = status;
   \                     ??CrossCallReturnLabel_35:
   \   000026   F583         MOV     DPH,A
   \   000028   8A82         MOV     DPL,R2
   \   00002A   EC           MOV     A,R4
   \   00002B   F0           MOVX    @DPTR,A
    933            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   00002C   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F583         MOV     DPH,A
   \   000035   8A82         MOV     DPL,R2
   \   000037   A3           INC     DPTR
   \   000038   E8           MOV     A,R0
   \   000039   F0           MOVX    @DPTR,A
    934            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   00003A   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00003D   E9           MOV     A,R1
   \   00003E   F0           MOVX    @DPTR,A
    935          
    936            if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
   \   00003F                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00003F   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000042   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000044   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000047   E9           MOV     A,R1
   \   000048   6401         XRL     A,#0x1
   \   00004A   600A         JZ      ??ZDP_GenericRsp_0
    937            {
    938              // Length byte
    939              ZDP_TmpBuf[3] = 0;
   \   00004C   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00004F   A3           INC     DPTR
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
    940              len = 4;
   \   000052   7904         MOV     R1,#0x4
   \   000054   8002         SJMP    ??ZDP_GenericRsp_1
    941            }
    942            else
    943            {
    944              len = 3;
   \                     ??ZDP_GenericRsp_0:
   \   000056   7903         MOV     R1,#0x3
    945            }
    946          
    947          
    948            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \                     ??ZDP_GenericRsp_1:
   \   000058                ; Setup parameters for call to function fillAndSend
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   EE           MOV     A,R6
   \   00005E   FC           MOV     R4,A
   \   00005F   EF           MOV     A,R7
   \   000060   02....       LJMP    ?Subroutine49 & 0xFFFF
    949          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#??ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    950          
    951          /*********************************************************************
    952           * Binding
    953           */
    954          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    955          /*********************************************************************
    956           * @fn          ZDP_EndDeviceBindReq
    957           *
    958           * @brief       This builds and sends a End_Device_Bind_req message.
    959           *              This function sends a unicast message.
    960           *
    961           * @param       dstAddr - destination address
    962           * @param       LocalCoordinator - short address of local coordinator
    963           * @param       epIntf - Endpoint/Interface of Simple Desc
    964           * @param       ProfileID - Profile ID
    965           *
    966           *   The Input cluster list is the opposite of what you would think.
    967           *   This is the output cluster list of this device
    968           * @param       NumInClusters - number of input clusters
    969           * @param       InClusterList - input cluster ID list
    970           *
    971           *   The Output cluster list is the opposite of what you would think.
    972           *   This is the input cluster list of this device
    973           * @param       NumOutClusters - number of output clusters
    974           * @param       OutClusterList - output cluster ID list
    975           *
    976           * @param       SecurityEnable - Security Options
    977           *
    978           * @return      afStatus_t
    979           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    980          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
    981                                           uint16 LocalCoordinator,
    982                                           byte endPoint,
    983                                           uint16 ProfileID,
    984                                           byte NumInClusters, cId_t *InClusterList,
    985                                           byte NumOutClusters, cId_t *OutClusterList,
    986                                           byte SecurityEnable )
    987          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8C..         MOV     ?V0 + 0,R4
   \   00001E   8D..         MOV     ?V0 + 1,R5
   \   000020   7413         MOV     A,#0x13
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000028   7415         MOV     A,#0x15
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 7,A
   \   000030   7418         MOV     A,#0x18
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 6,A
    988            uint8 *pBuf = ZDP_TmpBuf;
   \   000038   12....       LCALL   ?Subroutine15 & 0xFFFF
    989            uint8 i, len;
    990            uint8 *ieeeAddr;
    991            uint8 protoVer = NLME_GetProtocolVersion();
   \                     ??CrossCallReturnLabel_103:
   \   00003B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003E   E9           MOV     A,R1
   \   00003F   F5..         MOV     ?V0 + 5,A
    992          
    993            if ( protoVer != ZB_PROT_V1_0 )
   \   000041   7401         MOV     A,#0x1
   \   000043   65..         XRL     A,?V0 + 5
   \   000045   6007         JZ      ??ZDP_EndDeviceBindReq_0
    994            {
    995              // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
    996              len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   \   000047   75..0F       MOV     ?V0 + 4,#0xf
   \   00004A   7802         MOV     R0,#0x2
   \   00004C   8005         SJMP    ??ZDP_EndDeviceBindReq_1
    997            }
    998            else
    999            {
   1000              // LocalCoordinator + ep + ProfileID +  NumInClusters + NumOutClusters.
   1001              len = 2 + 1 + 2 + 1 + 1;
   \                     ??ZDP_EndDeviceBindReq_0:
   \   00004E   75..07       MOV     ?V0 + 4,#0x7
   \   000051   7801         MOV     R0,#0x1
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000053   E5..         MOV     A,?V0 + 6
   \   000055   25..         ADD     A,?V0 + 7
   \   000057   F5F0         MOV     B,A
   \   000059   E8           MOV     A,R0
   \   00005A   A4           MUL     AB
   \   00005B   25..         ADD     A,?V0 + 4
   \   00005D   F5..         MOV     ?V0 + 4,A
   1002            }
   1003          
   1004            len += (NumInClusters + NumOutClusters) * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
   1005            if ( len >= ZDP_BUF_SZ-1 )
   \   00005F   C3           CLR     C
   \   000060   944F         SUBB    A,#0x4f
   \   000062   4005         JC      ??ZDP_EndDeviceBindReq_2
   1006            {
   1007              return afStatus_MEM_FAIL;
   \   000064   7981         MOV     R1,#-0x7f
   \   000066   02....       LJMP    ??ZDP_EndDeviceBindReq_3 & 0xFFFF
   1008            }
   1009          
   1010            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000069   85..82       MOV     DPL,?V0 + 2
   \   00006C   85..83       MOV     DPH,?V0 + 3
   \   00006F   E5..         MOV     A,?V0 + 0
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   1011            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000073   E5..         MOV     A,?V0 + 1
   \   000075   12....       LCALL   ?Subroutine23 & 0xFFFF
   1012          
   1013            if ( protoVer != ZB_PROT_V1_0 )
   \                     ??CrossCallReturnLabel_52:
   \   000078   7401         MOV     A,#0x1
   \   00007A   65..         XRL     A,?V0 + 5
   \   00007C   601C         JZ      ??ZDP_EndDeviceBindReq_4
   1014            {
   1015              ieeeAddr = NLME_GetExtAddr();
   1016              pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   00007E                ; Setup parameters for call to function osal_cpyExtAddr
   \   00007E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00007E   90....       MOV     DPTR,#(NLME_GetExtAddr & 0xffff)
   \   000081   74..         MOV     A,#((NLME_GetExtAddr >> 16) & 0xff)
   \   000083   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000086   EA           MOV     A,R2
   \   000087   FC           MOV     R4,A
   \   000088   EB           MOV     A,R3
   \   000089   FD           MOV     R5,A
   \   00008A   AA..         MOV     R2,?V0 + 2
   \   00008C   AB..         MOV     R3,?V0 + 3
   \   00008E   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   000091   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   000093   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000096   8A..         MOV     ?V0 + 2,R2
   \   000098   8B..         MOV     ?V0 + 3,R3
   1017            }
   1018          
   1019            *pBuf++ = endPoint;
   \                     ??ZDP_EndDeviceBindReq_4:
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   85..82       MOV     DPL,?V0 + 2
   \   0000A4   85..83       MOV     DPH,?V0 + 3
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   A3           INC     DPTR
   1020          
   1021            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   0000A9   EE           MOV     A,R6
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   1022            *pBuf++ = HI_UINT16( ProfileID );
   \   0000AC   EF           MOV     A,R7
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   1023          
   1024            *pBuf++ = NumInClusters; // Input cluster list
   \   0000AF   E5..         MOV     A,?V0 + 7
   \   0000B1   12....       LCALL   ?Subroutine22 & 0xFFFF
   1025            for ( i = 0; i < NumInClusters; ++i )
   \                     ??CrossCallReturnLabel_48:
   \   0000B4   801A         SJMP    ??ZDP_EndDeviceBindReq_5
   1026            {
   1027              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000B6   EA           MOV     A,R2
   \   0000B7   C3           CLR     C
   \   0000B8   33           RLC     A
   \   0000B9   F8           MOV     R0,A
   \   0000BA   E4           CLR     A
   \   0000BB   33           RLC     A
   \   0000BC   F9           MOV     R1,A
   \   0000BD   7416         MOV     A,#0x16
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ?Subroutine0 & 0xFFFF
   1028              if (protoVer != ZB_PROT_V1_0)  {
   \                     ??CrossCallReturnLabel_0:
   \   0000C5   6008         JZ      ??CrossCallReturnLabel_5
   1029                *pBuf++ = HI_UINT16(InClusterList[i]);
   \   0000C7   7416         MOV     A,#0x16
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ?Subroutine2 & 0xFFFF
   1030              }
   1031            }
   \                     ??CrossCallReturnLabel_5:
   \   0000CF   0A           INC     R2
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000D0   EA           MOV     A,R2
   \   0000D1   C3           CLR     C
   \   0000D2   95..         SUBB    A,?V0 + 7
   \   0000D4   40E0         JC      ??ZDP_EndDeviceBindReq_6
   1032          
   1033            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000D6   85..82       MOV     DPL,?V0 + 2
   \   0000D9   85..83       MOV     DPH,?V0 + 3
   \   0000DC   E5..         MOV     A,?V0 + 6
   \   0000DE   12....       LCALL   ?Subroutine22 & 0xFFFF
   1034            for ( i = 0; i < NumOutClusters; ++i )
   \                     ??CrossCallReturnLabel_49:
   \   0000E1   801A         SJMP    ??ZDP_EndDeviceBindReq_7
   1035            {
   1036              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000E3   EA           MOV     A,R2
   \   0000E4   C3           CLR     C
   \   0000E5   33           RLC     A
   \   0000E6   F8           MOV     R0,A
   \   0000E7   E4           CLR     A
   \   0000E8   33           RLC     A
   \   0000E9   F9           MOV     R1,A
   \   0000EA   7419         MOV     A,#0x19
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL   ?Subroutine0 & 0xFFFF
   1037              if (protoVer != ZB_PROT_V1_0)  {
   \                     ??CrossCallReturnLabel_1:
   \   0000F2   6008         JZ      ??CrossCallReturnLabel_6
   1038                *pBuf++ = HI_UINT16(OutClusterList[i]);
   \   0000F4   7419         MOV     A,#0x19
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL   ?Subroutine2 & 0xFFFF
   1039              }
   1040            }
   \                     ??CrossCallReturnLabel_6:
   \   0000FC   0A           INC     R2
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0000FD   EA           MOV     A,R2
   \   0000FE   C3           CLR     C
   \   0000FF   95..         SUBB    A,?V0 + 6
   \   000101   40E0         JC      ??ZDP_EndDeviceBindReq_8
   1041          
   1042            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   000103                ; Setup parameters for call to function fillAndSend
   \   000103   75..20       MOV     ?V0 + 0,#0x20
   \   000106   75..00       MOV     ?V0 + 1,#0x0
   \   000109   78..         MOV     R0,#?V0 + 0
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010E   A9..         MOV     R1,?V0 + 4
   \   000110   7403         MOV     A,#0x3
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000118   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00011B   7402         MOV     A,#0x2
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000120   7403         MOV     A,#0x3
   \   000122   02....       LJMP    ?Subroutine45 & 0xFFFF
   1043          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   7A00         MOV     R2,#0x0
   \   000005   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000006   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000003   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000006   65..         XRL     A,?V0 + 5
   \   000008   22           RET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FB           MOV     R3,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   8B82         MOV     DPL,R3
   \   000008   22           RET
   1044          #endif // ZDO_ENDDEVICEBIND_REQUEST
   1045          
   1046          #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
   1047          /*********************************************************************
   1048           * @fn          ZDP_BindUnbindReq
   1049           *
   1050           * @brief       This builds and send a Bind_req or Unbind_req message
   1051           *              Depending on the ClusterID. This function
   1052           *              sends a unicast message to the local coordinator.
   1053           *
   1054           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1055           * @param       dstAddr - destination address of the message
   1056           * @param       SourceAddr - source 64 bit address of the binding
   1057           * @param       SrcEPIntf - Source endpoint/interface
   1058           * @param       ClusterID - Binding cluster ID
   1059           * @param       DestinationAddr - destination 64 bit addr of binding
   1060           * @param       DstEPIntf - destination endpoint/interface
   1061           * @param       SecurityEnable - Security Options
   1062           *
   1063           * @return      afStatus_t
   1064           */
   1065          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   1066                                        byte *SourceAddr, byte SrcEndPoint,
   1067                                        cId_t ClusterID,
   1068                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1069                                        byte SecurityEnable )
   1070          {
   1071            uint8 *pBuf = ZDP_TmpBuf;
   1072            uint8  protoVer;
   1073            byte len;
   1074          
   1075            protoVer = NLME_GetProtocolVersion();
   1076          
   1077            if ( protoVer == ZB_PROT_V1_0 )
   1078            {
   1079              // SourceAddr + SrcEPIntf + ClusterID +  DestinationAddr + DstEPIntf.
   1080              len = Z_EXTADDR_LEN + 1 + sizeof( uint8 ) + Z_EXTADDR_LEN + 1;
   1081            }
   1082            else
   1083            {
   1084              // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1085              len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   1086              if ( destinationAddr->addrMode == Addr64Bit )
   1087                len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   1088              else if ( destinationAddr->addrMode == AddrGroup )
   1089                len += sizeof ( uint16 );
   1090            }
   1091          
   1092            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   1093            *pBuf++ = SrcEndPoint;
   1094          
   1095            *pBuf++ = LO_UINT16( ClusterID );
   1096            if ( protoVer != ZB_PROT_V1_0 )
   1097            {
   1098              *pBuf++ = HI_UINT16( ClusterID );
   1099          
   1100              *pBuf++ = destinationAddr->addrMode;
   1101              if ( destinationAddr->addrMode == Addr64Bit )
   1102              {
   1103                pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1104                *pBuf = DstEndPoint;
   1105              }
   1106              else if ( destinationAddr->addrMode == AddrGroup )
   1107              {
   1108                *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   1109                *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   1110              }
   1111            }
   1112            else
   1113            {
   1114              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1115              *pBuf = DstEndPoint;
   1116            }
   1117          
   1118            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   1119          }
   1120          #endif // ZDO_BIND_UNBIND_REQUEST
   1121          
   1122          /*********************************************************************
   1123           * Network Management
   1124           */
   1125          
   1126          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
   1127          /*********************************************************************
   1128           * @fn          ZDP_MgmtNwkDiscReq
   1129           *
   1130           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1131           *              function sends a unicast message.
   1132           *
   1133           * @param       dstAddr - destination address of the message
   1134           * @param       ScanChannels - 32 bit address bit map
   1135           * @param       StartIndex - Starting index within the reporting network
   1136           *                           list
   1137           * @param       SecurityEnable - Security Options
   1138           *
   1139           * @return      afStatus_t
   1140           */
   1141          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   1142                                         uint32 ScanChannels,
   1143                                         byte ScanDuration,
   1144                                         byte StartIndex,
   1145                                         byte SecurityEnable )
   1146          {
   1147            byte *pBuf = ZDP_TmpBuf;
   1148            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1149          
   1150            *pBuf++ = BREAK_UINT32( ScanChannels, 0 );
   1151            *pBuf++ = BREAK_UINT32( ScanChannels, 1 );
   1152            *pBuf++ = BREAK_UINT32( ScanChannels, 2 );
   1153            *pBuf++ = BREAK_UINT32( ScanChannels, 3 );
   1154          
   1155            *pBuf++ = ScanDuration;
   1156            *pBuf = StartIndex;
   1157          
   1158            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   1159          }
   1160          #endif // ZDO_MGMT_NWKDISC_REQUEST
   1161          
   1162          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
   1163          /*********************************************************************
   1164           * @fn          ZDP_MgmtDirectJoinReq
   1165           *
   1166           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1167           *              function sends a unicast message.
   1168           *
   1169           * @param       dstAddr - destination address of the message
   1170           * @param       deviceAddr - 64 bit IEEE Address
   1171           * @param       SecurityEnable - Security Options
   1172           *
   1173           * @return      afStatus_t
   1174           */
   1175          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   1176                                         byte *deviceAddr,
   1177                                         byte capInfo,
   1178                                         byte SecurityEnable )
   1179          {
   1180            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   1181            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   1182          
   1183            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   1184          }
   1185          #endif // ZDO_MGMT_JOINDIRECT_REQUEST
   1186          
   1187          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
   1188          /*********************************************************************
   1189           * @fn          ZDP_MgmtPermitJoinReq
   1190           *
   1191           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1192           *
   1193           * @param       dstAddr - destination address of the message
   1194           * @param       duration - Permit duration
   1195           * @param       TcSignificance - Trust Center Significance
   1196           *
   1197           * @return      afStatus_t
   1198           */
   1199          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   1200                                            byte TcSignificance, byte SecurityEnable )
   1201          {
   1202            // Build buffer
   1203            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   1204            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   1205          
   1206            // Send the message
   1207            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1208                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   1209          }
   1210          #endif // ZDO_MGMT_PERMIT_JOIN_REQUEST
   1211          
   1212          /*********************************************************************
   1213           * Network Management Responses
   1214           */
   1215          
   1216          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1217          /*********************************************************************
   1218           * @fn          ZDP_MgmtNwkDiscRsp
   1219           *
   1220           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1221           *              function sends a unicast message.
   1222           *
   1223           * @param       dstAddr - destination address of the message
   1224           * @param       Status - message status (ZDP_SUCCESS or other)
   1225           * @param       NetworkCount - Total number of networks found
   1226           * @param       StartIndex - Starting index within the reporting network
   1227           *                           list
   1228           * @param       NetworkListCount - number of network lists included
   1229           *                                 in this message
   1230           * @param       NetworkList - List of network descriptors
   1231           * @param       SecurityEnable - Security Options
   1232           *
   1233           * @return      afStatus_t
   1234           */
   1235          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   1236                                      byte Status,
   1237                                      byte NetworkCount,
   1238                                      byte StartIndex,
   1239                                      byte NetworkListCount,
   1240                                      networkDesc_t *NetworkList,
   1241                                      byte SecurityEnable )
   1242          {
   1243            byte *buf;
   1244            byte *pBuf;
   1245            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1246            byte idx;
   1247          
   1248            byte proVer = NLME_GetProtocolVersion();
   1249          
   1250            if ( proVer == ZB_PROT_V1_0 )
   1251            {
   1252              len += ((NetworkListCount - StartIndex) * ( ZDP_NETWORK_DISCRIPTOR_SIZE - 2 ));  // Four half bytes
   1253            }
   1254            else //Include the extended PanID
   1255            {
   1256              len += ((NetworkListCount - StartIndex) * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   1257            }
   1258          
   1259            buf = osal_mem_alloc( len+1 );
   1260            if ( buf == NULL )
   1261            {
   1262              return afStatus_MEM_FAIL;
   1263            }
   1264          
   1265            pBuf = buf+1;
   1266          
   1267            *pBuf++ = Status;
   1268            *pBuf++ = NetworkCount;
   1269            *pBuf++ = StartIndex;
   1270            *pBuf++ = NetworkListCount;
   1271          
   1272            for ( idx = StartIndex; idx < (NetworkListCount - StartIndex); idx++ )
   1273            {
   1274              if ( proVer == ZB_PROT_V1_0 )
   1275              {
   1276                *pBuf++  = LO_UINT16( NetworkList->panId );            // PANID
   1277                *pBuf++  = HI_UINT16( NetworkList->panId );
   1278              }
   1279              else
   1280              {
   1281                osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1282                pBuf += Z_EXTADDR_LEN;
   1283              }
   1284          
   1285              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1286              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1287              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1288              *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
   1289              *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
   1290          
   1291              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1292              {
   1293                *pBuf++ = TRUE;                         // Permit Joining
   1294              }
   1295              else
   1296              {
   1297                *pBuf++ = FALSE;
   1298              }
   1299          
   1300              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   1301            }
   1302          
   1303            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   1304          }
   1305          #endif // ZDO_MGMT_NWKDISC_RESPONSE
   1306          
   1307          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
   1308          /*********************************************************************
   1309           * @fn          ZDP_MgmtLqiRsp
   1310           *
   1311           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1312           *              function sends a unicast message.
   1313           *
   1314           * @param       dstAddr - destination address of the message
   1315           * @param       Status - message status (ZDP_SUCCESS or other)
   1316           * @param       NeighborLqiEntries - Total number of entries found
   1317           * @param       StartIndex - Starting index within the reporting list
   1318           * @param       NeighborLqiCount - number of lists included
   1319           *                                 in this message
   1320           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1321           *                is the list to be sent, not the entire list
   1322           * @param       SecurityEnable - true if secure
   1323           *
   1324           * @return      ZStatus_t
   1325           */
   1326          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   1327                                    byte Status,
   1328                                    byte NeighborLqiEntries,
   1329                                    byte StartIndex,
   1330                                    byte NeighborLqiCount,
   1331                                    ZDP_MgmtLqiItem_t* NeighborList,
   1332                                    byte SecurityEnable )
   1333          {
   1334            ZDP_MgmtLqiItem_t* list = NeighborList;
   1335            byte *buf, *pBuf;
   1336            byte len, x;
   1337            byte proVer = NLME_GetProtocolVersion();
   1338          
   1339            if ( ZSuccess != Status )
   1340            {
   1341              ZDP_TmpBuf[0] = Status;
   1342              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1343            }
   1344          
   1345            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1346            //  neighbor LQI data.
   1347            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * (( proVer == ZB_PROT_V1_0 ) ? ZDP_MGMTLQI_SIZE : ZDP_MGMTLQI_EXTENDED_SIZE));
   1348          
   1349            buf = osal_mem_alloc( len+1 );
   1350            if ( buf == NULL )
   1351            {
   1352              return afStatus_MEM_FAIL;
   1353            }
   1354          
   1355            pBuf = buf+1;
   1356          
   1357            *pBuf++ = Status;
   1358            *pBuf++ = NeighborLqiEntries;
   1359            *pBuf++ = StartIndex;
   1360            *pBuf++ = NeighborLqiCount;
   1361          
   1362            for ( x = 0; x < NeighborLqiCount; x++ )
   1363            {
   1364              if ( proVer == ZB_PROT_V1_0 )
   1365              {
   1366                *pBuf++  = LO_UINT16( list->panID );            // PANID
   1367                *pBuf++  = HI_UINT16( list->panID );
   1368              }
   1369              else
   1370              {
   1371                osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   1372                pBuf += Z_EXTADDR_LEN;
   1373              }
   1374          
   1375              // EXTADDR
   1376              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   1377          
   1378              // NWKADDR
   1379              *pBuf++ = LO_UINT16( list->nwkAddr );
   1380              *pBuf++ = HI_UINT16( list->nwkAddr );
   1381          
   1382              // DEVICETYPE
   1383              *pBuf = list->devType;
   1384          
   1385              // RXONIDLE
   1386              *pBuf |= (uint8)(list->rxOnIdle << 2);
   1387          
   1388              if ( proVer == ZB_PROT_V1_0 )
   1389              {
   1390                // RELATIONSHIP
   1391                *pBuf |= (uint8)(list->relation << 3);
   1392          
   1393                // PERMITJOINING
   1394                *pBuf++ |= (uint8)(list->permit << 5);
   1395          
   1396                // DEPTH
   1397                *pBuf++ = list->depth;
   1398              }
   1399          
   1400              else
   1401              {
   1402                // RELATIONSHIP
   1403                *pBuf++ |= (uint8)(list->relation << 4);
   1404          
   1405                // PERMITJOINING
   1406                *pBuf++ = (uint8)(list->permit);
   1407          
   1408                // DEPTH
   1409                *pBuf++ = list->depth;
   1410              }
   1411          
   1412              // LQI
   1413              *pBuf++ = list->lqi;
   1414          
   1415              list++; // next list entry
   1416            }
   1417          
   1418            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   1419          }
   1420          #endif // ZDO_MGMT_LQI_RESPONSE && RTR_NWK
   1421          
   1422          #if defined ( ZDO_MGMT_RTG_RESPONSE )
   1423          /*********************************************************************
   1424           * @fn          ZDP_MgmtRtgRsp
   1425           *
   1426           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1427           *              function sends a unicast message.
   1428           *
   1429           * @param       dstAddr - destination address of the message
   1430           * @param       Status - message status (ZDP_SUCCESS or other)
   1431           * @param       RoutingTableEntries - Total number of entries
   1432           * @param       StartIndex - Starting index within the reporting list
   1433           * @param       RoutingTableListCount - number of entries included
   1434           *                                      in this message
   1435           * @param       RoutingTableList - List of Routing Table entries
   1436           * @param       SecurityEnable - true to enable security for this message
   1437           *
   1438           * @return      ZStatus_t
   1439           */
   1440          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   1441                                      byte Status,
   1442                                      byte RoutingTableEntries,
   1443                                      byte StartIndex,
   1444                                      byte RoutingListCount,
   1445                                      rtgItem_t *RoutingTableList,
   1446                                      byte SecurityEnable )
   1447          {
   1448            byte *buf;
   1449            byte *pBuf;
   1450            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1451            byte len = 1 + 1 + 1 + 1;
   1452            byte x;
   1453          
   1454            // Add an array for Routing List data
   1455            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   1456          
   1457            buf = osal_mem_alloc( (short)(len+1) );
   1458            if ( buf == NULL )
   1459            {
   1460              return afStatus_MEM_FAIL;
   1461            }
   1462          
   1463            pBuf = buf+1;
   1464          
   1465            *pBuf++ = Status;
   1466            *pBuf++ = RoutingTableEntries;
   1467            *pBuf++ = StartIndex;
   1468            *pBuf++ = RoutingListCount;
   1469          
   1470            for ( x = 0; x < RoutingListCount; x++ )
   1471            {
   1472              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   1473              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   1474              *pBuf++ = RoutingTableList->status;
   1475              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   1476              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   1477              RoutingTableList++;    // Move to next list entry
   1478            }
   1479          
   1480            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   1481          }
   1482          #endif // ZDO_MGMT_RTG_RESPONSE
   1483          
   1484          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
   1485          /*********************************************************************
   1486           * @fn          ZDP_MgmtBindRsp
   1487           *
   1488           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1489           *              function sends a unicast message.
   1490           *
   1491           * @param       dstAddr - destination address of the message
   1492           * @param       Status - message status (ZDP_SUCCESS or other)
   1493           * @param       BindingTableEntries - Total number of entries
   1494           * @param       StartIndex - Starting index within the reporting list
   1495           * @param       BindingTableListCount - number of entries included
   1496           *                                 in this message
   1497           * @param       BindingTableList - List of Binding Table entries
   1498           * @param       SecurityEnable - Security Options
   1499           *
   1500           * @return      ZStatus_t
   1501           */
   1502          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   1503                                      byte Status,
   1504                                      byte BindingTableEntries,
   1505                                      byte StartIndex,
   1506                                      byte BindingTableListCount,
   1507                                      apsBindingItem_t *BindingTableList,
   1508                                      byte SecurityEnable )
   1509          {
   1510            uint8 *buf;
   1511            uint8 *pBuf;
   1512            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1513            uint8 len;    // Actual length varies due to different addrMode
   1514            uint8 x;
   1515            uint8 protoVer;
   1516            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1517            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1518          
   1519            protoVer = NLME_GetProtocolVersion();
   1520          
   1521            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1522            maxLen = 1 + 1 + 1 + 1;
   1523            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1524            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   1525          
   1526            if ( buf == NULL )
   1527            {
   1528              return afStatus_MEM_FAIL;
   1529            }
   1530          
   1531            pBuf = buf+1;
   1532          
   1533            *pBuf++ = Status;
   1534            *pBuf++ = BindingTableEntries;
   1535            *pBuf++ = StartIndex;
   1536            *pBuf++ = BindingTableListCount;
   1537          
   1538            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1539            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1540            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1541            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1542          
   1543            len = 1 + 1 + 1 + 1;
   1544            for ( x = 0; x < BindingTableListCount; x++ )
   1545            {
   1546              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1547              *pBuf++ = BindingTableList->srcEP;
   1548          
   1549              // Cluster ID
   1550              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1551          
   1552              if ( protoVer != ZB_PROT_V1_0 )
   1553              {
   1554                *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1555              }
   1556          
   1557              if ( protoVer == ZB_PROT_V1_0 )
   1558              {
   1559                len += ZDP_BINDINGENTRY_SIZE;
   1560                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1561                *pBuf++ = BindingTableList->dstEP;
   1562              }
   1563              else
   1564              {
   1565                *pBuf++ = BindingTableList->dstAddr.addrMode;
   1566                if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1567                {
   1568                  len += extZdpBindEntrySize;
   1569                  pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1570                 *pBuf++ = BindingTableList->dstEP;
   1571                }
   1572                else
   1573                {
   1574                  len += shortZdpBindEntrySize;
   1575                  *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1576                  *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1577                }
   1578              }
   1579              BindingTableList++;    // Move to next list entry
   1580            }
   1581          
   1582            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   1583          }
   1584          #endif // ZDO_MGMT_BIND_RESPONSE && REFLECTOR
   1585          
   1586          /*********************************************************************
   1587           * Callbacks from the APS layer
   1588           */
   1589          
   1590          /*********************************************************************
   1591           * @fn          ZDP_IncomingData
   1592           *
   1593           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1594           *              from the APS sub-layer to the ZDO.
   1595           *
   1596           * @param       pData - Incoming Message
   1597           *
   1598           * @return      none
   1599           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   1600          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1601          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1602            byte proVer = NLME_GetProtocolVersion();
   \   00000E                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00000E   90....       MOV     DPTR,#(NLME_GetProtocolVersion & 0xffff)
   \   000011   74..         MOV     A,#((NLME_GetProtocolVersion >> 16) & 0xff)
   \   000013   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000016   E9           MOV     A,R1
   \   000017   FC           MOV     R4,A
   1603            zAddrType_t addr;
   1604            zAddrType_t *srcAddr;
   1605            byte wasBroadcast;
   1606            cId_t clusterID;
   1607            byte asduLen;
   1608            byte *asdu;
   1609            byte SecurityUse;
   1610            byte TransSeq;
   1611          
   1612            addr.addrMode = Addr16Bit;
   \   000018   7408         MOV     A,#0x8
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   7402         MOV     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
   1613            addr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   E8           MOV     A,R0
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E9           MOV     A,R1
   \   000037   F0           MOVX    @DPTR,A
   1614            srcAddr = &addr;
   1615            wasBroadcast = pData->wasBroadcast;
   \   000038   EE           MOV     A,R6
   \   000039   240B         ADD     A,#0xb
   \   00003B   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00003E   F5..         MOV     ?V0 + 2,A
   1616            clusterID = pData->clusterId;
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FB           MOV     R3,A
   1617            SecurityUse = pData->SecurityUse;
   \   00004D   EE           MOV     A,R6
   \   00004E   240D         ADD     A,#0xd
   \   000050   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000053   F5..         MOV     ?V0 + 4,A
   1618          
   1619            if ( proVer == ZB_PROT_V1_0 )
   \   000055   7401         MOV     A,#0x1
   \   000057   6C           XRL     A,R4
   \   000058   701B         JNZ     ??ZDP_IncomingData_0
   1620            {
   1621            asduLen = pData->cmd.DataLength;
   \   00005A   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00005D   F5..         MOV     ?V0 + 3,A
   1622            asdu = pData->cmd.Data;
   \   00005F   EE           MOV     A,R6
   \   000060   2415         ADD     A,#0x15
   \   000062   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000065   FC           MOV     R4,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FD           MOV     R5,A
   1623            TransSeq = pData->cmd.TransSeqNumber;
   \   000069   EE           MOV     A,R6
   \   00006A   2412         ADD     A,#0x12
   \   00006C   F582         MOV     DPL,A
   \   00006E   EF           MOV     A,R7
   \   00006F   3400         ADDC    A,#0x0
   \   000071   F583         MOV     DPH,A
   \   000073   8020         SJMP    ??ZDP_IncomingData_1
   1624            }
   1625            else
   1626            {
   1627              asduLen = pData->cmd.DataLength-1;
   \                     ??ZDP_IncomingData_0:
   \   000075   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000078   14           DEC     A
   \   000079   F5..         MOV     ?V0 + 3,A
   1628              asdu = pData->cmd.Data+1;
   \   00007B   EE           MOV     A,R6
   \   00007C   2415         ADD     A,#0x15
   \   00007E   F582         MOV     DPL,A
   \   000080   EF           MOV     A,R7
   \   000081   3400         ADDC    A,#0x0
   \   000083   F583         MOV     DPH,A
   \   000085   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000088   8882         MOV     DPL,R0
   \   00008A   8983         MOV     DPH,R1
   \   00008C   A3           INC     DPTR
   \   00008D   AC82         MOV     R4,DPL
   \   00008F   AD83         MOV     R5,DPH
   1629              TransSeq = pData->cmd.Data[0];
   \   000091   8882         MOV     DPL,R0
   \   000093   8983         MOV     DPH,R1
   \                     ??ZDP_IncomingData_1:
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F9           MOV     R1,A
   1630            }
   1631          
   1632            switch ( clusterID )
   \   000097   8A..         MOV     ?V0 + 0,R2
   \   000099   8B..         MOV     ?V0 + 1,R3
   \   00009B   78..         MOV     R0,#?V0 + 0
   \   00009D   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDP_IncomingData>_0`:
   \   0000A0   0200         DW        2
   \   0000A2   0000         DW        0
   \   0000A4   0100         DW        1
   \   0000A6   ....         DW        ??ZDP_IncomingData_2
   \   0000A8   0580         DW        32773
   \   0000AA   0680         DW        32774
   \   0000AC   ....         DW        ??ZDP_IncomingData_3
   \   0000AE   0600         DW        6
   \   0000B0   0200         DW        2
   \   0000B2   ....         DW        ??ZDP_IncomingData_4
   \   0000B4   0300         DW        3
   \   0000B6   ....         DW        ??ZDP_IncomingData_5
   \   0000B8   0400         DW        4
   \   0000BA   ....         DW        ??ZDP_IncomingData_6
   \   0000BC   0500         DW        5
   \   0000BE   ....         DW        ??ZDP_IncomingData_7
   \   0000C0   0600         DW        6
   \   0000C2   ....         DW        ??ZDP_IncomingData_8
   \   0000C4   2080         DW        32800
   \   0000C6   ....         DW        ??ZDP_IncomingData_9
   \   0000C8   ....         DW        ??ZDP_IncomingData_10
   1633            {
   1634              // Response messages for our requests
   1635          
   1636          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1637              case NWK_addr_rsp:
   1638              case IEEE_addr_rsp:
   1639                ZDO_ProcessAddrRsp( srcAddr, clusterID, asdu, asduLen);
   1640                break;
   1641          #endif
   1642          
   1643          #if defined ( ZDO_NODEDESC_REQUEST )
   1644              case Node_Desc_rsp:
   1645                ZDO_ProcessNodeDescRsp( srcAddr, asdu );
   1646                break;
   1647          #endif
   1648          
   1649          #if defined ( ZDO_POWERDESC_REQUEST )
   1650              case Power_Desc_rsp:
   1651                ZDO_ProcessPowerDescRsp( srcAddr, asdu );
   1652                break;
   1653          #endif
   1654          
   1655          #if defined ( ZDO_SIMPLEDESC_REQUEST )
   1656              case Simple_Desc_rsp:
   1657                ZDO_ProcessSimpleDescRsp( srcAddr, asdu );
   1658                break;
   1659          #endif
   1660          
   1661          #if defined ( ZDO_MATCH_REQUEST ) || defined ( ZDO_ACTIVEEP_REQUEST )
   1662              case Match_Desc_rsp:
   1663              case Active_EP_rsp:
   1664                ZDO_ProcessEPListRsp( srcAddr, clusterID, asdu );
   \                     ??ZDP_IncomingData_3:
   \   0000CA                ; Setup parameters for call to function ZDO_ProcessEPListRsp
   \   0000CA   8C..         MOV     ?V0 + 0,R4
   \   0000CC   8D..         MOV     ?V0 + 1,R5
   \   0000CE   78..         MOV     R0,#?V0 + 0
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D3   EA           MOV     A,R2
   \   0000D4   FC           MOV     R4,A
   \   0000D5   EB           MOV     A,R3
   \   0000D6   FD           MOV     R5,A
   \   0000D7   7402         MOV     A,#0x2
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   AA82         MOV     R2,DPL
   \   0000DE   AB83         MOV     R3,DPH
   \   0000E0   90....       MOV     DPTR,#(ZDO_ProcessEPListRsp & 0xffff)
   \   0000E3   74..         MOV     A,#((ZDO_ProcessEPListRsp >> 16) & 0xff)
   \   0000E5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000ED   02....       LJMP    ??ZDP_IncomingData_11 & 0xFFFF
   1665                break;
   1666          #endif
   1667          
   1668          #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
   1669            #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
   1670              case Bind_rsp:
   1671              case Unbind_rsp:
   1672            #endif
   1673            #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST )
   1674              case End_Device_Bind_rsp:
   1675            #endif
   1676                ZDO_ProcessBindUnbindRsp( srcAddr, clusterID, *asdu, TransSeq );
   \                     ??ZDP_IncomingData_9:
   \   0000F0                ; Setup parameters for call to function ZDO_ProcessBindUnbindRsp
   \   0000F0   E9           MOV     A,R1
   \   0000F1   F5..         MOV     ?V0 + 0,A
   \   0000F3   78..         MOV     R0,#?V0 + 0
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F8   8C82         MOV     DPL,R4
   \   0000FA   8D83         MOV     DPH,R5
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F9           MOV     R1,A
   \   0000FE   EA           MOV     A,R2
   \   0000FF   FC           MOV     R4,A
   \   000100   EB           MOV     A,R3
   \   000101   FD           MOV     R5,A
   \   000102   7401         MOV     A,#0x1
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   AA82         MOV     R2,DPL
   \   000109   AB83         MOV     R3,DPH
   \   00010B   90....       MOV     DPTR,#(ZDO_ProcessBindUnbindRsp & 0xffff)
   \   00010E   74..         MOV     A,#((ZDO_ProcessBindUnbindRsp >> 16) & 0xff)
   \                     ??ZDP_IncomingData_12:
   \   000110   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000113   7401         MOV     A,#0x1
   \   000115   12....       LCALL   ?DEALLOC_XSTACK8
   \   000118   02....       LJMP    ??ZDP_IncomingData_11 & 0xFFFF
   1677                break;
   1678          #endif
   1679          
   1680          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
   1681              case Mgmt_NWK_Disc_rsp:
   1682                ZDO_ProcessMgmNwkDiscRsp( srcAddr, asdu, SecurityUse );
   1683                break;
   1684          #endif
   1685          
   1686          #if defined ( ZDO_MGMT_LQI_REQUEST )
   1687              case Mgmt_Lqi_rsp:
   1688                ZDO_ProcessMgmtLqiRsp( srcAddr, asdu, SecurityUse );
   1689                break;
   1690          #endif
   1691          
   1692          #if defined ( ZDO_MGMT_RTG_REQUEST )
   1693              case Mgmt_Rtg_rsp:
   1694                ZDO_ProcessMgmtRtgRsp( srcAddr, asdu, SecurityUse );
   1695                break;
   1696          #endif
   1697          
   1698          #if defined ( ZDO_MGMT_BIND_REQUEST )
   1699              case Mgmt_Bind_rsp:
   1700                ZDO_ProcessMgmtBindRsp( srcAddr, asdu, SecurityUse );
   1701                break;
   1702          #endif
   1703          
   1704          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
   1705              case Mgmt_Direct_Join_rsp:
   1706                ZDO_ProcessMgmtDirectJoinRsp( srcAddr, *asdu, SecurityUse );
   1707                break;
   1708          #endif
   1709          
   1710          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
   1711              case Mgmt_Leave_rsp:
   1712                ZDO_ProcessMgmtLeaveRsp( srcAddr, *asdu, SecurityUse );
   1713                break;
   1714          #endif
   1715          
   1716          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
   1717              case Mgmt_Permit_Join_rsp:
   1718                ZDO_ProcessMgmtPermitJoinRsp( srcAddr, *asdu, SecurityUse );
   1719                break;
   1720          #endif
   1721          
   1722          #if defined ( ZDO_USERDESC_REQUEST )
   1723              case User_Desc_rsp:
   1724                ZDO_ProcessUserDescRsp( srcAddr, asdu, SecurityUse );
   1725                break;
   1726          #endif
   1727          
   1728          #if defined ( ZDO_SERVERDISC_REQUEST )
   1729              case Server_Discovery_rsp:
   1730                ZDO_ProcessServerDiscRsp( srcAddr, asdu, SecurityUse );
   1731                break;
   1732          #endif
   1733          
   1734          #if defined( ZDO_CACHE )
   1735              case Discovery_Cache_rsp:
   1736              case Discovery_store_rsp:
   1737              case Remove_node_cache_rsp:
   1738              case Find_node_cache_rsp:
   1739              case Node_Desc_store_rsp:
   1740              case Power_Desc_store_rsp:
   1741              case Active_EP_store_rsp:
   1742              case Simple_Desc_store_rsp:
   1743              case Mgmt_Cache_rsp:
   1744          #if ( CACHE_DEV_MAX == 0 )
   1745                ZDCacheProcessRsp( srcAddr, asdu, asduLen, clusterID, TransSeq );
   1746          #endif
   1747                break;
   1748          #endif
   1749          
   1750              // Request messages
   1751              case NWK_addr_req:
   1752              case IEEE_addr_req:
   1753                zdpProcessAddrReq( TransSeq, srcAddr, asdu, clusterID, SecurityUse );
   \                     ??ZDP_IncomingData_2:
   \   00011B                ; Setup parameters for call to function zdpProcessAddrReq
   \   00011B   E5..         MOV     A,?V0 + 4
   \   00011D   F5..         MOV     ?V0 + 0,A
   \   00011F   78..         MOV     R0,#?V0 + 0
   \   000121   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000124   8A..         MOV     ?V0 + 0,R2
   \   000126   78..         MOV     R0,#?V0 + 0
   \   000128   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012B   7403         MOV     A,#0x3
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   AA82         MOV     R2,DPL
   \   000132   AB83         MOV     R3,DPH
   \   000134   90....       MOV     DPTR,#(??zdpProcessAddrReq & 0xffff)
   \   000137   74..         MOV     A,#((??zdpProcessAddrReq >> 16) & 0xff)
   \   000139   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00013C   7403         MOV     A,#0x3
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000141   02....       LJMP    ??ZDP_IncomingData_11 & 0xFFFF
   1754                break;
   1755          
   1756              case Node_Desc_req:
   1757                ZDO_ProcessNodeDescReq( TransSeq, srcAddr, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_4:
   \   000144                ; Setup parameters for call to function ZDO_ProcessNodeDescReq
   \   000144   E5..         MOV     A,?V0 + 4
   \   000146   F5..         MOV     ?V0 + 0,A
   \   000148   78..         MOV     R0,#?V0 + 0
   \   00014A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014D   7401         MOV     A,#0x1
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   AA82         MOV     R2,DPL
   \   000154   AB83         MOV     R3,DPH
   \   000156   90....       MOV     DPTR,#(ZDO_ProcessNodeDescReq & 0xffff)
   \   000159   74..         MOV     A,#((ZDO_ProcessNodeDescReq >> 16) & 0xff)
   \   00015B   80B3         SJMP    ??ZDP_IncomingData_12
   1758                break;
   1759          
   1760              case Power_Desc_req:
   1761                ZDO_ProcessPowerDescReq( TransSeq, srcAddr, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_5:
   \   00015D                ; Setup parameters for call to function ZDO_ProcessPowerDescReq
   \   00015D   E5..         MOV     A,?V0 + 4
   \   00015F   F5..         MOV     ?V0 + 0,A
   \   000161   78..         MOV     R0,#?V0 + 0
   \   000163   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000166   7401         MOV     A,#0x1
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   AA82         MOV     R2,DPL
   \   00016D   AB83         MOV     R3,DPH
   \   00016F   90....       MOV     DPTR,#(ZDO_ProcessPowerDescReq & 0xffff)
   \   000172   74..         MOV     A,#((ZDO_ProcessPowerDescReq >> 16) & 0xff)
   \                     ??ZDP_IncomingData_13:
   \   000174   809A         SJMP    ??ZDP_IncomingData_12
   1762                break;
   1763          
   1764              case Simple_Desc_req:
   1765                ZDO_ProcessSimpleDescReq( TransSeq, srcAddr, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_6:
   \   000176                ; Setup parameters for call to function ZDO_ProcessSimpleDescReq
   \   000176   E5..         MOV     A,?V0 + 4
   \   000178   F5..         MOV     ?V0 + 0,A
   \   00017A   78..         MOV     R0,#?V0 + 0
   \   00017C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017F   7401         MOV     A,#0x1
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   AA82         MOV     R2,DPL
   \   000186   AB83         MOV     R3,DPH
   \   000188   90....       MOV     DPTR,#(ZDO_ProcessSimpleDescReq & 0xffff)
   \   00018B   74..         MOV     A,#((ZDO_ProcessSimpleDescReq >> 16) & 0xff)
   \   00018D   8081         SJMP    ??ZDP_IncomingData_12
   1766                break;
   1767          
   1768              case Active_EP_req:
   1769                ZDO_ProcessActiveEPReq( TransSeq, srcAddr, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_7:
   \   00018F                ; Setup parameters for call to function ZDO_ProcessActiveEPReq
   \   00018F   E5..         MOV     A,?V0 + 4
   \   000191   F5..         MOV     ?V0 + 0,A
   \   000193   78..         MOV     R0,#?V0 + 0
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000198   7401         MOV     A,#0x1
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   AA82         MOV     R2,DPL
   \   00019F   AB83         MOV     R3,DPH
   \   0001A1   90....       MOV     DPTR,#(ZDO_ProcessActiveEPReq & 0xffff)
   \   0001A4   74..         MOV     A,#((ZDO_ProcessActiveEPReq >> 16) & 0xff)
   \   0001A6   80CC         SJMP    ??ZDP_IncomingData_13
   1770                break;
   1771          
   1772              case Match_Desc_req:
   1773                ZDO_ProcessMatchDescReq( TransSeq, srcAddr, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_8:
   \   0001A8                ; Setup parameters for call to function ZDO_ProcessMatchDescReq
   \   0001A8   E5..         MOV     A,?V0 + 4
   \   0001AA   F5..         MOV     ?V0 + 0,A
   \   0001AC   78..         MOV     R0,#?V0 + 0
   \   0001AE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B1   7401         MOV     A,#0x1
   \   0001B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B6   AA82         MOV     R2,DPL
   \   0001B8   AB83         MOV     R3,DPH
   \   0001BA   90....       MOV     DPTR,#(ZDO_ProcessMatchDescReq & 0xffff)
   \   0001BD   74..         MOV     A,#((ZDO_ProcessMatchDescReq >> 16) & 0xff)
   \   0001BF   02....       LJMP    ??ZDP_IncomingData_12 & 0xFFFF
   1774                break;
   1775          
   1776          #if defined ( ZDO_COORDINATOR )
   1777              case End_Device_Bind_req:
   1778                ZDO_ProcessEndDeviceBindReq( TransSeq, srcAddr, asdu, SecurityUse );
   1779                break;
   1780          #endif
   1781          
   1782          #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
   1783              case Bind_req:
   1784              case Unbind_req:
   1785                ZDO_ProcessBindUnbindReq( TransSeq, srcAddr, clusterID, asdu, SecurityUse );
   1786                break;
   1787          #endif
   1788          
   1789          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1790              case Mgmt_NWK_Disc_req:
   1791                ZDO_ProcessMgmtNwkDiscReq( TransSeq, srcAddr, asdu, SecurityUse );
   1792                break;
   1793          #endif
   1794          
   1795          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
   1796              case Mgmt_Lqi_req:
   1797                ZDO_ProcessMgmtLqiReq( TransSeq, srcAddr, *asdu, SecurityUse );
   1798                break;
   1799          #endif
   1800          
   1801          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && defined ( RTR_NWK )
   1802              case Mgmt_Rtg_req:
   1803                ZDO_ProcessMgmtRtgReq( TransSeq, srcAddr, *asdu, SecurityUse );
   1804                break;
   1805          #endif
   1806          
   1807          #if defined ( ZDO_MGMT_BIND_RESPONSE )
   1808              case Mgmt_Bind_req:
   1809                ZDO_ProcessMgmtBindReq( TransSeq, srcAddr, *asdu, SecurityUse );
   1810                break;
   1811          #endif
   1812          
   1813          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && defined ( RTR_NWK )
   1814              case Mgmt_Direct_Join_req:
   1815                ZDO_ProcessMgmtDirectJoinReq( TransSeq, srcAddr, asdu, SecurityUse );
   1816                break;
   1817          #endif
   1818          
   1819          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
   1820              case Mgmt_Leave_req:
   1821                ZDO_ProcessMgmtLeaveReq( TransSeq, srcAddr, asdu, SecurityUse );
   1822                break;
   1823          #endif
   1824          
   1825          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && defined ( RTR_NWK )
   1826              case Mgmt_Permit_Join_req:
   1827                ZDO_ProcessMgmtPermitJoinReq( TransSeq, srcAddr, asdu, SecurityUse );
   1828                break;
   1829          #endif
   1830          
   1831          #if defined ( ZDO_USERDESC_RESPONSE )
   1832              case User_Desc_req:
   1833                ZDO_ProcessUserDescReq( TransSeq, srcAddr, asdu, SecurityUse );
   1834                break;
   1835          #endif
   1836          
   1837          #if defined ( ZDO_USERDESCSET_RESPONSE )
   1838              case User_Desc_set:
   1839                ZDO_ProcessUserDescSet( TransSeq, srcAddr, asdu, SecurityUse );
   1840                break;
   1841          #endif
   1842          
   1843          #if defined ( ZDO_SERVERDISC_RESPONSE )
   1844              case Server_Discovery_req:
   1845                ZDO_ProcessServerDiscReq( TransSeq, srcAddr, asdu, SecurityUse );
   1846                break;
   1847          #endif
   1848          
   1849          #if defined ( ZDO_ENDDEVICE_ANNCE ) && defined ( RTR_NWK )
   1850              case End_Device_annce:
   1851                ZDO_ProcessEndDeviceAnnce( TransSeq, srcAddr, asdu, SecurityUse );
   1852                break;
   1853          #endif
   1854          
   1855          #if defined( ZDO_CACHE )
   1856              case Discovery_Cache_req:
   1857              case Discovery_store_req:
   1858              case Remove_node_cache_req:
   1859              case Find_node_cache_req:
   1860              case Node_Desc_store_req:
   1861              case Power_Desc_store_req:
   1862              case Active_EP_store_req:
   1863              case Simple_Desc_store_req:
   1864              case Mgmt_Cache_req:
   1865          #if ( CACHE_DEV_MAX > 0 )
   1866                ZDCacheProcessReq(srcAddr,asdu,asduLen,clusterID,TransSeq,SecurityUse);
   1867          #endif
   1868                break;
   1869          #endif
   1870          
   1871              case Complex_Desc_req:
   1872              case Complex_Desc_rsp:
   1873              default:
   1874                ZDApp_InMsgCB( TransSeq, srcAddr, wasBroadcast,
   1875                               clusterID, asduLen, asdu, SecurityUse );
   \                     ??ZDP_IncomingData_10:
   \   0001C2                ; Setup parameters for call to function ZDApp_InMsgCB
   \   0001C2   E5..         MOV     A,?V0 + 4
   \   0001C4   F5..         MOV     ?V0 + 0,A
   \   0001C6   78..         MOV     R0,#?V0 + 0
   \   0001C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CB   8C..         MOV     ?V0 + 0,R4
   \   0001CD   8D..         MOV     ?V0 + 1,R5
   \   0001CF   78..         MOV     R0,#?V0 + 0
   \   0001D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D4   8A..         MOV     ?V0 + 0,R2
   \   0001D6   8B..         MOV     ?V0 + 1,R3
   \   0001D8   78..         MOV     R0,#?V0 + 0
   \   0001DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DD   AD..         MOV     R5,?V0 + 3
   \   0001DF   AC..         MOV     R4,?V0 + 2
   \   0001E1   7405         MOV     A,#0x5
   \   0001E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E6   AA82         MOV     R2,DPL
   \   0001E8   AB83         MOV     R3,DPH
   \   0001EA   90....       MOV     DPTR,#(ZDApp_InMsgCB & 0xffff)
   \   0001ED   74..         MOV     A,#((ZDApp_InMsgCB >> 16) & 0xff)
   \   0001EF   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0001F2   7405         MOV     A,#0x5
   \   0001F4   12....       LCALL   ?DEALLOC_XSTACK8
   1876                break;
   1877            }
   1878          }
   \                     ??ZDP_IncomingData_11:
   \   0001F7   7409         MOV     A,#0x9
   \   0001F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FC   7F05         MOV     R7,#0x5
   \   0001FE   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \                     ??Subroutine26_0:
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ??ZDP_Buf + 1H
   1879          
   1880          /*********************************************************************
   1881          *********************************************************************/
   1882          

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     ZDP_EPRsp                         1      0     27
       -> osal_memcpy                  0      0     40
       -> fillAndSend                  0      0     38
     ZDP_EndDeviceBindReq              1      0     30
       -> NLME_GetProtocolVersion      0      0     38
       -> NLME_GetExtAddr              0      0     38
       -> osal_cpyExtAddr              0      0     38
       -> fillAndSend                  0      0     42
     ZDP_GenericRsp                    1      0     17
       -> NLME_GetProtocolVersion      0      0     22
       -> fillAndSend                  0      0     26
     ZDP_IncomingData                  1      0     27
       -> NLME_GetProtocolVersion      0      0     44
       -> ZDO_ProcessEPListRsp         0      0     48
       -> ZDO_ProcessBindUnbindRsp     0      0     46
       -> zdpProcessAddrReq            0      0     50
       -> ZDO_ProcessNodeDescReq       0      0     46
       -> ZDO_ProcessPowerDescReq      0      0     46
       -> ZDO_ProcessSimpleDescReq     0      0     46
       -> ZDO_ProcessActiveEPReq       0      0     46
       -> ZDO_ProcessMatchDescReq      0      0     46
       -> ZDApp_InMsgCB                0      0     54
     ZDP_MatchDescReq                  1      0     28
       -> NLME_GetProtocolVersion      0      0     36
       -> fillAndSend                  0      0     40
     ZDP_NodeDescMsg                   1      0     18
       -> NLME_GetProtocolVersion      0      0     26
       -> fillAndSend                  0      0     30
     ZDP_PowerDescMsg                  1      0     16
       -> fillAndSend                  0      0     26
     ZDP_SendData                      1      0     21
       -> fillAndSend                  0      0     32
     ZDP_SimpleDescMsg                 2      0     22
       -> NLME_GetProtocolVersion      0      0     32
       -> fillAndSend                  0      0     36
     fillAndSend                       1      0     52
       -> AF_DataRequest               0      0     56
     zdpProcessAddrReq                 1      0     49
       -> osal_ExtAddrEqual            0      0     44
       -> osal_cpyExtAddr              0      0     44
       -> AssocMakeList                0      0     44
       -> osal_mem_free                0      0     44
       -> fillAndSend                  0      0     48


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     ZDP_AF_ENDPOINT                  1
     ZDP_TransID                      1
     ZDP_Buf                         80
     ZDP_TmpBuf                       2
     ZDP_TxOptions                    1
     fillAndSend                    174
     ?Subroutine44                    8
     ?Subroutine31                    8
     ZDP_SendData                   115
     ?Subroutine13                    8
     ?Subroutine46                    6
     ?Subroutine16                   13
     ?Subroutine34                    6
     ?Subroutine9                     9
     ZDP_MatchDescReq               242
     ?Subroutine20                    4
     ?Subroutine43                    9
     ?Subroutine11                    4
     ?Subroutine8                     5
     ?Subroutine21                   11
     ?Subroutine47                    6
     ?Subroutine45                    8
     ?Subroutine23                    4
     ?Subroutine39                    4
     ?Subroutine15                    9
     ?Subroutine14                   15
     ?Subroutine30                    7
     ?Subroutine40                   16
     ?Subroutine28                    8
     zdpProcessAddrReq              545
     ?Subroutine24                    4
     ?Subroutine1                    11
     ?Subroutine38                    9
     ?Subroutine36                    9
     ZDP_NodeDescMsg                192
     ?Subroutine10                    6
     ?Subroutine37                    4
     ?Subroutine41                    9
     ?Subroutine7                     4
     ?Subroutine27                    8
     ?Subroutine6                     6
     ?Subroutine19                    2
     ?Subroutine48                    5
     ?Subroutine17                    3
     ZDP_PowerDescMsg                74
     ?Subroutine49                   33
     ZDP_SimpleDescMsg              433
     ?Subroutine25                    9
     ?Subroutine5                    10
     ?Subroutine32                    8
     ?Subroutine42                    8
     ?Subroutine4                     8
     ?Subroutine33                   13
     ?Subroutine3                    12
     ?Subroutine29                    7
     ZDP_EPRsp                      185
     ?Subroutine12                   15
     ZDP_GenericRsp                  99
     ?Subroutine18                    9
     ZDP_EndDeviceBindReq           293
     ?Subroutine22                    6
     ?Subroutine2                     7
     ?Subroutine0                     9
     ?Subroutine35                    9
     ZDP_IncomingData               513
     ?Subroutine26                   12
     ?<Initializer for ZDP_TmpBuf>    2

 
 3 288 bytes in segment BANKED_CODE
     1 byte  in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    82 bytes in segment XDATA_Z
 
 3 291 bytes of CODE  memory
    84 bytes of XDATA memory

Errors: none
Warnings: none
