//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  24/Jan/2013  14:47:50 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\stack\zdo\ZDProfile.c                         /
//    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\Tools\CC2430D /
//                          B\f8wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR     /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DRTR_NWK -DBLINK_LEDS "-DCONST=const        /
//                          __code" -DGENERIC=__generic) -f                  /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f /
//                          8wConfig.cfg (-DSECURE=0                         /
//                          -DDEFAULT_CHANLIST=0x00000800                    /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                     /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\ -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\Source\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\  /
//                          -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ /
//                          \ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ /
//                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                      /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \hal\target\CC2430EB\ -I                         /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \osal\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I            /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢× /
//                          ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 /
//                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\sec\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\stack\sys\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \zmac\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ /
//                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Z /
//                          igBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\services\saddr\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \services\sdata\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\high_level\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf03\ -I     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf03\single_chip\ -D CC2430EB    /
//                          -D ZTOOL_P1 -D MT_TASK -lC                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ -lA        /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\            /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\RouterEB\Obj\ -e       /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\stack\zdo\ZDProfile.c"                       /
//    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ZDProfile.s /
//                          51                                               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ZDProfile

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??fillAndSend,021203H
        ARGFRAME XSTACK, 24, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 28, STACK
        FUNCTION ??zdpProcessAddrReq,021203H
        ARGFRAME XSTACK, 25, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDP_AF_ENDPOINT
        PUBLIC ZDP_EPRsp
        FUNCTION ZDP_EPRsp,021203H
        ARGFRAME XSTACK, 7, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,021203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0a1203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDP_NodeDescMsg
        FUNCTION ZDP_NodeDescMsg,021203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC ZDP_PowerDescMsg
        FUNCTION ZDP_PowerDescMsg,021203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDP_SendData
        FUNCTION ZDP_SendData,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDP_SimpleDescMsg
        FUNCTION ZDP_SimpleDescMsg,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDP_TransID
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME XSTACK, 28, STACK
        EXTERN NLME_GetProtocolVersion
        FUNCTION NLME_GetProtocolVersion,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN osal_ExtAddrEqual
        FUNCTION osal_ExtAddrEqual,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN osal_cpyExtAddr
        FUNCTION osal_cpyExtAddr,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN AssocMakeList
        FUNCTION AssocMakeList,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME XSTACK, 22, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 20, STACK
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME XSTACK, 19, STACK
        EXTERN ZDO_ProcessEPListRsp
        FUNCTION ZDO_ProcessEPListRsp,0202H
        ARGFRAME XSTACK, 24, STACK
        EXTERN ZDO_ProcessBindUnbindRsp
        FUNCTION ZDO_ProcessBindUnbindRsp,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessNodeDescReq
        FUNCTION ZDO_ProcessNodeDescReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessPowerDescReq
        FUNCTION ZDO_ProcessPowerDescReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessSimpleDescReq
        FUNCTION ZDO_ProcessSimpleDescReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessActiveEPReq
        FUNCTION ZDO_ProcessActiveEPReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDO_ProcessMatchDescReq
        FUNCTION ZDO_ProcessMatchDescReq,0202H
        ARGFRAME XSTACK, 23, STACK
        EXTERN ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0202H
        ARGFRAME XSTACK, 27, STACK
        EXTERN ZDAppNwkAddr
        EXTERN ZDApp_epDesc
        EXTERN saveExtAddr

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\zdo\ZDProfile.c
//    1 /*********************************************************************
//    2     Filename:       ZDProfile.c
//    3     Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
//    4     Revision:       $Revision: 14296 $
//    5 
//    6     Description:
//    7 
//    8       This Zigbee Device Profile.
//    9 
//   10     Notes:
//   11 
//   12     Copyright (c) 2006 by Texas Instruments, Inc.
//   13     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   14     derivative works, modify, distribute, perform, display or sell this
//   15     software and/or its documentation for any purpose is prohibited
//   16     without the express written consent of Texas Instruments, Inc.
//   17 *********************************************************************/
//   18 
//   19 /*********************************************************************
//   20  * INCLUDES
//   21  */
//   22 #include "ZComdef.h"
//   23 #include "OSAL.h"
//   24 #include "AF.h"
//   25 #include "NLMEDE.h"
//   26 #include "nwk_util.h"
//   27 #include "APS.h"
//   28 
//   29 #include "ZDCache.h"
//   30 #include "ZDConfig.h"
//   31 #include "ZDProfile.h"
//   32 #include "ZDObject.h"
//   33 #include "nwk_util.h"
//   34 
//   35 /*********************************************************************
//   36  * MACROS
//   37  */
//   38 
//   39 #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \ 
//   40   (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \ 
//   41   (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \ 
//   42   (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \ 
//   43 }
//   44 
//   45 #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \ 
//   46   afStatus_t stat;                                    \ 
//   47   ZDP_TmpBuf = (BUF)+1;                               \ 
//   48   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   49   ZDP_TmpBuf = ZDP_Buf+1;                             \ 
//   50   return stat;                                        \ 
//   51 }
//   52 
//   53 #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \ 
//   54   afStatus_t stat;                                    \ 
//   55   ZDP_TxOptions = (TxO);                              \ 
//   56   stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \ 
//   57   ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \ 
//   58   return stat;                                        \ 
//   59 }
//   60 
//   61 /*********************************************************************
//   62  * CONSTANTS
//   63  */
//   64 
//   65 #define ZDP_BUF_SZ          80
//   66 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   67 CONST byte ZDP_AF_ENDPOINT = 0;
ZDP_AF_ENDPOINT:
        DB 0
//   68 
//   69 /*********************************************************************
//   70  * TYPEDEFS
//   71  */
//   72 
//   73 /*********************************************************************
//   74  * GLOBAL VARIABLES
//   75  */
//   76 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   77 byte ZDP_TransID = 0;
ZDP_TransID:
        DS 1
//   78 
//   79 /*********************************************************************
//   80  * EXTERNAL VARIABLES
//   81  */
//   82 
//   83 extern endPointDesc_t ZDApp_epDesc;
//   84 
//   85 /*********************************************************************
//   86  * EXTERNAL FUNCTIONS
//   87  */
//   88 
//   89 /*********************************************************************
//   90  * LOCAL FUNCTIONS
//   91  */
//   92 
//   93 static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
//   94 
//   95 /*********************************************************************
//   96  * LOCAL VARIABLES
//   97  */
//   98 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   99 static byte  ZDP_Buf[ ZDP_BUF_SZ ];
??ZDP_Buf:
        DS 80

        RSEG XDATA_I:XDATA:NOROOT(0)
//  100 static byte *ZDP_TmpBuf = ZDP_Buf+1;
??ZDP_TmpBuf:
        DS 2
        REQUIRE `?<Initializer for ZDP_TmpBuf>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  101 static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
??ZDP_TxOptions:
        DS 1
//  102 
//  103 /*********************************************************************
//  104  * @fn          fillAndSend
//  105  *
//  106  * @brief       Combined to reduce space
//  107  *
//  108  * @param
//  109  * @param
//  110  *
//  111  * @return      afStatus_t
//  112  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  113 static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
??fillAndSend:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ??fillAndSend
//  114 {
        FUNCALL ??fillAndSend, AF_DataRequest
        LOCFRAME XSTACK, 28, STACK
        ARGFRAME XSTACK, 28, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 4
        MOV	A,#-0x4
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	A,#0x13
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine31 & 0xFFFF
//  115 #if ( AF_V1_SUPPORT )
//  116 
//  117   byte proVer = NLME_GetProtocolVersion();
//  118 #endif
//  119   afAddrType_t afAddr;
//  120 
//  121   ZADDR_TO_AFADDR( addr, afAddr );
??CrossCallReturnLabel_69:
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        CLR	A
        MOVX	@DPTR,A
        MOV	DPL,R4
        MOV	DPH,R5
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        POP	A
        CFI CFA_SP SP+0
        MOVX	@DPTR,A
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
//  122 
//  123 #if ( AF_V1_SUPPORT )
//  124   if ( proVer == ZB_PROT_V1_0 )
//  125   {
//  126     return ( afFillAndSendMessage( &afAddr, ZDP_AF_ENDPOINT, clusterID,
//  127                1, FRAMETYPE_MSG, transSeq,
//  128                NULL, NULL, NULL, NULL, len, ZDP_TmpBuf,
//  129                ZDP_TxOptions, FALSE, AF_DEFAULT_RADIUS ) );
//  130   }
//  131   else
//  132 #endif
//  133   {
//  134     *(ZDP_TmpBuf-1) = *transSeq;
        MOV	DPTR,#??ZDP_TmpBuf
        MOVX	A,@DPTR
        ADD	A,#-0x1
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#-0x1
        MOV	?V0 + 5,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 4
        MOV	DPH,?V0 + 5
        MOVX	@DPTR,A
//  135 
//  136     return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
//  137                            (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
//  138                            transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV	?V0 + 6,#0xa
        MOV	R0,#?V0 + 6
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	?V0 + 0,R1
        MOV	A,#0x1
        ADD	A,?V0 + 0
        MOV	?V0 + 0,A
        CLR	A
        ADDC	A,#0x0
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	R4,#(ZDApp_epDesc & 0xff)
        MOV	R5,#((ZDApp_epDesc >> 8) & 0xff)
        MOV	A,#0x9
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(AF_DataRequest & 0xffff)
        MOV	A,#((AF_DataRequest >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x9
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,#0x4
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine44
        ; // Fall through to label ?Subroutine44
//  139   }
//  140 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Valid
        MOV	R7,#0x7
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  141 
//  142 /*********************************************************************
//  143  * @fn          ZDP_SendData
//  144  *
//  145  * @brief       This builds and send a request message that has
//  146  *              NWKAddrOfInterest as its only parameter.
//  147  *
//  148  * @param       dstAddr - destination address
//  149  * @param       cmd - clusterID
//  150  * @param       dataLen - number of bytes of data
//  151  * @param       data - pointer to the data
//  152  * @param       SecurityEnable - Security Options
//  153  *
//  154  * @return      afStatus_t
//  155  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  156 afStatus_t ZDP_SendData( byte *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
ZDP_SendData:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZDP_SendData
//  157                         byte len, byte *buf, byte SecurityEnable )
//  158 {
        FUNCALL ZDP_SendData, ??fillAndSend
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        MOV	A,#-0xe
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV	?V0 + 2,R1
        MOV	A,#0xe
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_76:
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
//  159   byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine9 & 0xFFFF
//  160   byte cnt = len;
??CrossCallReturnLabel_22:
        MOV	?V0 + 4,?V0 + 2
        SJMP	??ZDP_SendData_0
//  161 
//  162   while ( cnt-- )
//  163   {
//  164     *pBuf++ = *buf++;
??ZDP_SendData_1:
        LCALL	?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV	R6,DPL
        MOV	R7,DPH
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOV	R0,DPL
        MOV	R1,DPH
//  165   }
??ZDP_SendData_0:
        MOV	?V0 + 5,?V0 + 4
        MOV	A,#-0x1
        ADD	A,?V0 + 5
        MOV	?V0 + 4,A
        MOV	A,?V0 + 5
        JNZ	??ZDP_SendData_1
//  166 
//  167   FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
//  168                (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
        MOV	A,?V0 + 3
        JZ	??ZDP_SendData_2
        MOV	R0,#0x40
        SJMP	??ZDP_SendData_3
??ZDP_SendData_2:
        MOV	R0,#0x0
??ZDP_SendData_3:
        MOV	A,R0
        ORL	A,#0xa
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	R1,?V0 + 2
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        CLR	A
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        MOV	R7,#0x6
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  169 }
//  170 
//  171 #if defined ( ZDO_NODEDESC_REQUEST ) || defined ( ZDO_POWERDESC_REQUEST ) ||\ 
//  172     defined ( ZDO_ACTIVEEP_REQUEST ) || defined ( ZDO_COMPLEXDESC_REQUEST ) ||\ 
//  173     defined ( ZDO_USERDESC_REQUEST )
//  174 /*********************************************************************
//  175  * @fn          ZDP_NWKAddrOfInterestReq
//  176  *
//  177  * @brief       This builds and send a request message that has
//  178  *              NWKAddrOfInterest as its only parameter.
//  179  *
//  180  * @param       dstAddr - destination address
//  181  * @param       nwkAddr - 16 bit address
//  182  * @param       SecurityEnable - Security Options
//  183  *
//  184  * @return      afStatus_t
//  185  */
//  186 afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
//  187                                      byte cmd, byte SecurityEnable )
//  188 {
//  189   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
//  190   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
//  191 
//  192   return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
//  193 }
//  194 #endif // ZDO_NODEDESC_REQUEST ZDO_POWERDESC_REQUEST ZDO_ACTIVEEP_REQUEST ZDO_COMPLEXDESC_REQUEST  ZDO_USERDESC_REQUEST
//  195 
//  196 /*********************************************************************
//  197  * Address Requests
//  198  */
//  199 
//  200 #if defined ( ZDO_NWKADDR_REQUEST )
//  201 /*********************************************************************
//  202  * @fn          ZDP_NwkAddrReq
//  203  *
//  204  * @brief       This builds and send a NWK_addr_req message.  This
//  205  *              function sends a broadcast message looking for a 16
//  206  *              bit address with a 64 bit address as bait.
//  207  *
//  208  * @param       IEEEAddress - looking for this device
//  209  * @param       SecurityEnable - Security Options
//  210  *
//  211  * @return      afStatus_t
//  212  */
//  213 afStatus_t ZDP_NwkAddrReq( byte *IEEEAddress, byte ReqType,
//  214                            byte StartIndex, byte SecurityEnable )
//  215 {
//  216   byte *pBuf = ZDP_TmpBuf;
//  217   byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
//  218   zAddrType_t dstAddr;
//  219 
//  220   if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
//  221   {
//  222     dstAddr.addrMode = AddrBroadcast;
//  223     dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  224   }
//  225   else
//  226   {
//  227     dstAddr.addrMode = Addr16Bit;
//  228     dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
//  229   }
//  230 
//  231   pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
//  232 
//  233   *pBuf++ = ReqType;
//  234   *pBuf++ = StartIndex;
//  235 
//  236   return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
//  237 }
//  238 #endif
//  239 
//  240 #if defined ( ZDO_IEEEADDR_REQUEST )
//  241 /*********************************************************************
//  242  * @fn          ZDP_IEEEAddrReq
//  243  *
//  244  * @brief       This builds and send a IEEE_addr_req message.  This
//  245  *              function sends a unicast message looking for a 64
//  246  *              bit IEEE address with a 16 bit address as bait.
//  247  *
//  248  * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
//  249  *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
//  250  * @param       SecurityEnable - Security Options
//  251  *
//  252  * @return      afStatus_t
//  253  */
//  254 afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
//  255                             byte StartIndex, byte SecurityEnable )
//  256 {
//  257   byte *pBuf = ZDP_TmpBuf;
//  258   byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
//  259   zAddrType_t dstAddr;
//  260 
//  261   dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  262   dstAddr.addr.shortAddr = shortAddr;
//  263 
//  264   *pBuf++ = LO_UINT16( shortAddr );
//  265   *pBuf++ = HI_UINT16( shortAddr );
//  266 
//  267   *pBuf++ = ReqType;
//  268   *pBuf++ = StartIndex;
//  269 
//  270   return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
//  271 }
//  272 #endif
//  273 
//  274 #if defined ( ZDO_MATCH_REQUEST )
//  275 /*********************************************************************
//  276  * @fn          ZDP_MatchDescReq
//  277  *
//  278  * @brief       This builds and send a Match_Desc_req message.  This
//  279  *              function sends a broadcast or unicast message
//  280  *              requesting the list of endpoint/interfaces that
//  281  *              match profile ID and cluster IDs.
//  282  *
//  283  * @param       dstAddr - destination address
//  284  * @param       ProfileID - Profile ID
//  285  * @param       NumInClusters - number of input clusters
//  286  * @param       InClusterList - input cluster ID list
//  287  * @param       NumOutClusters - number of output clusters
//  288  * @param       OutClusterList - output cluster ID list
//  289  * @param       SecurityEnable - Security Options
//  290  *
//  291  * @return      afStatus_t
//  292  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  293 afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
ZDP_MatchDescReq:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ZDP_MatchDescReq
//  294                                 uint16 ProfileID,
//  295                                 byte NumInClusters, cId_t *InClusterList,
//  296                                 byte NumOutClusters, cId_t *OutClusterList,
//  297                                 byte SecurityEnable )
//  298 {
        FUNCALL ZDP_MatchDescReq, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL ZDP_MatchDescReq, ??fillAndSend
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV	A,#-0x2
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
        MOV	?V0 + 6,R1
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
        MOV	A,#0x17
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 5,A
//  299   byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine15 & 0xFFFF
//  300   // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
//  301   byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
//  302   uint8 protoVer = NLME_GetProtocolVersion();
??CrossCallReturnLabel_102:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R3,A
//  303 
//  304   len += (NumInClusters + NumOutClusters)*((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
        MOV	A,#0x1
        XRL	A,R3
        JZ	??ZDP_MatchDescReq_0
        MOV	R0,#0x2
        SJMP	??ZDP_MatchDescReq_1
??ZDP_MatchDescReq_0:
        MOV	R0,#0x1
??ZDP_MatchDescReq_1:
        MOV	A,?V0 + 7
        ADD	A,?V0 + 6
        MOV	B,A
        MOV	A,R0
        MUL	AB
        ADD	A,#0x6
        MOV	R2,A
//  305 
//  306   if ( len >= ZDP_BUF_SZ-1 )
        CLR	C
        SUBB	A,#0x4f
        JC	??ZDP_MatchDescReq_2
//  307   {
//  308     return afStatus_MEM_FAIL;
        MOV	R1,#-0x7f
        LJMP	??ZDP_MatchDescReq_3 & 0xFFFF
//  309   }
//  310 
//  311   *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
??ZDP_MatchDescReq_2:
        MOV	A,R6
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOVX	@DPTR,A
        INC	DPTR
//  312   *pBuf++ = HI_UINT16( nwkAddr );
        MOV	A,R7
        LCALL	?Subroutine21 & 0xFFFF
//  313 
//  314   *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
//  315   *pBuf++ = HI_UINT16( ProfileID );
//  316 
//  317   *pBuf++ = NumInClusters; // Input cluster list
??CrossCallReturnLabel_46:
        MOV	A,?V0 + 6
        LCALL	?Subroutine23 & 0xFFFF
//  318   if ( NumInClusters )
??CrossCallReturnLabel_50:
        JZ	??ZDP_MatchDescReq_4
//  319   {
//  320     for (i=0; i<NumInClusters; ++i)  {
        MOV	R4,#0x0
//  321       *pBuf++ = LO_UINT16( InClusterList[i] );
??ZDP_MatchDescReq_5:
        MOV	A,R4
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL	?Subroutine8 & 0xFFFF
//  322       if (protoVer != ZB_PROT_V1_0)  {
??CrossCallReturnLabel_20:
        JZ	??CrossCallReturnLabel_32
//  323         *pBuf++ = HI_UINT16( InClusterList[i] );
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL	?Subroutine11 & 0xFFFF
//  324       }
//  325     }
??CrossCallReturnLabel_32:
        INC	R4
        MOV	A,R4
        CLR	C
        SUBB	A,?V0 + 6
        JC	??ZDP_MatchDescReq_5
//  326   }
//  327 
//  328   *pBuf++ = NumOutClusters; // Output cluster list
??ZDP_MatchDescReq_4:
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOV	A,?V0 + 7
        LCALL	?Subroutine23 & 0xFFFF
//  329   if ( NumOutClusters )
??CrossCallReturnLabel_51:
        JZ	??ZDP_MatchDescReq_6
//  330   {
//  331     for (i=0; i<NumOutClusters; ++i)  {
        MOV	R4,#0x0
//  332       *pBuf++ = LO_UINT16( OutClusterList[i] );
??ZDP_MatchDescReq_7:
        MOV	A,R4
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,?V0 + 4
        ADD	A,R0
        MOV	DPL,A
        MOV	A,?V0 + 5
        ADDC	A,R1
        LCALL	?Subroutine8 & 0xFFFF
//  333       if (protoVer != ZB_PROT_V1_0)  {
??CrossCallReturnLabel_21:
        JZ	??CrossCallReturnLabel_33
//  334         *pBuf++ = HI_UINT16( OutClusterList[i] );
        MOV	A,?V0 + 4
        ADD	A,R0
        MOV	DPL,A
        MOV	A,?V0 + 5
        ADDC	A,R1
        LCALL	?Subroutine11 & 0xFFFF
//  335       }
//  336     }
??CrossCallReturnLabel_33:
        INC	R4
        MOV	A,R4
        CLR	C
        SUBB	A,?V0 + 7
        JC	??ZDP_MatchDescReq_7
//  337   }
//  338 
//  339   return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
??ZDP_MatchDescReq_6:
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x6
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	A,R2
        MOV	R1,A
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
??ZDP_MatchDescReq_3:
        MOV	A,#0x2
        LJMP	?Subroutine45 & 0xFFFF
        CFI EndBlock cfiBlock3
//  340 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        LCALL	?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_96:
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_45
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_13
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_44
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_14
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_12
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R5,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R1
        MOV	DPL,R5
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL	?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_68:
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        LCALL	?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_62:
        XRL	A,R3
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19
//  341 #endif // ZDO_MATCH_REQUEST
//  342 
//  343 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  344 /*********************************************************************
//  345  * @fn          ZDP_SimpleDescReq
//  346  *
//  347  * @brief       This builds and send a NWK_Simple_Desc_req
//  348  *              message.  This function sends unicast message to the
//  349  *              destination device.
//  350  *
//  351  * @param       dstAddr - destination address
//  352  * @param       nwkAddr - 16 bit address
//  353  * @param       epIntf - endpoint/interface
//  354  * @param       SecurityEnable - Security Options
//  355  *
//  356  * @return      afStatus_t
//  357  */
//  358 afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
//  359                                     byte endPoint, byte SecurityEnable )
//  360 
//  361 {
//  362   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
//  363   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
//  364   ZDP_TmpBuf[2] = endPoint;
//  365 
//  366   return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
//  367 }
//  368 #endif // ZDO_SIMPLEDESC_REQUEST
//  369 
//  370 #if defined ( ZDO_USERDESCSET_REQUEST )
//  371 /*********************************************************************
//  372  * @fn          ZDP_UserDescSet
//  373  *
//  374  * @brief       This builds and send a User_Desc_set message to set
//  375  *              the user descriptor.  This function sends unicast
//  376  *              message to the destination device.
//  377  *
//  378  * @param       dstAddr - destination address
//  379  * @param       nwkAddr - 16 bit address
//  380  * @param       UserDescriptor - user descriptor
//  381  * @param       SecurityEnable - Security Options
//  382  *
//  383  * @return      afStatus_t
//  384  */
//  385 afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
//  386                           UserDescriptorFormat_t *UserDescriptor,
//  387                           byte SecurityEnable )
//  388 {
//  389   byte *pBuf = ZDP_TmpBuf;
//  390   byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
//  391               UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
//  392   byte addrLen = 2;
//  393 
//  394   *pBuf++ = LO_UINT16( nwkAddr );
//  395   *pBuf++ = HI_UINT16( nwkAddr );
//  396 
//  397   if ( NLME_GetProtocolVersion() == ZB_PROT_V1_1 )
//  398   {
//  399     *pBuf++ = len;
//  400     addrLen = 3;
//  401   }
//  402   pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
//  403   osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
//  404 
//  405   return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
//  406 }
//  407 #endif // ZDO_USERDESCSET_REQUEST
//  408 
//  409 #if defined ( ZDO_SERVERDISC_REQUEST )
//  410 /*********************************************************************
//  411  * @fn          ZDP_ServerDiscReq
//  412  *
//  413  * @brief       Build and send a Server_Discovery_req request message.
//  414  *
//  415  * @param       serverMask - 16-bit bit-mask of server services being sought.
//  416  * @param       SecurityEnable - Security Options
//  417  *
//  418  * @return      afStatus_t
//  419  */
//  420 afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
//  421 {
//  422   byte *pBuf = ZDP_TmpBuf;
//  423   zAddrType_t dstAddr;
//  424 
//  425   dstAddr.addrMode = AddrBroadcast;
//  426   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
//  427 
//  428   *pBuf++ = LO_UINT16( serverMask );
//  429   *pBuf = HI_UINT16( serverMask );
//  430 
//  431   FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
//  432              ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
//  433 }
//  434 #endif
//  435 
//  436 #if defined ( ZDO_ENDDEVICE_ANNCE_REQUEST ) || defined ( ZDO_ENDDEVICE_ANNCE_GENERATE )
//  437 /*********************************************************************
//  438  * @fn          ZDP_EndDeviceAnnce
//  439  *
//  440  * @brief       This builds and send an End_Device_Annce
//  441  *              message.  This function sends a broadcast message.
//  442  *
//  443  * @param       nwkAddr - 16 bit address of the device
//  444  * @param       IEEEAddr - 64 bit address of the device
//  445  * @param       capabilities - device capabilities.  This field is only
//  446  *                 sent for v1.1 networks.
//  447  * @param       SecurityEnable - Security Options
//  448  *
//  449  * @return      afStatus_t
//  450  */
//  451 afStatus_t ZDP_EndDeviceAnnce( uint16 nwkAddr, byte *IEEEAddr,
//  452                               byte capabilities, byte SecurityEnable )
//  453 {
//  454   zAddrType_t dstAddr;
//  455   uint8 len;
//  456 
//  457   dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
//  458   dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  459 
//  460   ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
//  461   ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
//  462   osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
//  463   len = 2 + Z_EXTADDR_LEN;
//  464 
//  465   if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
//  466   {
//  467     ZDP_TmpBuf[10] = capabilities;
//  468     len++;
//  469   }
//  470 
//  471   return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_annce, len );
//  472 }
//  473 #endif // ZDO_ENDDEVICE_ANNCE_REQUEST
//  474 
//  475 /*********************************************************************
//  476  * Address Responses
//  477  */
//  478 
//  479 /*********************************************************************
//  480  * @fn      zdpProcessAddrReq
//  481  *
//  482  * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
//  483  *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
//  484  *
//  485  * @param   seq - Message sequence number of the request.
//  486  * @param   src - Source address of the request.
//  487  * @param   msg - Incoming request message.
//  488  * @param   cId - Cluster ID of the request.
//  489  * @param   sty - Security enable/disable options.
//  490  *
//  491  * @return  none
//  492  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  493 static void zdpProcessAddrReq(
??zdpProcessAddrReq:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function ??zdpProcessAddrReq
//  494                     byte seq, zAddrType_t *src, byte *msg, uint16 cId, byte sty )
//  495 {
        FUNCALL ??zdpProcessAddrReq, osal_ExtAddrEqual
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ??zdpProcessAddrReq, osal_cpyExtAddr
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ??zdpProcessAddrReq, AssocMakeList
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ??zdpProcessAddrReq, osal_mem_free
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ??zdpProcessAddrReq, ??fillAndSend
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 6
        MOV	A,#-0x6
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	A,R1
        MOVX	@DPTR,A
        MOV	A,#0x4
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R5
        MOVX	@DPTR,A
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
//  496   byte reqType = msg[(cId == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
        MOV	A,?V0 + 6
        JNZ	??zdpProcessAddrReq_1
        MOV	A,?V0 + 7
??zdpProcessAddrReq_1:
        JNZ	??zdpProcessAddrReq_2
        MOV	R0,#0x8
        SJMP	??zdpProcessAddrReq_3
??zdpProcessAddrReq_2:
        MOV	R0,#0x2
??zdpProcessAddrReq_3:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	DPL,R2
        MOV	DPH,A
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
//  497 
//  498   uint16 aoi = INVALID_NODE_ADDR;
//  499   byte *ieee = NULL;
        MOV	?V0 + 4,#0x0
        MOV	?V0 + 5,#0x0
//  500 
//  501   if ( cId == NWK_addr_req )
        MOV	A,?V0 + 6
        JNZ	??zdpProcessAddrReq_4
        MOV	A,?V0 + 7
??zdpProcessAddrReq_4:
        JNZ	??zdpProcessAddrReq_5
//  502   {
//  503     ieee = msg;
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 5,A
//  504 
//  505     if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
        ; Setup parameters for call to function osal_ExtAddrEqual
        MOV	R4,?V0 + 4
        MOV	R2,#(saveExtAddr & 0xff)
        MOV	R3,#((saveExtAddr >> 8) & 0xff)
        MOV	DPTR,#(osal_ExtAddrEqual & 0xffff)
        MOV	A,#((osal_ExtAddrEqual >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JNZ	$+5
        LJMP	??zdpProcessAddrReq_6 & 0xFFFF
//  506     {
//  507       aoi = ZDAppNwkAddr.addr.shortAddr;
        MOV	DPTR,#ZDAppNwkAddr
        LCALL	?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_77:
        SJMP	??zdpProcessAddrReq_7
//  508     }
//  509     /*
//  510     else if ( reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP )
//  511     {
//  512       //ggg - what to do?
//  513     }
//  514     */
//  515 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  516     else
//  517     {
//  518       aoi = ZDCacheGetNwkAddr( msg );
//  519     }
//  520 #endif
//  521   }
//  522   else  // if ( cId == IEEE_addr_req )
//  523   {
//  524     aoi = BUILD_UINT16( msg[0], msg[1] );
??zdpProcessAddrReq_5:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_82:
        MOVX	A,@DPTR
        MOV	R2,A
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        CLR	A
        ADD	A,R2
        MOV	R6,A
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R7,A
//  525 
//  526     if ( aoi == ZDAppNwkAddr.addr.shortAddr )
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??zdpProcessAddrReq_8
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R7
??zdpProcessAddrReq_8:
        JNZ	??zdpProcessAddrReq_7
//  527     {
//  528       ieee = saveExtAddr;
        MOV	?V0 + 4,#(saveExtAddr & 0xff)
        MOV	?V0 + 5,#((saveExtAddr >> 8) & 0xff)
//  529     }
//  530 #if defined( ZDO_CACHE ) && ( CACHE_DEV_MAX > 0 )
//  531     else
//  532     {
//  533       ieee = ZDCacheGetExtAddr( aoi );
//  534     }
//  535 #endif
//  536   }
//  537 
//  538   if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
??zdpProcessAddrReq_7:
        MOV	A,#-0x2
        XRL	A,R6
        JNZ	??zdpProcessAddrReq_9
        MOV	A,#-0x1
        XRL	A,R7
??zdpProcessAddrReq_9:
        JNZ	$+5
        LJMP	??zdpProcessAddrReq_6 & 0xFFFF
        MOV	A,?V0 + 4
        JNZ	??zdpProcessAddrReq_10
        MOV	A,?V0 + 5
??zdpProcessAddrReq_10:
        JNZ	$+5
        LJMP	??zdpProcessAddrReq_6 & 0xFFFF
//  539   {
//  540     byte *pBuf = ZDP_TmpBuf;
        MOV	DPTR,#??ZDP_TmpBuf
        LCALL	?Subroutine13 & 0xFFFF
//  541     // Status + IEEE-Addr + Nwk-Addr.
//  542     byte len = 1 + Z_EXTADDR_LEN + 2;
??CrossCallReturnLabel_38:
        MOV	?V0 + 2,#0xb
//  543 
//  544     byte stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) ||
//  545               (reqType == ZDP_ADDR_REQTYPE_EXTENDED) ||
//  546           ((reqType == ZDP_ADDR_REQTYPE_MEMBERSHIP) && (cId == NWK_addr_req)) ) ?
//  547       ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
        MOV	A,?V0 + 3
        JZ	??zdpProcessAddrReq_11
        MOV	A,#0x1
        XRL	A,?V0 + 3
        JZ	??zdpProcessAddrReq_11
        MOV	A,#0x2
        XRL	A,?V0 + 3
        JNZ	??zdpProcessAddrReq_12
        MOV	A,?V0 + 6
        JNZ	??zdpProcessAddrReq_13
        MOV	A,?V0 + 7
??zdpProcessAddrReq_13:
        JNZ	??zdpProcessAddrReq_12
??zdpProcessAddrReq_11:
        MOV	R2,#0x0
        SJMP	??zdpProcessAddrReq_14
??zdpProcessAddrReq_12:
        MOV	R2,#-0x80
//  548 
//  549     *pBuf++ = stat;
??zdpProcessAddrReq_14:
        MOV	A,R2
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	@DPTR,A
//  550 
//  551     pBuf = osal_cpyExtAddr( pBuf, ieee );
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	R4,?V0 + 4
        MOV	R5,?V0 + 5
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  552 
//  553     *pBuf++ = LO_UINT16( aoi );
        MOV	A,R6
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
        INC	DPTR
//  554     *pBuf++ = HI_UINT16( aoi );
        MOV	A,R7
        LCALL	?Subroutine24 & 0xFFFF
//  555 
//  556 #if defined( RTR_NWK )
//  557     if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) &&
//  558          (aoi == ZDAppNwkAddr.addr.shortAddr) )
??CrossCallReturnLabel_53:
        MOV	A,#0x1
        XRL	A,?V0 + 3
        JZ	$+5
        LJMP	??zdpProcessAddrReq_15 & 0xFFFF
        MOV	DPTR,#ZDAppNwkAddr
        MOVX	A,@DPTR
        XRL	A,R6
        JNZ	??zdpProcessAddrReq_16
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,R7
??zdpProcessAddrReq_16:
        JZ	$+5
        LJMP	??zdpProcessAddrReq_15 & 0xFFFF
//  559     {
//  560       byte cnt = 0;
        CLR	A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//  561       uint16 *list = AssocMakeList( &cnt );
        ; Setup parameters for call to function AssocMakeList
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(AssocMakeList & 0xffff)
        MOV	A,#((AssocMakeList >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  562 
//  563       // NumAssocDev field is only present on success.
//  564       *pBuf++ = cnt;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        LCALL	?Subroutine1 & 0xFFFF
//  565       len++;
??CrossCallReturnLabel_2:
        MOV	?V0 + 2,#0xc
//  566 
//  567       if ( list != NULL )
        MOV	A,R2
        JNZ	??zdpProcessAddrReq_17
        MOV	A,R3
??zdpProcessAddrReq_17:
        JNZ	$+5
        LJMP	??zdpProcessAddrReq_15 & 0xFFFF
//  568       {
//  569         byte idx =
//  570           msg[(((cId == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
        MOV	A,?V0 + 6
        JNZ	??zdpProcessAddrReq_18
        MOV	A,?V0 + 7
??zdpProcessAddrReq_18:
        JNZ	??zdpProcessAddrReq_19
        MOV	R0,#0x8
        SJMP	??zdpProcessAddrReq_20
??zdpProcessAddrReq_19:
        MOV	R0,#0x2
??zdpProcessAddrReq_20:
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	DPL,R4
        MOV	DPH,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R4,A
//  571         uint16 *pList = list + idx;
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,R2
        ADD	A,R0
        MOV	R0,A
        MOV	A,R3
        ADDC	A,R1
        MOV	R1,A
//  572 
//  573         // StartIndex field is only present if NumAssocDev field is non-zero.
//  574         *pBuf++ = idx;
        MOV	A,R4
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	?Subroutine24 & 0xFFFF
//  575         len++;
??CrossCallReturnLabel_54:
        MOV	?V0 + 2,#0xd
//  576 
//  577         if ( cnt > idx )
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,R4
        CLR	C
        SUBB	A,R5
        JNC	??zdpProcessAddrReq_21
//  578         {
//  579           cnt -= idx;
        MOVX	A,@DPTR
        CLR	C
        SUBB	A,R4
        MOVX	@DPTR,A
//  580           len += (cnt * sizeof( uint16 ));
        CLR	C
        RLC	A
        ADD	A,#0xd
        MOV	?V0 + 2,A
        SJMP	??zdpProcessAddrReq_22
//  581         }
//  582         else
//  583         {
//  584           cnt = 0;
??zdpProcessAddrReq_21:
        CLR	A
        MOVX	@DPTR,A
        SJMP	??zdpProcessAddrReq_23
//  585         }
//  586 
//  587         while ( cnt != 0 )
//  588         {
//  589           *pBuf++ = LO_UINT16( *pList );
??zdpProcessAddrReq_24:
        MOV	DPL,R0
        MOV	DPH,R1
        LCALL	?Subroutine1 & 0xFFFF
//  590           *pBuf++ = HI_UINT16( *pList );
??CrossCallReturnLabel_3:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        LCALL	?Subroutine1 & 0xFFFF
//  591           pList++;
??CrossCallReturnLabel_4:
        MOV	A,R0
        ADD	A,#0x2
        INC	R0
        INC	R0
        MOV	A,R1
        ADDC	A,#0x0
        MOV	R1,A
//  592           cnt--;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        DEC	A
        MOVX	@DPTR,A
//  593         }
??zdpProcessAddrReq_22:
        MOVX	A,@DPTR
        JNZ	??zdpProcessAddrReq_24
//  594 
//  595         osal_mem_free( (byte *)list );
??zdpProcessAddrReq_23:
        ; Setup parameters for call to function osal_mem_free
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  596       }
//  597     }
//  598 
//  599 #endif
//  600 
//  601     ZDP_TxOptions = AF_MSG_ACK_REQUEST;
??zdpProcessAddrReq_15:
        MOV	A,#0x10
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
//  602     fillAndSend( &seq, src, (cId_t)(cId | ZDO_RESPONSE_BIT), len );
        ; Setup parameters for call to function fillAndSend
        MOV	A,?V0 + 6
        MOV	?V0 + 0,A
        MOV	A,#-0x80
        ORL	A,?V0 + 7
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	R1,?V0 + 2
        MOV	A,#0x6
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  603     ZDP_TxOptions = AF_TX_OPTIONS_NONE;
        CLR	A
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
//  604   }
//  605 }
??zdpProcessAddrReq_6:
        MOV	A,#0x6
        LJMP	?Subroutine45 & 0xFFFF
        CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        LCALL	?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_87:
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_86:
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_4
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_3
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_53
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_2
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOVX	@DPTR,A
        INC	DPTR
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38
//  606 
//  607 /*********************************************************************
//  608  * @fn          ZDP_NodeDescMsg
//  609  *
//  610  * @brief       Builds and sends a Node Descriptor message, unicast to the
//  611  *              specified device.
//  612  *
//  613  * @param       dstAddr - destination address
//  614  * @param       nwkAddr - 16 bit network address for device
//  615  * @param       pNodeDesc - pointer to the node descriptor
//  616  * @param       SecurityEnable - Security Options
//  617  *
//  618  * @return      afStatus_t
//  619  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  620 afStatus_t ZDP_NodeDescMsg( byte TransSeq, zAddrType_t *dstAddr,
ZDP_NodeDescMsg:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function ZDP_NodeDescMsg
//  621        uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc, byte SecurityEnable )
//  622 {
        FUNCALL ZDP_NodeDescMsg, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        FUNCALL ZDP_NodeDescMsg, ??fillAndSend
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        MOV	A,#-0xc
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	A,#0xd
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine17 & 0xFFFF
//  623   byte proVer = NLME_GetProtocolVersion();
??CrossCallReturnLabel_104:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R2,A
//  624   byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine9 & 0xFFFF
//  625   byte len;
//  626 
//  627   if ( proVer == ZB_PROT_V1_0 )
??CrossCallReturnLabel_23:
        MOV	A,#0x1
        XRL	A,R2
        JNZ	??ZDP_NodeDescMsg_0
//  628   {
//  629     len = 1 + 2 + 8;  // Status + nwkAddr + Node descriptor
        MOV	R4,#0xb
        SJMP	??ZDP_NodeDescMsg_1
//  630   }
//  631   else
//  632   {
//  633     len = 1 + 2 + 10;  // Status + nwkAddr + Node descriptor
??ZDP_NodeDescMsg_0:
        MOV	R4,#0xd
//  634   }
//  635 
//  636   *pBuf++ = ZDP_SUCCESS;
??ZDP_NodeDescMsg_1:
        CLR	A
        MOV	DPL,R0
        MOV	DPH,R1
        LCALL	?Subroutine21 & 0xFFFF
//  637 
//  638   *pBuf++ = LO_UINT16( nwkAddr );
//  639   *pBuf++ = HI_UINT16( nwkAddr );
??CrossCallReturnLabel_47:
        MOV	R0,DPL
        MOV	R1,DPH
//  640 
//  641   if ( proVer == ZB_PROT_V1_0 )
        MOV	A,#0x1
        XRL	A,R2
        MOV	DPL,R6
        MOV	DPH,R7
        JNZ	??ZDP_NodeDescMsg_2
//  642   {
//  643     *pBuf++ = (byte)(pNodeDesc->LogicalType & 0x07);
        MOVX	A,@DPTR
        ANL	A,#0x7
        SJMP	??ZDP_NodeDescMsg_3
//  644   }
//  645   else
//  646   {
//  647     *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
//  648                      (pNodeDesc->UserDescAvail << 4) |
//  649                      (pNodeDesc->LogicalType & 0x07));
??ZDP_NodeDescMsg_2:
        MOVX	A,@DPTR
        ANL	A,#0x1f
??ZDP_NodeDescMsg_3:
        LCALL	?Subroutine37 & 0xFFFF
//  650   }
//  651 
//  652   *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
??CrossCallReturnLabel_84:
        LCALL	?Subroutine10 & 0xFFFF
//  653   *pBuf++ = pNodeDesc->CapabilityFlags;
??CrossCallReturnLabel_30:
        LCALL	?Subroutine10 & 0xFFFF
//  654   *pBuf++ = pNodeDesc->ManufacturerCode[0];
??CrossCallReturnLabel_31:
        INC	DPTR
        LCALL	?Subroutine7 & 0xFFFF
//  655   *pBuf++ = pNodeDesc->ManufacturerCode[1];
??CrossCallReturnLabel_18:
        LCALL	?Subroutine7 & 0xFFFF
//  656   *pBuf++ = pNodeDesc->MaxBufferSize;
??CrossCallReturnLabel_19:
        INC	DPTR
        LCALL	?Subroutine6 & 0xFFFF
//  657   *pBuf++ = pNodeDesc->MaxTransferSize[0];
??CrossCallReturnLabel_16:
        LCALL	?Subroutine6 & 0xFFFF
//  658   *pBuf++ = pNodeDesc->MaxTransferSize[1];
??CrossCallReturnLabel_17:
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_106:
        MOVX	@DPTR,A
        INC	DPTR
        INC	R0
        MOV	R1,DPH
//  659 
//  660   if ( proVer != ZB_PROT_V1_0 )
        MOV	A,#0x1
        XRL	A,R2
        JZ	??ZDP_NodeDescMsg_4
//  661   {
//  662     *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
        MOV	A,R6
        ADD	A,#0x8
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	??Subroutine19_0 & 0xFFFF
??CrossCallReturnLabel_107:
        MOVX	@DPTR,A
//  663     *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
        MOV	DPL,R2
        MOV	DPH,R3
        LCALL	?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_108:
        INC	DPTR
        MOVX	@DPTR,A
//  664   }
//  665 
//  666   return fillAndSend( &TransSeq, dstAddr, Node_Desc_rsp, len );
??ZDP_NodeDescMsg_4:
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x2
        MOV	?V0 + 1,#-0x80
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	A,R4
        MOV	R1,A
        MOV	R4,?V0 + 2
        MOV	R5,?V0 + 3
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV	R7,#0x4
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock39
//  667 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 1
        MOVX	@DPTR,A
        INC	DPTR
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOVX	A,@DPTR
        LCALL	?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_85:
        INC	DPTR
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_31
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        LCALL	?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_99:
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_19
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_17
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_31
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_30
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_18
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_84
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	@DPTR,A
        INC	DPTR
        INC	R0
        MOV	R1,DPH
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
        REQUIRE ?Subroutine46
        ; // Fall through to label ?Subroutine46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_16
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_31
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_18
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_19
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_17
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_30
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        RET
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        LCALL	?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_60:
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_16
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_19
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_17
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOVX	A,@DPTR
        LCALL	?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_100:
        INC	DPTR
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        LCALL	?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_61:
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78
//  668 
//  669 /*********************************************************************
//  670  * @fn          ZDP_PowerDescMsg
//  671  *
//  672  * @brief       Builds and sends a Power Descriptor message, unicast to the
//  673  *              specified device.
//  674  *
//  675  * @param       dstAddr - destination address
//  676  * @param       Status - message status (ZDP_SUCCESS or other)
//  677  * @param       nwkAddr - 16 bit network address for device
//  678  * @param       pPowerDesc - pointer to the node descriptor
//  679  * @param       SecurityEnable - Security Options
//  680  *
//  681  * @return      afStatus_t
//  682  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  683 afStatus_t ZDP_PowerDescMsg( byte TransSeq, zAddrType_t *dstAddr,
ZDP_PowerDescMsg:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function ZDP_PowerDescMsg
//  684   uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc, byte SecurityEnable )
//  685 {
        FUNCALL ZDP_PowerDescMsg, ??fillAndSend
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV	A,R0
        MOV	R6,A
        MOV	A,R1
        MOV	R7,A
//  686   byte *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine9 & 0xFFFF
//  687   byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
//  688 
//  689   *pBuf++ = ZDP_SUCCESS;
??CrossCallReturnLabel_25:
        CLR	A
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	@DPTR,A
        INC	DPTR
//  690 
//  691   *pBuf++ = LO_UINT16( nwkAddr );
        MOV	A,R4
        MOVX	@DPTR,A
        INC	DPTR
//  692   *pBuf++ = HI_UINT16( nwkAddr );
        MOV	A,R5
        MOVX	@DPTR,A
        INC	DPTR
        MOV	R0,DPL
        MOV	R1,DPH
//  693 
//  694   *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
//  695                     | (pPowerDesc->PowerMode & 0x0F));
        LCALL	?Subroutine16 & 0xFFFF
//  696   *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
//  697                     | (pPowerDesc->CurrentPowerSource & 0x0F));
??CrossCallReturnLabel_98:
        LCALL	??Subroutine19_0 & 0xFFFF
??CrossCallReturnLabel_109:
        INC	DPTR
        MOVX	@DPTR,A
//  698 
//  699   return fillAndSend( &TransSeq, dstAddr, Power_Desc_rsp, len );
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x3
        MOV	?V0 + 1,#-0x80
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	R1,#0x5
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        CFI EndBlock cfiBlock79
        REQUIRE ?Subroutine49
        ; // Fall through to label ?Subroutine49
//  700 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	R5,A
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond81 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_108
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        INC	DPTR
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 11)
??Subroutine19_0:
        MOVX	A,@DPTR
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        REQUIRE ?Subroutine48
        ; // Fall through to label ?Subroutine48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_108
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        MOV	DPL,R0
        MOV	DPH,R1
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond94 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker96 Using cfiCommon1
        CFI (cfiPicker96) NoFunction
        CFI (cfiPicker96) Picker
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	A,@DPTR
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	@DPTR,A
        LJMP	?Subroutine46 & 0xFFFF
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiPicker96
//  701 
//  702 /*********************************************************************
//  703  * @fn          ZDP_SimpleDescMsg
//  704  *
//  705  * @brief       Builds and sends a Simple Descriptor message, unicast to the
//  706  *              specified device.
//  707  *
//  708  * @param       dstAddr - destination address
//  709  * @param       Status - message status (ZDP_SUCCESS or other)
//  710  * @param       pSimpleDesc - pointer to the node descriptor
//  711  * @param       SecurityEnable - Security Options
//  712  *
//  713  * @return      afStatus_t
//  714  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  715 afStatus_t ZDP_SimpleDescMsg( byte TransSeq, zAddrType_t *dstAddr, byte Status,
ZDP_SimpleDescMsg:
        CFI Block cfiBlock97 Using cfiCommon0
        CFI Function ZDP_SimpleDescMsg
//  716                               SimpleDescriptionFormat_t *pSimpleDesc,
//  717                               cId_t clusterID, byte SecurityEnable )
//  718 {
        FUNCALL ZDP_SimpleDescMsg, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZDP_SimpleDescMsg, ??fillAndSend
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
        MOV	?V0 + 6,R4
        MOV	A,#0x10
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine31 & 0xFFFF
//  719   uint8 *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_70:
        MOV	DPTR,#??ZDP_TmpBuf
        LCALL	?Subroutine17 & 0xFFFF
//  720   uint8 i, len;
//  721   uint8 protoVer;
//  722 
//  723   protoVer = NLME_GetProtocolVersion();
??CrossCallReturnLabel_105:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R3,A
//  724 
//  725   if ( Status == ZDP_SUCCESS && pSimpleDesc )
        MOV	A,?V0 + 6
        JNZ	??ZDP_SimpleDescMsg_0
        MOV	A,?V0 + 0
        JNZ	??ZDP_SimpleDescMsg_1
        MOV	A,?V0 + 1
??ZDP_SimpleDescMsg_1:
        JZ	??ZDP_SimpleDescMsg_0
//  726   {
//  727     // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
//  728     len = 1 + 2 + 1 + 8;
//  729     len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters)
//  730             * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
        MOV	A,#0x1
        XRL	A,R3
        JZ	??ZDP_SimpleDescMsg_2
        MOV	R0,#0x2
        SJMP	??ZDP_SimpleDescMsg_3
??ZDP_SimpleDescMsg_2:
        MOV	R0,#0x1
??ZDP_SimpleDescMsg_3:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOV	R2,A
        MOVX	A,@DPTR
        ADD	A,R2
        MOV	B,A
        MOV	A,R0
        MUL	AB
        ADD	A,#0xc
        MOV	R2,A
//  731   }
//  732   else
//  733   {
//  734     len = 2; // Status + desc length
//  735   }
//  736   if ( len >= ZDP_BUF_SZ-1 )
        CLR	C
        SUBB	A,#0x4f
        JC	??ZDP_SimpleDescMsg_4
//  737   {
//  738     return afStatus_MEM_FAIL;
        MOV	R1,#-0x7f
        LJMP	??ZDP_SimpleDescMsg_5 & 0xFFFF
//  739   }
??ZDP_SimpleDescMsg_0:
        MOV	R2,#0x2
//  740 
//  741   *pBuf++ = Status;
??ZDP_SimpleDescMsg_4:
        MOV	DPL,R6
        MOV	DPH,R7
        MOV	A,?V0 + 6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	R6,DPL
        MOV	R7,DPH
//  742 
//  743   *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
        MOV	DPTR,#ZDAppNwkAddr
        LCALL	??Subroutine4_0 & 0xFFFF
//  744   *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
??CrossCallReturnLabel_9:
        MOV	DPTR,#(ZDAppNwkAddr + 1)
        LCALL	?Subroutine42 & 0xFFFF
//  745 
//  746   if ( len > 2 )
??CrossCallReturnLabel_93:
        MOV	A,R2
        CLR	C
        SUBB	A,#0x3
        JNC	$+5
        LJMP	??ZDP_SimpleDescMsg_6 & 0xFFFF
//  747   {
//  748     *pBuf++ = len - 4;   // Simple descriptor length
        MOV	A,#-0x4
        ADD	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        INC	R6
        INC	R6
        MOV	R7,DPH
//  749 
//  750     *pBuf++ = pSimpleDesc->EndPoint;
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	??Subroutine4_0 & 0xFFFF
//  751     *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
??CrossCallReturnLabel_10:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        MOV	R0,DPL
        MOV	R1,DPH
        LCALL	?Subroutine3 & 0xFFFF
//  752     *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
//  753     *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
??CrossCallReturnLabel_7:
        MOV	A,?V0 + 0
        ADD	A,#0x3
        LCALL	?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL	?Subroutine3 & 0xFFFF
//  754     *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
//  755 
//  756     if ( protoVer == ZB_PROT_V1_0 )
??CrossCallReturnLabel_8:
        MOV	A,#0x1
        XRL	A,R3
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        JNZ	??ZDP_SimpleDescMsg_7
//  757     {
//  758       *pBuf++ = (byte)((pSimpleDesc->AppDevVer << 4) | (pSimpleDesc->Reserved));
        MOVX	A,@DPTR
        MOV	R4,A
        SWAP	A
        ANL	A,#0xf
        PUSH	A
        CFI CFA_SP SP+-1
        MOV	A,R4
        SWAP	A
        ANL	A,#0xf0
        MOV	R4,A
        POP	A
        CFI CFA_SP SP+0
        ORL	A,R4
        SJMP	??ZDP_SimpleDescMsg_8
//  759     }
//  760     else
//  761     {
//  762       *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
??ZDP_SimpleDescMsg_7:
        MOVX	A,@DPTR
        SWAP	A
        ANL	A,#0xf0
??ZDP_SimpleDescMsg_8:
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
        INC	DPTR
        INC	R6
        MOV	R7,DPH
//  763     }
//  764 
//  765     *pBuf++ = pSimpleDesc->AppNumInClusters;
        MOV	A,?V0 + 0
        ADD	A,#0x6
        INC	R0
        INC	R0
        INC	R0
        LCALL	??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_111:
        LCALL	??Subroutine4_0 & 0xFFFF
//  766     if ( pSimpleDesc->AppNumInClusters )
??CrossCallReturnLabel_11:
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        JZ	??ZDP_SimpleDescMsg_9
//  767     {
//  768       for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
        MOV	R4,#0x0
        SJMP	??ZDP_SimpleDescMsg_10
//  769       {
//  770         *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
??ZDP_SimpleDescMsg_11:
        MOV	A,R4
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	?Subroutine5 & 0xFFFF
//  771         if ( protoVer != ZB_PROT_V1_0 )
??CrossCallReturnLabel_14:
        JZ	??CrossCallReturnLabel_12
//  772         {
//  773         *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        LCALL	?Subroutine4 & 0xFFFF
//  774       }
//  775     }
??CrossCallReturnLabel_12:
        INC	R4
??ZDP_SimpleDescMsg_10:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,R4
        CLR	C
        SUBB	A,R5
        JC	??ZDP_SimpleDescMsg_11
//  776     }
//  777     *pBuf++ = pSimpleDesc->AppNumOutClusters;
??ZDP_SimpleDescMsg_9:
        MOV	A,?V0 + 0
        ADD	A,#0x9
        LCALL	?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_112:
        LCALL	?Subroutine32 & 0xFFFF
//  778     if ( pSimpleDesc->AppNumOutClusters )
??CrossCallReturnLabel_72:
        MOV	DPL,R0
        MOV	DPH,R1
        MOVX	A,@DPTR
        JZ	??ZDP_SimpleDescMsg_12
//  779     {
//  780       for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
        MOV	R4,#0x0
??ZDP_SimpleDescMsg_13:
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,R4
        CLR	C
        SUBB	A,R5
        JNC	??ZDP_SimpleDescMsg_12
//  781       {
//  782         *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
        MOV	A,R4
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine5 & 0xFFFF
//  783         if ( protoVer != ZB_PROT_V1_0 )
??CrossCallReturnLabel_15:
        JZ	??CrossCallReturnLabel_13
//  784         {
//  785         *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine4 & 0xFFFF
//  786       }
//  787     }
??CrossCallReturnLabel_13:
        INC	R4
        SJMP	??ZDP_SimpleDescMsg_13
//  788   }
//  789   }
//  790   else
//  791   {
//  792     *pBuf = 0; // Description Length = 0;
??ZDP_SimpleDescMsg_6:
        CLR	A
        MOVX	@DPTR,A
//  793   }
//  794 
//  795   return fillAndSend( &TransSeq, dstAddr, clusterID, len );
??ZDP_SimpleDescMsg_12:
        ; Setup parameters for call to function fillAndSend
        MOV	R0,#?V0 + 2
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	A,R2
        MOV	R1,A
        MOV	R4,?V0 + 4
        MOV	R5,?V0 + 5
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
??ZDP_SimpleDescMsg_5:
        MOV	A,#0x1
        LJMP	?Subroutine44 & 0xFFFF
        CFI EndBlock cfiBlock97
//  796 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_102
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_103
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker102 Using cfiCommon1
        CFI (cfiPicker102) NoFunction
        CFI (cfiPicker102) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 3,A
        RET
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond103 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_110
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        MOV	R0,A
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 16)
??Subroutine25_0:
        MOV	A,?V0 + 1
        ADDC	A,#0x0
        MOV	R1,A
        LJMP	?Subroutine48 & 0xFFFF
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105
        CFI EndBlock cfiCond106

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond107 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_104
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        LCALL	?Subroutine34 & 0xFFFF
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109
??CrossCallReturnLabel_79:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        ; Setup parameters for call to function NLME_GetProtocolVersion
        REQUIRE ?Subroutine47
        ; // Fall through to label ?Subroutine47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_102
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker114 Using cfiCommon1
        CFI (cfiPicker114) NoFunction
        CFI (cfiPicker114) Picker
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_104
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_105
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOVX	A,@DPTR
        MOV	R6,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R7,A
        RET
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        LCALL	?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL	?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV	A,#0x1
        XRL	A,R3
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_14
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker127 Using cfiCommon1
        CFI (cfiPicker127) NoFunction
        CFI (cfiPicker127) Picker
        LCALL	?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV	R6,DPL
        MOV	R7,DPH
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond128 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_8
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_8
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_7
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_9
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_11
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_12
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_7
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_14
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_15
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_13
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_72
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker141 Using cfiCommon1
        CFI (cfiPicker141) NoFunction
        CFI (cfiPicker141) Picker
        MOVX	A,@DPTR
        MOV	DPL,R6
        MOV	DPH,R7
        MOVX	@DPTR,A
        INC	DPTR
        RET
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiPicker141

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond142 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker144 Using cfiCommon1
        CFI (cfiPicker144) NoFunction
        CFI (cfiPicker144) Picker
        LCALL	?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_74:
        INC	DPTR
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 16)
??Subroutine4_0:
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_66:
        RET
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiPicker144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond148 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_12
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_14
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_15
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker152 Using cfiCommon1
        CFI (cfiPicker152) NoFunction
        CFI (cfiPicker152) Picker
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond153 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        LCALL	?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_65:
        RET
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond156 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_8
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_10
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_8
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_7
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_7
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_9
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_11
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_12
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker165 Using cfiCommon1
        CFI (cfiPicker165) NoFunction
        CFI (cfiPicker165) Picker
        LCALL	?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_94:
        INC	R6
        MOV	R7,DPH
        RET
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiPicker165
//  797 
//  798 /*********************************************************************
//  799  * @fn          ZDP_EPRsp
//  800  *
//  801  * @brief       This builds and send an endpoint list. Used in
//  802  *              Active_EP_rsp and Match_Desc_Rsp
//  803  *              message.  This function sends unicast message to the
//  804  *              requesting device.
//  805  *
//  806  * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
//  807  * @param       dstAddr - destination address
//  808  * @param       Status - message status (ZDP_SUCCESS or other)
//  809  * @param       nwkAddr - Device's short address that this response describes
//  810  * @param       Count - number of endpoint/interfaces in list
//  811  * @param       pEPIntfList - Array of Endpoint/Interfaces
//  812  * @param       SecurityEnable - Security Options
//  813  *
//  814  * @return      afStatus_t
//  815  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  816 afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
ZDP_EPRsp:
        CFI Block cfiBlock166 Using cfiCommon0
        CFI Function ZDP_EPRsp
//  817                         byte Status, uint16 nwkAddr, byte Count,
//  818                         byte *pEPList,
//  819                         byte SecurityEnable )
//  820 {
        FUNCALL ZDP_EPRsp, osal_memcpy
        LOCFRAME XSTACK, 20, STACK
        ARGFRAME XSTACK, 20, STACK
        FUNCALL ZDP_EPRsp, ??fillAndSend
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	?V0 + 6,R4
        MOV	?V0 + 7,R5
        MOV	A,#0x11
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	A,#0x12
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV	A,#0x14
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
//  821   byte *pBuf = ZDP_TmpBuf;
??CrossCallReturnLabel_34:
        MOV	R3,A
//  822   byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
        MOV	?V0 + 3,#0x4
//  823   byte txOptions;
//  824 
//  825   if ( MsgType == Match_Desc_rsp )
        MOV	A,#0x6
        XRL	A,R6
        JNZ	??ZDP_EPRsp_0
        MOV	A,#-0x80
        XRL	A,R7
??ZDP_EPRsp_0:
        JNZ	??ZDP_EPRsp_1
//  826     txOptions = AF_MSG_ACK_REQUEST;
        MOV	?V0 + 4,#0x10
        SJMP	??ZDP_EPRsp_2
//  827   else
//  828     txOptions = 0;
??ZDP_EPRsp_1:
        MOV	?V0 + 4,#0x0
//  829 
//  830     *pBuf++ = Status;
??ZDP_EPRsp_2:
        MOV	A,R5
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	@DPTR,A
        INC	DPTR
//  831   *pBuf++ = LO_UINT16( nwkAddr );
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
//  832   *pBuf++ = HI_UINT16( nwkAddr );
        MOV	A,R1
        MOVX	@DPTR,A
        INC	DPTR
        MOV	R2,DPL
        MOV	R3,DPH
//  833 
//  834   *pBuf++ = Count;   // Endpoint/Interface count
        MOV	A,R4
        MOVX	@DPTR,A
//  835 
//  836   if ( Count )
        JZ	??ZDP_EPRsp_3
//  837   {
//  838     len += Count;
        MOV	A,#0x4
        ADD	A,R4
        MOV	?V0 + 3,A
//  839     osal_memcpy( pBuf, pEPList, Count );
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV	R5,#0x0
        MOV	DPL,R2
        MOV	DPH,R3
        INC	DPTR
        INC	R2
        MOV	R3,DPH
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  840   }
//  841 
//  842   FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
??ZDP_EPRsp_3:
        MOV	A,?V0 + 4
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,R6
        MOV	?V0 + 1,R7
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	R1,?V0 + 3
        MOV	R4,?V0 + 6
        MOV	R5,?V0 + 7
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        CLR	A
        MOV	DPTR,#??ZDP_TxOptions
        MOVX	@DPTR,A
        MOV	A,#0x1
        CFI EndBlock cfiBlock166
        REQUIRE ?Subroutine45
        ; // Fall through to label ?Subroutine45
//  843 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiBlock167 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV	R7,#0x8
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock167
//  844 
//  845 #if defined ( ZDO_USERDESC_RESPONSE )
//  846 /*********************************************************************
//  847  * @fn          ZDP_UserDescRsp
//  848  *
//  849  * @brief       Build and send the User Decriptor Response.
//  850  *
//  851  *
//  852  * @param       dstAddr - destination address
//  853  * @param       nwkAddrOfInterest -
//  854  * @param       userDesc -
//  855  * @param       SecurityEnable - Security Options
//  856  *
//  857  * @return      ZStatus_t
//  858  */
//  859 ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
//  860                 uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
//  861                 byte SecurityEnable )
//  862 {
//  863   byte *pBuf = ZDP_TmpBuf;
//  864   byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
//  865 
//  866   len += userDesc->len;
//  867 
//  868   *pBuf++ = ZSUCCESS;
//  869 
//  870   *pBuf++ = LO_UINT16( nwkAddrOfInterest );
//  871   *pBuf++ = HI_UINT16( nwkAddrOfInterest );
//  872 
//  873   *pBuf++ = userDesc->len;
//  874   osal_memcpy( pBuf, userDesc->desc, userDesc->len );
//  875 
//  876   return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
//  877 }
//  878 #endif // ZDO_USERDESC_RESPONSE
//  879 
//  880 #if defined ( ZDO_SERVERDISC_RESPONSE )
//  881 /*********************************************************************
//  882  * @fn          ZDP_ServerDiscRsp
//  883  *
//  884  * @brief       Build and send the Server_Discovery_rsp response.
//  885  *
//  886  * @param       transID - Transaction sequence number of request.
//  887  * @param       dstAddr - Network Destination Address.
//  888  * @param       status - Status of response to request.
//  889  * @param       aoi - Network Address of Interest of request.
//  890  * @param       serverMask - Bit map of service(s) being sought.
//  891  * @param       SecurityEnable - Security Options
//  892  *
//  893  * @return      ZStatus_t
//  894  */
//  895 ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
//  896                            uint16 aoi, uint16 serverMask, byte SecurityEnable )
//  897 {
//  898   const byte len = 1  + 2;  // status + aoi + mask.
//  899   byte *pBuf = ZDP_TmpBuf;
//  900 
//  901   *pBuf++ = status;
//  902 
//  903   *pBuf++ = LO_UINT16( serverMask );
//  904   *pBuf++ = HI_UINT16( serverMask );
//  905 
//  906   return (ZStatus_t)fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
//  907 }
//  908 #endif // ZDO_USERDESC_RESPONSE
//  909 
//  910 /*********************************************************************
//  911  * @fn          ZDP_GenericRsp
//  912  *
//  913  * @brief       Sends a response message with only the parameter status
//  914  *              byte and the addr of interest for data.
//  915  *              This function sends unicast message to the
//  916  *              requesting device.
//  917  *
//  918  * @param       dstAddr - destination address
//  919  * @param       status  - generic status for response
//  920  * @param       aoi     - address of interest
//  921  * @param       dstAddr - destination address
//  922  * @param       rspId   - response cluster ID
//  923  * @param       SecurityEnable - Security Options
//  924  *
//  925  * @return      afStatus_t
//  926  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  927 afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
ZDP_GenericRsp:
        CFI Block cfiBlock168 Using cfiCommon0
        CFI Function ZDP_GenericRsp
//  928                      byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
//  929 {
        FUNCALL ZDP_GenericRsp, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        FUNCALL ZDP_GenericRsp, ??fillAndSend
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
        MOV	A,#0xb
        LCALL	?XSTACK_DISP0_8
        LCALL	??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV	A,#0xd
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine12 & 0xFFFF
//  930   uint8 len;
//  931 
//  932   ZDP_TmpBuf[0] = status;
??CrossCallReturnLabel_35:
        MOV	DPH,A
        MOV	DPL,R2
        MOV	A,R4
        MOVX	@DPTR,A
//  933   ZDP_TmpBuf[1] = LO_UINT16( aoi );
        MOV	DPTR,#??ZDP_TmpBuf
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R2
        INC	DPTR
        MOV	A,R0
        MOVX	@DPTR,A
//  934   ZDP_TmpBuf[2] = HI_UINT16( aoi );
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV	A,R1
        MOVX	@DPTR,A
//  935 
//  936   if ( NLME_GetProtocolVersion() != ZB_PROT_V1_0 )
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        XRL	A,#0x1
        JZ	??ZDP_GenericRsp_0
//  937   {
//  938     // Length byte
//  939     ZDP_TmpBuf[3] = 0;
        LCALL	?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_43:
        INC	DPTR
        CLR	A
        MOVX	@DPTR,A
//  940     len = 4;
        MOV	R1,#0x4
        SJMP	??ZDP_GenericRsp_1
//  941   }
//  942   else
//  943   {
//  944     len = 3;
??ZDP_GenericRsp_0:
        MOV	R1,#0x3
//  945   }
//  946 
//  947 
//  948   return fillAndSend( &TransSeq, dstAddr, rspID, len );
??ZDP_GenericRsp_1:
        ; Setup parameters for call to function fillAndSend
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	A,R6
        MOV	R4,A
        MOV	A,R7
        LJMP	?Subroutine49 & 0xFFFF
        CFI EndBlock cfiBlock168
//  949 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond169 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker171 Using cfiCommon1
        CFI (cfiPicker171) NoFunction
        CFI (cfiPicker171) Picker
        MOV	DPTR,#??ZDP_TmpBuf
        LCALL	?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_83:
        INC	DPTR
        INC	DPTR
        RET
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiPicker171

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond172 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_42
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker175 Using cfiCommon1
        CFI (cfiPicker175) NoFunction
        CFI (cfiPicker175) Picker
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	DPH,A
        MOV	DPL,R0
        RET
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiPicker175

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond176 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker178 Using cfiCommon1
        CFI (cfiPicker178) NoFunction
        CFI (cfiPicker178) Picker
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        MOV	DPTR,#??ZDP_TmpBuf
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiPicker178
//  950 
//  951 /*********************************************************************
//  952  * Binding
//  953  */
//  954 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  955 /*********************************************************************
//  956  * @fn          ZDP_EndDeviceBindReq
//  957  *
//  958  * @brief       This builds and sends a End_Device_Bind_req message.
//  959  *              This function sends a unicast message.
//  960  *
//  961  * @param       dstAddr - destination address
//  962  * @param       LocalCoordinator - short address of local coordinator
//  963  * @param       epIntf - Endpoint/Interface of Simple Desc
//  964  * @param       ProfileID - Profile ID
//  965  *
//  966  *   The Input cluster list is the opposite of what you would think.
//  967  *   This is the output cluster list of this device
//  968  * @param       NumInClusters - number of input clusters
//  969  * @param       InClusterList - input cluster ID list
//  970  *
//  971  *   The Output cluster list is the opposite of what you would think.
//  972  *   This is the input cluster list of this device
//  973  * @param       NumOutClusters - number of output clusters
//  974  * @param       OutClusterList - output cluster ID list
//  975  *
//  976  * @param       SecurityEnable - Security Options
//  977  *
//  978  * @return      afStatus_t
//  979  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  980 afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
ZDP_EndDeviceBindReq:
        CFI Block cfiBlock179 Using cfiCommon0
        CFI Function ZDP_EndDeviceBindReq
//  981                                  uint16 LocalCoordinator,
//  982                                  byte endPoint,
//  983                                  uint16 ProfileID,
//  984                                  byte NumInClusters, cId_t *InClusterList,
//  985                                  byte NumOutClusters, cId_t *OutClusterList,
//  986                                  byte SecurityEnable )
//  987 {
        FUNCALL ZDP_EndDeviceBindReq, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_EndDeviceBindReq, NLME_GetExtAddr
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_EndDeviceBindReq, osal_cpyExtAddr
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL ZDP_EndDeviceBindReq, ??fillAndSend
        LOCFRAME XSTACK, 21, STACK
        ARGFRAME XSTACK, 21, STACK
        MOV	A,#-0x10
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 3
        MOV	A,#-0x3
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	A,R1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	A,#0x13
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV	A,#0x15
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 7,A
        MOV	A,#0x18
        LCALL	?XSTACK_DISP0_8
        MOVX	A,@DPTR
        MOV	?V0 + 6,A
//  988   uint8 *pBuf = ZDP_TmpBuf;
        LCALL	?Subroutine15 & 0xFFFF
//  989   uint8 i, len;
//  990   uint8 *ieeeAddr;
//  991   uint8 protoVer = NLME_GetProtocolVersion();
??CrossCallReturnLabel_103:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	?V0 + 5,A
//  992 
//  993   if ( protoVer != ZB_PROT_V1_0 )
        MOV	A,#0x1
        XRL	A,?V0 + 5
        JZ	??ZDP_EndDeviceBindReq_0
//  994   {
//  995     // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
//  996     len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
        MOV	?V0 + 4,#0xf
        MOV	R0,#0x2
        SJMP	??ZDP_EndDeviceBindReq_1
//  997   }
//  998   else
//  999   {
// 1000     // LocalCoordinator + ep + ProfileID +  NumInClusters + NumOutClusters.
// 1001     len = 2 + 1 + 2 + 1 + 1;
??ZDP_EndDeviceBindReq_0:
        MOV	?V0 + 4,#0x7
        MOV	R0,#0x1
??ZDP_EndDeviceBindReq_1:
        MOV	A,?V0 + 6
        ADD	A,?V0 + 7
        MOV	B,A
        MOV	A,R0
        MUL	AB
        ADD	A,?V0 + 4
        MOV	?V0 + 4,A
// 1002   }
// 1003 
// 1004   len += (NumInClusters + NumOutClusters) * ((protoVer != ZB_PROT_V1_0) ? sizeof ( uint16 ) : sizeof( uint8 ));
// 1005   if ( len >= ZDP_BUF_SZ-1 )
        CLR	C
        SUBB	A,#0x4f
        JC	??ZDP_EndDeviceBindReq_2
// 1006   {
// 1007     return afStatus_MEM_FAIL;
        MOV	R1,#-0x7f
        LJMP	??ZDP_EndDeviceBindReq_3 & 0xFFFF
// 1008   }
// 1009 
// 1010   *pBuf++ = LO_UINT16( LocalCoordinator );
??ZDP_EndDeviceBindReq_2:
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
// 1011   *pBuf++ = HI_UINT16( LocalCoordinator );
        MOV	A,?V0 + 1
        LCALL	?Subroutine23 & 0xFFFF
// 1012 
// 1013   if ( protoVer != ZB_PROT_V1_0 )
??CrossCallReturnLabel_52:
        MOV	A,#0x1
        XRL	A,?V0 + 5
        JZ	??ZDP_EndDeviceBindReq_4
// 1014   {
// 1015     ieeeAddr = NLME_GetExtAddr();
// 1016     pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
        ; Setup parameters for call to function osal_cpyExtAddr
        ; Setup parameters for call to function NLME_GetExtAddr
        MOV	DPTR,#(NLME_GetExtAddr & 0xffff)
        MOV	A,#((NLME_GetExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	R2,?V0 + 2
        MOV	R3,?V0 + 3
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 2,R2
        MOV	?V0 + 3,R3
// 1017   }
// 1018 
// 1019   *pBuf++ = endPoint;
??ZDP_EndDeviceBindReq_4:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOVX	@DPTR,A
        INC	DPTR
// 1020 
// 1021   *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
// 1022   *pBuf++ = HI_UINT16( ProfileID );
        MOV	A,R7
        MOVX	@DPTR,A
        INC	DPTR
// 1023 
// 1024   *pBuf++ = NumInClusters; // Input cluster list
        MOV	A,?V0 + 7
        LCALL	?Subroutine22 & 0xFFFF
// 1025   for ( i = 0; i < NumInClusters; ++i )
??CrossCallReturnLabel_48:
        SJMP	??ZDP_EndDeviceBindReq_5
// 1026   {
// 1027     *pBuf++ = LO_UINT16(InClusterList[i]);
??ZDP_EndDeviceBindReq_6:
        MOV	A,R2
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine0 & 0xFFFF
// 1028     if (protoVer != ZB_PROT_V1_0)  {
??CrossCallReturnLabel_0:
        JZ	??CrossCallReturnLabel_5
// 1029       *pBuf++ = HI_UINT16(InClusterList[i]);
        MOV	A,#0x16
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
// 1030     }
// 1031   }
??CrossCallReturnLabel_5:
        INC	R2
??ZDP_EndDeviceBindReq_5:
        MOV	A,R2
        CLR	C
        SUBB	A,?V0 + 7
        JC	??ZDP_EndDeviceBindReq_6
// 1032 
// 1033   *pBuf++ = NumOutClusters; // Output cluster list
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        MOV	A,?V0 + 6
        LCALL	?Subroutine22 & 0xFFFF
// 1034   for ( i = 0; i < NumOutClusters; ++i )
??CrossCallReturnLabel_49:
        SJMP	??ZDP_EndDeviceBindReq_7
// 1035   {
// 1036     *pBuf++ = LO_UINT16(OutClusterList[i]);
??ZDP_EndDeviceBindReq_8:
        MOV	A,R2
        CLR	C
        RLC	A
        MOV	R0,A
        CLR	A
        RLC	A
        MOV	R1,A
        MOV	A,#0x19
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine0 & 0xFFFF
// 1037     if (protoVer != ZB_PROT_V1_0)  {
??CrossCallReturnLabel_1:
        JZ	??CrossCallReturnLabel_6
// 1038       *pBuf++ = HI_UINT16(OutClusterList[i]);
        MOV	A,#0x19
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine2 & 0xFFFF
// 1039     }
// 1040   }
??CrossCallReturnLabel_6:
        INC	R2
??ZDP_EndDeviceBindReq_7:
        MOV	A,R2
        CLR	C
        SUBB	A,?V0 + 6
        JC	??ZDP_EndDeviceBindReq_8
// 1041 
// 1042   return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
        ; Setup parameters for call to function fillAndSend
        MOV	?V0 + 0,#0x20
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV	R1,?V0 + 4
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        LCALL	?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
??ZDP_EndDeviceBindReq_3:
        MOV	A,#0x3
        LJMP	?Subroutine45 & 0xFFFF
        CFI EndBlock cfiBlock179
// 1043 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond180 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker183 Using cfiCommon1
        CFI (cfiPicker183) NoFunction
        CFI (cfiPicker183) Picker
        LCALL	?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_89:
        RET
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiPicker183

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond184 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_50
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_49
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_51
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_52
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker189 Using cfiCommon1
        CFI (cfiPicker189) NoFunction
        CFI (cfiPicker189) Picker
        LCALL	??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_92:
        RET
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiPicker189

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond190 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+0
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker192 Using cfiCommon1
        CFI (cfiPicker192) NoFunction
        CFI (cfiPicker192) Picker
        LCALL	?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV	R2,#0x0
        RET
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiPicker192

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond193 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_103
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker195 Using cfiCommon1
        CFI (cfiPicker195) NoFunction
        CFI (cfiPicker195) Picker
        MOV	DPTR,#??ZDP_TmpBuf
        LCALL	?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_71:
        ; Setup parameters for call to function NLME_GetProtocolVersion
        ; Setup parameters for call to function NLME_GetProtocolVersion
        LJMP	?Subroutine47 & 0xFFFF
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond196 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker198 Using cfiCommon1
        CFI (cfiPicker198) NoFunction
        CFI (cfiPicker198) Picker
        MOVX	A,@DPTR
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
        MOV	R2,#(ZDP_TransID & 0xff)
        MOV	R3,#((ZDP_TransID >> 8) & 0xff)
        MOV	DPTR,#(??fillAndSend & 0xffff)
        MOV	A,#((??fillAndSend >> 16) & 0xff)
        RET
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiPicker198

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond199 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker201 Using cfiCommon1
        CFI (cfiPicker201) NoFunction
        CFI (cfiPicker201) Picker
        LCALL	?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL	?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_67:
        RET
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiPicker201

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond202 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_6
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_5
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_32
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker206 Using cfiCommon1
        CFI (cfiPicker206) NoFunction
        CFI (cfiPicker206) Picker
        MOV	DPH,A
        INC	DPTR
        LCALL	?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_91:
        RET
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiPicker206

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond207 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_6
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond209 Using cfiCommon0
        CFI (cfiCond209) NoFunction
        CFI (cfiCond209) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_5
        CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond209) CFA_SP SP+0
        CFI (cfiCond209) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_1
        CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond210) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond210) CFA_SP SP+0
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond211 Using cfiCommon0
        CFI (cfiCond211) NoFunction
        CFI (cfiCond211) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_20
        CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond211) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond211) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond211) CFA_SP SP+0
        CFI (cfiCond211) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_32
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_0
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_33
        CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond214) CFA_SP SP+0
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker215 Using cfiCommon1
        CFI (cfiPicker215) NoFunction
        CFI (cfiPicker215) Picker
        MOVX	A,@DPTR
        MOV	DPL,?V0 + 2
        MOV	DPH,?V0 + 3
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_49
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond217 Using cfiCommon0
        CFI (cfiCond217) NoFunction
        CFI (cfiCond217) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_52
        CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond217) CFA_SP SP+0
        CFI (cfiCond217) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_51
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_50
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_48
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 19)
??Subroutine40_0:
        MOVX	@DPTR,A
        INC	DPTR
        MOV	?V0 + 2,DPL
        MOV	?V0 + 3,DPH
        RET
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiPicker215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond221 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker223 Using cfiCommon1
        CFI (cfiPicker223) NoFunction
        CFI (cfiPicker223) Picker
        LCALL	?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL	?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_63:
        XRL	A,?V0 + 5
        RET
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiPicker223

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond224 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_1
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond225) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond225) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_6
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_5
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker228 Using cfiCommon1
        CFI (cfiPicker228) NoFunction
        CFI (cfiPicker228) Picker
        MOVX	A,@DPTR
        ADD	A,R0
        MOV	R3,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,R1
        MOV	DPL,R3
        RET
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiPicker228

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond229 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_0
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_1
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_20
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker233 Using cfiCommon1
        CFI (cfiPicker233) NoFunction
        CFI (cfiPicker233) Picker
        MOV	DPH,A
        LCALL	?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV	A,#0x1
        RET
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiPicker233
// 1044 #endif // ZDO_ENDDEVICEBIND_REQUEST
// 1045 
// 1046 #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
// 1047 /*********************************************************************
// 1048  * @fn          ZDP_BindUnbindReq
// 1049  *
// 1050  * @brief       This builds and send a Bind_req or Unbind_req message
// 1051  *              Depending on the ClusterID. This function
// 1052  *              sends a unicast message to the local coordinator.
// 1053  *
// 1054  * @param       BindOrUnbind - either Bind_req or Unbind_req
// 1055  * @param       dstAddr - destination address of the message
// 1056  * @param       SourceAddr - source 64 bit address of the binding
// 1057  * @param       SrcEPIntf - Source endpoint/interface
// 1058  * @param       ClusterID - Binding cluster ID
// 1059  * @param       DestinationAddr - destination 64 bit addr of binding
// 1060  * @param       DstEPIntf - destination endpoint/interface
// 1061  * @param       SecurityEnable - Security Options
// 1062  *
// 1063  * @return      afStatus_t
// 1064  */
// 1065 afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
// 1066                               byte *SourceAddr, byte SrcEndPoint,
// 1067                               cId_t ClusterID,
// 1068                               zAddrType_t *destinationAddr, byte DstEndPoint,
// 1069                               byte SecurityEnable )
// 1070 {
// 1071   uint8 *pBuf = ZDP_TmpBuf;
// 1072   uint8  protoVer;
// 1073   byte len;
// 1074 
// 1075   protoVer = NLME_GetProtocolVersion();
// 1076 
// 1077   if ( protoVer == ZB_PROT_V1_0 )
// 1078   {
// 1079     // SourceAddr + SrcEPIntf + ClusterID +  DestinationAddr + DstEPIntf.
// 1080     len = Z_EXTADDR_LEN + 1 + sizeof( uint8 ) + Z_EXTADDR_LEN + 1;
// 1081   }
// 1082   else
// 1083   {
// 1084     // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
// 1085     len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
// 1086     if ( destinationAddr->addrMode == Addr64Bit )
// 1087       len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
// 1088     else if ( destinationAddr->addrMode == AddrGroup )
// 1089       len += sizeof ( uint16 );
// 1090   }
// 1091 
// 1092   pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
// 1093   *pBuf++ = SrcEndPoint;
// 1094 
// 1095   *pBuf++ = LO_UINT16( ClusterID );
// 1096   if ( protoVer != ZB_PROT_V1_0 )
// 1097   {
// 1098     *pBuf++ = HI_UINT16( ClusterID );
// 1099 
// 1100     *pBuf++ = destinationAddr->addrMode;
// 1101     if ( destinationAddr->addrMode == Addr64Bit )
// 1102     {
// 1103       pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
// 1104       *pBuf = DstEndPoint;
// 1105     }
// 1106     else if ( destinationAddr->addrMode == AddrGroup )
// 1107     {
// 1108       *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
// 1109       *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
// 1110     }
// 1111   }
// 1112   else
// 1113   {
// 1114     pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
// 1115     *pBuf = DstEndPoint;
// 1116   }
// 1117 
// 1118   FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
// 1119 }
// 1120 #endif // ZDO_BIND_UNBIND_REQUEST
// 1121 
// 1122 /*********************************************************************
// 1123  * Network Management
// 1124  */
// 1125 
// 1126 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
// 1127 /*********************************************************************
// 1128  * @fn          ZDP_MgmtNwkDiscReq
// 1129  *
// 1130  * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
// 1131  *              function sends a unicast message.
// 1132  *
// 1133  * @param       dstAddr - destination address of the message
// 1134  * @param       ScanChannels - 32 bit address bit map
// 1135  * @param       StartIndex - Starting index within the reporting network
// 1136  *                           list
// 1137  * @param       SecurityEnable - Security Options
// 1138  *
// 1139  * @return      afStatus_t
// 1140  */
// 1141 afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
// 1142                                uint32 ScanChannels,
// 1143                                byte ScanDuration,
// 1144                                byte StartIndex,
// 1145                                byte SecurityEnable )
// 1146 {
// 1147   byte *pBuf = ZDP_TmpBuf;
// 1148   byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
// 1149 
// 1150   *pBuf++ = BREAK_UINT32( ScanChannels, 0 );
// 1151   *pBuf++ = BREAK_UINT32( ScanChannels, 1 );
// 1152   *pBuf++ = BREAK_UINT32( ScanChannels, 2 );
// 1153   *pBuf++ = BREAK_UINT32( ScanChannels, 3 );
// 1154 
// 1155   *pBuf++ = ScanDuration;
// 1156   *pBuf = StartIndex;
// 1157 
// 1158   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
// 1159 }
// 1160 #endif // ZDO_MGMT_NWKDISC_REQUEST
// 1161 
// 1162 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
// 1163 /*********************************************************************
// 1164  * @fn          ZDP_MgmtDirectJoinReq
// 1165  *
// 1166  * @brief       This builds and send a Mgmt_Direct_Join_req message. This
// 1167  *              function sends a unicast message.
// 1168  *
// 1169  * @param       dstAddr - destination address of the message
// 1170  * @param       deviceAddr - 64 bit IEEE Address
// 1171  * @param       SecurityEnable - Security Options
// 1172  *
// 1173  * @return      afStatus_t
// 1174  */
// 1175 afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
// 1176                                byte *deviceAddr,
// 1177                                byte capInfo,
// 1178                                byte SecurityEnable )
// 1179 {
// 1180   osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
// 1181   ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
// 1182 
// 1183   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
// 1184 }
// 1185 #endif // ZDO_MGMT_JOINDIRECT_REQUEST
// 1186 
// 1187 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
// 1188 /*********************************************************************
// 1189  * @fn          ZDP_MgmtPermitJoinReq
// 1190  *
// 1191  * @brief       This builds and send a Mgmt_Permit_Join_req message.
// 1192  *
// 1193  * @param       dstAddr - destination address of the message
// 1194  * @param       duration - Permit duration
// 1195  * @param       TcSignificance - Trust Center Significance
// 1196  *
// 1197  * @return      afStatus_t
// 1198  */
// 1199 afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
// 1200                                   byte TcSignificance, byte SecurityEnable )
// 1201 {
// 1202   // Build buffer
// 1203   ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
// 1204   ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
// 1205 
// 1206   // Send the message
// 1207   return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
// 1208                       ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
// 1209 }
// 1210 #endif // ZDO_MGMT_PERMIT_JOIN_REQUEST
// 1211 
// 1212 /*********************************************************************
// 1213  * Network Management Responses
// 1214  */
// 1215 
// 1216 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1217 /*********************************************************************
// 1218  * @fn          ZDP_MgmtNwkDiscRsp
// 1219  *
// 1220  * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
// 1221  *              function sends a unicast message.
// 1222  *
// 1223  * @param       dstAddr - destination address of the message
// 1224  * @param       Status - message status (ZDP_SUCCESS or other)
// 1225  * @param       NetworkCount - Total number of networks found
// 1226  * @param       StartIndex - Starting index within the reporting network
// 1227  *                           list
// 1228  * @param       NetworkListCount - number of network lists included
// 1229  *                                 in this message
// 1230  * @param       NetworkList - List of network descriptors
// 1231  * @param       SecurityEnable - Security Options
// 1232  *
// 1233  * @return      afStatus_t
// 1234  */
// 1235 afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
// 1236                             byte Status,
// 1237                             byte NetworkCount,
// 1238                             byte StartIndex,
// 1239                             byte NetworkListCount,
// 1240                             networkDesc_t *NetworkList,
// 1241                             byte SecurityEnable )
// 1242 {
// 1243   byte *buf;
// 1244   byte *pBuf;
// 1245   byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
// 1246   byte idx;
// 1247 
// 1248   byte proVer = NLME_GetProtocolVersion();
// 1249 
// 1250   if ( proVer == ZB_PROT_V1_0 )
// 1251   {
// 1252     len += ((NetworkListCount - StartIndex) * ( ZDP_NETWORK_DISCRIPTOR_SIZE - 2 ));  // Four half bytes
// 1253   }
// 1254   else //Include the extended PanID
// 1255   {
// 1256     len += ((NetworkListCount - StartIndex) * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
// 1257   }
// 1258 
// 1259   buf = osal_mem_alloc( len+1 );
// 1260   if ( buf == NULL )
// 1261   {
// 1262     return afStatus_MEM_FAIL;
// 1263   }
// 1264 
// 1265   pBuf = buf+1;
// 1266 
// 1267   *pBuf++ = Status;
// 1268   *pBuf++ = NetworkCount;
// 1269   *pBuf++ = StartIndex;
// 1270   *pBuf++ = NetworkListCount;
// 1271 
// 1272   for ( idx = StartIndex; idx < (NetworkListCount - StartIndex); idx++ )
// 1273   {
// 1274     if ( proVer == ZB_PROT_V1_0 )
// 1275     {
// 1276       *pBuf++  = LO_UINT16( NetworkList->panId );            // PANID
// 1277       *pBuf++  = HI_UINT16( NetworkList->panId );
// 1278     }
// 1279     else
// 1280     {
// 1281       osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
// 1282       pBuf += Z_EXTADDR_LEN;
// 1283     }
// 1284 
// 1285     *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
// 1286     *pBuf    = NetworkList->stackProfile;                  // Stack profile
// 1287     *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
// 1288     *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
// 1289     *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
// 1290 
// 1291     if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
// 1292     {
// 1293       *pBuf++ = TRUE;                         // Permit Joining
// 1294     }
// 1295     else
// 1296     {
// 1297       *pBuf++ = FALSE;
// 1298     }
// 1299 
// 1300     NetworkList = NetworkList->nextDesc;    // Move to next list entry
// 1301   }
// 1302 
// 1303   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
// 1304 }
// 1305 #endif // ZDO_MGMT_NWKDISC_RESPONSE
// 1306 
// 1307 #if defined ( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
// 1308 /*********************************************************************
// 1309  * @fn          ZDP_MgmtLqiRsp
// 1310  *
// 1311  * @brief       This builds and send a Mgmt_Lqi_rsp message. This
// 1312  *              function sends a unicast message.
// 1313  *
// 1314  * @param       dstAddr - destination address of the message
// 1315  * @param       Status - message status (ZDP_SUCCESS or other)
// 1316  * @param       NeighborLqiEntries - Total number of entries found
// 1317  * @param       StartIndex - Starting index within the reporting list
// 1318  * @param       NeighborLqiCount - number of lists included
// 1319  *                                 in this message
// 1320  * @param       NeighborLqiList - List of NeighborLqiItems.  This list
// 1321  *                is the list to be sent, not the entire list
// 1322  * @param       SecurityEnable - true if secure
// 1323  *
// 1324  * @return      ZStatus_t
// 1325  */
// 1326 ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
// 1327                           byte Status,
// 1328                           byte NeighborLqiEntries,
// 1329                           byte StartIndex,
// 1330                           byte NeighborLqiCount,
// 1331                           ZDP_MgmtLqiItem_t* NeighborList,
// 1332                           byte SecurityEnable )
// 1333 {
// 1334   ZDP_MgmtLqiItem_t* list = NeighborList;
// 1335   byte *buf, *pBuf;
// 1336   byte len, x;
// 1337   byte proVer = NLME_GetProtocolVersion();
// 1338 
// 1339   if ( ZSuccess != Status )
// 1340   {
// 1341     ZDP_TmpBuf[0] = Status;
// 1342     return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
// 1343   }
// 1344 
// 1345   // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
// 1346   //  neighbor LQI data.
// 1347   len = (1 + 1 + 1 + 1) + (NeighborLqiCount * (( proVer == ZB_PROT_V1_0 ) ? ZDP_MGMTLQI_SIZE : ZDP_MGMTLQI_EXTENDED_SIZE));
// 1348 
// 1349   buf = osal_mem_alloc( len+1 );
// 1350   if ( buf == NULL )
// 1351   {
// 1352     return afStatus_MEM_FAIL;
// 1353   }
// 1354 
// 1355   pBuf = buf+1;
// 1356 
// 1357   *pBuf++ = Status;
// 1358   *pBuf++ = NeighborLqiEntries;
// 1359   *pBuf++ = StartIndex;
// 1360   *pBuf++ = NeighborLqiCount;
// 1361 
// 1362   for ( x = 0; x < NeighborLqiCount; x++ )
// 1363   {
// 1364     if ( proVer == ZB_PROT_V1_0 )
// 1365     {
// 1366       *pBuf++  = LO_UINT16( list->panID );            // PANID
// 1367       *pBuf++  = HI_UINT16( list->panID );
// 1368     }
// 1369     else
// 1370     {
// 1371       osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
// 1372       pBuf += Z_EXTADDR_LEN;
// 1373     }
// 1374 
// 1375     // EXTADDR
// 1376     pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
// 1377 
// 1378     // NWKADDR
// 1379     *pBuf++ = LO_UINT16( list->nwkAddr );
// 1380     *pBuf++ = HI_UINT16( list->nwkAddr );
// 1381 
// 1382     // DEVICETYPE
// 1383     *pBuf = list->devType;
// 1384 
// 1385     // RXONIDLE
// 1386     *pBuf |= (uint8)(list->rxOnIdle << 2);
// 1387 
// 1388     if ( proVer == ZB_PROT_V1_0 )
// 1389     {
// 1390       // RELATIONSHIP
// 1391       *pBuf |= (uint8)(list->relation << 3);
// 1392 
// 1393       // PERMITJOINING
// 1394       *pBuf++ |= (uint8)(list->permit << 5);
// 1395 
// 1396       // DEPTH
// 1397       *pBuf++ = list->depth;
// 1398     }
// 1399 
// 1400     else
// 1401     {
// 1402       // RELATIONSHIP
// 1403       *pBuf++ |= (uint8)(list->relation << 4);
// 1404 
// 1405       // PERMITJOINING
// 1406       *pBuf++ = (uint8)(list->permit);
// 1407 
// 1408       // DEPTH
// 1409       *pBuf++ = list->depth;
// 1410     }
// 1411 
// 1412     // LQI
// 1413     *pBuf++ = list->lqi;
// 1414 
// 1415     list++; // next list entry
// 1416   }
// 1417 
// 1418   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
// 1419 }
// 1420 #endif // ZDO_MGMT_LQI_RESPONSE && RTR_NWK
// 1421 
// 1422 #if defined ( ZDO_MGMT_RTG_RESPONSE )
// 1423 /*********************************************************************
// 1424  * @fn          ZDP_MgmtRtgRsp
// 1425  *
// 1426  * @brief       This builds and send a Mgmt_Rtg_rsp message. This
// 1427  *              function sends a unicast message.
// 1428  *
// 1429  * @param       dstAddr - destination address of the message
// 1430  * @param       Status - message status (ZDP_SUCCESS or other)
// 1431  * @param       RoutingTableEntries - Total number of entries
// 1432  * @param       StartIndex - Starting index within the reporting list
// 1433  * @param       RoutingTableListCount - number of entries included
// 1434  *                                      in this message
// 1435  * @param       RoutingTableList - List of Routing Table entries
// 1436  * @param       SecurityEnable - true to enable security for this message
// 1437  *
// 1438  * @return      ZStatus_t
// 1439  */
// 1440 ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
// 1441                             byte Status,
// 1442                             byte RoutingTableEntries,
// 1443                             byte StartIndex,
// 1444                             byte RoutingListCount,
// 1445                             rtgItem_t *RoutingTableList,
// 1446                             byte SecurityEnable )
// 1447 {
// 1448   byte *buf;
// 1449   byte *pBuf;
// 1450   // Status + RoutingTableEntries + StartIndex + RoutingListCount.
// 1451   byte len = 1 + 1 + 1 + 1;
// 1452   byte x;
// 1453 
// 1454   // Add an array for Routing List data
// 1455   len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
// 1456 
// 1457   buf = osal_mem_alloc( (short)(len+1) );
// 1458   if ( buf == NULL )
// 1459   {
// 1460     return afStatus_MEM_FAIL;
// 1461   }
// 1462 
// 1463   pBuf = buf+1;
// 1464 
// 1465   *pBuf++ = Status;
// 1466   *pBuf++ = RoutingTableEntries;
// 1467   *pBuf++ = StartIndex;
// 1468   *pBuf++ = RoutingListCount;
// 1469 
// 1470   for ( x = 0; x < RoutingListCount; x++ )
// 1471   {
// 1472     *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
// 1473     *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
// 1474     *pBuf++ = RoutingTableList->status;
// 1475     *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
// 1476     *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
// 1477     RoutingTableList++;    // Move to next list entry
// 1478   }
// 1479 
// 1480   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
// 1481 }
// 1482 #endif // ZDO_MGMT_RTG_RESPONSE
// 1483 
// 1484 #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
// 1485 /*********************************************************************
// 1486  * @fn          ZDP_MgmtBindRsp
// 1487  *
// 1488  * @brief       This builds and send a Mgmt_Bind_rsp message. This
// 1489  *              function sends a unicast message.
// 1490  *
// 1491  * @param       dstAddr - destination address of the message
// 1492  * @param       Status - message status (ZDP_SUCCESS or other)
// 1493  * @param       BindingTableEntries - Total number of entries
// 1494  * @param       StartIndex - Starting index within the reporting list
// 1495  * @param       BindingTableListCount - number of entries included
// 1496  *                                 in this message
// 1497  * @param       BindingTableList - List of Binding Table entries
// 1498  * @param       SecurityEnable - Security Options
// 1499  *
// 1500  * @return      ZStatus_t
// 1501  */
// 1502 ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
// 1503                             byte Status,
// 1504                             byte BindingTableEntries,
// 1505                             byte StartIndex,
// 1506                             byte BindingTableListCount,
// 1507                             apsBindingItem_t *BindingTableList,
// 1508                             byte SecurityEnable )
// 1509 {
// 1510   uint8 *buf;
// 1511   uint8 *pBuf;
// 1512   uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
// 1513   uint8 len;    // Actual length varies due to different addrMode
// 1514   uint8 x;
// 1515   uint8 protoVer;
// 1516   byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
// 1517   byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
// 1518 
// 1519   protoVer = NLME_GetProtocolVersion();
// 1520 
// 1521   // Status + BindingTableEntries + StartIndex + BindingTableListCount.
// 1522   maxLen = 1 + 1 + 1 + 1;
// 1523   maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
// 1524   buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
// 1525 
// 1526   if ( buf == NULL )
// 1527   {
// 1528     return afStatus_MEM_FAIL;
// 1529   }
// 1530 
// 1531   pBuf = buf+1;
// 1532 
// 1533   *pBuf++ = Status;
// 1534   *pBuf++ = BindingTableEntries;
// 1535   *pBuf++ = StartIndex;
// 1536   *pBuf++ = BindingTableListCount;
// 1537 
// 1538   // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
// 1539   // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
// 1540   //           extZdpBindEntrySize     -- Version 1.1 extended address mode
// 1541   //           shortZdpBindEntrySize   -- Version 1.1 group address mode
// 1542 
// 1543   len = 1 + 1 + 1 + 1;
// 1544   for ( x = 0; x < BindingTableListCount; x++ )
// 1545   {
// 1546     pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
// 1547     *pBuf++ = BindingTableList->srcEP;
// 1548 
// 1549     // Cluster ID
// 1550     *pBuf++ = LO_UINT16( BindingTableList->clusterID );
// 1551 
// 1552     if ( protoVer != ZB_PROT_V1_0 )
// 1553     {
// 1554       *pBuf++ = HI_UINT16( BindingTableList->clusterID );
// 1555     }
// 1556 
// 1557     if ( protoVer == ZB_PROT_V1_0 )
// 1558     {
// 1559       len += ZDP_BINDINGENTRY_SIZE;
// 1560       pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
// 1561       *pBuf++ = BindingTableList->dstEP;
// 1562     }
// 1563     else
// 1564     {
// 1565       *pBuf++ = BindingTableList->dstAddr.addrMode;
// 1566       if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
// 1567       {
// 1568         len += extZdpBindEntrySize;
// 1569         pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
// 1570        *pBuf++ = BindingTableList->dstEP;
// 1571       }
// 1572       else
// 1573       {
// 1574         len += shortZdpBindEntrySize;
// 1575         *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
// 1576         *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
// 1577       }
// 1578     }
// 1579     BindingTableList++;    // Move to next list entry
// 1580   }
// 1581 
// 1582   FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
// 1583 }
// 1584 #endif // ZDO_MGMT_BIND_RESPONSE && REFLECTOR
// 1585 
// 1586 /*********************************************************************
// 1587  * Callbacks from the APS layer
// 1588  */
// 1589 
// 1590 /*********************************************************************
// 1591  * @fn          ZDP_IncomingData
// 1592  *
// 1593  * @brief       This function indicates the transfer of a data PDU (ASDU)
// 1594  *              from the APS sub-layer to the ZDO.
// 1595  *
// 1596  * @param       pData - Incoming Message
// 1597  *
// 1598  * @return      none
// 1599  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1600 void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
ZDP_IncomingData:
        CFI Block cfiBlock234 Using cfiCommon0
        CFI Function ZDP_IncomingData
// 1601 {
        FUNCALL ZDP_IncomingData, NLME_GetProtocolVersion
        LOCFRAME XSTACK, 22, STACK
        ARGFRAME XSTACK, 22, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessEPListRsp
        LOCFRAME XSTACK, 24, STACK
        ARGFRAME XSTACK, 24, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessBindUnbindRsp
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ??zdpProcessAddrReq
        LOCFRAME XSTACK, 25, STACK
        ARGFRAME XSTACK, 25, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessNodeDescReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessPowerDescReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessSimpleDescReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessActiveEPReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDO_ProcessMatchDescReq
        LOCFRAME XSTACK, 23, STACK
        ARGFRAME XSTACK, 23, STACK
        FUNCALL ZDP_IncomingData, ZDApp_InMsgCB
        LOCFRAME XSTACK, 27, STACK
        ARGFRAME XSTACK, 27, STACK
        MOV	A,#-0xd
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 9
        MOV	A,#-0x9
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
// 1602   byte proVer = NLME_GetProtocolVersion();
        ; Setup parameters for call to function NLME_GetProtocolVersion
        MOV	DPTR,#(NLME_GetProtocolVersion & 0xffff)
        MOV	A,#((NLME_GetProtocolVersion >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R4,A
// 1603   zAddrType_t addr;
// 1604   zAddrType_t *srcAddr;
// 1605   byte wasBroadcast;
// 1606   cId_t clusterID;
// 1607   byte asduLen;
// 1608   byte *asdu;
// 1609   byte SecurityUse;
// 1610   byte TransSeq;
// 1611 
// 1612   addr.addrMode = Addr16Bit;
        MOV	A,#0x8
        LCALL	?XSTACK_DISP0_8
        MOV	A,#0x2
        MOVX	@DPTR,A
// 1613   addr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        LCALL	??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
// 1614   srcAddr = &addr;
// 1615   wasBroadcast = pData->wasBroadcast;
        MOV	A,R6
        ADD	A,#0xb
        LCALL	??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV	?V0 + 2,A
// 1616   clusterID = pData->clusterId;
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
// 1617   SecurityUse = pData->SecurityUse;
        MOV	A,R6
        ADD	A,#0xd
        LCALL	??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV	?V0 + 4,A
// 1618 
// 1619   if ( proVer == ZB_PROT_V1_0 )
        MOV	A,#0x1
        XRL	A,R4
        JNZ	??ZDP_IncomingData_0
// 1620   {
// 1621   asduLen = pData->cmd.DataLength;
        LCALL	?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV	?V0 + 3,A
// 1622   asdu = pData->cmd.Data;
        MOV	A,R6
        ADD	A,#0x15
        LCALL	??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV	R4,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R5,A
// 1623   TransSeq = pData->cmd.TransSeqNumber;
        MOV	A,R6
        ADD	A,#0x12
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        SJMP	??ZDP_IncomingData_1
// 1624   }
// 1625   else
// 1626   {
// 1627     asduLen = pData->cmd.DataLength-1;
??ZDP_IncomingData_0:
        LCALL	?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_59:
        DEC	A
        MOV	?V0 + 3,A
// 1628     asdu = pData->cmd.Data+1;
        MOV	A,R6
        ADD	A,#0x15
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        LCALL	??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        MOV	R4,DPL
        MOV	R5,DPH
// 1629     TransSeq = pData->cmd.Data[0];
        MOV	DPL,R0
        MOV	DPH,R1
??ZDP_IncomingData_1:
        MOVX	A,@DPTR
        MOV	R1,A
// 1630   }
// 1631 
// 1632   switch ( clusterID )
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?US_SWITCH_SPARSE
`?<Jumptable for ZDP_IncomingData>_0`:
        DW        2
        DW        0
        DW        1
        DW        ??ZDP_IncomingData_2
        DW        32773
        DW        32774
        DW        ??ZDP_IncomingData_3
        DW        6
        DW        2
        DW        ??ZDP_IncomingData_4
        DW        3
        DW        ??ZDP_IncomingData_5
        DW        4
        DW        ??ZDP_IncomingData_6
        DW        5
        DW        ??ZDP_IncomingData_7
        DW        6
        DW        ??ZDP_IncomingData_8
        DW        32800
        DW        ??ZDP_IncomingData_9
        DW        ??ZDP_IncomingData_10
// 1633   {
// 1634     // Response messages for our requests
// 1635 
// 1636 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1637     case NWK_addr_rsp:
// 1638     case IEEE_addr_rsp:
// 1639       ZDO_ProcessAddrRsp( srcAddr, clusterID, asdu, asduLen);
// 1640       break;
// 1641 #endif
// 1642 
// 1643 #if defined ( ZDO_NODEDESC_REQUEST )
// 1644     case Node_Desc_rsp:
// 1645       ZDO_ProcessNodeDescRsp( srcAddr, asdu );
// 1646       break;
// 1647 #endif
// 1648 
// 1649 #if defined ( ZDO_POWERDESC_REQUEST )
// 1650     case Power_Desc_rsp:
// 1651       ZDO_ProcessPowerDescRsp( srcAddr, asdu );
// 1652       break;
// 1653 #endif
// 1654 
// 1655 #if defined ( ZDO_SIMPLEDESC_REQUEST )
// 1656     case Simple_Desc_rsp:
// 1657       ZDO_ProcessSimpleDescRsp( srcAddr, asdu );
// 1658       break;
// 1659 #endif
// 1660 
// 1661 #if defined ( ZDO_MATCH_REQUEST ) || defined ( ZDO_ACTIVEEP_REQUEST )
// 1662     case Match_Desc_rsp:
// 1663     case Active_EP_rsp:
// 1664       ZDO_ProcessEPListRsp( srcAddr, clusterID, asdu );
??ZDP_IncomingData_3:
        ; Setup parameters for call to function ZDO_ProcessEPListRsp
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	A,#0x2
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessEPListRsp & 0xffff)
        MOV	A,#((ZDO_ProcessEPListRsp >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        LJMP	??ZDP_IncomingData_11 & 0xFFFF
// 1665       break;
// 1666 #endif
// 1667 
// 1668 #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
// 1669   #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_COORDINATOR )
// 1670     case Bind_rsp:
// 1671     case Unbind_rsp:
// 1672   #endif
// 1673   #if defined ( ZDO_BIND_UNBIND_REQUEST ) || defined ( ZDO_ENDDEVICEBIND_REQUEST )
// 1674     case End_Device_Bind_rsp:
// 1675   #endif
// 1676       ZDO_ProcessBindUnbindRsp( srcAddr, clusterID, *asdu, TransSeq );
??ZDP_IncomingData_9:
        ; Setup parameters for call to function ZDO_ProcessBindUnbindRsp
        MOV	A,R1
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	DPL,R4
        MOV	DPH,R5
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	A,R2
        MOV	R4,A
        MOV	A,R3
        MOV	R5,A
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessBindUnbindRsp & 0xffff)
        MOV	A,#((ZDO_ProcessBindUnbindRsp >> 16) & 0xff)
??ZDP_IncomingData_12:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        LJMP	??ZDP_IncomingData_11 & 0xFFFF
// 1677       break;
// 1678 #endif
// 1679 
// 1680 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
// 1681     case Mgmt_NWK_Disc_rsp:
// 1682       ZDO_ProcessMgmNwkDiscRsp( srcAddr, asdu, SecurityUse );
// 1683       break;
// 1684 #endif
// 1685 
// 1686 #if defined ( ZDO_MGMT_LQI_REQUEST )
// 1687     case Mgmt_Lqi_rsp:
// 1688       ZDO_ProcessMgmtLqiRsp( srcAddr, asdu, SecurityUse );
// 1689       break;
// 1690 #endif
// 1691 
// 1692 #if defined ( ZDO_MGMT_RTG_REQUEST )
// 1693     case Mgmt_Rtg_rsp:
// 1694       ZDO_ProcessMgmtRtgRsp( srcAddr, asdu, SecurityUse );
// 1695       break;
// 1696 #endif
// 1697 
// 1698 #if defined ( ZDO_MGMT_BIND_REQUEST )
// 1699     case Mgmt_Bind_rsp:
// 1700       ZDO_ProcessMgmtBindRsp( srcAddr, asdu, SecurityUse );
// 1701       break;
// 1702 #endif
// 1703 
// 1704 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
// 1705     case Mgmt_Direct_Join_rsp:
// 1706       ZDO_ProcessMgmtDirectJoinRsp( srcAddr, *asdu, SecurityUse );
// 1707       break;
// 1708 #endif
// 1709 
// 1710 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
// 1711     case Mgmt_Leave_rsp:
// 1712       ZDO_ProcessMgmtLeaveRsp( srcAddr, *asdu, SecurityUse );
// 1713       break;
// 1714 #endif
// 1715 
// 1716 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
// 1717     case Mgmt_Permit_Join_rsp:
// 1718       ZDO_ProcessMgmtPermitJoinRsp( srcAddr, *asdu, SecurityUse );
// 1719       break;
// 1720 #endif
// 1721 
// 1722 #if defined ( ZDO_USERDESC_REQUEST )
// 1723     case User_Desc_rsp:
// 1724       ZDO_ProcessUserDescRsp( srcAddr, asdu, SecurityUse );
// 1725       break;
// 1726 #endif
// 1727 
// 1728 #if defined ( ZDO_SERVERDISC_REQUEST )
// 1729     case Server_Discovery_rsp:
// 1730       ZDO_ProcessServerDiscRsp( srcAddr, asdu, SecurityUse );
// 1731       break;
// 1732 #endif
// 1733 
// 1734 #if defined( ZDO_CACHE )
// 1735     case Discovery_Cache_rsp:
// 1736     case Discovery_store_rsp:
// 1737     case Remove_node_cache_rsp:
// 1738     case Find_node_cache_rsp:
// 1739     case Node_Desc_store_rsp:
// 1740     case Power_Desc_store_rsp:
// 1741     case Active_EP_store_rsp:
// 1742     case Simple_Desc_store_rsp:
// 1743     case Mgmt_Cache_rsp:
// 1744 #if ( CACHE_DEV_MAX == 0 )
// 1745       ZDCacheProcessRsp( srcAddr, asdu, asduLen, clusterID, TransSeq );
// 1746 #endif
// 1747       break;
// 1748 #endif
// 1749 
// 1750     // Request messages
// 1751     case NWK_addr_req:
// 1752     case IEEE_addr_req:
// 1753       zdpProcessAddrReq( TransSeq, srcAddr, asdu, clusterID, SecurityUse );
??ZDP_IncomingData_2:
        ; Setup parameters for call to function zdpProcessAddrReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	?V0 + 0,R2
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV	A,#0x3
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(??zdpProcessAddrReq & 0xffff)
        MOV	A,#((??zdpProcessAddrReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        LJMP	??ZDP_IncomingData_11 & 0xFFFF
// 1754       break;
// 1755 
// 1756     case Node_Desc_req:
// 1757       ZDO_ProcessNodeDescReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_4:
        ; Setup parameters for call to function ZDO_ProcessNodeDescReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessNodeDescReq & 0xffff)
        MOV	A,#((ZDO_ProcessNodeDescReq >> 16) & 0xff)
        SJMP	??ZDP_IncomingData_12
        CFI CFA_XSP16 add(XSP16, 22)
// 1758       break;
// 1759 
// 1760     case Power_Desc_req:
// 1761       ZDO_ProcessPowerDescReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_5:
        ; Setup parameters for call to function ZDO_ProcessPowerDescReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessPowerDescReq & 0xffff)
        MOV	A,#((ZDO_ProcessPowerDescReq >> 16) & 0xff)
??ZDP_IncomingData_13:
        SJMP	??ZDP_IncomingData_12
        CFI CFA_XSP16 add(XSP16, 22)
// 1762       break;
// 1763 
// 1764     case Simple_Desc_req:
// 1765       ZDO_ProcessSimpleDescReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_6:
        ; Setup parameters for call to function ZDO_ProcessSimpleDescReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessSimpleDescReq & 0xffff)
        MOV	A,#((ZDO_ProcessSimpleDescReq >> 16) & 0xff)
        SJMP	??ZDP_IncomingData_12
        CFI CFA_XSP16 add(XSP16, 22)
// 1766       break;
// 1767 
// 1768     case Active_EP_req:
// 1769       ZDO_ProcessActiveEPReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_7:
        ; Setup parameters for call to function ZDO_ProcessActiveEPReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessActiveEPReq & 0xffff)
        MOV	A,#((ZDO_ProcessActiveEPReq >> 16) & 0xff)
        SJMP	??ZDP_IncomingData_13
        CFI CFA_XSP16 add(XSP16, 22)
// 1770       break;
// 1771 
// 1772     case Match_Desc_req:
// 1773       ZDO_ProcessMatchDescReq( TransSeq, srcAddr, asdu, SecurityUse );
??ZDP_IncomingData_8:
        ; Setup parameters for call to function ZDO_ProcessMatchDescReq
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	A,#0x1
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDO_ProcessMatchDescReq & 0xffff)
        MOV	A,#((ZDO_ProcessMatchDescReq >> 16) & 0xff)
        LJMP	??ZDP_IncomingData_12 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 22)
// 1774       break;
// 1775 
// 1776 #if defined ( ZDO_COORDINATOR )
// 1777     case End_Device_Bind_req:
// 1778       ZDO_ProcessEndDeviceBindReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1779       break;
// 1780 #endif
// 1781 
// 1782 #if defined ( REFLECTOR ) || defined ( ZDO_BIND_UNBIND_RESPONSE )
// 1783     case Bind_req:
// 1784     case Unbind_req:
// 1785       ZDO_ProcessBindUnbindReq( TransSeq, srcAddr, clusterID, asdu, SecurityUse );
// 1786       break;
// 1787 #endif
// 1788 
// 1789 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1790     case Mgmt_NWK_Disc_req:
// 1791       ZDO_ProcessMgmtNwkDiscReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1792       break;
// 1793 #endif
// 1794 
// 1795 #if defined ( ZDO_MGMT_LQI_RESPONSE ) && defined ( RTR_NWK )
// 1796     case Mgmt_Lqi_req:
// 1797       ZDO_ProcessMgmtLqiReq( TransSeq, srcAddr, *asdu, SecurityUse );
// 1798       break;
// 1799 #endif
// 1800 
// 1801 #if defined ( ZDO_MGMT_RTG_RESPONSE ) && defined ( RTR_NWK )
// 1802     case Mgmt_Rtg_req:
// 1803       ZDO_ProcessMgmtRtgReq( TransSeq, srcAddr, *asdu, SecurityUse );
// 1804       break;
// 1805 #endif
// 1806 
// 1807 #if defined ( ZDO_MGMT_BIND_RESPONSE )
// 1808     case Mgmt_Bind_req:
// 1809       ZDO_ProcessMgmtBindReq( TransSeq, srcAddr, *asdu, SecurityUse );
// 1810       break;
// 1811 #endif
// 1812 
// 1813 #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && defined ( RTR_NWK )
// 1814     case Mgmt_Direct_Join_req:
// 1815       ZDO_ProcessMgmtDirectJoinReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1816       break;
// 1817 #endif
// 1818 
// 1819 #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
// 1820     case Mgmt_Leave_req:
// 1821       ZDO_ProcessMgmtLeaveReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1822       break;
// 1823 #endif
// 1824 
// 1825 #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && defined ( RTR_NWK )
// 1826     case Mgmt_Permit_Join_req:
// 1827       ZDO_ProcessMgmtPermitJoinReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1828       break;
// 1829 #endif
// 1830 
// 1831 #if defined ( ZDO_USERDESC_RESPONSE )
// 1832     case User_Desc_req:
// 1833       ZDO_ProcessUserDescReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1834       break;
// 1835 #endif
// 1836 
// 1837 #if defined ( ZDO_USERDESCSET_RESPONSE )
// 1838     case User_Desc_set:
// 1839       ZDO_ProcessUserDescSet( TransSeq, srcAddr, asdu, SecurityUse );
// 1840       break;
// 1841 #endif
// 1842 
// 1843 #if defined ( ZDO_SERVERDISC_RESPONSE )
// 1844     case Server_Discovery_req:
// 1845       ZDO_ProcessServerDiscReq( TransSeq, srcAddr, asdu, SecurityUse );
// 1846       break;
// 1847 #endif
// 1848 
// 1849 #if defined ( ZDO_ENDDEVICE_ANNCE ) && defined ( RTR_NWK )
// 1850     case End_Device_annce:
// 1851       ZDO_ProcessEndDeviceAnnce( TransSeq, srcAddr, asdu, SecurityUse );
// 1852       break;
// 1853 #endif
// 1854 
// 1855 #if defined( ZDO_CACHE )
// 1856     case Discovery_Cache_req:
// 1857     case Discovery_store_req:
// 1858     case Remove_node_cache_req:
// 1859     case Find_node_cache_req:
// 1860     case Node_Desc_store_req:
// 1861     case Power_Desc_store_req:
// 1862     case Active_EP_store_req:
// 1863     case Simple_Desc_store_req:
// 1864     case Mgmt_Cache_req:
// 1865 #if ( CACHE_DEV_MAX > 0 )
// 1866       ZDCacheProcessReq(srcAddr,asdu,asduLen,clusterID,TransSeq,SecurityUse);
// 1867 #endif
// 1868       break;
// 1869 #endif
// 1870 
// 1871     case Complex_Desc_req:
// 1872     case Complex_Desc_rsp:
// 1873     default:
// 1874       ZDApp_InMsgCB( TransSeq, srcAddr, wasBroadcast,
// 1875                      clusterID, asduLen, asdu, SecurityUse );
??ZDP_IncomingData_10:
        ; Setup parameters for call to function ZDApp_InMsgCB
        MOV	A,?V0 + 4
        MOV	?V0 + 0,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV	?V0 + 0,R4
        MOV	?V0 + 1,R5
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV	R5,?V0 + 3
        MOV	R4,?V0 + 2
        MOV	A,#0x5
        LCALL	?XSTACK_DISP0_8
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	DPTR,#(ZDApp_InMsgCB & 0xffff)
        MOV	A,#((ZDApp_InMsgCB >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x5
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
// 1876       break;
// 1877   }
// 1878 }
??ZDP_IncomingData_11:
        MOV	A,#0x9
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	R7,#0x5
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock234

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond235 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker237 Using cfiCommon1
        CFI (cfiPicker237) NoFunction
        CFI (cfiPicker237) Picker
        MOV	A,R6
        ADD	A,#0x13
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond240) CFA_SP SP+0
        CFI (cfiCond240) CFA_XSP16 add(XSP16, 22)
??Subroutine26_0:
        MOV	DPL,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	DPH,A
        MOVX	A,@DPTR
        RET
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiPicker237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond241 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond243) CFA_SP SP+0
        CFI (cfiCond243) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker244 Using cfiCommon1
        CFI (cfiPicker244) NoFunction
        CFI (cfiPicker244) Picker
        MOV	DPTR,#??ZDP_TmpBuf
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 22)
??Subroutine9_0:
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        RET
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiPicker244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDP_TmpBuf>`:
        DW ??ZDP_Buf + 1H

        END
// 1879 
// 1880 /*********************************************************************
// 1881 *********************************************************************/
// 1882 
// 
// 3 288 bytes in segment BANKED_CODE
//     1 byte  in segment CODE_C
//     2 bytes in segment XDATA_I
//     2 bytes in segment XDATA_ID
//    82 bytes in segment XDATA_Z
// 
// 3 291 bytes of CODE  memory
//    84 bytes of XDATA memory
//
//Errors: none
//Warnings: none
