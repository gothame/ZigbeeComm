##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   24/Jan/2013  14:47:44 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\stack\sys\ZGlobals.c                            #
#    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8 #
#                          wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR          #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DRTR_NWK -DBLINK_LEDS "-DCONST=const __code"  #
#                          -DGENERIC=__generic) -f                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCo #
#                          nfig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x0000080 #
#                          0 -DZDAPP_CONFIG_PAN_ID=0xFFFF                    #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\ -I                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\Source\ -I                 #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt\ #
#                           -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ #
#                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee200 #
#                          6-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2430DB\..\..\..\..\..\Components #
#                          \hal\include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª· #
#                          ¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 #
#                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ #
#                          ..\Components\hal\target\CC2430EB\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\osa #
#                          l\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ #
#                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 #
#                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Project #
#                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. #
#                          .\Components\osal\include\ -I                     #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\Î #
#                          ÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zig #
#                          Bee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zsta #
#                          ck\Samples\SampleApp\CC2430DB\..\..\..\..\..\Comp #
#                          onents\stack\nwk\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\sys\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ #
#                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zi #
#                          gBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Com #
#                          ponents\stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\zmac\f8w\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍ #
#                          øÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2 #
#                          006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁ #
#                          Ï\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ #
#                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\mac\high_level\ -I                      #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \low_level\srf03\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf03\single_chip #
#                          \ -D CC2430EB -D ZTOOL_P1 -D MT_TASK -lC          #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\ -lA            #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\RouterEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\stack\sys\ZGlobals.c"                          #
#    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\ZGlobals.lst    #
#    Object file        =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\Obj\ZGlobals.r51     #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\sys\ZGlobals.c
      1          /*********************************************************************
      2              Filename:       ZGlobals.c
      3              Revised:        $Date: 2007-01-08 12:56:09 -0800 (Mon, 08 Jan 2007) $
      4              Revision:       $Revision: 13236 $
      5          
      6              Description:
      7          
      8                  User definable Z-Stack parameters.
      9          
     10              Notes:
     11          
     12              Copyright (c) 2007 by Texas Instruments, Inc.
     13              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     14              derivative works, modify, distribute, perform, display or sell this
     15              software and/or its documentation for any purpose is prohibited
     16              without the express written consent of Texas Instruments, Inc.
     17          *********************************************************************/
     18          
     19          /*********************************************************************
     20           * INCLUDES
     21           */
     22          
     23          #include "ZComDef.h"
     24          #include "OSAL_Nv.h"
     25          #include "ZDObject.h"
     26          #include "ZGlobals.h"
     27          
     28          #include "OnBoard.h"
     29          
     30          /*********************************************************************
     31           * MACROS
     32           */
     33          
     34          /*********************************************************************
     35           * CONSTANTS
     36           */
     37          
     38          /*********************************************************************
     39           * TYPEDEFS
     40           */
     41          
     42          typedef struct zgItem
     43          {
     44            uint16 id;
     45            uint16 len;
     46            void *buf;
     47          } zgItem_t;
     48          
     49          /*********************************************************************
     50           * NWK GLOBAL VARIABLES
     51           */
     52          
     53          // Polling values

   \                                 In segment XDATA_I, align 1, keep-with-next
     54          uint16 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
     55          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
     56          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
     57          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     58          
     59          // Transmission retries numbers

   \                                 In segment XDATA_I, align 1, keep-with-next
     60          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
     61          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     62          
     63          // Default channel list

   \                                 In segment XDATA_I, align 1, keep-with-next
     64          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultChannelList>`
   \   000004                REQUIRE __INIT_XDATA_I
     65          
     66          // Default starting scan duration

   \                                 In segment XDATA_I, align 1, keep-with-next
     67          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
   \                     zgDefaultStartingScanDuration:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
   \   000001                REQUIRE __INIT_XDATA_I
     68          
     69          // Stack profile Id

   \                                 In segment XDATA_I, align 1, keep-with-next
     70          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
     71          
     72          // Default indirect message holding timeout

   \                                 In segment XDATA_I, align 1, keep-with-next
     73          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
     74          
     75          // Security level

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     76          uint8 zgSecurityLevel = SECURITY_LEVEL;
   \                     zgSecurityLevel:
   \   000000                DS 1
     77          
     78          // Route expiry

   \                                 In segment XDATA_I, align 1, keep-with-next
     79          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
     80          
     81          // Extended PAN Id

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     82          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
     83          
     84          // Broadcast parameters

   \                                 In segment XDATA_I, align 1, keep-with-next
     85          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
     86          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
     87          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
     88          
     89          // Network mode

   \                                 In segment XDATA_I, align 1, keep-with-next
     90          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
     91          
     92          // Many-to-one values

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     93          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     94          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1

   \                                 In segment XDATA_I, align 1, keep-with-next
     95          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
     96          uint8 zgMaxSourceRoute = MAX_SOURCE_ROUTE;
   \                     zgMaxSourceRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxSourceRoute>`
   \   000001                REQUIRE __INIT_XDATA_I
     97          
     98          
     99          /*********************************************************************
    100           * APS GLOBAL VARIABLES
    101           */
    102          
    103          // The maximum number of retries allowed after a transmission failure

   \                                 In segment XDATA_I, align 1, keep-with-next
    104          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    105          
    106          // The maximum number of seconds (milliseconds) to wait for an
    107          // acknowledgement to a transmitted frame.
    108          
    109          // This number is used by polled devices.

   \                                 In segment XDATA_I, align 1, keep-with-next
    110          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    111          
    112          // This number is used by non-polled devices in the following formula:
    113          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In segment XDATA_I, align 1, keep-with-next
    114          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    115          
    116          // The maximum number of milliseconds for the end device binding

   \                                 In segment XDATA_I, align 1, keep-with-next
    117          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    118          
    119          /*********************************************************************
    120           * SECURITY GLOBAL VARIABLES
    121           */
    122          
    123          // This is the pre-configured key in use (from NV memory)

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    124          uint8 zgPreConfigKey[SEC_KEY_LEN];
   \                     zgPreConfigKey:
   \   000000                DS 16
    125          
    126          // If true, preConfigKey should be configured on all devices on the network
    127          // If false, it is configured only on the coordinator and sent to other
    128          // devices upon joining.

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    129          uint8 zgPreConfigKeys = FALSE; //  TRUE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
    130          
    131          
    132          /*********************************************************************
    133           * ZDO GLOBAL VARIABLES
    134           */
    135          
    136          // Configured PAN ID

   \                                 In segment XDATA_I, align 1, keep-with-next
    137          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    138          
    139          // Éè±¸ÀàÐÍ

   \                                 In segment XDATA_I, align 1, keep-with-next
    140          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDeviceLogicalType>`
   \   000001                REQUIRE __INIT_XDATA_I
    141          
    142          // Æô¶¯ÑÓ³Ù

   \                                 In segment XDATA_I, align 1, keep-with-next
    143          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    144          
    145          /*********************************************************************
    146           * NON-STANDARD GLOBAL VARIABLES
    147           */
    148          
    149          // Simple API Endpoint

   \                                 In segment XDATA_I, align 1, keep-with-next
    150          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    151          
    152          /*********************************************************************
    153           * LOCAl VARIABLES
    154           */
    155          
    156          /*********************************************************************
    157           * ZGlobal Item Table
    158           */

   \                                 In segment CODE_C, align 1
    159          static CONST zgItem_t zgItemTable[] =
   \                     ??zgItemTable:
   \   000000   00000000     DW 0, 0, 0H
   \            0000    
    160          {
    161          #if defined ( NV_INIT )
    162            {
    163              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    164            },
    165            {
    166              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    167            },
    168            {
    169             ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    170            },
    171            {
    172              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    173            },
    174            {
    175              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    176            },
    177            {
    178             ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    179            },
    180            {
    181               ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    182            },
    183            {
    184              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    185            }
    186            ,
    187            {
    188              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    189            },
    190            {
    191              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    192            },
    193            {
    194              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    195            },
    196            {
    197              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    198            },
    199            {
    200              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, &zgExtendedPANID
    201            },
    202            {
    203              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    204            },
    205            {
    206              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    207            },
    208            {
    209              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    210            },
    211            {
    212              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    213            },
    214            {
    215              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    216            },
    217            {
    218              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    219            },
    220            {
    221              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    222            },
    223            {
    224              ZCD_NV_MAX_SOURCE_ROUTE, sizeof(zgMaxSourceRoute), &zgMaxSourceRoute
    225            },
    226          #ifndef NONWK
    227            {
    228              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    229            },
    230            {
    231              ZCD_NV_PRECFGKEY, SEC_KEY_LEN, &zgPreConfigKey
    232            },
    233            {
    234              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    235            },
    236            {
    237              ZCD_NV_SECURITY_LEVEL, sizeof(zgSecurityLevel), &zgSecurityLevel
    238            },
    239          #endif // NONWK
    240            {
    241              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    242            },
    243            {
    244              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    245            },
    246            {
    247              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    248            },
    249            {
    250              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    251            },
    252            {
    253              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    254            },
    255            {
    256              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    257            },
    258          #endif // NV_INIT
    259            // Last item -- DO NOT MOVE IT!
    260            {
    261              0x00, 0, NULL
    262            }
    263          };
    264          
    265          /*********************************************************************
    266           * LOCAL FUNCTIONS
    267           */
    268          
    269          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    270          
    271          
    272          /*********************************************************************
    273           * @fn       zgItemInit()
    274           *
    275           * @brief
    276           *
    277           *   Initialize a global item. If the item doesn't exist in NV memory,
    278           *   write the system default (value passed in) into NV memory. But if
    279           *   it exists, set the item to the value stored in NV memory.
    280           *
    281           *   Also, if setDefault is TRUE and the item exists, we will write
    282           *   the default value to NV space.
    283           *
    284           * @param   id - item id
    285           * @param   len - item len
    286           * @param   buf - pointer to the item
    287           * @param   setDefault - TRUE to set default, not read
    288           *
    289           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    290           *          exist in NV, NV_OPER_FAILED if failure.
    291           */
    292          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
    293          {
    294          
    295            uint8 status;
    296          
    297            // If the item doesn't exist in NV memory, create and initialize
    298            // it with the value passed in.
    299            status = osal_nv_item_init( id, len, buf );
    300            if ( status == ZSUCCESS )
    301            {
    302              if ( setDefault )
    303              {
    304                // Write the default value back to NV
    305                status =  osal_nv_write( id, 0, len, buf );
    306              }
    307              else
    308              {
    309                // The item exists in NV memory, read it from NV memory
    310                status = osal_nv_read( id, 0, len, buf );
    311              }
    312            }
    313          
    314            return (status);
    315          }
    316          
    317          /*********************************************************************
    318           * API FUNCTIONS
    319           */
    320          
    321          
    322          /*********************************************************************
    323           * @fn          zgInit
    324           *
    325           * @brief
    326           *
    327           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    328           *   NV memory, write the system default into NV memory. But if
    329           *   it exists, set the item to the value stored in NV memory.
    330           *
    331           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    332           *       that the Config state items (zgItemTable) need to be
    333           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    334           *
    335           *
    336           * @param       none
    337           *
    338           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    339           *              exist in NV, NV_OPER_FAILED if failure.
    340           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    341          uint8 zgInit( void )
   \                     zgInit:
    342          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
    343            uint8  i = 0;
   \   000005   75..00       MOV     ?V0 + 3,#0x0
    344            uint8  setDefault = FALSE;
   \   000008   75..00       MOV     ?V0 + 2,#0x0
    345          
    346            // Do we want to default the Config state values
    347            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   00000B                ; Setup parameters for call to function zgReadStartupOptions
   \   00000B   90....       MOV     DPTR,#(zgReadStartupOptions & 0xffff)
   \   00000E   74..         MOV     A,#((zgReadStartupOptions >> 16) & 0xff)
   \   000010   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000013   E9           MOV     A,R1
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   5003         JNC     ??zgInit_0
    348            {
    349              setDefault = TRUE;
   \   000018   75..01       MOV     ?V0 + 2,#0x1
    350            }
    351          
    352          #if 0
    353            // Enable this section if you need to track the number of resets
    354            // This section is normally disabled to minimize "wear" on NV memory
    355            uint16 bootCnt = 0;
    356          
    357            // Update the Boot Counter
    358            if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
    359            {
    360              // Get the old value from NV memory
    361              osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    362            }
    363          
    364            // Increment the Boot Counter and store it into NV memory
    365            if ( setDefault )
    366              bootCnt = 0;
    367            else
    368              bootCnt++;
    369            osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    370          #endif
    371          
    372            // Initialize the Extended PAN ID as my own extended address
    373            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_0:
   \   00001B                ; Setup parameters for call to function ZMacGetReq
   \   00001B   7A..         MOV     R2,#(zgExtendedPANID & 0xff)
   \   00001D   7B..         MOV     R3,#((zgExtendedPANID >> 8) & 0xff)
   \   00001F   79E2         MOV     R1,#-0x1e
   \   000021   12....       LCALL   ZMacGetReq & 0xFFFF
    374          
    375          #ifndef NONWK
    376            // Initialize the Pre-Configured Key to the default key
    377            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );  // Do NOT Change!!!
   \   000024                ; Setup parameters for call to function osal_memcpy
   \   000024   75....       MOV     ?V0 + 4,#(defaultKey & 0xff)
   \   000027   75....       MOV     ?V0 + 5,#((defaultKey >> 8) & 0xff)
   \   00002A   75..80       MOV     ?V0 + 6,#-0x80
   \   00002D   78..         MOV     R0,#?V0 + 4
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000032   7C10         MOV     R4,#0x10
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A..         MOV     R2,#(zgPreConfigKey & 0xff)
   \   000038   7B..         MOV     R3,#((zgPreConfigKey >> 8) & 0xff)
   \   00003A   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   00003D   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   00003F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000042   7403         MOV     A,#0x3
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   801F         SJMP    ??zgInit_1
    378          #endif // NONWK
    379          
    380            while ( zgItemTable[i].id != 0x00 )
    381            {
   \                     ??zgInit_2:
   \   000049                ; Setup parameters for call to function osal_nv_read
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV     R4,#0x0
   \   000053   7D00         MOV     R5,#0x0
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   FB           MOV     R3,A
   \   000059   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   00005C   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \                     ??zgInit_3:
   \   00005E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000061   7404         MOV     A,#0x4
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
    382              // Initialize the item
    383              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
    384          
    385              // Move on to the next item
    386              i++;
   \                     ??zgInit_4:
   \   000066   05..         INC     ?V0 + 3
   \                     ??zgInit_1:
   \   000068   E5..         MOV     A,?V0 + 3
   \   00006A   75F006       MOV     B,#0x6
   \   00006D   A4           MUL     AB
   \   00006E   F8           MOV     R0,A
   \   00006F   AAF0         MOV     R2,B
   \   000071   EA           MOV     A,R2
   \   000072   F9           MOV     R1,A
   \   000073   E8           MOV     A,R0
   \   000074   24..         ADD     A,#(??zgItemTable & 0xff)
   \   000076   F582         MOV     DPL,A
   \   000078   E9           MOV     A,R1
   \   000079   34..         ADDC    A,#((??zgItemTable >> 8) & 0xff)
   \   00007B   F583         MOV     DPH,A
   \   00007D   E4           CLR     A
   \   00007E   93           MOVC    A,@A+DPTR
   \   00007F   F8           MOV     R0,A
   \   000080   7401         MOV     A,#0x1
   \   000082   93           MOVC    A,@A+DPTR
   \   000083   F9           MOV     R1,A
   \   000084   E8           MOV     A,R0
   \   000085   7001         JNZ     ??zgInit_5
   \   000087   E9           MOV     A,R1
   \                     ??zgInit_5:
   \   000088   7003         JNZ     $+5
   \   00008A   02....       LJMP    ??zgInit_6 & 0xFFFF
   \   00008D   E5..         MOV     A,?V0 + 3
   \   00008F   75F006       MOV     B,#0x6
   \   000092   A4           MUL     AB
   \   000093   F8           MOV     R0,A
   \   000094   EA           MOV     A,R2
   \   000095   F9           MOV     R1,A
   \   000096   E8           MOV     A,R0
   \   000097   24..         ADD     A,#(??zgItemTable & 0xff)
   \   000099   F8           MOV     R0,A
   \   00009A   E9           MOV     A,R1
   \   00009B   34..         ADDC    A,#((??zgItemTable >> 8) & 0xff)
   \   00009D   F9           MOV     R1,A
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E4           CLR     A
   \   0000A3   93           MOVC    A,@A+DPTR
   \   0000A4   F5..         MOV     ?V0 + 4,A
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   93           MOVC    A,@A+DPTR
   \   0000A9   F5..         MOV     ?V0 + 5,A
   \   0000AB   8882         MOV     DPL,R0
   \   0000AD   8983         MOV     DPH,R1
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E4           CLR     A
   \   0000B2   93           MOVC    A,@A+DPTR
   \   0000B3   C0E0         PUSH    A
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   93           MOVC    A,@A+DPTR
   \   0000B8   F583         MOV     DPH,A
   \   0000BA   D082         POP     DPL
   \   0000BC   8582..       MOV     ?V0 + 0,DPL
   \   0000BF   8583..       MOV     ?V0 + 1,DPH
   \   0000C2   8882         MOV     DPL,R0
   \   0000C4   8983         MOV     DPH,R1
   \   0000C6   E4           CLR     A
   \   0000C7   93           MOVC    A,@A+DPTR
   \   0000C8   C0E0         PUSH    A
   \   0000CA   7401         MOV     A,#0x1
   \   0000CC   93           MOVC    A,@A+DPTR
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   D082         POP     DPL
   \   0000D1   AE82         MOV     R6,DPL
   \   0000D3   AF83         MOV     R7,DPH
   \   0000D5                ; Setup parameters for call to function osal_nv_item_init
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   AC..         MOV     R4,?V0 + 0
   \   0000DC   AD..         MOV     R5,?V0 + 1
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FA           MOV     R2,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   FB           MOV     R3,A
   \   0000E2   90....       MOV     DPTR,#(osal_nv_item_init & 0xffff)
   \   0000E5   74..         MOV     A,#((osal_nv_item_init >> 16) & 0xff)
   \   0000E7   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000EA   7402         MOV     A,#0x2
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EF   E9           MOV     A,R1
   \   0000F0   6003         JZ      $+5
   \   0000F2   02....       LJMP    ??zgInit_4 & 0xFFFF
   \   0000F5   E5..         MOV     A,?V0 + 2
   \   0000F7   78..         MOV     R0,#?V0 + 4
   \   0000F9   7003         JNZ     $+5
   \   0000FB   02....       LJMP    ??zgInit_2 & 0xFFFF
   \   0000FE                ; Setup parameters for call to function osal_nv_write
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000101   78..         MOV     R0,#?V0 + 0
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   7C00         MOV     R4,#0x0
   \   000108   7D00         MOV     R5,#0x0
   \   00010A   EE           MOV     A,R6
   \   00010B   FA           MOV     R2,A
   \   00010C   EF           MOV     A,R7
   \   00010D   FB           MOV     R3,A
   \   00010E   90....       MOV     DPTR,#(osal_nv_write & 0xffff)
   \   000111   74..         MOV     A,#((osal_nv_write >> 16) & 0xff)
   \   000113   02....       LJMP    ??zgInit_3 & 0xFFFF
    387            }
    388          
    389            // Clear the Config State default
    390            if ( setDefault )
   \                     ??zgInit_6:
   \   000116   E5..         MOV     A,?V0 + 2
   \   000118   600C         JZ      ??zgInit_7
    391            {
    392              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   00011A                ; Setup parameters for call to function zgWriteStartupOptions
   \   00011A   7A01         MOV     R2,#0x1
   \   00011C   7900         MOV     R1,#0x0
   \   00011E   90....       MOV     DPTR,#(zgWriteStartupOptions & 0xffff)
   \   000121   74..         MOV     A,#((zgWriteStartupOptions >> 16) & 0xff)
   \   000123   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    393            }
    394          
    395            return ( ZSUCCESS );
   \                     ??zgInit_7:
   \   000126   7900         MOV     R1,#0x0
   \   000128   7F07         MOV     R7,#0x7
   \   00012A   02....       LJMP    ?BANKED_LEAVE_XDATA
    396          }
    397          
    398          /*********************************************************************
    399           * @fn          zgReadStartupOptions
    400           *
    401           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    402           *
    403           * @param       none
    404           *
    405           * @return      the ZCD_NV_STARTUP_OPTION NV item
    406           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    407          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    408          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    409            // Default to Use Config State and Use Network State
    410            uint8 startupOption = 0;
   \   00000A   12....       LCALL   ?Subroutine0 & 0xFFFF
    411          
    412            // This should have been done in ZMain.c, but just in case.
    413            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    414                                        sizeof(startupOption),
    415                                        &startupOption ) == ZSUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV     R4,#0x1
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A03         MOV     R2,#0x3
   \   000016   7B00         MOV     R3,#0x0
   \   000018   90....       MOV     DPTR,#(osal_nv_item_init & 0xffff)
   \   00001B   74..         MOV     A,#((osal_nv_item_init >> 16) & 0xff)
   \   00001D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7025         JNZ     ??zgReadStartupOptions_0
    416            {
    417              // Read saved startup control
    418              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    419                            0,
    420                            sizeof( startupOption ),
    421                            &startupOption);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0 + 0,#0x1
   \   000030   75..00       MOV     ?V0 + 1,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A03         MOV     R2,#0x3
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   000043   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \   000045   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000048   7404         MOV     A,#0x4
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
    422            }
    423            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055                REQUIRE ?Subroutine1
   \   000055                ; // Fall through to label ?Subroutine1
    424          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F02         MOV     R7,#0x2
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E4           CLR     A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \                     ??Subroutine0_0:
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function osal_nv_item_init
   \   000008                ; Setup parameters for call to function osal_nv_read
   \   000008                ; Setup parameters for call to function osal_nv_write
   \   000008   8582..       MOV     ?V0 + 0,DPL
   \   00000B   8583..       MOV     ?V0 + 1,DPH
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   22           RET
    425          
    426          /*********************************************************************
    427           * @fn          zgWriteStartupOptions
    428           *
    429           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    430           *
    431           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    432           *               clear bit. The set bit is an OR operation, and the
    433           *               clear bit is an AND ~(bitOptions) operation.
    434           *
    435           * @param       bitOptions - which bits to perform action on:
    436           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    437           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    438           *
    439           * @return      ZSUCCESS if successful
    440           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    441          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    442          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    443            uint8 status;
    444            uint8 startupOptions = 0;
   \   00000E   12....       LCALL   ?Subroutine0 & 0xFFFF
    445          
    446            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    447                          0,
    448                          sizeof( startupOptions ),
    449                          &startupOptions );
   \                     ??CrossCallReturnLabel_1:
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   75..01       MOV     ?V0 + 0,#0x1
   \   000017   75..00       MOV     ?V0 + 1,#0x0
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7C00         MOV     R4,#0x0
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A03         MOV     R2,#0x3
   \   000025   7B00         MOV     R3,#0x0
   \   000027   90....       MOV     DPTR,#(osal_nv_read & 0xffff)
   \   00002A   74..         MOV     A,#((osal_nv_read >> 16) & 0xff)
   \   00002C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
    450          
    451            if ( status == ZSUCCESS )
   \   000035   7040         JNZ     ??zgWriteStartupOptions_0
    452            {
    453              if ( action == ZG_STARTUP_SET )
   \   000037   74FF         MOV     A,#-0x1
   \   000039   6E           XRL     A,R6
   \   00003A   700A         JNZ     ??zgWriteStartupOptions_1
    454              {
    455                // Set bits
    456                startupOptions |= bitOptions;
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   4F           ORL     A,R7
   \   000044   800B         SJMP    ??zgWriteStartupOptions_2
    457              }
    458              else
    459              {
    460                // Clear bits
    461                startupOptions &= ~(bitOptions);
   \                     ??zgWriteStartupOptions_1:
   \   000046   EF           MOV     A,R7
   \   000047   F4           CPL     A
   \   000048   FA           MOV     R2,A
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   5A           ANL     A,R2
   \                     ??zgWriteStartupOptions_2:
   \   000051   12....       LCALL   ??Subroutine0_0 & 0xFFFF
    462              }
    463          
    464              // Changed?
    465              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    466                           0,
    467                           sizeof( startupOptions ),
    468                           &startupOptions );
   \                     ??CrossCallReturnLabel_2:
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..01       MOV     ?V0 + 0,#0x1
   \   00005A   75..00       MOV     ?V0 + 1,#0x0
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   7C00         MOV     R4,#0x0
   \   000064   7D00         MOV     R5,#0x0
   \   000066   7A03         MOV     R2,#0x3
   \   000068   7B00         MOV     R3,#0x0
   \   00006A   90....       MOV     DPTR,#(osal_nv_write & 0xffff)
   \   00006D   74..         MOV     A,#((osal_nv_write >> 16) & 0xff)
   \   00006F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000072   7404         MOV     A,#0x4
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
    469            }
    470          
    471            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   000077   02....       LJMP    ?Subroutine1 & 0xFFFF
    472          }

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   E803         DW 1000

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultChannelList>`:
   \   000000   00080000     DD 2048

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultStartingScanDuratio`:
   \   000000   05           DB 5

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   01           DB 1

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxSourceRoute>`:
   \   000000   0C           DB 12

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   03           DB 3

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   FFFF         DW 65535

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDeviceLogicalType>`:
   \   000000   01           DB 1

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224
    473          
    474          /*********************************************************************
    475          *********************************************************************/

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     zgInit                         0      0     19
       -> zgReadStartupOptions      0      0     30
       -> ZMacGetReq                0      0     30
       -> osal_memcpy               0      0     36
       -> osal_nv_read              0      0     38
       -> osal_nv_item_init         0      0     34
       -> osal_nv_write             0      0     38
       -> zgWriteStartupOptions     0      0     30
     zgReadStartupOptions           1      0     30
       -> osal_nv_item_init         0      0     26
       -> osal_nv_read              0      0     30
     zgWriteStartupOptions          1      0     30
       -> osal_nv_read              0      0     30
       -> osal_nv_write             0      0     30


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     zgPollRate                        2
     zgQueuedPollRate                  2
     zgResponsePollRate                2
     zgRejoinPollRate                  2
     zgMaxDataRetries                  1
     zgMaxPollFailureRetries           1
     zgDefaultChannelList              4
     zgDefaultStartingScanDuration     1
     zgStackProfile                    1
     zgIndirectMsgTimeout              1
     zgSecurityLevel                   1
     zgRouteExpiryTime                 1
     zgExtendedPANID                   8
     zgMaxBcastRetires                 1
     zgPassiveAckTimeout               1
     zgBcastDeliveryTime               1
     zgNwkMode                         1
     zgConcentratorEnable              1
     zgConcentratorDiscoveryTime       1
     zgConcentratorRadius              1
     zgMaxSourceRoute                  1
     zgApscMaxFrameRetries             1
     zgApscAckWaitDurationPolled       2
     zgApsAckWaitMultiplier            1
     zgApsDefaultMaxBindingTime        2
     zgPreConfigKey                   16
     zgPreConfigKeys                   1
     zgConfigPANID                     2
     zgDeviceLogicalType               1
     zgStartDelay                      1
     zgSapiEndpoint                    1
     zgItemTable                       6
     zgInit                          301
     zgReadStartupOptions             85
     ?Subroutine1                     10
     ?Subroutine0                     17
     zgWriteStartupOptions           122
     ?<Initializer for zgPollRate>     2
     ?<Initializer for zgQueuedPollRate>
                                       2
     ?<Initializer for zgResponsePollRate>
                                       2
     ?<Initializer for zgRejoinPollRate>
                                       2
     ?<Initializer for zgMaxDataRetries>
                                       1
     ?<Initializer for zgMaxPollFailureRetries>
                                       1
     ?<Initializer for zgDefaultChannelList>
                                       4
     ?<Initializer for zgDefaultStartingScanDuratio
                                       1
     ?<Initializer for zgStackProfile>
                                       1
     ?<Initializer for zgIndirectMsgTimeout>
                                       1
     ?<Initializer for zgRouteExpiryTime>
                                       1
     ?<Initializer for zgMaxBcastRetires>
                                       1
     ?<Initializer for zgPassiveAckTimeout>
                                       1
     ?<Initializer for zgBcastDeliveryTime>
                                       1
     ?<Initializer for zgNwkMode>      1
     ?<Initializer for zgConcentratorRadius>
                                       1
     ?<Initializer for zgMaxSourceRoute>
                                       1
     ?<Initializer for zgApscMaxFrameRetries>
                                       1
     ?<Initializer for zgApscAckWaitDurationPolled>
                                       2
     ?<Initializer for zgApsAckWaitMultiplier>
                                       1
     ?<Initializer for zgApsDefaultMaxBindingTime>
                                       2
     ?<Initializer for zgConfigPANID>
                                       2
     ?<Initializer for zgDeviceLogicalType>
                                       1
     ?<Initializer for zgStartDelay>
                                       1
     ?<Initializer for zgSapiEndpoint>
                                       1

 
 535 bytes in segment BANKED_CODE
   6 bytes in segment CODE_C
  35 bytes in segment XDATA_I
  35 bytes in segment XDATA_ID
  28 bytes in segment XDATA_Z
 
 576 bytes of CODE  memory
  63 bytes of XDATA memory

Errors: none
Warnings: none
