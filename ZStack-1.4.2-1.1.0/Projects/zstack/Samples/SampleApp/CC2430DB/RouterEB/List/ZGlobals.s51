//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  24/Jan/2013  14:47:44 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\stack\sys\ZGlobals.c                          /
//    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\Tools\CC2430D /
//                          B\f8wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR     /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DRTR_NWK -DBLINK_LEDS "-DCONST=const        /
//                          __code" -DGENERIC=__generic) -f                  /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f /
//                          8wConfig.cfg (-DSECURE=0                         /
//                          -DDEFAULT_CHANLIST=0x00000800                    /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                     /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\ -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\Source\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\  /
//                          -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ /
//                          \ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ /
//                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                      /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \hal\target\CC2430EB\ -I                         /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \osal\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I            /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢× /
//                          ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 /
//                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\sec\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\stack\sys\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \zmac\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ /
//                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Z /
//                          igBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\services\saddr\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \services\sdata\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\high_level\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf03\ -I     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf03\single_chip\ -D CC2430EB    /
//                          -D ZTOOL_P1 -D MT_TASK -lC                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ -lA        /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\            /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\RouterEB\Obj\ -e       /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\stack\sys\ZGlobals.c"                        /
//    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ZGlobals.s5 /
//                          1                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ZGlobals

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BCALL
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC zgApsAckWaitMultiplier
        PUBLIC zgApsDefaultMaxBindingTime
        PUBLIC zgApscAckWaitDurationPolled
        PUBLIC zgApscMaxFrameRetries
        PUBLIC zgBcastDeliveryTime
        PUBLIC zgConcentratorDiscoveryTime
        PUBLIC zgConcentratorEnable
        PUBLIC zgConcentratorRadius
        PUBLIC zgConfigPANID
        PUBLIC zgDefaultChannelList
        PUBLIC zgDefaultStartingScanDuration
        PUBLIC zgDeviceLogicalType
        PUBLIC zgExtendedPANID
        PUBLIC zgIndirectMsgTimeout
        PUBLIC zgInit
        FUNCTION zgInit,021203H
        LOCFRAME XSTACK, 19, STACK
        PUBLIC zgMaxBcastRetires
        PUBLIC zgMaxDataRetries
        PUBLIC zgMaxPollFailureRetries
        PUBLIC zgMaxSourceRoute
        PUBLIC zgNwkMode
        PUBLIC zgPassiveAckTimeout
        PUBLIC zgPollRate
        PUBLIC zgPreConfigKey
        PUBLIC zgPreConfigKeys
        PUBLIC zgQueuedPollRate
        PUBLIC zgReadStartupOptions
        FUNCTION zgReadStartupOptions,021203H
        ARGFRAME XSTACK, 15, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC zgRejoinPollRate
        PUBLIC zgResponsePollRate
        PUBLIC zgRouteExpiryTime
        PUBLIC zgSapiEndpoint
        PUBLIC zgSecurityLevel
        PUBLIC zgStackProfile
        PUBLIC zgStartDelay
        PUBLIC zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,021203H
        ARGFRAME XSTACK, 15, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME XSTACK, 15, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 18, STACK
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME XSTACK, 19, STACK
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME XSTACK, 17, STACK
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME XSTACK, 19, STACK
        EXTERN defaultKey

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\sys\ZGlobals.c
//    1 /*********************************************************************
//    2     Filename:       ZGlobals.c
//    3     Revised:        $Date: 2007-01-08 12:56:09 -0800 (Mon, 08 Jan 2007) $
//    4     Revision:       $Revision: 13236 $
//    5 
//    6     Description:
//    7 
//    8         User definable Z-Stack parameters.
//    9 
//   10     Notes:
//   11 
//   12     Copyright (c) 2007 by Texas Instruments, Inc.
//   13     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   14     derivative works, modify, distribute, perform, display or sell this
//   15     software and/or its documentation for any purpose is prohibited
//   16     without the express written consent of Texas Instruments, Inc.
//   17 *********************************************************************/
//   18 
//   19 /*********************************************************************
//   20  * INCLUDES
//   21  */
//   22 
//   23 #include "ZComDef.h"
//   24 #include "OSAL_Nv.h"
//   25 #include "ZDObject.h"
//   26 #include "ZGlobals.h"
//   27 
//   28 #include "OnBoard.h"
//   29 
//   30 /*********************************************************************
//   31  * MACROS
//   32  */
//   33 
//   34 /*********************************************************************
//   35  * CONSTANTS
//   36  */
//   37 
//   38 /*********************************************************************
//   39  * TYPEDEFS
//   40  */
//   41 
//   42 typedef struct zgItem
//   43 {
//   44   uint16 id;
//   45   uint16 len;
//   46   void *buf;
//   47 } zgItem_t;
//   48 
//   49 /*********************************************************************
//   50  * NWK GLOBAL VARIABLES
//   51  */
//   52 
//   53 // Polling values

        RSEG XDATA_I:XDATA:NOROOT(0)
//   54 uint16 zgPollRate = POLL_RATE;
zgPollRate:
        DS 2
        REQUIRE `?<Initializer for zgPollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   55 uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
zgQueuedPollRate:
        DS 2
        REQUIRE `?<Initializer for zgQueuedPollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   56 uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
zgResponsePollRate:
        DS 2
        REQUIRE `?<Initializer for zgResponsePollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   57 uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
zgRejoinPollRate:
        DS 2
        REQUIRE `?<Initializer for zgRejoinPollRate>`
        REQUIRE __INIT_XDATA_I
//   58 
//   59 // Transmission retries numbers

        RSEG XDATA_I:XDATA:NOROOT(0)
//   60 uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
zgMaxDataRetries:
        DS 1
        REQUIRE `?<Initializer for zgMaxDataRetries>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   61 uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
zgMaxPollFailureRetries:
        DS 1
        REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
        REQUIRE __INIT_XDATA_I
//   62 
//   63 // Default channel list

        RSEG XDATA_I:XDATA:NOROOT(0)
//   64 uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
zgDefaultChannelList:
        DS 4
        REQUIRE `?<Initializer for zgDefaultChannelList>`
        REQUIRE __INIT_XDATA_I
//   65 
//   66 // Default starting scan duration

        RSEG XDATA_I:XDATA:NOROOT(0)
//   67 uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
zgDefaultStartingScanDuration:
        DS 1
        REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
        REQUIRE __INIT_XDATA_I
//   68 
//   69 // Stack profile Id

        RSEG XDATA_I:XDATA:NOROOT(0)
//   70 uint8 zgStackProfile = STACK_PROFILE_ID;
zgStackProfile:
        DS 1
        REQUIRE `?<Initializer for zgStackProfile>`
        REQUIRE __INIT_XDATA_I
//   71 
//   72 // Default indirect message holding timeout

        RSEG XDATA_I:XDATA:NOROOT(0)
//   73 uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
zgIndirectMsgTimeout:
        DS 1
        REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
        REQUIRE __INIT_XDATA_I
//   74 
//   75 // Security level

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   76 uint8 zgSecurityLevel = SECURITY_LEVEL;
zgSecurityLevel:
        DS 1
//   77 
//   78 // Route expiry

        RSEG XDATA_I:XDATA:NOROOT(0)
//   79 uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
zgRouteExpiryTime:
        DS 1
        REQUIRE `?<Initializer for zgRouteExpiryTime>`
        REQUIRE __INIT_XDATA_I
//   80 
//   81 // Extended PAN Id

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   82 uint8 zgExtendedPANID[Z_EXTADDR_LEN];
zgExtendedPANID:
        DS 8
//   83 
//   84 // Broadcast parameters

        RSEG XDATA_I:XDATA:NOROOT(0)
//   85 uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
zgMaxBcastRetires:
        DS 1
        REQUIRE `?<Initializer for zgMaxBcastRetires>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   86 uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
zgPassiveAckTimeout:
        DS 1
        REQUIRE `?<Initializer for zgPassiveAckTimeout>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   87 uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
zgBcastDeliveryTime:
        DS 1
        REQUIRE `?<Initializer for zgBcastDeliveryTime>`
        REQUIRE __INIT_XDATA_I
//   88 
//   89 // Network mode

        RSEG XDATA_I:XDATA:NOROOT(0)
//   90 uint8 zgNwkMode = NWK_MODE;
zgNwkMode:
        DS 1
        REQUIRE `?<Initializer for zgNwkMode>`
        REQUIRE __INIT_XDATA_I
//   91 
//   92 // Many-to-one values

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   93 uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
zgConcentratorEnable:
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   94 uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
zgConcentratorDiscoveryTime:
        DS 1

        RSEG XDATA_I:XDATA:NOROOT(0)
//   95 uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
zgConcentratorRadius:
        DS 1
        REQUIRE `?<Initializer for zgConcentratorRadius>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   96 uint8 zgMaxSourceRoute = MAX_SOURCE_ROUTE;
zgMaxSourceRoute:
        DS 1
        REQUIRE `?<Initializer for zgMaxSourceRoute>`
        REQUIRE __INIT_XDATA_I
//   97 
//   98 
//   99 /*********************************************************************
//  100  * APS GLOBAL VARIABLES
//  101  */
//  102 
//  103 // The maximum number of retries allowed after a transmission failure

        RSEG XDATA_I:XDATA:NOROOT(0)
//  104 uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
zgApscMaxFrameRetries:
        DS 1
        REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
        REQUIRE __INIT_XDATA_I
//  105 
//  106 // The maximum number of seconds (milliseconds) to wait for an
//  107 // acknowledgement to a transmitted frame.
//  108 
//  109 // This number is used by polled devices.

        RSEG XDATA_I:XDATA:NOROOT(0)
//  110 uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
zgApscAckWaitDurationPolled:
        DS 2
        REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
        REQUIRE __INIT_XDATA_I
//  111 
//  112 // This number is used by non-polled devices in the following formula:
//  113 //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

        RSEG XDATA_I:XDATA:NOROOT(0)
//  114 uint8 zgApsAckWaitMultiplier = 2;
zgApsAckWaitMultiplier:
        DS 1
        REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
        REQUIRE __INIT_XDATA_I
//  115 
//  116 // The maximum number of milliseconds for the end device binding

        RSEG XDATA_I:XDATA:NOROOT(0)
//  117 uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
zgApsDefaultMaxBindingTime:
        DS 2
        REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
        REQUIRE __INIT_XDATA_I
//  118 
//  119 /*********************************************************************
//  120  * SECURITY GLOBAL VARIABLES
//  121  */
//  122 
//  123 // This is the pre-configured key in use (from NV memory)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  124 uint8 zgPreConfigKey[SEC_KEY_LEN];
zgPreConfigKey:
        DS 16
//  125 
//  126 // If true, preConfigKey should be configured on all devices on the network
//  127 // If false, it is configured only on the coordinator and sent to other
//  128 // devices upon joining.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//  129 uint8 zgPreConfigKeys = FALSE; //  TRUE;
zgPreConfigKeys:
        DS 1
//  130 
//  131 
//  132 /*********************************************************************
//  133  * ZDO GLOBAL VARIABLES
//  134  */
//  135 
//  136 // Configured PAN ID

        RSEG XDATA_I:XDATA:NOROOT(0)
//  137 uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
zgConfigPANID:
        DS 2
        REQUIRE `?<Initializer for zgConfigPANID>`
        REQUIRE __INIT_XDATA_I
//  138 
//  139 // Éè±¸ÀàÐÍ

        RSEG XDATA_I:XDATA:NOROOT(0)
//  140 uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
zgDeviceLogicalType:
        DS 1
        REQUIRE `?<Initializer for zgDeviceLogicalType>`
        REQUIRE __INIT_XDATA_I
//  141 
//  142 // Æô¶¯ÑÓ³Ù

        RSEG XDATA_I:XDATA:NOROOT(0)
//  143 uint8 zgStartDelay = START_DELAY;
zgStartDelay:
        DS 1
        REQUIRE `?<Initializer for zgStartDelay>`
        REQUIRE __INIT_XDATA_I
//  144 
//  145 /*********************************************************************
//  146  * NON-STANDARD GLOBAL VARIABLES
//  147  */
//  148 
//  149 // Simple API Endpoint

        RSEG XDATA_I:XDATA:NOROOT(0)
//  150 uint8 zgSapiEndpoint = SAPI_ENDPOINT;
zgSapiEndpoint:
        DS 1
        REQUIRE `?<Initializer for zgSapiEndpoint>`
        REQUIRE __INIT_XDATA_I
//  151 
//  152 /*********************************************************************
//  153  * LOCAl VARIABLES
//  154  */
//  155 
//  156 /*********************************************************************
//  157  * ZGlobal Item Table
//  158  */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//  159 static CONST zgItem_t zgItemTable[] =
??zgItemTable:
        DW 0, 0, 0H
//  160 {
//  161 #if defined ( NV_INIT )
//  162   {
//  163     ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
//  164   },
//  165   {
//  166     ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
//  167   },
//  168   {
//  169    ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
//  170   },
//  171   {
//  172     ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
//  173   },
//  174   {
//  175     ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
//  176   },
//  177   {
//  178    ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
//  179   },
//  180   {
//  181      ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
//  182   },
//  183   {
//  184     ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
//  185   }
//  186   ,
//  187   {
//  188     ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
//  189   },
//  190   {
//  191     ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
//  192   },
//  193   {
//  194     ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
//  195   },
//  196   {
//  197     ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
//  198   },
//  199   {
//  200     ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, &zgExtendedPANID
//  201   },
//  202   {
//  203     ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
//  204   },
//  205   {
//  206     ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
//  207   },
//  208   {
//  209     ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
//  210   },
//  211   {
//  212     ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
//  213   },
//  214   {
//  215     ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
//  216   },
//  217   {
//  218     ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
//  219   },
//  220   {
//  221     ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
//  222   },
//  223   {
//  224     ZCD_NV_MAX_SOURCE_ROUTE, sizeof(zgMaxSourceRoute), &zgMaxSourceRoute
//  225   },
//  226 #ifndef NONWK
//  227   {
//  228     ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
//  229   },
//  230   {
//  231     ZCD_NV_PRECFGKEY, SEC_KEY_LEN, &zgPreConfigKey
//  232   },
//  233   {
//  234     ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
//  235   },
//  236   {
//  237     ZCD_NV_SECURITY_LEVEL, sizeof(zgSecurityLevel), &zgSecurityLevel
//  238   },
//  239 #endif // NONWK
//  240   {
//  241     ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
//  242   },
//  243   {
//  244     ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
//  245   },
//  246   {
//  247     ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
//  248   },
//  249   {
//  250     ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
//  251   },
//  252   {
//  253     ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
//  254   },
//  255   {
//  256     ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
//  257   },
//  258 #endif // NV_INIT
//  259   // Last item -- DO NOT MOVE IT!
//  260   {
//  261     0x00, 0, NULL
//  262   }
//  263 };
//  264 
//  265 /*********************************************************************
//  266  * LOCAL FUNCTIONS
//  267  */
//  268 
//  269 static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
//  270 
//  271 
//  272 /*********************************************************************
//  273  * @fn       zgItemInit()
//  274  *
//  275  * @brief
//  276  *
//  277  *   Initialize a global item. If the item doesn't exist in NV memory,
//  278  *   write the system default (value passed in) into NV memory. But if
//  279  *   it exists, set the item to the value stored in NV memory.
//  280  *
//  281  *   Also, if setDefault is TRUE and the item exists, we will write
//  282  *   the default value to NV space.
//  283  *
//  284  * @param   id - item id
//  285  * @param   len - item len
//  286  * @param   buf - pointer to the item
//  287  * @param   setDefault - TRUE to set default, not read
//  288  *
//  289  * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  290  *          exist in NV, NV_OPER_FAILED if failure.
//  291  */
//  292 static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
//  293 {
//  294 
//  295   uint8 status;
//  296 
//  297   // If the item doesn't exist in NV memory, create and initialize
//  298   // it with the value passed in.
//  299   status = osal_nv_item_init( id, len, buf );
//  300   if ( status == ZSUCCESS )
//  301   {
//  302     if ( setDefault )
//  303     {
//  304       // Write the default value back to NV
//  305       status =  osal_nv_write( id, 0, len, buf );
//  306     }
//  307     else
//  308     {
//  309       // The item exists in NV memory, read it from NV memory
//  310       status = osal_nv_read( id, 0, len, buf );
//  311     }
//  312   }
//  313 
//  314   return (status);
//  315 }
//  316 
//  317 /*********************************************************************
//  318  * API FUNCTIONS
//  319  */
//  320 
//  321 
//  322 /*********************************************************************
//  323  * @fn          zgInit
//  324  *
//  325  * @brief
//  326  *
//  327  *   Initialize the Z-Stack Globals. If an item doesn't exist in
//  328  *   NV memory, write the system default into NV memory. But if
//  329  *   it exists, set the item to the value stored in NV memory.
//  330  *
//  331  * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
//  332  *       that the Config state items (zgItemTable) need to be
//  333  *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
//  334  *
//  335  *
//  336  * @param       none
//  337  *
//  338  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  339  *              exist in NV, NV_OPER_FAILED if failure.
//  340  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  341 uint8 zgInit( void )
zgInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zgInit
//  342 {
        FUNCALL zgInit, zgReadStartupOptions
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL zgInit, ZMacGetReq
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL zgInit, osal_memcpy
        LOCFRAME XSTACK, 18, STACK
        ARGFRAME XSTACK, 18, STACK
        FUNCALL zgInit, osal_nv_read
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL zgInit, osal_nv_item_init
        LOCFRAME XSTACK, 17, STACK
        ARGFRAME XSTACK, 17, STACK
        FUNCALL zgInit, osal_nv_write
        LOCFRAME XSTACK, 19, STACK
        ARGFRAME XSTACK, 19, STACK
        FUNCALL zgInit, zgWriteStartupOptions
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        MOV	A,#-0xf
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  343   uint8  i = 0;
        MOV	?V0 + 3,#0x0
//  344   uint8  setDefault = FALSE;
        MOV	?V0 + 2,#0x0
//  345 
//  346   // Do we want to default the Config state values
//  347   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        MOV	DPTR,#(zgReadStartupOptions & 0xffff)
        MOV	A,#((zgReadStartupOptions >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	C,0xE0 /* A   */.0
        JNC	??zgInit_0
//  348   {
//  349     setDefault = TRUE;
        MOV	?V0 + 2,#0x1
//  350   }
//  351 
//  352 #if 0
//  353   // Enable this section if you need to track the number of resets
//  354   // This section is normally disabled to minimize "wear" on NV memory
//  355   uint16 bootCnt = 0;
//  356 
//  357   // Update the Boot Counter
//  358   if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
//  359   {
//  360     // Get the old value from NV memory
//  361     osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
//  362   }
//  363 
//  364   // Increment the Boot Counter and store it into NV memory
//  365   if ( setDefault )
//  366     bootCnt = 0;
//  367   else
//  368     bootCnt++;
//  369   osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
//  370 #endif
//  371 
//  372   // Initialize the Extended PAN ID as my own extended address
//  373   ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
??zgInit_0:
        ; Setup parameters for call to function ZMacGetReq
        MOV	R2,#(zgExtendedPANID & 0xff)
        MOV	R3,#((zgExtendedPANID >> 8) & 0xff)
        MOV	R1,#-0x1e
        LCALL	ZMacGetReq & 0xFFFF
//  374 
//  375 #ifndef NONWK
//  376   // Initialize the Pre-Configured Key to the default key
//  377   osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );  // Do NOT Change!!!
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 4,#(defaultKey & 0xff)
        MOV	?V0 + 5,#((defaultKey >> 8) & 0xff)
        MOV	?V0 + 6,#-0x80
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV	R4,#0x10
        MOV	R5,#0x0
        MOV	R2,#(zgPreConfigKey & 0xff)
        MOV	R3,#((zgPreConfigKey >> 8) & 0xff)
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        SJMP	??zgInit_1
//  378 #endif // NONWK
//  379 
//  380   while ( zgItemTable[i].id != 0x00 )
//  381   {
??zgInit_2:
        ; Setup parameters for call to function osal_nv_read
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
??zgInit_3:
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  382     // Initialize the item
//  383     zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
//  384 
//  385     // Move on to the next item
//  386     i++;
??zgInit_4:
        INC	?V0 + 3
??zgInit_1:
        MOV	A,?V0 + 3
        MOV	B,#0x6
        MUL	AB
        MOV	R0,A
        MOV	R2,B
        MOV	A,R2
        MOV	R1,A
        MOV	A,R0
        ADD	A,#(??zgItemTable & 0xff)
        MOV	DPL,A
        MOV	A,R1
        ADDC	A,#((??zgItemTable >> 8) & 0xff)
        MOV	DPH,A
        CLR	A
        MOVC	A,@A+DPTR
        MOV	R0,A
        MOV	A,#0x1
        MOVC	A,@A+DPTR
        MOV	R1,A
        MOV	A,R0
        JNZ	??zgInit_5
        MOV	A,R1
??zgInit_5:
        JNZ	$+5
        LJMP	??zgInit_6 & 0xFFFF
        MOV	A,?V0 + 3
        MOV	B,#0x6
        MUL	AB
        MOV	R0,A
        MOV	A,R2
        MOV	R1,A
        MOV	A,R0
        ADD	A,#(??zgItemTable & 0xff)
        MOV	R0,A
        MOV	A,R1
        ADDC	A,#((??zgItemTable >> 8) & 0xff)
        MOV	R1,A
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        CLR	A
        MOVC	A,@A+DPTR
        MOV	?V0 + 4,A
        MOV	A,#0x1
        MOVC	A,@A+DPTR
        MOV	?V0 + 5,A
        MOV	DPL,R0
        MOV	DPH,R1
        INC	DPTR
        INC	DPTR
        CLR	A
        MOVC	A,@A+DPTR
        PUSH	A
        MOV	A,#0x1
        MOVC	A,@A+DPTR
        MOV	DPH,A
        POP	DPL
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	DPL,R0
        MOV	DPH,R1
        CLR	A
        MOVC	A,@A+DPTR
        PUSH	A
        MOV	A,#0x1
        MOVC	A,@A+DPTR
        MOV	DPH,A
        POP	DPL
        MOV	R6,DPL
        MOV	R7,DPH
        ; Setup parameters for call to function osal_nv_item_init
        MOV	R0,#?V0 + 4
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	R4,?V0 + 0
        MOV	R5,?V0 + 1
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(osal_nv_item_init & 0xffff)
        MOV	A,#((osal_nv_item_init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	A,R1
        JZ	$+5
        LJMP	??zgInit_4 & 0xFFFF
        MOV	A,?V0 + 2
        MOV	R0,#?V0 + 4
        JNZ	$+5
        LJMP	??zgInit_2 & 0xFFFF
        ; Setup parameters for call to function osal_nv_write
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(osal_nv_write & 0xffff)
        MOV	A,#((osal_nv_write >> 16) & 0xff)
        LJMP	??zgInit_3 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 15)
//  387   }
//  388 
//  389   // Clear the Config State default
//  390   if ( setDefault )
??zgInit_6:
        MOV	A,?V0 + 2
        JZ	??zgInit_7
//  391   {
//  392     zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV	R2,#0x1
        MOV	R1,#0x0
        MOV	DPTR,#(zgWriteStartupOptions & 0xffff)
        MOV	A,#((zgWriteStartupOptions >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  393   }
//  394 
//  395   return ( ZSUCCESS );
??zgInit_7:
        MOV	R1,#0x0
        MOV	R7,#0x7
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  396 }
//  397 
//  398 /*********************************************************************
//  399  * @fn          zgReadStartupOptions
//  400  *
//  401  * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
//  402  *
//  403  * @param       none
//  404  *
//  405  * @return      the ZCD_NV_STARTUP_OPTION NV item
//  406  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  407 uint8 zgReadStartupOptions( void )
zgReadStartupOptions:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function zgReadStartupOptions
//  408 {
        FUNCALL zgReadStartupOptions, osal_nv_item_init
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        FUNCALL zgReadStartupOptions, osal_nv_read
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  409   // Default to Use Config State and Use Network State
//  410   uint8 startupOption = 0;
        LCALL	?Subroutine0 & 0xFFFF
//  411 
//  412   // This should have been done in ZMain.c, but just in case.
//  413   if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
//  414                               sizeof(startupOption),
//  415                               &startupOption ) == ZSUCCESS )
??CrossCallReturnLabel_0:
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	R4,#0x1
        MOV	R5,#0x0
        MOV	R2,#0x3
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_item_init & 0xffff)
        MOV	A,#((osal_nv_item_init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x2
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R1
        JNZ	??zgReadStartupOptions_0
//  416   {
//  417     // Read saved startup control
//  418     osal_nv_read( ZCD_NV_STARTUP_OPTION,
//  419                   0,
//  420                   sizeof( startupOption ),
//  421                   &startupOption);
        ; Setup parameters for call to function osal_nv_read
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#0x3
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  422   }
//  423   return ( startupOption );
??zgReadStartupOptions_0:
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        MOV	R1,A
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  424 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV	R7,#0x2
        LJMP	?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        CLR	A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 11)
??Subroutine0_0:
        MOVX	@DPTR,A
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_read
        ; Setup parameters for call to function osal_nv_write
        MOV	?V0 + 0,DPL
        MOV	?V0 + 1,DPH
        MOV	R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        CFI EndBlock cfiCond6
//  425 
//  426 /*********************************************************************
//  427  * @fn          zgWriteStartupOptions
//  428  *
//  429  * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
//  430  *
//  431  * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
//  432  *               clear bit. The set bit is an OR operation, and the
//  433  *               clear bit is an AND ~(bitOptions) operation.
//  434  *
//  435  * @param       bitOptions - which bits to perform action on:
//  436  *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
//  437  *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  438  *
//  439  * @return      ZSUCCESS if successful
//  440  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  441 uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
zgWriteStartupOptions:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function zgWriteStartupOptions
//  442 {
        FUNCALL zgWriteStartupOptions, osal_nv_read
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        FUNCALL zgWriteStartupOptions, osal_nv_write
        LOCFRAME XSTACK, 15, STACK
        ARGFRAME XSTACK, 15, STACK
        MOV	A,#-0xa
        LCALL	?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R1
        MOV	R6,A
        MOV	A,R2
        MOV	R7,A
//  443   uint8 status;
//  444   uint8 startupOptions = 0;
        LCALL	?Subroutine0 & 0xFFFF
//  445 
//  446   status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
//  447                 0,
//  448                 sizeof( startupOptions ),
//  449                 &startupOptions );
??CrossCallReturnLabel_1:
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#0x3
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_read & 0xffff)
        MOV	A,#((osal_nv_read >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV	A,R1
//  450 
//  451   if ( status == ZSUCCESS )
        JNZ	??zgWriteStartupOptions_0
//  452   {
//  453     if ( action == ZG_STARTUP_SET )
        MOV	A,#-0x1
        XRL	A,R6
        JNZ	??zgWriteStartupOptions_1
//  454     {
//  455       // Set bits
//  456       startupOptions |= bitOptions;
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        ORL	A,R7
        SJMP	??zgWriteStartupOptions_2
//  457     }
//  458     else
//  459     {
//  460       // Clear bits
//  461       startupOptions &= ~(bitOptions);
??zgWriteStartupOptions_1:
        MOV	A,R7
        CPL	A
        MOV	R2,A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	A,@DPTR
        ANL	A,R2
??zgWriteStartupOptions_2:
        LCALL	??Subroutine0_0 & 0xFFFF
//  462     }
//  463 
//  464     // Changed?
//  465     status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
//  466                  0,
//  467                  sizeof( startupOptions ),
//  468                  &startupOptions );
??CrossCallReturnLabel_2:
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV	?V0 + 0,#0x1
        MOV	?V0 + 1,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV	R4,#0x0
        MOV	R5,#0x0
        MOV	R2,#0x3
        MOV	R3,#0x0
        MOV	DPTR,#(osal_nv_write & 0xffff)
        MOV	A,#((osal_nv_write >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x4
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  469   }
//  470 
//  471   return ( status );
??zgWriteStartupOptions_0:
        LJMP	?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock7
//  472 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgPollRate>`:
        DW 1000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgQueuedPollRate>`:
        DW 100

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgResponsePollRate>`:
        DW 100

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgRejoinPollRate>`:
        DW 440

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgMaxDataRetries>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgMaxPollFailureRetries>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgDefaultChannelList>`:
        DD 2048

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgDefaultStartingScanDuratio`:
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgStackProfile>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgIndirectMsgTimeout>`:
        DB 7

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgRouteExpiryTime>`:
        DB 30

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgMaxBcastRetires>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgPassiveAckTimeout>`:
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgBcastDeliveryTime>`:
        DB 30

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkMode>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgConcentratorRadius>`:
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgMaxSourceRoute>`:
        DB 12

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApscMaxFrameRetries>`:
        DB 3

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApscAckWaitDurationPolled>`:
        DW 3000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsAckWaitMultiplier>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsDefaultMaxBindingTime>`:
        DW 16000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgConfigPANID>`:
        DW 65535

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgDeviceLogicalType>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgStartDelay>`:
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgSapiEndpoint>`:
        DB 224

        END
//  473 
//  474 /*********************************************************************
//  475 *********************************************************************/
// 
// 535 bytes in segment BANKED_CODE
//   6 bytes in segment CODE_C
//  35 bytes in segment XDATA_I
//  35 bytes in segment XDATA_ID
//  28 bytes in segment XDATA_Z
// 
// 576 bytes of CODE  memory
//  63 bytes of XDATA memory
//
//Errors: none
//Warnings: none
