##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   24/Jan/2013  14:47:39 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\hal\common\hal_drivers.c                        #
#    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8 #
#                          wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR          #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DRTR_NWK -DBLINK_LEDS "-DCONST=const __code"  #
#                          -DGENERIC=__generic) -f                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCo #
#                          nfig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x0000080 #
#                          0 -DZDAPP_CONFIG_PAN_ID=0xFFFF                    #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\ -I                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\Source\ -I                 #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt\ #
#                           -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ #
#                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee200 #
#                          6-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2430DB\..\..\..\..\..\Components #
#                          \hal\include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª· #
#                          ¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 #
#                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ #
#                          ..\Components\hal\target\CC2430EB\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\osa #
#                          l\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ #
#                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 #
#                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Project #
#                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. #
#                          .\Components\osal\include\ -I                     #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\Î #
#                          ÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zig #
#                          Bee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zsta #
#                          ck\Samples\SampleApp\CC2430DB\..\..\..\..\..\Comp #
#                          onents\stack\nwk\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\sys\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ #
#                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zi #
#                          gBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Com #
#                          ponents\stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\zmac\f8w\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍ #
#                          øÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2 #
#                          006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁ #
#                          Ï\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ #
#                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\mac\high_level\ -I                      #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \low_level\srf03\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf03\single_chip #
#                          \ -D CC2430EB -D ZTOOL_P1 -D MT_TASK -lC          #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\ -lA            #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\RouterEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\hal\common\hal_drivers.c"                      #
#    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\hal_drivers.lst #
#    Object file        =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\Obj\hal_drivers.r51  #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\hal\common\hal_drivers.c
      1          /**************************************************************************************************
      2            Filename:       hal_driver.c
      3            Revised:        $Date: 2005/04/29 01:36:04 $
      4            Revision:       $Revision$
      5          
      6            Description:
      7          
      8            This file contains the interface to the Drivers Service.
      9          
     10            Notes:
     11          
     12            Copyright (c) 2007 by Texas Instruments, Inc.
     13            All Rights Reserved.  Permission to use, reproduce, copy, prepare
     14            derivative works, modify, distribute, perform, display or sell this
     15            software and/or its documentation for any purpose is prohibited
     16            without the express written consent of Texas Instruments, Inc.
     17          **************************************************************************************************/
     18          
     19          
     20          /**************************************************************************************************
     21           *                                            INCLUDES
     22           **************************************************************************************************/
     23          #include "hal_types.h"
     24          #include "OSAL.h"
     25          #include "hal_drivers.h"
     26          #include "hal_adc.h"
     27          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
     28            #include "hal_dma.h"
     29          #endif
     30          #include "hal_key.h"
     31          #include "hal_lcd.h"
     32          #include "hal_led.h"
     33          #include "hal_timer.h"
     34          #include "hal_uart.h"
     35          #include "hal_sleep.h"
     36          #if (defined HAL_AES) && (HAL_AES == TRUE)
     37            #include "hal_aes.h"
     38          #endif
     39          
     40          /**************************************************************************************************
     41           *                                            MACROS
     42           **************************************************************************************************/
     43          
     44          
     45          
     46          /**************************************************************************************************
     47           *                                          CONSTANTS
     48           **************************************************************************************************/
     49          
     50          
     51          /**************************************************************************************************
     52           *                                          TYPEDEFS
     53           **************************************************************************************************/
     54          
     55          
     56          /**************************************************************************************************
     57           *                                      GLOBAL VARIABLES
     58           **************************************************************************************************/

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     59          uint8 Hal_TaskID;
   \                     Hal_TaskID:
   \   000000                DS 1
     60          
     61          extern void HalLedUpdate( void ); /* Notes: This for internal only so it shouldn't be in hal_led.h */
     62          
     63          /**************************************************************************************************
     64           *                                      FUNCTIONS - API
     65           **************************************************************************************************/
     66          
     67          /**************************************************************************************************
     68           * @fn      Hal_Init
     69           *
     70           * @brief   Hal Initialization function.
     71           *
     72           * @param   task_id - Hal TaskId
     73           *
     74           * @return  None
     75           **************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
     76          void Hal_Init( uint8 task_id )
   \                     Hal_Init:
     77          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     78            /* Register task ID */
     79            Hal_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#Hal_TaskID
   \   000008   F0           MOVX    @DPTR,A
     80          
     81          }
   \   000009   80..         SJMP    ??Subroutine0_0

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??Subroutine0_0:
   \   000003   D083         POP     DPH
   \   000005   D082         POP     DPL
   \   000007   02....       LJMP    ?BRET
     82          
     83          /**************************************************************************************************
     84           * @fn      Hal_DriverInit
     85           *
     86           * @brief   Initialize HW - These need to be initialized before anyone.
     87           *
     88           * @param   task_id - Hal TaskId
     89           *
     90           * @return  None
     91           **************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
     92          void HalDriverInit (void)
   \                     HalDriverInit:
     93          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     94            /* TIMER */
     95            HalTimerInit();
   \   000004                ; Setup parameters for call to function HalTimerInit
   \   000004   90....       MOV     DPTR,#(HalTimerInit & 0xffff)
   \   000007   74..         MOV     A,#((HalTimerInit >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     96          
     97            /* ADC */
     98          #if (defined HAL_ADC) && (HAL_ADC == TRUE)
     99            HalAdcInit();
   \   00000C                ; Setup parameters for call to function HalAdcInit
   \   00000C   90....       MOV     DPTR,#(HalAdcInit & 0xffff)
   \   00000F   74..         MOV     A,#((HalAdcInit >> 16) & 0xff)
   \   000011   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    100          #endif
    101          
    102            /* DMA */
    103          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
    104            // Must be called before the init call to any module that uses DMA.
    105            HalDmaInit();
   \   000014                ; Setup parameters for call to function HalDmaInit
   \   000014   90....       MOV     DPTR,#(HalDmaInit & 0xffff)
   \   000017   74..         MOV     A,#((HalDmaInit >> 16) & 0xff)
   \   000019   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    106          #endif
    107          
    108            /* AES */
    109          #if (defined HAL_AES) && (HAL_AES == TRUE)
    110            HalAesInit();
   \   00001C                ; Setup parameters for call to function HalAesInit
   \   00001C   90....       MOV     DPTR,#(HalAesInit & 0xffff)
   \   00001F   74..         MOV     A,#((HalAesInit >> 16) & 0xff)
   \   000021   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    111          #endif
    112          
    113            /* LCD */
    114          #if (defined HAL_LCD) && (HAL_LCD == TRUE)
    115            HalLcdInit();
   \   000024                ; Setup parameters for call to function HalLcdInit
   \   000024   90....       MOV     DPTR,#(HalLcdInit & 0xffff)
   \   000027   74..         MOV     A,#((HalLcdInit >> 16) & 0xff)
   \   000029   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    116          #endif
    117          
    118            /* LED */
    119          #if (defined HAL_LED) && (HAL_LED == TRUE)
    120            HalLedInit();
   \   00002C                ; Setup parameters for call to function HalLedInit
   \   00002C   90....       MOV     DPTR,#(HalLedInit & 0xffff)
   \   00002F   74..         MOV     A,#((HalLedInit >> 16) & 0xff)
   \   000031   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    121          #endif
    122          
    123            /* UART */
    124          #if (defined HAL_UART) && (HAL_UART == TRUE)
    125            HalUARTInit();
   \   000034                ; Setup parameters for call to function HalUARTInit
   \   000034   90....       MOV     DPTR,#(HalUARTInit & 0xffff)
   \   000037   74..         MOV     A,#((HalUARTInit >> 16) & 0xff)
   \   000039   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    126          #endif
    127          
    128            /* KEY */
    129          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    130            HalKeyInit();
   \   00003C                ; Setup parameters for call to function HalKeyInit
   \   00003C   90....       MOV     DPTR,#(HalKeyInit & 0xffff)
   \   00003F   74..         MOV     A,#((HalKeyInit >> 16) & 0xff)
   \   000041                REQUIRE ?Subroutine0
   \   000041                ; // Fall through to label ?Subroutine0
    131          #endif
    132          }
    133          
    134          
    135          /**************************************************************************************************
    136           * @fn      Hal_ProcessEvent
    137           *
    138           * @brief   Hal Process Event
    139           *
    140           * @param   task_id - Hal TaskId
    141           *          events - events
    142           *
    143           * @return  None
    144           **************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    145          uint16 Hal_ProcessEvent( uint8 task_id, uint16 events )
   \                     Hal_ProcessEvent:
    146          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    147            uint8 *msgPtr;
    148            //int key;
    149            if ( events & SYS_EVENT_MSG )
   \   000009   7480         MOV     A,#-0x80
   \   00000B   5F           ANL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   7001         JNZ     ??Hal_ProcessEvent_0
   \   000010   E9           MOV     A,R1
   \                     ??Hal_ProcessEvent_0:
   \   000011   701D         JNZ     ??Hal_ProcessEvent_1
    150            {
    151              msgPtr = osal_msg_receive(Hal_TaskID);
    152          
    153              while (msgPtr)
    154              {
    155                /* Do something here - for now, just deallocate the msg and move on */
    156          
    157                /* De-allocate */
    158                osal_msg_deallocate( msgPtr );
    159                /* Next */
    160                msgPtr = osal_msg_receive( Hal_TaskID );
    161              }
    162              return events ^ SYS_EVENT_MSG;
    163            }
    164          
    165            if ( events & HAL_LED_BLINK_EVENT )
   \   000013   EE           MOV     A,R6
   \   000014   5402         ANL     A,#0x2
   \   000016   6032         JZ      ??Hal_ProcessEvent_2
    166            {
    167          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    168              HalLedUpdate();
   \   000018                ; Setup parameters for call to function HalLedUpdate
   \   000018   90....       MOV     DPTR,#(HalLedUpdate & 0xffff)
   \   00001B   74..         MOV     A,#((HalLedUpdate >> 16) & 0xff)
   \   00001D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    169          #endif /* BLINK_LEDS && HAL_LED */
    170              return events ^ HAL_LED_BLINK_EVENT;
   \   000020   7402         MOV     A,#0x2
   \                     ??Hal_ProcessEvent_3:
   \   000022   6E           XRL     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \                     ??Hal_ProcessEvent_4:
   \   000025   FB           MOV     R3,A
   \   000026   8052         SJMP    ??Hal_ProcessEvent_5
    171            }
   \                     ??Hal_ProcessEvent_6:
   \   000028                ; Setup parameters for call to function osal_msg_deallocate
   \   000028   90....       MOV     DPTR,#(osal_msg_deallocate & 0xffff)
   \   00002B   74..         MOV     A,#((osal_msg_deallocate >> 16) & 0xff)
   \   00002D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??Hal_ProcessEvent_1:
   \   000030                ; Setup parameters for call to function osal_msg_receive
   \   000030   90....       MOV     DPTR,#Hal_TaskID
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   90....       MOV     DPTR,#(osal_msg_receive & 0xffff)
   \   000038   74..         MOV     A,#((osal_msg_receive >> 16) & 0xff)
   \   00003A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003D   EA           MOV     A,R2
   \   00003E   7001         JNZ     ??Hal_ProcessEvent_7
   \   000040   EB           MOV     A,R3
   \                     ??Hal_ProcessEvent_7:
   \   000041   70E5         JNZ     ??Hal_ProcessEvent_6
   \   000043   EE           MOV     A,R6
   \   000044   FA           MOV     R2,A
   \   000045   7480         MOV     A,#-0x80
   \   000047   6F           XRL     A,R7
   \   000048   80DB         SJMP    ??Hal_ProcessEvent_4
    172          
    173            if (events & HAL_KEY_EVENT)
   \                     ??Hal_ProcessEvent_2:
   \   00004A   EE           MOV     A,R6
   \   00004B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004D   5027         JNC     ??Hal_ProcessEvent_8
    174            {
    175          
    176          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    177              /* Check for keys */
    178              HalKeyPoll();
   \   00004F                ; Setup parameters for call to function HalKeyPoll
   \   00004F   90....       MOV     DPTR,#(HalKeyPoll & 0xffff)
   \   000052   74..         MOV     A,#((HalKeyPoll >> 16) & 0xff)
   \   000054   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    179              //key = HalKeyRead();
    180          
    181              /* if interrupt disabled, do next polling */
    182              if (!Hal_KeyIntEnable)
   \   000057   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   7015         JNZ     ??Hal_ProcessEvent_9
    183              {
    184                osal_start_timerEx( Hal_TaskID, HAL_KEY_EVENT, 100);
   \   00005D                ; Setup parameters for call to function osal_start_timerEx
   \   00005D   7C64         MOV     R4,#0x64
   \   00005F   7D00         MOV     R5,#0x0
   \   000061   7A01         MOV     R2,#0x1
   \   000063   7B00         MOV     R3,#0x0
   \   000065   90....       MOV     DPTR,#Hal_TaskID
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   90....       MOV     DPTR,#(osal_start_timerEx & 0xffff)
   \   00006D   74..         MOV     A,#((osal_start_timerEx >> 16) & 0xff)
   \   00006F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    185              }
    186          #endif // HAL_KEY
    187          
    188              return events ^ HAL_KEY_EVENT;
   \                     ??Hal_ProcessEvent_9:
   \   000072   7401         MOV     A,#0x1
   \   000074   80AC         SJMP    ??Hal_ProcessEvent_3
    189            }
    190          
    191          #ifdef POWER_SAVING
    192            if ( events & HAL_SLEEP_TIMER_EVENT )
    193            {
    194              halRestoreSleepLevel();
    195              return events ^ HAL_SLEEP_TIMER_EVENT;
    196            }
    197          #endif
    198          
    199            /* Nothing interested, discard the message */
    200            return 0;
   \                     ??Hal_ProcessEvent_8:
   \   000076   7A00         MOV     R2,#0x0
   \   000078   7B00         MOV     R3,#0x0
   \                     ??Hal_ProcessEvent_5:
   \   00007A   7F02         MOV     R7,#0x2
   \   00007C   02....       LJMP    ?BANKED_LEAVE_XDATA
    201          
    202          }
    203          
    204          /**************************************************************************************************
    205           * @fn      Hal_ProcessPoll
    206           *
    207           * @brief   This routine will be called by OSAL to poll UART, TIMER...
    208           *
    209           * @param   task_id - Hal TaskId
    210           *
    211           * @return  None
    212           **************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    213          void Hal_ProcessPoll ()
   \                     Hal_ProcessPoll:
    214          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    215          
    216            /* Timer Poll */
    217            HalTimerTick();
   \   000004                ; Setup parameters for call to function HalTimerTick
   \   000004   90....       MOV     DPTR,#(HalTimerTick & 0xffff)
   \   000007   74..         MOV     A,#((HalTimerTick >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    218          
    219            /* UART Poll */
    220          #if (defined HAL_UART) && (HAL_UART == TRUE)
    221            HalUARTPoll();
   \   00000C                ; Setup parameters for call to function HalUARTPoll
   \   00000C   90....       MOV     DPTR,#(HalUARTPoll & 0xffff)
   \   00000F   74..         MOV     A,#((HalUARTPoll >> 16) & 0xff)
   \   000011   02....       LJMP    ?Subroutine0 & 0xFFFF
    222          #endif
    223          
    224          }
    225          
    226          
    227          /**************************************************************************************************
    228          **************************************************************************************************/
    229          

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     HalDriverInit                2      0      0
       -> HalTimerInit            4      0      0
       -> HalAdcInit              4      0      0
       -> HalDmaInit              4      0      0
       -> HalAesInit              4      0      0
       -> HalLcdInit              4      0      0
       -> HalLedInit              4      0      0
       -> HalUARTInit             4      0      0
       -> HalKeyInit              4      0      0
     Hal_Init                     2      0      0
     Hal_ProcessEvent             0      0     10
       -> HalLedUpdate            0      0     20
       -> osal_msg_deallocate     0      0     20
       -> osal_msg_receive        0      0     20
       -> HalKeyPoll              0      0     20
       -> osal_start_timerEx      0      0     20
     Hal_ProcessPoll              2      0      0
       -> HalTimerTick            4      0      0
       -> HalUARTPoll             4      0      0


   Segment part sizes:

     Function/Label   Bytes
     --------------   -----
     Hal_TaskID          1
     Hal_Init           11
     ?Subroutine0       10
     HalDriverInit      65
     Hal_ProcessEvent  127
     Hal_ProcessPoll    20

 
 233 bytes in segment BANKED_CODE
   1 byte  in segment XDATA_Z
 
 233 bytes of CODE  memory
   1 byte  of XDATA memory

Errors: none
Warnings: none
