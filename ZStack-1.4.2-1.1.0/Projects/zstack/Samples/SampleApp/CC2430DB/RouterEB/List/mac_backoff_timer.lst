##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   24/Jan/2013  14:47:39 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\mac\low_level\srf03\mac_backoff_timer.c         #
#    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8 #
#                          wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR          #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DRTR_NWK -DBLINK_LEDS "-DCONST=const __code"  #
#                          -DGENERIC=__generic) -f                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCo #
#                          nfig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x0000080 #
#                          0 -DZDAPP_CONFIG_PAN_ID=0xFFFF                    #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\ -I                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\Source\ -I                 #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt\ #
#                           -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ #
#                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee200 #
#                          6-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2430DB\..\..\..\..\..\Components #
#                          \hal\include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª· #
#                          ¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 #
#                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ #
#                          ..\Components\hal\target\CC2430EB\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\osa #
#                          l\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ #
#                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 #
#                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Project #
#                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. #
#                          .\Components\osal\include\ -I                     #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\Î #
#                          ÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zig #
#                          Bee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zsta #
#                          ck\Samples\SampleApp\CC2430DB\..\..\..\..\..\Comp #
#                          onents\stack\nwk\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\sys\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ #
#                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zi #
#                          gBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Com #
#                          ponents\stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\zmac\f8w\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍ #
#                          øÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2 #
#                          006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁ #
#                          Ï\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ #
#                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\mac\high_level\ -I                      #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \low_level\srf03\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf03\single_chip #
#                          \ -D CC2430EB -D ZTOOL_P1 -D MT_TASK -lC          #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\ -lA            #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\RouterEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\mac\low_level\srf03\mac_backoff_timer.c"       #
#    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\mac_backoff_tim #
#                          er.lst                                            #
#    Object file        =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\Obj\mac_backoff_time #
#                          r.r51                                             #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\mac\low_level\srf03\mac_backoff_timer.c
      1          /**************************************************************************************************
      2              Filename:
      3              Revised:        $Date: 2007-03-26 16:18:09 -0700 (Mon, 26 Mar 2007) $
      4              Revision:       $Revision: 13860 $
      5          
      6              Description:
      7          
      8              Describe the purpose and contents of the file.
      9          
     10              Copyright (c) 2006 by Texas Instruments, Inc.
     11              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     12              derivative works, modify, distribute, perform, display or sell this
     13              software and/or its documentation for any purpose is prohibited
     14              without the express written consent of Texas Instruments, Inc.
     15          **************************************************************************************************/
     16          
     17          
     18          
     19          /* ------------------------------------------------------------------------------------------------
     20           *                                           Includes
     21           * ------------------------------------------------------------------------------------------------
     22           */
     23          
     24          /* hal */
     25          #include "hal_types.h"
     26          #include "hal_mcu.h"

   \                                 In segment SFR_AN, at 0xa6
   \   unsigned char volatile __sfr T2TLD
   \                     T2TLD:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xa7
   \   unsigned char volatile __sfr T2THD
   \                     T2THD:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xc3
   \   unsigned char volatile __sfr T2CNF
   \                     T2CNF:
   \   000000                DS 1
     27          
     28          /* high-level specific */
     29          #include "mac_spec.h"
     30          
     31          /* exported low-level */
     32          #include "mac_low_level.h"
     33          
     34          /* low-level specific */
     35          #include "mac_backoff_timer.h"
     36          #include "mac_tx.h"
     37          
     38          /* target specific */
     39          #include "mac_radio_defs.h"
     40          
     41          /* debug */
     42          #include "mac_assert.h"
     43          
     44          
     45          /* ------------------------------------------------------------------------------------------------
     46           *                                            Defines
     47           * ------------------------------------------------------------------------------------------------
     48           */
     49          #define COMPARE_STATE_ROLLOVER_BV                 BV(0)
     50          #define COMPARE_STATE_TRIGGER_BV                  BV(1)
     51          #define COMPARE_STATE_ARM_BV                      BV(2)
     52          
     53          #define COMPARE_STATE_TRIGGER                     COMPARE_STATE_TRIGGER_BV
     54          #define COMPARE_STATE_ROLLOVER                    COMPARE_STATE_ROLLOVER_BV
     55          #define COMPARE_STATE_ROLLOVER_AND_TRIGGER        (COMPARE_STATE_ROLLOVER_BV | COMPARE_STATE_TRIGGER_BV)
     56          #define COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER    (COMPARE_STATE_ROLLOVER_BV | COMPARE_STATE_ARM_BV)
     57          
     58          
     59          /*
     60           *  The datasheet mentions a small delay on both receive and transmit side of approximately
     61           *  two microseconds.  The precise characterization is given below.
     62           *  (This data is not given in rev 1.03 datasheet)
     63           */
     64          #define RX_TX_PROP_DELAY_AVG_USEC         ((MAC_RADIO_RX_TX_PROP_DELAY_MIN_USEC + MAC_RADIO_RX_TX_PROP_DELAY_MAX_USEC) / 2)
     65          #define RX_TX_PROP_DELAY_AVG_TIMER_TICKS  ((uint16)(MAC_RADIO_TIMER_TICKS_PER_USEC() * RX_TX_PROP_DELAY_AVG_USEC + 0.5))
     66          
     67          /*
     68           *  For slotted receives, the SFD signal is expected to occur on a specifc symbol boundary.
     69           *  This does *not* correspond to the backoff boundary.  The SFD signal occurs at an
     70           *  offset from the backoff boundary.  This is done for efficiency of related algorithms.
     71           *
     72           *  Once transmit is strobed there is a fixed delay until the SFD signal occurs.  The frame
     73           *  does not start over-the-air transmit until after an internal radio delay of 12 symbols.
     74           *  Once transmitting over-the-air, the preamble is sent (8 symbols) followed by the
     75           *  SFD field (2 symbols). After the SFD field completes, the SFD signal occurs.  This
     76           *  adds up to a total of 22 symbols from strobe to SFD signal.
     77           *
     78           *  Since 22 symbols spans more than a backoff (20 symbols) the modulus operation is used
     79           *  to find the symbol offset which is 2 symbols.
     80           *
     81           *  This math is derived formally via the pre-processor.
     82           */
     83          #define SYMBOLS_FROM_STROBE_TO_PREAMBLE   12 /* from datasheet */
     84          #define SYMBOLS_FROM_PREAMBLE_TO_SFD      (MAC_SPEC_PREAMBLE_FIELD_LENGTH + MAC_SPEC_SFD_FIELD_LENGTH)
     85          #define SYMBOLS_FROM_STROBE_TO_SFD        (SYMBOLS_FROM_STROBE_TO_PREAMBLE + SYMBOLS_FROM_PREAMBLE_TO_SFD)
     86          #define SYMBOLS_EXPECTED_AT_SFD           (SYMBOLS_FROM_STROBE_TO_SFD % MAC_A_UNIT_BACKOFF_PERIOD)
     87          
     88          /* after all that formal math, make sure the result is as expected */
     89          #if (SYMBOLS_EXPECTED_AT_SFD != 2)
     90          #error "ERROR! Internal problem with pre-processor math of slotted alignment."
     91          #endif
     92          
     93          
     94          /*
     95           *  The expected SFD signal occurs at the symbol offset *plus* a small internal propagation delay
     96           *  internal to the radio.  This delay is given as the sum of a receive side delay and a transmit
     97           *  side delay.  When this delay is subtracted from the internal timer, the internal time base
     98           *  actually becomes the actual receive time *minus* the transmit delay.  This works out though.
     99           *  The transmit logic does *not* take into account this delay.  Since the timer is skewed by the
    100           *  transmit delay already, the transmits go out precisely on time.
    101           */
    102          #define TIMER_TICKS_EXPECTED_AT_SFD   ((SYMBOLS_EXPECTED_AT_SFD * MAC_RADIO_TIMER_TICKS_PER_SYMBOL()) \
    103                                                    + RX_TX_PROP_DELAY_AVG_TIMER_TICKS)
    104          
    105          
    106          /* ------------------------------------------------------------------------------------------------
    107           *                                         Local Variables
    108           * ------------------------------------------------------------------------------------------------
    109           */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    110          static uint32 backoffTimerRollover;
   \                     ??backoffTimerRollover:
   \   000000                DS 4

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    111          static uint32 backoffTimerTrigger;
   \                     ??backoffTimerTrigger:
   \   000000                DS 4

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    112          static uint8 compareState;
   \                     ??compareState:
   \   000000                DS 1
    113          
    114          
    115          /**************************************************************************************************
    116           * @fn          macBackoffTimerInit
    117           *
    118           * @brief       Intializes backoff timer.
    119           *
    120           * @param       none
    121           *
    122           * @return      none
    123           **************************************************************************************************
    124           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    125          void macBackoffTimerInit(void)
   \                     macBackoffTimerInit:
    126          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    127            compareState = COMPARE_STATE_ROLLOVER;
   \   000005   7401         MOV     A,#0x1
   \   000007   90....       MOV     DPTR,#??compareState
   \   00000A   F0           MOVX    @DPTR,A
    128            MAC_RADIO_BACKOFF_SET_COUNT(0);
   \   00000B                ; Setup parameters for call to function macMcuOverflowSetCount
   \   00000B   90....       MOV     DPTR,#__Constant_0
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?L_MOV_X
   \   000013   AA..         MOV     R2,?V0 + 0
   \   000015   AB..         MOV     R3,?V0 + 1
   \   000017   AC..         MOV     R4,?V0 + 2
   \   000019   AD..         MOV     R5,?V0 + 3
   \   00001B   90....       MOV     DPTR,#(macMcuOverflowSetCount & 0xffff)
   \   00001E   74..         MOV     A,#((macMcuOverflowSetCount >> 16) & 0xff)
   \   000020   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    129            macBackoffTimerSetRollover(MAC_BACKOFF_TIMER_DEFAULT_ROLLOVER);
   \   000023                ; Setup parameters for call to function macBackoffTimerSetRollover
   \   000023   90....       MOV     DPTR,#__Constant_c0000
   \   000026   78..         MOV     R0,#?V0 + 0
   \   000028   12....       LCALL   ?L_MOV_X
   \   00002B   AA..         MOV     R2,?V0 + 0
   \   00002D   AB..         MOV     R3,?V0 + 1
   \   00002F   AC..         MOV     R4,?V0 + 2
   \   000031   AD..         MOV     R5,?V0 + 3
   \   000033   90....       MOV     DPTR,#(macBackoffTimerSetRollover & 0xffff)
   \   000036   74..         MOV     A,#((macBackoffTimerSetRollover >> 16) & 0xff)
   \   000038   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    130            MAC_RADIO_BACKOFF_COMPARE_CLEAR_INTERRUPT();
   \   00003B   75C3C3       MOV     0xc3,#-0x3d
    131            MAC_RADIO_BACKOFF_COMPARE_ENABLE_INTERRUPT();
   \   00003E                ; Setup parameters for call to function macMcuOrT2PEROF2
   \   00003E   7920         MOV     R1,#0x20
   \   000040   90....       MOV     DPTR,#(macMcuOrT2PEROF2 & 0xffff)
   \   000043   74..         MOV     A,#((macMcuOrT2PEROF2 >> 16) & 0xff)
   \   000045   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    132          }
   \   000048   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    133          
    134          
    135          /**************************************************************************************************
    136           * @fn          macBackoffTimerReset
    137           *
    138           * @brief       Resets backoff timer.
    139           *
    140           * @param       none
    141           *
    142           * @return      none
    143           **************************************************************************************************
    144           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    145          void macBackoffTimerReset(void)
   \                     macBackoffTimerReset:
    146          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    147            MAC_RADIO_BACKOFF_COMPARE_DISABLE_INTERRUPT();
   \   000004                ; Setup parameters for call to function macMcuAndT2PEROF2
   \   000004   79DF         MOV     R1,#-0x21
   \   000006   90....       MOV     DPTR,#(macMcuAndT2PEROF2 & 0xffff)
   \   000009   74..         MOV     A,#((macMcuAndT2PEROF2 >> 16) & 0xff)
   \   00000B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    148            macBackoffTimerInit();
   \   00000E                ; Setup parameters for call to function macBackoffTimerInit
   \   00000E   90....       MOV     DPTR,#(macBackoffTimerInit & 0xffff)
   \   000011   74..         MOV     A,#((macBackoffTimerInit >> 16) & 0xff)
   \   000013   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    149          }
   \   000016   D083         POP     DPH
   \   000018   D082         POP     DPL
   \   00001A   02....       LJMP    ?BRET
    150          
    151          
    152          /**************************************************************************************************
    153           * @fn          macBackoffTimerSetRollover
    154           *
    155           * @brief       Set rollover count of backoff timer.
    156           *
    157           * @param       rolloverBackoff - backoff count where count is reset to zero
    158           *
    159           * @return      none
    160           **************************************************************************************************
    161           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    162          void macBackoffTimerSetRollover(uint32 rolloverBackoff)
   \                     macBackoffTimerSetRollover:
    163          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
    164            halIntState_t  s;
    165          
    166            MAC_ASSERT(rolloverBackoff > MAC_RADIO_BACKOFF_COUNT());  /* rollover value must be greater than count */
   \   00000D                ; Setup parameters for call to function macMcuOverflowCount
   \   00000D   90....       MOV     DPTR,#(macMcuOverflowCount & 0xffff)
   \   000010   74..         MOV     A,#((macMcuOverflowCount >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000015   8A..         MOV     ?V0 + 4,R2
   \   000017   8B..         MOV     ?V0 + 5,R3
   \   000019   8C..         MOV     ?V0 + 6,R4
   \   00001B   8D..         MOV     ?V0 + 7,R5
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   79..         MOV     R1,#?V0 + 4
   \   000021   12....       LCALL   ?UL_GT
   \   000024   4008         JC      ??macBackoffTimerSetRollover_0
   \   000026                ; Setup parameters for call to function halAssertHandler
   \   000026   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000029   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   00002B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    167          
    168            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macBackoffTimerSetRollover_0:
   \   00002E   A2AF         MOV     C,0xa8.7
   \   000030   E4           CLR     A
   \   000031   92E0         MOV     0xE0 /* A   */.0,C
   \   000033   FE           MOV     R6,A
   \   000034   C2AF         CLR     0xa8.7
    169            backoffTimerRollover = rolloverBackoff;
   \   000036   90....       MOV     DPTR,#??backoffTimerRollover
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?L_MOV_TO_X
    170            MAC_RADIO_BACKOFF_SET_COMPARE(rolloverBackoff);
   \   00003E                ; Setup parameters for call to function macMcuOverflowSetCompare
   \   00003E   02....       LJMP    ?Subroutine2 & 0xFFFF
    171            HAL_EXIT_CRITICAL_SECTION(s);
    172          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   AC..         MOV     R4,?V0 + 2
   \   000006   AD..         MOV     R5,?V0 + 3
   \   000008   90....       MOV     DPTR,#(macMcuOverflowSetCompare & 0xffff)
   \   00000B   74..         MOV     A,#((macMcuOverflowSetCompare >> 16) & 0xff)
   \                     ??Subroutine2_0:
   \   00000D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000010   EE           MOV     A,R6
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   92AF         MOV     0xa8.7,C
   \                     ??Subroutine2_1:
   \   000015   7F08         MOV     R7,#0x8
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA
    173          
    174          
    175          /**************************************************************************************************
    176           * @fn          macBackoffTimerSetCount
    177           *
    178           * @brief       Sets the count of the backoff timer.
    179           *
    180           * @param       backoff - new count
    181           *
    182           * @return      none
    183           **************************************************************************************************
    184           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    185          void macBackoffTimerSetCount(uint32 backoff)
   \                     macBackoffTimerSetCount:
    186          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
    187            halIntState_t  s;
    188          
    189            MAC_ASSERT(compareState == COMPARE_STATE_ROLLOVER);   /* trigger cannot be active if changing count */
   \   00000D   90....       MOV     DPTR,#??compareState
   \   000010   E0           MOVX    A,@DPTR
   \   000011   6401         XRL     A,#0x1
   \   000013   6008         JZ      ??macBackoffTimerSetCount_0
   \   000015                ; Setup parameters for call to function halAssertHandler
   \   000015   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000018   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   00001A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    190            MAC_ASSERT(backoff < backoffTimerRollover);  /* count must be less than rollover value */
   \                     ??macBackoffTimerSetCount_0:
   \   00001D   90....       MOV     DPTR,#??backoffTimerRollover
   \   000020   78..         MOV     R0,#?V0 + 4
   \   000022   12....       LCALL   ?L_MOV_X
   \   000025   78..         MOV     R0,#?V0 + 4
   \   000027   79..         MOV     R1,#?V0 + 0
   \   000029   12....       LCALL   ?UL_GT
   \   00002C   4008         JC      ??macBackoffTimerSetCount_1
   \   00002E                ; Setup parameters for call to function halAssertHandler
   \   00002E   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000031   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000033   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    191          
    192            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macBackoffTimerSetCount_1:
   \   000036   A2AF         MOV     C,0xa8.7
   \   000038   E4           CLR     A
   \   000039   92E0         MOV     0xE0 /* A   */.0,C
   \   00003B   FE           MOV     R6,A
   \   00003C   C2AF         CLR     0xa8.7
    193            MAC_RADIO_BACKOFF_SET_COUNT(backoff);
   \   00003E                ; Setup parameters for call to function macMcuOverflowSetCount
   \   00003E   AA..         MOV     R2,?V0 + 0
   \   000040   AB..         MOV     R3,?V0 + 1
   \   000042   AC..         MOV     R4,?V0 + 2
   \   000044   AD..         MOV     R5,?V0 + 3
   \   000046   90....       MOV     DPTR,#(macMcuOverflowSetCount & 0xffff)
   \   000049   74..         MOV     A,#((macMcuOverflowSetCount >> 16) & 0xff)
   \   00004B   80..         SJMP    ??Subroutine2_0
    194            HAL_EXIT_CRITICAL_SECTION(s);
    195          }
    196          
    197          
    198          /**************************************************************************************************
    199           * @fn          macBackoffTimerCount
    200           *
    201           * @brief       Returns the current backoff count.
    202           *
    203           * @param       none
    204           *
    205           * @return      current backoff count
    206           **************************************************************************************************
    207           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    208          uint32 macBackoffTimerCount(void)
   \                     macBackoffTimerCount:
    209          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    210            halIntState_t  s;
    211            uint32 backoffCount;
    212          
    213            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   92E0         MOV     0xE0 /* A   */.0,C
   \   00000A   FE           MOV     R6,A
   \   00000B   C2AF         CLR     0xa8.7
    214            backoffCount = MAC_RADIO_BACKOFF_COUNT();
   \   00000D                ; Setup parameters for call to function macMcuOverflowCount
   \   00000D   90....       MOV     DPTR,#(macMcuOverflowCount & 0xffff)
   \   000010   74..         MOV     A,#((macMcuOverflowCount >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000015   8A..         MOV     ?V0 + 0,R2
   \   000017   8B..         MOV     ?V0 + 1,R3
   \   000019   8C..         MOV     ?V0 + 2,R4
   \   00001B   8D..         MOV     ?V0 + 3,R5
    215            HAL_EXIT_CRITICAL_SECTION(s);
   \   00001D   EE           MOV     A,R6
   \   00001E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000020   92AF         MOV     0xa8.7,C
    216            
    217          #ifdef MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER
    218            /*
    219             *  Extra processing is required if the radio has a special hardware overflow
    220             *  count feature.  Unfortunately this feature does not provide for setting a
    221             *  rollover value.  This must be done manually.
    222             *
    223             *  This means there is a small window in time when reading the hardware count
    224             *  will be inaccurate.  It's possible it could be one more than the allowable
    225             *  count.  This happens if the count has just incremented beyond the maximum
    226             *  and is queried before the ISR has a chance to run and reset the backoff
    227             *  count back to zero.  (Pure software implementation of backoff count does
    228             *  not have this problem.)
    229             *
    230             *  To solve this, before returning a value for the backoff count, the value
    231             *  must be tested to see if it is beyond the maximum value.  If so, a rollover
    232             *  interrupt that will set backoff count to zero is imminent.  In that case,
    233             *  the correct backoff count of zero is returned.
    234             */
    235            if (backoffCount >= backoffTimerRollover)
   \   000022   90....       MOV     DPTR,#??backoffTimerRollover
   \   000025   78..         MOV     R0,#?V0 + 4
   \   000027   12....       LCALL   ?L_MOV_X
   \   00002A   78..         MOV     R0,#?V0 + 4
   \   00002C   79..         MOV     R1,#?V0 + 0
   \   00002E   12....       LCALL   ?UL_GT
   \   000031   4008         JC      ??macBackoffTimerCount_0
    236            {
    237              return(0);
   \   000033   7A00         MOV     R2,#0x0
   \   000035   7B00         MOV     R3,#0x0
   \   000037   7C00         MOV     R4,#0x0
   \   000039   7D00         MOV     R5,#0x0
    238            }
    239          #endif
    240            
    241            return(backoffCount);
   \                     ??macBackoffTimerCount_0:
   \   00003B   80..         SJMP    ??Subroutine2_1
    242          }
    243          
    244          
    245          /**************************************************************************************************
    246           * @fn          macBackoffTimerCapture
    247           *
    248           * @brief       Returns the most recently captured backoff count
    249           *
    250           * @param       none
    251           *
    252           * @return      last backoff count that was captured
    253           **************************************************************************************************
    254           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    255          uint32 macBackoffTimerCapture(void)
   \                     macBackoffTimerCapture:
    256          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    257            halIntState_t  s;
    258            uint32 backoffCapture;
    259          
    260            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   92E0         MOV     0xE0 /* A   */.0,C
   \   00000A   FE           MOV     R6,A
   \   00000B   C2AF         CLR     0xa8.7
    261            backoffCapture = MAC_RADIO_BACKOFF_CAPTURE();
   \   00000D                ; Setup parameters for call to function macMcuOverflowCapture
   \   00000D   90....       MOV     DPTR,#(macMcuOverflowCapture & 0xffff)
   \   000010   74..         MOV     A,#((macMcuOverflowCapture >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000015   8A..         MOV     ?V0 + 0,R2
   \   000017   8B..         MOV     ?V0 + 1,R3
   \   000019   8C..         MOV     ?V0 + 2,R4
   \   00001B   8D..         MOV     ?V0 + 3,R5
    262            HAL_EXIT_CRITICAL_SECTION(s);
   \   00001D   EE           MOV     A,R6
   \   00001E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000020   92AF         MOV     0xa8.7,C
    263          
    264          #ifdef MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER
    265            /*
    266             *  See other instance of this #ifdef for detailed comments.
    267             *  Those comments apply to the backoff capture value too.
    268             */
    269            if (backoffCapture >= backoffTimerRollover)
   \   000022   90....       MOV     DPTR,#??backoffTimerRollover
   \   000025   78..         MOV     R0,#?V0 + 4
   \   000027   12....       LCALL   ?L_MOV_X
   \   00002A   78..         MOV     R0,#?V0 + 4
   \   00002C   79..         MOV     R1,#?V0 + 0
   \   00002E   12....       LCALL   ?UL_GT
   \   000031   4008         JC      ??macBackoffTimerCapture_0
    270            {
    271              return(0);
   \   000033   7A00         MOV     R2,#0x0
   \   000035   7B00         MOV     R3,#0x0
   \   000037   7C00         MOV     R4,#0x0
   \   000039   7D00         MOV     R5,#0x0
    272            }
    273          #endif
    274            
    275            return(backoffCapture);
   \                     ??macBackoffTimerCapture_0:
   \   00003B   80..         SJMP    ??Subroutine2_1
    276          }
    277          
    278          
    279          /**************************************************************************************************
    280           * @fn          macBackoffTimerGetTrigger
    281           *
    282           * @brief       Returns the trigger set for the backoff timer.
    283           *
    284           * @param       none
    285           *
    286           * @return      backoff count of trigger
    287           **************************************************************************************************
    288           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    289          uint32 macBackoffTimerGetTrigger(void)
   \                     macBackoffTimerGetTrigger:
    290          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    291            return(backoffTimerTrigger);
   \   000005   90....       MOV     DPTR,#??backoffTimerTrigger
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?L_MOV_X
   \   00000D   AA..         MOV     R2,?V0 + 0
   \   00000F   AB..         MOV     R3,?V0 + 1
   \   000011   AC..         MOV     R4,?V0 + 2
   \   000013   AD..         MOV     R5,?V0 + 3
   \   000015   02....       LJMP    ?Subroutine1 & 0xFFFF
    292          }
    293          
    294          
    295          /**************************************************************************************************
    296           * @fn          macBackoffTimerSetTrigger
    297           *
    298           * @brief       Sets the trigger count for the backoff counter.  A callback is exectuted when
    299           *              the backoff count reaches the trigger
    300           *
    301           * @param       triggerBackoff - backoff count for new trigger
    302           *
    303           * @return      none
    304           **************************************************************************************************
    305           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    306          void macBackoffTimerSetTrigger(uint32 triggerBackoff)
   \                     macBackoffTimerSetTrigger:
    307          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
    308            halIntState_t  s;
    309          
    310            MAC_ASSERT(triggerBackoff < backoffTimerRollover); /* trigger backoff must be less than rollover backoff */
   \   00000D   90....       MOV     DPTR,#??backoffTimerRollover
   \   000010   78..         MOV     R0,#?V0 + 4
   \   000012   12....       LCALL   ?L_MOV_X
   \   000015   78..         MOV     R0,#?V0 + 4
   \   000017   79..         MOV     R1,#?V0 + 0
   \   000019   12....       LCALL   ?UL_GT
   \   00001C   4008         JC      ??macBackoffTimerSetTrigger_0
   \   00001E                ; Setup parameters for call to function halAssertHandler
   \   00001E   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000021   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000023   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    311          
    312            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macBackoffTimerSetTrigger_0:
   \   000026   A2AF         MOV     C,0xa8.7
   \   000028   E4           CLR     A
   \   000029   92E0         MOV     0xE0 /* A   */.0,C
   \   00002B   FE           MOV     R6,A
   \   00002C   C2AF         CLR     0xa8.7
    313            backoffTimerTrigger = triggerBackoff;
   \   00002E   90....       MOV     DPTR,#??backoffTimerTrigger
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?L_MOV_TO_X
    314            if (triggerBackoff > MAC_RADIO_BACKOFF_COUNT())
   \   000036                ; Setup parameters for call to function macMcuOverflowCount
   \   000036   90....       MOV     DPTR,#(macMcuOverflowCount & 0xffff)
   \   000039   74..         MOV     A,#((macMcuOverflowCount >> 16) & 0xff)
   \   00003B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003E   8A..         MOV     ?V0 + 4,R2
   \   000040   8B..         MOV     ?V0 + 5,R3
   \   000042   8C..         MOV     ?V0 + 6,R4
   \   000044   8D..         MOV     ?V0 + 7,R5
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   79..         MOV     R1,#?V0 + 4
   \   00004A   12....       LCALL   ?UL_GT
   \   00004D   5008         JNC     ??macBackoffTimerSetTrigger_1
    315            {
    316              compareState = COMPARE_STATE_TRIGGER;
   \   00004F   7402         MOV     A,#0x2
   \   000051   90....       MOV     DPTR,#??compareState
   \   000054   F0           MOVX    @DPTR,A
    317              MAC_RADIO_BACKOFF_SET_COMPARE(triggerBackoff);
   \   000055                ; Setup parameters for call to function macMcuOverflowSetCompare
   \   000055   8016         SJMP    ??macBackoffTimerSetTrigger_2
    318            }
    319            else
    320            {
    321              if (triggerBackoff == 0)
   \                     ??macBackoffTimerSetTrigger_1:
   \   000057   90....       MOV     DPTR,#__Constant_0
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?L_EQ_X
   \   00005F   7004         JNZ     ??macBackoffTimerSetTrigger_3
    322              {
    323                compareState = COMPARE_STATE_ROLLOVER_AND_TRIGGER;
   \   000061   7403         MOV     A,#0x3
   \   000063   8002         SJMP    ??macBackoffTimerSetTrigger_4
    324              }
    325              else
    326              {
    327                compareState = COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER;
   \                     ??macBackoffTimerSetTrigger_3:
   \   000065   7405         MOV     A,#0x5
   \                     ??macBackoffTimerSetTrigger_4:
   \   000067   12....       LCALL   ??Subroutine0_0 & 0xFFFF
    328              }
    329              MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerRollover);
   \                     ??CrossCallReturnLabel_2:
   \   00006A   12....       LCALL   ?L_MOV_X
   \                     ??macBackoffTimerSetTrigger_2:
   \   00006D   02....       LJMP    ?Subroutine2 & 0xFFFF
    330            }
    331            HAL_EXIT_CRITICAL_SECTION(s);
    332          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7401         MOV     A,#0x1
   \                     ??Subroutine0_0:
   \   000002   90....       MOV     DPTR,#??compareState
   \   000005   F0           MOVX    @DPTR,A
   \   000006                ; Setup parameters for call to function macMcuOverflowSetCompare
   \   000006                ; Setup parameters for call to function macMcuOverflowSetCompare
   \   000006                ; Setup parameters for call to function macMcuOverflowSetCompare
   \   000006   90....       MOV     DPTR,#??backoffTimerRollover
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET
    333          
    334          
    335          /**************************************************************************************************
    336           * @fn          macBackoffTimerCancelTrigger
    337           *
    338           * @brief       Cancels the trigger for the backoff counter.
    339           *
    340           * @param       none
    341           *
    342           * @return      none
    343           **************************************************************************************************
    344           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    345          void macBackoffTimerCancelTrigger(void)
   \                     macBackoffTimerCancelTrigger:
    346          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    347            halIntState_t  s;
    348          
    349            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   92E0         MOV     0xE0 /* A   */.0,C
   \   00000A   FE           MOV     R6,A
   \   00000B   C2AF         CLR     0xa8.7
    350            compareState = COMPARE_STATE_ROLLOVER;
   \   00000D   12....       LCALL   ?Subroutine0 & 0xFFFF
    351            MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerRollover);
   \                     ??CrossCallReturnLabel_0:
   \   000010   12....       LCALL   ?L_MOV_X
   \   000013   AA..         MOV     R2,?V0 + 0
   \   000015   AB..         MOV     R3,?V0 + 1
   \   000017   AC..         MOV     R4,?V0 + 2
   \   000019   AD..         MOV     R5,?V0 + 3
   \   00001B   90....       MOV     DPTR,#(macMcuOverflowSetCompare & 0xffff)
   \   00001E   74..         MOV     A,#((macMcuOverflowSetCompare >> 16) & 0xff)
   \   000020   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    352            HAL_EXIT_CRITICAL_SECTION(s);
   \   000023   EE           MOV     A,R6
   \   000024   A2E0         MOV     C,0xE0 /* A   */.0
   \   000026   92AF         MOV     0xa8.7,C
    353          }
   \   000028                REQUIRE ?Subroutine1
   \   000028                ; // Fall through to label ?Subroutine1
    354          
    355          
    356          /**************************************************************************************************
    357           * @fn          macBackoffTimerRealign
    358           *
    359           * @brief       
    360           *
    361           *  Realignment is accomplished by adjusting the internal time base to align with the expected
    362           *  reception time of an incoming frame.  The difference between the expected reception time and
    363           *  the actual reception time is computed and this difference is used to adjust the hardware
    364           *  timer count and backoff count.
    365           *
    366           *  The realignment is based on the SFD signal for the incoming frame.  The timer is aligned
    367           *  by adjusting it with the difference between the expected SFD time and the actual SFD time.
    368           *
    369           * @param       none
    370           *
    371           * @return      none
    372           **************************************************************************************************
    373           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    374          int32 macBackoffTimerRealign(macRx_t *pMsg)
   \                     macBackoffTimerRealign:
    375          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    376            uint16 timerDelayTicks;
    377            int32 backoffDelta;
    378            int32 backoffCount;
    379          
    380            MAC_ASSERT_STATEMENT( MAC_RADIO_FORCE_TX_DONE_IF_PENDING(); ); /* force TX to complete if just pending */
   \   00000E                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   00000E   90....       MOV     DPTR,#(macCspForceTxDoneIfPending & 0xffff)
   \   000011   74..         MOV     A,#((macCspForceTxDoneIfPending >> 16) & 0xff)
   \   000013   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    381            MAC_ASSERT(!MAC_TX_IS_PHYSICALLY_ACTIVE()); /* realignment during actual transmit corrupts timing */
   \   000016   90....       MOV     DPTR,#macTxActive
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   A2E7         MOV     C,0xE0 /* A   */.7
   \   00001C   5008         JNC     ??macBackoffTimerRealign_0
   \   00001E                ; Setup parameters for call to function halAssertHandler
   \   00001E   90....       MOV     DPTR,#(halAssertHandler & 0xffff)
   \   000021   74..         MOV     A,#((halAssertHandler >> 16) & 0xff)
   \   000023   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    382          
    383            /*-------------------------------------------------------------------------------
    384             *  Calculate the delta backoff difference between expected backoff count,
    385             *  which is zero, and the backoff count of the received frame.
    386             */
    387          
    388            /* since expected receive time is zero, the delta is simply the receive time */
    389            backoffDelta = pMsg->mac.timestamp;
   \                     ??macBackoffTimerRealign_0:
   \   000026   EE           MOV     A,R6
   \   000027   2424         ADD     A,#0x24
   \   000029   F582         MOV     DPL,A
   \   00002B   EF           MOV     A,R7
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F583         MOV     DPH,A
   \   000030   78..         MOV     R0,#?V0 + 4
   \   000032   12....       LCALL   ?L_MOV_X
    390          
    391            /* if the frame was received more than halfway to the rollover count, use a negative delta value */
    392            if (((uint32) backoffDelta) > (backoffTimerRollover / 2))
   \   000035   90....       MOV     DPTR,#??backoffTimerRollover
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?L_MOV_X
   \   00003D   7401         MOV     A,#0x1
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?UL_SHR
   \   000044   78..         MOV     R0,#?V0 + 4
   \   000046   79..         MOV     R1,#?V0 + 0
   \   000048   12....       LCALL   ?UL_GT
   \   00004B   5008         JNC     ??macBackoffTimerRealign_1
    393            {
    394              backoffDelta = backoffDelta - backoffTimerRollover;    /* result will be negative */
   \   00004D   90....       MOV     DPTR,#??backoffTimerRollover
   \   000050   78..         MOV     R0,#?V0 + 4
   \   000052   12....       LCALL   ?L_SUB_X
    395            }
    396          
    397            /*-------------------------------------------------------------------------------
    398             *  Calculate the number of timer ticks to delay that will align the internal
    399             *  time base with the received frame.
    400             */
    401          
    402            /* retrieve the timer count when frame was received */
    403            timerDelayTicks = pMsg->mac.timestamp2;
   \                     ??macBackoffTimerRealign_1:
   \   000055   EE           MOV     A,R6
   \   000056   2428         ADD     A,#0x28
   \   000058   F582         MOV     DPL,A
   \   00005A   EF           MOV     A,R7
   \   00005B   3400         ADDC    A,#0x0
   \   00005D   F583         MOV     DPH,A
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FE           MOV     R6,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FF           MOV     R7,A
    404          
    405            /*
    406             *  Subtract the expected SFD time from the actual SFD time to find the needed
    407             *  timer adjustment. If subtracting the offset would result in a negative value,
    408             *  the tick delay must wrap around.
    409             */
    410            if (timerDelayTicks >= TIMER_TICKS_EXPECTED_AT_SFD)
   \   000064   C3           CLR     C
   \   000065   EE           MOV     A,R6
   \   000066   9466         SUBB    A,#0x66
   \   000068   EF           MOV     A,R7
   \   000069   9404         SUBB    A,#0x4
   \   00006B   EE           MOV     A,R6
   \   00006C   4009         JC      ??macBackoffTimerRealign_2
    411            {
    412              /* since delay count is greater than or equal to offset, subtract it directly */
    413              timerDelayTicks = timerDelayTicks - TIMER_TICKS_EXPECTED_AT_SFD;
   \   00006E   249A         ADD     A,#-0x66
   \   000070   FE           MOV     R6,A
   \   000071   EF           MOV     A,R7
   \   000072   34FB         ADDC    A,#-0x5
   \   000074   FF           MOV     R7,A
   \   000075   800F         SJMP    ??macBackoffTimerRealign_3
    414            }
    415            else
    416            {
    417              /*
    418               *  The expected time is greater that actualy time so it cannot be subtracted directly.
    419               *  The tick count per backoff is added to wrap around within the backoff.
    420               *  Since a wrap around did happen, the backoff delta is adjusted by one.
    421               */
    422              timerDelayTicks = timerDelayTicks - TIMER_TICKS_EXPECTED_AT_SFD + MAC_RADIO_TIMER_TICKS_PER_BACKOFF();
   \                     ??macBackoffTimerRealign_2:
   \   000077   249A         ADD     A,#-0x66
   \   000079   FE           MOV     R6,A
   \   00007A   EF           MOV     A,R7
   \   00007B   3423         ADDC    A,#0x23
   \   00007D   FF           MOV     R7,A
    423              backoffDelta--;
   \   00007E   90....       MOV     DPTR,#__Constant_ffffffff
   \   000081   78..         MOV     R0,#?V0 + 4
   \   000083   12....       LCALL   ?L_ADD_X
    424            }
    425          
    426            /*-------------------------------------------------------------------------------
    427             *  Calculate the new backoff count.
    428             */
    429          
    430            backoffCount = MAC_RADIO_BACKOFF_COUNT() - backoffDelta;
   \                     ??macBackoffTimerRealign_3:
   \   000086                ; Setup parameters for call to function macMcuOverflowCount
   \   000086   90....       MOV     DPTR,#(macMcuOverflowCount & 0xffff)
   \   000089   74..         MOV     A,#((macMcuOverflowCount >> 16) & 0xff)
   \   00008B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00008E   8A..         MOV     ?V0 + 0,R2
   \   000090   8B..         MOV     ?V0 + 1,R3
   \   000092   8C..         MOV     ?V0 + 2,R4
   \   000094   8D..         MOV     ?V0 + 3,R5
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   79..         MOV     R1,#?V0 + 4
   \   00009A   12....       LCALL   ?L_SUB
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   78..         MOV     R0,#?V0 + 0
   \   0000A5   12....       LCALL   ?L_MOV_TO_X
    431          
    432            if (backoffCount >= ((int32) backoffTimerRollover))
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   C082         PUSH    DPL
   \   0000B0   C083         PUSH    DPH
   \   0000B2   90....       MOV     DPTR,#??backoffTimerRollover
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?L_MOV_X
   \   0000BA   D083         POP     DPH
   \   0000BC   D082         POP     DPL
   \   0000BE   78..         MOV     R0,#?V0 + 0
   \   0000C0   12....       LCALL   ?SL_GT_X
   \   0000C3   85..82       MOV     DPL,?XSP + 0
   \   0000C6   85..83       MOV     DPH,?XSP + 1
   \   0000C9   4007         JC      ??macBackoffTimerRealign_4
    433            {
    434              backoffCount -= backoffTimerRollover;
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?L_SUB_FROM_X
   \   0000D0   802A         SJMP    ??macBackoffTimerRealign_5
    435            }
    436            else if (backoffCount < 0)
   \                     ??macBackoffTimerRealign_4:
   \   0000D2   C082         PUSH    DPL
   \   0000D4   C083         PUSH    DPH
   \   0000D6   90....       MOV     DPTR,#__Constant_0
   \   0000D9   78..         MOV     R0,#?V0 + 0
   \   0000DB   12....       LCALL   ?L_MOV_X
   \   0000DE   D083         POP     DPH
   \   0000E0   D082         POP     DPL
   \   0000E2   78..         MOV     R0,#?V0 + 0
   \   0000E4   12....       LCALL   ?SL_GT_X
   \   0000E7   5013         JNC     ??macBackoffTimerRealign_5
    437            {
    438              backoffCount += backoffTimerRollover;
   \   0000E9   90....       MOV     DPTR,#??backoffTimerRollover
   \   0000EC   78..         MOV     R0,#?V0 + 0
   \   0000EE   12....       LCALL   ?L_MOV_X
   \   0000F1   85..82       MOV     DPL,?XSP + 0
   \   0000F4   85..83       MOV     DPH,?XSP + 1
   \   0000F7   78..         MOV     R0,#?V0 + 0
   \   0000F9   12....       LCALL   ?L_ADD_TO_X
    439            }
    440          
    441            MAC_RADIO_TIMER_FORCE_DELAY(timerDelayTicks);
   \                     ??macBackoffTimerRealign_5:
   \   0000FC   EE           MOV     A,R6
   \   0000FD   F5A6         MOV     0xa6,A
   \   0000FF   EF           MOV     A,R7
   \   000100   F5A7         MOV     0xa7,A
    442            MAC_RADIO_BACKOFF_SET_COUNT(backoffCount);
   \   000102                ; Setup parameters for call to function macMcuOverflowSetCount
   \   000102   85..82       MOV     DPL,?XSP + 0
   \   000105   85..83       MOV     DPH,?XSP + 1
   \   000108   78..         MOV     R0,#?V0 + 0
   \   00010A   12....       LCALL   ?L_MOV_X
   \   00010D   AA..         MOV     R2,?V0 + 0
   \   00010F   AB..         MOV     R3,?V0 + 1
   \   000111   AC..         MOV     R4,?V0 + 2
   \   000113   AD..         MOV     R5,?V0 + 3
   \   000115   90....       MOV     DPTR,#(macMcuOverflowSetCount & 0xffff)
   \   000118   74..         MOV     A,#((macMcuOverflowSetCount >> 16) & 0xff)
   \   00011A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    443          
    444            return(backoffDelta);
   \   00011D   AA..         MOV     R2,?V0 + 4
   \   00011F   AB..         MOV     R3,?V0 + 5
   \   000121   AC..         MOV     R4,?V0 + 6
   \   000123   AD..         MOV     R5,?V0 + 7
   \   000125   7404         MOV     A,#0x4
   \   000127   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012A   02....       LJMP    ??Subroutine2_1 & 0xFFFF
    445          }
    446          
    447          
    448          /**************************************************************************************************
    449           * @fn          macBackoffTimerCompareIsr
    450           *
    451           * @brief       Interrupt service routine that fires when the backoff count is equal
    452           *              to the trigger count.
    453           *
    454           * @param       none
    455           *
    456           * @return      none
    457           **************************************************************************************************
    458           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    459          void macBackoffTimerCompareIsr(void)
   \                     macBackoffTimerCompareIsr:
    460          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    461            uint8 oldState;
    462            halIntState_t  s;
    463          
    464            HAL_ENTER_CRITICAL_SECTION(s);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   92E0         MOV     0xE0 /* A   */.0,C
   \   00000A   FE           MOV     R6,A
   \   00000B   C2AF         CLR     0xa8.7
    465            oldState = compareState;
   \   00000D   90....       MOV     DPTR,#??compareState
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FF           MOV     R7,A
    466          
    467            /* if compare is a rollover, set count to zero */
    468            if (oldState & COMPARE_STATE_ROLLOVER_BV)
   \   000012   A2E0         MOV     C,0xE0 /* A   */.0
   \   000014   5020         JNC     ??macBackoffTimerCompareIsr_0
    469            {
    470              MAC_RADIO_BACKOFF_SET_COUNT(0);
   \   000016                ; Setup parameters for call to function macMcuOverflowSetCount
   \   000016   90....       MOV     DPTR,#__Constant_0
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?L_MOV_X
   \   00001E   AA..         MOV     R2,?V0 + 0
   \   000020   AB..         MOV     R3,?V0 + 1
   \   000022   AC..         MOV     R4,?V0 + 2
   \   000024   AD..         MOV     R5,?V0 + 3
   \   000026   90....       MOV     DPTR,#(macMcuOverflowSetCount & 0xffff)
   \   000029   74..         MOV     A,#((macMcuOverflowSetCount >> 16) & 0xff)
   \   00002B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    471              macBackoffTimerRolloverCallback();
   \   00002E                ; Setup parameters for call to function macBackoffTimerRolloverCallback
   \   00002E   90....       MOV     DPTR,#(macBackoffTimerRolloverCallback & 0xffff)
   \   000031   74..         MOV     A,#((macBackoffTimerRolloverCallback >> 16) & 0xff)
   \   000033   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    472            }
    473          
    474            /* if compare is a trigger, reset for rollover and run the trigger callback */
    475            if (oldState & COMPARE_STATE_TRIGGER_BV)
   \                     ??macBackoffTimerCompareIsr_0:
   \   000036   EF           MOV     A,R7
   \   000037   A2E1         MOV     C,0xE0 /* A   */.1
   \   000039   5025         JNC     ??macBackoffTimerCompareIsr_1
    476            {
    477              compareState = COMPARE_STATE_ROLLOVER;
   \   00003B   12....       LCALL   ?Subroutine0 & 0xFFFF
    478              MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerRollover);
   \                     ??CrossCallReturnLabel_1:
   \   00003E   12....       LCALL   ?L_MOV_X
   \   000041   AA..         MOV     R2,?V0 + 0
   \   000043   AB..         MOV     R3,?V0 + 1
   \   000045   AC..         MOV     R4,?V0 + 2
   \   000047   AD..         MOV     R5,?V0 + 3
   \   000049   90....       MOV     DPTR,#(macMcuOverflowSetCompare & 0xffff)
   \   00004C   74..         MOV     A,#((macMcuOverflowSetCompare >> 16) & 0xff)
   \   00004E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    479              HAL_EXIT_CRITICAL_SECTION(s);
   \   000051   EE           MOV     A,R6
   \   000052   A2E0         MOV     C,0xE0 /* A   */.0
   \   000054   92AF         MOV     0xa8.7,C
    480              macBackoffTimerTriggerCallback();
   \   000056                ; Setup parameters for call to function macBackoffTimerTriggerCallback
   \   000056   90....       MOV     DPTR,#(macBackoffTimerTriggerCallback & 0xffff)
   \   000059   74..         MOV     A,#((macBackoffTimerTriggerCallback >> 16) & 0xff)
   \   00005B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005E   8028         SJMP    ??macBackoffTimerCompareIsr_2
    481            }
    482            else if (oldState == COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER)
   \                     ??macBackoffTimerCompareIsr_1:
   \   000060   7405         MOV     A,#0x5
   \   000062   6F           XRL     A,R7
   \   000063   701E         JNZ     ??macBackoffTimerCompareIsr_3
    483            {
    484              compareState = COMPARE_STATE_TRIGGER;
   \   000065   7402         MOV     A,#0x2
   \   000067   90....       MOV     DPTR,#??compareState
   \   00006A   F0           MOVX    @DPTR,A
    485              MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerTrigger);
   \   00006B                ; Setup parameters for call to function macMcuOverflowSetCompare
   \   00006B   90....       MOV     DPTR,#??backoffTimerTrigger
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   12....       LCALL   ?L_MOV_X
   \   000073   AA..         MOV     R2,?V0 + 0
   \   000075   AB..         MOV     R3,?V0 + 1
   \   000077   AC..         MOV     R4,?V0 + 2
   \   000079   AD..         MOV     R5,?V0 + 3
   \   00007B   90....       MOV     DPTR,#(macMcuOverflowSetCompare & 0xffff)
   \   00007E   74..         MOV     A,#((macMcuOverflowSetCompare >> 16) & 0xff)
   \   000080   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    486              HAL_EXIT_CRITICAL_SECTION(s);
    487            }
    488            else
    489            {
    490              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macBackoffTimerCompareIsr_3:
   \   000083   EE           MOV     A,R6
   \   000084   A2E0         MOV     C,0xE0 /* A   */.0
   \   000086   92AF         MOV     0xa8.7,C
    491            }
    492          }
   \                     ??macBackoffTimerCompareIsr_2:
   \   000088   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     __Constant_0:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_0>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_0>`:
   \   000000   00000000     DD 0

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     __Constant_c0000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_c0000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_c0000>`:
   \   000000   00000C00     DD 786432

   \                                 In segment XDATA_I, align 1, keep-with-next
   \                     __Constant_ffffffff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_ffffffff>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_ffffffff>`:
   \   000000   FFFFFFFF     DD 4294967295

   \                                 In segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
    493          
    494          
    495          /**************************************************************************************************
    496          */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     macBackoffTimerCancelTrigger       0      0     12
       -> macMcuOverflowSetCompare      0      0     24
     macBackoffTimerCapture             0      0     16
       -> macMcuOverflowCapture         0      0     32
     macBackoffTimerCompareIsr          0      0     12
       -> macMcuOverflowSetCount        0      0     24
       -> macBackoffTimerRolloverCallback
                                        0      0     24
       -> macMcuOverflowSetCompare      0      0     24
       -> macBackoffTimerTriggerCallback
                                        0      0     24
       -> macMcuOverflowSetCompare      0      0     24
     macBackoffTimerCount               0      0     16
       -> macMcuOverflowCount           0      0     32
     macBackoffTimerGetTrigger          0      0     12
     macBackoffTimerInit                2      0     12
       -> macMcuOverflowSetCount        0      0     24
       -> macBackoffTimerSetRollover
                                        0      0     24
       -> macMcuOrT2PEROF2              0      0     24
     macBackoffTimerRealign             2      0     20
       -> macCspForceTxDoneIfPending
                                        0      0     40
       -> halAssertHandler              0      0     40
       -> macMcuOverflowCount           0      0     40
       -> macMcuOverflowSetCount        0      0     40
     macBackoffTimerReset               2      0      0
       -> macMcuAndT2PEROF2             4      0      0
       -> macBackoffTimerInit           4      0      0
     macBackoffTimerSetCount            0      0     16
       -> halAssertHandler              0      0     32
       -> halAssertHandler              0      0     32
       -> macMcuOverflowSetCount        0      0     32
     macBackoffTimerSetRollover         0      0     28
       -> macMcuOverflowCount           0      0     32
       -> halAssertHandler              0      0     32
       -> macMcuOverflowSetCompare      0      0     32
     macBackoffTimerSetTrigger          0      0     16
       -> halAssertHandler              0      0     32
       -> macMcuOverflowCount           0      0     32
       -> macMcuOverflowSetCompare      0      0     32
       -> macMcuOverflowSetCompare      0      0     32


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     T2TLD                             1
     T2THD                             1
     T2CNF                             1
     backoffTimerRollover              4
     backoffTimerTrigger               4
     compareState                      1
     macBackoffTimerInit              75
     ?Subroutine1                      5
     macBackoffTimerReset             29
     macBackoffTimerSetRollover       65
     ?Subroutine2                     26
     macBackoffTimerSetCount          77
     macBackoffTimerCount             61
     macBackoffTimerCapture           61
     macBackoffTimerGetTrigger        24
     macBackoffTimerSetTrigger       112
     ?Subroutine0                     12
     macBackoffTimerCancelTrigger     40
     macBackoffTimerRealign          301
     macBackoffTimerCompareIsr       139
     __Constant_0                      4
     ?<Initializer for __Constant_0>
                                       4
     __Constant_c0000                  4
     ?<Initializer for __Constant_c0000>
                                       4
     __Constant_ffffffff               4
     ?<Initializer for __Constant_ffffffff>
                                       4
     _A_IEN0                           1

 
 1 027 bytes in segment BANKED_CODE
     4 bytes in segment SFR_AN
    12 bytes in segment XDATA_I
    12 bytes in segment XDATA_ID
     9 bytes in segment XDATA_Z
 
 1 027 bytes of CODE  memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  4 bytes shared)
     9 bytes of XDATA memory (+ 12 bytes shared)

Errors: none
Warnings: none
