##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   24/Jan/2013  14:47:43 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\stack\nwk\nwk_globals.c                         #
#    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8 #
#                          wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR          #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DRTR_NWK -DBLINK_LEDS "-DCONST=const __code"  #
#                          -DGENERIC=__generic) -f                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCo #
#                          nfig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x0000080 #
#                          0 -DZDAPP_CONFIG_PAN_ID=0xFFFF                    #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\ -I                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\Source\ -I                 #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt\ #
#                           -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ #
#                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee200 #
#                          6-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2430DB\..\..\..\..\..\Components #
#                          \hal\include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª· #
#                          ¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 #
#                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ #
#                          ..\Components\hal\target\CC2430EB\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\osa #
#                          l\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ #
#                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 #
#                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Project #
#                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. #
#                          .\Components\osal\include\ -I                     #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\Î #
#                          ÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zig #
#                          Bee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zsta #
#                          ck\Samples\SampleApp\CC2430DB\..\..\..\..\..\Comp #
#                          onents\stack\nwk\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\sys\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ #
#                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zi #
#                          gBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Com #
#                          ponents\stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\zmac\f8w\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍ #
#                          øÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2 #
#                          006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁ #
#                          Ï\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ #
#                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\mac\high_level\ -I                      #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \low_level\srf03\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf03\single_chip #
#                          \ -D CC2430EB -D ZTOOL_P1 -D MT_TASK -lC          #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\ -lA            #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\RouterEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\stack\nwk\nwk_globals.c"                       #
#    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\nwk_globals.lst #
#    Object file        =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\Obj\nwk_globals.r51  #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\stack\nwk\nwk_globals.c
      1          /*********************************************************************
      2              Filename:       nwk_globals.c
      3              Revised:        $Date: 2007-05-14 17:34:18 -0700 (Mon, 14 May 2007) $
      4              Revision:       $Revision: 14296 $
      5          
      6              Description:
      7          
      8                  User definable Network Parameters.
      9          
     10              Notes:
     11          
     12              Copyright (c) 2006 by Texas Instruments, Inc.
     13              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     14              derivative works, modify, distribute, perform, display or sell this
     15              software and/or its documentation for any purpose is prohibited
     16              without the express written consent of Texas Instruments, Inc.
     17          *********************************************************************/
     18          
     19          /*********************************************************************
     20           * INCLUDES
     21           */
     22          #include "ZComdef.h"
     23          #include "OSAL.h"
     24          #include "AddrMgr.h"
     25          #include "AssocList.h"
     26          #include "BindingTable.h"
     27          #include "nwk_globals.h"
     28          #include "ssp.h"
     29          #include "rtg.h"
     30          #include "ZDConfig.h"
     31          #include "ZGlobals.h"
     32          
     33          /* HAL */
     34          #include "hal_lcd.h"
     35          
     36          /*********************************************************************
     37           * MACROS
     38           */
     39          
     40          /*********************************************************************
     41           * CONSTANTS
     42           */
     43          
     44          // Maximums for the data buffer queue
     45          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     46          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     47          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     48          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     49          
     50          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     51          // A known shortcoming is that when a message is enqueued as "hold" for a
     52          // sleeping device, the timer tick may have counted down to 1, so that msg
     53          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     54          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     55          // So the hold time will vary within this interval:
     56          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     57          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     58          #define NWK_INDIRECT_CNT_RTG_TMR    1  //ggg - need hours or days?
     59          // To hold msg for sleeping end devices for 30 secs:
     60          // #define CNT_RTG_TIMER            1
     61          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     62          // To hold msg for sleeping end devices for 30 mins:
     63          // #define CNT_RTG_TIMER            60
     64          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     65          // To hold msg for sleeping end devices for 30 days:
     66          // #define CNT_RTG_TIMER            60
     67          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     68          // Maximum msgs to hold per associated device.
     69          #define NWK_INDIRECT_MSG_MAX_PER    3
     70          // Maximum total msgs to hold for all associated devices.
     71          #define NWK_INDIRECT_MSG_MAX_ALL    \
     72                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
     73          
     74          
     75          /*********************************************************************
     76           * TYPEDEFS
     77           */
     78          
     79          /*********************************************************************
     80           * NWK GLOBAL VARIABLES
     81           */
     82          
     83          // Variables for MAX list size

   \                                 In segment CODE_C, align 1
     84          CONST uint16 gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   1500         DW 21
     85          
     86          // Variables for MAX data buffer levels

   \                                 In segment CODE_C, align 1
     87          CONST byte gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In segment CODE_C, align 1
     88          CONST byte gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In segment CODE_C, align 1
     89          CONST byte gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In segment CODE_C, align 1
     90          CONST byte gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
     91          

   \                                 In segment CODE_C, align 1
     92          CONST byte gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In segment CODE_C, align 1
     93          CONST byte gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In segment CODE_C, align 1
     94          CONST byte gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
     95          
     96          #if defined ( RTR_NWK )
     97            // change this if using a different stack profile...
     98            // Cskip array

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     99            uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
    100            #if ( STACK_PROFILE_ID == HOME_CONTROLS )

   \                                 In segment XDATA_I, align 1, keep-with-next
    101              byte CskipRtrs[MAX_NODE_DEPTH+1] = {2,5,5,5,5,0};
   \                     CskipRtrs:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for CskipRtrs>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In segment XDATA_I, align 1, keep-with-next
    102              byte CskipChldrn[MAX_NODE_DEPTH+1] = {3,10,10,10,10,0};
   \                     CskipChldrn:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for CskipChldrn>`
   \   000006                REQUIRE __INIT_XDATA_I
    103            #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    104              byte CskipRtrs[MAX_NODE_DEPTH+1] = {5,0};
    105              byte CskipChldrn[MAX_NODE_DEPTH+1] = {50,0};
    106            #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    107              byte CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    108              byte CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    109            #endif // STACK_PROFILE_ID
    110          #endif  // RTR_NWK
    111          
    112          
    113          // Minimum lqi value that is required for association

   \                                 In segment XDATA_I, align 1, keep-with-next
    114          byte gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
    115          
    116          #if defined(RTR_NWK)
    117            // Statically defined Associated Device List

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    118            associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 294
    119          #endif
    120          

   \                                 In segment CODE_C, align 1
    121          CONST byte gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   14           DB 20

   \                                 In segment CODE_C, align 1
    122          CONST byte gMAX_UNRESERVED_RTG_ENTRIES = MAX_UNRESERVED_RTG_ENTRIES;
   \                     gMAX_UNRESERVED_RTG_ENTRIES:
   \   000000   10           DB 16

   \                                 In segment CODE_C, align 1
    123          CONST byte gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   0A           DB 10
    124          

   \                                 In segment CODE_C, align 1
    125          CONST byte gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   08           DB 8
    126          
    127           // Table of neighboring nodes (not including child nodes)

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    128          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 88
    129          
    130          #if defined ( RTR_NWK )
    131            // Routing table

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    132            rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 120
    133          
    134            // Table of current RREQ packets in the network

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    135            rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 80
    136          
    137            // Table of data broadcast packets currently in circulation.

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    138            bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
    139          
    140            // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    141            uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
    142            uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
    143          

   \                                 In segment CODE_C, align 1
    144            CONST byte gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    145          #endif
    146          
    147          /*********************************************************************
    148           * APS GLOBAL VARIABLES
    149           */
    150          
    151          #if defined ( REFLECTOR )
    152            // The Maximum number of binding records
    153            // This number is defined in BindingTable.h - change it there.
    154            CONST uint16 gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
    155          
    156            // The Maximum number of cluster IDs in a binding record
    157            // This number is defined in BindingTable.h - change it there.
    158            CONST byte gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
    159          
    160            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
    161          
    162            // Binding Table
    163            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
    164          #endif
    165          
    166          // Maximum number allowed in the groups table.

   \                                 In segment CODE_C, align 1
    167          CONST uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    168          
    169          // The size of a tx window when using fragmentation

   \                                 In segment CODE_C, align 1
    170          CONST uint8 apscMaxWindowSize = APS_DEFAULT_WINDOW_SIZE;
   \                     apscMaxWindowSize:
   \   000000   05           DB 5
    171          
    172          // The delay between tx packets when using fragmentaition

   \                                 In segment CODE_C, align 1
    173          CONST uint16 gAPS_INTERFRAME_DELAY = APS_DEFAULT_INTERFRAME_DELAY;
   \                     gAPS_INTERFRAME_DELAY:
   \   000000   3200         DW 50
    174          
    175          
    176          /*********************************************************************
    177           * SECURITY GLOBAL VARIABLES
    178           */
    179          
    180          // This is the default pre-configured key,
    181          // change this to make a unique key
    182          // SEC_KEY_LEN is defined in ssp.h.

   \                                 In segment CODE_C, align 1
    183          CONST byte defaultKey[SEC_KEY_LEN] =
   \                     defaultKey:
   \   000000   00010203     DB 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
   \            04050607
   \            08090A0B
   \            0C0D0E0F
    184          {
    185          #if defined ( APP_TP ) || defined ( APP_TP2 )
    186            // Key for ZigBee Conformance Testing
    187            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    188            0x89, 0x67, 0x45, 0x23, 0x01, 0xEF, 0xCD, 0xAB
    189          #else
    190            // Key for In-House Testing
    191            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    192            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    193          #endif
    194          };
    195          
    196          /*********************************************************************
    197           * @fn       nwk_globals_init()
    198           *
    199           * @brief
    200           *
    201           *   Initialize nwk layer globals.  These are the system defaults and
    202           *   should be changed by the user here.  The default definitions are
    203           *   defined in nwk.h or NLMEDE.h.
    204           *
    205           * @param   none
    206           *
    207           * @return  none
    208           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    209          void nwk_globals_init( void )
   \                     nwk_globals_init:
    210          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    211            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A16         MOV     R2,#0x16
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#(AddrMgrInit & 0xffff)
   \   00000B   74..         MOV     A,#((AddrMgrInit >> 16) & 0xff)
   \   00000D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    212          
    213          #if defined ( RTR_NWK )
    214            // Initialize the Cskip Table
    215            Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
   \   000010                ; Setup parameters for call to function osal_mem_alloc
   \   000010   7A0C         MOV     R2,#0xc
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   000017   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   000019   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00001C   90....       MOV     DPTR,#Cskip
   \   00001F   EA           MOV     A,R2
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
    216            RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
   \   000024                ; Setup parameters for call to function RTG_FillCSkipTable
   \   000024   90....       MOV     DPTR,#Cskip
   \   000027   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002A   7905         MOV     R1,#0x5
   \   00002C   7C..         MOV     R4,#(CskipRtrs & 0xff)
   \   00002E   7D..         MOV     R5,#((CskipRtrs >> 8) & 0xff)
   \   000030   7A..         MOV     R2,#(CskipChldrn & 0xff)
   \   000032   7B..         MOV     R3,#((CskipChldrn >> 8) & 0xff)
   \   000034   90....       MOV     DPTR,#(RTG_FillCSkipTable & 0xffff)
   \   000037   74..         MOV     A,#((RTG_FillCSkipTable >> 16) & 0xff)
   \   000039   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00003C   7402         MOV     A,#0x2
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
    217          #endif
    218          }
   \   000041                REQUIRE ?Subroutine0
   \   000041                ; // Fall through to label ?Subroutine0

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    219          
    220          /*********************************************************************
    221           * @fn       NIB_init()
    222           *
    223           * @brief
    224           *
    225           *   Initialize attribute values in NIB
    226           *
    227           * @param   none
    228           *
    229           * @return  none
    230           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    231          void NIB_init()
   \                     NIB_init:
    232          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    233          #if defined ( AUTO_SOFT_START )
    234            byte extAddr[Z_EXTADDR_LEN];
    235            ZMacGetReq( ZMacExtAddr, extAddr );
    236            _NIB.SequenceNum = extAddr[0];
    237          #else
    238            _NIB.SequenceNum = 1;
   \   000004   7401         MOV     A,#0x1
   \   000006   90....       MOV     DPTR,#_NIB
   \   000009   F0           MOVX    @DPTR,A
    239          #endif
    240          
    241            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   00000A   7405         MOV     A,#0x5
   \   00000C   90....       MOV     DPTR,#(_NIB + 4)
   \   00000F   F0           MOVX    @DPTR,A
    242          
    243          #if ( NWK_MODE == NWK_MODE_MESH )
    244            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000010   740F         MOV     A,#0xf
   \   000012   90....       MOV     DPTR,#(_NIB + 40)
   \   000015   F0           MOVX    @DPTR,A
    245            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   000016   90....       MOV     DPTR,#(_NIB + 41)
   \   000019   F0           MOVX    @DPTR,A
    246          #endif
    247          
    248             // BROADCAST SETTINGS:
    249             // *******************
    250             //   Broadcast Delivery Time
    251             //     - set to multiples of 100ms
    252             //     - should be 500ms more than the retry time
    253             //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    254             //   Passive Ack Timeout
    255             //     - set to multiples of 100ms
    256             _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   00001A   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   90....       MOV     DPTR,#(_NIB + 7)
   \   000021   F0           MOVX    @DPTR,A
    257             _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   000022   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   000025   E0           MOVX    A,@DPTR
   \   000026   90....       MOV     DPTR,#(_NIB + 1)
   \   000029   F0           MOVX    @DPTR,A
    258             _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   00002A   90....       MOV     DPTR,#zgMaxBcastRetires
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   90....       MOV     DPTR,#(_NIB + 2)
   \   000031   F0           MOVX    @DPTR,A
    259          
    260             _NIB.ReportConstantCost = 0;
   \   000032   E4           CLR     A
   \   000033   90....       MOV     DPTR,#(_NIB + 8)
   \   000036   F0           MOVX    @DPTR,A
    261             _NIB.RouteDiscRetries = 0;
   \   000037   90....       MOV     DPTR,#(_NIB + 9)
   \   00003A   F0           MOVX    @DPTR,A
    262             _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   00003B   90....       MOV     DPTR,#(_NIB + 11)
   \   00003E   F0           MOVX    @DPTR,A
    263             _NIB.SecurityLevel = zgSecurityLevel;
   \   00003F   90....       MOV     DPTR,#zgSecurityLevel
   \   000042   E0           MOVX    A,@DPTR
   \   000043   90....       MOV     DPTR,#(_NIB + 12)
   \   000046   F0           MOVX    @DPTR,A
    264             _NIB.SymLink = 0;
   \   000047   E4           CLR     A
   \   000048   90....       MOV     DPTR,#(_NIB + 13)
   \   00004B   F0           MOVX    @DPTR,A
    265             _NIB.CapabilityInfo = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00004C   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   90....       MOV     DPTR,#(_NIB + 14)
   \   000053   F0           MOVX    @DPTR,A
    266          
    267             _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   000054   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   000057   E0           MOVX    A,@DPTR
   \   000058   90....       MOV     DPTR,#(_NIB + 15)
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    268          
    269             _NIB.RouteDiscoveryTime = 5;
   \   00005F   7405         MOV     A,#0x5
   \   000061   90....       MOV     DPTR,#(_NIB + 18)
   \   000064   F0           MOVX    @DPTR,A
    270             _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   000065   90....       MOV     DPTR,#zgRouteExpiryTime
   \   000068   E0           MOVX    A,@DPTR
   \   000069   90....       MOV     DPTR,#(_NIB + 19)
   \   00006C   F0           MOVX    @DPTR,A
    271          
    272             _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00006D   90....       MOV     DPTR,#(_NIB + 20)
   \   000070   74FE         MOV     A,#-0x2
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   74FF         MOV     A,#-0x1
   \   000076   F0           MOVX    @DPTR,A
    273             _NIB.nwkLogicalChannel = 0;
   \   000077   E4           CLR     A
   \   000078   90....       MOV     DPTR,#(_NIB + 22)
   \   00007B   F0           MOVX    @DPTR,A
    274             _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   00007C   90....       MOV     DPTR,#(_NIB + 23)
   \   00007F   74FE         MOV     A,#-0x2
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   74FF         MOV     A,#-0x1
   \   000085   F0           MOVX    @DPTR,A
    275             osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \   000086                ; Setup parameters for call to function osal_memset
   \   000086   7C08         MOV     R4,#0x8
   \   000088   7D00         MOV     R5,#0x0
   \   00008A   7900         MOV     R1,#0x0
   \   00008C   7A..         MOV     R2,#((_NIB + 25) & 0xff)
   \   00008E   7B..         MOV     R3,#(((_NIB + 25) >> 8) & 0xff)
   \   000090   90....       MOV     DPTR,#(osal_memset & 0xffff)
   \   000093   74..         MOV     A,#((osal_memset >> 16) & 0xff)
   \   000095   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    276             _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   000098   90....       MOV     DPTR,#(_NIB + 33)
   \   00009B   74FE         MOV     A,#-0x2
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   74FF         MOV     A,#-0x1
   \   0000A1   F0           MOVX    @DPTR,A
    277          
    278             osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   0000A2                ; Setup parameters for call to function osal_cpyExtAddr
   \   0000A2   7C..         MOV     R4,#(zgExtendedPANID & 0xff)
   \   0000A4   7D..         MOV     R5,#((zgExtendedPANID >> 8) & 0xff)
   \   0000A6   7A..         MOV     R2,#((_NIB + 53) & 0xff)
   \   0000A8   7B..         MOV     R3,#(((_NIB + 53) >> 8) & 0xff)
   \   0000AA   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   0000AD   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   0000AF   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    279          
    280             _NIB.nwkKeyLoaded = FALSE;
   \   0000B2   E4           CLR     A
   \   0000B3   90....       MOV     DPTR,#(_NIB + 61)
   \   0000B6   F0           MOVX    @DPTR,A
    281          }
   \   0000B7   02....       LJMP    ?Subroutine0 & 0xFFFF
    282          
    283          /*********************************************************************
    284           * @fn       nwk_Status()
    285           *
    286           * @brief
    287           *
    288           *   Status report.
    289           *
    290           * @param   statusCode
    291           * @param   statusValue
    292           *
    293           * @return  none
    294           */

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    295          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    296          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    297          
    298          }
   \   000000   02....       LJMP    ?BRET

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CskipRtrs>`:
   \   000000   02050505     DB 2, 5, 5, 5, 5, 0
   \            0500    

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CskipChldrn>`:
   \   000000   030A0A0A     DB 3, 10, 10, 10, 10, 0
   \            0A00    

   \                                 In segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6
    299          
    300          /*********************************************************************
    301          *********************************************************************/

   Maximum stack usage in bytes:

     Function                ISTACK PSTACK XSTACK
     --------                ------ ------ ------
     NIB_init                    2      0      0
       -> osal_memset            4      0      0
       -> osal_cpyExtAddr        4      0      0
     nwk_Status                  0      0      0
     nwk_globals_init            2      0      2
       -> AddrMgrInit            4      0      0
       -> osal_mem_alloc         4      0      0
       -> RTG_FillCSkipTable     4      0      4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     gNWK_MAX_DEVICE_LIST              2
     gNWK_MAX_DATABUFS_WAITING         1
     gNWK_MAX_DATABUFS_SCHEDULED       1
     gNWK_MAX_DATABUFS_CONFIRMED       1
     gNWK_MAX_DATABUFS_TOTAL           1
     gNWK_INDIRECT_CNT_RTG_TMR         1
     gNWK_INDIRECT_MSG_MAX_PER         1
     gNWK_INDIRECT_MSG_MAX_ALL         1
     Cskip                             2
     CskipRtrs                         6
     CskipChldrn                       6
     gMIN_TREE_LINK_COST               1
     AssociatedDevList               294
     gMAX_RTG_ENTRIES                  1
     gMAX_UNRESERVED_RTG_ENTRIES       1
     gMAX_RREQ_ENTRIES                 1
     gMAX_NEIGHBOR_ENTRIES             1
     neighborTable                    88
     rtgTable                        120
     rtDiscTable                      80
     bcastTable                       72
     bcastHoldHandle                   9
     bcastHoldAckMask                 36
     gMAX_BCAST                        1
     gAPS_MAX_GROUPS                   1
     apscMaxWindowSize                 1
     gAPS_INTERFRAME_DELAY             2
     defaultKey                       16
     nwk_globals_init                 65
     ?Subroutine0                      7
     NIB_init                        186
     nwk_Status                        3
     ?<Initializer for CskipRtrs>      6
     ?<Initializer for CskipChldrn>    6
     ?<Initializer for gMIN_TREE_LINK_COST>
                                       1

 
 261 bytes in segment BANKED_CODE
  34 bytes in segment CODE_C
  13 bytes in segment XDATA_I
  13 bytes in segment XDATA_ID
 701 bytes in segment XDATA_Z
 
 308 bytes of CODE  memory
 714 bytes of XDATA memory

Errors: none
Warnings: none
