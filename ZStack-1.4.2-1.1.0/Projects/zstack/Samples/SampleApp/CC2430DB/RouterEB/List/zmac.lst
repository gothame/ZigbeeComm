##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   24/Jan/2013  14:47:51 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  xdata reentrant                                   #
#    Constant location  =  data                                              #
#    Dptr setup         =  1,16                                              #
#    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Component #
#                          s\zmac\f8w\zmac.c                                 #
#    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8 #
#                          wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR          #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR #
#                          UE -DRTR_NWK -DBLINK_LEDS "-DCONST=const __code"  #
#                          -DGENERIC=__generic) -f                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f8wCo #
#                          nfig.cfg (-DSECURE=0 -DDEFAULT_CHANLIST=0x0000080 #
#                          0 -DZDAPP_CONFIG_PAN_ID=0xFFFF                    #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M #
#                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                    #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P #
#                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           #
#                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3  #
#                          -DNWK_MAX_DATA_RETRIES=2                          #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20          #
#                          -DNWK_MAX_BINDING_ENTRIES=10                      #
#                          -DMAX_BINDING_CLUSTER_IDS=5                       #
#                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     #
#                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   #
#                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100           #
#                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440   #
#                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR      #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\" -I "D:\Program Files\IAR       #
#                          Systems\Embedded Workbench 4.05 Evaluation        #
#                          version\8051\inc\clib\" -I                        #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\ -I                           #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\Source\ -I                 #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\ -I   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mt\ #
#                           -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ #
#                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee200 #
#                          6-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Sam #
#                          ples\SampleApp\CC2430DB\..\..\..\..\..\Components #
#                          \hal\include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª· #
#                          ¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 #
#                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec #
#                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\ #
#                          ..\Components\hal\target\CC2430EB\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\osa #
#                          l\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ #
#                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 #
#                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Project #
#                          s\zstack\Samples\SampleApp\CC2430DB\..\..\..\..\. #
#                          .\Components\osal\include\ -I                     #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\Î #
#                          ÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zig #
#                          Bee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zsta #
#                          ck\Samples\SampleApp\CC2430DB\..\..\..\..\..\Comp #
#                          onents\stack\nwk\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\stack\sec\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\sta #
#                          ck\sys\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ #
#                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Zi #
#                          gBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2430DB\..\..\..\..\..\Com #
#                          ponents\stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\zmac\f8w\ -I                   #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\zma #
#                          c\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍ #
#                          øÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2 #
#                          006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S #
#                          amples\SampleApp\CC2430DB\..\..\..\..\..\Componen #
#                          ts\services\saddr\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC24 #
#                          30¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi #
#                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\P #
#                          rojects\zstack\Samples\SampleApp\CC2430DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I             #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \include\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁ #
#                          Ï\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ #
#                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z #
#                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\C #
#                          omponents\mac\high_level\ -I                      #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\..\..\..\..\..\Components\mac #
#                          \low_level\srf03\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 #
#                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zig #
#                          Bee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2430DB\..\..\.. #
#                          \..\..\Components\mac\low_level\srf03\single_chip #
#                          \ -D CC2430EB -D ZTOOL_P1 -D MT_TASK -lC          #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\ -lA            #
#                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\                #
#                          --diag_suppress Pe001,Pa010 --diag_remark pe550   #
#                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç #
#                          ¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006 #
#                          -´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2430DB\RouterEB\Obj\ -e           #
#                          --require_prototypes -z9 --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                  #
#                          --data_model=large --code_model=banked            #
#                          --calling_convention=xdata_reentrant              #
#                          --place_constants=data --nr_virtual_regs 8        #
#                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen #
#                          ts\zmac\f8w\zmac.c"                               #
#    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\List\zmac.lst        #
#    Object file        =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª· #
#                          ¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006-´® #
#                          ¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samples #
#                          \SampleApp\CC2430DB\RouterEB\Obj\zmac.r51         #
#                                                                            #
#                                                                            #
##############################################################################

D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\zmac\f8w\zmac.c
      1          /********************************************************************************************************
      2              Filename:       zmac.c
      3              Revised:        $Date: 2006-11-28 13:47:33 -0800 (Tue, 28 Nov 2006) $
      4              Revision:       $Revision: 12837 $
      5          
      6              Description:
      7          
      8              This file contains the ZStack MAC Porting Layer
      9          
     10              Notes:
     11          
     12              Copyright (c) 2006 by Texas Instruments, Inc.
     13              All Rights Reserved.  Permission to use, reproduce, copy, prepare
     14              derivative works, modify, distribute, perform, display or sell this
     15              software and/or its documentation for any purpose is prohibited
     16              without the express written consent of Texas Instruments, Inc.
     17           ********************************************************************************************************/
     18          
     19          
     20          /********************************************************************************************************
     21           *                                               INCLUDES
     22           ********************************************************************************************************/
     23          
     24          #include "ZComDef.h"
     25          #include "OSAL.h"
     26          #include "ZMAC.h"
     27          
     28          /********************************************************************************************************
     29           *                                                 MACROS
     30           ********************************************************************************************************/
     31          
     32          /********************************************************************************************************
     33           *                                               CONSTANTS
     34           ********************************************************************************************************/

   \                                 In segment CODE_C, align 1
     35          static CONST byte TxPowerSettings[] =
   \                     ??TxPowerSettings:
   \   000000   00212325     DB 0, 33, 35, 37, 39, 42, 47, 57
   \            272A2F39
     36          {
     37            OUTPUT_POWER_0DBM,
     38            OUTPUT_POWER_N1DBM,
     39            OUTPUT_POWER_N3DBM,
     40            OUTPUT_POWER_N5DBM,
     41            OUTPUT_POWER_N7DBM,
     42            OUTPUT_POWER_N10DBM,
     43            OUTPUT_POWER_N15DBM,
     44            OUTPUT_POWER_N25DBM
     45          };
     46          
     47          /********************************************************************************************************
     48           *                                               GLOBALS
     49           ********************************************************************************************************/

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     50          uint32 _ScanChannels;
   \                     _ScanChannels:
   \   000000                DS 4
     51          
     52          extern uint8 aExtendedAddress[];
     53          
     54          /********************************************************************************************************
     55           *                                               LOCALS
     56           ********************************************************************************************************/
     57          
     58          /* Pointer to scan result buffer */

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     59          void *ZMac_ScanBuf = NULL;
   \                     ZMac_ScanBuf:
   \   000000                DS 2
     60          
     61          /********************************************************************************************************
     62           * LOCAL FUNCTION PROTOTYPES
     63           ********************************************************************************************************/
     64          
     65          /********************************************************************************************************
     66           *                                                TYPEDEFS
     67           ********************************************************************************************************/
     68          
     69          
     70          /********************************************************************************************************
     71           *                                                FUNCTIONS
     72           ********************************************************************************************************/
     73          
     74          /********************************************************************************************************
     75           * @fn      ZMacInit
     76           *
     77           * @brief   Initialize MAC.
     78           *
     79           * @param   none.
     80           *
     81           * @return  status.
     82           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
     83          ROOT uint8 ZMacInit( void )
   \                     ZMacInit:
     84          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
     85            uint8 stat;
     86          
     87            MAC_Init();
   \   000005                ; Setup parameters for call to function MAC_Init
   \   000005   90....       MOV     DPTR,#(MAC_Init & 0xffff)
   \   000008   74..         MOV     A,#((MAC_Init >> 16) & 0xff)
   \   00000A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     88            MAC_InitDevice();
   \   00000D                ; Setup parameters for call to function MAC_InitDevice
   \   00000D   90....       MOV     DPTR,#(MAC_InitDevice & 0xffff)
   \   000010   74..         MOV     A,#((MAC_InitDevice >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     89          
     90          #if defined ( RTR_NWK )
     91            MAC_InitCoord();
   \   000015                ; Setup parameters for call to function MAC_InitCoord
   \   000015   90....       MOV     DPTR,#(MAC_InitCoord & 0xffff)
   \   000018   74..         MOV     A,#((MAC_InitCoord >> 16) & 0xff)
   \   00001A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     92          #endif
     93          
     94            // If OK, initialize the MAC
     95            stat = ZMacReset( TRUE );
   \   00001D                ; Setup parameters for call to function ZMacReset
   \   00001D   7901         MOV     R1,#0x1
   \   00001F   12....       LCALL   ZMacReset
   \   000022   E9           MOV     A,R1
   \   000023   FE           MOV     R6,A
     96          
     97            // Turn off interrupts
     98            osal_int_disable( INTS_ALL );
   \   000024                ; Setup parameters for call to function osal_int_disable
   \   000024   79FF         MOV     R1,#-0x1
   \   000026   90....       MOV     DPTR,#(osal_int_disable & 0xffff)
   \   000029   74..         MOV     A,#((osal_int_disable >> 16) & 0xff)
   \   00002B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     99          
    100            return ( stat );
   \   00002E   EE           MOV     A,R6
   \   00002F   F9           MOV     R1,A
   \   000030   80..         SJMP    ??Subroutine6_0
    101          }

   \                                 In segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Subroutine6_0:
   \   000005   7F01         MOV     R7,#0x1
   \   000007   02....       LJMP    ?FUNC_LEAVE_XDATA
    102          
    103          /********************************************************************************************************
    104           * @fn      ZMacUpdate
    105           *
    106           * @brief   Gives MAC (or others) some processing time.
    107           *
    108           * @param   none.
    109           *
    110           * @return  true if CPU needs to keep running (not sleep).
    111           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    112          ROOT byte ZMacUpdate( void )
   \                     ZMacUpdate:
    113          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    114            /* Put code here that needs to run each OSAL event loop */
    115            return ( false );
   \   000000   7900         MOV     R1,#0x0
   \   000002   22           RET
    116          }
    117          
    118          /********************************************************************************************************
    119           * @fn      ZMacReset
    120           *
    121           * @brief   Reset the MAC.
    122           *
    123           * @param   Default to PIB defaults.
    124           *
    125           * @return  status.
    126           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    127          ROOT uint8 ZMacReset( bool SetDefaultPIB )
   \                     ZMacReset:
    128          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    129            byte stat;
    130            byte value;
    131          
    132            stat = MAC_MlmeResetReq( SetDefaultPIB );
   \   00000A                ; Setup parameters for call to function MAC_MlmeResetReq
   \   00000A   90....       MOV     DPTR,#(MAC_MlmeResetReq & 0xffff)
   \   00000D   74..         MOV     A,#((MAC_MlmeResetReq >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   E9           MOV     A,R1
   \   000013   FE           MOV     R6,A
    133          
    134            // Don't send PAN ID conflict
    135            value = FALSE;
   \   000014   E4           CLR     A
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
    136            MAC_MlmeSetReq( MAC_ASSOCIATED_PAN_COORD, &value );
   \   00001C                ; Setup parameters for call to function MAC_MlmeSetReq
   \   00001C   AA82         MOV     R2,DPL
   \   00001E   AB83         MOV     R3,DPH
   \   000020   7956         MOV     R1,#0x56
   \   000022   90....       MOV     DPTR,#(MAC_MlmeSetReq & 0xffff)
   \   000025   74..         MOV     A,#((MAC_MlmeSetReq >> 16) & 0xff)
   \   000027   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    137            MAC_MlmeSetReq( MAC_EXTENDED_ADDRESS, &aExtendedAddress );
   \   00002A                ; Setup parameters for call to function MAC_MlmeSetReq
   \   00002A   7A..         MOV     R2,#(aExtendedAddress & 0xff)
   \   00002C   7B..         MOV     R3,#((aExtendedAddress >> 8) & 0xff)
   \   00002E   79E2         MOV     R1,#-0x1e
   \   000030   74..         MOV     A,#((MAC_MlmeSetReq >> 16) & 0xff)
   \   000032   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    138          
    139            if (ZMac_ScanBuf)
   \   000035   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000038   E0           MOVX    A,@DPTR
   \   000039   7002         JNZ     ??ZMacReset_0
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \                     ??ZMacReset_0:
   \   00003D   6017         JZ      ??ZMacReset_1
    140            {
    141              osal_mem_free(ZMac_ScanBuf);
   \   00003F                ; Setup parameters for call to function osal_mem_free
   \   00003F   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FB           MOV     R3,A
   \   000047   90....       MOV     DPTR,#(osal_mem_free & 0xffff)
   \   00004A   74..         MOV     A,#((osal_mem_free >> 16) & 0xff)
   \   00004C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    142              ZMac_ScanBuf = NULL;
   \   00004F   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000052   E4           CLR     A
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   F0           MOVX    @DPTR,A
    143            }
    144          
    145            return ( stat );
   \                     ??ZMacReset_1:
   \   000056   EE           MOV     A,R6
   \   000057   F9           MOV     R1,A
   \   000058   80..         SJMP    ?Subroutine6
    146          }
    147          
    148          
    149          /********************************************************************************************************
    150           * @fn      ZMacGetReq
    151           *
    152           * @brief   Read a MAC PIB attribute.
    153           *
    154           * @param   attr - PIB attribute to get
    155           * @param   value - pointer to the buffer to store the attribute
    156           *
    157           * @return  status
    158           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    159          ROOT uint8 ZMacGetReq( uint8 attr, uint8 *value )
   \                     ZMacGetReq:
    160          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    161            if ( attr == ZMacExtAddr )
   \   000004   74E2         MOV     A,#-0x1e
   \   000006   69           XRL     A,R1
   \   000007   7010         JNZ     ??ZMacGetReq_0
    162            {
    163              osal_cpyExtAddr( value, &aExtendedAddress );
   \   000009                ; Setup parameters for call to function osal_cpyExtAddr
   \   000009   7C..         MOV     R4,#(aExtendedAddress & 0xff)
   \   00000B   7D..         MOV     R5,#((aExtendedAddress >> 8) & 0xff)
   \   00000D   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   000010   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    164              return ZMacSuccess;
   \   000015   7900         MOV     R1,#0x0
   \   000017   8008         SJMP    ??ZMacGetReq_1
    165            }
    166          
    167            return (ZMacStatus_t) MAC_MlmeGetReq( attr, value );
   \                     ??ZMacGetReq_0:
   \   000019                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000019   90....       MOV     DPTR,#(MAC_MlmeGetReq & 0xffff)
   \   00001C   74..         MOV     A,#((MAC_MlmeGetReq >> 16) & 0xff)
   \   00001E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??ZMacGetReq_1:
   \   000021   02....       LJMP    ??Subroutine7_0
    168          }

   \                                 In segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000003   7900         MOV     R1,#0x0
   \                     ??Subroutine7_0:
   \   000005   D083         POP     DPH
   \   000007   D082         POP     DPL
   \   000009   22           RET
    169          
    170          
    171          /********************************************************************************************************
    172           * @fn      ZMacSetReq
    173           *
    174           * @brief   Write a MAC PIB attribute.
    175           *
    176           * @param   attr - PIB attribute to Set
    177           * @param   value - pointer to the data
    178           *
    179           * @return  status
    180           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    181          ROOT uint8 ZMacSetReq( uint8 attr, byte *value )
   \                     ZMacSetReq:
    182          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    183            if ( attr == ZMacExtAddr )
   \   00000B   74E2         MOV     A,#-0x1e
   \   00000D   65..         XRL     A,?V0 + 0
   \   00000F   7010         JNZ     ??ZMacSetReq_0
    184            {
    185              osal_cpyExtAddr( &aExtendedAddress, value );
   \   000011                ; Setup parameters for call to function osal_cpyExtAddr
   \   000011   EE           MOV     A,R6
   \   000012   FC           MOV     R4,A
   \   000013   EF           MOV     A,R7
   \   000014   FD           MOV     R5,A
   \   000015   7A..         MOV     R2,#(aExtendedAddress & 0xff)
   \   000017   7B..         MOV     R3,#((aExtendedAddress >> 8) & 0xff)
   \   000019   90....       MOV     DPTR,#(osal_cpyExtAddr & 0xffff)
   \   00001C   74..         MOV     A,#((osal_cpyExtAddr >> 16) & 0xff)
   \   00001E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    186            }
    187          
    188            return (ZMacStatus_t) MAC_MlmeSetReq( attr, value );
   \                     ??ZMacSetReq_0:
   \   000021                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   A9..         MOV     R1,?V0 + 0
   \   000027   90....       MOV     DPTR,#(MAC_MlmeSetReq & 0xffff)
   \   00002A   74..         MOV     A,#((MAC_MlmeSetReq >> 16) & 0xff)
   \   00002C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002F   02....       LJMP    ??Subroutine6_0
    189          }
    190          
    191          /********************************************************************************************************
    192           * @fn      ZMacAssociateReq
    193           *
    194           * @brief   Request an association with a coordinator.
    195           *
    196           * @param   structure with info need to associate.
    197           *
    198           * @return  status
    199           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    200          ROOT uint8 ZMacAssociateReq( ZMacAssociateReq_t *pData )
   \                     ZMacAssociateReq:
    201          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    202            /* Right now, set security to zero */
    203            pData->Sec.SecurityLevel = false;
   \   000004   EA           MOV     A,R2
   \   000005   2416         ADD     A,#0x16
   \   000007   12....       LCALL   ?Subroutine2
    204          
    205            MAC_MlmeAssociateReq ( (macMlmeAssociateReq_t *)pData);
   \                     ??CrossCallReturnLabel_5:
   \   00000A                ; Setup parameters for call to function MAC_MlmeAssociateReq
   \   00000A   90....       MOV     DPTR,#(MAC_MlmeAssociateReq & 0xffff)
   \   00000D   74..         MOV     A,#((MAC_MlmeAssociateReq >> 16) & 0xff)
   \   00000F   02....       LJMP    ?Subroutine7
    206            return ( ZMacSuccess );
    207          }

   \                                 In segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \                     ??Subroutine2_0:
   \   000003   12....       LCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_21:
   \   000006   22           RET

   \                                 In segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    208          
    209          /********************************************************************************************************
    210           * @fn      ZMacAssociateRsp
    211           *
    212           * @brief   Request to send an association response message.
    213           *
    214           * @param   structure with associate response and info needed to send it.
    215           *
    216           * @return  status
    217           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    218          ROOT uint8 ZMacAssociateRsp( ZMacAssociateRsp_t *pData )
   \                     ZMacAssociateRsp:
    219          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    220            /* Right now, set security to zero */
    221            pData->Sec.SecurityLevel = false;
   \   000004   12....       LCALL   ?Subroutine0
    222          
    223            MAC_MlmeAssociateRsp( (macMlmeAssociateRsp_t *) pData );
   \                     ??CrossCallReturnLabel_0:
   \   000007                ; Setup parameters for call to function MAC_MlmeAssociateRsp
   \   000007   90....       MOV     DPTR,#(MAC_MlmeAssociateRsp & 0xffff)
   \   00000A   74..         MOV     A,#((MAC_MlmeAssociateRsp >> 16) & 0xff)
   \   00000C   02....       LJMP    ?Subroutine7
    224            return ( ZMacSuccess );
    225          }

   \                                 In segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   EA           MOV     A,R2
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   12....       LCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_19:
   \   000009   22           RET
    226          
    227          /********************************************************************************************************
    228           * @fn      ZMacDisassociateReq
    229           *
    230           * @brief   Request to send a disassociate request message.
    231           *
    232           * @param   structure with info need send it.
    233           *
    234           * @return  status
    235           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    236          ROOT uint8 ZMacDisassociateReq( ZMacDisassociateReq_t *pData )
   \                     ZMacDisassociateReq:
    237          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    238            /* Right now, set security to zero */
    239            pData->Sec.SecurityLevel = false;
   \   000004   EA           MOV     A,R2
   \   000005   2415         ADD     A,#0x15
   \   000007   12....       LCALL   ?Subroutine2
    240          
    241            MAC_MlmeDisassociateReq( (macMlmeDisassociateReq_t *)pData);
   \                     ??CrossCallReturnLabel_6:
   \   00000A                ; Setup parameters for call to function MAC_MlmeDisassociateReq
   \   00000A   90....       MOV     DPTR,#(MAC_MlmeDisassociateReq & 0xffff)
   \   00000D   74..         MOV     A,#((MAC_MlmeDisassociateReq >> 16) & 0xff)
   \   00000F   02....       LJMP    ?Subroutine7
    242            return ( ZMacSuccess );
    243          }
    244          
    245          /********************************************************************************************************
    246           * @fn      ZMacOrphanRsp
    247           *
    248           * @brief   Allows next higher layer to respond to an orphan indication message.
    249           *
    250           * @param   structure with info need send it.
    251           *
    252           * @return  status
    253           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    254          ROOT uint8 ZMacOrphanRsp( ZMacOrphanRsp_t *pData )
   \                     ZMacOrphanRsp:
    255          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    256            /* Right now, set security to zero */
    257            pData->Sec.SecurityLevel = false;
   \   000004   12....       LCALL   ?Subroutine0
    258          
    259            MAC_MlmeOrphanRsp( (macMlmeOrphanRsp_t *)pData);
   \                     ??CrossCallReturnLabel_1:
   \   000007                ; Setup parameters for call to function MAC_MlmeOrphanRsp
   \   000007   90....       MOV     DPTR,#(MAC_MlmeOrphanRsp & 0xffff)
   \   00000A   74..         MOV     A,#((MAC_MlmeOrphanRsp >> 16) & 0xff)
   \   00000C   02....       LJMP    ?Subroutine7
    260            return ( ZMacSuccess );
    261          }
    262          
    263          /********************************************************************************************************
    264           * @fn      ZMacRxEnableReq
    265           *
    266           * @brief   This function contains timing information that tells the
    267           *          device when to enable or disable its receiver, in order
    268           *          to schedule a data transfer between itself and another
    269           *          device. The information is sent from the upper layers
    270           *          directly to the MAC sublayer.
    271           *
    272           * @param   structure with info need send it.
    273           *
    274           * @return  status
    275           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    276          ROOT uint8 ZMacRxEnableReq( ZMacRxEnableReq_t *pData )
   \                     ZMacRxEnableReq:
    277          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    278            /* This feature is no longer in the TIMAC */
    279            return ( ZMacUnsupported );
   \   000000   79F5         MOV     R1,#-0xb
   \   000002   22           RET
    280          }
    281          
    282          /********************************************************************************************************
    283           * @fn      ZMacScanReq
    284           *
    285           * @brief   This function is called to perform a network scan.
    286           *
    287           * @param   param - structure with info need send it.
    288           *
    289           * @return  status
    290           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    291          ROOT uint8 ZMacScanReq( ZMacScanReq_t *pData )
   \                     ZMacScanReq:
    292          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    293            _ScanChannels = pData->ScanChannels;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?L_MOV_X
   \   000012   90....       MOV     DPTR,#_ScanChannels
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?L_MOV_TO_X
    294          
    295            /* scan in progress */
    296            if (ZMac_ScanBuf != NULL)
   \   00001A   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   7002         JNZ     ??ZMacScanReq_0
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \                     ??ZMacScanReq_0:
   \   000022   6005         JZ      ??ZMacScanReq_1
    297            {
    298              return MAC_SCAN_IN_PROGRESS;
   \   000024   79FC         MOV     R1,#-0x4
   \   000026   02....       LJMP    ??ZMacScanReq_2
    299            }
    300          
    301            if (pData->ScanType != ZMAC_ORPHAN_SCAN)
   \                     ??ZMacScanReq_1:
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6403         XRL     A,#0x3
   \   000034   7003         JNZ     $+5
   \   000036   02....       LJMP    ??ZMacScanReq_3
    302            {
    303              /* Allocate memory depends on the scan type */
    304              if (pData->ScanType == ZMAC_ED_SCAN)
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   7051         JNZ     ??ZMacScanReq_4
    305              {
    306                if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
   \   000044                ; Setup parameters for call to function osal_mem_alloc
   \   000044   7A1B         MOV     R2,#0x1b
   \   000046   7B00         MOV     R3,#0x0
   \   000048   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   00004B   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   00004D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000050   8A..         MOV     ?V0 + 0,R2
   \   000052   8B..         MOV     ?V0 + 1,R3
   \   000054   A8..         MOV     R0,?V0 + 0
   \   000056   A9..         MOV     R1,?V0 + 1
   \   000058   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   E8           MOV     A,R0
   \   000061   7001         JNZ     ??ZMacScanReq_5
   \   000063   E9           MOV     A,R1
   \                     ??ZMacScanReq_5:
   \   000064   7005         JNZ     ??ZMacScanReq_6
    307                {
    308                  return MAC_NO_RESOURCES;
   \                     ??ZMacScanReq_7:
   \   000066   791A         MOV     R1,#0x1a
   \   000068   02....       LJMP    ??ZMacScanReq_2
    309                }
    310                osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
   \                     ??ZMacScanReq_6:
   \   00006B                ; Setup parameters for call to function osal_memset
   \   00006B   7C1B         MOV     R4,#0x1b
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   7900         MOV     R1,#0x0
   \   000071   90....       MOV     DPTR,#(osal_memset & 0xffff)
   \   000074   74..         MOV     A,#((osal_memset >> 16) & 0xff)
   \   000076   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    311                pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
   \   000079   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   240B         ADD     A,#0xb
   \   00007F   F8           MOV     R0,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   3400         ADDC    A,#0x0
   \   000084   F9           MOV     R1,A
   \   000085   EE           MOV     A,R6
   \   000086   2413         ADD     A,#0x13
   \   000088   F582         MOV     DPL,A
   \   00008A   EF           MOV     A,R7
   \   00008B   12....       LCALL   ??Subroutine4_0
   \                     ??CrossCallReturnLabel_13:
   \   00008E   E8           MOV     A,R0
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E9           MOV     A,R1
   \   000092   F0           MOVX    @DPTR,A
   \   000093   805E         SJMP    ??ZMacScanReq_3
    312              }
    313              else if (pData->MaxResults > 0)
   \                     ??ZMacScanReq_4:
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   6050         JZ      ??ZMacScanReq_3
    314              {
    315                if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
    316                     osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
   \   0000A3   EE           MOV     A,R6
   \   0000A4   2413         ADD     A,#0x13
   \   0000A6   F5..         MOV     ?V0 + 0,A
   \   0000A8   EF           MOV     A,R7
   \   0000A9   3400         ADDC    A,#0x0
   \   0000AB   F5..         MOV     ?V0 + 1,A
   \   0000AD                ; Setup parameters for call to function osal_mem_alloc
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   75F021       MOV     B,#0x21
   \   0000BC   A4           MUL     AB
   \   0000BD   FA           MOV     R2,A
   \   0000BE   ABF0         MOV     R3,B
   \   0000C0   90....       MOV     DPTR,#(osal_mem_alloc & 0xffff)
   \   0000C3   74..         MOV     A,#((osal_mem_alloc >> 16) & 0xff)
   \   0000C5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000C8   85..82       MOV     DPL,?V0 + 0
   \   0000CB   85..83       MOV     DPH,?V0 + 1
   \   0000CE   EA           MOV     A,R2
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   EB           MOV     A,R3
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   85..82       MOV     DPL,?V0 + 0
   \   0000D6   85..83       MOV     DPH,?V0 + 1
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F8           MOV     R0,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F9           MOV     R1,A
   \   0000DE   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0000E1   E8           MOV     A,R0
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E9           MOV     A,R1
   \   0000E5   F0           MOVX    @DPTR,A
   \   0000E6   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   7002         JNZ     ??ZMacScanReq_8
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \                     ??ZMacScanReq_8:
   \   0000EE   7003         JNZ     $+5
   \   0000F0   02....       LJMP    ??ZMacScanReq_7
    317                {
    318                  return MAC_NO_RESOURCES;
    319                }
    320              }
    321            }
    322          
    323            /* Right now, set security to zero */
    324            pData->Sec.SecurityLevel = false;
   \                     ??ZMacScanReq_3:
   \   0000F3   EE           MOV     A,R6
   \   0000F4   2410         ADD     A,#0x10
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   EF           MOV     A,R7
   \   0000F9   12....       LCALL   ??Subroutine2_0
    325          
    326            /* Channel Page */
    327            pData->ChannelPage = 0x00;
   \                     ??CrossCallReturnLabel_7:
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   F0           MOVX    @DPTR,A
    328          
    329            MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
   \   000107                ; Setup parameters for call to function MAC_MlmeScanReq
   \   000107   EE           MOV     A,R6
   \   000108   FA           MOV     R2,A
   \   000109   EF           MOV     A,R7
   \   00010A   FB           MOV     R3,A
   \   00010B   90....       MOV     DPTR,#(MAC_MlmeScanReq & 0xffff)
   \   00010E   74..         MOV     A,#((MAC_MlmeScanReq >> 16) & 0xff)
   \   000110   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    330          
    331            return ZMacSuccess;
   \   000113   7900         MOV     R1,#0x0
   \                     ??ZMacScanReq_2:
   \   000115                REQUIRE ?Subroutine8
   \   000115                ; // Fall through to label ?Subroutine8
    332          }

   \                                 In segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \                     ??Subroutine4_0:
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET
    333          
    334          
    335          /********************************************************************************************************
    336           * @fn      ZMacStartReq
    337           *
    338           * @brief   This function is called to tell the MAC to transmit beacons
    339           *          and become a coordinator.
    340           *
    341           * @param   structure with info need send it.
    342           *
    343           * @return  status
    344           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    345          ROOT uint8 ZMacStartReq( ZMacStartReq_t *pData )
   \                     ZMacStartReq:
    346          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    347            uint8 stat;
    348          
    349            // Probably want to keep the receiver on
    350            stat = true;
   \   00000E   7401         MOV     A,#0x1
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   F0           MOVX    @DPTR,A
    351            MAC_MlmeSetReq( MAC_RX_ON_WHEN_IDLE, &stat );
   \   000017                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000017   AA82         MOV     R2,DPL
   \   000019   AB83         MOV     R3,DPH
   \   00001B   7952         MOV     R1,#0x52
   \   00001D   90....       MOV     DPTR,#(MAC_MlmeSetReq & 0xffff)
   \   000020   74..         MOV     A,#((MAC_MlmeSetReq >> 16) & 0xff)
   \   000022   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    352          
    353            /* Right now, set security to zero */
    354            pData->RealignSec.SecurityLevel = false;
   \   000025   EE           MOV     A,R6
   \   000026   2415         ADD     A,#0x15
   \   000028   F582         MOV     DPL,A
   \   00002A   EF           MOV     A,R7
   \   00002B   12....       LCALL   ??Subroutine2_0
    355            pData->BeaconSec.SecurityLevel = false;
   \                     ??CrossCallReturnLabel_8:
   \   00002E   EE           MOV     A,R6
   \   00002F   2420         ADD     A,#0x20
   \   000031   12....       LCALL   ?Subroutine1
    356          
    357          
    358            MAC_MlmeStartReq((macMlmeStartReq_t *) pData);
   \                     ??CrossCallReturnLabel_3:
   \   000034   90....       MOV     DPTR,#(MAC_MlmeStartReq & 0xffff)
   \   000037   74..         MOV     A,#((MAC_MlmeStartReq >> 16) & 0xff)
   \   000039   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    359          
    360            // MAC does not issue mlmeStartConfirm(), so we have to
    361            // mlmeStartConfirm( stat );  This needs to be addressed some how
    362          
    363            return ZMacSuccess;
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   02....       LJMP    ?Subroutine6
    364          }

   \                                 In segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_20:
   \   000006                ; Setup parameters for call to function MAC_MlmeStartReq
   \   000006                ; Setup parameters for call to function MAC_McpsDataReq
   \   000006   EE           MOV     A,R6
   \   000007   FA           MOV     R2,A
   \   000008   EF           MOV     A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET
    365          
    366          /********************************************************************************************************
    367           * @fn      ZMacSyncReq
    368           *
    369           * @brief   This function is called to request a sync to the current
    370           *          networks beacons.
    371           *
    372           * @param   LogicalChannel -
    373           * @param   TrackBeacon - true/false
    374           *
    375           * @return  status
    376           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    377          ROOT uint8 ZMacSyncReq( ZMacSyncReq_t *pData )
   \                     ZMacSyncReq:
    378          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    379            MAC_MlmeSyncReq( (macMlmeSyncReq_t *)pData);
   \   000004                ; Setup parameters for call to function MAC_MlmeSyncReq
   \   000004   90....       MOV     DPTR,#(MAC_MlmeSyncReq & 0xffff)
   \   000007   74..         MOV     A,#((MAC_MlmeSyncReq >> 16) & 0xff)
   \   000009                REQUIRE ?Subroutine7
   \   000009                ; // Fall through to label ?Subroutine7
    380            return ZMacSuccess;
    381          }
    382          
    383          /********************************************************************************************************
    384           * @fn      ZMacPollReq
    385           *
    386           * @brief   This function is called to request MAC data request poll.
    387           *
    388           * @param   coordAddr -
    389           * @param   coordPanId -
    390           * @param   SecurityEnable - true or false.
    391           *
    392           * @return  status
    393           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    394          ROOT uint8 ZMacPollReq( ZMacPollReq_t *pData )
   \                     ZMacPollReq:
    395          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    396            /* Right now, set security to zero */
    397            pData->Sec.SecurityLevel = false;
   \   000004   12....       LCALL   ?Subroutine0
    398          
    399            MAC_MlmePollReq ((macMlmePollReq_t *)pData);
   \                     ??CrossCallReturnLabel_2:
   \   000007                ; Setup parameters for call to function MAC_MlmePollReq
   \   000007   90....       MOV     DPTR,#(MAC_MlmePollReq & 0xffff)
   \   00000A   74..         MOV     A,#((MAC_MlmePollReq >> 16) & 0xff)
   \   00000C   80..         SJMP    ?Subroutine7
    400            return ( ZMacSuccess );
    401          }
    402          
    403          /********************************************************************************************************
    404           * @fn      ZMacDataReq
    405           *
    406           * @brief   Send a MAC Data Frame packet.
    407           *
    408           * @param   structure containing data and where to send it.
    409           *
    410           * @return  status
    411           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    412          ROOT uint8 ZMacDataReq( ZMacDataReq_t *pData )
   \                     ZMacDataReq:
    413          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
    414            macMcpsDataReq_t *pBuf;
    415          
    416            /* Allocate memory */
    417            pBuf = MAC_McpsDataAlloc(pData->msduLength, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
   \   000009                ; Setup parameters for call to function MAC_McpsDataAlloc
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   7A00         MOV     R2,#0x0
   \   00000D   E5..         MOV     A,?V0 + 4
   \   00000F   241B         ADD     A,#0x1b
   \   000011   F582         MOV     DPL,A
   \   000013   E5..         MOV     A,?V0 + 5
   \   000015   12....       LCALL   ??Subroutine4_0
   \                     ??CrossCallReturnLabel_14:
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   90....       MOV     DPTR,#(MAC_McpsDataAlloc & 0xffff)
   \   00001D   74..         MOV     A,#((MAC_McpsDataAlloc >> 16) & 0xff)
   \   00001F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000022   8A..         MOV     ?V0 + 0,R2
   \   000024   8B..         MOV     ?V0 + 1,R3
   \   000026   AE..         MOV     R6,?V0 + 0
   \   000028   AF..         MOV     R7,?V0 + 1
    418          
    419            if (pBuf)
   \   00002A   EE           MOV     A,R6
   \   00002B   7001         JNZ     ??ZMacDataReq_0
   \   00002D   EF           MOV     A,R7
   \                     ??ZMacDataReq_0:
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??ZMacDataReq_1
    420            {
    421              /* Copy the addresses */
    422              osal_memcpy (&pBuf->mac, pData, sizeof (macDataReq_t));
   \   000033                ; Setup parameters for call to function osal_memcpy
   \   000033   85....       MOV     ?V0 + 0,?V0 + 4
   \   000036   85....       MOV     ?V0 + 1,?V0 + 5
   \   000039   75..00       MOV     ?V0 + 2,#0x0
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000041   7C10         MOV     R4,#0x10
   \   000043   7D00         MOV     R5,#0x0
   \   000045   EE           MOV     A,R6
   \   000046   241F         ADD     A,#0x1f
   \   000048   FA           MOV     R2,A
   \   000049   EF           MOV     A,R7
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   FB           MOV     R3,A
   \   00004D   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   000050   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   000052   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000055   7403         MOV     A,#0x3
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
    423          
    424              /* Copy data */
    425              pBuf->msdu.len = pData->msduLength;
   \   00005A   E5..         MOV     A,?V0 + 4
   \   00005C   241B         ADD     A,#0x1b
   \   00005E   F8           MOV     R0,A
   \   00005F   E5..         MOV     A,?V0 + 5
   \   000061   3400         ADDC    A,#0x0
   \   000063   F9           MOV     R1,A
   \   000064   E8           MOV     A,R0
   \   000065   FA           MOV     R2,A
   \   000066   E9           MOV     A,R1
   \   000067   FB           MOV     R3,A
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   F0           MOVX    @DPTR,A
    426              osal_memcpy (pBuf->msdu.p, pData->msdu, pData->msduLength);
   \   000076                ; Setup parameters for call to function osal_memcpy
   \   000076   E5..         MOV     A,?V0 + 4
   \   000078   241C         ADD     A,#0x1c
   \   00007A   F582         MOV     DPL,A
   \   00007C   E5..         MOV     A,?V0 + 5
   \   00007E   12....       LCALL   ??Subroutine4_0
   \                     ??CrossCallReturnLabel_15:
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F5..         MOV     ?V0 + 0,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F5..         MOV     ?V0 + 1,A
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008D   8A82         MOV     DPL,R2
   \   00008F   8B83         MOV     DPH,R3
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FC           MOV     R4,A
   \   000093   7D00         MOV     R5,#0x0
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   FA           MOV     R2,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FB           MOV     R3,A
   \   0000A0   90....       MOV     DPTR,#(osal_memcpy & 0xffff)
   \   0000A3   74..         MOV     A,#((osal_memcpy >> 16) & 0xff)
   \   0000A5   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000A8   7403         MOV     A,#0x3
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
    427          
    428              /* Right now, set security to zero */
    429              pBuf->sec.securityLevel = false;
   \   0000AD   EE           MOV     A,R6
   \   0000AE   241C         ADD     A,#0x1c
   \   0000B0   12....       LCALL   ?Subroutine1
    430          
    431              /* Call Mac Data Request */
    432              MAC_McpsDataReq(pBuf);
   \                     ??CrossCallReturnLabel_4:
   \   0000B3   90....       MOV     DPTR,#(MAC_McpsDataReq & 0xffff)
   \   0000B6   74..         MOV     A,#((MAC_McpsDataReq >> 16) & 0xff)
   \   0000B8   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    433          
    434              return ( ZMacSuccess );
   \   0000BB   7900         MOV     R1,#0x0
   \   0000BD   8002         SJMP    ??ZMacDataReq_2
    435            }
    436          
    437            return MAC_NO_RESOURCES;
   \                     ??ZMacDataReq_1:
   \   0000BF   791A         MOV     R1,#0x1a
   \                     ??ZMacDataReq_2:
   \   0000C1   7F06         MOV     R7,#0x6
   \   0000C3   02....       LJMP    ?FUNC_LEAVE_XDATA
    438          }
    439          
    440          /********************************************************************************************************
    441           * @fn      ZMacPurgeReq
    442           *
    443           * @brief   Purge a MAC Data Frame packet.
    444           *
    445           * @param   MSDU data handle.
    446           *
    447           * @return  status
    448           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    449          ROOT uint8 ZMacPurgeReq( byte Handle )
   \                     ZMacPurgeReq:
    450          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    451            MAC_McpsPurgeReq( Handle );
   \   000004                ; Setup parameters for call to function MAC_McpsPurgeReq
   \   000004   90....       MOV     DPTR,#(MAC_McpsPurgeReq & 0xffff)
   \   000007   74..         MOV     A,#((MAC_McpsPurgeReq >> 16) & 0xff)
   \   000009   02....       LJMP    ?Subroutine7
    452            return ZMacSuccess;
    453          }
    454          
    455          /********************************************************************************************************
    456           * @fn      - ZMACPwrOnReq
    457           *
    458           * @brief   - This function requests the MAC to power on the radio hardware
    459           *            and wake up.  When the power on procedure is complete the MAC
    460           *            will send a MAC_PWR_ON_CNF to the application.
    461           *
    462           * @input   - None.
    463           *
    464           * @output  - None.
    465           *
    466           * @return  - None.
    467           ********************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    468          void ZMacPwrOnReq ( void )
   \                     ZMacPwrOnReq:
    469          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    470            MAC_PwrOnReq();
   \   000004                ; Setup parameters for call to function MAC_PwrOnReq
   \   000004   90....       MOV     DPTR,#(MAC_PwrOnReq & 0xffff)
   \   000007   74..         MOV     A,#((MAC_PwrOnReq >> 16) & 0xff)
   \   000009                REQUIRE ?Subroutine9
   \   000009                ; // Fall through to label ?Subroutine9
    471          }

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000003   D083         POP     DPH
   \   000005   D082         POP     DPL
   \   000007   02....       LJMP    ?BRET
    472          
    473          /********************************************************************************************************
    474           * @fn          MAC_PwrMode
    475           *
    476           * @brief       This function returns the current power mode of the MAC.
    477           *
    478           * input parameters
    479           *
    480           * None.
    481           *
    482           * output parameters
    483           *
    484           * None.
    485           *
    486           * @return      The current power mode of the MAC.
    487           ********************************************************************************************************/

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    488          uint8 ZMac_PwrMode(void)
   \                     ZMac_PwrMode:
    489          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    490            return (MAC_PwrMode());
   \   000004                ; Setup parameters for call to function MAC_PwrMode
   \   000004   90....       MOV     DPTR,#(MAC_PwrMode & 0xffff)
   \   000007   74..         MOV     A,#((MAC_PwrMode >> 16) & 0xff)
   \   000009   80..         SJMP    ?Subroutine9
    491          }
    492          
    493          /********************************************************************************************************
    494           * @fn      ZMacSetTransmitPower
    495           *
    496           * @brief   Set the transmitter power according to the level setting param.
    497           *
    498           * @param   Valid power level setting as defined in ZMAC.h.
    499           *
    500           * @return  ZMacSuccess if PHY_TRANSMIT_POWER found or ZMacUnsupportedAttribute.
    501           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    502          ROOT uint8 ZMacSetTransmitPower( ZMacTransmitPower_t level )
   \                     ZMacSetTransmitPower:
    503          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    504            uint8 pwr;
    505          
    506            if ( (level /= 2) >= 8 )
   \   00000A   E9           MOV     A,R1
   \   00000B   C3           CLR     C
   \   00000C   13           RRC     A
   \   00000D   F9           MOV     R1,A
   \   00000E   C3           CLR     C
   \   00000F   9408         SUBB    A,#0x8
   \   000011   4005         JC      ??ZMacSetTransmitPower_0
    507            {
    508              pwr = TxPowerSettings[0];
   \   000013   90....       MOV     DPTR,#??TxPowerSettings
   \   000016   800A         SJMP    ??ZMacSetTransmitPower_1
    509            }
    510            else
    511            {
    512              pwr = TxPowerSettings[level];
   \                     ??ZMacSetTransmitPower_0:
   \   000018   E9           MOV     A,R1
   \   000019   24..         ADD     A,#(??TxPowerSettings & 0xff)
   \   00001B   F582         MOV     DPL,A
   \   00001D   E4           CLR     A
   \   00001E   34..         ADDC    A,#((??TxPowerSettings >> 8) & 0xff)
   \   000020   F583         MOV     DPH,A
   \                     ??ZMacSetTransmitPower_1:
   \   000022   E4           CLR     A
   \   000023   93           MOVC    A,@A+DPTR
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   F0           MOVX    @DPTR,A
    513            }
    514          
    515            if ( MAC_MlmeSetReq( ZMacPhyTransmitPower, &pwr ) == ZSUCCESS )
   \   00002B                ; Setup parameters for call to function MAC_MlmeSetReq
   \   00002B   AA82         MOV     R2,DPL
   \   00002D   AB83         MOV     R3,DPH
   \   00002F   79E0         MOV     R1,#-0x20
   \   000031   90....       MOV     DPTR,#(MAC_MlmeSetReq & 0xffff)
   \   000034   74..         MOV     A,#((MAC_MlmeSetReq >> 16) & 0xff)
   \   000036   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000039   E9           MOV     A,R1
   \   00003A   7004         JNZ     ??ZMacSetTransmitPower_2
    516            {
    517              //msupSetTransmitPower();
    518              return ZMacSuccess;
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   8002         SJMP    ??ZMacSetTransmitPower_3
    519            }
    520          
    521            return ZMacUnsupportedAttribute;
   \                     ??ZMacSetTransmitPower_2:
   \   000040   79F4         MOV     R1,#-0xc
   \                     ??ZMacSetTransmitPower_3:
   \   000042   7401         MOV     A,#0x1
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   7F02         MOV     R7,#0x2
   \   000049   02....       LJMP    ?FUNC_LEAVE_XDATA
    522          }
    523          
    524          /********************************************************************************************************
    525           * @fn      ZMacSendNoData
    526           *
    527           * @brief   This function sends an empty msg
    528           *
    529           * @param   DstAddr   - destination short address
    530           *          DstPANId  - destination pan id
    531           *
    532           * @return  None
    533           ********************************************************************************************************/

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    534          ROOT void ZMacSendNoData ( uint16 DstAddr, uint16 DstPANId )
   \                     ZMacSendNoData:
    535          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    536            macMcpsDataReq_t *pBuf;
    537          
    538            /* Allocate memory */
    539            pBuf = MAC_McpsDataAlloc(0, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
   \   00000D                ; Setup parameters for call to function MAC_McpsDataAlloc
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   90....       MOV     DPTR,#(MAC_McpsDataAlloc & 0xffff)
   \   000016   74..         MOV     A,#((MAC_McpsDataAlloc >> 16) & 0xff)
   \   000018   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    540          
    541            if (pBuf)
   \   00001B   EA           MOV     A,R2
   \   00001C   7001         JNZ     ??ZMacSendNoData_0
   \   00001E   EB           MOV     A,R3
   \                     ??ZMacSendNoData_0:
   \   00001F   603F         JZ      ??ZMacSendNoData_1
    542            {
    543              /* Fill in src information */
    544              pBuf->mac.srcAddrMode              = SADDR_MODE_SHORT;
   \   000021   EA           MOV     A,R2
   \   000022   242A         ADD     A,#0x2a
   \   000024   12....       LCALL   ?Subroutine3
    545          
    546              /* Fill in dst information */
    547              pBuf->mac.dstAddr.addr.shortAddr   = DstAddr;
   \                     ??CrossCallReturnLabel_11:
   \   000027   241F         ADD     A,#0x1f
   \   000029   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_16:
   \   00002C   E5..         MOV     A,?V0 + 0
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   E5..         MOV     A,?V0 + 1
   \   000032   F0           MOVX    @DPTR,A
    548              pBuf->mac.dstAddr.addrMode         = SADDR_MODE_SHORT;
   \   000033   EA           MOV     A,R2
   \   000034   2427         ADD     A,#0x27
   \   000036   12....       LCALL   ?Subroutine3
    549              pBuf->mac.dstPanId                 = DstPANId;
   \                     ??CrossCallReturnLabel_12:
   \   000039   2428         ADD     A,#0x28
   \   00003B   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_17:
   \   00003E   EE           MOV     A,R6
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   EF           MOV     A,R7
   \   000042   F0           MOVX    @DPTR,A
    550          
    551              /* Misc information */
    552              pBuf->mac.msduHandle               = 0;
   \   000043   EA           MOV     A,R2
   \   000044   242B         ADD     A,#0x2b
   \   000046   12....       LCALL   ?Subroutine2
    553              pBuf->mac.txOptions                = ZMAC_TXOPTION_ACK | ZMAC_TXOPTION_NO_RETRANS | ZMAC_TXOPTION_NO_CNF;
   \                     ??CrossCallReturnLabel_9:
   \   000049   EA           MOV     A,R2
   \   00004A   242C         ADD     A,#0x2c
   \   00004C   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_18:
   \   00004F   7431         MOV     A,#0x31
   \   000051   F0           MOVX    @DPTR,A
    554          
    555              /* Right now, set security to zero */
    556              pBuf->sec.securityLevel = false;
   \   000052   EA           MOV     A,R2
   \   000053   241C         ADD     A,#0x1c
   \   000055   12....       LCALL   ?Subroutine2
    557          
    558              /* Call Mac Data Request */
    559              MAC_McpsDataReq(pBuf);
   \                     ??CrossCallReturnLabel_10:
   \   000058                ; Setup parameters for call to function MAC_McpsDataReq
   \   000058   90....       MOV     DPTR,#(MAC_McpsDataReq & 0xffff)
   \   00005B   74..         MOV     A,#((MAC_McpsDataReq >> 16) & 0xff)
   \   00005D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    560            }
    561          
    562          }
   \                     ??ZMacSendNoData_1:
   \   000060   02....       LJMP    ?Subroutine8

   \                                 In segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   7402         MOV     A,#0x2
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EA           MOV     A,R2
   \   00000B   22           RET

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     ZMacAssociateReq                 3      0      0
       -> MAC_MlmeAssociateReq        4      0      0
     ZMacAssociateRsp                 3      0      0
       -> MAC_MlmeAssociateRsp        4      0      0
     ZMacDataReq                      1      0     16
       -> MAC_McpsDataAlloc           0      0     26
       -> osal_memcpy                 0      0     32
       -> osal_memcpy                 0      0     32
       -> MAC_McpsDataReq             0      0     26
     ZMacDisassociateReq              3      0      0
       -> MAC_MlmeDisassociateReq     4      0      0
     ZMacGetReq                       2      0      0
       -> osal_cpyExtAddr             4      0      0
       -> MAC_MlmeGetReq              4      0      0
     ZMacInit                         0      0      8
       -> MAC_Init                    0      0     16
       -> MAC_InitDevice              0      0     16
       -> MAC_InitCoord               0      0     16
       -> ZMacReset                   0      0     16
       -> osal_int_disable            0      0     16
     ZMacOrphanRsp                    3      0      0
       -> MAC_MlmeOrphanRsp           4      0      0
     ZMacPollReq                      3      0      0
       -> MAC_MlmePollReq             4      0      0
     ZMacPurgeReq                     2      0      0
       -> MAC_McpsPurgeReq            4      0      0
     ZMacPwrOnReq                     2      0      0
       -> MAC_PwrOnReq                4      0      0
     ZMacReset                        1      0     17
       -> MAC_MlmeResetReq            0      0     18
       -> MAC_MlmeSetReq              0      0     18
       -> MAC_MlmeSetReq              0      0     18
       -> osal_mem_free               0      0     18
     ZMacRxEnableReq                  0      0      0
     ZMacScanReq                      1      0     11
       -> osal_mem_alloc              0      0     22
       -> osal_memset                 0      0     22
       -> osal_mem_alloc              0      0     22
       -> MAC_MlmeScanReq             0      0     22
     ZMacSendNoData                   1      0     11
       -> MAC_McpsDataAlloc           0      0     22
       -> MAC_McpsDataReq             0      0     22
     ZMacSetReq                       0      0      8
       -> osal_cpyExtAddr             0      0     16
       -> MAC_MlmeSetReq              0      0     16
     ZMacSetTransmitPower             1      0     10
       -> MAC_MlmeSetReq              0      0     20
     ZMacStartReq                     1      0      9
       -> MAC_MlmeSetReq              0      0     18
       -> MAC_MlmeStartReq            0      0     18
     ZMacSyncReq                      2      0      0
       -> MAC_MlmeSyncReq             4      0      0
     ZMacUpdate                       0      0      0
     ZMac_PwrMode                     2      0      0
       -> MAC_PwrMode                 4      0      0


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     TxPowerSettings         8
     _ScanChannels           4
     ZMac_ScanBuf            2
     ZMacInit               50
     ?Subroutine6           10
     ZMacUpdate              3
     ZMacReset              90
     ZMacGetReq             36
     ?Subroutine7           10
     ZMacSetReq             50
     ZMacAssociateReq       18
     ?Subroutine2            7
     ?Subroutine5            7
     ZMacAssociateRsp       15
     ?Subroutine0           10
     ZMacDisassociateReq    18
     ZMacOrphanRsp          15
     ZMacRxEnableReq         3
     ZMacScanReq           277
     ?Subroutine8            5
     ?Subroutine4            8
     ZMacStartReq           65
     ?Subroutine1           11
     ZMacSyncReq             9
     ZMacPollReq            14
     ZMacDataReq           198
     ZMacPurgeReq           12
     ZMacPwrOnReq            9
     ?Subroutine9           10
     ZMac_PwrMode           11
     ZMacSetTransmitPower   76
     ZMacSendNoData         99
     ?Subroutine3           12

 
    30 bytes in segment BANKED_CODE
     8 bytes in segment CODE_C
 1 128 bytes in segment NEAR_CODE
     6 bytes in segment XDATA_Z
 
 1 166 bytes of CODE  memory
     6 bytes of XDATA memory

Errors: none
Warnings: none
