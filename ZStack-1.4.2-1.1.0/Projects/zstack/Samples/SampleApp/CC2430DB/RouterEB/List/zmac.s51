//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR 8051 C/C++ Compiler V7.20H/W32                  24/Jan/2013  14:47:51 /
// Copyright 2004-2006 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Core               =  plain                                            /
//    Code model         =  banked                                           /
//    Data model         =  large                                            /
//    Calling convention =  xdata reentrant                                  /
//    Constant location  =  data                                             /
//    Dptr setup         =  1,16                                             /
//    Source file        =  D:\Texas Instruments\ZStack-1.4.2-1.1.0\Componen /
//                          ts\zmac\f8w\zmac.c                               /
//    Command line       =  -f E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\Tools\CC2430D /
//                          B\f8wRouter.cfg (-DCPU32MHZ -DFORCE_MAC_NEAR     /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=T /
//                          RUE -DRTR_NWK -DBLINK_LEDS "-DCONST=const        /
//                          __code" -DGENERIC=__generic) -f                  /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\Tools\CC2430DB\f /
//                          8wConfig.cfg (-DSECURE=0                         /
//                          -DDEFAULT_CHANLIST=0x00000800                    /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                     /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_ /
//                          MASK=0x007F -DBEACON_REQUEST_DELAY=100           /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                   /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_ /
//                          POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7         /
//                          -DMAX_RREQ_ENTRIES=10 -DAPSC_MAX_FRAME_RETRIES=3 /
//                           -DNWK_MAX_DATA_RETRIES=2                        /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9       /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=20         /
//                          -DNWK_MAX_BINDING_ENTRIES=10                     /
//                          -DMAX_BINDING_CLUSTER_IDS=5                      /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,    /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,  /
//                          0x0A, 0x0C, 0x0D}" -DRFD_RCVC_ALWAYS_ON=FALSE    /
//                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100          /
//                          -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440  /
//                          -DTOP_BOOT_PAGES=0) -I "D:\Program Files\IAR     /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\" -I "D:\Program Files\IAR      /
//                          Systems\Embedded Workbench 4.05 Evaluation       /
//                          version\8051\inc\clib\" -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\ -I                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\Source\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\ZMain\TI2430DB\  /
//                          -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\..\..\..\..\..\Compone /
//                          nts\mt\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ /
//                          \ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ /
//                          ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\ /
//                          zstack\Samples\SampleApp\CC2430DB\..\..\..\..\.. /
//                          \Components\hal\include\ -I                      /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \hal\target\CC2430EB\ -I                         /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \osal\mcu\ccsoc\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I            /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\af\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢× /
//                          ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee20 /
//                          06\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projec /
//                          ts\zstack\Samples\SampleApp\CC2430DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\sec\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\stack\sys\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \stack\zdo\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢ /
//                          ×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2 /
//                          006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2430DB\..\..\..\. /
//                          .\..\Components\zmac\f8w\ -I                     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \zmac\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ /
//                          ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\Z /
//                          igBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\z /
//                          stack\Samples\SampleApp\CC2430DB\..\..\..\..\..\ /
//                          Components\services\saddr\ -I                    /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \services\sdata\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I             /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\high_level\ -I E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC243 /
//                          0¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\Zi /
//                          gBee2006\ZigBee2006-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\ /
//                          Projects\zstack\Samples\SampleApp\CC2430DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf03\ -I     /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf03\single_chip\ -D CC2430EB    /
//                          -D ZTOOL_P1 -D MT_TASK -lC                       /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\ -lA        /
//                          E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\            /
//                          --diag_suppress Pe001,Pa010 --diag_remark pe550  /
//                          -o E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂ /
//                          ç¿ª·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee20 /
//                          06-´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\S /
//                          amples\SampleApp\CC2430DB\RouterEB\Obj\ -e       /
//                          --require_prototypes -z9 --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                 /
//                          --data_model=large --code_model=banked           /
//                          --calling_convention=xdata_reentrant             /
//                          --place_constants=data --nr_virtual_regs 8       /
//                          "D:\Texas Instruments\ZStack-1.4.2-1.1.0\Compone /
//                          nts\zmac\f8w\zmac.c"                             /
//    List file          =  E:\ÑÐ¶þÉÏ\CPS\ÊµÑéÆ½Ì¨\CC2430¿ª·¢×ÊÁÏ\ÎÞÏßÍøÂç¿ª /
//                          ·¢Æ½Ì¨\C51RF-3-PKÑÝÊ¾³ÌÐò\ZigBee2006\ZigBee2006- /
//                          ´®¿Ú»¥·¢\ZStack-1.4.2-1.1.0\Projects\zstack\Samp /
//                          les\SampleApp\CC2430DB\RouterEB\List\zmac.s51    /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME zmac

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BCALL
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN __INIT_XDATA_Z

        PUBLIC ZMacAssociateReq
        FUNCTION ZMacAssociateReq,021203H
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZMacAssociateRsp
        FUNCTION ZMacAssociateRsp,021203H
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZMacDataReq
        FUNCTION ZMacDataReq,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZMacDisassociateReq
        FUNCTION ZMacDisassociateReq,021203H
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZMacGetReq
        FUNCTION ZMacGetReq,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacInit
        FUNCTION ZMacInit,021203H
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZMacOrphanRsp
        FUNCTION ZMacOrphanRsp,021203H
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZMacPollReq
        FUNCTION ZMacPollReq,021203H
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZMacPurgeReq
        FUNCTION ZMacPurgeReq,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacPwrOnReq
        FUNCTION ZMacPwrOnReq,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacReset
        FUNCTION ZMacReset,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacRxEnableReq
        FUNCTION ZMacRxEnableReq,0203H
        PUBLIC ZMacScanReq
        FUNCTION ZMacScanReq,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZMacSendNoData
        FUNCTION ZMacSendNoData,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZMacSetReq
        FUNCTION ZMacSetReq,021203H
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZMacSetTransmitPower
        FUNCTION ZMacSetTransmitPower,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacStartReq
        FUNCTION ZMacStartReq,021203H
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacSyncReq
        FUNCTION ZMacSyncReq,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacUpdate
        FUNCTION ZMacUpdate,0203H
        PUBLIC ZMac_PwrMode
        FUNCTION ZMac_PwrMode,021203H
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMac_ScanBuf
        PUBLIC _ScanChannels
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        
        CFI Common cfiCommon2 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon2
        
        EXTERN MAC_Init
        FUNCTION MAC_Init,0202H
        ARGFRAME XSTACK, 8, STACK
        EXTERN MAC_InitDevice
        FUNCTION MAC_InitDevice,0202H
        ARGFRAME XSTACK, 8, STACK
        EXTERN MAC_InitCoord
        FUNCTION MAC_InitCoord,0202H
        ARGFRAME XSTACK, 8, STACK
        EXTERN osal_int_disable
        FUNCTION osal_int_disable,0202H
        ARGFRAME XSTACK, 8, STACK
        EXTERN MAC_MlmeResetReq
        FUNCTION MAC_MlmeResetReq,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN MAC_MlmeSetReq
        FUNCTION MAC_MlmeSetReq,0202H
        ARGFRAME XSTACK, 10, STACK
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN osal_cpyExtAddr
        FUNCTION osal_cpyExtAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME XSTACK, 8, STACK
        EXTERN MAC_MlmeGetReq
        FUNCTION MAC_MlmeGetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN MAC_MlmeAssociateReq
        FUNCTION MAC_MlmeAssociateReq,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN MAC_MlmeAssociateRsp
        FUNCTION MAC_MlmeAssociateRsp,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN MAC_MlmeDisassociateReq
        FUNCTION MAC_MlmeDisassociateReq,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN MAC_MlmeOrphanRsp
        FUNCTION MAC_MlmeOrphanRsp,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME XSTACK, 11, STACK
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME XSTACK, 11, STACK
        EXTERN MAC_MlmeScanReq
        FUNCTION MAC_MlmeScanReq,0202H
        ARGFRAME XSTACK, 11, STACK
        EXTERN MAC_MlmeStartReq
        FUNCTION MAC_MlmeStartReq,0202H
        ARGFRAME XSTACK, 9, STACK
        EXTERN MAC_MlmeSyncReq
        FUNCTION MAC_MlmeSyncReq,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN MAC_MlmePollReq
        FUNCTION MAC_MlmePollReq,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN MAC_McpsDataAlloc
        FUNCTION MAC_McpsDataAlloc,0202H
        ARGFRAME XSTACK, 13, STACK
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME XSTACK, 16, STACK
        EXTERN MAC_McpsDataReq
        FUNCTION MAC_McpsDataReq,0202H
        ARGFRAME XSTACK, 13, STACK
        EXTERN MAC_McpsPurgeReq
        FUNCTION MAC_McpsPurgeReq,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN MAC_PwrOnReq
        FUNCTION MAC_PwrOnReq,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN MAC_PwrMode
        FUNCTION MAC_PwrMode,0202H
        ARGFRAME ISTACK, 2, STACK
        EXTERN aExtendedAddress

// D:\Texas Instruments\ZStack-1.4.2-1.1.0\Components\zmac\f8w\zmac.c
//    1 /********************************************************************************************************
//    2     Filename:       zmac.c
//    3     Revised:        $Date: 2006-11-28 13:47:33 -0800 (Tue, 28 Nov 2006) $
//    4     Revision:       $Revision: 12837 $
//    5 
//    6     Description:
//    7 
//    8     This file contains the ZStack MAC Porting Layer
//    9 
//   10     Notes:
//   11 
//   12     Copyright (c) 2006 by Texas Instruments, Inc.
//   13     All Rights Reserved.  Permission to use, reproduce, copy, prepare
//   14     derivative works, modify, distribute, perform, display or sell this
//   15     software and/or its documentation for any purpose is prohibited
//   16     without the express written consent of Texas Instruments, Inc.
//   17  ********************************************************************************************************/
//   18 
//   19 
//   20 /********************************************************************************************************
//   21  *                                               INCLUDES
//   22  ********************************************************************************************************/
//   23 
//   24 #include "ZComDef.h"
//   25 #include "OSAL.h"
//   26 #include "ZMAC.h"
//   27 
//   28 /********************************************************************************************************
//   29  *                                                 MACROS
//   30  ********************************************************************************************************/
//   31 
//   32 /********************************************************************************************************
//   33  *                                               CONSTANTS
//   34  ********************************************************************************************************/

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
//   35 static CONST byte TxPowerSettings[] =
??TxPowerSettings:
        DB 0, 33, 35, 37, 39, 42, 47, 57
//   36 {
//   37   OUTPUT_POWER_0DBM,
//   38   OUTPUT_POWER_N1DBM,
//   39   OUTPUT_POWER_N3DBM,
//   40   OUTPUT_POWER_N5DBM,
//   41   OUTPUT_POWER_N7DBM,
//   42   OUTPUT_POWER_N10DBM,
//   43   OUTPUT_POWER_N15DBM,
//   44   OUTPUT_POWER_N25DBM
//   45 };
//   46 
//   47 /********************************************************************************************************
//   48  *                                               GLOBALS
//   49  ********************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   50 uint32 _ScanChannels;
_ScanChannels:
        DS 4
//   51 
//   52 extern uint8 aExtendedAddress[];
//   53 
//   54 /********************************************************************************************************
//   55  *                                               LOCALS
//   56  ********************************************************************************************************/
//   57 
//   58 /* Pointer to scan result buffer */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        REQUIRE __INIT_XDATA_Z
//   59 void *ZMac_ScanBuf = NULL;
ZMac_ScanBuf:
        DS 2
//   60 
//   61 /********************************************************************************************************
//   62  * LOCAL FUNCTION PROTOTYPES
//   63  ********************************************************************************************************/
//   64 
//   65 /********************************************************************************************************
//   66  *                                                TYPEDEFS
//   67  ********************************************************************************************************/
//   68 
//   69 
//   70 /********************************************************************************************************
//   71  *                                                FUNCTIONS
//   72  ********************************************************************************************************/
//   73 
//   74 /********************************************************************************************************
//   75  * @fn      ZMacInit
//   76  *
//   77  * @brief   Initialize MAC.
//   78  *
//   79  * @param   none.
//   80  *
//   81  * @return  status.
//   82  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   83 ROOT uint8 ZMacInit( void )
ZMacInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZMacInit
//   84 {
        FUNCALL ZMacInit, MAC_Init
        LOCFRAME XSTACK, 8, STACK
        ARGFRAME XSTACK, 8, STACK
        FUNCALL ZMacInit, MAC_InitDevice
        LOCFRAME XSTACK, 8, STACK
        ARGFRAME XSTACK, 8, STACK
        FUNCALL ZMacInit, MAC_InitCoord
        LOCFRAME XSTACK, 8, STACK
        ARGFRAME XSTACK, 8, STACK
        FUNCALL ZMacInit, ZMacReset
        LOCFRAME XSTACK, 8, STACK
        ARGFRAME XSTACK, 8, STACK
        FUNCALL ZMacInit, osal_int_disable
        LOCFRAME XSTACK, 8, STACK
        ARGFRAME XSTACK, 8, STACK
        MOV	A,#-0x8
        LCALL	?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
//   85   uint8 stat;
//   86 
//   87   MAC_Init();
        ; Setup parameters for call to function MAC_Init
        MOV	DPTR,#(MAC_Init & 0xffff)
        MOV	A,#((MAC_Init >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//   88   MAC_InitDevice();
        ; Setup parameters for call to function MAC_InitDevice
        MOV	DPTR,#(MAC_InitDevice & 0xffff)
        MOV	A,#((MAC_InitDevice >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//   89 
//   90 #if defined ( RTR_NWK )
//   91   MAC_InitCoord();
        ; Setup parameters for call to function MAC_InitCoord
        MOV	DPTR,#(MAC_InitCoord & 0xffff)
        MOV	A,#((MAC_InitCoord >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//   92 #endif
//   93 
//   94   // If OK, initialize the MAC
//   95   stat = ZMacReset( TRUE );
        ; Setup parameters for call to function ZMacReset
        MOV	R1,#0x1
        LCALL	ZMacReset
        MOV	A,R1
        MOV	R6,A
//   96 
//   97   // Turn off interrupts
//   98   osal_int_disable( INTS_ALL );
        ; Setup parameters for call to function osal_int_disable
        MOV	R1,#-0x1
        MOV	DPTR,#(osal_int_disable & 0xffff)
        MOV	A,#((osal_int_disable >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//   99 
//  100   return ( stat );
        MOV	A,R6
        MOV	R1,A
        SJMP	??Subroutine6_0
        CFI EndBlock cfiBlock0
//  101 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 8)
??Subroutine6_0:
        MOV	R7,#0x1
        LJMP	?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  102 
//  103 /********************************************************************************************************
//  104  * @fn      ZMacUpdate
//  105  *
//  106  * @brief   Gives MAC (or others) some processing time.
//  107  *
//  108  * @param   none.
//  109  *
//  110  * @return  true if CPU needs to keep running (not sleep).
//  111  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  112 ROOT byte ZMacUpdate( void )
ZMacUpdate:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ZMacUpdate
//  113 {
        ; Saved register size: 0
        ; Auto size: 0
//  114   /* Put code here that needs to run each OSAL event loop */
//  115   return ( false );
        MOV	R1,#0x0
        RET
        CFI EndBlock cfiBlock2
//  116 }
//  117 
//  118 /********************************************************************************************************
//  119  * @fn      ZMacReset
//  120  *
//  121  * @brief   Reset the MAC.
//  122  *
//  123  * @param   Default to PIB defaults.
//  124  *
//  125  * @return  status.
//  126  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  127 ROOT uint8 ZMacReset( bool SetDefaultPIB )
ZMacReset:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ZMacReset
//  128 {
        FUNCALL ZMacReset, MAC_MlmeResetReq
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZMacReset, MAC_MlmeSetReq
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZMacReset, MAC_MlmeSetReq
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZMacReset, osal_mem_free
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x8
        LCALL	?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
//  129   byte stat;
//  130   byte value;
//  131 
//  132   stat = MAC_MlmeResetReq( SetDefaultPIB );
        ; Setup parameters for call to function MAC_MlmeResetReq
        MOV	DPTR,#(MAC_MlmeResetReq & 0xffff)
        MOV	A,#((MAC_MlmeResetReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        MOV	R6,A
//  133 
//  134   // Don't send PAN ID conflict
//  135   value = FALSE;
        CLR	A
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//  136   MAC_MlmeSetReq( MAC_ASSOCIATED_PAN_COORD, &value );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	R1,#0x56
        MOV	DPTR,#(MAC_MlmeSetReq & 0xffff)
        MOV	A,#((MAC_MlmeSetReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  137   MAC_MlmeSetReq( MAC_EXTENDED_ADDRESS, &aExtendedAddress );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV	R2,#(aExtendedAddress & 0xff)
        MOV	R3,#((aExtendedAddress >> 8) & 0xff)
        MOV	R1,#-0x1e
        MOV	A,#((MAC_MlmeSetReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  138 
//  139   if (ZMac_ScanBuf)
        MOV	DPTR,#ZMac_ScanBuf
        MOVX	A,@DPTR
        JNZ	??ZMacReset_0
        INC	DPTR
        MOVX	A,@DPTR
??ZMacReset_0:
        JZ	??ZMacReset_1
//  140   {
//  141     osal_mem_free(ZMac_ScanBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV	DPTR,#ZMac_ScanBuf
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#(osal_mem_free & 0xffff)
        MOV	A,#((osal_mem_free >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  142     ZMac_ScanBuf = NULL;
        MOV	DPTR,#ZMac_ScanBuf
        CLR	A
        MOVX	@DPTR,A
        INC	DPTR
        MOVX	@DPTR,A
//  143   }
//  144 
//  145   return ( stat );
??ZMacReset_1:
        MOV	A,R6
        MOV	R1,A
        SJMP	?Subroutine6
        CFI EndBlock cfiBlock3
//  146 }
//  147 
//  148 
//  149 /********************************************************************************************************
//  150  * @fn      ZMacGetReq
//  151  *
//  152  * @brief   Read a MAC PIB attribute.
//  153  *
//  154  * @param   attr - PIB attribute to get
//  155  * @param   value - pointer to the buffer to store the attribute
//  156  *
//  157  * @return  status
//  158  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  159 ROOT uint8 ZMacGetReq( uint8 attr, uint8 *value )
ZMacGetReq:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ZMacGetReq
//  160 {
        FUNCALL ZMacGetReq, osal_cpyExtAddr
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        FUNCALL ZMacGetReq, MAC_MlmeGetReq
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  161   if ( attr == ZMacExtAddr )
        MOV	A,#-0x1e
        XRL	A,R1
        JNZ	??ZMacGetReq_0
//  162   {
//  163     osal_cpyExtAddr( value, &aExtendedAddress );
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	R4,#(aExtendedAddress & 0xff)
        MOV	R5,#((aExtendedAddress >> 8) & 0xff)
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  164     return ZMacSuccess;
        MOV	R1,#0x0
        SJMP	??ZMacGetReq_1
//  165   }
//  166 
//  167   return (ZMacStatus_t) MAC_MlmeGetReq( attr, value );
??ZMacGetReq_0:
        ; Setup parameters for call to function MAC_MlmeGetReq
        MOV	DPTR,#(MAC_MlmeGetReq & 0xffff)
        MOV	A,#((MAC_MlmeGetReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
??ZMacGetReq_1:
        LJMP	??Subroutine7_0
        CFI EndBlock cfiBlock4
//  168 }
//  169 
//  170 
//  171 /********************************************************************************************************
//  172  * @fn      ZMacSetReq
//  173  *
//  174  * @brief   Write a MAC PIB attribute.
//  175  *
//  176  * @param   attr - PIB attribute to Set
//  177  * @param   value - pointer to the data
//  178  *
//  179  * @return  status
//  180  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  181 ROOT uint8 ZMacSetReq( uint8 attr, byte *value )
ZMacSetReq:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ZMacSetReq
//  182 {
        FUNCALL ZMacSetReq, osal_cpyExtAddr
        LOCFRAME XSTACK, 8, STACK
        ARGFRAME XSTACK, 8, STACK
        FUNCALL ZMacSetReq, MAC_MlmeSetReq
        LOCFRAME XSTACK, 8, STACK
        ARGFRAME XSTACK, 8, STACK
        MOV	A,#-0x8
        LCALL	?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV	?V0 + 0,R1
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  183   if ( attr == ZMacExtAddr )
        MOV	A,#-0x1e
        XRL	A,?V0 + 0
        JNZ	??ZMacSetReq_0
//  184   {
//  185     osal_cpyExtAddr( &aExtendedAddress, value );
        ; Setup parameters for call to function osal_cpyExtAddr
        MOV	A,R6
        MOV	R4,A
        MOV	A,R7
        MOV	R5,A
        MOV	R2,#(aExtendedAddress & 0xff)
        MOV	R3,#((aExtendedAddress >> 8) & 0xff)
        MOV	DPTR,#(osal_cpyExtAddr & 0xffff)
        MOV	A,#((osal_cpyExtAddr >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  186   }
//  187 
//  188   return (ZMacStatus_t) MAC_MlmeSetReq( attr, value );
??ZMacSetReq_0:
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	R1,?V0 + 0
        MOV	DPTR,#(MAC_MlmeSetReq & 0xffff)
        MOV	A,#((MAC_MlmeSetReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        LJMP	??Subroutine6_0
        CFI EndBlock cfiBlock5
//  189 }
//  190 
//  191 /********************************************************************************************************
//  192  * @fn      ZMacAssociateReq
//  193  *
//  194  * @brief   Request an association with a coordinator.
//  195  *
//  196  * @param   structure with info need to associate.
//  197  *
//  198  * @return  status
//  199  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  200 ROOT uint8 ZMacAssociateReq( ZMacAssociateReq_t *pData )
ZMacAssociateReq:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ZMacAssociateReq
//  201 {
        FUNCALL ZMacAssociateReq, MAC_MlmeAssociateReq
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  202   /* Right now, set security to zero */
//  203   pData->Sec.SecurityLevel = false;
        MOV	A,R2
        ADD	A,#0x16
        LCALL	?Subroutine2
//  204 
//  205   MAC_MlmeAssociateReq ( (macMlmeAssociateReq_t *)pData);
??CrossCallReturnLabel_5:
        ; Setup parameters for call to function MAC_MlmeAssociateReq
        MOV	DPTR,#(MAC_MlmeAssociateReq & 0xffff)
        MOV	A,#((MAC_MlmeAssociateReq >> 16) & 0xff)
        LJMP	?Subroutine7
        CFI EndBlock cfiBlock6
//  206   return ( ZMacSuccess );
//  207 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond9) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond9) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond9) CFA_SP SP+-4
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV	DPL,A
        MOV	A,R3
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 9)
??Subroutine2_0:
        LCALL	?Subroutine5
??CrossCallReturnLabel_21:
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
//  208 
//  209 /********************************************************************************************************
//  210  * @fn      ZMacAssociateRsp
//  211  *
//  212  * @brief   Request to send an association response message.
//  213  *
//  214  * @param   structure with associate response and info needed to send it.
//  215  *
//  216  * @return  status
//  217  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  218 ROOT uint8 ZMacAssociateRsp( ZMacAssociateRsp_t *pData )
ZMacAssociateRsp:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function ZMacAssociateRsp
//  219 {
        FUNCALL ZMacAssociateRsp, MAC_MlmeAssociateRsp
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  220   /* Right now, set security to zero */
//  221   pData->Sec.SecurityLevel = false;
        LCALL	?Subroutine0
//  222 
//  223   MAC_MlmeAssociateRsp( (macMlmeAssociateRsp_t *) pData );
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function MAC_MlmeAssociateRsp
        MOV	DPTR,#(MAC_MlmeAssociateRsp & 0xffff)
        MOV	A,#((MAC_MlmeAssociateRsp >> 16) & 0xff)
        LJMP	?Subroutine7
        CFI EndBlock cfiBlock14
//  224   return ( ZMacSuccess );
//  225 }
//  226 
//  227 /********************************************************************************************************
//  228  * @fn      ZMacDisassociateReq
//  229  *
//  230  * @brief   Request to send a disassociate request message.
//  231  *
//  232  * @param   structure with info need send it.
//  233  *
//  234  * @return  status
//  235  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  236 ROOT uint8 ZMacDisassociateReq( ZMacDisassociateReq_t *pData )
ZMacDisassociateReq:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function ZMacDisassociateReq
//  237 {
        FUNCALL ZMacDisassociateReq, MAC_MlmeDisassociateReq
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  238   /* Right now, set security to zero */
//  239   pData->Sec.SecurityLevel = false;
        MOV	A,R2
        ADD	A,#0x15
        LCALL	?Subroutine2
//  240 
//  241   MAC_MlmeDisassociateReq( (macMlmeDisassociateReq_t *)pData);
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function MAC_MlmeDisassociateReq
        MOV	DPTR,#(MAC_MlmeDisassociateReq & 0xffff)
        MOV	A,#((MAC_MlmeDisassociateReq >> 16) & 0xff)
        LJMP	?Subroutine7
        CFI EndBlock cfiBlock15
//  242   return ( ZMacSuccess );
//  243 }
//  244 
//  245 /********************************************************************************************************
//  246  * @fn      ZMacOrphanRsp
//  247  *
//  248  * @brief   Allows next higher layer to respond to an orphan indication message.
//  249  *
//  250  * @param   structure with info need send it.
//  251  *
//  252  * @return  status
//  253  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  254 ROOT uint8 ZMacOrphanRsp( ZMacOrphanRsp_t *pData )
ZMacOrphanRsp:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function ZMacOrphanRsp
//  255 {
        FUNCALL ZMacOrphanRsp, MAC_MlmeOrphanRsp
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  256   /* Right now, set security to zero */
//  257   pData->Sec.SecurityLevel = false;
        LCALL	?Subroutine0
//  258 
//  259   MAC_MlmeOrphanRsp( (macMlmeOrphanRsp_t *)pData);
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function MAC_MlmeOrphanRsp
        MOV	DPTR,#(MAC_MlmeOrphanRsp & 0xffff)
        MOV	A,#((MAC_MlmeOrphanRsp >> 16) & 0xff)
        LJMP	?Subroutine7
        CFI EndBlock cfiBlock16
//  260   return ( ZMacSuccess );
//  261 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_1
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond18) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond18) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond18) CFA_SP SP+-4
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond19) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond19) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond19) CFA_SP SP+-4
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV	A,R2
        ADD	A,#0x13
        MOV	DPL,A
        MOV	A,R3
        LCALL	?Subroutine5
??CrossCallReturnLabel_19:
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_0
        CFI (cfiCond22) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond22) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond22) CFA_SP SP+-4
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_5
        CFI (cfiCond23) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond23) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond23) CFA_SP SP+-4
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_9
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_4
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_3
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_7
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_6
        CFI (cfiCond28) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond28) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond28) CFA_SP SP+-4
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_2
        CFI (cfiCond29) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond29) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond29) CFA_SP SP+-4
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_1
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond30) CFA_SP SP+-4
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_10
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        ADDC	A,#0x0
        MOV	DPH,A
        CLR	A
        MOVX	@DPTR,A
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32
//  262 
//  263 /********************************************************************************************************
//  264  * @fn      ZMacRxEnableReq
//  265  *
//  266  * @brief   This function contains timing information that tells the
//  267  *          device when to enable or disable its receiver, in order
//  268  *          to schedule a data transfer between itself and another
//  269  *          device. The information is sent from the upper layers
//  270  *          directly to the MAC sublayer.
//  271  *
//  272  * @param   structure with info need send it.
//  273  *
//  274  * @return  status
//  275  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  276 ROOT uint8 ZMacRxEnableReq( ZMacRxEnableReq_t *pData )
ZMacRxEnableReq:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function ZMacRxEnableReq
//  277 {
        ; Saved register size: 0
        ; Auto size: 0
//  278   /* This feature is no longer in the TIMAC */
//  279   return ( ZMacUnsupported );
        MOV	R1,#-0xb
        RET
        CFI EndBlock cfiBlock33
//  280 }
//  281 
//  282 /********************************************************************************************************
//  283  * @fn      ZMacScanReq
//  284  *
//  285  * @brief   This function is called to perform a network scan.
//  286  *
//  287  * @param   param - structure with info need send it.
//  288  *
//  289  * @return  status
//  290  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  291 ROOT uint8 ZMacScanReq( ZMacScanReq_t *pData )
ZMacScanReq:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function ZMacScanReq
//  292 {
        FUNCALL ZMacScanReq, osal_mem_alloc
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        FUNCALL ZMacScanReq, osal_memset
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        FUNCALL ZMacScanReq, osal_mem_alloc
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        FUNCALL ZMacScanReq, MAC_MlmeScanReq
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        MOV	A,#-0xb
        LCALL	?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  293   _ScanChannels = pData->ScanChannels;
        MOV	DPL,R6
        MOV	DPH,R7
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_X
        MOV	DPTR,#_ScanChannels
        MOV	R0,#?V0 + 0
        LCALL	?L_MOV_TO_X
//  294 
//  295   /* scan in progress */
//  296   if (ZMac_ScanBuf != NULL)
        MOV	DPTR,#ZMac_ScanBuf
        MOVX	A,@DPTR
        JNZ	??ZMacScanReq_0
        INC	DPTR
        MOVX	A,@DPTR
??ZMacScanReq_0:
        JZ	??ZMacScanReq_1
//  297   {
//  298     return MAC_SCAN_IN_PROGRESS;
        MOV	R1,#-0x4
        LJMP	??ZMacScanReq_2
//  299   }
//  300 
//  301   if (pData->ScanType != ZMAC_ORPHAN_SCAN)
??ZMacScanReq_1:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        XRL	A,#0x3
        JNZ	$+5
        LJMP	??ZMacScanReq_3
//  302   {
//  303     /* Allocate memory depends on the scan type */
//  304     if (pData->ScanType == ZMAC_ED_SCAN)
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JNZ	??ZMacScanReq_4
//  305     {
//  306       if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV	R2,#0x1b
        MOV	R3,#0x0
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R0,?V0 + 0
        MOV	R1,?V0 + 1
        MOV	DPTR,#ZMac_ScanBuf
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        MOV	A,R0
        JNZ	??ZMacScanReq_5
        MOV	A,R1
??ZMacScanReq_5:
        JNZ	??ZMacScanReq_6
//  307       {
//  308         return MAC_NO_RESOURCES;
??ZMacScanReq_7:
        MOV	R1,#0x1a
        LJMP	??ZMacScanReq_2
//  309       }
//  310       osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
??ZMacScanReq_6:
        ; Setup parameters for call to function osal_memset
        MOV	R4,#0x1b
        MOV	R5,#0x0
        MOV	R1,#0x0
        MOV	DPTR,#(osal_memset & 0xffff)
        MOV	A,#((osal_memset >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  311       pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
        MOV	DPTR,#ZMac_ScanBuf
        MOVX	A,@DPTR
        ADD	A,#0xb
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R6
        ADD	A,#0x13
        MOV	DPL,A
        MOV	A,R7
        LCALL	??Subroutine4_0
??CrossCallReturnLabel_13:
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        SJMP	??ZMacScanReq_3
//  312     }
//  313     else if (pData->MaxResults > 0)
??ZMacScanReq_4:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        JZ	??ZMacScanReq_3
//  314     {
//  315       if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
//  316            osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
        MOV	A,R6
        ADD	A,#0x13
        MOV	?V0 + 0,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	?V0 + 1,A
        ; Setup parameters for call to function osal_mem_alloc
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	B,#0x21
        MUL	AB
        MOV	R2,A
        MOV	R3,B
        MOV	DPTR,#(osal_mem_alloc & 0xffff)
        MOV	A,#((osal_mem_alloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOV	A,R2
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R3
        MOVX	@DPTR,A
        MOV	DPL,?V0 + 0
        MOV	DPH,?V0 + 1
        MOVX	A,@DPTR
        MOV	R0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#ZMac_ScanBuf
        MOV	A,R0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R1
        MOVX	@DPTR,A
        MOV	DPTR,#ZMac_ScanBuf
        MOVX	A,@DPTR
        JNZ	??ZMacScanReq_8
        INC	DPTR
        MOVX	A,@DPTR
??ZMacScanReq_8:
        JNZ	$+5
        LJMP	??ZMacScanReq_7
//  317       {
//  318         return MAC_NO_RESOURCES;
//  319       }
//  320     }
//  321   }
//  322 
//  323   /* Right now, set security to zero */
//  324   pData->Sec.SecurityLevel = false;
??ZMacScanReq_3:
        MOV	A,R6
        ADD	A,#0x10
        MOV	DPL,A
        MOV	A,R7
        LCALL	??Subroutine2_0
//  325 
//  326   /* Channel Page */
//  327   pData->ChannelPage = 0x00;
??CrossCallReturnLabel_7:
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
//  328 
//  329   MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeScanReq
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        MOV	DPTR,#(MAC_MlmeScanReq & 0xffff)
        MOV	A,#((MAC_MlmeScanReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  330 
//  331   return ZMacSuccess;
        MOV	R1,#0x0
        CFI EndBlock cfiBlock34
??ZMacScanReq_2:
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
//  332 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV	R7,#0x4
        LJMP	?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock35
//  333 
//  334 
//  335 /********************************************************************************************************
//  336  * @fn      ZMacStartReq
//  337  *
//  338  * @brief   This function is called to tell the MAC to transmit beacons
//  339  *          and become a coordinator.
//  340  *
//  341  * @param   structure with info need send it.
//  342  *
//  343  * @return  status
//  344  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  345 ROOT uint8 ZMacStartReq( ZMacStartReq_t *pData )
ZMacStartReq:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function ZMacStartReq
//  346 {
        FUNCALL ZMacStartReq, MAC_MlmeSetReq
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        FUNCALL ZMacStartReq, MAC_MlmeStartReq
        LOCFRAME XSTACK, 9, STACK
        ARGFRAME XSTACK, 9, STACK
        MOV	A,#-0x8
        LCALL	?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV	A,R2
        MOV	R6,A
        MOV	A,R3
        MOV	R7,A
//  347   uint8 stat;
//  348 
//  349   // Probably want to keep the receiver on
//  350   stat = true;
        MOV	A,#0x1
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//  351   MAC_MlmeSetReq( MAC_RX_ON_WHEN_IDLE, &stat );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	R1,#0x52
        MOV	DPTR,#(MAC_MlmeSetReq & 0xffff)
        MOV	A,#((MAC_MlmeSetReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  352 
//  353   /* Right now, set security to zero */
//  354   pData->RealignSec.SecurityLevel = false;
        MOV	A,R6
        ADD	A,#0x15
        MOV	DPL,A
        MOV	A,R7
        LCALL	??Subroutine2_0
//  355   pData->BeaconSec.SecurityLevel = false;
??CrossCallReturnLabel_8:
        MOV	A,R6
        ADD	A,#0x20
        LCALL	?Subroutine1
//  356 
//  357 
//  358   MAC_MlmeStartReq((macMlmeStartReq_t *) pData);
??CrossCallReturnLabel_3:
        MOV	DPTR,#(MAC_MlmeStartReq & 0xffff)
        MOV	A,#((MAC_MlmeStartReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  359 
//  360   // MAC does not issue mlmeStartConfirm(), so we have to
//  361   // mlmeStartConfirm( stat );  This needs to be addressed some how
//  362 
//  363   return ZMacSuccess;
        MOV	R1,#0x0
        LJMP	?Subroutine6
        CFI EndBlock cfiBlock36
//  364 }
//  365 
//  366 /********************************************************************************************************
//  367  * @fn      ZMacSyncReq
//  368  *
//  369  * @brief   This function is called to request a sync to the current
//  370  *          networks beacons.
//  371  *
//  372  * @param   LogicalChannel -
//  373  * @param   TrackBeacon - true/false
//  374  *
//  375  * @return  status
//  376  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  377 ROOT uint8 ZMacSyncReq( ZMacSyncReq_t *pData )
ZMacSyncReq:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function ZMacSyncReq
//  378 {
        FUNCALL ZMacSyncReq, MAC_MlmeSyncReq
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  379   MAC_MlmeSyncReq( (macMlmeSyncReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeSyncReq
        MOV	DPTR,#(MAC_MlmeSyncReq & 0xffff)
        MOV	A,#((MAC_MlmeSyncReq >> 16) & 0xff)
        CFI EndBlock cfiBlock37
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
//  380   return ZMacSuccess;
//  381 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	R1,#0x0
??Subroutine7_0:
        POP	DPH
        CFI CFA_SP SP+-3
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-2
        CFI DPL0 SameValue
        RET
        CFI EndBlock cfiBlock38
//  382 
//  383 /********************************************************************************************************
//  384  * @fn      ZMacPollReq
//  385  *
//  386  * @brief   This function is called to request MAC data request poll.
//  387  *
//  388  * @param   coordAddr -
//  389  * @param   coordPanId -
//  390  * @param   SecurityEnable - true or false.
//  391  *
//  392  * @return  status
//  393  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  394 ROOT uint8 ZMacPollReq( ZMacPollReq_t *pData )
ZMacPollReq:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function ZMacPollReq
//  395 {
        FUNCALL ZMacPollReq, MAC_MlmePollReq
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  396   /* Right now, set security to zero */
//  397   pData->Sec.SecurityLevel = false;
        LCALL	?Subroutine0
//  398 
//  399   MAC_MlmePollReq ((macMlmePollReq_t *)pData);
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function MAC_MlmePollReq
        MOV	DPTR,#(MAC_MlmePollReq & 0xffff)
        MOV	A,#((MAC_MlmePollReq >> 16) & 0xff)
        SJMP	?Subroutine7
        CFI EndBlock cfiBlock39
//  400   return ( ZMacSuccess );
//  401 }
//  402 
//  403 /********************************************************************************************************
//  404  * @fn      ZMacDataReq
//  405  *
//  406  * @brief   Send a MAC Data Frame packet.
//  407  *
//  408  * @param   structure containing data and where to send it.
//  409  *
//  410  * @return  status
//  411  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  412 ROOT uint8 ZMacDataReq( ZMacDataReq_t *pData )
ZMacDataReq:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function ZMacDataReq
//  413 {
        FUNCALL ZMacDataReq, MAC_McpsDataAlloc
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        FUNCALL ZMacDataReq, osal_memcpy
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZMacDataReq, osal_memcpy
        LOCFRAME XSTACK, 16, STACK
        ARGFRAME XSTACK, 16, STACK
        FUNCALL ZMacDataReq, MAC_McpsDataReq
        LOCFRAME XSTACK, 13, STACK
        ARGFRAME XSTACK, 13, STACK
        MOV	A,#-0xd
        LCALL	?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV	?V0 + 4,R2
        MOV	?V0 + 5,R3
//  414   macMcpsDataReq_t *pBuf;
//  415 
//  416   /* Allocate memory */
//  417   pBuf = MAC_McpsDataAlloc(pData->msduLength, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
        ; Setup parameters for call to function MAC_McpsDataAlloc
        MOV	R3,#0x0
        MOV	R2,#0x0
        MOV	A,?V0 + 4
        ADD	A,#0x1b
        MOV	DPL,A
        MOV	A,?V0 + 5
        LCALL	??Subroutine4_0
??CrossCallReturnLabel_14:
        MOVX	A,@DPTR
        MOV	R1,A
        MOV	DPTR,#(MAC_McpsDataAlloc & 0xffff)
        MOV	A,#((MAC_McpsDataAlloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	R6,?V0 + 0
        MOV	R7,?V0 + 1
//  418 
//  419   if (pBuf)
        MOV	A,R6
        JNZ	??ZMacDataReq_0
        MOV	A,R7
??ZMacDataReq_0:
        JNZ	$+5
        LJMP	??ZMacDataReq_1
//  420   {
//  421     /* Copy the addresses */
//  422     osal_memcpy (&pBuf->mac, pData, sizeof (macDataReq_t));
        ; Setup parameters for call to function osal_memcpy
        MOV	?V0 + 0,?V0 + 4
        MOV	?V0 + 1,?V0 + 5
        MOV	?V0 + 2,#0x0
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	R4,#0x10
        MOV	R5,#0x0
        MOV	A,R6
        ADD	A,#0x1f
        MOV	R2,A
        MOV	A,R7
        ADDC	A,#0x0
        MOV	R3,A
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  423 
//  424     /* Copy data */
//  425     pBuf->msdu.len = pData->msduLength;
        MOV	A,?V0 + 4
        ADD	A,#0x1b
        MOV	R0,A
        MOV	A,?V0 + 5
        ADDC	A,#0x0
        MOV	R1,A
        MOV	A,R0
        MOV	R2,A
        MOV	A,R1
        MOV	R3,A
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        INC	DPTR
        INC	DPTR
        MOVX	@DPTR,A
//  426     osal_memcpy (pBuf->msdu.p, pData->msdu, pData->msduLength);
        ; Setup parameters for call to function osal_memcpy
        MOV	A,?V0 + 4
        ADD	A,#0x1c
        MOV	DPL,A
        MOV	A,?V0 + 5
        LCALL	??Subroutine4_0
??CrossCallReturnLabel_15:
        MOVX	A,@DPTR
        MOV	?V0 + 0,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	?V0 + 1,A
        MOV	R0,#?V0 + 0
        LCALL	?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV	DPL,R2
        MOV	DPH,R3
        MOVX	A,@DPTR
        MOV	R4,A
        MOV	R5,#0x0
        MOV	DPL,R6
        MOV	DPH,R7
        INC	DPTR
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R2,A
        INC	DPTR
        MOVX	A,@DPTR
        MOV	R3,A
        MOV	DPTR,#(osal_memcpy & 0xffff)
        MOV	A,#((osal_memcpy >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,#0x3
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  427 
//  428     /* Right now, set security to zero */
//  429     pBuf->sec.securityLevel = false;
        MOV	A,R6
        ADD	A,#0x1c
        LCALL	?Subroutine1
//  430 
//  431     /* Call Mac Data Request */
//  432     MAC_McpsDataReq(pBuf);
??CrossCallReturnLabel_4:
        MOV	DPTR,#(MAC_McpsDataReq & 0xffff)
        MOV	A,#((MAC_McpsDataReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  433 
//  434     return ( ZMacSuccess );
        MOV	R1,#0x0
        SJMP	??ZMacDataReq_2
//  435   }
//  436 
//  437   return MAC_NO_RESOURCES;
??ZMacDataReq_1:
        MOV	R1,#0x1a
??ZMacDataReq_2:
        MOV	R7,#0x6
        LJMP	?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock40
//  438 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOV	DPL,A
        MOV	A,R3
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 11)
??Subroutine4_0:
        ADDC	A,#0x0
        MOV	DPH,A
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOV	DPL,A
        MOV	A,R7
        LCALL	?Subroutine5
??CrossCallReturnLabel_20:
        ; Setup parameters for call to function MAC_MlmeStartReq
        ; Setup parameters for call to function MAC_McpsDataReq
        MOV	A,R6
        MOV	R2,A
        MOV	A,R7
        MOV	R3,A
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50
//  439 
//  440 /********************************************************************************************************
//  441  * @fn      ZMacPurgeReq
//  442  *
//  443  * @brief   Purge a MAC Data Frame packet.
//  444  *
//  445  * @param   MSDU data handle.
//  446  *
//  447  * @return  status
//  448  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  449 ROOT uint8 ZMacPurgeReq( byte Handle )
ZMacPurgeReq:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI Function ZMacPurgeReq
//  450 {
        FUNCALL ZMacPurgeReq, MAC_McpsPurgeReq
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  451   MAC_McpsPurgeReq( Handle );
        ; Setup parameters for call to function MAC_McpsPurgeReq
        MOV	DPTR,#(MAC_McpsPurgeReq & 0xffff)
        MOV	A,#((MAC_McpsPurgeReq >> 16) & 0xff)
        LJMP	?Subroutine7
        CFI EndBlock cfiBlock51
//  452   return ZMacSuccess;
//  453 }
//  454 
//  455 /********************************************************************************************************
//  456  * @fn      - ZMACPwrOnReq
//  457  *
//  458  * @brief   - This function requests the MAC to power on the radio hardware
//  459  *            and wake up.  When the power on procedure is complete the MAC
//  460  *            will send a MAC_PWR_ON_CNF to the application.
//  461  *
//  462  * @input   - None.
//  463  *
//  464  * @output  - None.
//  465  *
//  466  * @return  - None.
//  467  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  468 void ZMacPwrOnReq ( void )
ZMacPwrOnReq:
        CFI Block cfiBlock52 Using cfiCommon2
        CFI Function ZMacPwrOnReq
//  469 {
        FUNCALL ZMacPwrOnReq, MAC_PwrOnReq
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  470   MAC_PwrOnReq();
        ; Setup parameters for call to function MAC_PwrOnReq
        MOV	DPTR,#(MAC_PwrOnReq & 0xffff)
        MOV	A,#((MAC_PwrOnReq >> 16) & 0xff)
        CFI EndBlock cfiBlock52
        REQUIRE ?Subroutine9
        ; // Fall through to label ?Subroutine9
//  471 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiBlock53 Using cfiCommon2
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        LCALL	?BCALL               ; Banked call to: DPTR()
        POP	DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP	DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP	?BRET
        CFI EndBlock cfiBlock53
//  472 
//  473 /********************************************************************************************************
//  474  * @fn          MAC_PwrMode
//  475  *
//  476  * @brief       This function returns the current power mode of the MAC.
//  477  *
//  478  * input parameters
//  479  *
//  480  * None.
//  481  *
//  482  * output parameters
//  483  *
//  484  * None.
//  485  *
//  486  * @return      The current power mode of the MAC.
//  487  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  488 uint8 ZMac_PwrMode(void)
ZMac_PwrMode:
        CFI Block cfiBlock54 Using cfiCommon2
        CFI Function ZMac_PwrMode
//  489 {
        FUNCALL ZMac_PwrMode, MAC_PwrMode
        LOCFRAME ISTACK, 2, STACK
        ARGFRAME ISTACK, 2, STACK
        PUSH	DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH	DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  490   return (MAC_PwrMode());
        ; Setup parameters for call to function MAC_PwrMode
        MOV	DPTR,#(MAC_PwrMode & 0xffff)
        MOV	A,#((MAC_PwrMode >> 16) & 0xff)
        SJMP	?Subroutine9
        CFI EndBlock cfiBlock54
//  491 }
//  492 
//  493 /********************************************************************************************************
//  494  * @fn      ZMacSetTransmitPower
//  495  *
//  496  * @brief   Set the transmitter power according to the level setting param.
//  497  *
//  498  * @param   Valid power level setting as defined in ZMAC.h.
//  499  *
//  500  * @return  ZMacSuccess if PHY_TRANSMIT_POWER found or ZMacUnsupportedAttribute.
//  501  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  502 ROOT uint8 ZMacSetTransmitPower( ZMacTransmitPower_t level )
ZMacSetTransmitPower:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function ZMacSetTransmitPower
//  503 {
        FUNCALL ZMacSetTransmitPower, MAC_MlmeSetReq
        LOCFRAME XSTACK, 10, STACK
        ARGFRAME XSTACK, 10, STACK
        MOV	A,#-0x9
        LCALL	?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV	A,#-0x1
        LCALL	?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  504   uint8 pwr;
//  505 
//  506   if ( (level /= 2) >= 8 )
        MOV	A,R1
        CLR	C
        RRC	A
        MOV	R1,A
        CLR	C
        SUBB	A,#0x8
        JC	??ZMacSetTransmitPower_0
//  507   {
//  508     pwr = TxPowerSettings[0];
        MOV	DPTR,#??TxPowerSettings
        SJMP	??ZMacSetTransmitPower_1
//  509   }
//  510   else
//  511   {
//  512     pwr = TxPowerSettings[level];
??ZMacSetTransmitPower_0:
        MOV	A,R1
        ADD	A,#(??TxPowerSettings & 0xff)
        MOV	DPL,A
        CLR	A
        ADDC	A,#((??TxPowerSettings >> 8) & 0xff)
        MOV	DPH,A
??ZMacSetTransmitPower_1:
        CLR	A
        MOVC	A,@A+DPTR
        MOV	DPL,?XSP + 0
        MOV	DPH,?XSP + 1
        MOVX	@DPTR,A
//  513   }
//  514 
//  515   if ( MAC_MlmeSetReq( ZMacPhyTransmitPower, &pwr ) == ZSUCCESS )
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV	R2,DPL
        MOV	R3,DPH
        MOV	R1,#-0x20
        MOV	DPTR,#(MAC_MlmeSetReq & 0xffff)
        MOV	A,#((MAC_MlmeSetReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
        MOV	A,R1
        JNZ	??ZMacSetTransmitPower_2
//  516   {
//  517     //msupSetTransmitPower();
//  518     return ZMacSuccess;
        MOV	R1,#0x0
        SJMP	??ZMacSetTransmitPower_3
//  519   }
//  520 
//  521   return ZMacUnsupportedAttribute;
??ZMacSetTransmitPower_2:
        MOV	R1,#-0xc
??ZMacSetTransmitPower_3:
        MOV	A,#0x1
        LCALL	?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV	R7,#0x2
        LJMP	?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock55
//  522 }
//  523 
//  524 /********************************************************************************************************
//  525  * @fn      ZMacSendNoData
//  526  *
//  527  * @brief   This function sends an empty msg
//  528  *
//  529  * @param   DstAddr   - destination short address
//  530  *          DstPANId  - destination pan id
//  531  *
//  532  * @return  None
//  533  ********************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  534 ROOT void ZMacSendNoData ( uint16 DstAddr, uint16 DstPANId )
ZMacSendNoData:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function ZMacSendNoData
//  535 {
        FUNCALL ZMacSendNoData, MAC_McpsDataAlloc
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        FUNCALL ZMacSendNoData, MAC_McpsDataReq
        LOCFRAME XSTACK, 11, STACK
        ARGFRAME XSTACK, 11, STACK
        MOV	A,#-0xb
        LCALL	?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV	?V0 + 0,R2
        MOV	?V0 + 1,R3
        MOV	A,R4
        MOV	R6,A
        MOV	A,R5
        MOV	R7,A
//  536   macMcpsDataReq_t *pBuf;
//  537 
//  538   /* Allocate memory */
//  539   pBuf = MAC_McpsDataAlloc(0, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
        ; Setup parameters for call to function MAC_McpsDataAlloc
        MOV	R3,#0x0
        MOV	R2,#0x0
        MOV	R1,#0x0
        MOV	DPTR,#(MAC_McpsDataAlloc & 0xffff)
        MOV	A,#((MAC_McpsDataAlloc >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  540 
//  541   if (pBuf)
        MOV	A,R2
        JNZ	??ZMacSendNoData_0
        MOV	A,R3
??ZMacSendNoData_0:
        JZ	??ZMacSendNoData_1
//  542   {
//  543     /* Fill in src information */
//  544     pBuf->mac.srcAddrMode              = SADDR_MODE_SHORT;
        MOV	A,R2
        ADD	A,#0x2a
        LCALL	?Subroutine3
//  545 
//  546     /* Fill in dst information */
//  547     pBuf->mac.dstAddr.addr.shortAddr   = DstAddr;
??CrossCallReturnLabel_11:
        ADD	A,#0x1f
        LCALL	?Subroutine4
??CrossCallReturnLabel_16:
        MOV	A,?V0 + 0
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,?V0 + 1
        MOVX	@DPTR,A
//  548     pBuf->mac.dstAddr.addrMode         = SADDR_MODE_SHORT;
        MOV	A,R2
        ADD	A,#0x27
        LCALL	?Subroutine3
//  549     pBuf->mac.dstPanId                 = DstPANId;
??CrossCallReturnLabel_12:
        ADD	A,#0x28
        LCALL	?Subroutine4
??CrossCallReturnLabel_17:
        MOV	A,R6
        MOVX	@DPTR,A
        INC	DPTR
        MOV	A,R7
        MOVX	@DPTR,A
//  550 
//  551     /* Misc information */
//  552     pBuf->mac.msduHandle               = 0;
        MOV	A,R2
        ADD	A,#0x2b
        LCALL	?Subroutine2
//  553     pBuf->mac.txOptions                = ZMAC_TXOPTION_ACK | ZMAC_TXOPTION_NO_RETRANS | ZMAC_TXOPTION_NO_CNF;
??CrossCallReturnLabel_9:
        MOV	A,R2
        ADD	A,#0x2c
        LCALL	?Subroutine4
??CrossCallReturnLabel_18:
        MOV	A,#0x31
        MOVX	@DPTR,A
//  554 
//  555     /* Right now, set security to zero */
//  556     pBuf->sec.securityLevel = false;
        MOV	A,R2
        ADD	A,#0x1c
        LCALL	?Subroutine2
//  557 
//  558     /* Call Mac Data Request */
//  559     MAC_McpsDataReq(pBuf);
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function MAC_McpsDataReq
        MOV	DPTR,#(MAC_McpsDataReq & 0xffff)
        MOV	A,#((MAC_McpsDataReq >> 16) & 0xff)
        LCALL	?BCALL               ; Banked call to: DPTR()
//  560   }
//  561 
//  562 }
??ZMacSendNoData_1:
        LJMP	?Subroutine8
        CFI EndBlock cfiBlock56

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOV	DPL,A
        MOV	A,R3
        ADDC	A,#0x0
        MOV	DPH,A
        MOV	A,#0x2
        MOVX	@DPTR,A
        MOV	A,R2
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59

        END
// 
//    30 bytes in segment BANKED_CODE
//     8 bytes in segment CODE_C
// 1 128 bytes in segment NEAR_CODE
//     6 bytes in segment XDATA_Z
// 
// 1 166 bytes of CODE  memory
//     6 bytes of XDATA memory
//
//Errors: none
//Warnings: none
